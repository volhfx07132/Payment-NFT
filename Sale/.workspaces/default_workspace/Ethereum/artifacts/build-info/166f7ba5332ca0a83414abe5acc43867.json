{
	"id": "166f7ba5332ca0a83414abe5acc43867",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.4",
	"solcLongVersion": "0.8.4+commit.c7e474f2",
	"input": {
		"language": "Solidity",
		"sources": {
			"Ethereum/Presale.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../ERC20/ERC20.sol\";\r\nimport \"../Utils/ReentrancyGuard.sol\";\r\nimport \"../Utils/TransferHelper.sol\";\r\nimport \"../Utils/EnumerableSet.sol\";\r\nimport \"../Utils/Ownable.sol\";\r\nimport \"../Utils/SafeMath.sol\";\r\n\r\n\r\n\r\ncontract Presale is ReentrancyGuard, Ownable{\r\n    using EnumerableSet for EnumerableSet.AddressSet;\r\n    using SafeMath for uint256;\r\n\r\n    struct SaleInfor {\r\n        address payable presaleOwner;\r\n        ERC20 saleToken;\r\n        ERC20 baseToken;\r\n        uint256 tokenPrice;\r\n        uint256 startSale;\r\n        uint256 endSale;\r\n        uint256 minSpendPerBuyer;\r\n        uint256 maxSpendPerBuyer;\r\n        uint256 refundFee;\r\n        uint256 claimFee;\r\n        bool saleIsBaseToken;\r\n        uint256 amountTokenForSale;\r\n    }\r\n\r\n    struct BuyerInfo {\r\n        uint256 baseDeposit;\r\n        uint256 tokenOwner;\r\n        uint256 lastWithDraw;\r\n        uint256 totalTokenWithDraw;\r\n        bool isRefund;\r\n        bool isClaim;\r\n    }\r\n\r\n    struct PresaleStatus {\r\n        uint256 totalBaseCollected;\r\n        uint256 totalTokenSold;\r\n        uint256 totalTokenWithDraw;\r\n        uint256 totalBaseWithDraw;\r\n        uint256 numByer;\r\n        uint256 totalFee;\r\n        address[] admin;\r\n    }\r\n    \r\n    mapping(address => BuyerInfo) public buyerInfo;\r\n    mapping(address => uint256) public userFee;\r\n    PresaleStatus public presaleStatus;\r\n    SaleInfor public saleInfor;\r\n    IERC20 public WETH;\r\n    uint256 public feeAnyone;\r\n    EnumerableSet.AddressSet private admins; \r\n\r\n    modifier onlyAdmin() {\r\n        require(admins.contains(_msgSender()), \"Not admin\");\r\n        _;\r\n    }\r\n\r\n    modifier onlySaleOwner() {\r\n        require(_msgSender() == saleInfor.presaleOwner, \"Not sale owner\");\r\n        _;\r\n    }\r\n\r\n    constructor() payable {\r\n        WETH = ERC20(0xc778417E063141139Fce010982780140Aa0cD5Ab);\r\n        admins.add(0x6Ccb41eedA5a073076F3E7dC1614C185b5fA41eD);\r\n        admins.add(0x4f0B12bBF40Fc182559822A5b1dB6D34dbC3E016);\r\n        feeAnyone = 20;\r\n    }\r\n\r\n    function initialSaleInfor(\r\n        address payable _presaleOwner,\r\n        ERC20 _saleToken,\r\n        ERC20 _baseTOken,\r\n        uint256[7] memory datas\r\n    ) external {\r\n        saleInfor.presaleOwner = _presaleOwner;\r\n        saleInfor.saleToken = _saleToken;\r\n        saleInfor.baseToken = _baseTOken;\r\n        saleInfor.tokenPrice = datas[0] * 10** uint256(ERC20(saleInfor.saleToken).decimals());\r\n        saleInfor.startSale = datas[1];\r\n        saleInfor.endSale = datas[2];\r\n        saleInfor.minSpendPerBuyer = datas[3];\r\n        saleInfor.maxSpendPerBuyer = datas[4] * 10** uint256(ERC20(saleInfor.baseToken).decimals());\r\n        saleInfor.refundFee = datas[5];\r\n        saleInfor.claimFee = datas[6];\r\n        saleInfor.saleIsBaseToken = address(WETH) == address(saleInfor.baseToken);\r\n    } \r\n\r\n    function status() public view returns(uint256) {\r\n        if(block.timestamp < saleInfor.startSale) {\r\n            return 0; // Not Active\r\n        }else{\r\n            if(block.timestamp > saleInfor.endSale) {\r\n                return 2; // Suceess\r\n            }else{\r\n                return 1; // Active\r\n            }\r\n        }\r\n    } \r\n\r\n    function checkAdminAddress() public view returns(bool) {\r\n        return admins.contains(_msgSender());\r\n    }\r\n\r\n    function deposit(uint256 _amount) external view returns(uint256) {\r\n        require(status() == 1, \"NOT ACTIVE\"); // ACTIVE\r\n        BuyerInfo storage buyer = buyerInfo[msg.sender];\r\n        uint256 amount_in = _amount;\r\n        uint256 real_amount_in = amount_in;\r\n        uint256 fee = 0;\r\n        uint256 fullPercenFee = 1000;\r\n        require(real_amount_in >= saleInfor.minSpendPerBuyer, \r\n                \"Not enough value\"\r\n        );\r\n        require(real_amount_in <= saleInfor.maxSpendPerBuyer, \r\n                \"Overflow value\"\r\n        );\r\n        if(!checkAdminAddress()) {\r\n            real_amount_in = ((fullPercenFee.sub(feeAnyone))\r\n                             .mul(real_amount_in))\r\n                             .div(fullPercenFee);\r\n        }\r\n        uint256 remaining = saleInfor.maxSpendPerBuyer - real_amount_in;\r\n        uint256 tokenSold = (real_amount_in.\r\n                            mul(saleInfor.tokenPrice).\r\n                            div(10 ** uint256(ERC20(saleInfor.baseToken).decimals())));\r\n        return tokenSold;                \r\n    }\r\n\r\n    function getBalance(address _address) external view returns(uint256) {\r\n        return _address.balance;\r\n    }\r\n   \r\n    function backToken() external payable {\r\n        payable(msg.sender).transfer(address(this).balance);\r\n    }\r\n\r\n    function transferETH(uint256 amount) external payable {\r\n        payable(msg.sender).transfer(msg.value - amount);\r\n    }  \r\n}"
			},
			"Utils/SafeMath.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n// CAUTION\r\n// This version of SafeMath should only be used with Solidity 0.8 or later,\r\n// because it relies on the compiler's built in overflow checks.\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations.\r\n *\r\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\r\n * now has built in overflow checking.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}"
			},
			"Utils/Ownable.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./Context.sol\";\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}"
			},
			"Utils/EnumerableSet.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/structs/EnumerableSet.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Library for managing\r\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\r\n * types.\r\n *\r\n * Sets have the following properties:\r\n *\r\n * - Elements are added, removed, and checked for existence in constant time\r\n * (O(1)).\r\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\r\n *\r\n * ```\r\n * contract Example {\r\n *     // Add the library methods\r\n *     using EnumerableSet for EnumerableSet.AddressSet;\r\n *\r\n *     // Declare a set state variable\r\n *     EnumerableSet.AddressSet private mySet;\r\n * }\r\n * ```\r\n *\r\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\r\n * and `uint256` (`UintSet`) are supported.\r\n *\r\n * [WARNING]\r\n * ====\r\n *  Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable.\r\n *  See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\r\n *\r\n *  In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet.\r\n * ====\r\n */\r\nlibrary EnumerableSet {\r\n    // To implement this library for multiple types with as little code\r\n    // repetition as possible, we write it in terms of a generic Set type with\r\n    // bytes32 values.\r\n    // The Set implementation uses private functions, and user-facing\r\n    // implementations (such as AddressSet) are just wrappers around the\r\n    // underlying Set.\r\n    // This means that we can only create new EnumerableSets for types that fit\r\n    // in bytes32.\r\n\r\n    struct Set {\r\n        // Storage of set values\r\n        bytes32[] _values;\r\n        // Position of the value in the `values` array, plus 1 because index 0\r\n        // means a value is not in the set.\r\n        mapping(bytes32 => uint256) _indexes;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function _add(Set storage set, bytes32 value) private returns (bool) {\r\n        if (!_contains(set, value)) {\r\n            set._values.push(value);\r\n            // The value is stored at length-1, but we add 1 to all indexes\r\n            // and use 0 as a sentinel value\r\n            set._indexes[value] = set._values.length;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\r\n        // We read and store the value's index to prevent multiple reads from the same storage slot\r\n        uint256 valueIndex = set._indexes[value];\r\n\r\n        if (valueIndex != 0) {\r\n            // Equivalent to contains(set, value)\r\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\r\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\r\n            // This modifies the order of the array, as noted in {at}.\r\n\r\n            uint256 toDeleteIndex = valueIndex - 1;\r\n            uint256 lastIndex = set._values.length - 1;\r\n\r\n            if (lastIndex != toDeleteIndex) {\r\n                bytes32 lastValue = set._values[lastIndex];\r\n\r\n                // Move the last value to the index where the value to delete is\r\n                set._values[toDeleteIndex] = lastValue;\r\n                // Update the index for the moved value\r\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\r\n            }\r\n\r\n            // Delete the slot where the moved value was stored\r\n            set._values.pop();\r\n\r\n            // Delete the index for the deleted slot\r\n            delete set._indexes[value];\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\r\n        return set._indexes[value] != 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function _length(Set storage set) private view returns (uint256) {\r\n        return set._values.length;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\r\n        return set._values[index];\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function _values(Set storage set) private view returns (bytes32[] memory) {\r\n        return set._values;\r\n    }\r\n\r\n    // Bytes32Set\r\n\r\n    struct Bytes32Set {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _add(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _remove(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\r\n        return _contains(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(Bytes32Set storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\r\n        return _at(set._inner, index);\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\r\n        return _values(set._inner);\r\n    }\r\n\r\n    // AddressSet\r\n\r\n    struct AddressSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(AddressSet storage set, address value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(AddressSet storage set, address value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(AddressSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\r\n        return address(uint160(uint256(_at(set._inner, index))));\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function values(AddressSet storage set) internal view returns (address[] memory) {\r\n        bytes32[] memory store = _values(set._inner);\r\n        address[] memory result;\r\n\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            result := store\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    // UintSet\r\n\r\n    struct UintSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function length(UintSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\r\n        return uint256(_at(set._inner, index));\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\r\n        bytes32[] memory store = _values(set._inner);\r\n        uint256[] memory result;\r\n\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            result := store\r\n        }\r\n\r\n        return result;\r\n    }\r\n}"
			},
			"Utils/TransferHelper.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n    helper methods for interacting with ERC20 tokens that do not consistently return true/false\r\n    with the addition of a transfer function to send eth or an erc20 token\r\n*/\r\nlibrary TransferHelper {\r\n    function safeApprove(\r\n        address token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        (bool success, bytes memory data) = token.call(\r\n            abi.encodeWithSelector(0x095ea7b3, to, value)\r\n        );\r\n        require(\r\n            success && (data.length == 0 || abi.decode(data, (bool))),\r\n            \"TransferHelper: APPROVE_FAILED\"\r\n        );\r\n    }\r\n \r\n    // function safeTransfer(\r\n    //     address token,\r\n    //     address to,\r\n    //     uint256 value\r\n    // ) internal {\r\n    //     (bool success, bytes memory data) = token.call(\r\n    //         abi.encodeWithSelector(0xa9059cbb, to, value)\r\n    //     );\r\n    //     require(\r\n    //         success && (data.length == 0 || abi.decode(data, (bool))),\r\n    //         \"TransferHelper: TRANSFER_FAILED\"\r\n    //     );\r\n    // }\r\n\r\n    function safeTransferFrom(\r\n        address token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        (bool success, bytes memory data) = token.call(\r\n            abi.encodeWithSelector(0x23b872dd, from, to, value)\r\n        );\r\n        require(\r\n            success && (data.length == 0 || abi.decode(data, (bool))),\r\n            \"TransferHelper: TRANSFER_FROM_FAILED\"\r\n        );\r\n    }\r\n\r\n    // sends ETH or an erc20 token\r\n    function safeTransferBaseToken(\r\n        address token,\r\n        address payable to,\r\n        uint256 value,\r\n        bool isERC20\r\n    ) internal {\r\n        if (!isERC20) {\r\n            to.transfer(value);\r\n        } else {\r\n            (bool success, bytes memory data) = token.call(\r\n                abi.encodeWithSelector(0xa9059cbb, to, value)\r\n            );\r\n            require(\r\n                success && (data.length == 0 || abi.decode(data, (bool))),\r\n                \"TransferHelper: TRANSFER_FAILED\"\r\n            );\r\n        }\r\n    }\r\n}\r\n"
			},
			"Utils/ReentrancyGuard.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}"
			},
			"ERC20/ERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/ERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./IERC20.sol\";\r\nimport \"./IERC20Metadata.sol\";\r\nimport \"../Utils/Context.sol\";\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *z\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\r\n * instead returning `false` on failure. This behavior is nonetheless\r\n * conventional and does not conflict with the expectations of ERC20\r\n * applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * The default value of {decimals} is 18. To select a different value for\r\n     * {decimals} you should overload it.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n     * overridden;\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual override returns (uint256) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _transfer(owner, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\r\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * NOTE: Does not update the allowance if the current allowance\r\n     * is the maximum `uint256`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` and `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``from``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(owner, spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\r\n     *\r\n     * This internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, amount);\r\n\r\n        uint256 fromBalance = _balances[from];\r\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[from] = fromBalance - amount;\r\n        }\r\n        _balances[to] += amount;\r\n\r\n        emit Transfer(from, to, amount);\r\n\r\n        _afterTokenTransfer(from, to, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n        }\r\n        _totalSupply -= amount;\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\r\n     *\r\n     * Does not update the allowance amount in case of infinite allowance.\r\n     * Revert if not enough allowance is available.\r\n     *\r\n     * Might emit an {Approval} event.\r\n     */\r\n    function _spendAllowance(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * has been transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}"
			},
			"Utils/Context.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n"
			},
			"ERC20/IERC20Metadata.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./IERC20.sol\";\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint256);\r\n}\r\n"
			},
			"ERC20/IERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    \r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": true,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			}
		}
	},
	"output": {
		"contracts": {
			"ERC20/ERC20.sol": {
				"ERC20": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "string",
									"name": "name_",
									"type": "string"
								},
								{
									"internalType": "string",
									"name": "symbol_",
									"type": "string"
								}
							],
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "subtractedValue",
									"type": "uint256"
								}
							],
							"name": "decreaseAllowance",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "addedValue",
									"type": "uint256"
								}
							],
							"name": "increaseAllowance",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Implementation of the {IERC20} interface. z This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. For a generic mechanism see {ERC20PresetMinterPauser}. TIP: For a detailed writeup see our guide https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. We have followed general OpenZeppelin Contracts guidelines: functions revert instead returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC20 applications. Additionally, an {Approval} event is emitted on calls to {transferFrom}. This allows applications to reconstruct the allowance for all accounts just by listening to said events. Other implementations of the EIP may not emit these events, as it isn't required by the specification. Finally, the non-standard {decreaseAllowance} and {increaseAllowance} functions have been added to mitigate the well-known issues around setting allowances. See {IERC20-approve}.",
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "See {IERC20-allowance}."
							},
							"approve(address,uint256)": {
								"details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
							},
							"balanceOf(address)": {
								"details": "See {IERC20-balanceOf}."
							},
							"constructor": {
								"details": "Sets the values for {name} and {symbol}. The default value of {decimals} is 18. To select a different value for {decimals} you should overload it. All two of these values are immutable: they can only be set once during construction."
							},
							"decimals()": {
								"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
							},
							"decreaseAllowance(address,uint256)": {
								"details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
							},
							"increaseAllowance(address,uint256)": {
								"details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"symbol()": {
								"details": "Returns the symbol of the token, usually a shorter version of the name."
							},
							"totalSupply()": {
								"details": "See {IERC20-totalSupply}."
							},
							"transfer(address,uint256)": {
								"details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."
							},
							"transferFrom(address,address,uint256)": {
								"details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"ERC20/ERC20.sol\":1424:12997  contract ERC20 is Context, IERC20, IERC20Metadata {\r... */\n  mstore(0x40, 0x80)\n    /* \"ERC20/ERC20.sol\":2018:2134  constructor(string memory name_, string memory symbol_) {\r... */\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  mload(0x40)\n  sub(codesize, bytecodeSize)\n  dup1\n  bytecodeSize\n  dup4\n  codecopy\n  dup2\n  add\n  0x40\n  dup2\n  swap1\n  mstore\n  tag_2\n  swap2\n  tag_3\n  jump\t// in\ntag_2:\n    /* \"ERC20/ERC20.sol\":2085:2098  _name = name_ */\n  dup2\n  mload\n  tag_6\n  swap1\n    /* \"ERC20/ERC20.sol\":2085:2090  _name */\n  0x03\n  swap1\n    /* \"ERC20/ERC20.sol\":2085:2098  _name = name_ */\n  0x20\n  dup6\n  add\n  swap1\n  tag_7\n  jump\t// in\ntag_6:\n  pop\n    /* \"ERC20/ERC20.sol\":2109:2126  _symbol = symbol_ */\n  dup1\n  mload\n  tag_8\n  swap1\n    /* \"ERC20/ERC20.sol\":2109:2116  _symbol */\n  0x04\n  swap1\n    /* \"ERC20/ERC20.sol\":2109:2126  _symbol = symbol_ */\n  0x20\n  dup5\n  add\n  swap1\n  tag_7\n  jump\t// in\ntag_8:\n  pop\n    /* \"ERC20/ERC20.sol\":2018:2134  constructor(string memory name_, string memory symbol_) {\r... */\n  pop\n  pop\n    /* \"ERC20/ERC20.sol\":1424:12997  contract ERC20 is Context, IERC20, IERC20Metadata {\r... */\n  jump(tag_21)\ntag_7:\n  dup3\n  dup1\n  sload\n  tag_10\n  swap1\n  tag_11\n  jump\t// in\ntag_10:\n  swap1\n  0x00\n  mstore\n  keccak256(0x00, 0x20)\n  swap1\n  0x1f\n  add\n  0x20\n  swap1\n  div\n  dup2\n  add\n  swap3\n  dup3\n  tag_13\n  jumpi\n  0x00\n  dup6\n  sstore\n  jump(tag_16)\ntag_13:\n  dup3\n  0x1f\n  lt\n  tag_14\n  jumpi\n  dup1\n  mload\n  not(0xff)\n  and\n  dup4\n  dup1\n  add\n  or\n  dup6\n  sstore\n  jump(tag_16)\ntag_14:\n  dup3\n  dup1\n  add\n  0x01\n  add\n  dup6\n  sstore\n  dup3\n  iszero\n  tag_16\n  jumpi\n  swap2\n  dup3\n  add\ntag_15:\n  dup3\n  dup2\n  gt\n  iszero\n  tag_16\n  jumpi\n  dup3\n  mload\n  dup3\n  sstore\n  swap2\n  0x20\n  add\n  swap2\n  swap1\n  0x01\n  add\n  swap1\n  jump(tag_15)\ntag_16:\n  pop\n  tag_17\n  swap3\n  swap2\n  pop\n  tag_18\n  jump\t// in\ntag_17:\n  pop\n  swap1\n  jump\t// out\ntag_18:\ntag_19:\n  dup1\n  dup3\n  gt\n  iszero\n  tag_17\n  jumpi\n  0x00\n  dup2\n  sstore\n  0x01\n  add\n  jump(tag_19)\n    /* \"#utility.yul\":14:923   */\ntag_22:\n    /* \"#utility.yul\":68:73   */\n  0x00\n    /* \"#utility.yul\":121:124   */\n  dup3\n    /* \"#utility.yul\":114:118   */\n  0x1f\n    /* \"#utility.yul\":106:112   */\n  dup4\n    /* \"#utility.yul\":102:119   */\n  add\n    /* \"#utility.yul\":98:125   */\n  slt\n    /* \"#utility.yul\":88:90   */\n  tag_24\n  jumpi\n    /* \"#utility.yul\":143:148   */\n  dup1\n    /* \"#utility.yul\":136:141   */\n  dup2\n    /* \"#utility.yul\":129:149   */\n  revert\n    /* \"#utility.yul\":88:90   */\ntag_24:\n    /* \"#utility.yul\":170:183   */\n  dup2\n  mload\n  sub(shl(0x40, 0x01), 0x01)\n    /* \"#utility.yul\":232:242   */\n  dup1\n  dup3\n  gt\n    /* \"#utility.yul\":229:231   */\n  iszero\n  tag_26\n  jumpi\n    /* \"#utility.yul\":245:263   */\n  tag_26\n  tag_27\n  jump\t// in\ntag_26:\n    /* \"#utility.yul\":320:322   */\n  0x40\n    /* \"#utility.yul\":314:323   */\n  mload\n    /* \"#utility.yul\":288:290   */\n  0x1f\n    /* \"#utility.yul\":374:387   */\n  dup4\n  add\n  not(0x1f)\n    /* \"#utility.yul\":370:392   */\n  swap1\n  dup2\n  and\n    /* \"#utility.yul\":394:396   */\n  0x3f\n    /* \"#utility.yul\":366:397   */\n  add\n    /* \"#utility.yul\":362:402   */\n  and\n    /* \"#utility.yul\":350:403   */\n  dup2\n  add\n  swap1\n    /* \"#utility.yul\":418:436   */\n  dup3\n  dup3\n  gt\n    /* \"#utility.yul\":438:460   */\n  dup2\n  dup4\n  lt\n    /* \"#utility.yul\":415:461   */\n  or\n    /* \"#utility.yul\":412:414   */\n  iszero\n  tag_29\n  jumpi\n    /* \"#utility.yul\":464:482   */\n  tag_29\n  tag_27\n  jump\t// in\ntag_29:\n    /* \"#utility.yul\":504:514   */\n  dup2\n    /* \"#utility.yul\":500:502   */\n  0x40\n    /* \"#utility.yul\":493:515   */\n  mstore\n    /* \"#utility.yul\":539:541   */\n  dup4\n    /* \"#utility.yul\":531:537   */\n  dup2\n    /* \"#utility.yul\":524:542   */\n  mstore\n    /* \"#utility.yul\":561:565   */\n  0x20\n    /* \"#utility.yul\":551:565   */\n  swap3\n  pop\n    /* \"#utility.yul\":606:609   */\n  dup7\n    /* \"#utility.yul\":601:603   */\n  dup4\n    /* \"#utility.yul\":596:598   */\n  dup6\n    /* \"#utility.yul\":588:594   */\n  dup9\n    /* \"#utility.yul\":584:599   */\n  add\n    /* \"#utility.yul\":580:604   */\n  add\n    /* \"#utility.yul\":577:610   */\n  gt\n    /* \"#utility.yul\":574:576   */\n  iszero\n  tag_30\n  jumpi\n    /* \"#utility.yul\":627:632   */\n  dup5\n    /* \"#utility.yul\":620:625   */\n  dup6\n    /* \"#utility.yul\":613:633   */\n  revert\n    /* \"#utility.yul\":574:576   */\ntag_30:\n    /* \"#utility.yul\":653:658   */\n  dup5\n    /* \"#utility.yul\":644:658   */\n  swap2\n  pop\n    /* \"#utility.yul\":667:800   */\ntag_31:\n    /* \"#utility.yul\":681:683   */\n  dup4\n    /* \"#utility.yul\":678:679   */\n  dup3\n    /* \"#utility.yul\":675:684   */\n  lt\n    /* \"#utility.yul\":667:800   */\n  iszero\n  tag_33\n  jumpi\n    /* \"#utility.yul\":769:783   */\n  dup6\n  dup3\n  add\n    /* \"#utility.yul\":765:788   */\n  dup4\n  add\n    /* \"#utility.yul\":759:789   */\n  mload\n    /* \"#utility.yul\":738:752   */\n  dup2\n  dup4\n  add\n    /* \"#utility.yul\":734:757   */\n  dup5\n  add\n    /* \"#utility.yul\":727:790   */\n  mstore\n    /* \"#utility.yul\":692:702   */\n  swap1\n  dup3\n  add\n  swap1\n    /* \"#utility.yul\":667:800   */\n  jump(tag_31)\ntag_33:\n    /* \"#utility.yul\":818:820   */\n  dup4\n    /* \"#utility.yul\":815:816   */\n  dup3\n    /* \"#utility.yul\":812:821   */\n  gt\n    /* \"#utility.yul\":809:811   */\n  iszero\n  tag_34\n  jumpi\n    /* \"#utility.yul\":877:882   */\n  dup5\n    /* \"#utility.yul\":872:874   */\n  dup4\n    /* \"#utility.yul\":867:869   */\n  dup6\n    /* \"#utility.yul\":859:865   */\n  dup4\n    /* \"#utility.yul\":855:870   */\n  add\n    /* \"#utility.yul\":851:875   */\n  add\n    /* \"#utility.yul\":844:883   */\n  mstore\n    /* \"#utility.yul\":809:811   */\ntag_34:\n    /* \"#utility.yul\":911:917   */\n  swap7\n    /* \"#utility.yul\":78:923   */\n  swap6\n  pop\n  pop\n  pop\n  pop\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":928:1520   */\ntag_3:\n    /* \"#utility.yul\":1027:1033   */\n  0x00\n    /* \"#utility.yul\":1035:1041   */\n  dup1\n    /* \"#utility.yul\":1088:1090   */\n  0x40\n    /* \"#utility.yul\":1076:1085   */\n  dup4\n    /* \"#utility.yul\":1067:1074   */\n  dup6\n    /* \"#utility.yul\":1063:1086   */\n  sub\n    /* \"#utility.yul\":1059:1091   */\n  slt\n    /* \"#utility.yul\":1056:1058   */\n  iszero\n  tag_36\n  jumpi\n    /* \"#utility.yul\":1109:1115   */\n  dup2\n    /* \"#utility.yul\":1101:1107   */\n  dup3\n    /* \"#utility.yul\":1094:1116   */\n  revert\n    /* \"#utility.yul\":1056:1058   */\ntag_36:\n    /* \"#utility.yul\":1141:1157   */\n  dup3\n  mload\n  sub(shl(0x40, 0x01), 0x01)\n    /* \"#utility.yul\":1206:1220   */\n  dup1\n  dup3\n  gt\n    /* \"#utility.yul\":1203:1205   */\n  iszero\n  tag_37\n  jumpi\n    /* \"#utility.yul\":1238:1244   */\n  dup4\n    /* \"#utility.yul\":1230:1236   */\n  dup5\n    /* \"#utility.yul\":1223:1245   */\n  revert\n    /* \"#utility.yul\":1203:1205   */\ntag_37:\n    /* \"#utility.yul\":1266:1327   */\n  tag_38\n    /* \"#utility.yul\":1319:1326   */\n  dup7\n    /* \"#utility.yul\":1310:1316   */\n  dup4\n    /* \"#utility.yul\":1299:1308   */\n  dup8\n    /* \"#utility.yul\":1295:1317   */\n  add\n    /* \"#utility.yul\":1266:1327   */\n  tag_22\n  jump\t// in\ntag_38:\n    /* \"#utility.yul\":1256:1327   */\n  swap4\n  pop\n    /* \"#utility.yul\":1373:1375   */\n  0x20\n    /* \"#utility.yul\":1362:1371   */\n  dup6\n    /* \"#utility.yul\":1358:1376   */\n  add\n    /* \"#utility.yul\":1352:1377   */\n  mload\n    /* \"#utility.yul\":1336:1377   */\n  swap2\n  pop\n    /* \"#utility.yul\":1402:1404   */\n  dup1\n    /* \"#utility.yul\":1392:1400   */\n  dup3\n    /* \"#utility.yul\":1389:1405   */\n  gt\n    /* \"#utility.yul\":1386:1388   */\n  iszero\n  tag_39\n  jumpi\n    /* \"#utility.yul\":1423:1429   */\n  dup3\n    /* \"#utility.yul\":1415:1421   */\n  dup4\n    /* \"#utility.yul\":1408:1430   */\n  revert\n    /* \"#utility.yul\":1386:1388   */\ntag_39:\n  pop\n    /* \"#utility.yul\":1451:1514   */\n  tag_40\n    /* \"#utility.yul\":1506:1513   */\n  dup6\n    /* \"#utility.yul\":1495:1503   */\n  dup3\n    /* \"#utility.yul\":1484:1493   */\n  dup7\n    /* \"#utility.yul\":1480:1504   */\n  add\n    /* \"#utility.yul\":1451:1514   */\n  tag_22\n  jump\t// in\ntag_40:\n    /* \"#utility.yul\":1441:1514   */\n  swap2\n  pop\n  pop\n    /* \"#utility.yul\":1046:1520   */\n  swap3\n  pop\n  swap3\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":1525:1905   */\ntag_11:\n    /* \"#utility.yul\":1604:1605   */\n  0x01\n    /* \"#utility.yul\":1600:1612   */\n  dup2\n  dup2\n  shr\n  swap1\n    /* \"#utility.yul\":1647:1659   */\n  dup3\n  and\n  dup1\n    /* \"#utility.yul\":1668:1670   */\n  tag_42\n  jumpi\n    /* \"#utility.yul\":1722:1726   */\n  0x7f\n    /* \"#utility.yul\":1714:1720   */\n  dup3\n    /* \"#utility.yul\":1710:1727   */\n  and\n    /* \"#utility.yul\":1700:1727   */\n  swap2\n  pop\n    /* \"#utility.yul\":1668:1670   */\ntag_42:\n    /* \"#utility.yul\":1775:1777   */\n  0x20\n    /* \"#utility.yul\":1767:1773   */\n  dup3\n    /* \"#utility.yul\":1764:1778   */\n  lt\n    /* \"#utility.yul\":1744:1762   */\n  dup2\n    /* \"#utility.yul\":1741:1779   */\n  eq\n    /* \"#utility.yul\":1738:1740   */\n  iszero\n  tag_43\n  jumpi\n    /* \"#utility.yul\":1821:1831   */\n  0x4e487b71\n    /* \"#utility.yul\":1816:1819   */\n  0xe0\n    /* \"#utility.yul\":1812:1832   */\n  shl\n    /* \"#utility.yul\":1809:1810   */\n  0x00\n    /* \"#utility.yul\":1802:1833   */\n  mstore\n    /* \"#utility.yul\":1856:1860   */\n  0x22\n    /* \"#utility.yul\":1853:1854   */\n  0x04\n    /* \"#utility.yul\":1846:1861   */\n  mstore\n    /* \"#utility.yul\":1884:1888   */\n  0x24\n    /* \"#utility.yul\":1881:1882   */\n  0x00\n    /* \"#utility.yul\":1874:1889   */\n  revert\n    /* \"#utility.yul\":1738:1740   */\ntag_43:\n  pop\n    /* \"#utility.yul\":1580:1905   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":1910:2037   */\ntag_27:\n    /* \"#utility.yul\":1971:1981   */\n  0x4e487b71\n    /* \"#utility.yul\":1966:1969   */\n  0xe0\n    /* \"#utility.yul\":1962:1982   */\n  shl\n    /* \"#utility.yul\":1959:1960   */\n  0x00\n    /* \"#utility.yul\":1952:1983   */\n  mstore\n    /* \"#utility.yul\":2002:2006   */\n  0x41\n    /* \"#utility.yul\":1999:2000   */\n  0x04\n    /* \"#utility.yul\":1992:2007   */\n  mstore\n    /* \"#utility.yul\":2026:2030   */\n  0x24\n    /* \"#utility.yul\":2023:2024   */\n  0x00\n    /* \"#utility.yul\":2016:2031   */\n  revert\n    /* \"#utility.yul\":1942:2037   */\ntag_21:\n    /* \"ERC20/ERC20.sol\":1424:12997  contract ERC20 is Context, IERC20, IERC20Metadata {\r... */\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"ERC20/ERC20.sol\":1424:12997  contract ERC20 is Context, IERC20, IERC20Metadata {\r... */\n      mstore(0x40, 0x80)\n      callvalue\n      dup1\n      iszero\n      tag_1\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_1:\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x39509351\n      gt\n      tag_14\n      jumpi\n      dup1\n      0x39509351\n      eq\n      tag_8\n      jumpi\n      dup1\n      0x70a08231\n      eq\n      tag_9\n      jumpi\n      dup1\n      0x95d89b41\n      eq\n      tag_10\n      jumpi\n      dup1\n      0xa457c2d7\n      eq\n      tag_11\n      jumpi\n      dup1\n      0xa9059cbb\n      eq\n      tag_12\n      jumpi\n      dup1\n      0xdd62ed3e\n      eq\n      tag_13\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_14:\n      dup1\n      0x06fdde03\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x095ea7b3\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x18160ddd\n      eq\n      tag_5\n      jumpi\n      dup1\n      0x23b872dd\n      eq\n      tag_6\n      jumpi\n      dup1\n      0x313ce567\n      eq\n      tag_7\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"ERC20/ERC20.sol\":2204:2304  function name() public view virtual override returns (string memory) {\r... */\n    tag_3:\n      tag_15\n      tag_16\n      jump\t// in\n    tag_15:\n      mload(0x40)\n      tag_17\n      swap2\n      swap1\n      tag_18\n      jump\t// in\n    tag_17:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"ERC20/ERC20.sol\":4557:4758  function approve(address spender, uint256 amount) public virtual override returns (bool) {\r... */\n    tag_4:\n      tag_19\n      tag_20\n      calldatasize\n      0x04\n      tag_21\n      jump\t// in\n    tag_20:\n      tag_22\n      jump\t// in\n    tag_19:\n      mload(0x40)\n        /* \"#utility.yul\":1445:1459   */\n      swap1\n      iszero\n        /* \"#utility.yul\":1438:1460   */\n      iszero\n        /* \"#utility.yul\":1420:1461   */\n      dup2\n      mstore\n        /* \"#utility.yul\":1408:1410   */\n      0x20\n        /* \"#utility.yul\":1393:1411   */\n      add\n        /* \"ERC20/ERC20.sol\":4557:4758  function approve(address spender, uint256 amount) public virtual override returns (bool) {\r... */\n      tag_17\n        /* \"#utility.yul\":1375:1467   */\n      jump\n        /* \"ERC20/ERC20.sol\":3326:3434  function totalSupply() public view virtual override returns (uint256) {\r... */\n    tag_5:\n        /* \"ERC20/ERC20.sol\":3414:3426  _totalSupply */\n      sload(0x02)\n        /* \"ERC20/ERC20.sol\":3326:3434  function totalSupply() public view virtual override returns (uint256) {\r... */\n    tag_25:\n      mload(0x40)\n        /* \"#utility.yul\":5015:5040   */\n      swap1\n      dup2\n      mstore\n        /* \"#utility.yul\":5003:5005   */\n      0x20\n        /* \"#utility.yul\":4988:5006   */\n      add\n        /* \"ERC20/ERC20.sol\":3326:3434  function totalSupply() public view virtual override returns (uint256) {\r... */\n      tag_17\n        /* \"#utility.yul\":4970:5046   */\n      jump\n        /* \"ERC20/ERC20.sol\":5338:5633  function transferFrom(\r... */\n    tag_6:\n      tag_19\n      tag_30\n      calldatasize\n      0x04\n      tag_31\n      jump\t// in\n    tag_30:\n      tag_32\n      jump\t// in\n        /* \"ERC20/ERC20.sol\":3166:3261  function decimals() public view virtual override returns (uint256) {\r... */\n    tag_7:\n        /* \"ERC20/ERC20.sol\":3251:3253  18 */\n      0x12\n        /* \"ERC20/ERC20.sol\":3166:3261  function decimals() public view virtual override returns (uint256) {\r... */\n      jump(tag_25)\n        /* \"ERC20/ERC20.sol\":6042:6280  function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r... */\n    tag_8:\n      tag_19\n      tag_38\n      calldatasize\n      0x04\n      tag_21\n      jump\t// in\n    tag_38:\n      tag_39\n      jump\t// in\n        /* \"ERC20/ERC20.sol\":3497:3624  function balanceOf(address account) public view virtual override returns (uint256) {\r... */\n    tag_9:\n      tag_25\n      tag_42\n      calldatasize\n      0x04\n      tag_43\n      jump\t// in\n    tag_42:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"ERC20/ERC20.sol\":3598:3616  _balances[account] */\n      and\n        /* \"ERC20/ERC20.sol\":3571:3578  uint256 */\n      0x00\n        /* \"ERC20/ERC20.sol\":3598:3616  _balances[account] */\n      swap1\n      dup2\n      mstore\n      0x20\n      dup2\n      swap1\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n      swap1\n        /* \"ERC20/ERC20.sol\":3497:3624  function balanceOf(address account) public view virtual override returns (uint256) {\r... */\n      jump\n        /* \"ERC20/ERC20.sol\":2423:2527  function symbol() public view virtual override returns (string memory) {\r... */\n    tag_10:\n      tag_15\n      tag_47\n      jump\t// in\n        /* \"ERC20/ERC20.sol\":6783:7219  function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r... */\n    tag_11:\n      tag_19\n      tag_50\n      calldatasize\n      0x04\n      tag_21\n      jump\t// in\n    tag_50:\n      tag_51\n      jump\t// in\n        /* \"ERC20/ERC20.sol\":3830:4023  function transfer(address to, uint256 amount) public virtual override returns (bool) {\r... */\n    tag_12:\n      tag_19\n      tag_54\n      calldatasize\n      0x04\n      tag_21\n      jump\t// in\n    tag_54:\n      tag_55\n      jump\t// in\n        /* \"ERC20/ERC20.sol\":4086:4237  function allowance(address owner, address spender) public view virtual override returns (uint256) {\r... */\n    tag_13:\n      tag_25\n      tag_58\n      calldatasize\n      0x04\n      tag_59\n      jump\t// in\n    tag_58:\n      tag_60\n      jump\t// in\n        /* \"ERC20/ERC20.sol\":2204:2304  function name() public view virtual override returns (string memory) {\r... */\n    tag_16:\n        /* \"ERC20/ERC20.sol\":2258:2271  string memory */\n      0x60\n        /* \"ERC20/ERC20.sol\":2291:2296  _name */\n      0x03\n        /* \"ERC20/ERC20.sol\":2284:2296  return _name */\n      dup1\n      sload\n      tag_63\n      swap1\n      tag_64\n      jump\t// in\n    tag_63:\n      dup1\n      0x1f\n      add\n      0x20\n      dup1\n      swap2\n      div\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      dup3\n      dup1\n      sload\n      tag_65\n      swap1\n      tag_64\n      jump\t// in\n    tag_65:\n      dup1\n      iszero\n      tag_66\n      jumpi\n      dup1\n      0x1f\n      lt\n      tag_67\n      jumpi\n      0x0100\n      dup1\n      dup4\n      sload\n      div\n      mul\n      dup4\n      mstore\n      swap2\n      0x20\n      add\n      swap2\n      jump(tag_66)\n    tag_67:\n      dup3\n      add\n      swap2\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      swap1\n    tag_68:\n      dup2\n      sload\n      dup2\n      mstore\n      swap1\n      0x01\n      add\n      swap1\n      0x20\n      add\n      dup1\n      dup4\n      gt\n      tag_68\n      jumpi\n      dup3\n      swap1\n      sub\n      0x1f\n      and\n      dup3\n      add\n      swap2\n    tag_66:\n      pop\n      pop\n      pop\n      pop\n      pop\n      swap1\n      pop\n        /* \"ERC20/ERC20.sol\":2204:2304  function name() public view virtual override returns (string memory) {\r... */\n      swap1\n      jump\t// out\n        /* \"ERC20/ERC20.sol\":4557:4758  function approve(address spender, uint256 amount) public virtual override returns (bool) {\r... */\n    tag_22:\n        /* \"ERC20/ERC20.sol\":4640:4644  bool */\n      0x00\n        /* \"Utils/Context.sol\":736:746  msg.sender */\n      caller\n        /* \"ERC20/ERC20.sol\":4696:4728  _approve(owner, spender, amount) */\n      tag_72\n        /* \"Utils/Context.sol\":736:746  msg.sender */\n      dup2\n        /* \"ERC20/ERC20.sol\":4712:4719  spender */\n      dup6\n        /* \"ERC20/ERC20.sol\":4721:4727  amount */\n      dup6\n        /* \"ERC20/ERC20.sol\":4696:4704  _approve */\n      tag_73\n        /* \"ERC20/ERC20.sol\":4696:4728  _approve(owner, spender, amount) */\n      jump\t// in\n    tag_72:\n      pop\n        /* \"ERC20/ERC20.sol\":4746:4750  true */\n      0x01\n      swap4\n        /* \"ERC20/ERC20.sol\":4557:4758  function approve(address spender, uint256 amount) public virtual override returns (bool) {\r... */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"ERC20/ERC20.sol\":5338:5633  function transferFrom(\r... */\n    tag_32:\n        /* \"ERC20/ERC20.sol\":5469:5473  bool */\n      0x00\n        /* \"Utils/Context.sol\":736:746  msg.sender */\n      caller\n        /* \"ERC20/ERC20.sol\":5527:5565  _spendAllowance(from, spender, amount) */\n      tag_77\n        /* \"ERC20/ERC20.sol\":5543:5547  from */\n      dup6\n        /* \"Utils/Context.sol\":736:746  msg.sender */\n      dup3\n        /* \"ERC20/ERC20.sol\":5558:5564  amount */\n      dup6\n        /* \"ERC20/ERC20.sol\":5527:5542  _spendAllowance */\n      tag_78\n        /* \"ERC20/ERC20.sol\":5527:5565  _spendAllowance(from, spender, amount) */\n      jump\t// in\n    tag_77:\n        /* \"ERC20/ERC20.sol\":5576:5603  _transfer(from, to, amount) */\n      tag_79\n        /* \"ERC20/ERC20.sol\":5586:5590  from */\n      dup6\n        /* \"ERC20/ERC20.sol\":5592:5594  to */\n      dup6\n        /* \"ERC20/ERC20.sol\":5596:5602  amount */\n      dup6\n        /* \"ERC20/ERC20.sol\":5576:5585  _transfer */\n      tag_80\n        /* \"ERC20/ERC20.sol\":5576:5603  _transfer(from, to, amount) */\n      jump\t// in\n    tag_79:\n      pop\n        /* \"ERC20/ERC20.sol\":5621:5625  true */\n      0x01\n      swap5\n        /* \"ERC20/ERC20.sol\":5338:5633  function transferFrom(\r... */\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"ERC20/ERC20.sol\":6042:6280  function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r... */\n    tag_39:\n        /* \"ERC20/ERC20.sol\":6130:6134  bool */\n      0x00\n        /* \"Utils/Context.sol\":736:746  msg.sender */\n      caller\n        /* \"ERC20/ERC20.sol\":6186:6250  _approve(owner, spender, allowance(owner, spender) + addedValue) */\n      tag_72\n        /* \"Utils/Context.sol\":736:746  msg.sender */\n      dup2\n        /* \"ERC20/ERC20.sol\":6202:6209  spender */\n      dup6\n        /* \"ERC20/ERC20.sol\":6239:6249  addedValue */\n      dup6\n        /* \"ERC20/ERC20.sol\":6211:6236  allowance(owner, spender) */\n      tag_85\n        /* \"Utils/Context.sol\":736:746  msg.sender */\n      dup4\n        /* \"ERC20/ERC20.sol\":6202:6209  spender */\n      dup4\n        /* \"ERC20/ERC20.sol\":6211:6220  allowance */\n      tag_60\n        /* \"ERC20/ERC20.sol\":6211:6236  allowance(owner, spender) */\n      jump\t// in\n    tag_85:\n        /* \"ERC20/ERC20.sol\":6211:6249  allowance(owner, spender) + addedValue */\n      tag_86\n      swap2\n      swap1\n      tag_87\n      jump\t// in\n    tag_86:\n        /* \"ERC20/ERC20.sol\":6186:6194  _approve */\n      tag_73\n        /* \"ERC20/ERC20.sol\":6186:6250  _approve(owner, spender, allowance(owner, spender) + addedValue) */\n      jump\t// in\n        /* \"ERC20/ERC20.sol\":2423:2527  function symbol() public view virtual override returns (string memory) {\r... */\n    tag_47:\n        /* \"ERC20/ERC20.sol\":2479:2492  string memory */\n      0x60\n        /* \"ERC20/ERC20.sol\":2512:2519  _symbol */\n      0x04\n        /* \"ERC20/ERC20.sol\":2505:2519  return _symbol */\n      dup1\n      sload\n      tag_63\n      swap1\n      tag_64\n      jump\t// in\n        /* \"ERC20/ERC20.sol\":6783:7219  function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r... */\n    tag_51:\n        /* \"ERC20/ERC20.sol\":6876:6880  bool */\n      0x00\n        /* \"Utils/Context.sol\":736:746  msg.sender */\n      caller\n        /* \"ERC20/ERC20.sol\":6876:6880  bool */\n      dup2\n        /* \"ERC20/ERC20.sol\":6959:6984  allowance(owner, spender) */\n      tag_97\n        /* \"Utils/Context.sol\":736:746  msg.sender */\n      dup3\n        /* \"ERC20/ERC20.sol\":6976:6983  spender */\n      dup7\n        /* \"ERC20/ERC20.sol\":6959:6968  allowance */\n      tag_60\n        /* \"ERC20/ERC20.sol\":6959:6984  allowance(owner, spender) */\n      jump\t// in\n    tag_97:\n        /* \"ERC20/ERC20.sol\":6932:6984  uint256 currentAllowance = allowance(owner, spender) */\n      swap1\n      pop\n        /* \"ERC20/ERC20.sol\":7023:7038  subtractedValue */\n      dup4\n        /* \"ERC20/ERC20.sol\":7003:7019  currentAllowance */\n      dup2\n        /* \"ERC20/ERC20.sol\":7003:7038  currentAllowance >= subtractedValue */\n      lt\n      iszero\n        /* \"ERC20/ERC20.sol\":6995:7080  require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\") */\n      tag_98\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":4665:4667   */\n      0x20\n        /* \"ERC20/ERC20.sol\":6995:7080  require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":4647:4668   */\n      mstore\n        /* \"#utility.yul\":4704:4706   */\n      0x25\n        /* \"#utility.yul\":4684:4702   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":4677:4707   */\n      mstore\n        /* \"#utility.yul\":4743:4777   */\n      0x45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77\n        /* \"#utility.yul\":4723:4741   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":4716:4778   */\n      mstore\n      shl(0xd8, 0x207a65726f)\n        /* \"#utility.yul\":4794:4812   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":4787:4822   */\n      mstore\n        /* \"#utility.yul\":4839:4858   */\n      0x84\n      add\n        /* \"ERC20/ERC20.sol\":6995:7080  require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\") */\n    tag_99:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_98:\n        /* \"ERC20/ERC20.sol\":7116:7176  _approve(owner, spender, currentAllowance - subtractedValue) */\n      tag_79\n        /* \"ERC20/ERC20.sol\":7125:7130  owner */\n      dup3\n        /* \"ERC20/ERC20.sol\":7132:7139  spender */\n      dup7\n        /* \"ERC20/ERC20.sol\":7160:7175  subtractedValue */\n      dup7\n        /* \"ERC20/ERC20.sol\":7141:7157  currentAllowance */\n      dup5\n        /* \"ERC20/ERC20.sol\":7141:7175  currentAllowance - subtractedValue */\n      sub\n        /* \"ERC20/ERC20.sol\":7116:7124  _approve */\n      tag_73\n        /* \"ERC20/ERC20.sol\":7116:7176  _approve(owner, spender, currentAllowance - subtractedValue) */\n      jump\t// in\n        /* \"ERC20/ERC20.sol\":3830:4023  function transfer(address to, uint256 amount) public virtual override returns (bool) {\r... */\n    tag_55:\n        /* \"ERC20/ERC20.sol\":3909:3913  bool */\n      0x00\n        /* \"Utils/Context.sol\":736:746  msg.sender */\n      caller\n        /* \"ERC20/ERC20.sol\":3965:3993  _transfer(owner, to, amount) */\n      tag_72\n        /* \"Utils/Context.sol\":736:746  msg.sender */\n      dup2\n        /* \"ERC20/ERC20.sol\":3982:3984  to */\n      dup6\n        /* \"ERC20/ERC20.sol\":3986:3992  amount */\n      dup6\n        /* \"ERC20/ERC20.sol\":3965:3974  _transfer */\n      tag_80\n        /* \"ERC20/ERC20.sol\":3965:3993  _transfer(owner, to, amount) */\n      jump\t// in\n        /* \"ERC20/ERC20.sol\":4086:4237  function allowance(address owner, address spender) public view virtual override returns (uint256) {\r... */\n    tag_60:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"ERC20/ERC20.sol\":4202:4220  _allowances[owner] */\n      swap2\n      dup3\n      and\n        /* \"ERC20/ERC20.sol\":4175:4182  uint256 */\n      0x00\n        /* \"ERC20/ERC20.sol\":4202:4220  _allowances[owner] */\n      swap1\n      dup2\n      mstore\n        /* \"ERC20/ERC20.sol\":4202:4213  _allowances */\n      0x01\n        /* \"ERC20/ERC20.sol\":4202:4220  _allowances[owner] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"ERC20/ERC20.sol\":4202:4229  _allowances[owner][spender] */\n      swap4\n      swap1\n      swap5\n      and\n      dup3\n      mstore\n      swap2\n      swap1\n      swap2\n      mstore\n      keccak256\n      sload\n      swap1\n        /* \"ERC20/ERC20.sol\":4086:4237  function allowance(address owner, address spender) public view virtual override returns (uint256) {\r... */\n      jump\t// out\n        /* \"ERC20/ERC20.sol\":10417:10797  function _approve(\r... */\n    tag_73:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"ERC20/ERC20.sol\":10553:10572  owner != address(0) */\n      dup4\n      and\n        /* \"ERC20/ERC20.sol\":10545:10613  require(owner != address(0), \"ERC20: approve from the zero address\") */\n      tag_108\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":4260:4262   */\n      0x20\n        /* \"ERC20/ERC20.sol\":10545:10613  require(owner != address(0), \"ERC20: approve from the zero address\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":4242:4263   */\n      mstore\n        /* \"#utility.yul\":4299:4301   */\n      0x24\n        /* \"#utility.yul\":4279:4297   */\n      dup1\n      dup3\n      add\n        /* \"#utility.yul\":4272:4302   */\n      mstore\n        /* \"#utility.yul\":4338:4372   */\n      0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464\n        /* \"#utility.yul\":4318:4336   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":4311:4373   */\n      mstore\n      shl(0xe0, 0x72657373)\n        /* \"#utility.yul\":4389:4407   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":4382:4416   */\n      mstore\n        /* \"#utility.yul\":4433:4452   */\n      0x84\n      add\n        /* \"ERC20/ERC20.sol\":10545:10613  require(owner != address(0), \"ERC20: approve from the zero address\") */\n      tag_99\n        /* \"#utility.yul\":4232:4458   */\n      jump\n        /* \"ERC20/ERC20.sol\":10545:10613  require(owner != address(0), \"ERC20: approve from the zero address\") */\n    tag_108:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"ERC20/ERC20.sol\":10632:10653  spender != address(0) */\n      dup3\n      and\n        /* \"ERC20/ERC20.sol\":10624:10692  require(spender != address(0), \"ERC20: approve to the zero address\") */\n      tag_111\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":2686:2688   */\n      0x20\n        /* \"ERC20/ERC20.sol\":10624:10692  require(spender != address(0), \"ERC20: approve to the zero address\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":2668:2689   */\n      mstore\n        /* \"#utility.yul\":2725:2727   */\n      0x22\n        /* \"#utility.yul\":2705:2723   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":2698:2728   */\n      mstore\n        /* \"#utility.yul\":2764:2798   */\n      0x45524332303a20617070726f766520746f20746865207a65726f206164647265\n        /* \"#utility.yul\":2744:2762   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":2737:2799   */\n      mstore\n      shl(0xf0, 0x7373)\n        /* \"#utility.yul\":2815:2833   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":2808:2840   */\n      mstore\n        /* \"#utility.yul\":2857:2876   */\n      0x84\n      add\n        /* \"ERC20/ERC20.sol\":10624:10692  require(spender != address(0), \"ERC20: approve to the zero address\") */\n      tag_99\n        /* \"#utility.yul\":2658:2882   */\n      jump\n        /* \"ERC20/ERC20.sol\":10624:10692  require(spender != address(0), \"ERC20: approve to the zero address\") */\n    tag_111:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"ERC20/ERC20.sol\":10705:10723  _allowances[owner] */\n      dup4\n      dup2\n      and\n      0x00\n      dup2\n      dup2\n      mstore\n        /* \"ERC20/ERC20.sol\":10705:10716  _allowances */\n      0x01\n        /* \"ERC20/ERC20.sol\":10705:10723  _allowances[owner] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"ERC20/ERC20.sol\":10705:10732  _allowances[owner][spender] */\n      swap5\n      dup8\n      and\n      dup1\n      dup5\n      mstore\n      swap5\n      dup3\n      mstore\n      swap2\n      dup3\n      swap1\n      keccak256\n        /* \"ERC20/ERC20.sol\":10705:10741  _allowances[owner][spender] = amount */\n      dup6\n      swap1\n      sstore\n        /* \"ERC20/ERC20.sol\":10757:10789  Approval(owner, spender, amount) */\n      swap1\n      mload\n        /* \"#utility.yul\":5015:5040   */\n      dup5\n      dup2\n      mstore\n        /* \"ERC20/ERC20.sol\":10757:10789  Approval(owner, spender, amount) */\n      0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925\n      swap2\n        /* \"#utility.yul\":4988:5006   */\n      add\n        /* \"ERC20/ERC20.sol\":10757:10789  Approval(owner, spender, amount) */\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"ERC20/ERC20.sol\":10417:10797  function _approve(\r... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"ERC20/ERC20.sol\":11088:11541  function _spendAllowance(\r... */\n    tag_78:\n        /* \"ERC20/ERC20.sol\":11223:11247  uint256 currentAllowance */\n      0x00\n        /* \"ERC20/ERC20.sol\":11250:11275  allowance(owner, spender) */\n      tag_116\n        /* \"ERC20/ERC20.sol\":11260:11265  owner */\n      dup5\n        /* \"ERC20/ERC20.sol\":11267:11274  spender */\n      dup5\n        /* \"ERC20/ERC20.sol\":11250:11259  allowance */\n      tag_60\n        /* \"ERC20/ERC20.sol\":11250:11275  allowance(owner, spender) */\n      jump\t// in\n    tag_116:\n        /* \"ERC20/ERC20.sol\":11223:11275  uint256 currentAllowance = allowance(owner, spender) */\n      swap1\n      pop\n      not(0x00)\n        /* \"ERC20/ERC20.sol\":11290:11306  currentAllowance */\n      dup2\n        /* \"ERC20/ERC20.sol\":11290:11327  currentAllowance != type(uint256).max */\n      eq\n        /* \"ERC20/ERC20.sol\":11286:11534  if (currentAllowance != type(uint256).max) {\r... */\n      tag_121\n      jumpi\n        /* \"ERC20/ERC20.sol\":11372:11378  amount */\n      dup2\n        /* \"ERC20/ERC20.sol\":11352:11368  currentAllowance */\n      dup2\n        /* \"ERC20/ERC20.sol\":11352:11378  currentAllowance >= amount */\n      lt\n      iszero\n        /* \"ERC20/ERC20.sol\":11344:11412  require(currentAllowance >= amount, \"ERC20: insufficient allowance\") */\n      tag_118\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":3089:3091   */\n      0x20\n        /* \"ERC20/ERC20.sol\":11344:11412  require(currentAllowance >= amount, \"ERC20: insufficient allowance\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":3071:3092   */\n      mstore\n        /* \"#utility.yul\":3128:3130   */\n      0x1d\n        /* \"#utility.yul\":3108:3126   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":3101:3131   */\n      mstore\n        /* \"#utility.yul\":3167:3198   */\n      0x45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000\n        /* \"#utility.yul\":3147:3165   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":3140:3199   */\n      mstore\n        /* \"#utility.yul\":3216:3234   */\n      0x64\n      add\n        /* \"ERC20/ERC20.sol\":11344:11412  require(currentAllowance >= amount, \"ERC20: insufficient allowance\") */\n      tag_99\n        /* \"#utility.yul\":3061:3240   */\n      jump\n        /* \"ERC20/ERC20.sol\":11344:11412  require(currentAllowance >= amount, \"ERC20: insufficient allowance\") */\n    tag_118:\n        /* \"ERC20/ERC20.sol\":11456:11507  _approve(owner, spender, currentAllowance - amount) */\n      tag_121\n        /* \"ERC20/ERC20.sol\":11465:11470  owner */\n      dup5\n        /* \"ERC20/ERC20.sol\":11472:11479  spender */\n      dup5\n        /* \"ERC20/ERC20.sol\":11500:11506  amount */\n      dup5\n        /* \"ERC20/ERC20.sol\":11481:11497  currentAllowance */\n      dup5\n        /* \"ERC20/ERC20.sol\":11481:11506  currentAllowance - amount */\n      sub\n        /* \"ERC20/ERC20.sol\":11456:11464  _approve */\n      tag_73\n        /* \"ERC20/ERC20.sol\":11456:11507  _approve(owner, spender, currentAllowance - amount) */\n      jump\t// in\n    tag_121:\n        /* \"ERC20/ERC20.sol\":11088:11541  function _spendAllowance(\r... */\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"ERC20/ERC20.sol\":7698:8369  function _transfer(\r... */\n    tag_80:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"ERC20/ERC20.sol\":7829:7847  from != address(0) */\n      dup4\n      and\n        /* \"ERC20/ERC20.sol\":7821:7889  require(from != address(0), \"ERC20: transfer from the zero address\") */\n      tag_123\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":3854:3856   */\n      0x20\n        /* \"ERC20/ERC20.sol\":7821:7889  require(from != address(0), \"ERC20: transfer from the zero address\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":3836:3857   */\n      mstore\n        /* \"#utility.yul\":3893:3895   */\n      0x25\n        /* \"#utility.yul\":3873:3891   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":3866:3896   */\n      mstore\n        /* \"#utility.yul\":3932:3966   */\n      0x45524332303a207472616e736665722066726f6d20746865207a65726f206164\n        /* \"#utility.yul\":3912:3930   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":3905:3967   */\n      mstore\n      shl(0xd8, 0x6472657373)\n        /* \"#utility.yul\":3983:4001   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":3976:4011   */\n      mstore\n        /* \"#utility.yul\":4028:4047   */\n      0x84\n      add\n        /* \"ERC20/ERC20.sol\":7821:7889  require(from != address(0), \"ERC20: transfer from the zero address\") */\n      tag_99\n        /* \"#utility.yul\":3826:4053   */\n      jump\n        /* \"ERC20/ERC20.sol\":7821:7889  require(from != address(0), \"ERC20: transfer from the zero address\") */\n    tag_123:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"ERC20/ERC20.sol\":7908:7924  to != address(0) */\n      dup3\n      and\n        /* \"ERC20/ERC20.sol\":7900:7964  require(to != address(0), \"ERC20: transfer to the zero address\") */\n      tag_126\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":2282:2284   */\n      0x20\n        /* \"ERC20/ERC20.sol\":7900:7964  require(to != address(0), \"ERC20: transfer to the zero address\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":2264:2285   */\n      mstore\n        /* \"#utility.yul\":2321:2323   */\n      0x23\n        /* \"#utility.yul\":2301:2319   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":2294:2324   */\n      mstore\n        /* \"#utility.yul\":2360:2394   */\n      0x45524332303a207472616e7366657220746f20746865207a65726f2061646472\n        /* \"#utility.yul\":2340:2358   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":2333:2395   */\n      mstore\n      shl(0xe8, 0x657373)\n        /* \"#utility.yul\":2411:2429   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":2404:2437   */\n      mstore\n        /* \"#utility.yul\":2454:2473   */\n      0x84\n      add\n        /* \"ERC20/ERC20.sol\":7900:7964  require(to != address(0), \"ERC20: transfer to the zero address\") */\n      tag_99\n        /* \"#utility.yul\":2254:2479   */\n      jump\n        /* \"ERC20/ERC20.sol\":7900:7964  require(to != address(0), \"ERC20: transfer to the zero address\") */\n    tag_126:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"ERC20/ERC20.sol\":8050:8065  _balances[from] */\n      dup4\n      and\n        /* \"ERC20/ERC20.sol\":8028:8047  uint256 fromBalance */\n      0x00\n        /* \"ERC20/ERC20.sol\":8050:8065  _balances[from] */\n      swap1\n      dup2\n      mstore\n      0x20\n      dup2\n      swap1\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n        /* \"ERC20/ERC20.sol\":8084:8105  fromBalance >= amount */\n      dup2\n      dup2\n      lt\n      iszero\n        /* \"ERC20/ERC20.sol\":8076:8148  require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\") */\n      tag_131\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":3447:3449   */\n      0x20\n        /* \"ERC20/ERC20.sol\":8076:8148  require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":3429:3450   */\n      mstore\n        /* \"#utility.yul\":3486:3488   */\n      0x26\n        /* \"#utility.yul\":3466:3484   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":3459:3489   */\n      mstore\n        /* \"#utility.yul\":3525:3559   */\n      0x45524332303a207472616e7366657220616d6f756e7420657863656564732062\n        /* \"#utility.yul\":3505:3523   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":3498:3560   */\n      mstore\n      shl(0xd0, 0x616c616e6365)\n        /* \"#utility.yul\":3576:3594   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":3569:3605   */\n      mstore\n        /* \"#utility.yul\":3622:3641   */\n      0x84\n      add\n        /* \"ERC20/ERC20.sol\":8076:8148  require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\") */\n      tag_99\n        /* \"#utility.yul\":3419:3647   */\n      jump\n        /* \"ERC20/ERC20.sol\":8076:8148  require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\") */\n    tag_131:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"ERC20/ERC20.sol\":8184:8199  _balances[from] */\n      dup1\n      dup6\n      and\n        /* \"ERC20/ERC20.sol\":8184:8193  _balances */\n      0x00\n        /* \"ERC20/ERC20.sol\":8184:8199  _balances[from] */\n      swap1\n      dup2\n      mstore\n      0x20\n      dup2\n      swap1\n      mstore\n      0x40\n      dup1\n      dup3\n      keccak256\n        /* \"ERC20/ERC20.sol\":8202:8222  fromBalance - amount */\n      dup6\n      dup6\n      sub\n        /* \"ERC20/ERC20.sol\":8184:8222  _balances[from] = fromBalance - amount */\n      swap1\n      sstore\n        /* \"ERC20/ERC20.sol\":8244:8257  _balances[to] */\n      swap2\n      dup6\n      and\n      dup2\n      mstore\n      swap1\n      dup2\n      keccak256\n        /* \"ERC20/ERC20.sol\":8244:8267  _balances[to] += amount */\n      dup1\n      sload\n        /* \"ERC20/ERC20.sol\":8216:8222  amount */\n      dup5\n      swap3\n        /* \"ERC20/ERC20.sol\":8184:8193  _balances */\n      swap1\n        /* \"ERC20/ERC20.sol\":8244:8267  _balances[to] += amount */\n      tag_134\n      swap1\n        /* \"ERC20/ERC20.sol\":8216:8222  amount */\n      dup5\n      swap1\n        /* \"ERC20/ERC20.sol\":8244:8267  _balances[to] += amount */\n      tag_87\n      jump\t// in\n    tag_134:\n      swap3\n      pop\n      pop\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"ERC20/ERC20.sol\":8300:8302  to */\n      dup3\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"ERC20/ERC20.sol\":8285:8311  Transfer(from, to, amount) */\n      and\n        /* \"ERC20/ERC20.sol\":8294:8298  from */\n      dup5\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"ERC20/ERC20.sol\":8285:8311  Transfer(from, to, amount) */\n      and\n      0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\n        /* \"ERC20/ERC20.sol\":8304:8310  amount */\n      dup5\n        /* \"ERC20/ERC20.sol\":8285:8311  Transfer(from, to, amount) */\n      mload(0x40)\n      tag_135\n      swap2\n        /* \"#utility.yul\":5015:5040   */\n      dup2\n      mstore\n        /* \"#utility.yul\":5003:5005   */\n      0x20\n        /* \"#utility.yul\":4988:5006   */\n      add\n      swap1\n        /* \"#utility.yul\":4970:5046   */\n      jump\n        /* \"ERC20/ERC20.sol\":8285:8311  Transfer(from, to, amount) */\n    tag_135:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"ERC20/ERC20.sol\":8324:8361  _afterTokenTransfer(from, to, amount) */\n      tag_121\n        /* \"ERC20/ERC20.sol\":12141:12266  function _beforeTokenTransfer(\r... */\n      jump\n        /* \"#utility.yul\":14:187   */\n    tag_141:\n        /* \"#utility.yul\":82:102   */\n      dup1\n      calldataload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":131:162   */\n      dup2\n      and\n        /* \"#utility.yul\":121:163   */\n      dup2\n      eq\n        /* \"#utility.yul\":111:113   */\n      tag_143\n      jumpi\n        /* \"#utility.yul\":177:178   */\n      0x00\n        /* \"#utility.yul\":174:175   */\n      dup1\n        /* \"#utility.yul\":167:179   */\n      revert\n        /* \"#utility.yul\":111:113   */\n    tag_143:\n        /* \"#utility.yul\":63:187   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":192:388   */\n    tag_43:\n        /* \"#utility.yul\":251:257   */\n      0x00\n        /* \"#utility.yul\":304:306   */\n      0x20\n        /* \"#utility.yul\":292:301   */\n      dup3\n        /* \"#utility.yul\":283:290   */\n      dup5\n        /* \"#utility.yul\":279:302   */\n      sub\n        /* \"#utility.yul\":275:307   */\n      slt\n        /* \"#utility.yul\":272:274   */\n      iszero\n      tag_145\n      jumpi\n        /* \"#utility.yul\":325:331   */\n      dup1\n        /* \"#utility.yul\":317:323   */\n      dup2\n        /* \"#utility.yul\":310:332   */\n      revert\n        /* \"#utility.yul\":272:274   */\n    tag_145:\n        /* \"#utility.yul\":353:382   */\n      tag_146\n        /* \"#utility.yul\":372:381   */\n      dup3\n        /* \"#utility.yul\":353:382   */\n      tag_141\n      jump\t// in\n    tag_146:\n        /* \"#utility.yul\":343:382   */\n      swap4\n        /* \"#utility.yul\":262:388   */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":393:663   */\n    tag_59:\n        /* \"#utility.yul\":461:467   */\n      0x00\n        /* \"#utility.yul\":469:475   */\n      dup1\n        /* \"#utility.yul\":522:524   */\n      0x40\n        /* \"#utility.yul\":510:519   */\n      dup4\n        /* \"#utility.yul\":501:508   */\n      dup6\n        /* \"#utility.yul\":497:520   */\n      sub\n        /* \"#utility.yul\":493:525   */\n      slt\n        /* \"#utility.yul\":490:492   */\n      iszero\n      tag_148\n      jumpi\n        /* \"#utility.yul\":543:549   */\n      dup1\n        /* \"#utility.yul\":535:541   */\n      dup2\n        /* \"#utility.yul\":528:550   */\n      revert\n        /* \"#utility.yul\":490:492   */\n    tag_148:\n        /* \"#utility.yul\":571:600   */\n      tag_149\n        /* \"#utility.yul\":590:599   */\n      dup4\n        /* \"#utility.yul\":571:600   */\n      tag_141\n      jump\t// in\n    tag_149:\n        /* \"#utility.yul\":561:600   */\n      swap2\n      pop\n        /* \"#utility.yul\":619:657   */\n      tag_150\n        /* \"#utility.yul\":653:655   */\n      0x20\n        /* \"#utility.yul\":642:651   */\n      dup5\n        /* \"#utility.yul\":638:656   */\n      add\n        /* \"#utility.yul\":619:657   */\n      tag_141\n      jump\t// in\n    tag_150:\n        /* \"#utility.yul\":609:657   */\n      swap1\n      pop\n        /* \"#utility.yul\":480:663   */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":668:1006   */\n    tag_31:\n        /* \"#utility.yul\":745:751   */\n      0x00\n        /* \"#utility.yul\":753:759   */\n      dup1\n        /* \"#utility.yul\":761:767   */\n      0x00\n        /* \"#utility.yul\":814:816   */\n      0x60\n        /* \"#utility.yul\":802:811   */\n      dup5\n        /* \"#utility.yul\":793:800   */\n      dup7\n        /* \"#utility.yul\":789:812   */\n      sub\n        /* \"#utility.yul\":785:817   */\n      slt\n        /* \"#utility.yul\":782:784   */\n      iszero\n      tag_152\n      jumpi\n        /* \"#utility.yul\":835:841   */\n      dup1\n        /* \"#utility.yul\":827:833   */\n      dup2\n        /* \"#utility.yul\":820:842   */\n      revert\n        /* \"#utility.yul\":782:784   */\n    tag_152:\n        /* \"#utility.yul\":863:892   */\n      tag_153\n        /* \"#utility.yul\":882:891   */\n      dup5\n        /* \"#utility.yul\":863:892   */\n      tag_141\n      jump\t// in\n    tag_153:\n        /* \"#utility.yul\":853:892   */\n      swap3\n      pop\n        /* \"#utility.yul\":911:949   */\n      tag_154\n        /* \"#utility.yul\":945:947   */\n      0x20\n        /* \"#utility.yul\":934:943   */\n      dup6\n        /* \"#utility.yul\":930:948   */\n      add\n        /* \"#utility.yul\":911:949   */\n      tag_141\n      jump\t// in\n    tag_154:\n        /* \"#utility.yul\":901:949   */\n      swap2\n      pop\n        /* \"#utility.yul\":996:998   */\n      0x40\n        /* \"#utility.yul\":985:994   */\n      dup5\n        /* \"#utility.yul\":981:999   */\n      add\n        /* \"#utility.yul\":968:1000   */\n      calldataload\n        /* \"#utility.yul\":958:1000   */\n      swap1\n      pop\n        /* \"#utility.yul\":772:1006   */\n      swap3\n      pop\n      swap3\n      pop\n      swap3\n      jump\t// out\n        /* \"#utility.yul\":1011:1275   */\n    tag_21:\n        /* \"#utility.yul\":1079:1085   */\n      0x00\n        /* \"#utility.yul\":1087:1093   */\n      dup1\n        /* \"#utility.yul\":1140:1142   */\n      0x40\n        /* \"#utility.yul\":1128:1137   */\n      dup4\n        /* \"#utility.yul\":1119:1126   */\n      dup6\n        /* \"#utility.yul\":1115:1138   */\n      sub\n        /* \"#utility.yul\":1111:1143   */\n      slt\n        /* \"#utility.yul\":1108:1110   */\n      iszero\n      tag_156\n      jumpi\n        /* \"#utility.yul\":1161:1167   */\n      dup2\n        /* \"#utility.yul\":1153:1159   */\n      dup3\n        /* \"#utility.yul\":1146:1168   */\n      revert\n        /* \"#utility.yul\":1108:1110   */\n    tag_156:\n        /* \"#utility.yul\":1189:1218   */\n      tag_157\n        /* \"#utility.yul\":1208:1217   */\n      dup4\n        /* \"#utility.yul\":1189:1218   */\n      tag_141\n      jump\t// in\n    tag_157:\n        /* \"#utility.yul\":1179:1218   */\n      swap5\n        /* \"#utility.yul\":1265:1267   */\n      0x20\n        /* \"#utility.yul\":1250:1268   */\n      swap4\n      swap1\n      swap4\n      add\n        /* \"#utility.yul\":1237:1269   */\n      calldataload\n      swap4\n      pop\n      pop\n      pop\n        /* \"#utility.yul\":1098:1275   */\n      jump\t// out\n        /* \"#utility.yul\":1472:2075   */\n    tag_18:\n        /* \"#utility.yul\":1584:1588   */\n      0x00\n        /* \"#utility.yul\":1613:1615   */\n      0x20\n        /* \"#utility.yul\":1642:1644   */\n      dup1\n        /* \"#utility.yul\":1631:1640   */\n      dup4\n        /* \"#utility.yul\":1624:1645   */\n      mstore\n        /* \"#utility.yul\":1674:1680   */\n      dup4\n        /* \"#utility.yul\":1668:1681   */\n      mload\n        /* \"#utility.yul\":1717:1723   */\n      dup1\n        /* \"#utility.yul\":1712:1714   */\n      dup3\n        /* \"#utility.yul\":1701:1710   */\n      dup6\n        /* \"#utility.yul\":1697:1715   */\n      add\n        /* \"#utility.yul\":1690:1724   */\n      mstore\n        /* \"#utility.yul\":1742:1746   */\n      dup3\n        /* \"#utility.yul\":1755:1895   */\n    tag_160:\n        /* \"#utility.yul\":1769:1775   */\n      dup2\n        /* \"#utility.yul\":1766:1767   */\n      dup2\n        /* \"#utility.yul\":1763:1776   */\n      lt\n        /* \"#utility.yul\":1755:1895   */\n      iszero\n      tag_162\n      jumpi\n        /* \"#utility.yul\":1864:1878   */\n      dup6\n      dup2\n      add\n        /* \"#utility.yul\":1860:1883   */\n      dup4\n      add\n        /* \"#utility.yul\":1854:1884   */\n      mload\n        /* \"#utility.yul\":1830:1847   */\n      dup6\n      dup3\n      add\n        /* \"#utility.yul\":1849:1851   */\n      0x40\n        /* \"#utility.yul\":1826:1852   */\n      add\n        /* \"#utility.yul\":1819:1885   */\n      mstore\n        /* \"#utility.yul\":1784:1794   */\n      dup3\n      add\n        /* \"#utility.yul\":1755:1895   */\n      jump(tag_160)\n    tag_162:\n        /* \"#utility.yul\":1913:1919   */\n      dup2\n        /* \"#utility.yul\":1910:1911   */\n      dup2\n        /* \"#utility.yul\":1907:1920   */\n      gt\n        /* \"#utility.yul\":1904:1906   */\n      iszero\n      tag_163\n      jumpi\n        /* \"#utility.yul\":1983:1987   */\n      dup4\n        /* \"#utility.yul\":1978:1980   */\n      0x40\n        /* \"#utility.yul\":1969:1975   */\n      dup4\n        /* \"#utility.yul\":1958:1967   */\n      dup8\n        /* \"#utility.yul\":1954:1976   */\n      add\n        /* \"#utility.yul\":1950:1981   */\n      add\n        /* \"#utility.yul\":1943:1988   */\n      mstore\n        /* \"#utility.yul\":1904:1906   */\n    tag_163:\n      pop\n        /* \"#utility.yul\":2059:2061   */\n      0x1f\n        /* \"#utility.yul\":2038:2053   */\n      add\n      not(0x1f)\n        /* \"#utility.yul\":2034:2063   */\n      and\n        /* \"#utility.yul\":2019:2064   */\n      swap3\n      swap1\n      swap3\n      add\n        /* \"#utility.yul\":2066:2068   */\n      0x40\n        /* \"#utility.yul\":2015:2069   */\n      add\n      swap4\n        /* \"#utility.yul\":1593:2075   */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5051:5280   */\n    tag_87:\n        /* \"#utility.yul\":5091:5094   */\n      0x00\n        /* \"#utility.yul\":5122:5123   */\n      dup3\n        /* \"#utility.yul\":5118:5124   */\n      not\n        /* \"#utility.yul\":5115:5116   */\n      dup3\n        /* \"#utility.yul\":5112:5125   */\n      gt\n        /* \"#utility.yul\":5109:5111   */\n      iszero\n      tag_173\n      jumpi\n      shl(0xe0, 0x4e487b71)\n        /* \"#utility.yul\":5148:5181   */\n      dup2\n      mstore\n        /* \"#utility.yul\":5204:5208   */\n      0x11\n        /* \"#utility.yul\":5201:5202   */\n      0x04\n        /* \"#utility.yul\":5194:5209   */\n      mstore\n        /* \"#utility.yul\":5234:5238   */\n      0x24\n        /* \"#utility.yul\":5155:5158   */\n      dup2\n        /* \"#utility.yul\":5222:5239   */\n      revert\n        /* \"#utility.yul\":5109:5111   */\n    tag_173:\n      pop\n        /* \"#utility.yul\":5265:5274   */\n      add\n      swap1\n        /* \"#utility.yul\":5099:5280   */\n      jump\t// out\n        /* \"#utility.yul\":5285:5665   */\n    tag_64:\n        /* \"#utility.yul\":5364:5365   */\n      0x01\n        /* \"#utility.yul\":5360:5372   */\n      dup2\n      dup2\n      shr\n      swap1\n        /* \"#utility.yul\":5407:5419   */\n      dup3\n      and\n      dup1\n        /* \"#utility.yul\":5428:5430   */\n      tag_175\n      jumpi\n        /* \"#utility.yul\":5482:5486   */\n      0x7f\n        /* \"#utility.yul\":5474:5480   */\n      dup3\n        /* \"#utility.yul\":5470:5487   */\n      and\n        /* \"#utility.yul\":5460:5487   */\n      swap2\n      pop\n        /* \"#utility.yul\":5428:5430   */\n    tag_175:\n        /* \"#utility.yul\":5535:5537   */\n      0x20\n        /* \"#utility.yul\":5527:5533   */\n      dup3\n        /* \"#utility.yul\":5524:5538   */\n      lt\n        /* \"#utility.yul\":5504:5522   */\n      dup2\n        /* \"#utility.yul\":5501:5539   */\n      eq\n        /* \"#utility.yul\":5498:5500   */\n      iszero\n      tag_176\n      jumpi\n        /* \"#utility.yul\":5581:5591   */\n      0x4e487b71\n        /* \"#utility.yul\":5576:5579   */\n      0xe0\n        /* \"#utility.yul\":5572:5592   */\n      shl\n        /* \"#utility.yul\":5569:5570   */\n      0x00\n        /* \"#utility.yul\":5562:5593   */\n      mstore\n        /* \"#utility.yul\":5616:5620   */\n      0x22\n        /* \"#utility.yul\":5613:5614   */\n      0x04\n        /* \"#utility.yul\":5606:5621   */\n      mstore\n        /* \"#utility.yul\":5644:5648   */\n      0x24\n        /* \"#utility.yul\":5641:5642   */\n      0x00\n        /* \"#utility.yul\":5634:5649   */\n      revert\n        /* \"#utility.yul\":5498:5500   */\n    tag_176:\n      pop\n        /* \"#utility.yul\":5340:5665   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n\n    auxdata: 0xa2646970667358221220c92c03cd519d545ecfd82912cd8ce8d5c8a8b337db27724fc62cc5e62f66d5be64736f6c63430008040033\n}\n",
						"bytecode": {
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:2039:10",
										"statements": [
											{
												"nodeType": "YulBlock",
												"src": "6:3:10",
												"statements": []
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "78:845:10",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "127:24:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "array",
																					"nodeType": "YulIdentifier",
																					"src": "136:5:10"
																				},
																				{
																					"name": "array",
																					"nodeType": "YulIdentifier",
																					"src": "143:5:10"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "129:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "129:20:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "129:20:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "106:6:10"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "114:4:10",
																						"type": "",
																						"value": "0x1f"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "102:3:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "102:17:10"
																			},
																			{
																				"name": "end",
																				"nodeType": "YulIdentifier",
																				"src": "121:3:10"
																			}
																		],
																		"functionName": {
																			"name": "slt",
																			"nodeType": "YulIdentifier",
																			"src": "98:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "98:27:10"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "91:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "91:35:10"
															},
															"nodeType": "YulIf",
															"src": "88:2:10"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "160:23:10",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "176:6:10"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "170:5:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "170:13:10"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "164:2:10",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "192:28:10",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "210:2:10",
																				"type": "",
																				"value": "64"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "214:1:10",
																				"type": "",
																				"value": "1"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "206:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "206:10:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "218:1:10",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "202:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "202:18:10"
															},
															"variables": [
																{
																	"name": "_2",
																	"nodeType": "YulTypedName",
																	"src": "196:2:10",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "243:22:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x41",
																				"nodeType": "YulIdentifier",
																				"src": "245:16:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "245:18:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "245:18:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "235:2:10"
																	},
																	{
																		"name": "_2",
																		"nodeType": "YulIdentifier",
																		"src": "239:2:10"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "232:2:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "232:10:10"
															},
															"nodeType": "YulIf",
															"src": "229:2:10"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "274:17:10",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "288:2:10",
																		"type": "",
																		"value": "31"
																	}
																],
																"functionName": {
																	"name": "not",
																	"nodeType": "YulIdentifier",
																	"src": "284:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "284:7:10"
															},
															"variables": [
																{
																	"name": "_3",
																	"nodeType": "YulTypedName",
																	"src": "278:2:10",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "300:23:10",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "320:2:10",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "314:5:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "314:9:10"
															},
															"variables": [
																{
																	"name": "memPtr",
																	"nodeType": "YulTypedName",
																	"src": "304:6:10",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "332:71:10",
															"value": {
																"arguments": [
																	{
																		"name": "memPtr",
																		"nodeType": "YulIdentifier",
																		"src": "354:6:10"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"name": "_1",
																										"nodeType": "YulIdentifier",
																										"src": "378:2:10"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "382:4:10",
																										"type": "",
																										"value": "0x1f"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nodeType": "YulIdentifier",
																									"src": "374:3:10"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "374:13:10"
																							},
																							{
																								"name": "_3",
																								"nodeType": "YulIdentifier",
																								"src": "389:2:10"
																							}
																						],
																						"functionName": {
																							"name": "and",
																							"nodeType": "YulIdentifier",
																							"src": "370:3:10"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "370:22:10"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "394:2:10",
																						"type": "",
																						"value": "63"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "366:3:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "366:31:10"
																			},
																			{
																				"name": "_3",
																				"nodeType": "YulIdentifier",
																				"src": "399:2:10"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "362:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "362:40:10"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "350:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "350:53:10"
															},
															"variables": [
																{
																	"name": "newFreePtr",
																	"nodeType": "YulTypedName",
																	"src": "336:10:10",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "462:22:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x41",
																				"nodeType": "YulIdentifier",
																				"src": "464:16:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "464:18:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "464:18:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "newFreePtr",
																				"nodeType": "YulIdentifier",
																				"src": "421:10:10"
																			},
																			{
																				"name": "_2",
																				"nodeType": "YulIdentifier",
																				"src": "433:2:10"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "418:2:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "418:18:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "newFreePtr",
																				"nodeType": "YulIdentifier",
																				"src": "441:10:10"
																			},
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "453:6:10"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nodeType": "YulIdentifier",
																			"src": "438:2:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "438:22:10"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "415:2:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "415:46:10"
															},
															"nodeType": "YulIf",
															"src": "412:2:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "500:2:10",
																		"type": "",
																		"value": "64"
																	},
																	{
																		"name": "newFreePtr",
																		"nodeType": "YulIdentifier",
																		"src": "504:10:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "493:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "493:22:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "493:22:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "memPtr",
																		"nodeType": "YulIdentifier",
																		"src": "531:6:10"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "539:2:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "524:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "524:18:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "524:18:10"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "551:14:10",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "561:4:10",
																"type": "",
																"value": "0x20"
															},
															"variables": [
																{
																	"name": "_4",
																	"nodeType": "YulTypedName",
																	"src": "555:2:10",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "611:24:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "array",
																					"nodeType": "YulIdentifier",
																					"src": "620:5:10"
																				},
																				{
																					"name": "array",
																					"nodeType": "YulIdentifier",
																					"src": "627:5:10"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "613:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "613:20:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "613:20:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "588:6:10"
																					},
																					{
																						"name": "_1",
																						"nodeType": "YulIdentifier",
																						"src": "596:2:10"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "584:3:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "584:15:10"
																			},
																			{
																				"name": "_4",
																				"nodeType": "YulIdentifier",
																				"src": "601:2:10"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "580:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "580:24:10"
																	},
																	{
																		"name": "end",
																		"nodeType": "YulIdentifier",
																		"src": "606:3:10"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "577:2:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "577:33:10"
															},
															"nodeType": "YulIf",
															"src": "574:2:10"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "644:14:10",
															"value": {
																"name": "array",
																"nodeType": "YulIdentifier",
																"src": "653:5:10"
															},
															"variables": [
																{
																	"name": "i",
																	"nodeType": "YulTypedName",
																	"src": "648:1:10",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "713:87:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "memPtr",
																									"nodeType": "YulIdentifier",
																									"src": "742:6:10"
																								},
																								{
																									"name": "i",
																									"nodeType": "YulIdentifier",
																									"src": "750:1:10"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "738:3:10"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "738:14:10"
																						},
																						{
																							"name": "_4",
																							"nodeType": "YulIdentifier",
																							"src": "754:2:10"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "734:3:10"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "734:23:10"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"arguments": [
																										{
																											"name": "offset",
																											"nodeType": "YulIdentifier",
																											"src": "773:6:10"
																										},
																										{
																											"name": "i",
																											"nodeType": "YulIdentifier",
																											"src": "781:1:10"
																										}
																									],
																									"functionName": {
																										"name": "add",
																										"nodeType": "YulIdentifier",
																										"src": "769:3:10"
																									},
																									"nodeType": "YulFunctionCall",
																									"src": "769:14:10"
																								},
																								{
																									"name": "_4",
																									"nodeType": "YulIdentifier",
																									"src": "785:2:10"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "765:3:10"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "765:23:10"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nodeType": "YulIdentifier",
																						"src": "759:5:10"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "759:30:10"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "727:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "727:63:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "727:63:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "678:1:10"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "681:2:10"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "675:2:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "675:9:10"
															},
															"nodeType": "YulForLoop",
															"post": {
																"nodeType": "YulBlock",
																"src": "685:19:10",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "687:15:10",
																		"value": {
																			"arguments": [
																				{
																					"name": "i",
																					"nodeType": "YulIdentifier",
																					"src": "696:1:10"
																				},
																				{
																					"name": "_4",
																					"nodeType": "YulIdentifier",
																					"src": "699:2:10"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "692:3:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "692:10:10"
																		},
																		"variableNames": [
																			{
																				"name": "i",
																				"nodeType": "YulIdentifier",
																				"src": "687:1:10"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nodeType": "YulBlock",
																"src": "671:3:10",
																"statements": []
															},
															"src": "667:133:10"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "830:63:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "memPtr",
																									"nodeType": "YulIdentifier",
																									"src": "859:6:10"
																								},
																								{
																									"name": "_1",
																									"nodeType": "YulIdentifier",
																									"src": "867:2:10"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "855:3:10"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "855:15:10"
																						},
																						{
																							"name": "_4",
																							"nodeType": "YulIdentifier",
																							"src": "872:2:10"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "851:3:10"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "851:24:10"
																				},
																				{
																					"name": "array",
																					"nodeType": "YulIdentifier",
																					"src": "877:5:10"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "844:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "844:39:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "844:39:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "815:1:10"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "818:2:10"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "812:2:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "812:9:10"
															},
															"nodeType": "YulIf",
															"src": "809:2:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "902:15:10",
															"value": {
																"name": "memPtr",
																"nodeType": "YulIdentifier",
																"src": "911:6:10"
															},
															"variableNames": [
																{
																	"name": "array",
																	"nodeType": "YulIdentifier",
																	"src": "902:5:10"
																}
															]
														}
													]
												},
												"name": "abi_decode_string_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "52:6:10",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "60:3:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "array",
														"nodeType": "YulTypedName",
														"src": "68:5:10",
														"type": ""
													}
												],
												"src": "14:909:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1046:474:10",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1092:26:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "1101:6:10"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "1109:6:10"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1094:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1094:22:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1094:22:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1067:7:10"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1076:9:10"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1063:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1063:23:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1088:2:10",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1059:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1059:32:10"
															},
															"nodeType": "YulIf",
															"src": "1056:2:10"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1127:30:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1147:9:10"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "1141:5:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1141:16:10"
															},
															"variables": [
																{
																	"name": "offset",
																	"nodeType": "YulTypedName",
																	"src": "1131:6:10",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1166:28:10",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1184:2:10",
																				"type": "",
																				"value": "64"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1188:1:10",
																				"type": "",
																				"value": "1"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "1180:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1180:10:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1192:1:10",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "1176:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1176:18:10"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "1170:2:10",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1221:26:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "1230:6:10"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "1238:6:10"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1223:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1223:22:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1223:22:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "1209:6:10"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "1217:2:10"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "1206:2:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1206:14:10"
															},
															"nodeType": "YulIf",
															"src": "1203:2:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1256:71:10",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1299:9:10"
																			},
																			{
																				"name": "offset",
																				"nodeType": "YulIdentifier",
																				"src": "1310:6:10"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1295:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1295:22:10"
																	},
																	{
																		"name": "dataEnd",
																		"nodeType": "YulIdentifier",
																		"src": "1319:7:10"
																	}
																],
																"functionName": {
																	"name": "abi_decode_string_fromMemory",
																	"nodeType": "YulIdentifier",
																	"src": "1266:28:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1266:61:10"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "1256:6:10"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1336:41:10",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1362:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1373:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1358:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1358:18:10"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "1352:5:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1352:25:10"
															},
															"variables": [
																{
																	"name": "offset_1",
																	"nodeType": "YulTypedName",
																	"src": "1340:8:10",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1406:26:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value1",
																					"nodeType": "YulIdentifier",
																					"src": "1415:6:10"
																				},
																				{
																					"name": "value1",
																					"nodeType": "YulIdentifier",
																					"src": "1423:6:10"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1408:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1408:22:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1408:22:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "offset_1",
																		"nodeType": "YulIdentifier",
																		"src": "1392:8:10"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "1402:2:10"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "1389:2:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1389:16:10"
															},
															"nodeType": "YulIf",
															"src": "1386:2:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1441:73:10",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1484:9:10"
																			},
																			{
																				"name": "offset_1",
																				"nodeType": "YulIdentifier",
																				"src": "1495:8:10"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1480:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1480:24:10"
																	},
																	{
																		"name": "dataEnd",
																		"nodeType": "YulIdentifier",
																		"src": "1506:7:10"
																	}
																],
																"functionName": {
																	"name": "abi_decode_string_fromMemory",
																	"nodeType": "YulIdentifier",
																	"src": "1451:28:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1451:63:10"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "1441:6:10"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_string_memory_ptrt_string_memory_ptr_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1004:9:10",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1015:7:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1027:6:10",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "1035:6:10",
														"type": ""
													}
												],
												"src": "928:592:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1580:325:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1590:22:10",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1604:1:10",
																		"type": "",
																		"value": "1"
																	},
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "1607:4:10"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "1600:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1600:12:10"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nodeType": "YulIdentifier",
																	"src": "1590:6:10"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1621:38:10",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "1651:4:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1657:1:10",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "1647:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1647:12:10"
															},
															"variables": [
																{
																	"name": "outOfPlaceEncoding",
																	"nodeType": "YulTypedName",
																	"src": "1625:18:10",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1698:31:10",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "1700:27:10",
																		"value": {
																			"arguments": [
																				{
																					"name": "length",
																					"nodeType": "YulIdentifier",
																					"src": "1714:6:10"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1722:4:10",
																					"type": "",
																					"value": "0x7f"
																				}
																			],
																			"functionName": {
																				"name": "and",
																				"nodeType": "YulIdentifier",
																				"src": "1710:3:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1710:17:10"
																		},
																		"variableNames": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "1700:6:10"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "1678:18:10"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "1671:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1671:26:10"
															},
															"nodeType": "YulIf",
															"src": "1668:2:10"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1788:111:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1809:1:10",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "1816:3:10",
																							"type": "",
																							"value": "224"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "1821:10:10",
																							"type": "",
																							"value": "0x4e487b71"
																						}
																					],
																					"functionName": {
																						"name": "shl",
																						"nodeType": "YulIdentifier",
																						"src": "1812:3:10"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "1812:20:10"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "1802:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1802:31:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1802:31:10"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1853:1:10",
																					"type": "",
																					"value": "4"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1856:4:10",
																					"type": "",
																					"value": "0x22"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "1846:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1846:15:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1846:15:10"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1881:1:10",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1884:4:10",
																					"type": "",
																					"value": "0x24"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1874:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1874:15:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1874:15:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "1744:18:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "1767:6:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1775:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nodeType": "YulIdentifier",
																			"src": "1764:2:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1764:14:10"
																	}
																],
																"functionName": {
																	"name": "eq",
																	"nodeType": "YulIdentifier",
																	"src": "1741:2:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1741:38:10"
															},
															"nodeType": "YulIf",
															"src": "1738:2:10"
														}
													]
												},
												"name": "extract_byte_array_length",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "data",
														"nodeType": "YulTypedName",
														"src": "1560:4:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "1569:6:10",
														"type": ""
													}
												],
												"src": "1525:380:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1942:95:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1959:1:10",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1966:3:10",
																				"type": "",
																				"value": "224"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1971:10:10",
																				"type": "",
																				"value": "0x4e487b71"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "1962:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1962:20:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1952:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1952:31:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1952:31:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1999:1:10",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2002:4:10",
																		"type": "",
																		"value": "0x41"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1992:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1992:15:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1992:15:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2023:1:10",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2026:4:10",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "2016:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2016:15:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2016:15:10"
														}
													]
												},
												"name": "panic_error_0x41",
												"nodeType": "YulFunctionDefinition",
												"src": "1910:127:10"
											}
										]
									},
									"contents": "{\n    { }\n    function abi_decode_string_fromMemory(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(array, array) }\n        let _1 := mload(offset)\n        let _2 := sub(shl(64, 1), 1)\n        if gt(_1, _2) { panic_error_0x41() }\n        let _3 := not(31)\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(and(add(_1, 0x1f), _3), 63), _3))\n        if or(gt(newFreePtr, _2), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        mstore(memPtr, _1)\n        let _4 := 0x20\n        if gt(add(add(offset, _1), _4), end) { revert(array, array) }\n        let i := array\n        for { } lt(i, _1) { i := add(i, _4) }\n        {\n            mstore(add(add(memPtr, i), _4), mload(add(add(offset, i), _4)))\n        }\n        if gt(i, _1)\n        {\n            mstore(add(add(memPtr, _1), _4), array)\n        }\n        array := memPtr\n    }\n    function abi_decode_tuple_t_string_memory_ptrt_string_memory_ptr_fromMemory(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(value0, value0) }\n        let offset := mload(headStart)\n        let _1 := sub(shl(64, 1), 1)\n        if gt(offset, _1) { revert(value0, value0) }\n        value0 := abi_decode_string_fromMemory(add(headStart, offset), dataEnd)\n        let offset_1 := mload(add(headStart, 32))\n        if gt(offset_1, _1) { revert(value1, value1) }\n        value1 := abi_decode_string_fromMemory(add(headStart, offset_1), dataEnd)\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n}",
									"id": 10,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"linkReferences": {},
							"object": "60806040523480156200001157600080fd5b5060405162000b0238038062000b028339810160408190526200003491620001c1565b81516200004990600390602085019062000068565b5080516200005f90600490602084019062000068565b5050506200027b565b828054620000769062000228565b90600052602060002090601f0160209004810192826200009a5760008555620000e5565b82601f10620000b557805160ff1916838001178555620000e5565b82800160010185558215620000e5579182015b82811115620000e5578251825591602001919060010190620000c8565b50620000f3929150620000f7565b5090565b5b80821115620000f35760008155600101620000f8565b600082601f8301126200011f578081fd5b81516001600160401b03808211156200013c576200013c62000265565b604051601f8301601f19908116603f0116810190828211818310171562000167576200016762000265565b8160405283815260209250868385880101111562000183578485fd5b8491505b83821015620001a6578582018301518183018401529082019062000187565b83821115620001b757848385830101525b9695505050505050565b60008060408385031215620001d4578182fd5b82516001600160401b0380821115620001eb578384fd5b620001f9868387016200010e565b935060208501519150808211156200020f578283fd5b506200021e858286016200010e565b9150509250929050565b600181811c908216806200023d57607f821691505b602082108114156200025f57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b610877806200028b6000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c80633950935111610071578063395093511461011b57806370a082311461012e57806395d89b4114610157578063a457c2d71461015f578063a9059cbb14610172578063dd62ed3e1461018557600080fd5b806306fdde03146100ae578063095ea7b3146100cc57806318160ddd146100ef57806323b872dd14610101578063313ce56714610114575b600080fd5b6100b6610198565b6040516100c3919061078f565b60405180910390f35b6100df6100da366004610766565b61022a565b60405190151581526020016100c3565b6002545b6040519081526020016100c3565b6100df61010f36600461072b565b610242565b60126100f3565b6100df610129366004610766565b610266565b6100f361013c3660046106d8565b6001600160a01b031660009081526020819052604090205490565b6100b6610288565b6100df61016d366004610766565b610297565b6100df610180366004610766565b610317565b6100f36101933660046106f9565b610325565b6060600380546101a790610806565b80601f01602080910402602001604051908101604052809291908181526020018280546101d390610806565b80156102205780601f106101f557610100808354040283529160200191610220565b820191906000526020600020905b81548152906001019060200180831161020357829003601f168201915b5050505050905090565b600033610238818585610350565b5060019392505050565b600033610250858285610474565b61025b8585856104ee565b506001949350505050565b6000336102388185856102798383610325565b61028391906107e2565b610350565b6060600480546101a790610806565b600033816102a58286610325565b90508381101561030a5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084015b60405180910390fd5b61025b8286868403610350565b6000336102388185856104ee565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6001600160a01b0383166103b25760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610301565b6001600160a01b0382166104135760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610301565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b60006104808484610325565b905060001981146104e857818110156104db5760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610301565b6104e88484848403610350565b50505050565b6001600160a01b0383166105525760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610301565b6001600160a01b0382166105b45760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610301565b6001600160a01b0383166000908152602081905260409020548181101561062c5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610301565b6001600160a01b038085166000908152602081905260408082208585039055918516815290812080548492906106639084906107e2565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516106af91815260200190565b60405180910390a36104e8565b80356001600160a01b03811681146106d357600080fd5b919050565b6000602082840312156106e9578081fd5b6106f2826106bc565b9392505050565b6000806040838503121561070b578081fd5b610714836106bc565b9150610722602084016106bc565b90509250929050565b60008060006060848603121561073f578081fd5b610748846106bc565b9250610756602085016106bc565b9150604084013590509250925092565b60008060408385031215610778578182fd5b610781836106bc565b946020939093013593505050565b6000602080835283518082850152825b818110156107bb5785810183015185820160400152820161079f565b818111156107cc5783604083870101525b50601f01601f1916929092016040019392505050565b6000821982111561080157634e487b7160e01b81526011600452602481fd5b500190565b600181811c9082168061081a57607f821691505b6020821081141561083b57634e487b7160e01b600052602260045260246000fd5b5091905056fea2646970667358221220c92c03cd519d545ecfd82912cd8ce8d5c8a8b337db27724fc62cc5e62f66d5be64736f6c63430008040033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0xB02 CODESIZE SUB DUP1 PUSH3 0xB02 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x34 SWAP2 PUSH3 0x1C1 JUMP JUMPDEST DUP2 MLOAD PUSH3 0x49 SWAP1 PUSH1 0x3 SWAP1 PUSH1 0x20 DUP6 ADD SWAP1 PUSH3 0x68 JUMP JUMPDEST POP DUP1 MLOAD PUSH3 0x5F SWAP1 PUSH1 0x4 SWAP1 PUSH1 0x20 DUP5 ADD SWAP1 PUSH3 0x68 JUMP JUMPDEST POP POP POP PUSH3 0x27B JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH3 0x76 SWAP1 PUSH3 0x228 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH3 0x9A JUMPI PUSH1 0x0 DUP6 SSTORE PUSH3 0xE5 JUMP JUMPDEST DUP3 PUSH1 0x1F LT PUSH3 0xB5 JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH3 0xE5 JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH3 0xE5 JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH3 0xE5 JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH3 0xC8 JUMP JUMPDEST POP PUSH3 0xF3 SWAP3 SWAP2 POP PUSH3 0xF7 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH3 0xF3 JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH3 0xF8 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH3 0x11F JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH3 0x13C JUMPI PUSH3 0x13C PUSH3 0x265 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP4 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP3 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH3 0x167 JUMPI PUSH3 0x167 PUSH3 0x265 JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP4 DUP2 MSTORE PUSH1 0x20 SWAP3 POP DUP7 DUP4 DUP6 DUP9 ADD ADD GT ISZERO PUSH3 0x183 JUMPI DUP5 DUP6 REVERT JUMPDEST DUP5 SWAP2 POP JUMPDEST DUP4 DUP3 LT ISZERO PUSH3 0x1A6 JUMPI DUP6 DUP3 ADD DUP4 ADD MLOAD DUP2 DUP4 ADD DUP5 ADD MSTORE SWAP1 DUP3 ADD SWAP1 PUSH3 0x187 JUMP JUMPDEST DUP4 DUP3 GT ISZERO PUSH3 0x1B7 JUMPI DUP5 DUP4 DUP6 DUP4 ADD ADD MSTORE JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH3 0x1D4 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH3 0x1EB JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH3 0x1F9 DUP7 DUP4 DUP8 ADD PUSH3 0x10E JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD MLOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH3 0x20F JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH3 0x21E DUP6 DUP3 DUP7 ADD PUSH3 0x10E JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH3 0x23D JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH3 0x25F JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x877 DUP1 PUSH3 0x28B PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xA9 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x39509351 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x11B JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x12E JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x157 JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x15F JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x172 JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x185 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0xAE JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0xCC JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0xEF JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x101 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x114 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB6 PUSH2 0x198 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xC3 SWAP2 SWAP1 PUSH2 0x78F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xDF PUSH2 0xDA CALLDATASIZE PUSH1 0x4 PUSH2 0x766 JUMP JUMPDEST PUSH2 0x22A JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xC3 JUMP JUMPDEST PUSH1 0x2 SLOAD JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xC3 JUMP JUMPDEST PUSH2 0xDF PUSH2 0x10F CALLDATASIZE PUSH1 0x4 PUSH2 0x72B JUMP JUMPDEST PUSH2 0x242 JUMP JUMPDEST PUSH1 0x12 PUSH2 0xF3 JUMP JUMPDEST PUSH2 0xDF PUSH2 0x129 CALLDATASIZE PUSH1 0x4 PUSH2 0x766 JUMP JUMPDEST PUSH2 0x266 JUMP JUMPDEST PUSH2 0xF3 PUSH2 0x13C CALLDATASIZE PUSH1 0x4 PUSH2 0x6D8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0xB6 PUSH2 0x288 JUMP JUMPDEST PUSH2 0xDF PUSH2 0x16D CALLDATASIZE PUSH1 0x4 PUSH2 0x766 JUMP JUMPDEST PUSH2 0x297 JUMP JUMPDEST PUSH2 0xDF PUSH2 0x180 CALLDATASIZE PUSH1 0x4 PUSH2 0x766 JUMP JUMPDEST PUSH2 0x317 JUMP JUMPDEST PUSH2 0xF3 PUSH2 0x193 CALLDATASIZE PUSH1 0x4 PUSH2 0x6F9 JUMP JUMPDEST PUSH2 0x325 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD PUSH2 0x1A7 SWAP1 PUSH2 0x806 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x1D3 SWAP1 PUSH2 0x806 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x220 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1F5 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x220 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x203 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x238 DUP2 DUP6 DUP6 PUSH2 0x350 JUMP JUMPDEST POP PUSH1 0x1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x250 DUP6 DUP3 DUP6 PUSH2 0x474 JUMP JUMPDEST PUSH2 0x25B DUP6 DUP6 DUP6 PUSH2 0x4EE JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x238 DUP2 DUP6 DUP6 PUSH2 0x279 DUP4 DUP4 PUSH2 0x325 JUMP JUMPDEST PUSH2 0x283 SWAP2 SWAP1 PUSH2 0x7E2 JUMP JUMPDEST PUSH2 0x350 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x4 DUP1 SLOAD PUSH2 0x1A7 SWAP1 PUSH2 0x806 JUMP JUMPDEST PUSH1 0x0 CALLER DUP2 PUSH2 0x2A5 DUP3 DUP7 PUSH2 0x325 JUMP JUMPDEST SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0x30A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x207A65726F PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x25B DUP3 DUP7 DUP7 DUP5 SUB PUSH2 0x350 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x238 DUP2 DUP6 DUP6 PUSH2 0x4EE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x3B2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x301 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x413 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x7373 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x301 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP6 SWAP1 SSTORE SWAP1 MLOAD DUP5 DUP2 MSTORE PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x480 DUP5 DUP5 PUSH2 0x325 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 NOT DUP2 EQ PUSH2 0x4E8 JUMPI DUP2 DUP2 LT ISZERO PUSH2 0x4DB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x301 JUMP JUMPDEST PUSH2 0x4E8 DUP5 DUP5 DUP5 DUP5 SUB PUSH2 0x350 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x552 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x6472657373 PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x301 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x5B4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x44 DUP3 ADD MSTORE PUSH3 0x657373 PUSH1 0xE8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x301 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0x62C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x616C616E6365 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x301 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP6 DUP6 SUB SWAP1 SSTORE SWAP2 DUP6 AND DUP2 MSTORE SWAP1 DUP2 KECCAK256 DUP1 SLOAD DUP5 SWAP3 SWAP1 PUSH2 0x663 SWAP1 DUP5 SWAP1 PUSH2 0x7E2 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP5 PUSH1 0x40 MLOAD PUSH2 0x6AF SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0x4E8 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x6D3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x6E9 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x6F2 DUP3 PUSH2 0x6BC JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x70B JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x714 DUP4 PUSH2 0x6BC JUMP JUMPDEST SWAP2 POP PUSH2 0x722 PUSH1 0x20 DUP5 ADD PUSH2 0x6BC JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x73F JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x748 DUP5 PUSH2 0x6BC JUMP JUMPDEST SWAP3 POP PUSH2 0x756 PUSH1 0x20 DUP6 ADD PUSH2 0x6BC JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x778 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x781 DUP4 PUSH2 0x6BC JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 DUP3 DUP6 ADD MSTORE DUP3 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x7BB JUMPI DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP3 ADD PUSH2 0x79F JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0x7CC JUMPI DUP4 PUSH1 0x40 DUP4 DUP8 ADD ADD MSTORE JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x40 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x801 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 DUP2 REVERT JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x81A JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0x83B JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC9 0x2C SUB 0xCD MLOAD SWAP14 SLOAD 0x5E 0xCF 0xD8 0x29 SLT 0xCD DUP13 0xE8 0xD5 0xC8 0xA8 0xB3 CALLDATACOPY 0xDB 0x27 PUSH19 0x4FC62CC5E62F66D5BE64736F6C634300080400 CALLER ",
							"sourceMap": "1424:11573:0:-:0;;;2018:116;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2085:13;;;;:5;;:13;;;;;:::i;:::-;-1:-1:-1;2109:17:0;;;;:7;;:17;;;;;:::i;:::-;;2018:116;;1424:11573;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1424:11573:0;;;-1:-1:-1;1424:11573:0;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;14:909:10;68:5;121:3;114:4;106:6;102:17;98:27;88:2;;143:5;136;129:20;88:2;170:13;;-1:-1:-1;;;;;232:10:10;;;229:2;;;245:18;;:::i;:::-;320:2;314:9;288:2;374:13;;-1:-1:-1;;370:22:10;;;394:2;366:31;362:40;350:53;;;418:18;;;438:22;;;415:46;412:2;;;464:18;;:::i;:::-;504:10;500:2;493:22;539:2;531:6;524:18;561:4;551:14;;606:3;601:2;596;588:6;584:15;580:24;577:33;574:2;;;627:5;620;613:20;574:2;653:5;644:14;;667:133;681:2;678:1;675:9;667:133;;;769:14;;;765:23;;759:30;738:14;;;734:23;;727:63;692:10;;;;667:133;;;818:2;815:1;812:9;809:2;;;877:5;872:2;867;859:6;855:15;851:24;844:39;809:2;911:6;78:845;-1:-1:-1;;;;;;78:845:10:o;928:592::-;1027:6;1035;1088:2;1076:9;1067:7;1063:23;1059:32;1056:2;;;1109:6;1101;1094:22;1056:2;1141:16;;-1:-1:-1;;;;;1206:14:10;;;1203:2;;;1238:6;1230;1223:22;1203:2;1266:61;1319:7;1310:6;1299:9;1295:22;1266:61;:::i;:::-;1256:71;;1373:2;1362:9;1358:18;1352:25;1336:41;;1402:2;1392:8;1389:16;1386:2;;;1423:6;1415;1408:22;1386:2;;1451:63;1506:7;1495:8;1484:9;1480:24;1451:63;:::i;:::-;1441:73;;;1046:474;;;;;:::o;1525:380::-;1604:1;1600:12;;;;1647;;;1668:2;;1722:4;1714:6;1710:17;1700:27;;1668:2;1775;1767:6;1764:14;1744:18;1741:38;1738:2;;;1821:10;1816:3;1812:20;1809:1;1802:31;1856:4;1853:1;1846:15;1884:4;1881:1;1874:15;1738:2;;1580:325;;;:::o;1910:127::-;1971:10;1966:3;1962:20;1959:1;1952:31;2002:4;1999:1;1992:15;2026:4;2023:1;2016:15;1942:95;1424:11573:0;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:5667:10",
										"statements": [
											{
												"nodeType": "YulBlock",
												"src": "6:3:10",
												"statements": []
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "63:124:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "73:29:10",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "95:6:10"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "82:12:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "82:20:10"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "73:5:10"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "165:16:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "174:1:10",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "177:1:10",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "167:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "167:12:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "167:12:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "124:5:10"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "135:5:10"
																					},
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "150:3:10",
																										"type": "",
																										"value": "160"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "155:1:10",
																										"type": "",
																										"value": "1"
																									}
																								],
																								"functionName": {
																									"name": "shl",
																									"nodeType": "YulIdentifier",
																									"src": "146:3:10"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "146:11:10"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "159:1:10",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "sub",
																							"nodeType": "YulIdentifier",
																							"src": "142:3:10"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "142:19:10"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "131:3:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "131:31:10"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "121:2:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "121:42:10"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "114:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "114:50:10"
															},
															"nodeType": "YulIf",
															"src": "111:2:10"
														}
													]
												},
												"name": "abi_decode_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "42:6:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "53:5:10",
														"type": ""
													}
												],
												"src": "14:173:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "262:126:10",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "308:26:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "317:6:10"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "325:6:10"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "310:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "310:22:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "310:22:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "283:7:10"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "292:9:10"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "279:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "279:23:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "304:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "275:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "275:32:10"
															},
															"nodeType": "YulIf",
															"src": "272:2:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "343:39:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "372:9:10"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "353:18:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "353:29:10"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "343:6:10"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "228:9:10",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "239:7:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "251:6:10",
														"type": ""
													}
												],
												"src": "192:196:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "480:183:10",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "526:26:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value1",
																					"nodeType": "YulIdentifier",
																					"src": "535:6:10"
																				},
																				{
																					"name": "value1",
																					"nodeType": "YulIdentifier",
																					"src": "543:6:10"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "528:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "528:22:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "528:22:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "501:7:10"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "510:9:10"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "497:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "497:23:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "522:2:10",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "493:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "493:32:10"
															},
															"nodeType": "YulIf",
															"src": "490:2:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "561:39:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "590:9:10"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "571:18:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "571:29:10"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "561:6:10"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "609:48:10",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "642:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "653:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "638:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "638:18:10"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "619:18:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "619:38:10"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "609:6:10"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "438:9:10",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "449:7:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "461:6:10",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "469:6:10",
														"type": ""
													}
												],
												"src": "393:270:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "772:234:10",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "818:26:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value2",
																					"nodeType": "YulIdentifier",
																					"src": "827:6:10"
																				},
																				{
																					"name": "value2",
																					"nodeType": "YulIdentifier",
																					"src": "835:6:10"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "820:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "820:22:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "820:22:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "793:7:10"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "802:9:10"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "789:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "789:23:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "814:2:10",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "785:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "785:32:10"
															},
															"nodeType": "YulIf",
															"src": "782:2:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "853:39:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "882:9:10"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "863:18:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "863:29:10"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "853:6:10"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "901:48:10",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "934:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "945:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "930:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "930:18:10"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "911:18:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "911:38:10"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "901:6:10"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "958:42:10",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "985:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "996:2:10",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "981:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "981:18:10"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "968:12:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "968:32:10"
															},
															"variableNames": [
																{
																	"name": "value2",
																	"nodeType": "YulIdentifier",
																	"src": "958:6:10"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_addresst_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "722:9:10",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "733:7:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "745:6:10",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "753:6:10",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "761:6:10",
														"type": ""
													}
												],
												"src": "668:338:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1098:177:10",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1144:26:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "1153:6:10"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "1161:6:10"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1146:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1146:22:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1146:22:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1119:7:10"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1128:9:10"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1115:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1115:23:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1140:2:10",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1111:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1111:32:10"
															},
															"nodeType": "YulIf",
															"src": "1108:2:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1179:39:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1208:9:10"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "1189:18:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1189:29:10"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "1179:6:10"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "1227:42:10",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1254:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1265:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1250:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1250:18:10"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1237:12:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1237:32:10"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "1227:6:10"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1056:9:10",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1067:7:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1079:6:10",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "1087:6:10",
														"type": ""
													}
												],
												"src": "1011:264:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1375:92:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1385:26:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1397:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1408:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1393:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1393:18:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "1385:4:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1427:9:10"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value0",
																						"nodeType": "YulIdentifier",
																						"src": "1452:6:10"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "1445:6:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1445:14:10"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "1438:6:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1438:22:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1420:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1420:41:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1420:41:10"
														}
													]
												},
												"name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1344:9:10",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1355:6:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "1366:4:10",
														"type": ""
													}
												],
												"src": "1280:187:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1593:482:10",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1603:12:10",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "1613:2:10",
																"type": "",
																"value": "32"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "1607:2:10",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1631:9:10"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "1642:2:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1624:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1624:21:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1624:21:10"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1654:27:10",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "1674:6:10"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "1668:5:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1668:13:10"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "1658:6:10",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1701:9:10"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "1712:2:10"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1697:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1697:18:10"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "1717:6:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1690:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1690:34:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1690:34:10"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1733:13:10",
															"value": {
																"name": "tail",
																"nodeType": "YulIdentifier",
																"src": "1742:4:10"
															},
															"variables": [
																{
																	"name": "i",
																	"nodeType": "YulTypedName",
																	"src": "1737:1:10",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1805:90:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "headStart",
																									"nodeType": "YulIdentifier",
																									"src": "1834:9:10"
																								},
																								{
																									"name": "i",
																									"nodeType": "YulIdentifier",
																									"src": "1845:1:10"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "1830:3:10"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "1830:17:10"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "1849:2:10",
																							"type": "",
																							"value": "64"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "1826:3:10"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "1826:26:10"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"arguments": [
																										{
																											"name": "value0",
																											"nodeType": "YulIdentifier",
																											"src": "1868:6:10"
																										},
																										{
																											"name": "i",
																											"nodeType": "YulIdentifier",
																											"src": "1876:1:10"
																										}
																									],
																									"functionName": {
																										"name": "add",
																										"nodeType": "YulIdentifier",
																										"src": "1864:3:10"
																									},
																									"nodeType": "YulFunctionCall",
																									"src": "1864:14:10"
																								},
																								{
																									"name": "_1",
																									"nodeType": "YulIdentifier",
																									"src": "1880:2:10"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "1860:3:10"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "1860:23:10"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nodeType": "YulIdentifier",
																						"src": "1854:5:10"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "1854:30:10"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "1819:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1819:66:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1819:66:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "1766:1:10"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "1769:6:10"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "1763:2:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1763:13:10"
															},
															"nodeType": "YulForLoop",
															"post": {
																"nodeType": "YulBlock",
																"src": "1777:19:10",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "1779:15:10",
																		"value": {
																			"arguments": [
																				{
																					"name": "i",
																					"nodeType": "YulIdentifier",
																					"src": "1788:1:10"
																				},
																				{
																					"name": "_1",
																					"nodeType": "YulIdentifier",
																					"src": "1791:2:10"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "1784:3:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1784:10:10"
																		},
																		"variableNames": [
																			{
																				"name": "i",
																				"nodeType": "YulIdentifier",
																				"src": "1779:1:10"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nodeType": "YulBlock",
																"src": "1759:3:10",
																"statements": []
															},
															"src": "1755:140:10"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1929:69:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "headStart",
																									"nodeType": "YulIdentifier",
																									"src": "1958:9:10"
																								},
																								{
																									"name": "length",
																									"nodeType": "YulIdentifier",
																									"src": "1969:6:10"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "1954:3:10"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "1954:22:10"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "1978:2:10",
																							"type": "",
																							"value": "64"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "1950:3:10"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "1950:31:10"
																				},
																				{
																					"name": "tail",
																					"nodeType": "YulIdentifier",
																					"src": "1983:4:10"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "1943:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1943:45:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1943:45:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "1910:1:10"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "1913:6:10"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "1907:2:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1907:13:10"
															},
															"nodeType": "YulIf",
															"src": "1904:2:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2007:62:10",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2023:9:10"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"name": "length",
																								"nodeType": "YulIdentifier",
																								"src": "2042:6:10"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "2050:2:10",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "add",
																							"nodeType": "YulIdentifier",
																							"src": "2038:3:10"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "2038:15:10"
																					},
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "2059:2:10",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "not",
																							"nodeType": "YulIdentifier",
																							"src": "2055:3:10"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "2055:7:10"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "2034:3:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2034:29:10"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2019:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2019:45:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2066:2:10",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2015:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2015:54:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "2007:4:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1562:9:10",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1573:6:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "1584:4:10",
														"type": ""
													}
												],
												"src": "1472:603:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2254:225:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2271:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2282:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2264:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2264:21:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2264:21:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2305:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2316:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2301:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2301:18:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2321:2:10",
																		"type": "",
																		"value": "35"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2294:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2294:30:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2294:30:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2344:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2355:2:10",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2340:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2340:18:10"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "2360:34:10",
																		"type": "",
																		"value": "ERC20: transfer to the zero addr"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2333:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2333:62:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2333:62:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2415:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2426:2:10",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2411:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2411:18:10"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "2431:5:10",
																		"type": "",
																		"value": "ess"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2404:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2404:33:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2404:33:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2446:27:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2458:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2469:3:10",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2454:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2454:19:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "2446:4:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2231:9:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "2245:4:10",
														"type": ""
													}
												],
												"src": "2080:399:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2658:224:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2675:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2686:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2668:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2668:21:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2668:21:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2709:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2720:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2705:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2705:18:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2725:2:10",
																		"type": "",
																		"value": "34"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2698:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2698:30:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2698:30:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2748:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2759:2:10",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2744:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2744:18:10"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "2764:34:10",
																		"type": "",
																		"value": "ERC20: approve to the zero addre"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2737:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2737:62:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2737:62:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2819:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2830:2:10",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2815:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2815:18:10"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "2835:4:10",
																		"type": "",
																		"value": "ss"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2808:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2808:32:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2808:32:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2849:27:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2861:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2872:3:10",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2857:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2857:19:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "2849:4:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2635:9:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "2649:4:10",
														"type": ""
													}
												],
												"src": "2484:398:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3061:179:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3078:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3089:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3071:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3071:21:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3071:21:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3112:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3123:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3108:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3108:18:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3128:2:10",
																		"type": "",
																		"value": "29"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3101:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3101:30:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3101:30:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3151:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3162:2:10",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3147:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3147:18:10"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "3167:31:10",
																		"type": "",
																		"value": "ERC20: insufficient allowance"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3140:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3140:59:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3140:59:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3208:26:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3220:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3231:2:10",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3216:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3216:18:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "3208:4:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3038:9:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "3052:4:10",
														"type": ""
													}
												],
												"src": "2887:353:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3419:228:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3436:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3447:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3429:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3429:21:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3429:21:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3470:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3481:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3466:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3466:18:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3486:2:10",
																		"type": "",
																		"value": "38"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3459:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3459:30:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3459:30:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3509:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3520:2:10",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3505:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3505:18:10"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "3525:34:10",
																		"type": "",
																		"value": "ERC20: transfer amount exceeds b"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3498:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3498:62:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3498:62:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3580:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3591:2:10",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3576:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3576:18:10"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "3596:8:10",
																		"type": "",
																		"value": "alance"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3569:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3569:36:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3569:36:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3614:27:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3626:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3637:3:10",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3622:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3622:19:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "3614:4:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3396:9:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "3410:4:10",
														"type": ""
													}
												],
												"src": "3245:402:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3826:227:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3843:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3854:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3836:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3836:21:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3836:21:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3877:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3888:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3873:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3873:18:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3893:2:10",
																		"type": "",
																		"value": "37"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3866:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3866:30:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3866:30:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3916:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3927:2:10",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3912:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3912:18:10"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "3932:34:10",
																		"type": "",
																		"value": "ERC20: transfer from the zero ad"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3905:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3905:62:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3905:62:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3987:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3998:2:10",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3983:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3983:18:10"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "4003:7:10",
																		"type": "",
																		"value": "dress"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3976:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3976:35:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3976:35:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4020:27:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4032:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4043:3:10",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4028:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4028:19:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "4020:4:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3803:9:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "3817:4:10",
														"type": ""
													}
												],
												"src": "3652:401:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4232:226:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4249:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4260:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4242:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4242:21:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4242:21:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4283:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4294:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4279:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4279:18:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4299:2:10",
																		"type": "",
																		"value": "36"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4272:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4272:30:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4272:30:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4322:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4333:2:10",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4318:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4318:18:10"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "4338:34:10",
																		"type": "",
																		"value": "ERC20: approve from the zero add"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4311:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4311:62:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4311:62:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4393:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4404:2:10",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4389:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4389:18:10"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "4409:6:10",
																		"type": "",
																		"value": "ress"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4382:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4382:34:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4382:34:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4425:27:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4437:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4448:3:10",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4433:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4433:19:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "4425:4:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4209:9:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "4223:4:10",
														"type": ""
													}
												],
												"src": "4058:400:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4637:227:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4654:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4665:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4647:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4647:21:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4647:21:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4688:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4699:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4684:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4684:18:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4704:2:10",
																		"type": "",
																		"value": "37"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4677:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4677:30:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4677:30:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4727:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4738:2:10",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4723:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4723:18:10"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "4743:34:10",
																		"type": "",
																		"value": "ERC20: decreased allowance below"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4716:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4716:62:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4716:62:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4798:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4809:2:10",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4794:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4794:18:10"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "4814:7:10",
																		"type": "",
																		"value": " zero"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4787:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4787:35:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4787:35:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4831:27:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4843:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4854:3:10",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4839:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4839:19:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "4831:4:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4614:9:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "4628:4:10",
														"type": ""
													}
												],
												"src": "4463:401:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4970:76:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "4980:26:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4992:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5003:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4988:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4988:18:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "4980:4:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5022:9:10"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "5033:6:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5015:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "5015:25:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5015:25:10"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4939:9:10",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "4950:6:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "4961:4:10",
														"type": ""
													}
												],
												"src": "4869:177:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5099:181:10",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "5134:115:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "sum",
																					"nodeType": "YulIdentifier",
																					"src": "5155:3:10"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "5164:3:10",
																							"type": "",
																							"value": "224"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "5169:10:10",
																							"type": "",
																							"value": "0x4e487b71"
																						}
																					],
																					"functionName": {
																						"name": "shl",
																						"nodeType": "YulIdentifier",
																						"src": "5160:3:10"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "5160:20:10"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "5148:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5148:33:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5148:33:10"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5201:1:10",
																					"type": "",
																					"value": "4"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5204:4:10",
																					"type": "",
																					"value": "0x11"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "5194:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5194:15:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5194:15:10"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "sum",
																					"nodeType": "YulIdentifier",
																					"src": "5229:3:10"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5234:4:10",
																					"type": "",
																					"value": "0x24"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "5222:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5222:17:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5222:17:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "5115:1:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "y",
																				"nodeType": "YulIdentifier",
																				"src": "5122:1:10"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nodeType": "YulIdentifier",
																			"src": "5118:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5118:6:10"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "5112:2:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "5112:13:10"
															},
															"nodeType": "YulIf",
															"src": "5109:2:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "5258:16:10",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "5269:1:10"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "5272:1:10"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5265:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "5265:9:10"
															},
															"variableNames": [
																{
																	"name": "sum",
																	"nodeType": "YulIdentifier",
																	"src": "5258:3:10"
																}
															]
														}
													]
												},
												"name": "checked_add_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "5082:1:10",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "5085:1:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "sum",
														"nodeType": "YulTypedName",
														"src": "5091:3:10",
														"type": ""
													}
												],
												"src": "5051:229:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5340:325:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "5350:22:10",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5364:1:10",
																		"type": "",
																		"value": "1"
																	},
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "5367:4:10"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "5360:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "5360:12:10"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nodeType": "YulIdentifier",
																	"src": "5350:6:10"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5381:38:10",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "5411:4:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5417:1:10",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "5407:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "5407:12:10"
															},
															"variables": [
																{
																	"name": "outOfPlaceEncoding",
																	"nodeType": "YulTypedName",
																	"src": "5385:18:10",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "5458:31:10",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "5460:27:10",
																		"value": {
																			"arguments": [
																				{
																					"name": "length",
																					"nodeType": "YulIdentifier",
																					"src": "5474:6:10"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5482:4:10",
																					"type": "",
																					"value": "0x7f"
																				}
																			],
																			"functionName": {
																				"name": "and",
																				"nodeType": "YulIdentifier",
																				"src": "5470:3:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5470:17:10"
																		},
																		"variableNames": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "5460:6:10"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "5438:18:10"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "5431:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "5431:26:10"
															},
															"nodeType": "YulIf",
															"src": "5428:2:10"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "5548:111:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5569:1:10",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "5576:3:10",
																							"type": "",
																							"value": "224"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "5581:10:10",
																							"type": "",
																							"value": "0x4e487b71"
																						}
																					],
																					"functionName": {
																						"name": "shl",
																						"nodeType": "YulIdentifier",
																						"src": "5572:3:10"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "5572:20:10"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "5562:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5562:31:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5562:31:10"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5613:1:10",
																					"type": "",
																					"value": "4"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5616:4:10",
																					"type": "",
																					"value": "0x22"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "5606:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5606:15:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5606:15:10"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5641:1:10",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5644:4:10",
																					"type": "",
																					"value": "0x24"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "5634:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5634:15:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5634:15:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "5504:18:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "5527:6:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5535:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nodeType": "YulIdentifier",
																			"src": "5524:2:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5524:14:10"
																	}
																],
																"functionName": {
																	"name": "eq",
																	"nodeType": "YulIdentifier",
																	"src": "5501:2:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "5501:38:10"
															},
															"nodeType": "YulIf",
															"src": "5498:2:10"
														}
													]
												},
												"name": "extract_byte_array_length",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "data",
														"nodeType": "YulTypedName",
														"src": "5320:4:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "5329:6:10",
														"type": ""
													}
												],
												"src": "5285:380:10"
											}
										]
									},
									"contents": "{\n    { }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(value1, value1) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(value2, value2) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(value0, value0) }\n        value0 := abi_decode_address(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        let _1 := 32\n        mstore(headStart, _1)\n        let length := mload(value0)\n        mstore(add(headStart, _1), length)\n        let i := tail\n        for { } lt(i, length) { i := add(i, _1) }\n        {\n            mstore(add(add(headStart, i), 64), mload(add(add(value0, i), _1)))\n        }\n        if gt(i, length)\n        {\n            mstore(add(add(headStart, length), 64), tail)\n        }\n        tail := add(add(headStart, and(add(length, 31), not(31))), 64)\n    }\n    function abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 35)\n        mstore(add(headStart, 64), \"ERC20: transfer to the zero addr\")\n        mstore(add(headStart, 96), \"ess\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 34)\n        mstore(add(headStart, 64), \"ERC20: approve to the zero addre\")\n        mstore(add(headStart, 96), \"ss\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"ERC20: insufficient allowance\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"ERC20: transfer amount exceeds b\")\n        mstore(add(headStart, 96), \"alance\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 37)\n        mstore(add(headStart, 64), \"ERC20: transfer from the zero ad\")\n        mstore(add(headStart, 96), \"dress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 36)\n        mstore(add(headStart, 64), \"ERC20: approve from the zero add\")\n        mstore(add(headStart, 96), \"ress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 37)\n        mstore(add(headStart, 64), \"ERC20: decreased allowance below\")\n        mstore(add(headStart, 96), \" zero\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        if gt(x, not(y))\n        {\n            mstore(sum, shl(224, 0x4e487b71))\n            mstore(4, 0x11)\n            revert(sum, 0x24)\n        }\n        sum := add(x, y)\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n}",
									"id": 10,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b50600436106100a95760003560e01c80633950935111610071578063395093511461011b57806370a082311461012e57806395d89b4114610157578063a457c2d71461015f578063a9059cbb14610172578063dd62ed3e1461018557600080fd5b806306fdde03146100ae578063095ea7b3146100cc57806318160ddd146100ef57806323b872dd14610101578063313ce56714610114575b600080fd5b6100b6610198565b6040516100c3919061078f565b60405180910390f35b6100df6100da366004610766565b61022a565b60405190151581526020016100c3565b6002545b6040519081526020016100c3565b6100df61010f36600461072b565b610242565b60126100f3565b6100df610129366004610766565b610266565b6100f361013c3660046106d8565b6001600160a01b031660009081526020819052604090205490565b6100b6610288565b6100df61016d366004610766565b610297565b6100df610180366004610766565b610317565b6100f36101933660046106f9565b610325565b6060600380546101a790610806565b80601f01602080910402602001604051908101604052809291908181526020018280546101d390610806565b80156102205780601f106101f557610100808354040283529160200191610220565b820191906000526020600020905b81548152906001019060200180831161020357829003601f168201915b5050505050905090565b600033610238818585610350565b5060019392505050565b600033610250858285610474565b61025b8585856104ee565b506001949350505050565b6000336102388185856102798383610325565b61028391906107e2565b610350565b6060600480546101a790610806565b600033816102a58286610325565b90508381101561030a5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084015b60405180910390fd5b61025b8286868403610350565b6000336102388185856104ee565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6001600160a01b0383166103b25760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610301565b6001600160a01b0382166104135760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610301565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b60006104808484610325565b905060001981146104e857818110156104db5760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610301565b6104e88484848403610350565b50505050565b6001600160a01b0383166105525760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610301565b6001600160a01b0382166105b45760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610301565b6001600160a01b0383166000908152602081905260409020548181101561062c5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610301565b6001600160a01b038085166000908152602081905260408082208585039055918516815290812080548492906106639084906107e2565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516106af91815260200190565b60405180910390a36104e8565b80356001600160a01b03811681146106d357600080fd5b919050565b6000602082840312156106e9578081fd5b6106f2826106bc565b9392505050565b6000806040838503121561070b578081fd5b610714836106bc565b9150610722602084016106bc565b90509250929050565b60008060006060848603121561073f578081fd5b610748846106bc565b9250610756602085016106bc565b9150604084013590509250925092565b60008060408385031215610778578182fd5b610781836106bc565b946020939093013593505050565b6000602080835283518082850152825b818110156107bb5785810183015185820160400152820161079f565b818111156107cc5783604083870101525b50601f01601f1916929092016040019392505050565b6000821982111561080157634e487b7160e01b81526011600452602481fd5b500190565b600181811c9082168061081a57607f821691505b6020821081141561083b57634e487b7160e01b600052602260045260246000fd5b5091905056fea2646970667358221220c92c03cd519d545ecfd82912cd8ce8d5c8a8b337db27724fc62cc5e62f66d5be64736f6c63430008040033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xA9 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x39509351 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x11B JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x12E JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x157 JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x15F JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x172 JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x185 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0xAE JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0xCC JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0xEF JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x101 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x114 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB6 PUSH2 0x198 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xC3 SWAP2 SWAP1 PUSH2 0x78F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xDF PUSH2 0xDA CALLDATASIZE PUSH1 0x4 PUSH2 0x766 JUMP JUMPDEST PUSH2 0x22A JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xC3 JUMP JUMPDEST PUSH1 0x2 SLOAD JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xC3 JUMP JUMPDEST PUSH2 0xDF PUSH2 0x10F CALLDATASIZE PUSH1 0x4 PUSH2 0x72B JUMP JUMPDEST PUSH2 0x242 JUMP JUMPDEST PUSH1 0x12 PUSH2 0xF3 JUMP JUMPDEST PUSH2 0xDF PUSH2 0x129 CALLDATASIZE PUSH1 0x4 PUSH2 0x766 JUMP JUMPDEST PUSH2 0x266 JUMP JUMPDEST PUSH2 0xF3 PUSH2 0x13C CALLDATASIZE PUSH1 0x4 PUSH2 0x6D8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0xB6 PUSH2 0x288 JUMP JUMPDEST PUSH2 0xDF PUSH2 0x16D CALLDATASIZE PUSH1 0x4 PUSH2 0x766 JUMP JUMPDEST PUSH2 0x297 JUMP JUMPDEST PUSH2 0xDF PUSH2 0x180 CALLDATASIZE PUSH1 0x4 PUSH2 0x766 JUMP JUMPDEST PUSH2 0x317 JUMP JUMPDEST PUSH2 0xF3 PUSH2 0x193 CALLDATASIZE PUSH1 0x4 PUSH2 0x6F9 JUMP JUMPDEST PUSH2 0x325 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD PUSH2 0x1A7 SWAP1 PUSH2 0x806 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x1D3 SWAP1 PUSH2 0x806 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x220 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1F5 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x220 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x203 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x238 DUP2 DUP6 DUP6 PUSH2 0x350 JUMP JUMPDEST POP PUSH1 0x1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x250 DUP6 DUP3 DUP6 PUSH2 0x474 JUMP JUMPDEST PUSH2 0x25B DUP6 DUP6 DUP6 PUSH2 0x4EE JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x238 DUP2 DUP6 DUP6 PUSH2 0x279 DUP4 DUP4 PUSH2 0x325 JUMP JUMPDEST PUSH2 0x283 SWAP2 SWAP1 PUSH2 0x7E2 JUMP JUMPDEST PUSH2 0x350 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x4 DUP1 SLOAD PUSH2 0x1A7 SWAP1 PUSH2 0x806 JUMP JUMPDEST PUSH1 0x0 CALLER DUP2 PUSH2 0x2A5 DUP3 DUP7 PUSH2 0x325 JUMP JUMPDEST SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0x30A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x207A65726F PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x25B DUP3 DUP7 DUP7 DUP5 SUB PUSH2 0x350 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x238 DUP2 DUP6 DUP6 PUSH2 0x4EE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x3B2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x301 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x413 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x7373 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x301 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP6 SWAP1 SSTORE SWAP1 MLOAD DUP5 DUP2 MSTORE PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x480 DUP5 DUP5 PUSH2 0x325 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 NOT DUP2 EQ PUSH2 0x4E8 JUMPI DUP2 DUP2 LT ISZERO PUSH2 0x4DB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x301 JUMP JUMPDEST PUSH2 0x4E8 DUP5 DUP5 DUP5 DUP5 SUB PUSH2 0x350 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x552 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x6472657373 PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x301 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x5B4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x44 DUP3 ADD MSTORE PUSH3 0x657373 PUSH1 0xE8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x301 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0x62C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x616C616E6365 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x301 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP6 DUP6 SUB SWAP1 SSTORE SWAP2 DUP6 AND DUP2 MSTORE SWAP1 DUP2 KECCAK256 DUP1 SLOAD DUP5 SWAP3 SWAP1 PUSH2 0x663 SWAP1 DUP5 SWAP1 PUSH2 0x7E2 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP5 PUSH1 0x40 MLOAD PUSH2 0x6AF SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0x4E8 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x6D3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x6E9 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x6F2 DUP3 PUSH2 0x6BC JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x70B JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x714 DUP4 PUSH2 0x6BC JUMP JUMPDEST SWAP2 POP PUSH2 0x722 PUSH1 0x20 DUP5 ADD PUSH2 0x6BC JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x73F JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x748 DUP5 PUSH2 0x6BC JUMP JUMPDEST SWAP3 POP PUSH2 0x756 PUSH1 0x20 DUP6 ADD PUSH2 0x6BC JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x778 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x781 DUP4 PUSH2 0x6BC JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 DUP3 DUP6 ADD MSTORE DUP3 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x7BB JUMPI DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP3 ADD PUSH2 0x79F JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0x7CC JUMPI DUP4 PUSH1 0x40 DUP4 DUP8 ADD ADD MSTORE JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x40 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x801 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 DUP2 REVERT JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x81A JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0x83B JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC9 0x2C SUB 0xCD MLOAD SWAP14 SLOAD 0x5E 0xCF 0xD8 0x29 SLT 0xCD DUP13 0xE8 0xD5 0xC8 0xA8 0xB3 CALLDATACOPY 0xDB 0x27 PUSH19 0x4FC62CC5E62F66D5BE64736F6C634300080400 CALLER ",
							"sourceMap": "1424:11573:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2204:100;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4557:201;;;;;;:::i;:::-;;:::i;:::-;;;1445:14:10;;1438:22;1420:41;;1408:2;1393:18;4557:201:0;1375:92:10;3326:108:0;3414:12;;3326:108;;;5015:25:10;;;5003:2;4988:18;3326:108:0;4970:76:10;5338:295:0;;;;;;:::i;:::-;;:::i;3166:95::-;3251:2;3166:95;;6042:238;;;;;;:::i;:::-;;:::i;3497:127::-;;;;;;:::i;:::-;-1:-1:-1;;;;;3598:18:0;3571:7;3598:18;;;;;;;;;;;;3497:127;2423:104;;;:::i;6783:436::-;;;;;;:::i;:::-;;:::i;3830:193::-;;;;;;:::i;:::-;;:::i;4086:151::-;;;;;;:::i;:::-;;:::i;2204:100::-;2258:13;2291:5;2284:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2204:100;:::o;4557:201::-;4640:4;736:10:4;4696:32:0;736:10:4;4712:7:0;4721:6;4696:8;:32::i;:::-;-1:-1:-1;4746:4:0;;4557:201;-1:-1:-1;;;4557:201:0:o;5338:295::-;5469:4;736:10:4;5527:38:0;5543:4;736:10:4;5558:6:0;5527:15;:38::i;:::-;5576:27;5586:4;5592:2;5596:6;5576:9;:27::i;:::-;-1:-1:-1;5621:4:0;;5338:295;-1:-1:-1;;;;5338:295:0:o;6042:238::-;6130:4;736:10:4;6186:64:0;736:10:4;6202:7:0;6239:10;6211:25;736:10:4;6202:7:0;6211:9;:25::i;:::-;:38;;;;:::i;:::-;6186:8;:64::i;2423:104::-;2479:13;2512:7;2505:14;;;;;:::i;6783:436::-;6876:4;736:10:4;6876:4:0;6959:25;736:10:4;6976:7:0;6959:9;:25::i;:::-;6932:52;;7023:15;7003:16;:35;;6995:85;;;;-1:-1:-1;;;6995:85:0;;4665:2:10;6995:85:0;;;4647:21:10;4704:2;4684:18;;;4677:30;4743:34;4723:18;;;4716:62;-1:-1:-1;;;4794:18:10;;;4787:35;4839:19;;6995:85:0;;;;;;;;;7116:60;7125:5;7132:7;7160:15;7141:16;:34;7116:8;:60::i;3830:193::-;3909:4;736:10:4;3965:28:0;736:10:4;3982:2:0;3986:6;3965:9;:28::i;4086:151::-;-1:-1:-1;;;;;4202:18:0;;;4175:7;4202:18;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;4086:151::o;10417:380::-;-1:-1:-1;;;;;10553:19:0;;10545:68;;;;-1:-1:-1;;;10545:68:0;;4260:2:10;10545:68:0;;;4242:21:10;4299:2;4279:18;;;4272:30;4338:34;4318:18;;;4311:62;-1:-1:-1;;;4389:18:10;;;4382:34;4433:19;;10545:68:0;4232:226:10;10545:68:0;-1:-1:-1;;;;;10632:21:0;;10624:68;;;;-1:-1:-1;;;10624:68:0;;2686:2:10;10624:68:0;;;2668:21:10;2725:2;2705:18;;;2698:30;2764:34;2744:18;;;2737:62;-1:-1:-1;;;2815:18:10;;;2808:32;2857:19;;10624:68:0;2658:224:10;10624:68:0;-1:-1:-1;;;;;10705:18:0;;;;;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;:36;;;10757:32;;5015:25:10;;;10757:32:0;;4988:18:10;10757:32:0;;;;;;;10417:380;;;:::o;11088:453::-;11223:24;11250:25;11260:5;11267:7;11250:9;:25::i;:::-;11223:52;;-1:-1:-1;;11290:16:0;:37;11286:248;;11372:6;11352:16;:26;;11344:68;;;;-1:-1:-1;;;11344:68:0;;3089:2:10;11344:68:0;;;3071:21:10;3128:2;3108:18;;;3101:30;3167:31;3147:18;;;3140:59;3216:18;;11344:68:0;3061:179:10;11344:68:0;11456:51;11465:5;11472:7;11500:6;11481:16;:25;11456:8;:51::i;:::-;11088:453;;;;:::o;7698:671::-;-1:-1:-1;;;;;7829:18:0;;7821:68;;;;-1:-1:-1;;;7821:68:0;;3854:2:10;7821:68:0;;;3836:21:10;3893:2;3873:18;;;3866:30;3932:34;3912:18;;;3905:62;-1:-1:-1;;;3983:18:10;;;3976:35;4028:19;;7821:68:0;3826:227:10;7821:68:0;-1:-1:-1;;;;;7908:16:0;;7900:64;;;;-1:-1:-1;;;7900:64:0;;2282:2:10;7900:64:0;;;2264:21:10;2321:2;2301:18;;;2294:30;2360:34;2340:18;;;2333:62;-1:-1:-1;;;2411:18:10;;;2404:33;2454:19;;7900:64:0;2254:225:10;7900:64:0;-1:-1:-1;;;;;8050:15:0;;8028:19;8050:15;;;;;;;;;;;8084:21;;;;8076:72;;;;-1:-1:-1;;;8076:72:0;;3447:2:10;8076:72:0;;;3429:21:10;3486:2;3466:18;;;3459:30;3525:34;3505:18;;;3498:62;-1:-1:-1;;;3576:18:10;;;3569:36;3622:19;;8076:72:0;3419:228:10;8076:72:0;-1:-1:-1;;;;;8184:15:0;;;:9;:15;;;;;;;;;;;8202:20;;;8184:38;;8244:13;;;;;;;;:23;;8216:6;;8184:9;8244:23;;8216:6;;8244:23;:::i;:::-;;;;;;;;8300:2;-1:-1:-1;;;;;8285:26:0;8294:4;-1:-1:-1;;;;;8285:26:0;;8304:6;8285:26;;;;5015:25:10;;5003:2;4988:18;;4970:76;8285:26:0;;;;;;;;8324:37;12141:125;14:173:10;82:20;;-1:-1:-1;;;;;131:31:10;;121:42;;111:2;;177:1;174;167:12;111:2;63:124;;;:::o;192:196::-;251:6;304:2;292:9;283:7;279:23;275:32;272:2;;;325:6;317;310:22;272:2;353:29;372:9;353:29;:::i;:::-;343:39;262:126;-1:-1:-1;;;262:126:10:o;393:270::-;461:6;469;522:2;510:9;501:7;497:23;493:32;490:2;;;543:6;535;528:22;490:2;571:29;590:9;571:29;:::i;:::-;561:39;;619:38;653:2;642:9;638:18;619:38;:::i;:::-;609:48;;480:183;;;;;:::o;668:338::-;745:6;753;761;814:2;802:9;793:7;789:23;785:32;782:2;;;835:6;827;820:22;782:2;863:29;882:9;863:29;:::i;:::-;853:39;;911:38;945:2;934:9;930:18;911:38;:::i;:::-;901:48;;996:2;985:9;981:18;968:32;958:42;;772:234;;;;;:::o;1011:264::-;1079:6;1087;1140:2;1128:9;1119:7;1115:23;1111:32;1108:2;;;1161:6;1153;1146:22;1108:2;1189:29;1208:9;1189:29;:::i;:::-;1179:39;1265:2;1250:18;;;;1237:32;;-1:-1:-1;;;1098:177:10:o;1472:603::-;1584:4;1613:2;1642;1631:9;1624:21;1674:6;1668:13;1717:6;1712:2;1701:9;1697:18;1690:34;1742:4;1755:140;1769:6;1766:1;1763:13;1755:140;;;1864:14;;;1860:23;;1854:30;1830:17;;;1849:2;1826:26;1819:66;1784:10;;1755:140;;;1913:6;1910:1;1907:13;1904:2;;;1983:4;1978:2;1969:6;1958:9;1954:22;1950:31;1943:45;1904:2;-1:-1:-1;2059:2:10;2038:15;-1:-1:-1;;2034:29:10;2019:45;;;;2066:2;2015:54;;1593:482;-1:-1:-1;;;1593:482:10:o;5051:229::-;5091:3;5122:1;5118:6;5115:1;5112:13;5109:2;;;-1:-1:-1;;;5148:33:10;;5204:4;5201:1;5194:15;5234:4;5155:3;5222:17;5109:2;-1:-1:-1;5265:9:10;;5099:181::o;5285:380::-;5364:1;5360:12;;;;5407;;;5428:2;;5482:4;5474:6;5470:17;5460:27;;5428:2;5535;5527:6;5524:14;5504:18;5501:38;5498:2;;;5581:10;5576:3;5572:20;5569:1;5562:31;5616:4;5613:1;5606:15;5644:4;5641:1;5634:15;5498:2;;5340:325;;;:::o"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "433400",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"external": {
								"allowance(address,address)": "infinite",
								"approve(address,uint256)": "22524",
								"balanceOf(address)": "1262",
								"decimals()": "281",
								"decreaseAllowance(address,uint256)": "23616",
								"increaseAllowance(address,uint256)": "23578",
								"name()": "infinite",
								"symbol()": "infinite",
								"totalSupply()": "1026",
								"transfer(address,uint256)": "44470",
								"transferFrom(address,address,uint256)": "infinite"
							},
							"internal": {
								"_afterTokenTransfer(address,address,uint256)": "infinite",
								"_approve(address,address,uint256)": "infinite",
								"_beforeTokenTransfer(address,address,uint256)": "infinite",
								"_burn(address,uint256)": "infinite",
								"_mint(address,uint256)": "infinite",
								"_spendAllowance(address,address,uint256)": "infinite",
								"_transfer(address,address,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 1424,
									"end": 12997,
									"name": "PUSH",
									"source": 0,
									"value": "80"
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 2018,
									"end": 2134,
									"name": "CALLVALUE",
									"source": 0
								},
								{
									"begin": 2018,
									"end": 2134,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 2018,
									"end": 2134,
									"name": "ISZERO",
									"source": 0
								},
								{
									"begin": 2018,
									"end": 2134,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 2018,
									"end": 2134,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": 2018,
									"end": 2134,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 2018,
									"end": 2134,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 2018,
									"end": 2134,
									"name": "REVERT",
									"source": 0
								},
								{
									"begin": 2018,
									"end": 2134,
									"name": "tag",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 2018,
									"end": 2134,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 2018,
									"end": 2134,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 2018,
									"end": 2134,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 2018,
									"end": 2134,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 2018,
									"end": 2134,
									"name": "PUSHSIZE",
									"source": 0
								},
								{
									"begin": 2018,
									"end": 2134,
									"name": "CODESIZE",
									"source": 0
								},
								{
									"begin": 2018,
									"end": 2134,
									"name": "SUB",
									"source": 0
								},
								{
									"begin": 2018,
									"end": 2134,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 2018,
									"end": 2134,
									"name": "PUSHSIZE",
									"source": 0
								},
								{
									"begin": 2018,
									"end": 2134,
									"name": "DUP4",
									"source": 0
								},
								{
									"begin": 2018,
									"end": 2134,
									"name": "CODECOPY",
									"source": 0
								},
								{
									"begin": 2018,
									"end": 2134,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 2018,
									"end": 2134,
									"name": "ADD",
									"source": 0
								},
								{
									"begin": 2018,
									"end": 2134,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 2018,
									"end": 2134,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 2018,
									"end": 2134,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 2018,
									"end": 2134,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 2018,
									"end": 2134,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "2"
								},
								{
									"begin": 2018,
									"end": 2134,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 2018,
									"end": 2134,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "3"
								},
								{
									"begin": 2018,
									"end": 2134,
									"name": "JUMP",
									"source": 0,
									"value": "[in]"
								},
								{
									"begin": 2018,
									"end": 2134,
									"name": "tag",
									"source": 0,
									"value": "2"
								},
								{
									"begin": 2018,
									"end": 2134,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 2085,
									"end": 2098,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 2085,
									"end": 2098,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 2085,
									"end": 2098,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "6"
								},
								{
									"begin": 2085,
									"end": 2098,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 2085,
									"end": 2090,
									"name": "PUSH",
									"source": 0,
									"value": "3"
								},
								{
									"begin": 2085,
									"end": 2090,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 2085,
									"end": 2098,
									"name": "PUSH",
									"source": 0,
									"value": "20"
								},
								{
									"begin": 2085,
									"end": 2098,
									"name": "DUP6",
									"source": 0
								},
								{
									"begin": 2085,
									"end": 2098,
									"name": "ADD",
									"source": 0
								},
								{
									"begin": 2085,
									"end": 2098,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 2085,
									"end": 2098,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "7"
								},
								{
									"begin": 2085,
									"end": 2098,
									"name": "JUMP",
									"source": 0,
									"value": "[in]"
								},
								{
									"begin": 2085,
									"end": 2098,
									"name": "tag",
									"source": 0,
									"value": "6"
								},
								{
									"begin": 2085,
									"end": 2098,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 2109,
									"end": 2126,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 2109,
									"end": 2126,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 2109,
									"end": 2126,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "8"
								},
								{
									"begin": 2109,
									"end": 2126,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 2109,
									"end": 2116,
									"name": "PUSH",
									"source": 0,
									"value": "4"
								},
								{
									"begin": 2109,
									"end": 2116,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 2109,
									"end": 2126,
									"name": "PUSH",
									"source": 0,
									"value": "20"
								},
								{
									"begin": 2109,
									"end": 2126,
									"name": "DUP5",
									"source": 0
								},
								{
									"begin": 2109,
									"end": 2126,
									"name": "ADD",
									"source": 0
								},
								{
									"begin": 2109,
									"end": 2126,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 2109,
									"end": 2126,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "7"
								},
								{
									"begin": 2109,
									"end": 2126,
									"name": "JUMP",
									"source": 0,
									"value": "[in]"
								},
								{
									"begin": 2109,
									"end": 2126,
									"name": "tag",
									"source": 0,
									"value": "8"
								},
								{
									"begin": 2109,
									"end": 2126,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 2109,
									"end": 2126,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 2018,
									"end": 2134,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 2018,
									"end": 2134,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "21"
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "JUMP",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "tag",
									"source": 0,
									"value": "7"
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "SLOAD",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "10"
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "11"
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "JUMP",
									"source": 0,
									"value": "[in]"
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "tag",
									"source": 0,
									"value": "10"
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "PUSH",
									"source": 0,
									"value": "20"
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "KECCAK256",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "PUSH",
									"source": 0,
									"value": "1F"
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "ADD",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "PUSH",
									"source": 0,
									"value": "20"
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "DIV",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "ADD",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "SWAP3",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "13"
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "DUP6",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "SSTORE",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "16"
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "JUMP",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "tag",
									"source": 0,
									"value": "13"
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "PUSH",
									"source": 0,
									"value": "1F"
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "LT",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "14"
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "PUSH",
									"source": 0,
									"value": "FF"
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "NOT",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "DUP4",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "ADD",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "OR",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "DUP6",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "SSTORE",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "16"
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "JUMP",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "tag",
									"source": 0,
									"value": "14"
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "ADD",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "PUSH",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "ADD",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "DUP6",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "SSTORE",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "ISZERO",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "16"
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "ADD",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "tag",
									"source": 0,
									"value": "15"
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "GT",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "ISZERO",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "16"
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "SSTORE",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "PUSH",
									"source": 0,
									"value": "20"
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "ADD",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "PUSH",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "ADD",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "15"
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "JUMP",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "tag",
									"source": 0,
									"value": "16"
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "17"
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "SWAP3",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "18"
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "JUMP",
									"source": 0,
									"value": "[in]"
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "tag",
									"source": 0,
									"value": "17"
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "JUMP",
									"source": 0,
									"value": "[out]"
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "tag",
									"source": 0,
									"value": "18"
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "tag",
									"source": 0,
									"value": "19"
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "GT",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "ISZERO",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "17"
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "SSTORE",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "PUSH",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "ADD",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "19"
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "JUMP",
									"source": 0
								},
								{
									"begin": 14,
									"end": 923,
									"name": "tag",
									"source": 10,
									"value": "22"
								},
								{
									"begin": 14,
									"end": 923,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 68,
									"end": 73,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 121,
									"end": 124,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 114,
									"end": 118,
									"name": "PUSH",
									"source": 10,
									"value": "1F"
								},
								{
									"begin": 106,
									"end": 112,
									"name": "DUP4",
									"source": 10
								},
								{
									"begin": 102,
									"end": 119,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 98,
									"end": 125,
									"name": "SLT",
									"source": 10
								},
								{
									"begin": 88,
									"end": 90,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "24"
								},
								{
									"begin": 88,
									"end": 90,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": 143,
									"end": 148,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 136,
									"end": 141,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 129,
									"end": 149,
									"name": "REVERT",
									"source": 10
								},
								{
									"begin": 88,
									"end": 90,
									"name": "tag",
									"source": 10,
									"value": "24"
								},
								{
									"begin": 88,
									"end": 90,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 170,
									"end": 183,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 170,
									"end": 183,
									"name": "MLOAD",
									"source": 10
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "40"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 232,
									"end": 242,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 232,
									"end": 242,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 232,
									"end": 242,
									"name": "GT",
									"source": 10
								},
								{
									"begin": 229,
									"end": 231,
									"name": "ISZERO",
									"source": 10
								},
								{
									"begin": 229,
									"end": 231,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "26"
								},
								{
									"begin": 229,
									"end": 231,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": 245,
									"end": 263,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "26"
								},
								{
									"begin": 245,
									"end": 263,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "27"
								},
								{
									"begin": 245,
									"end": 263,
									"name": "JUMP",
									"source": 10,
									"value": "[in]"
								},
								{
									"begin": 245,
									"end": 263,
									"name": "tag",
									"source": 10,
									"value": "26"
								},
								{
									"begin": 245,
									"end": 263,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 320,
									"end": 322,
									"name": "PUSH",
									"source": 10,
									"value": "40"
								},
								{
									"begin": 314,
									"end": 323,
									"name": "MLOAD",
									"source": 10
								},
								{
									"begin": 288,
									"end": 290,
									"name": "PUSH",
									"source": 10,
									"value": "1F"
								},
								{
									"begin": 374,
									"end": 387,
									"name": "DUP4",
									"source": 10
								},
								{
									"begin": 374,
									"end": 387,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1F"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 370,
									"end": 392,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 370,
									"end": 392,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 370,
									"end": 392,
									"name": "AND",
									"source": 10
								},
								{
									"begin": 394,
									"end": 396,
									"name": "PUSH",
									"source": 10,
									"value": "3F"
								},
								{
									"begin": 366,
									"end": 397,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 362,
									"end": 402,
									"name": "AND",
									"source": 10
								},
								{
									"begin": 350,
									"end": 403,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 350,
									"end": 403,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 350,
									"end": 403,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 418,
									"end": 436,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 418,
									"end": 436,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 418,
									"end": 436,
									"name": "GT",
									"source": 10
								},
								{
									"begin": 438,
									"end": 460,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 438,
									"end": 460,
									"name": "DUP4",
									"source": 10
								},
								{
									"begin": 438,
									"end": 460,
									"name": "LT",
									"source": 10
								},
								{
									"begin": 415,
									"end": 461,
									"name": "OR",
									"source": 10
								},
								{
									"begin": 412,
									"end": 414,
									"name": "ISZERO",
									"source": 10
								},
								{
									"begin": 412,
									"end": 414,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "29"
								},
								{
									"begin": 412,
									"end": 414,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": 464,
									"end": 482,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "29"
								},
								{
									"begin": 464,
									"end": 482,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "27"
								},
								{
									"begin": 464,
									"end": 482,
									"name": "JUMP",
									"source": 10,
									"value": "[in]"
								},
								{
									"begin": 464,
									"end": 482,
									"name": "tag",
									"source": 10,
									"value": "29"
								},
								{
									"begin": 464,
									"end": 482,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 504,
									"end": 514,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 500,
									"end": 502,
									"name": "PUSH",
									"source": 10,
									"value": "40"
								},
								{
									"begin": 493,
									"end": 515,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 539,
									"end": 541,
									"name": "DUP4",
									"source": 10
								},
								{
									"begin": 531,
									"end": 537,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 524,
									"end": 542,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 561,
									"end": 565,
									"name": "PUSH",
									"source": 10,
									"value": "20"
								},
								{
									"begin": 551,
									"end": 565,
									"name": "SWAP3",
									"source": 10
								},
								{
									"begin": 551,
									"end": 565,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 606,
									"end": 609,
									"name": "DUP7",
									"source": 10
								},
								{
									"begin": 601,
									"end": 603,
									"name": "DUP4",
									"source": 10
								},
								{
									"begin": 596,
									"end": 598,
									"name": "DUP6",
									"source": 10
								},
								{
									"begin": 588,
									"end": 594,
									"name": "DUP9",
									"source": 10
								},
								{
									"begin": 584,
									"end": 599,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 580,
									"end": 604,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 577,
									"end": 610,
									"name": "GT",
									"source": 10
								},
								{
									"begin": 574,
									"end": 576,
									"name": "ISZERO",
									"source": 10
								},
								{
									"begin": 574,
									"end": 576,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "30"
								},
								{
									"begin": 574,
									"end": 576,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": 627,
									"end": 632,
									"name": "DUP5",
									"source": 10
								},
								{
									"begin": 620,
									"end": 625,
									"name": "DUP6",
									"source": 10
								},
								{
									"begin": 613,
									"end": 633,
									"name": "REVERT",
									"source": 10
								},
								{
									"begin": 574,
									"end": 576,
									"name": "tag",
									"source": 10,
									"value": "30"
								},
								{
									"begin": 574,
									"end": 576,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 653,
									"end": 658,
									"name": "DUP5",
									"source": 10
								},
								{
									"begin": 644,
									"end": 658,
									"name": "SWAP2",
									"source": 10
								},
								{
									"begin": 644,
									"end": 658,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 667,
									"end": 800,
									"name": "tag",
									"source": 10,
									"value": "31"
								},
								{
									"begin": 667,
									"end": 800,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 681,
									"end": 683,
									"name": "DUP4",
									"source": 10
								},
								{
									"begin": 678,
									"end": 679,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 675,
									"end": 684,
									"name": "LT",
									"source": 10
								},
								{
									"begin": 667,
									"end": 800,
									"name": "ISZERO",
									"source": 10
								},
								{
									"begin": 667,
									"end": 800,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "33"
								},
								{
									"begin": 667,
									"end": 800,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": 769,
									"end": 783,
									"name": "DUP6",
									"source": 10
								},
								{
									"begin": 769,
									"end": 783,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 769,
									"end": 783,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 765,
									"end": 788,
									"name": "DUP4",
									"source": 10
								},
								{
									"begin": 765,
									"end": 788,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 759,
									"end": 789,
									"name": "MLOAD",
									"source": 10
								},
								{
									"begin": 738,
									"end": 752,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 738,
									"end": 752,
									"name": "DUP4",
									"source": 10
								},
								{
									"begin": 738,
									"end": 752,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 734,
									"end": 757,
									"name": "DUP5",
									"source": 10
								},
								{
									"begin": 734,
									"end": 757,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 727,
									"end": 790,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 692,
									"end": 702,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 692,
									"end": 702,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 692,
									"end": 702,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 692,
									"end": 702,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 667,
									"end": 800,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "31"
								},
								{
									"begin": 667,
									"end": 800,
									"name": "JUMP",
									"source": 10
								},
								{
									"begin": 667,
									"end": 800,
									"name": "tag",
									"source": 10,
									"value": "33"
								},
								{
									"begin": 667,
									"end": 800,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 818,
									"end": 820,
									"name": "DUP4",
									"source": 10
								},
								{
									"begin": 815,
									"end": 816,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 812,
									"end": 821,
									"name": "GT",
									"source": 10
								},
								{
									"begin": 809,
									"end": 811,
									"name": "ISZERO",
									"source": 10
								},
								{
									"begin": 809,
									"end": 811,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "34"
								},
								{
									"begin": 809,
									"end": 811,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": 877,
									"end": 882,
									"name": "DUP5",
									"source": 10
								},
								{
									"begin": 872,
									"end": 874,
									"name": "DUP4",
									"source": 10
								},
								{
									"begin": 867,
									"end": 869,
									"name": "DUP6",
									"source": 10
								},
								{
									"begin": 859,
									"end": 865,
									"name": "DUP4",
									"source": 10
								},
								{
									"begin": 855,
									"end": 870,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 851,
									"end": 875,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 844,
									"end": 883,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 809,
									"end": 811,
									"name": "tag",
									"source": 10,
									"value": "34"
								},
								{
									"begin": 809,
									"end": 811,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 911,
									"end": 917,
									"name": "SWAP7",
									"source": 10
								},
								{
									"begin": 78,
									"end": 923,
									"name": "SWAP6",
									"source": 10
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 78,
									"end": 923,
									"name": "JUMP",
									"source": 10,
									"value": "[out]"
								},
								{
									"begin": 928,
									"end": 1520,
									"name": "tag",
									"source": 10,
									"value": "3"
								},
								{
									"begin": 928,
									"end": 1520,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 1027,
									"end": 1033,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 1035,
									"end": 1041,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 1088,
									"end": 1090,
									"name": "PUSH",
									"source": 10,
									"value": "40"
								},
								{
									"begin": 1076,
									"end": 1085,
									"name": "DUP4",
									"source": 10
								},
								{
									"begin": 1067,
									"end": 1074,
									"name": "DUP6",
									"source": 10
								},
								{
									"begin": 1063,
									"end": 1086,
									"name": "SUB",
									"source": 10
								},
								{
									"begin": 1059,
									"end": 1091,
									"name": "SLT",
									"source": 10
								},
								{
									"begin": 1056,
									"end": 1058,
									"name": "ISZERO",
									"source": 10
								},
								{
									"begin": 1056,
									"end": 1058,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "36"
								},
								{
									"begin": 1056,
									"end": 1058,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": 1109,
									"end": 1115,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 1101,
									"end": 1107,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 1094,
									"end": 1116,
									"name": "REVERT",
									"source": 10
								},
								{
									"begin": 1056,
									"end": 1058,
									"name": "tag",
									"source": 10,
									"value": "36"
								},
								{
									"begin": 1056,
									"end": 1058,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 1141,
									"end": 1157,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 1141,
									"end": 1157,
									"name": "MLOAD",
									"source": 10
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "40"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 1206,
									"end": 1220,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 1206,
									"end": 1220,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 1206,
									"end": 1220,
									"name": "GT",
									"source": 10
								},
								{
									"begin": 1203,
									"end": 1205,
									"name": "ISZERO",
									"source": 10
								},
								{
									"begin": 1203,
									"end": 1205,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "37"
								},
								{
									"begin": 1203,
									"end": 1205,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": 1238,
									"end": 1244,
									"name": "DUP4",
									"source": 10
								},
								{
									"begin": 1230,
									"end": 1236,
									"name": "DUP5",
									"source": 10
								},
								{
									"begin": 1223,
									"end": 1245,
									"name": "REVERT",
									"source": 10
								},
								{
									"begin": 1203,
									"end": 1205,
									"name": "tag",
									"source": 10,
									"value": "37"
								},
								{
									"begin": 1203,
									"end": 1205,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 1266,
									"end": 1327,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "38"
								},
								{
									"begin": 1319,
									"end": 1326,
									"name": "DUP7",
									"source": 10
								},
								{
									"begin": 1310,
									"end": 1316,
									"name": "DUP4",
									"source": 10
								},
								{
									"begin": 1299,
									"end": 1308,
									"name": "DUP8",
									"source": 10
								},
								{
									"begin": 1295,
									"end": 1317,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 1266,
									"end": 1327,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "22"
								},
								{
									"begin": 1266,
									"end": 1327,
									"name": "JUMP",
									"source": 10,
									"value": "[in]"
								},
								{
									"begin": 1266,
									"end": 1327,
									"name": "tag",
									"source": 10,
									"value": "38"
								},
								{
									"begin": 1266,
									"end": 1327,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 1256,
									"end": 1327,
									"name": "SWAP4",
									"source": 10
								},
								{
									"begin": 1256,
									"end": 1327,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 1373,
									"end": 1375,
									"name": "PUSH",
									"source": 10,
									"value": "20"
								},
								{
									"begin": 1362,
									"end": 1371,
									"name": "DUP6",
									"source": 10
								},
								{
									"begin": 1358,
									"end": 1376,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 1352,
									"end": 1377,
									"name": "MLOAD",
									"source": 10
								},
								{
									"begin": 1336,
									"end": 1377,
									"name": "SWAP2",
									"source": 10
								},
								{
									"begin": 1336,
									"end": 1377,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 1402,
									"end": 1404,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 1392,
									"end": 1400,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 1389,
									"end": 1405,
									"name": "GT",
									"source": 10
								},
								{
									"begin": 1386,
									"end": 1388,
									"name": "ISZERO",
									"source": 10
								},
								{
									"begin": 1386,
									"end": 1388,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "39"
								},
								{
									"begin": 1386,
									"end": 1388,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": 1423,
									"end": 1429,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 1415,
									"end": 1421,
									"name": "DUP4",
									"source": 10
								},
								{
									"begin": 1408,
									"end": 1430,
									"name": "REVERT",
									"source": 10
								},
								{
									"begin": 1386,
									"end": 1388,
									"name": "tag",
									"source": 10,
									"value": "39"
								},
								{
									"begin": 1386,
									"end": 1388,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 1386,
									"end": 1388,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 1451,
									"end": 1514,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "40"
								},
								{
									"begin": 1506,
									"end": 1513,
									"name": "DUP6",
									"source": 10
								},
								{
									"begin": 1495,
									"end": 1503,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 1484,
									"end": 1493,
									"name": "DUP7",
									"source": 10
								},
								{
									"begin": 1480,
									"end": 1504,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 1451,
									"end": 1514,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "22"
								},
								{
									"begin": 1451,
									"end": 1514,
									"name": "JUMP",
									"source": 10,
									"value": "[in]"
								},
								{
									"begin": 1451,
									"end": 1514,
									"name": "tag",
									"source": 10,
									"value": "40"
								},
								{
									"begin": 1451,
									"end": 1514,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 1441,
									"end": 1514,
									"name": "SWAP2",
									"source": 10
								},
								{
									"begin": 1441,
									"end": 1514,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 1441,
									"end": 1514,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 1046,
									"end": 1520,
									"name": "SWAP3",
									"source": 10
								},
								{
									"begin": 1046,
									"end": 1520,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 1046,
									"end": 1520,
									"name": "SWAP3",
									"source": 10
								},
								{
									"begin": 1046,
									"end": 1520,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 1046,
									"end": 1520,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 1046,
									"end": 1520,
									"name": "JUMP",
									"source": 10,
									"value": "[out]"
								},
								{
									"begin": 1525,
									"end": 1905,
									"name": "tag",
									"source": 10,
									"value": "11"
								},
								{
									"begin": 1525,
									"end": 1905,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 1604,
									"end": 1605,
									"name": "PUSH",
									"source": 10,
									"value": "1"
								},
								{
									"begin": 1600,
									"end": 1612,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 1600,
									"end": 1612,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 1600,
									"end": 1612,
									"name": "SHR",
									"source": 10
								},
								{
									"begin": 1600,
									"end": 1612,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 1647,
									"end": 1659,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 1647,
									"end": 1659,
									"name": "AND",
									"source": 10
								},
								{
									"begin": 1647,
									"end": 1659,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 1668,
									"end": 1670,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "42"
								},
								{
									"begin": 1668,
									"end": 1670,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": 1722,
									"end": 1726,
									"name": "PUSH",
									"source": 10,
									"value": "7F"
								},
								{
									"begin": 1714,
									"end": 1720,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 1710,
									"end": 1727,
									"name": "AND",
									"source": 10
								},
								{
									"begin": 1700,
									"end": 1727,
									"name": "SWAP2",
									"source": 10
								},
								{
									"begin": 1700,
									"end": 1727,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 1668,
									"end": 1670,
									"name": "tag",
									"source": 10,
									"value": "42"
								},
								{
									"begin": 1668,
									"end": 1670,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 1775,
									"end": 1777,
									"name": "PUSH",
									"source": 10,
									"value": "20"
								},
								{
									"begin": 1767,
									"end": 1773,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 1764,
									"end": 1778,
									"name": "LT",
									"source": 10
								},
								{
									"begin": 1744,
									"end": 1762,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 1741,
									"end": 1779,
									"name": "EQ",
									"source": 10
								},
								{
									"begin": 1738,
									"end": 1740,
									"name": "ISZERO",
									"source": 10
								},
								{
									"begin": 1738,
									"end": 1740,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "43"
								},
								{
									"begin": 1738,
									"end": 1740,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": 1821,
									"end": 1831,
									"name": "PUSH",
									"source": 10,
									"value": "4E487B71"
								},
								{
									"begin": 1816,
									"end": 1819,
									"name": "PUSH",
									"source": 10,
									"value": "E0"
								},
								{
									"begin": 1812,
									"end": 1832,
									"name": "SHL",
									"source": 10
								},
								{
									"begin": 1809,
									"end": 1810,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 1802,
									"end": 1833,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 1856,
									"end": 1860,
									"name": "PUSH",
									"source": 10,
									"value": "22"
								},
								{
									"begin": 1853,
									"end": 1854,
									"name": "PUSH",
									"source": 10,
									"value": "4"
								},
								{
									"begin": 1846,
									"end": 1861,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 1884,
									"end": 1888,
									"name": "PUSH",
									"source": 10,
									"value": "24"
								},
								{
									"begin": 1881,
									"end": 1882,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 1874,
									"end": 1889,
									"name": "REVERT",
									"source": 10
								},
								{
									"begin": 1738,
									"end": 1740,
									"name": "tag",
									"source": 10,
									"value": "43"
								},
								{
									"begin": 1738,
									"end": 1740,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 1738,
									"end": 1740,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 1580,
									"end": 1905,
									"name": "SWAP2",
									"source": 10
								},
								{
									"begin": 1580,
									"end": 1905,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 1580,
									"end": 1905,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 1580,
									"end": 1905,
									"name": "JUMP",
									"source": 10,
									"value": "[out]"
								},
								{
									"begin": 1910,
									"end": 2037,
									"name": "tag",
									"source": 10,
									"value": "27"
								},
								{
									"begin": 1910,
									"end": 2037,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 1971,
									"end": 1981,
									"name": "PUSH",
									"source": 10,
									"value": "4E487B71"
								},
								{
									"begin": 1966,
									"end": 1969,
									"name": "PUSH",
									"source": 10,
									"value": "E0"
								},
								{
									"begin": 1962,
									"end": 1982,
									"name": "SHL",
									"source": 10
								},
								{
									"begin": 1959,
									"end": 1960,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 1952,
									"end": 1983,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 2002,
									"end": 2006,
									"name": "PUSH",
									"source": 10,
									"value": "41"
								},
								{
									"begin": 1999,
									"end": 2000,
									"name": "PUSH",
									"source": 10,
									"value": "4"
								},
								{
									"begin": 1992,
									"end": 2007,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 2026,
									"end": 2030,
									"name": "PUSH",
									"source": 10,
									"value": "24"
								},
								{
									"begin": 2023,
									"end": 2024,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 2016,
									"end": 2031,
									"name": "REVERT",
									"source": 10
								},
								{
									"begin": 1942,
									"end": 2037,
									"name": "tag",
									"source": 10,
									"value": "21"
								},
								{
									"begin": 1942,
									"end": 2037,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "PUSH #[$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "PUSH [$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "CODECOPY",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "RETURN",
									"source": 0
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220c92c03cd519d545ecfd82912cd8ce8d5c8a8b337db27724fc62cc5e62f66d5be64736f6c63430008040033",
									".code": [
										{
											"begin": 1424,
											"end": 12997,
											"name": "PUSH",
											"source": 0,
											"value": "80"
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "CALLVALUE",
											"source": 0
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "tag",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "CALLDATALOAD",
											"source": 0
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "PUSH",
											"source": 0,
											"value": "E0"
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "SHR",
											"source": 0
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "PUSH",
											"source": 0,
											"value": "39509351"
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "GT",
											"source": 0
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "14"
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "PUSH",
											"source": 0,
											"value": "39509351"
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "8"
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "PUSH",
											"source": 0,
											"value": "70A08231"
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "9"
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "PUSH",
											"source": 0,
											"value": "95D89B41"
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "10"
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "PUSH",
											"source": 0,
											"value": "A457C2D7"
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "11"
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "PUSH",
											"source": 0,
											"value": "A9059CBB"
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "12"
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "PUSH",
											"source": 0,
											"value": "DD62ED3E"
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "13"
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "tag",
											"source": 0,
											"value": "14"
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "PUSH",
											"source": 0,
											"value": "6FDDE03"
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "3"
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "PUSH",
											"source": 0,
											"value": "95EA7B3"
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "PUSH",
											"source": 0,
											"value": "18160DDD"
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "5"
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "PUSH",
											"source": 0,
											"value": "23B872DD"
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "6"
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "PUSH",
											"source": 0,
											"value": "313CE567"
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "7"
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "tag",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 2204,
											"end": 2304,
											"name": "tag",
											"source": 0,
											"value": "3"
										},
										{
											"begin": 2204,
											"end": 2304,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2204,
											"end": 2304,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "15"
										},
										{
											"begin": 2204,
											"end": 2304,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "16"
										},
										{
											"begin": 2204,
											"end": 2304,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2204,
											"end": 2304,
											"name": "tag",
											"source": 0,
											"value": "15"
										},
										{
											"begin": 2204,
											"end": 2304,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2204,
											"end": 2304,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2204,
											"end": 2304,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2204,
											"end": 2304,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "17"
										},
										{
											"begin": 2204,
											"end": 2304,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2204,
											"end": 2304,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2204,
											"end": 2304,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "18"
										},
										{
											"begin": 2204,
											"end": 2304,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2204,
											"end": 2304,
											"name": "tag",
											"source": 0,
											"value": "17"
										},
										{
											"begin": 2204,
											"end": 2304,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2204,
											"end": 2304,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2204,
											"end": 2304,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2204,
											"end": 2304,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2204,
											"end": 2304,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2204,
											"end": 2304,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 2204,
											"end": 2304,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2204,
											"end": 2304,
											"name": "RETURN",
											"source": 0
										},
										{
											"begin": 4557,
											"end": 4758,
											"name": "tag",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 4557,
											"end": 4758,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4557,
											"end": 4758,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "19"
										},
										{
											"begin": 4557,
											"end": 4758,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 4557,
											"end": 4758,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 4557,
											"end": 4758,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 4557,
											"end": 4758,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "21"
										},
										{
											"begin": 4557,
											"end": 4758,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 4557,
											"end": 4758,
											"name": "tag",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 4557,
											"end": 4758,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4557,
											"end": 4758,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "22"
										},
										{
											"begin": 4557,
											"end": 4758,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 4557,
											"end": 4758,
											"name": "tag",
											"source": 0,
											"value": "19"
										},
										{
											"begin": 4557,
											"end": 4758,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4557,
											"end": 4758,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 4557,
											"end": 4758,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1445,
											"end": 1459,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1445,
											"end": 1459,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 1438,
											"end": 1460,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 1420,
											"end": 1461,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1420,
											"end": 1461,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 1408,
											"end": 1410,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 1393,
											"end": 1411,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 4557,
											"end": 4758,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "17"
										},
										{
											"begin": 1375,
											"end": 1467,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 3326,
											"end": 3434,
											"name": "tag",
											"source": 0,
											"value": "5"
										},
										{
											"begin": 3326,
											"end": 3434,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3414,
											"end": 3426,
											"name": "PUSH",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 3414,
											"end": 3426,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 3326,
											"end": 3434,
											"name": "tag",
											"source": 0,
											"value": "25"
										},
										{
											"begin": 3326,
											"end": 3434,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3326,
											"end": 3434,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 3326,
											"end": 3434,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 5015,
											"end": 5040,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 5015,
											"end": 5040,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 5015,
											"end": 5040,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 5003,
											"end": 5005,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 4988,
											"end": 5006,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 3326,
											"end": 3434,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "17"
										},
										{
											"begin": 4970,
											"end": 5046,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 5338,
											"end": 5633,
											"name": "tag",
											"source": 0,
											"value": "6"
										},
										{
											"begin": 5338,
											"end": 5633,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5338,
											"end": 5633,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "19"
										},
										{
											"begin": 5338,
											"end": 5633,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "30"
										},
										{
											"begin": 5338,
											"end": 5633,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 5338,
											"end": 5633,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 5338,
											"end": 5633,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "31"
										},
										{
											"begin": 5338,
											"end": 5633,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 5338,
											"end": 5633,
											"name": "tag",
											"source": 0,
											"value": "30"
										},
										{
											"begin": 5338,
											"end": 5633,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5338,
											"end": 5633,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "32"
										},
										{
											"begin": 5338,
											"end": 5633,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 3166,
											"end": 3261,
											"name": "tag",
											"source": 0,
											"value": "7"
										},
										{
											"begin": 3166,
											"end": 3261,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3251,
											"end": 3253,
											"name": "PUSH",
											"source": 0,
											"value": "12"
										},
										{
											"begin": 3166,
											"end": 3261,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "25"
										},
										{
											"begin": 3166,
											"end": 3261,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 6042,
											"end": 6280,
											"name": "tag",
											"source": 0,
											"value": "8"
										},
										{
											"begin": 6042,
											"end": 6280,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 6042,
											"end": 6280,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "19"
										},
										{
											"begin": 6042,
											"end": 6280,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "38"
										},
										{
											"begin": 6042,
											"end": 6280,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 6042,
											"end": 6280,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 6042,
											"end": 6280,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "21"
										},
										{
											"begin": 6042,
											"end": 6280,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 6042,
											"end": 6280,
											"name": "tag",
											"source": 0,
											"value": "38"
										},
										{
											"begin": 6042,
											"end": 6280,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 6042,
											"end": 6280,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "39"
										},
										{
											"begin": 6042,
											"end": 6280,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 3497,
											"end": 3624,
											"name": "tag",
											"source": 0,
											"value": "9"
										},
										{
											"begin": 3497,
											"end": 3624,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3497,
											"end": 3624,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "25"
										},
										{
											"begin": 3497,
											"end": 3624,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "42"
										},
										{
											"begin": 3497,
											"end": 3624,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 3497,
											"end": 3624,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 3497,
											"end": 3624,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "43"
										},
										{
											"begin": 3497,
											"end": 3624,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 3497,
											"end": 3624,
											"name": "tag",
											"source": 0,
											"value": "42"
										},
										{
											"begin": 3497,
											"end": 3624,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3598,
											"end": 3616,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 3571,
											"end": 3578,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 3598,
											"end": 3616,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3598,
											"end": 3616,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 3598,
											"end": 3616,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 3598,
											"end": 3616,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 3598,
											"end": 3616,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 3598,
											"end": 3616,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3598,
											"end": 3616,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 3598,
											"end": 3616,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 3598,
											"end": 3616,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3598,
											"end": 3616,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 3598,
											"end": 3616,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 3598,
											"end": 3616,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3497,
											"end": 3624,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 2423,
											"end": 2527,
											"name": "tag",
											"source": 0,
											"value": "10"
										},
										{
											"begin": 2423,
											"end": 2527,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2423,
											"end": 2527,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "15"
										},
										{
											"begin": 2423,
											"end": 2527,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "47"
										},
										{
											"begin": 2423,
											"end": 2527,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 6783,
											"end": 7219,
											"name": "tag",
											"source": 0,
											"value": "11"
										},
										{
											"begin": 6783,
											"end": 7219,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 6783,
											"end": 7219,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "19"
										},
										{
											"begin": 6783,
											"end": 7219,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "50"
										},
										{
											"begin": 6783,
											"end": 7219,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 6783,
											"end": 7219,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 6783,
											"end": 7219,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "21"
										},
										{
											"begin": 6783,
											"end": 7219,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 6783,
											"end": 7219,
											"name": "tag",
											"source": 0,
											"value": "50"
										},
										{
											"begin": 6783,
											"end": 7219,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 6783,
											"end": 7219,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "51"
										},
										{
											"begin": 6783,
											"end": 7219,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 3830,
											"end": 4023,
											"name": "tag",
											"source": 0,
											"value": "12"
										},
										{
											"begin": 3830,
											"end": 4023,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3830,
											"end": 4023,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "19"
										},
										{
											"begin": 3830,
											"end": 4023,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "54"
										},
										{
											"begin": 3830,
											"end": 4023,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 3830,
											"end": 4023,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 3830,
											"end": 4023,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "21"
										},
										{
											"begin": 3830,
											"end": 4023,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 3830,
											"end": 4023,
											"name": "tag",
											"source": 0,
											"value": "54"
										},
										{
											"begin": 3830,
											"end": 4023,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3830,
											"end": 4023,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "55"
										},
										{
											"begin": 3830,
											"end": 4023,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 4086,
											"end": 4237,
											"name": "tag",
											"source": 0,
											"value": "13"
										},
										{
											"begin": 4086,
											"end": 4237,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4086,
											"end": 4237,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "25"
										},
										{
											"begin": 4086,
											"end": 4237,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "58"
										},
										{
											"begin": 4086,
											"end": 4237,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 4086,
											"end": 4237,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 4086,
											"end": 4237,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "59"
										},
										{
											"begin": 4086,
											"end": 4237,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 4086,
											"end": 4237,
											"name": "tag",
											"source": 0,
											"value": "58"
										},
										{
											"begin": 4086,
											"end": 4237,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4086,
											"end": 4237,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "60"
										},
										{
											"begin": 4086,
											"end": 4237,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2204,
											"end": 2304,
											"name": "tag",
											"source": 0,
											"value": "16"
										},
										{
											"begin": 2204,
											"end": 2304,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2258,
											"end": 2271,
											"name": "PUSH",
											"source": 0,
											"value": "60"
										},
										{
											"begin": 2291,
											"end": 2296,
											"name": "PUSH",
											"source": 0,
											"value": "3"
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "63"
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "64"
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "tag",
											"source": 0,
											"value": "63"
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "PUSH",
											"source": 0,
											"value": "1F"
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "65"
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "64"
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "tag",
											"source": 0,
											"value": "65"
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "66"
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "PUSH",
											"source": 0,
											"value": "1F"
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "67"
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "66"
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "tag",
											"source": 0,
											"value": "67"
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "tag",
											"source": 0,
											"value": "68"
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "GT",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "68"
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "PUSH",
											"source": 0,
											"value": "1F"
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "tag",
											"source": 0,
											"value": "66"
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2204,
											"end": 2304,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2204,
											"end": 2304,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 4557,
											"end": 4758,
											"name": "tag",
											"source": 0,
											"value": "22"
										},
										{
											"begin": 4557,
											"end": 4758,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4640,
											"end": 4644,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 736,
											"end": 746,
											"name": "CALLER",
											"source": 4
										},
										{
											"begin": 4696,
											"end": 4728,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "72"
										},
										{
											"begin": 736,
											"end": 746,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 4712,
											"end": 4719,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 4721,
											"end": 4727,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 4696,
											"end": 4704,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "73"
										},
										{
											"begin": 4696,
											"end": 4728,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 4696,
											"end": 4728,
											"name": "tag",
											"source": 0,
											"value": "72"
										},
										{
											"begin": 4696,
											"end": 4728,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4746,
											"end": 4750,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 4746,
											"end": 4750,
											"name": "SWAP4",
											"source": 0
										},
										{
											"begin": 4557,
											"end": 4758,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4557,
											"end": 4758,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 5338,
											"end": 5633,
											"name": "tag",
											"source": 0,
											"value": "32"
										},
										{
											"begin": 5338,
											"end": 5633,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5469,
											"end": 5473,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 736,
											"end": 746,
											"name": "CALLER",
											"source": 4
										},
										{
											"begin": 5527,
											"end": 5565,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "77"
										},
										{
											"begin": 5543,
											"end": 5547,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 736,
											"end": 746,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 5558,
											"end": 5564,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 5527,
											"end": 5542,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "78"
										},
										{
											"begin": 5527,
											"end": 5565,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 5527,
											"end": 5565,
											"name": "tag",
											"source": 0,
											"value": "77"
										},
										{
											"begin": 5527,
											"end": 5565,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5576,
											"end": 5603,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "79"
										},
										{
											"begin": 5586,
											"end": 5590,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 5592,
											"end": 5594,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 5596,
											"end": 5602,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 5576,
											"end": 5585,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "80"
										},
										{
											"begin": 5576,
											"end": 5603,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 5576,
											"end": 5603,
											"name": "tag",
											"source": 0,
											"value": "79"
										},
										{
											"begin": 5576,
											"end": 5603,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5621,
											"end": 5625,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 5621,
											"end": 5625,
											"name": "SWAP5",
											"source": 0
										},
										{
											"begin": 5338,
											"end": 5633,
											"name": "SWAP4",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5338,
											"end": 5633,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 6042,
											"end": 6280,
											"name": "tag",
											"source": 0,
											"value": "39"
										},
										{
											"begin": 6042,
											"end": 6280,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 6130,
											"end": 6134,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 736,
											"end": 746,
											"name": "CALLER",
											"source": 4
										},
										{
											"begin": 6186,
											"end": 6250,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "72"
										},
										{
											"begin": 736,
											"end": 746,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 6202,
											"end": 6209,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 6239,
											"end": 6249,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 6211,
											"end": 6236,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "85"
										},
										{
											"begin": 736,
											"end": 746,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 6202,
											"end": 6209,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 6211,
											"end": 6220,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "60"
										},
										{
											"begin": 6211,
											"end": 6236,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 6211,
											"end": 6236,
											"name": "tag",
											"source": 0,
											"value": "85"
										},
										{
											"begin": 6211,
											"end": 6236,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 6211,
											"end": 6249,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "86"
										},
										{
											"begin": 6211,
											"end": 6249,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 6211,
											"end": 6249,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 6211,
											"end": 6249,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "87"
										},
										{
											"begin": 6211,
											"end": 6249,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 6211,
											"end": 6249,
											"name": "tag",
											"source": 0,
											"value": "86"
										},
										{
											"begin": 6211,
											"end": 6249,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 6186,
											"end": 6194,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "73"
										},
										{
											"begin": 6186,
											"end": 6250,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2423,
											"end": 2527,
											"name": "tag",
											"source": 0,
											"value": "47"
										},
										{
											"begin": 2423,
											"end": 2527,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2479,
											"end": 2492,
											"name": "PUSH",
											"source": 0,
											"value": "60"
										},
										{
											"begin": 2512,
											"end": 2519,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 2505,
											"end": 2519,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2505,
											"end": 2519,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 2505,
											"end": 2519,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "63"
										},
										{
											"begin": 2505,
											"end": 2519,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2505,
											"end": 2519,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "64"
										},
										{
											"begin": 2505,
											"end": 2519,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 6783,
											"end": 7219,
											"name": "tag",
											"source": 0,
											"value": "51"
										},
										{
											"begin": 6783,
											"end": 7219,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 6876,
											"end": 6880,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 736,
											"end": 746,
											"name": "CALLER",
											"source": 4
										},
										{
											"begin": 6876,
											"end": 6880,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 6959,
											"end": 6984,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "97"
										},
										{
											"begin": 736,
											"end": 746,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 6976,
											"end": 6983,
											"name": "DUP7",
											"source": 0
										},
										{
											"begin": 6959,
											"end": 6968,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "60"
										},
										{
											"begin": 6959,
											"end": 6984,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 6959,
											"end": 6984,
											"name": "tag",
											"source": 0,
											"value": "97"
										},
										{
											"begin": 6959,
											"end": 6984,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 6932,
											"end": 6984,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 6932,
											"end": 6984,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 7023,
											"end": 7038,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 7003,
											"end": 7019,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 7003,
											"end": 7038,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 7003,
											"end": 7038,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 6995,
											"end": 7080,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "98"
										},
										{
											"begin": 6995,
											"end": 7080,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 6995,
											"end": 7080,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 6995,
											"end": 7080,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 6995,
											"end": 7080,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 6995,
											"end": 7080,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 4665,
											"end": 4667,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 6995,
											"end": 7080,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 6995,
											"end": 7080,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 6995,
											"end": 7080,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 4647,
											"end": 4668,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 4704,
											"end": 4706,
											"name": "PUSH",
											"source": 10,
											"value": "25"
										},
										{
											"begin": 4684,
											"end": 4702,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 4684,
											"end": 4702,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 4684,
											"end": 4702,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 4677,
											"end": 4707,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 4743,
											"end": 4777,
											"name": "PUSH",
											"source": 10,
											"value": "45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77"
										},
										{
											"begin": 4723,
											"end": 4741,
											"name": "PUSH",
											"source": 10,
											"value": "44"
										},
										{
											"begin": 4723,
											"end": 4741,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 4723,
											"end": 4741,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 4716,
											"end": 4778,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "207A65726F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4794,
											"end": 4812,
											"name": "PUSH",
											"source": 10,
											"value": "64"
										},
										{
											"begin": 4794,
											"end": 4812,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 4794,
											"end": 4812,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 4787,
											"end": 4822,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 4839,
											"end": 4858,
											"name": "PUSH",
											"source": 10,
											"value": "84"
										},
										{
											"begin": 4839,
											"end": 4858,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 6995,
											"end": 7080,
											"name": "tag",
											"source": 0,
											"value": "99"
										},
										{
											"begin": 6995,
											"end": 7080,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 6995,
											"end": 7080,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 6995,
											"end": 7080,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 6995,
											"end": 7080,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 6995,
											"end": 7080,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 6995,
											"end": 7080,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 6995,
											"end": 7080,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 6995,
											"end": 7080,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 6995,
											"end": 7080,
											"name": "tag",
											"source": 0,
											"value": "98"
										},
										{
											"begin": 6995,
											"end": 7080,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 7116,
											"end": 7176,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "79"
										},
										{
											"begin": 7125,
											"end": 7130,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 7132,
											"end": 7139,
											"name": "DUP7",
											"source": 0
										},
										{
											"begin": 7160,
											"end": 7175,
											"name": "DUP7",
											"source": 0
										},
										{
											"begin": 7141,
											"end": 7157,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 7141,
											"end": 7175,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 7116,
											"end": 7124,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "73"
										},
										{
											"begin": 7116,
											"end": 7176,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 3830,
											"end": 4023,
											"name": "tag",
											"source": 0,
											"value": "55"
										},
										{
											"begin": 3830,
											"end": 4023,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3909,
											"end": 3913,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 736,
											"end": 746,
											"name": "CALLER",
											"source": 4
										},
										{
											"begin": 3965,
											"end": 3993,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "72"
										},
										{
											"begin": 736,
											"end": 746,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 3982,
											"end": 3984,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 3986,
											"end": 3992,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 3965,
											"end": 3974,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "80"
										},
										{
											"begin": 3965,
											"end": 3993,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 4086,
											"end": 4237,
											"name": "tag",
											"source": 0,
											"value": "60"
										},
										{
											"begin": 4086,
											"end": 4237,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4202,
											"end": 4220,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 4202,
											"end": 4220,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 4202,
											"end": 4220,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 4175,
											"end": 4182,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 4202,
											"end": 4220,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4202,
											"end": 4220,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 4202,
											"end": 4220,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 4202,
											"end": 4213,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 4202,
											"end": 4220,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 4202,
											"end": 4220,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4202,
											"end": 4220,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 4202,
											"end": 4220,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 4202,
											"end": 4220,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 4202,
											"end": 4220,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 4202,
											"end": 4220,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 4202,
											"end": 4220,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 4202,
											"end": 4229,
											"name": "SWAP4",
											"source": 0
										},
										{
											"begin": 4202,
											"end": 4229,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4202,
											"end": 4229,
											"name": "SWAP5",
											"source": 0
										},
										{
											"begin": 4202,
											"end": 4229,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 4202,
											"end": 4229,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 4202,
											"end": 4229,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 4202,
											"end": 4229,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 4202,
											"end": 4229,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4202,
											"end": 4229,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 4202,
											"end": 4229,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 4202,
											"end": 4229,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 4202,
											"end": 4229,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 4202,
											"end": 4229,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4086,
											"end": 4237,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 10417,
											"end": 10797,
											"name": "tag",
											"source": 0,
											"value": "73"
										},
										{
											"begin": 10417,
											"end": 10797,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 10553,
											"end": 10572,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 10553,
											"end": 10572,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 10545,
											"end": 10613,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "108"
										},
										{
											"begin": 10545,
											"end": 10613,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 10545,
											"end": 10613,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 10545,
											"end": 10613,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 10545,
											"end": 10613,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 10545,
											"end": 10613,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 4260,
											"end": 4262,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 10545,
											"end": 10613,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 10545,
											"end": 10613,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 10545,
											"end": 10613,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 4242,
											"end": 4263,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 4299,
											"end": 4301,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 4279,
											"end": 4297,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 4279,
											"end": 4297,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 4279,
											"end": 4297,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 4272,
											"end": 4302,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 4338,
											"end": 4372,
											"name": "PUSH",
											"source": 10,
											"value": "45524332303A20617070726F76652066726F6D20746865207A65726F20616464"
										},
										{
											"begin": 4318,
											"end": 4336,
											"name": "PUSH",
											"source": 10,
											"value": "44"
										},
										{
											"begin": 4318,
											"end": 4336,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 4318,
											"end": 4336,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 4311,
											"end": 4373,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "72657373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4389,
											"end": 4407,
											"name": "PUSH",
											"source": 10,
											"value": "64"
										},
										{
											"begin": 4389,
											"end": 4407,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 4389,
											"end": 4407,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 4382,
											"end": 4416,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 4433,
											"end": 4452,
											"name": "PUSH",
											"source": 10,
											"value": "84"
										},
										{
											"begin": 4433,
											"end": 4452,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 10545,
											"end": 10613,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "99"
										},
										{
											"begin": 4232,
											"end": 4458,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 10545,
											"end": 10613,
											"name": "tag",
											"source": 0,
											"value": "108"
										},
										{
											"begin": 10545,
											"end": 10613,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 10632,
											"end": 10653,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 10632,
											"end": 10653,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 10624,
											"end": 10692,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "111"
										},
										{
											"begin": 10624,
											"end": 10692,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 10624,
											"end": 10692,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 10624,
											"end": 10692,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 10624,
											"end": 10692,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 10624,
											"end": 10692,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2686,
											"end": 2688,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 10624,
											"end": 10692,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 10624,
											"end": 10692,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 10624,
											"end": 10692,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2668,
											"end": 2689,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 2725,
											"end": 2727,
											"name": "PUSH",
											"source": 10,
											"value": "22"
										},
										{
											"begin": 2705,
											"end": 2723,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 2705,
											"end": 2723,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 2705,
											"end": 2723,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 2698,
											"end": 2728,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 2764,
											"end": 2798,
											"name": "PUSH",
											"source": 10,
											"value": "45524332303A20617070726F766520746F20746865207A65726F206164647265"
										},
										{
											"begin": 2744,
											"end": 2762,
											"name": "PUSH",
											"source": 10,
											"value": "44"
										},
										{
											"begin": 2744,
											"end": 2762,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 2744,
											"end": 2762,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 2737,
											"end": 2799,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "7373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "F0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2815,
											"end": 2833,
											"name": "PUSH",
											"source": 10,
											"value": "64"
										},
										{
											"begin": 2815,
											"end": 2833,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 2815,
											"end": 2833,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 2808,
											"end": 2840,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 2857,
											"end": 2876,
											"name": "PUSH",
											"source": 10,
											"value": "84"
										},
										{
											"begin": 2857,
											"end": 2876,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 10624,
											"end": 10692,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "99"
										},
										{
											"begin": 2658,
											"end": 2882,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 10624,
											"end": 10692,
											"name": "tag",
											"source": 0,
											"value": "111"
										},
										{
											"begin": 10624,
											"end": 10692,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 10705,
											"end": 10723,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 10705,
											"end": 10723,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 10705,
											"end": 10723,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 10705,
											"end": 10723,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 10705,
											"end": 10723,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 10705,
											"end": 10723,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 10705,
											"end": 10723,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 10705,
											"end": 10716,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 10705,
											"end": 10723,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 10705,
											"end": 10723,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 10705,
											"end": 10723,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 10705,
											"end": 10723,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 10705,
											"end": 10723,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 10705,
											"end": 10723,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 10705,
											"end": 10723,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 10705,
											"end": 10723,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 10705,
											"end": 10732,
											"name": "SWAP5",
											"source": 0
										},
										{
											"begin": 10705,
											"end": 10732,
											"name": "DUP8",
											"source": 0
										},
										{
											"begin": 10705,
											"end": 10732,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 10705,
											"end": 10732,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 10705,
											"end": 10732,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 10705,
											"end": 10732,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 10705,
											"end": 10732,
											"name": "SWAP5",
											"source": 0
										},
										{
											"begin": 10705,
											"end": 10732,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 10705,
											"end": 10732,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 10705,
											"end": 10732,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 10705,
											"end": 10732,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 10705,
											"end": 10732,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 10705,
											"end": 10732,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 10705,
											"end": 10741,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 10705,
											"end": 10741,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 10705,
											"end": 10741,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 10757,
											"end": 10789,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 10757,
											"end": 10789,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 5015,
											"end": 5040,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 5015,
											"end": 5040,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 5015,
											"end": 5040,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 10757,
											"end": 10789,
											"name": "PUSH",
											"source": 0,
											"value": "8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925"
										},
										{
											"begin": 10757,
											"end": 10789,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 4988,
											"end": 5006,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 10757,
											"end": 10789,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 10757,
											"end": 10789,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 10757,
											"end": 10789,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 10757,
											"end": 10789,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 10757,
											"end": 10789,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 10757,
											"end": 10789,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 10757,
											"end": 10789,
											"name": "LOG3",
											"source": 0
										},
										{
											"begin": 10417,
											"end": 10797,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 10417,
											"end": 10797,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 10417,
											"end": 10797,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 10417,
											"end": 10797,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 11088,
											"end": 11541,
											"name": "tag",
											"source": 0,
											"value": "78"
										},
										{
											"begin": 11088,
											"end": 11541,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 11223,
											"end": 11247,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 11250,
											"end": 11275,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "116"
										},
										{
											"begin": 11260,
											"end": 11265,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 11267,
											"end": 11274,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 11250,
											"end": 11259,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "60"
										},
										{
											"begin": 11250,
											"end": 11275,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 11250,
											"end": 11275,
											"name": "tag",
											"source": 0,
											"value": "116"
										},
										{
											"begin": 11250,
											"end": 11275,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 11223,
											"end": 11275,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 11223,
											"end": 11275,
											"name": "POP",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 11290,
											"end": 11306,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 11290,
											"end": 11327,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 11286,
											"end": 11534,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "121"
										},
										{
											"begin": 11286,
											"end": 11534,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 11372,
											"end": 11378,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 11352,
											"end": 11368,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 11352,
											"end": 11378,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 11352,
											"end": 11378,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 11344,
											"end": 11412,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "118"
										},
										{
											"begin": 11344,
											"end": 11412,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 11344,
											"end": 11412,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 11344,
											"end": 11412,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 11344,
											"end": 11412,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 11344,
											"end": 11412,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 3089,
											"end": 3091,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 11344,
											"end": 11412,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 11344,
											"end": 11412,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 11344,
											"end": 11412,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 3071,
											"end": 3092,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 3128,
											"end": 3130,
											"name": "PUSH",
											"source": 10,
											"value": "1D"
										},
										{
											"begin": 3108,
											"end": 3126,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 3108,
											"end": 3126,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 3108,
											"end": 3126,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 3101,
											"end": 3131,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 3167,
											"end": 3198,
											"name": "PUSH",
											"source": 10,
											"value": "45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000"
										},
										{
											"begin": 3147,
											"end": 3165,
											"name": "PUSH",
											"source": 10,
											"value": "44"
										},
										{
											"begin": 3147,
											"end": 3165,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 3147,
											"end": 3165,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 3140,
											"end": 3199,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 3216,
											"end": 3234,
											"name": "PUSH",
											"source": 10,
											"value": "64"
										},
										{
											"begin": 3216,
											"end": 3234,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 11344,
											"end": 11412,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "99"
										},
										{
											"begin": 3061,
											"end": 3240,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 11344,
											"end": 11412,
											"name": "tag",
											"source": 0,
											"value": "118"
										},
										{
											"begin": 11344,
											"end": 11412,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 11456,
											"end": 11507,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "121"
										},
										{
											"begin": 11465,
											"end": 11470,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 11472,
											"end": 11479,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 11500,
											"end": 11506,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 11481,
											"end": 11497,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 11481,
											"end": 11506,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 11456,
											"end": 11464,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "73"
										},
										{
											"begin": 11456,
											"end": 11507,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 11456,
											"end": 11507,
											"name": "tag",
											"source": 0,
											"value": "121"
										},
										{
											"begin": 11456,
											"end": 11507,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 11088,
											"end": 11541,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 11088,
											"end": 11541,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 11088,
											"end": 11541,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 11088,
											"end": 11541,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 11088,
											"end": 11541,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 7698,
											"end": 8369,
											"name": "tag",
											"source": 0,
											"value": "80"
										},
										{
											"begin": 7698,
											"end": 8369,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7829,
											"end": 7847,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 7829,
											"end": 7847,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 7821,
											"end": 7889,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "123"
										},
										{
											"begin": 7821,
											"end": 7889,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 7821,
											"end": 7889,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 7821,
											"end": 7889,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7821,
											"end": 7889,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 7821,
											"end": 7889,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 3854,
											"end": 3856,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 7821,
											"end": 7889,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 7821,
											"end": 7889,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 7821,
											"end": 7889,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 3836,
											"end": 3857,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 3893,
											"end": 3895,
											"name": "PUSH",
											"source": 10,
											"value": "25"
										},
										{
											"begin": 3873,
											"end": 3891,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 3873,
											"end": 3891,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 3873,
											"end": 3891,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 3866,
											"end": 3896,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 3932,
											"end": 3966,
											"name": "PUSH",
											"source": 10,
											"value": "45524332303A207472616E736665722066726F6D20746865207A65726F206164"
										},
										{
											"begin": 3912,
											"end": 3930,
											"name": "PUSH",
											"source": 10,
											"value": "44"
										},
										{
											"begin": 3912,
											"end": 3930,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 3912,
											"end": 3930,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 3905,
											"end": 3967,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "6472657373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3983,
											"end": 4001,
											"name": "PUSH",
											"source": 10,
											"value": "64"
										},
										{
											"begin": 3983,
											"end": 4001,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 3983,
											"end": 4001,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 3976,
											"end": 4011,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 4028,
											"end": 4047,
											"name": "PUSH",
											"source": 10,
											"value": "84"
										},
										{
											"begin": 4028,
											"end": 4047,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 7821,
											"end": 7889,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "99"
										},
										{
											"begin": 3826,
											"end": 4053,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 7821,
											"end": 7889,
											"name": "tag",
											"source": 0,
											"value": "123"
										},
										{
											"begin": 7821,
											"end": 7889,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7908,
											"end": 7924,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 7908,
											"end": 7924,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 7900,
											"end": 7964,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "126"
										},
										{
											"begin": 7900,
											"end": 7964,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 7900,
											"end": 7964,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 7900,
											"end": 7964,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7900,
											"end": 7964,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 7900,
											"end": 7964,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2282,
											"end": 2284,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 7900,
											"end": 7964,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 7900,
											"end": 7964,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 7900,
											"end": 7964,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2264,
											"end": 2285,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 2321,
											"end": 2323,
											"name": "PUSH",
											"source": 10,
											"value": "23"
										},
										{
											"begin": 2301,
											"end": 2319,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 2301,
											"end": 2319,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 2301,
											"end": 2319,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 2294,
											"end": 2324,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 2360,
											"end": 2394,
											"name": "PUSH",
											"source": 10,
											"value": "45524332303A207472616E7366657220746F20746865207A65726F2061646472"
										},
										{
											"begin": 2340,
											"end": 2358,
											"name": "PUSH",
											"source": 10,
											"value": "44"
										},
										{
											"begin": 2340,
											"end": 2358,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 2340,
											"end": 2358,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 2333,
											"end": 2395,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "657373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2411,
											"end": 2429,
											"name": "PUSH",
											"source": 10,
											"value": "64"
										},
										{
											"begin": 2411,
											"end": 2429,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 2411,
											"end": 2429,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 2404,
											"end": 2437,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 2454,
											"end": 2473,
											"name": "PUSH",
											"source": 10,
											"value": "84"
										},
										{
											"begin": 2454,
											"end": 2473,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 7900,
											"end": 7964,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "99"
										},
										{
											"begin": 2254,
											"end": 2479,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 7900,
											"end": 7964,
											"name": "tag",
											"source": 0,
											"value": "126"
										},
										{
											"begin": 7900,
											"end": 7964,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8050,
											"end": 8065,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 8050,
											"end": 8065,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 8028,
											"end": 8047,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 8050,
											"end": 8065,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 8050,
											"end": 8065,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 8050,
											"end": 8065,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 8050,
											"end": 8065,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 8050,
											"end": 8065,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 8050,
											"end": 8065,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 8050,
											"end": 8065,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 8050,
											"end": 8065,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 8050,
											"end": 8065,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 8050,
											"end": 8065,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 8050,
											"end": 8065,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 8084,
											"end": 8105,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 8084,
											"end": 8105,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 8084,
											"end": 8105,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 8084,
											"end": 8105,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 8076,
											"end": 8148,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "131"
										},
										{
											"begin": 8076,
											"end": 8148,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 8076,
											"end": 8148,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 8076,
											"end": 8148,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 8076,
											"end": 8148,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 8076,
											"end": 8148,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 3447,
											"end": 3449,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 8076,
											"end": 8148,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 8076,
											"end": 8148,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 8076,
											"end": 8148,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 3429,
											"end": 3450,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 3486,
											"end": 3488,
											"name": "PUSH",
											"source": 10,
											"value": "26"
										},
										{
											"begin": 3466,
											"end": 3484,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 3466,
											"end": 3484,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 3466,
											"end": 3484,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 3459,
											"end": 3489,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 3525,
											"end": 3559,
											"name": "PUSH",
											"source": 10,
											"value": "45524332303A207472616E7366657220616D6F756E7420657863656564732062"
										},
										{
											"begin": 3505,
											"end": 3523,
											"name": "PUSH",
											"source": 10,
											"value": "44"
										},
										{
											"begin": 3505,
											"end": 3523,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 3505,
											"end": 3523,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 3498,
											"end": 3560,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "616C616E6365"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3576,
											"end": 3594,
											"name": "PUSH",
											"source": 10,
											"value": "64"
										},
										{
											"begin": 3576,
											"end": 3594,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 3576,
											"end": 3594,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 3569,
											"end": 3605,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 3622,
											"end": 3641,
											"name": "PUSH",
											"source": 10,
											"value": "84"
										},
										{
											"begin": 3622,
											"end": 3641,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 8076,
											"end": 8148,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "99"
										},
										{
											"begin": 3419,
											"end": 3647,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 8076,
											"end": 8148,
											"name": "tag",
											"source": 0,
											"value": "131"
										},
										{
											"begin": 8076,
											"end": 8148,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8184,
											"end": 8199,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 8184,
											"end": 8199,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 8184,
											"end": 8199,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 8184,
											"end": 8193,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 8184,
											"end": 8199,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 8184,
											"end": 8199,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 8184,
											"end": 8199,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 8184,
											"end": 8199,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 8184,
											"end": 8199,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 8184,
											"end": 8199,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 8184,
											"end": 8199,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 8184,
											"end": 8199,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 8184,
											"end": 8199,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 8184,
											"end": 8199,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 8184,
											"end": 8199,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 8202,
											"end": 8222,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 8202,
											"end": 8222,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 8202,
											"end": 8222,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 8184,
											"end": 8222,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 8184,
											"end": 8222,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 8244,
											"end": 8257,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 8244,
											"end": 8257,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 8244,
											"end": 8257,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 8244,
											"end": 8257,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 8244,
											"end": 8257,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 8244,
											"end": 8257,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 8244,
											"end": 8257,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 8244,
											"end": 8257,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 8244,
											"end": 8267,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 8244,
											"end": 8267,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 8216,
											"end": 8222,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 8216,
											"end": 8222,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 8184,
											"end": 8193,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 8244,
											"end": 8267,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "134"
										},
										{
											"begin": 8244,
											"end": 8267,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 8216,
											"end": 8222,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 8216,
											"end": 8222,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 8244,
											"end": 8267,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "87"
										},
										{
											"begin": 8244,
											"end": 8267,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 8244,
											"end": 8267,
											"name": "tag",
											"source": 0,
											"value": "134"
										},
										{
											"begin": 8244,
											"end": 8267,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 8244,
											"end": 8267,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 8244,
											"end": 8267,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 8244,
											"end": 8267,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 8244,
											"end": 8267,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 8244,
											"end": 8267,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 8244,
											"end": 8267,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 8244,
											"end": 8267,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 8300,
											"end": 8302,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8285,
											"end": 8311,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 8294,
											"end": 8298,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8285,
											"end": 8311,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 8285,
											"end": 8311,
											"name": "PUSH",
											"source": 0,
											"value": "DDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF"
										},
										{
											"begin": 8304,
											"end": 8310,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 8285,
											"end": 8311,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 8285,
											"end": 8311,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 8285,
											"end": 8311,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "135"
										},
										{
											"begin": 8285,
											"end": 8311,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 5015,
											"end": 5040,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 5015,
											"end": 5040,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 5003,
											"end": 5005,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 4988,
											"end": 5006,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 4988,
											"end": 5006,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 4970,
											"end": 5046,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 8285,
											"end": 8311,
											"name": "tag",
											"source": 0,
											"value": "135"
										},
										{
											"begin": 8285,
											"end": 8311,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 8285,
											"end": 8311,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 8285,
											"end": 8311,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 8285,
											"end": 8311,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 8285,
											"end": 8311,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 8285,
											"end": 8311,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 8285,
											"end": 8311,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 8285,
											"end": 8311,
											"name": "LOG3",
											"source": 0
										},
										{
											"begin": 8324,
											"end": 8361,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "121"
										},
										{
											"begin": 12141,
											"end": 12266,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 14,
											"end": 187,
											"name": "tag",
											"source": 10,
											"value": "141"
										},
										{
											"begin": 14,
											"end": 187,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 82,
											"end": 102,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 82,
											"end": 102,
											"name": "CALLDATALOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 131,
											"end": 162,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 131,
											"end": 162,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 121,
											"end": 163,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 121,
											"end": 163,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 111,
											"end": 113,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "143"
										},
										{
											"begin": 111,
											"end": 113,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 177,
											"end": 178,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 174,
											"end": 175,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 167,
											"end": 179,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 111,
											"end": 113,
											"name": "tag",
											"source": 10,
											"value": "143"
										},
										{
											"begin": 111,
											"end": 113,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 63,
											"end": 187,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 63,
											"end": 187,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 63,
											"end": 187,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 63,
											"end": 187,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 192,
											"end": 388,
											"name": "tag",
											"source": 10,
											"value": "43"
										},
										{
											"begin": 192,
											"end": 388,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 251,
											"end": 257,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 304,
											"end": 306,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 292,
											"end": 301,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 283,
											"end": 290,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 279,
											"end": 302,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 275,
											"end": 307,
											"name": "SLT",
											"source": 10
										},
										{
											"begin": 272,
											"end": 274,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 272,
											"end": 274,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "145"
										},
										{
											"begin": 272,
											"end": 274,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 325,
											"end": 331,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 317,
											"end": 323,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 310,
											"end": 332,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 272,
											"end": 274,
											"name": "tag",
											"source": 10,
											"value": "145"
										},
										{
											"begin": 272,
											"end": 274,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 353,
											"end": 382,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "146"
										},
										{
											"begin": 372,
											"end": 381,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 353,
											"end": 382,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "141"
										},
										{
											"begin": 353,
											"end": 382,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 353,
											"end": 382,
											"name": "tag",
											"source": 10,
											"value": "146"
										},
										{
											"begin": 353,
											"end": 382,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 343,
											"end": 382,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 262,
											"end": 388,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 262,
											"end": 388,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 393,
											"end": 663,
											"name": "tag",
											"source": 10,
											"value": "59"
										},
										{
											"begin": 393,
											"end": 663,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 461,
											"end": 467,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 469,
											"end": 475,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 522,
											"end": 524,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 510,
											"end": 519,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 501,
											"end": 508,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 497,
											"end": 520,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 493,
											"end": 525,
											"name": "SLT",
											"source": 10
										},
										{
											"begin": 490,
											"end": 492,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 490,
											"end": 492,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "148"
										},
										{
											"begin": 490,
											"end": 492,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 543,
											"end": 549,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 535,
											"end": 541,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 528,
											"end": 550,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 490,
											"end": 492,
											"name": "tag",
											"source": 10,
											"value": "148"
										},
										{
											"begin": 490,
											"end": 492,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 571,
											"end": 600,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "149"
										},
										{
											"begin": 590,
											"end": 599,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 571,
											"end": 600,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "141"
										},
										{
											"begin": 571,
											"end": 600,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 571,
											"end": 600,
											"name": "tag",
											"source": 10,
											"value": "149"
										},
										{
											"begin": 571,
											"end": 600,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 561,
											"end": 600,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 561,
											"end": 600,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 619,
											"end": 657,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "150"
										},
										{
											"begin": 653,
											"end": 655,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 642,
											"end": 651,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 638,
											"end": 656,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 619,
											"end": 657,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "141"
										},
										{
											"begin": 619,
											"end": 657,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 619,
											"end": 657,
											"name": "tag",
											"source": 10,
											"value": "150"
										},
										{
											"begin": 619,
											"end": 657,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 609,
											"end": 657,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 609,
											"end": 657,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 480,
											"end": 663,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 480,
											"end": 663,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 480,
											"end": 663,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 480,
											"end": 663,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 480,
											"end": 663,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 480,
											"end": 663,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 668,
											"end": 1006,
											"name": "tag",
											"source": 10,
											"value": "31"
										},
										{
											"begin": 668,
											"end": 1006,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 745,
											"end": 751,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 753,
											"end": 759,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 761,
											"end": 767,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 814,
											"end": 816,
											"name": "PUSH",
											"source": 10,
											"value": "60"
										},
										{
											"begin": 802,
											"end": 811,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 793,
											"end": 800,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 789,
											"end": 812,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 785,
											"end": 817,
											"name": "SLT",
											"source": 10
										},
										{
											"begin": 782,
											"end": 784,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 782,
											"end": 784,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "152"
										},
										{
											"begin": 782,
											"end": 784,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 835,
											"end": 841,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 827,
											"end": 833,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 820,
											"end": 842,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 782,
											"end": 784,
											"name": "tag",
											"source": 10,
											"value": "152"
										},
										{
											"begin": 782,
											"end": 784,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 863,
											"end": 892,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "153"
										},
										{
											"begin": 882,
											"end": 891,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 863,
											"end": 892,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "141"
										},
										{
											"begin": 863,
											"end": 892,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 863,
											"end": 892,
											"name": "tag",
											"source": 10,
											"value": "153"
										},
										{
											"begin": 863,
											"end": 892,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 853,
											"end": 892,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 853,
											"end": 892,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 911,
											"end": 949,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "154"
										},
										{
											"begin": 945,
											"end": 947,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 934,
											"end": 943,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 930,
											"end": 948,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 911,
											"end": 949,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "141"
										},
										{
											"begin": 911,
											"end": 949,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 911,
											"end": 949,
											"name": "tag",
											"source": 10,
											"value": "154"
										},
										{
											"begin": 911,
											"end": 949,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 901,
											"end": 949,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 901,
											"end": 949,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 996,
											"end": 998,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 985,
											"end": 994,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 981,
											"end": 999,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 968,
											"end": 1000,
											"name": "CALLDATALOAD",
											"source": 10
										},
										{
											"begin": 958,
											"end": 1000,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 958,
											"end": 1000,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 772,
											"end": 1006,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 772,
											"end": 1006,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 772,
											"end": 1006,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 772,
											"end": 1006,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 772,
											"end": 1006,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 772,
											"end": 1006,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 1011,
											"end": 1275,
											"name": "tag",
											"source": 10,
											"value": "21"
										},
										{
											"begin": 1011,
											"end": 1275,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1079,
											"end": 1085,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1087,
											"end": 1093,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1140,
											"end": 1142,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 1128,
											"end": 1137,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 1119,
											"end": 1126,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 1115,
											"end": 1138,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 1111,
											"end": 1143,
											"name": "SLT",
											"source": 10
										},
										{
											"begin": 1108,
											"end": 1110,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 1108,
											"end": 1110,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "156"
										},
										{
											"begin": 1108,
											"end": 1110,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 1161,
											"end": 1167,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1153,
											"end": 1159,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 1146,
											"end": 1168,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 1108,
											"end": 1110,
											"name": "tag",
											"source": 10,
											"value": "156"
										},
										{
											"begin": 1108,
											"end": 1110,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1189,
											"end": 1218,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "157"
										},
										{
											"begin": 1208,
											"end": 1217,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 1189,
											"end": 1218,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "141"
										},
										{
											"begin": 1189,
											"end": 1218,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 1189,
											"end": 1218,
											"name": "tag",
											"source": 10,
											"value": "157"
										},
										{
											"begin": 1189,
											"end": 1218,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1179,
											"end": 1218,
											"name": "SWAP5",
											"source": 10
										},
										{
											"begin": 1265,
											"end": 1267,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 1250,
											"end": 1268,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 1250,
											"end": 1268,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1250,
											"end": 1268,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 1250,
											"end": 1268,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1237,
											"end": 1269,
											"name": "CALLDATALOAD",
											"source": 10
										},
										{
											"begin": 1237,
											"end": 1269,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1098,
											"end": 1275,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 1472,
											"end": 2075,
											"name": "tag",
											"source": 10,
											"value": "18"
										},
										{
											"begin": 1472,
											"end": 2075,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1584,
											"end": 1588,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1613,
											"end": 1615,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 1642,
											"end": 1644,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1631,
											"end": 1640,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 1624,
											"end": 1645,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 1674,
											"end": 1680,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 1668,
											"end": 1681,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 1717,
											"end": 1723,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1712,
											"end": 1714,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 1701,
											"end": 1710,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 1697,
											"end": 1715,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1690,
											"end": 1724,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 1742,
											"end": 1746,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 1755,
											"end": 1895,
											"name": "tag",
											"source": 10,
											"value": "160"
										},
										{
											"begin": 1755,
											"end": 1895,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1769,
											"end": 1775,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1766,
											"end": 1767,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1763,
											"end": 1776,
											"name": "LT",
											"source": 10
										},
										{
											"begin": 1755,
											"end": 1895,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 1755,
											"end": 1895,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "162"
										},
										{
											"begin": 1755,
											"end": 1895,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 1864,
											"end": 1878,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 1864,
											"end": 1878,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1864,
											"end": 1878,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1860,
											"end": 1883,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 1860,
											"end": 1883,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1854,
											"end": 1884,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 1830,
											"end": 1847,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 1830,
											"end": 1847,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 1830,
											"end": 1847,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1849,
											"end": 1851,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 1826,
											"end": 1852,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1819,
											"end": 1885,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 1784,
											"end": 1794,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 1784,
											"end": 1794,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1755,
											"end": 1895,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "160"
										},
										{
											"begin": 1755,
											"end": 1895,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 1755,
											"end": 1895,
											"name": "tag",
											"source": 10,
											"value": "162"
										},
										{
											"begin": 1755,
											"end": 1895,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1913,
											"end": 1919,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1910,
											"end": 1911,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1907,
											"end": 1920,
											"name": "GT",
											"source": 10
										},
										{
											"begin": 1904,
											"end": 1906,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 1904,
											"end": 1906,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "163"
										},
										{
											"begin": 1904,
											"end": 1906,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 1983,
											"end": 1987,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 1978,
											"end": 1980,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 1969,
											"end": 1975,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 1958,
											"end": 1967,
											"name": "DUP8",
											"source": 10
										},
										{
											"begin": 1954,
											"end": 1976,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1950,
											"end": 1981,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1943,
											"end": 1988,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 1904,
											"end": 1906,
											"name": "tag",
											"source": 10,
											"value": "163"
										},
										{
											"begin": 1904,
											"end": 1906,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2059,
											"end": 2061,
											"name": "PUSH",
											"source": 10,
											"value": "1F"
										},
										{
											"begin": 2038,
											"end": 2053,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 2034,
											"end": 2063,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 2019,
											"end": 2064,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 2019,
											"end": 2064,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 2019,
											"end": 2064,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 2019,
											"end": 2064,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 2066,
											"end": 2068,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 2015,
											"end": 2069,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 2015,
											"end": 2069,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 1593,
											"end": 2075,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1593,
											"end": 2075,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 5051,
											"end": 5280,
											"name": "tag",
											"source": 10,
											"value": "87"
										},
										{
											"begin": 5051,
											"end": 5280,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 5091,
											"end": 5094,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 5122,
											"end": 5123,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 5118,
											"end": 5124,
											"name": "NOT",
											"source": 10
										},
										{
											"begin": 5115,
											"end": 5116,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 5112,
											"end": 5125,
											"name": "GT",
											"source": 10
										},
										{
											"begin": 5109,
											"end": 5111,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 5109,
											"end": 5111,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "173"
										},
										{
											"begin": 5109,
											"end": 5111,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "4E487B71"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5148,
											"end": 5181,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 5148,
											"end": 5181,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 5204,
											"end": 5208,
											"name": "PUSH",
											"source": 10,
											"value": "11"
										},
										{
											"begin": 5201,
											"end": 5202,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 5194,
											"end": 5209,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 5234,
											"end": 5238,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 5155,
											"end": 5158,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 5222,
											"end": 5239,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 5109,
											"end": 5111,
											"name": "tag",
											"source": 10,
											"value": "173"
										},
										{
											"begin": 5109,
											"end": 5111,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5265,
											"end": 5274,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 5265,
											"end": 5274,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 5099,
											"end": 5280,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 5285,
											"end": 5665,
											"name": "tag",
											"source": 10,
											"value": "64"
										},
										{
											"begin": 5285,
											"end": 5665,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 5364,
											"end": 5365,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 5360,
											"end": 5372,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 5360,
											"end": 5372,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 5360,
											"end": 5372,
											"name": "SHR",
											"source": 10
										},
										{
											"begin": 5360,
											"end": 5372,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 5407,
											"end": 5419,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 5407,
											"end": 5419,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 5407,
											"end": 5419,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 5428,
											"end": 5430,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "175"
										},
										{
											"begin": 5428,
											"end": 5430,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 5482,
											"end": 5486,
											"name": "PUSH",
											"source": 10,
											"value": "7F"
										},
										{
											"begin": 5474,
											"end": 5480,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 5470,
											"end": 5487,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 5460,
											"end": 5487,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 5460,
											"end": 5487,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 5428,
											"end": 5430,
											"name": "tag",
											"source": 10,
											"value": "175"
										},
										{
											"begin": 5428,
											"end": 5430,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 5535,
											"end": 5537,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 5527,
											"end": 5533,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 5524,
											"end": 5538,
											"name": "LT",
											"source": 10
										},
										{
											"begin": 5504,
											"end": 5522,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 5501,
											"end": 5539,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 5498,
											"end": 5500,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 5498,
											"end": 5500,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "176"
										},
										{
											"begin": 5498,
											"end": 5500,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 5581,
											"end": 5591,
											"name": "PUSH",
											"source": 10,
											"value": "4E487B71"
										},
										{
											"begin": 5576,
											"end": 5579,
											"name": "PUSH",
											"source": 10,
											"value": "E0"
										},
										{
											"begin": 5572,
											"end": 5592,
											"name": "SHL",
											"source": 10
										},
										{
											"begin": 5569,
											"end": 5570,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 5562,
											"end": 5593,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 5616,
											"end": 5620,
											"name": "PUSH",
											"source": 10,
											"value": "22"
										},
										{
											"begin": 5613,
											"end": 5614,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 5606,
											"end": 5621,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 5644,
											"end": 5648,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 5641,
											"end": 5642,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 5634,
											"end": 5649,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 5498,
											"end": 5500,
											"name": "tag",
											"source": 10,
											"value": "176"
										},
										{
											"begin": 5498,
											"end": 5500,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 5498,
											"end": 5500,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 5340,
											"end": 5665,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 5340,
											"end": 5665,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 5340,
											"end": 5665,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 5340,
											"end": 5665,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										}
									]
								}
							}
						},
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"decimals()": "313ce567",
							"decreaseAllowance(address,uint256)": "a457c2d7",
							"increaseAllowance(address,uint256)": "39509351",
							"name()": "06fdde03",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC20} interface. z This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. For a generic mechanism see {ERC20PresetMinterPauser}. TIP: For a detailed writeup see our guide https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. We have followed general OpenZeppelin Contracts guidelines: functions revert instead returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC20 applications. Additionally, an {Approval} event is emitted on calls to {transferFrom}. This allows applications to reconstruct the allowance for all accounts just by listening to said events. Other implementations of the EIP may not emit these events, as it isn't required by the specification. Finally, the non-standard {decreaseAllowance} and {increaseAllowance} functions have been added to mitigate the well-known issues around setting allowances. See {IERC20-approve}.\",\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"constructor\":{\"details\":\"Sets the values for {name} and {symbol}. The default value of {decimals} is 18. To select a different value for {decimals} you should overload it. All two of these values are immutable: they can only be set once during construction.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"ERC20/ERC20.sol\":\"ERC20\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"ERC20/ERC20.sol\":{\"keccak256\":\"0x06de64a6e4f0f98aaf7bc91b3826b714e7ce7827a08da3031f8f2f91c14c5687\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://79cb85a1ebbc907f8b80a26cfce98cd61eb1dfc5dbed47f2cc5f6e7a3e87d2db\",\"dweb:/ipfs/QmWzRXkG6oFwtNiGz98zduSDVYhnTKkCE5YMTVE15fBFse\"]},\"ERC20/IERC20.sol\":{\"keccak256\":\"0x62e7e272bf9d2c10b294645ea698d7fc41dadc18146ac88e9b9cc18514faacc1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e09024b0f1ddb94bdc13008d4c221747b1a6f1e07b0ca599d8d213925982af34\",\"dweb:/ipfs/QmcL6X4KCFc45tk5xSEgBDFUrsKap8G74aJtti5sUYzYCL\"]},\"ERC20/IERC20Metadata.sol\":{\"keccak256\":\"0x2095e6b6cd9fc67a55c1dce6c4a4282036fef487baf848e399adc2f571f6c47b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bbdbc5c7af217e674e7c45ab729cf3ffe1c2756c4438e5818f39f30266b836e2\",\"dweb:/ipfs/QmPkmQQ6bAVYGRKR1KMqRhU1kPL49aFc5zqCLmJZEMsavE\"]},\"Utils/Context.sol\":{\"keccak256\":\"0x81d5fc973a522c8909d60be6a201869d46aa47b030b8813f60616404628c2b94\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9755b505799e622d964a843a8ed1fd60fedffca230178e5cb95ae9280df4dcd2\",\"dweb:/ipfs/QmRkhUYUUgRZ2QYJjmtQct2ubyYwS3bdUMhbuFYM12VfYn\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 15,
								"contract": "ERC20/ERC20.sol:ERC20",
								"label": "_balances",
								"offset": 0,
								"slot": "0",
								"type": "t_mapping(t_address,t_uint256)"
							},
							{
								"astId": 21,
								"contract": "ERC20/ERC20.sol:ERC20",
								"label": "_allowances",
								"offset": 0,
								"slot": "1",
								"type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
							},
							{
								"astId": 23,
								"contract": "ERC20/ERC20.sol:ERC20",
								"label": "_totalSupply",
								"offset": 0,
								"slot": "2",
								"type": "t_uint256"
							},
							{
								"astId": 25,
								"contract": "ERC20/ERC20.sol:ERC20",
								"label": "_name",
								"offset": 0,
								"slot": "3",
								"type": "t_string_storage"
							},
							{
								"astId": 27,
								"contract": "ERC20/ERC20.sol:ERC20",
								"label": "_symbol",
								"offset": 0,
								"slot": "4",
								"type": "t_string_storage"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_mapping(t_address,t_mapping(t_address,t_uint256))": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => mapping(address => uint256))",
								"numberOfBytes": "32",
								"value": "t_mapping(t_address,t_uint256)"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_string_storage": {
								"encoding": "bytes",
								"label": "string",
								"numberOfBytes": "32"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"ERC20/IERC20.sol": {
				"IERC20": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC20 standard as defined in the EIP.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the amount of tokens owned by `account`."
							},
							"totalSupply()": {
								"details": "Returns the amount of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"ERC20/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"ERC20/IERC20.sol\":{\"keccak256\":\"0x62e7e272bf9d2c10b294645ea698d7fc41dadc18146ac88e9b9cc18514faacc1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e09024b0f1ddb94bdc13008d4c221747b1a6f1e07b0ca599d8d213925982af34\",\"dweb:/ipfs/QmcL6X4KCFc45tk5xSEgBDFUrsKap8G74aJtti5sUYzYCL\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"ERC20/IERC20Metadata.sol": {
				"IERC20Metadata": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface for the optional metadata functions from the ERC20 standard. _Available since v4.1._",
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the amount of tokens owned by `account`."
							},
							"decimals()": {
								"details": "Returns the decimals places of the token."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"symbol()": {
								"details": "Returns the symbol of the token."
							},
							"totalSupply()": {
								"details": "Returns the amount of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"decimals()": "313ce567",
							"name()": "06fdde03",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for the optional metadata functions from the ERC20 standard. _Available since v4.1._\",\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"decimals()\":{\"details\":\"Returns the decimals places of the token.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"ERC20/IERC20Metadata.sol\":\"IERC20Metadata\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"ERC20/IERC20.sol\":{\"keccak256\":\"0x62e7e272bf9d2c10b294645ea698d7fc41dadc18146ac88e9b9cc18514faacc1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e09024b0f1ddb94bdc13008d4c221747b1a6f1e07b0ca599d8d213925982af34\",\"dweb:/ipfs/QmcL6X4KCFc45tk5xSEgBDFUrsKap8G74aJtti5sUYzYCL\"]},\"ERC20/IERC20Metadata.sol\":{\"keccak256\":\"0x2095e6b6cd9fc67a55c1dce6c4a4282036fef487baf848e399adc2f571f6c47b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bbdbc5c7af217e674e7c45ab729cf3ffe1c2756c4438e5818f39f30266b836e2\",\"dweb:/ipfs/QmPkmQQ6bAVYGRKR1KMqRhU1kPL49aFc5zqCLmJZEMsavE\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"Ethereum/Presale.sol": {
				"Presale": {
					"abi": [
						{
							"inputs": [],
							"stateMutability": "payable",
							"type": "constructor"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "WETH",
							"outputs": [
								{
									"internalType": "contract IERC20",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "backToken",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"name": "buyerInfo",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "baseDeposit",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "tokenOwner",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "lastWithDraw",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "totalTokenWithDraw",
									"type": "uint256"
								},
								{
									"internalType": "bool",
									"name": "isRefund",
									"type": "bool"
								},
								{
									"internalType": "bool",
									"name": "isClaim",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "checkAdminAddress",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "_amount",
									"type": "uint256"
								}
							],
							"name": "deposit",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "feeAnyone",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_address",
									"type": "address"
								}
							],
							"name": "getBalance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address payable",
									"name": "_presaleOwner",
									"type": "address"
								},
								{
									"internalType": "contract ERC20",
									"name": "_saleToken",
									"type": "address"
								},
								{
									"internalType": "contract ERC20",
									"name": "_baseTOken",
									"type": "address"
								},
								{
									"internalType": "uint256[7]",
									"name": "datas",
									"type": "uint256[7]"
								}
							],
							"name": "initialSaleInfor",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "presaleStatus",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "totalBaseCollected",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "totalTokenSold",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "totalTokenWithDraw",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "totalBaseWithDraw",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "numByer",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "totalFee",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "saleInfor",
							"outputs": [
								{
									"internalType": "address payable",
									"name": "presaleOwner",
									"type": "address"
								},
								{
									"internalType": "contract ERC20",
									"name": "saleToken",
									"type": "address"
								},
								{
									"internalType": "contract ERC20",
									"name": "baseToken",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenPrice",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "startSale",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "endSale",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "minSpendPerBuyer",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "maxSpendPerBuyer",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "refundFee",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "claimFee",
									"type": "uint256"
								},
								{
									"internalType": "bool",
									"name": "saleIsBaseToken",
									"type": "bool"
								},
								{
									"internalType": "uint256",
									"name": "amountTokenForSale",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "status",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferETH",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"name": "userFee",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"Ethereum/Presale.sol\":338:4857  contract Presale is ReentrancyGuard, Ownable{\r... */\n  mstore(0x40, 0x80)\n    /* \"Utils/ReentrancyGuard.sol\":1734:1735  1 */\n  0x01\n    /* \"Utils/ReentrancyGuard.sol\":1845:1852  _status */\n  0x00\n    /* \"Utils/ReentrancyGuard.sol\":1845:1867  _status = _NOT_ENTERED */\n  sstore\n    /* \"Utils/Ownable.sol\":942:974  _transferOwnership(_msgSender()) */\n  tag_6\n    /* \"Utils/Context.sol\":736:746  msg.sender */\n  caller\n    /* \"Utils/Ownable.sol\":942:960  _transferOwnership */\n  tag_9\n    /* \"Utils/Ownable.sol\":942:974  _transferOwnership(_msgSender()) */\n  jump\t// in\ntag_6:\n    /* \"Ethereum/Presale.sol\":1903:1907  WETH */\n  0x17\n    /* \"Ethereum/Presale.sol\":1903:1959  WETH = ERC20(0xc778417E063141139Fce010982780140Aa0cD5Ab) */\n  dup1\n  sload\n    /* \"Ethereum/Presale.sol\":1916:1958  0xc778417E063141139Fce010982780140Aa0cD5Ab */\n  0xc778417e063141139fce010982780140aa0cd5ab\n  not(sub(shl(0xa0, 0x01), 0x01))\n    /* \"Ethereum/Presale.sol\":1903:1959  WETH = ERC20(0xc778417E063141139Fce010982780140Aa0cD5Ab) */\n  swap1\n  swap2\n  and\n  or\n  swap1\n  sstore\n    /* \"Ethereum/Presale.sol\":1970:2024  admins.add(0x6Ccb41eedA5a073076F3E7dC1614C185b5fA41eD) */\n  tag_11\n    /* \"Ethereum/Presale.sol\":1970:1976  admins */\n  0x19\n    /* \"Ethereum/Presale.sol\":1981:2023  0x6Ccb41eedA5a073076F3E7dC1614C185b5fA41eD */\n  0x6ccb41eeda5a073076f3e7dc1614c185b5fa41ed\n    /* \"Ethereum/Presale.sol\":1970:1980  admins.add */\n  tag_12\n  0x20\n  swap1\n  dup2\n  shl\n  tag_0_95\n  or\n    /* \"Ethereum/Presale.sol\":1970:2024  admins.add(0x6Ccb41eedA5a073076F3E7dC1614C185b5fA41eD) */\n  swap1\n  shr\n  jump\t// in\ntag_11:\n  pop\n    /* \"Ethereum/Presale.sol\":2035:2089  admins.add(0x4f0B12bBF40Fc182559822A5b1dB6D34dbC3E016) */\n  tag_13\n    /* \"Ethereum/Presale.sol\":2046:2088  0x4f0B12bBF40Fc182559822A5b1dB6D34dbC3E016 */\n  0x4f0b12bbf40fc182559822a5b1db6d34dbc3e016\n    /* \"Ethereum/Presale.sol\":2035:2041  admins */\n  0x19\n    /* \"Ethereum/Presale.sol\":2035:2045  admins.add */\n  or(tag_0_95, shl(0x20, tag_12))\n  swap1\n    /* \"Ethereum/Presale.sol\":2035:2089  admins.add(0x4f0B12bBF40Fc182559822A5b1dB6D34dbC3E016) */\n  swap2\n  swap1\n  0x20\n  shr\n  jump\t// in\ntag_13:\n  pop\n    /* \"Ethereum/Presale.sol\":2112:2114  20 */\n  0x14\n    /* \"Ethereum/Presale.sol\":2100:2109  feeAnyone */\n  0x18\n    /* \"Ethereum/Presale.sol\":2100:2114  feeAnyone = 20 */\n  sstore\n    /* \"Ethereum/Presale.sol\":338:4857  contract Presale is ReentrancyGuard, Ownable{\r... */\n  jump(tag_14)\n    /* \"Utils/Ownable.sol\":2333:2524  function _transferOwnership(address newOwner) internal virtual {\r... */\ntag_9:\n    /* \"Utils/Ownable.sol\":2426:2432  _owner */\n  0x01\n  dup1\n  sload\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"Utils/Ownable.sol\":2443:2460  _owner = newOwner */\n  dup4\n  dup2\n  and\n  not(sub(shl(0xa0, 0x01), 0x01))\n  dup4\n  and\n  dup2\n  or\n  swap1\n  swap4\n  sstore\n    /* \"Utils/Ownable.sol\":2476:2516  OwnershipTransferred(oldOwner, newOwner) */\n  mload(0x40)\n    /* \"Utils/Ownable.sol\":2426:2432  _owner */\n  swap2\n  and\n  swap2\n    /* \"Utils/Ownable.sol\":2443:2460  _owner = newOwner */\n  swap1\n    /* \"Utils/Ownable.sol\":2426:2432  _owner */\n  dup3\n  swap1\n    /* \"Utils/Ownable.sol\":2476:2516  OwnershipTransferred(oldOwner, newOwner) */\n  0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\n  swap1\n    /* \"Utils/Ownable.sol\":2407:2423  address oldOwner */\n  0x00\n  swap1\n    /* \"Utils/Ownable.sol\":2476:2516  OwnershipTransferred(oldOwner, newOwner) */\n  log3\n    /* \"Utils/Ownable.sol\":2333:2524  function _transferOwnership(address newOwner) internal virtual {\r... */\n  pop\n  pop\n  jump\t// out\n    /* \"Utils/EnumerableSet.sol\":8259:8411  function add(AddressSet storage set, address value) internal returns (bool) {\r... */\ntag_12:\n    /* \"Utils/EnumerableSet.sol\":8329:8333  bool */\n  0x00\n    /* \"Utils/EnumerableSet.sol\":8353:8403  _add(set._inner, bytes32(uint256(uint160(value)))) */\n  tag_18\n    /* \"Utils/EnumerableSet.sol\":8358:8361  set */\n  dup4\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"Utils/EnumerableSet.sol\":8378:8401  uint256(uint160(value)) */\n  dup5\n  and\n    /* \"Utils/EnumerableSet.sol\":8353:8357  _add */\n  tag_19\n    /* \"Utils/EnumerableSet.sol\":8353:8403  _add(set._inner, bytes32(uint256(uint160(value)))) */\n  jump\t// in\ntag_18:\n    /* \"Utils/EnumerableSet.sol\":8346:8403  return _add(set._inner, bytes32(uint256(uint160(value)))) */\n  swap1\n  pop\n    /* \"Utils/EnumerableSet.sol\":8259:8411  function add(AddressSet storage set, address value) internal returns (bool) {\r... */\ntag_17:\n  swap3\n  swap2\n  pop\n  pop\n  jump\t// out\n    /* \"Utils/EnumerableSet.sol\":2174:2588  function _add(Set storage set, bytes32 value) private returns (bool) {\r... */\ntag_19:\n    /* \"Utils/EnumerableSet.sol\":2237:2241  bool */\n  0x00\n    /* \"Utils/EnumerableSet.sol\":4367:4386  set._indexes[value] */\n  dup2\n  dup2\n  mstore\n    /* \"Utils/EnumerableSet.sol\":4367:4379  set._indexes */\n  0x01\n  dup4\n  add\n    /* \"Utils/EnumerableSet.sol\":4367:4386  set._indexes[value] */\n  0x20\n  mstore\n  0x40\n  dup2\n  keccak256\n  sload\n    /* \"Utils/EnumerableSet.sol\":2254:2581  if (!_contains(set, value)) {\r... */\n  tag_23\n  jumpi\n  pop\n    /* \"Utils/EnumerableSet.sol\":2297:2320  set._values.push(value) */\n  dup2\n  sload\n  0x01\n  dup2\n  dup2\n  add\n  dup5\n  sstore\n    /* \"Utils/EnumerableSet.sol\":2297:2308  set._values */\n  0x00\n    /* \"Utils/EnumerableSet.sol\":2297:2320  set._values.push(value) */\n  dup5\n  dup2\n  mstore\n  0x20\n  dup1\n  dup3\n  keccak256\n  swap1\n  swap4\n  add\n  dup5\n  swap1\n  sstore\n    /* \"Utils/EnumerableSet.sol\":2480:2498  set._values.length */\n  dup5\n  sload\n    /* \"Utils/EnumerableSet.sol\":2458:2477  set._indexes[value] */\n  dup5\n  dup3\n  mstore\n    /* \"Utils/EnumerableSet.sol\":2458:2470  set._indexes */\n  dup3\n  dup7\n  add\n    /* \"Utils/EnumerableSet.sol\":2458:2477  set._indexes[value] */\n  swap1\n  swap4\n  mstore\n  0x40\n  swap1\n  keccak256\n    /* \"Utils/EnumerableSet.sol\":2458:2498  set._indexes[value] = set._values.length */\n  swap2\n  swap1\n  swap2\n  sstore\n    /* \"Utils/EnumerableSet.sol\":2513:2524  return true */\n  jump(tag_17)\n    /* \"Utils/EnumerableSet.sol\":2254:2581  if (!_contains(set, value)) {\r... */\ntag_23:\n  pop\n    /* \"Utils/EnumerableSet.sol\":2564:2569  false */\n  0x00\n    /* \"Utils/EnumerableSet.sol\":2557:2569  return false */\n  jump(tag_17)\n    /* \"Ethereum/Presale.sol\":338:4857  contract Presale is ReentrancyGuard, Ownable{\r... */\ntag_14:\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"Ethereum/Presale.sol\":338:4857  contract Presale is ReentrancyGuard, Ownable{\r... */\n      mstore(0x40, 0x80)\n      jumpi(tag_1, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x8da5cb5b\n      gt\n      tag_18\n      jumpi\n      dup1\n      0xcad5b0f7\n      gt\n      tag_19\n      jumpi\n      dup1\n      0xcad5b0f7\n      eq\n      tag_14\n      jumpi\n      dup1\n      0xe2d3f423\n      eq\n      tag_15\n      jumpi\n      dup1\n      0xf2fde38b\n      eq\n      tag_16\n      jumpi\n      dup1\n      0xf8b2cb4f\n      eq\n      tag_17\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_19:\n      dup1\n      0x8da5cb5b\n      eq\n      tag_10\n      jumpi\n      dup1\n      0xacfb2355\n      eq\n      tag_11\n      jumpi\n      dup1\n      0xad5c4648\n      eq\n      tag_12\n      jumpi\n      dup1\n      0xb6b55f25\n      eq\n      tag_13\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_18:\n      dup1\n      0x56c5f349\n      gt\n      tag_20\n      jumpi\n      dup1\n      0x56c5f349\n      eq\n      tag_6\n      jumpi\n      dup1\n      0x61e17655\n      eq\n      tag_7\n      jumpi\n      dup1\n      0x715018a6\n      eq\n      tag_8\n      jumpi\n      dup1\n      0x861faf5f\n      eq\n      tag_9\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_20:\n      dup1\n      0x18856a2f\n      eq\n      tag_2\n      jumpi\n      dup1\n      0x200d2ed2\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x3b5ef2ad\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x4329db46\n      eq\n      tag_5\n      jumpi\n    tag_1:\n      0x00\n      dup1\n      revert\n        /* \"Ethereum/Presale.sol\":1492:1518  SaleInfor public saleInfor */\n    tag_2:\n      callvalue\n      dup1\n      iszero\n      tag_21\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_21:\n      pop\n      sload(0x0b)\n      sload(0x0c)\n      sload(0x0d)\n      sload(0x0e)\n      sload(0x0f)\n      sload(0x10)\n      sload(0x11)\n      sload(0x12)\n      sload(0x13)\n      sload(0x14)\n      sload(0x15)\n      sload(0x16)\n      tag_22\n      swap12\n      sub(shl(0xa0, 0x01), 0x01)\n      swap1\n      dup2\n      and\n      swap12\n      dup2\n      and\n      swap11\n      and\n      swap9\n      swap8\n      swap7\n      swap6\n      swap5\n      swap4\n      swap3\n      swap2\n      0xff\n      and\n      swap1\n      dup13\n      jump\n    tag_22:\n      0x40\n      dup1\n      mload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":2728:2743   */\n      swap14\n      dup15\n      and\n        /* \"#utility.yul\":2710:2744   */\n      dup2\n      mstore\n        /* \"#utility.yul\":2780:2795   */\n      swap12\n      dup14\n      and\n        /* \"#utility.yul\":2775:2777   */\n      0x20\n        /* \"#utility.yul\":2760:2778   */\n      dup14\n      add\n        /* \"#utility.yul\":2753:2796   */\n      mstore\n        /* \"#utility.yul\":2832:2847   */\n      swap10\n      swap1\n      swap12\n      and\n        /* \"#utility.yul\":2812:2830   */\n      swap9\n      dup11\n      add\n        /* \"#utility.yul\":2805:2848   */\n      swap9\n      swap1\n      swap9\n      mstore\n        /* \"#utility.yul\":2879:2881   */\n      0x60\n        /* \"#utility.yul\":2864:2882   */\n      dup10\n      add\n        /* \"#utility.yul\":2857:2891   */\n      swap7\n      swap1\n      swap7\n      mstore\n        /* \"#utility.yul\":2922:2925   */\n      0x80\n        /* \"#utility.yul\":2907:2926   */\n      dup9\n      add\n        /* \"#utility.yul\":2900:2935   */\n      swap5\n      swap1\n      swap5\n      mstore\n        /* \"#utility.yul\":2690:2693   */\n      0xa0\n        /* \"#utility.yul\":2951:2970   */\n      dup8\n      add\n        /* \"#utility.yul\":2944:2979   */\n      swap3\n      swap1\n      swap3\n      mstore\n        /* \"#utility.yul\":3010:3013   */\n      0xc0\n        /* \"#utility.yul\":2995:3014   */\n      dup7\n      add\n        /* \"#utility.yul\":2988:3023   */\n      mstore\n        /* \"#utility.yul\":3054:3057   */\n      0xe0\n        /* \"#utility.yul\":3039:3058   */\n      dup6\n      add\n        /* \"#utility.yul\":3032:3067   */\n      mstore\n        /* \"#utility.yul\":3098:3101   */\n      0x0100\n        /* \"#utility.yul\":3083:3102   */\n      dup5\n      add\n        /* \"#utility.yul\":3076:3111   */\n      mstore\n        /* \"#utility.yul\":3142:3145   */\n      0x0120\n        /* \"#utility.yul\":3127:3146   */\n      dup4\n      add\n        /* \"#utility.yul\":3120:3155   */\n      mstore\n        /* \"#utility.yul\":3199:3214   */\n      iszero\n        /* \"#utility.yul\":3192:3215   */\n      iszero\n        /* \"#utility.yul\":3186:3189   */\n      0x0140\n        /* \"#utility.yul\":3171:3190   */\n      dup3\n      add\n        /* \"#utility.yul\":3164:3216   */\n      mstore\n        /* \"#utility.yul\":3247:3250   */\n      0x0160\n        /* \"#utility.yul\":3232:3251   */\n      dup2\n      add\n        /* \"#utility.yul\":3225:3261   */\n      swap2\n      swap1\n      swap2\n      mstore\n        /* \"#utility.yul\":2659:2662   */\n      0x0180\n        /* \"#utility.yul\":2644:2663   */\n      add\n        /* \"Ethereum/Presale.sol\":1492:1518  SaleInfor public saleInfor */\n    tag_24:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"Ethereum/Presale.sol\":2943:3280  function status() public view returns(uint256) {\r... */\n    tag_3:\n      callvalue\n      dup1\n      iszero\n      tag_26\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_26:\n      pop\n      tag_27\n      tag_28\n      jump\t// in\n    tag_27:\n      mload(0x40)\n        /* \"#utility.yul\":5627:5652   */\n      swap1\n      dup2\n      mstore\n        /* \"#utility.yul\":5615:5617   */\n      0x20\n        /* \"#utility.yul\":5600:5618   */\n      add\n        /* \"Ethereum/Presale.sol\":2943:3280  function status() public view returns(uint256) {\r... */\n      tag_24\n        /* \"#utility.yul\":5582:5658   */\n      jump\n        /* \"Ethereum/Presale.sol\":1550:1574  uint256 public feeAnyone */\n    tag_4:\n      callvalue\n      dup1\n      iszero\n      tag_31\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_31:\n      pop\n      tag_27\n      sload(0x18)\n      dup2\n      jump\n        /* \"Ethereum/Presale.sol\":4731:4852  function transferETH(uint256 amount) external payable {\r... */\n    tag_5:\n      tag_35\n      tag_36\n      calldatasize\n      0x04\n      tag_37\n      jump\t// in\n    tag_36:\n      tag_38\n      jump\t// in\n    tag_35:\n      stop\n        /* \"Ethereum/Presale.sol\":1402:1444  mapping(address => uint256) public userFee */\n    tag_6:\n      callvalue\n      dup1\n      iszero\n      tag_39\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_39:\n      pop\n      tag_27\n      tag_41\n      calldatasize\n      0x04\n      tag_42\n      jump\t// in\n    tag_41:\n      mstore(0x20, 0x03)\n      0x00\n      swap1\n      dup2\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n      dup2\n      jump\n        /* \"Ethereum/Presale.sol\":2130:2934  function initialSaleInfor(\r... */\n    tag_7:\n      callvalue\n      dup1\n      iszero\n      tag_45\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_45:\n      pop\n      tag_35\n      tag_47\n      calldatasize\n      0x04\n      tag_48\n      jump\t// in\n    tag_47:\n      tag_49\n      jump\t// in\n        /* \"Utils/Ownable.sol\":1714:1817  function renounceOwnership() public virtual onlyOwner {\r... */\n    tag_8:\n      callvalue\n      dup1\n      iszero\n      tag_50\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_50:\n      pop\n      tag_35\n      tag_52\n      jump\t// in\n        /* \"Ethereum/Presale.sol\":4615:4723  function backToken() external payable {\r... */\n    tag_9:\n      tag_35\n      tag_54\n      jump\t// in\n        /* \"Utils/Ownable.sol\":1063:1150  function owner() public view virtual returns (address) {\r... */\n    tag_10:\n      callvalue\n      dup1\n      iszero\n      tag_55\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_55:\n      pop\n        /* \"Utils/Ownable.sol\":1136:1142  _owner */\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x01))\n        /* \"Utils/Ownable.sol\":1063:1150  function owner() public view virtual returns (address) {\r... */\n    tag_56:\n      mload(0x40)\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":2135:2167   */\n      swap1\n      swap2\n      and\n        /* \"#utility.yul\":2117:2168   */\n      dup2\n      mstore\n        /* \"#utility.yul\":2105:2107   */\n      0x20\n        /* \"#utility.yul\":2090:2108   */\n      add\n        /* \"Utils/Ownable.sol\":1063:1150  function owner() public view virtual returns (address) {\r... */\n      tag_24\n        /* \"#utility.yul\":2072:2174   */\n      jump\n        /* \"Ethereum/Presale.sol\":1451:1485  PresaleStatus public presaleStatus */\n    tag_11:\n      callvalue\n      dup1\n      iszero\n      tag_60\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_60:\n      pop\n      sload(0x04)\n      sload(0x05)\n      sload(0x06)\n      sload(0x07)\n      sload(0x08)\n      sload(0x09)\n      tag_61\n      swap6\n      swap5\n      swap4\n      swap3\n      swap2\n      swap1\n      dup7\n      jump\n    tag_61:\n      0x40\n      dup1\n      mload\n        /* \"#utility.yul\":6510:6535   */\n      swap7\n      dup8\n      mstore\n        /* \"#utility.yul\":6566:6568   */\n      0x20\n        /* \"#utility.yul\":6551:6569   */\n      dup8\n      add\n        /* \"#utility.yul\":6544:6578   */\n      swap6\n      swap1\n      swap6\n      mstore\n        /* \"#utility.yul\":6594:6612   */\n      swap4\n      dup6\n      add\n        /* \"#utility.yul\":6587:6621   */\n      swap3\n      swap1\n      swap3\n      mstore\n        /* \"#utility.yul\":6652:6654   */\n      0x60\n        /* \"#utility.yul\":6637:6655   */\n      dup5\n      add\n        /* \"#utility.yul\":6630:6664   */\n      mstore\n        /* \"#utility.yul\":6695:6698   */\n      0x80\n        /* \"#utility.yul\":6680:6699   */\n      dup4\n      add\n        /* \"#utility.yul\":6673:6708   */\n      mstore\n        /* \"#utility.yul\":6739:6742   */\n      0xa0\n        /* \"#utility.yul\":6724:6743   */\n      dup3\n      add\n        /* \"#utility.yul\":6717:6752   */\n      mstore\n        /* \"#utility.yul\":6497:6500   */\n      0xc0\n        /* \"#utility.yul\":6482:6501   */\n      add\n        /* \"Ethereum/Presale.sol\":1451:1485  PresaleStatus public presaleStatus */\n      tag_24\n        /* \"#utility.yul\":6464:6758   */\n      jump\n        /* \"Ethereum/Presale.sol\":1525:1543  IERC20 public WETH */\n    tag_12:\n      callvalue\n      dup1\n      iszero\n      tag_65\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_65:\n      pop\n      sload(0x17)\n      tag_56\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      dup2\n      jump\n        /* \"Ethereum/Presale.sol\":3407:4485  function deposit(uint256 _amount) external view returns(uint256) {\r... */\n    tag_13:\n      callvalue\n      dup1\n      iszero\n      tag_70\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_70:\n      pop\n      tag_27\n      tag_72\n      calldatasize\n      0x04\n      tag_37\n      jump\t// in\n    tag_72:\n      tag_73\n      jump\t// in\n        /* \"Ethereum/Presale.sol\":3289:3399  function checkAdminAddress() public view returns(bool) {\r... */\n    tag_14:\n      callvalue\n      dup1\n      iszero\n      tag_75\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_75:\n      pop\n      tag_76\n      tag_77\n      jump\t// in\n    tag_76:\n      mload(0x40)\n        /* \"#utility.yul\":3437:3451   */\n      swap1\n      iszero\n        /* \"#utility.yul\":3430:3452   */\n      iszero\n        /* \"#utility.yul\":3412:3453   */\n      dup2\n      mstore\n        /* \"#utility.yul\":3400:3402   */\n      0x20\n        /* \"#utility.yul\":3385:3403   */\n      add\n        /* \"Ethereum/Presale.sol\":3289:3399  function checkAdminAddress() public view returns(bool) {\r... */\n      tag_24\n        /* \"#utility.yul\":3367:3459   */\n      jump\n        /* \"Ethereum/Presale.sol\":1349:1395  mapping(address => BuyerInfo) public buyerInfo */\n    tag_15:\n      callvalue\n      dup1\n      iszero\n      tag_80\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_80:\n      pop\n      tag_81\n      tag_82\n      calldatasize\n      0x04\n      tag_42\n      jump\t// in\n    tag_82:\n      0x02\n      0x20\n      dup2\n      swap1\n      mstore\n      0x00\n      swap2\n      dup3\n      mstore\n      0x40\n      swap1\n      swap2\n      keccak256\n      dup1\n      sload\n      0x01\n      dup3\n      add\n      sload\n      swap3\n      dup3\n      add\n      sload\n      0x03\n      dup4\n      add\n      sload\n      0x04\n      swap1\n      swap4\n      add\n      sload\n      swap2\n      swap4\n      swap3\n      swap1\n      swap2\n      0xff\n      dup1\n      dup3\n      and\n      swap2\n      0x0100\n      swap1\n      div\n      and\n      dup7\n      jump\n    tag_81:\n      0x40\n      dup1\n      mload\n        /* \"#utility.yul\":5938:5963   */\n      swap7\n      dup8\n      mstore\n        /* \"#utility.yul\":5994:5996   */\n      0x20\n        /* \"#utility.yul\":5979:5997   */\n      dup8\n      add\n        /* \"#utility.yul\":5972:6006   */\n      swap6\n      swap1\n      swap6\n      mstore\n        /* \"#utility.yul\":6022:6040   */\n      swap4\n      dup6\n      add\n        /* \"#utility.yul\":6015:6049   */\n      swap3\n      swap1\n      swap3\n      mstore\n        /* \"#utility.yul\":6080:6082   */\n      0x60\n        /* \"#utility.yul\":6065:6083   */\n      dup5\n      add\n        /* \"#utility.yul\":6058:6092   */\n      mstore\n        /* \"#utility.yul\":6136:6150   */\n      iszero\n        /* \"#utility.yul\":6129:6151   */\n      iszero\n        /* \"#utility.yul\":6123:6126   */\n      0x80\n        /* \"#utility.yul\":6108:6127   */\n      dup4\n      add\n        /* \"#utility.yul\":6101:6152   */\n      mstore\n        /* \"#utility.yul\":6196:6210   */\n      iszero\n        /* \"#utility.yul\":6189:6211   */\n      iszero\n        /* \"#utility.yul\":6183:6186   */\n      0xa0\n        /* \"#utility.yul\":6168:6187   */\n      dup3\n      add\n        /* \"#utility.yul\":6161:6212   */\n      mstore\n        /* \"#utility.yul\":5925:5928   */\n      0xc0\n        /* \"#utility.yul\":5910:5929   */\n      add\n        /* \"Ethereum/Presale.sol\":1349:1395  mapping(address => BuyerInfo) public buyerInfo */\n      tag_24\n        /* \"#utility.yul\":5892:6218   */\n      jump\n        /* \"Utils/Ownable.sol\":1972:2173  function transferOwnership(address newOwner) public virtual onlyOwner {\r... */\n    tag_16:\n      callvalue\n      dup1\n      iszero\n      tag_86\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_86:\n      pop\n      tag_35\n      tag_88\n      calldatasize\n      0x04\n      tag_42\n      jump\t// in\n    tag_88:\n      tag_89\n      jump\t// in\n        /* \"Ethereum/Presale.sol\":4493:4604  function getBalance(address _address) external view returns(uint256) {\r... */\n    tag_17:\n      callvalue\n      dup1\n      iszero\n      tag_90\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_90:\n      pop\n      tag_27\n      tag_92\n      calldatasize\n      0x04\n      tag_42\n      jump\t// in\n    tag_92:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"Ethereum/Presale.sol\":4580:4596  _address.balance */\n      and\n      balance\n      swap1\n        /* \"Ethereum/Presale.sol\":4493:4604  function getBalance(address _address) external view returns(uint256) {\r... */\n      jump\n        /* \"Ethereum/Presale.sol\":2943:3280  function status() public view returns(uint256) {\r... */\n    tag_28:\n        /* \"Ethereum/Presale.sol\":3022:3041  saleInfor.startSale */\n      sload(0x0f)\n        /* \"Ethereum/Presale.sol\":2981:2988  uint256 */\n      0x00\n      swap1\n        /* \"Ethereum/Presale.sol\":3004:3019  block.timestamp */\n      timestamp\n        /* \"Ethereum/Presale.sol\":3004:3041  block.timestamp < saleInfor.startSale */\n      lt\n        /* \"Ethereum/Presale.sol\":3001:3273  if(block.timestamp < saleInfor.startSale) {\r... */\n      iszero\n      tag_97\n      jumpi\n      pop\n        /* \"Ethereum/Presale.sol\":3065:3066  0 */\n      0x00\n      swap1\n        /* \"Ethereum/Presale.sol\":2943:3280  function status() public view returns(uint256) {\r... */\n      jump\t// out\n        /* \"Ethereum/Presale.sol\":3001:3273  if(block.timestamp < saleInfor.startSale) {\r... */\n    tag_97:\n        /* \"Ethereum/Presale.sol\":3132:3149  saleInfor.endSale */\n      sload(0x10)\n        /* \"Ethereum/Presale.sol\":3114:3129  block.timestamp */\n      timestamp\n        /* \"Ethereum/Presale.sol\":3114:3149  block.timestamp > saleInfor.endSale */\n      gt\n        /* \"Ethereum/Presale.sol\":3111:3262  if(block.timestamp > saleInfor.endSale) {\r... */\n      iszero\n      tag_99\n      jumpi\n      pop\n        /* \"Ethereum/Presale.sol\":3177:3178  2 */\n      0x02\n      swap1\n        /* \"Ethereum/Presale.sol\":2943:3280  function status() public view returns(uint256) {\r... */\n      jump\t// out\n        /* \"Ethereum/Presale.sol\":3111:3262  if(block.timestamp > saleInfor.endSale) {\r... */\n    tag_99:\n      pop\n        /* \"Ethereum/Presale.sol\":3235:3236  1 */\n      0x01\n      swap1\n        /* \"Ethereum/Presale.sol\":2943:3280  function status() public view returns(uint256) {\r... */\n      jump\t// out\n        /* \"Ethereum/Presale.sol\":4731:4852  function transferETH(uint256 amount) external payable {\r... */\n    tag_38:\n        /* \"Ethereum/Presale.sol\":4804:4814  msg.sender */\n      caller\n        /* \"Ethereum/Presale.sol\":4796:4844  payable(msg.sender).transfer(msg.value - amount) */\n      0x08fc\n        /* \"Ethereum/Presale.sol\":4825:4843  msg.value - amount */\n      tag_102\n        /* \"Ethereum/Presale.sol\":4837:4843  amount */\n      dup4\n        /* \"Ethereum/Presale.sol\":4825:4834  msg.value */\n      callvalue\n        /* \"Ethereum/Presale.sol\":4825:4843  msg.value - amount */\n      tag_103\n      jump\t// in\n    tag_102:\n        /* \"Ethereum/Presale.sol\":4796:4844  payable(msg.sender).transfer(msg.value - amount) */\n      mload(0x40)\n      dup2\n      iszero\n      swap1\n      swap3\n      mul\n      swap2\n      0x00\n      dup2\n      dup2\n      dup2\n      dup6\n      dup9\n      dup9\n      call\n      swap4\n      pop\n      pop\n      pop\n      pop\n      iszero\n      dup1\n      iszero\n      tag_105\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_105:\n      pop\n        /* \"Ethereum/Presale.sol\":4731:4852  function transferETH(uint256 amount) external payable {\r... */\n      pop\n      jump\t// out\n        /* \"Ethereum/Presale.sol\":2130:2934  function initialSaleInfor(\r... */\n    tag_49:\n        /* \"Ethereum/Presale.sol\":2311:2320  saleInfor */\n      0x0b\n        /* \"Ethereum/Presale.sol\":2311:2349  saleInfor.presaleOwner = _presaleOwner */\n      dup1\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n      dup1\n      dup8\n      and\n      not(sub(shl(0xa0, 0x01), 0x01))\n      swap3\n      dup4\n      and\n      or\n      swap1\n      swap3\n      sstore\n        /* \"Ethereum/Presale.sol\":2360:2379  saleInfor.saleToken */\n      0x0c\n        /* \"Ethereum/Presale.sol\":2360:2392  saleInfor.saleToken = _saleToken */\n      dup1\n      sload\n      dup7\n      dup5\n      and\n      swap1\n      dup4\n      and\n      dup2\n      or\n      swap1\n      swap2\n      sstore\n        /* \"Ethereum/Presale.sol\":2403:2422  saleInfor.baseToken */\n      0x0d\n        /* \"Ethereum/Presale.sol\":2403:2435  saleInfor.baseToken = _baseTOken */\n      dup1\n      sload\n      swap4\n      dup7\n      and\n      swap4\n      swap1\n      swap3\n      and\n      swap3\n      swap1\n      swap3\n      or\n      swap1\n      sstore\n        /* \"Ethereum/Presale.sol\":2493:2530  ERC20(saleInfor.saleToken).decimals() */\n      0x40\n      dup1\n      mload\n      shl(0xe0, 0x313ce567)\n      dup2\n      mstore\n      swap1\n      mload\n        /* \"Ethereum/Presale.sol\":2493:2528  ERC20(saleInfor.saleToken).decimals */\n      0x313ce567\n      swap2\n        /* \"Ethereum/Presale.sol\":2493:2530  ERC20(saleInfor.saleToken).decimals() */\n      0x04\n      dup1\n      dup3\n      add\n      swap3\n      0x20\n      swap3\n      swap1\n      swap2\n      swap1\n      dup3\n      swap1\n      sub\n      add\n      dup2\n        /* \"Ethereum/Presale.sol\":2360:2392  saleInfor.saleToken = _saleToken */\n      dup7\n        /* \"Ethereum/Presale.sol\":2493:2530  ERC20(saleInfor.saleToken).decimals() */\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_107\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_107:\n      pop\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_109\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_109:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_110\n      swap2\n      swap1\n      tag_111\n      jump\t// in\n    tag_110:\n        /* \"Ethereum/Presale.sol\":2480:2531  10** uint256(ERC20(saleInfor.saleToken).decimals()) */\n      tag_112\n      swap1\n        /* \"Ethereum/Presale.sol\":2480:2482  10 */\n      0x0a\n        /* \"Ethereum/Presale.sol\":2480:2531  10** uint256(ERC20(saleInfor.saleToken).decimals()) */\n      tag_113\n      jump\t// in\n    tag_112:\n        /* \"Ethereum/Presale.sol\":2469:2477  datas[0] */\n      dup2\n      mload\n        /* \"Ethereum/Presale.sol\":2469:2531  datas[0] * 10** uint256(ERC20(saleInfor.saleToken).decimals()) */\n      tag_115\n      swap2\n      swap1\n      tag_116\n      jump\t// in\n    tag_115:\n        /* \"Ethereum/Presale.sol\":2446:2466  saleInfor.tokenPrice */\n      0x0e\n        /* \"Ethereum/Presale.sol\":2446:2531  saleInfor.tokenPrice = datas[0] * 10** uint256(ERC20(saleInfor.saleToken).decimals()) */\n      sstore\n        /* \"Ethereum/Presale.sol\":2564:2572  datas[1] */\n      0x20\n      dup1\n      dup3\n      add\n      mload\n        /* \"Ethereum/Presale.sol\":2542:2561  saleInfor.startSale */\n      0x0f\n        /* \"Ethereum/Presale.sol\":2542:2572  saleInfor.startSale = datas[1] */\n      sstore\n        /* \"Ethereum/Presale.sol\":2603:2611  datas[2] */\n      0x40\n      dup1\n      dup4\n      add\n      mload\n        /* \"Ethereum/Presale.sol\":2583:2600  saleInfor.endSale */\n      0x10\n        /* \"Ethereum/Presale.sol\":2583:2611  saleInfor.endSale = datas[2] */\n      sstore\n        /* \"Ethereum/Presale.sol\":2651:2659  datas[3] */\n      0x60\n      dup4\n      add\n      mload\n        /* \"Ethereum/Presale.sol\":2622:2648  saleInfor.minSpendPerBuyer */\n      0x11\n        /* \"Ethereum/Presale.sol\":2622:2659  saleInfor.minSpendPerBuyer = datas[3] */\n      sstore\n        /* \"Ethereum/Presale.sol\":2729:2748  saleInfor.baseToken */\n      sload(0x0d)\n        /* \"Ethereum/Presale.sol\":2723:2760  ERC20(saleInfor.baseToken).decimals() */\n      dup2\n      mload\n      shl(0xe0, 0x313ce567)\n      dup2\n      mstore\n      swap2\n      mload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"Ethereum/Presale.sol\":2729:2748  saleInfor.baseToken */\n      swap1\n      swap2\n      and\n      swap3\n        /* \"Ethereum/Presale.sol\":2723:2758  ERC20(saleInfor.baseToken).decimals */\n      0x313ce567\n      swap3\n        /* \"Ethereum/Presale.sol\":2723:2760  ERC20(saleInfor.baseToken).decimals() */\n      0x04\n      dup1\n      dup3\n      add\n      swap4\n      swap2\n      dup3\n      swap1\n      sub\n      add\n      dup2\n        /* \"Ethereum/Presale.sol\":2729:2748  saleInfor.baseToken */\n      dup7\n        /* \"Ethereum/Presale.sol\":2723:2760  ERC20(saleInfor.baseToken).decimals() */\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_120\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_120:\n      pop\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_122\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_122:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_123\n      swap2\n      swap1\n      tag_111\n      jump\t// in\n    tag_123:\n        /* \"Ethereum/Presale.sol\":2710:2761  10** uint256(ERC20(saleInfor.baseToken).decimals()) */\n      tag_124\n      swap1\n        /* \"Ethereum/Presale.sol\":2710:2712  10 */\n      0x0a\n        /* \"Ethereum/Presale.sol\":2710:2761  10** uint256(ERC20(saleInfor.baseToken).decimals()) */\n      tag_113\n      jump\t// in\n    tag_124:\n        /* \"Ethereum/Presale.sol\":2699:2707  datas[4] */\n      0x80\n      dup3\n      add\n      mload\n        /* \"Ethereum/Presale.sol\":2699:2761  datas[4] * 10** uint256(ERC20(saleInfor.baseToken).decimals()) */\n      tag_126\n      swap2\n      swap1\n      tag_116\n      jump\t// in\n    tag_126:\n        /* \"Ethereum/Presale.sol\":2670:2696  saleInfor.maxSpendPerBuyer */\n      0x12\n        /* \"Ethereum/Presale.sol\":2670:2761  saleInfor.maxSpendPerBuyer = datas[4] * 10** uint256(ERC20(saleInfor.baseToken).decimals()) */\n      sstore\n        /* \"Ethereum/Presale.sol\":2794:2802  datas[5] */\n      0xa0\n      dup2\n      add\n      mload\n        /* \"Ethereum/Presale.sol\":2772:2791  saleInfor.refundFee */\n      0x13\n        /* \"Ethereum/Presale.sol\":2772:2802  saleInfor.refundFee = datas[5] */\n      sstore\n        /* \"Ethereum/Presale.sol\":2834:2842  datas[6] */\n      0xc0\n      add\n      mload\n        /* \"Ethereum/Presale.sol\":2813:2831  saleInfor.claimFee */\n      0x14\n        /* \"Ethereum/Presale.sol\":2813:2842  saleInfor.claimFee = datas[6] */\n      sstore\n      pop\n      pop\n        /* \"Ethereum/Presale.sol\":2906:2925  saleInfor.baseToken */\n      sload(0x0d)\n        /* \"Ethereum/Presale.sol\":2889:2893  WETH */\n      sload(0x17)\n        /* \"Ethereum/Presale.sol\":2853:2878  saleInfor.saleIsBaseToken */\n      0x15\n        /* \"Ethereum/Presale.sol\":2853:2926  saleInfor.saleIsBaseToken = address(WETH) == address(saleInfor.baseToken) */\n      dup1\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"Ethereum/Presale.sol\":2906:2925  saleInfor.baseToken */\n      swap4\n      dup5\n      and\n        /* \"Ethereum/Presale.sol\":2889:2893  WETH */\n      swap4\n      swap1\n      swap3\n      and\n        /* \"Ethereum/Presale.sol\":2881:2926  address(WETH) == address(saleInfor.baseToken) */\n      swap3\n      swap1\n      swap3\n      eq\n      not(0xff)\n        /* \"Ethereum/Presale.sol\":2853:2926  saleInfor.saleIsBaseToken = address(WETH) == address(saleInfor.baseToken) */\n      swap1\n      swap2\n      and\n      or\n      swap1\n      sstore\n      pop\n        /* \"Ethereum/Presale.sol\":2130:2934  function initialSaleInfor(\r... */\n      jump\t// out\n        /* \"Utils/Ownable.sol\":1714:1817  function renounceOwnership() public virtual onlyOwner {\r... */\n    tag_52:\n        /* \"Utils/Ownable.sol\":1136:1142  _owner */\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x01))\n        /* \"Utils/Context.sol\":736:746  msg.sender */\n      caller\n        /* \"Utils/Ownable.sol\":1283:1306  owner() == _msgSender() */\n      eq\n        /* \"Utils/Ownable.sol\":1275:1343  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_133\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":5322:5324   */\n      0x20\n        /* \"Utils/Ownable.sol\":1275:1343  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":5304:5325   */\n      dup2\n      swap1\n      mstore\n        /* \"#utility.yul\":5341:5359   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":5334:5364   */\n      mstore\n        /* \"#utility.yul\":5400:5434   */\n      0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572\n        /* \"#utility.yul\":5380:5398   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":5373:5435   */\n      mstore\n        /* \"#utility.yul\":5452:5470   */\n      0x64\n      add\n        /* \"Utils/Ownable.sol\":1275:1343  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n    tag_134:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_133:\n        /* \"Utils/Ownable.sol\":1779:1809  _transferOwnership(address(0)) */\n      tag_137\n        /* \"Utils/Ownable.sol\":1806:1807  0 */\n      0x00\n        /* \"Utils/Ownable.sol\":1779:1797  _transferOwnership */\n      tag_138\n        /* \"Utils/Ownable.sol\":1779:1809  _transferOwnership(address(0)) */\n      jump\t// in\n    tag_137:\n        /* \"Utils/Ownable.sol\":1714:1817  function renounceOwnership() public virtual onlyOwner {\r... */\n      jump\t// out\n        /* \"Ethereum/Presale.sol\":4615:4723  function backToken() external payable {\r... */\n    tag_54:\n        /* \"Ethereum/Presale.sol\":4664:4715  payable(msg.sender).transfer(address(this).balance) */\n      mload(0x40)\n        /* \"Ethereum/Presale.sol\":4672:4682  msg.sender */\n      caller\n      swap1\n        /* \"Ethereum/Presale.sol\":4693:4714  address(this).balance */\n      selfbalance\n        /* \"Ethereum/Presale.sol\":4664:4715  payable(msg.sender).transfer(address(this).balance) */\n      dup1\n      iszero\n      0x08fc\n      mul\n      swap2\n      0x00\n      dup2\n      dup2\n      dup2\n        /* \"Ethereum/Presale.sol\":4693:4714  address(this).balance */\n      dup6\n        /* \"Ethereum/Presale.sol\":4672:4682  msg.sender */\n      dup9\n        /* \"Ethereum/Presale.sol\":4664:4715  payable(msg.sender).transfer(address(this).balance) */\n      dup9\n      call\n      swap4\n      pop\n      pop\n      pop\n      pop\n      iszero\n      dup1\n      iszero\n      tag_141\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_141:\n      pop\n        /* \"Ethereum/Presale.sol\":4615:4723  function backToken() external payable {\r... */\n      jump\t// out\n        /* \"Ethereum/Presale.sol\":3407:4485  function deposit(uint256 _amount) external view returns(uint256) {\r... */\n    tag_73:\n        /* \"Ethereum/Presale.sol\":3463:3470  uint256 */\n      0x00\n        /* \"Ethereum/Presale.sol\":3491:3499  status() */\n      tag_144\n        /* \"Ethereum/Presale.sol\":3491:3497  status */\n      tag_28\n        /* \"Ethereum/Presale.sol\":3491:3499  status() */\n      jump\t// in\n    tag_144:\n        /* \"Ethereum/Presale.sol\":3503:3504  1 */\n      0x01\n        /* \"Ethereum/Presale.sol\":3491:3504  status() == 1 */\n      eq\n        /* \"Ethereum/Presale.sol\":3483:3519  require(status() == 1, \"NOT ACTIVE\") */\n      tag_145\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":4638:4640   */\n      0x20\n        /* \"Ethereum/Presale.sol\":3483:3519  require(status() == 1, \"NOT ACTIVE\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":4620:4641   */\n      mstore\n        /* \"#utility.yul\":4677:4679   */\n      0x0a\n        /* \"#utility.yul\":4657:4675   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":4650:4680   */\n      mstore\n      shl(0xb0, 0x4e4f5420414354495645)\n        /* \"#utility.yul\":4696:4714   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":4689:4729   */\n      mstore\n        /* \"#utility.yul\":4746:4764   */\n      0x64\n      add\n        /* \"Ethereum/Presale.sol\":3483:3519  require(status() == 1, \"NOT ACTIVE\") */\n      tag_134\n        /* \"#utility.yul\":4610:4770   */\n      jump\n        /* \"Ethereum/Presale.sol\":3483:3519  require(status() == 1, \"NOT ACTIVE\") */\n    tag_145:\n        /* \"Ethereum/Presale.sol\":3576:3586  msg.sender */\n      caller\n        /* \"Ethereum/Presale.sol\":3540:3563  BuyerInfo storage buyer */\n      0x00\n        /* \"Ethereum/Presale.sol\":3566:3587  buyerInfo[msg.sender] */\n      swap1\n      dup2\n      mstore\n        /* \"Ethereum/Presale.sol\":3566:3575  buyerInfo */\n      0x02\n        /* \"Ethereum/Presale.sol\":3566:3587  buyerInfo[msg.sender] */\n      0x20\n      mstore\n      0x40\n      dup2\n      keccak256\n        /* \"Ethereum/Presale.sol\":3772:3798  saleInfor.minSpendPerBuyer */\n      sload(0x11)\n        /* \"Ethereum/Presale.sol\":3566:3587  buyerInfo[msg.sender] */\n      swap1\n      swap2\n        /* \"Ethereum/Presale.sol\":3618:3625  _amount */\n      dup5\n      swap2\n      dup3\n      swap2\n        /* \"Ethereum/Presale.sol\":3540:3563  BuyerInfo storage buyer */\n      swap1\n        /* \"Ethereum/Presale.sol\":3731:3735  1000 */\n      0x03e8\n      swap1\n        /* \"Ethereum/Presale.sol\":3754:3798  real_amount_in >= saleInfor.minSpendPerBuyer */\n      dup4\n      lt\n      iszero\n        /* \"Ethereum/Presale.sol\":3746:3847  require(real_amount_in >= saleInfor.minSpendPerBuyer, \r... */\n      tag_148\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":4977:4979   */\n      0x20\n        /* \"Ethereum/Presale.sol\":3746:3847  require(real_amount_in >= saleInfor.minSpendPerBuyer, \r... */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":4959:4980   */\n      mstore\n        /* \"#utility.yul\":5016:5018   */\n      0x10\n        /* \"#utility.yul\":4996:5014   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":4989:5019   */\n      mstore\n      shl(0x80, 0x4e6f7420656e6f7567682076616c7565)\n        /* \"#utility.yul\":5035:5053   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":5028:5074   */\n      mstore\n        /* \"#utility.yul\":5091:5109   */\n      0x64\n      add\n        /* \"Ethereum/Presale.sol\":3746:3847  require(real_amount_in >= saleInfor.minSpendPerBuyer, \r... */\n      tag_134\n        /* \"#utility.yul\":4949:5115   */\n      jump\n        /* \"Ethereum/Presale.sol\":3746:3847  require(real_amount_in >= saleInfor.minSpendPerBuyer, \r... */\n    tag_148:\n        /* \"Ethereum/Presale.sol\":3884:3910  saleInfor.maxSpendPerBuyer */\n      sload(0x12)\n        /* \"Ethereum/Presale.sol\":3866:3910  real_amount_in <= saleInfor.maxSpendPerBuyer */\n      dup4\n      gt\n      iszero\n        /* \"Ethereum/Presale.sol\":3858:3957  require(real_amount_in <= saleInfor.maxSpendPerBuyer, \r... */\n      tag_151\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":4295:4297   */\n      0x20\n        /* \"Ethereum/Presale.sol\":3858:3957  require(real_amount_in <= saleInfor.maxSpendPerBuyer, \r... */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":4277:4298   */\n      mstore\n        /* \"#utility.yul\":4334:4336   */\n      0x0e\n        /* \"#utility.yul\":4314:4332   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":4307:4337   */\n      mstore\n      shl(0x90, 0x4f766572666c6f772076616c7565)\n        /* \"#utility.yul\":4353:4371   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":4346:4390   */\n      mstore\n        /* \"#utility.yul\":4407:4425   */\n      0x64\n      add\n        /* \"Ethereum/Presale.sol\":3858:3957  require(real_amount_in <= saleInfor.maxSpendPerBuyer, \r... */\n      tag_134\n        /* \"#utility.yul\":4267:4431   */\n      jump\n        /* \"Ethereum/Presale.sol\":3858:3957  require(real_amount_in <= saleInfor.maxSpendPerBuyer, \r... */\n    tag_151:\n        /* \"Ethereum/Presale.sol\":3972:3991  checkAdminAddress() */\n      tag_154\n        /* \"Ethereum/Presale.sol\":3972:3989  checkAdminAddress */\n      tag_77\n        /* \"Ethereum/Presale.sol\":3972:3991  checkAdminAddress() */\n      jump\t// in\n    tag_154:\n        /* \"Ethereum/Presale.sol\":3968:4170  if(!checkAdminAddress()) {\r... */\n      tag_155\n      jumpi\n        /* \"Ethereum/Presale.sol\":4025:4158  ((fullPercenFee.sub(feeAnyone))\r... */\n      tag_156\n        /* \"Ethereum/Presale.sol\":4144:4157  fullPercenFee */\n      dup2\n        /* \"Ethereum/Presale.sol\":4026:4107  (fullPercenFee.sub(feeAnyone))\r... */\n      tag_157\n        /* \"Ethereum/Presale.sol\":4092:4106  real_amount_in */\n      dup6\n        /* \"Ethereum/Presale.sol\":4027:4055  fullPercenFee.sub(feeAnyone) */\n      tag_158\n        /* \"Ethereum/Presale.sol\":4045:4054  feeAnyone */\n      sload(0x18)\n        /* \"Ethereum/Presale.sol\":4027:4040  fullPercenFee */\n      dup7\n        /* \"Ethereum/Presale.sol\":4027:4044  fullPercenFee.sub */\n      tag_159\n      swap1\n        /* \"Ethereum/Presale.sol\":4027:4055  fullPercenFee.sub(feeAnyone) */\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_158:\n        /* \"Ethereum/Presale.sol\":4026:4091  (fullPercenFee.sub(feeAnyone))\r... */\n      swap1\n      tag_160\n        /* \"Ethereum/Presale.sol\":4026:4107  (fullPercenFee.sub(feeAnyone))\r... */\n      jump\t// in\n    tag_157:\n        /* \"Ethereum/Presale.sol\":4025:4143  ((fullPercenFee.sub(feeAnyone))\r... */\n      swap1\n      tag_161\n        /* \"Ethereum/Presale.sol\":4025:4158  ((fullPercenFee.sub(feeAnyone))\r... */\n      jump\t// in\n    tag_156:\n        /* \"Ethereum/Presale.sol\":4008:4158  real_amount_in = ((fullPercenFee.sub(feeAnyone))\r... */\n      swap3\n      pop\n        /* \"Ethereum/Presale.sol\":3968:4170  if(!checkAdminAddress()) {\r... */\n    tag_155:\n        /* \"Ethereum/Presale.sol\":4200:4226  saleInfor.maxSpendPerBuyer */\n      sload(0x12)\n        /* \"Ethereum/Presale.sol\":4180:4197  uint256 remaining */\n      0x00\n      swap1\n        /* \"Ethereum/Presale.sol\":4200:4243  saleInfor.maxSpendPerBuyer - real_amount_in */\n      tag_162\n      swap1\n        /* \"Ethereum/Presale.sol\":4229:4243  real_amount_in */\n      dup6\n      swap1\n        /* \"Ethereum/Presale.sol\":4200:4243  saleInfor.maxSpendPerBuyer - real_amount_in */\n      tag_103\n      jump\t// in\n    tag_162:\n        /* \"Ethereum/Presale.sol\":4400:4419  saleInfor.baseToken */\n      sload(0x0d)\n        /* \"Ethereum/Presale.sol\":4394:4431  ERC20(saleInfor.baseToken).decimals() */\n      0x40\n      dup1\n      mload\n      shl(0xe0, 0x313ce567)\n      dup2\n      mstore\n      swap1\n      mload\n        /* \"Ethereum/Presale.sol\":4180:4243  uint256 remaining = saleInfor.maxSpendPerBuyer - real_amount_in */\n      swap3\n      swap4\n      pop\n        /* \"Ethereum/Presale.sol\":4254:4271  uint256 tokenSold */\n      0x00\n      swap3\n        /* \"Ethereum/Presale.sol\":4275:4433  real_amount_in.\r... */\n      tag_163\n      swap3\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"Ethereum/Presale.sol\":4400:4419  saleInfor.baseToken */\n      and\n      swap2\n        /* \"Ethereum/Presale.sol\":4394:4429  ERC20(saleInfor.baseToken).decimals */\n      0x313ce567\n      swap2\n        /* \"Ethereum/Presale.sol\":4394:4431  ERC20(saleInfor.baseToken).decimals() */\n      0x04\n      dup1\n      dup4\n      add\n      swap3\n      0x20\n      swap3\n      swap2\n      swap1\n      dup3\n      swap1\n      sub\n      add\n      dup2\n        /* \"Ethereum/Presale.sol\":4400:4419  saleInfor.baseToken */\n      dup7\n        /* \"Ethereum/Presale.sol\":4394:4431  ERC20(saleInfor.baseToken).decimals() */\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_164\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_164:\n      pop\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_166\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_166:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_167\n      swap2\n      swap1\n      tag_111\n      jump\t// in\n    tag_167:\n        /* \"Ethereum/Presale.sol\":4380:4432  10 ** uint256(ERC20(saleInfor.baseToken).decimals()) */\n      tag_168\n      swap1\n        /* \"Ethereum/Presale.sol\":4380:4382  10 */\n      0x0a\n        /* \"Ethereum/Presale.sol\":4380:4432  10 ** uint256(ERC20(saleInfor.baseToken).decimals()) */\n      tag_113\n      jump\t// in\n    tag_168:\n        /* \"Ethereum/Presale.sol\":4324:4344  saleInfor.tokenPrice */\n      sload(0x0e)\n        /* \"Ethereum/Presale.sol\":4275:4345  real_amount_in.\r... */\n      tag_157\n      swap1\n        /* \"Ethereum/Presale.sol\":4275:4289  real_amount_in */\n      dup9\n      swap1\n        /* \"Ethereum/Presale.sol\":4275:4323  real_amount_in.\r... */\n      tag_160\n        /* \"Ethereum/Presale.sol\":4275:4345  real_amount_in.\r... */\n      jump\t// in\n        /* \"Ethereum/Presale.sol\":4275:4433  real_amount_in.\r... */\n    tag_163:\n        /* \"Ethereum/Presale.sol\":4254:4434  uint256 tokenSold = (real_amount_in.\r... */\n      swap10\n        /* \"Ethereum/Presale.sol\":3407:4485  function deposit(uint256 _amount) external view returns(uint256) {\r... */\n      swap9\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"Ethereum/Presale.sol\":3289:3399  function checkAdminAddress() public view returns(bool) {\r... */\n    tag_77:\n        /* \"Ethereum/Presale.sol\":3338:3342  bool */\n      0x00\n        /* \"Ethereum/Presale.sol\":3362:3391  admins.contains(_msgSender()) */\n      tag_171\n        /* \"Ethereum/Presale.sol\":3362:3368  admins */\n      0x19\n        /* \"Utils/Context.sol\":736:746  msg.sender */\n      caller\n        /* \"Ethereum/Presale.sol\":3362:3377  admins.contains */\n      tag_173\n        /* \"Ethereum/Presale.sol\":3362:3391  admins.contains(_msgSender()) */\n      jump\t// in\n    tag_171:\n        /* \"Ethereum/Presale.sol\":3355:3391  return admins.contains(_msgSender()) */\n      swap1\n      pop\n        /* \"Ethereum/Presale.sol\":3289:3399  function checkAdminAddress() public view returns(bool) {\r... */\n      swap1\n      jump\t// out\n        /* \"Utils/Ownable.sol\":1972:2173  function transferOwnership(address newOwner) public virtual onlyOwner {\r... */\n    tag_89:\n        /* \"Utils/Ownable.sol\":1136:1142  _owner */\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x01))\n        /* \"Utils/Context.sol\":736:746  msg.sender */\n      caller\n        /* \"Utils/Ownable.sol\":1283:1306  owner() == _msgSender() */\n      eq\n        /* \"Utils/Ownable.sol\":1275:1343  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_177\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":5322:5324   */\n      0x20\n        /* \"Utils/Ownable.sol\":1275:1343  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":5304:5325   */\n      dup2\n      swap1\n      mstore\n        /* \"#utility.yul\":5341:5359   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":5334:5364   */\n      mstore\n        /* \"#utility.yul\":5400:5434   */\n      0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572\n        /* \"#utility.yul\":5380:5398   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":5373:5435   */\n      mstore\n        /* \"#utility.yul\":5452:5470   */\n      0x64\n      add\n        /* \"Utils/Ownable.sol\":1275:1343  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_134\n        /* \"#utility.yul\":5294:5476   */\n      jump\n        /* \"Utils/Ownable.sol\":1275:1343  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n    tag_177:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"Utils/Ownable.sol\":2061:2083  newOwner != address(0) */\n      dup2\n      and\n        /* \"Utils/Ownable.sol\":2053:2126  require(newOwner != address(0), \"Ownable: new owner is the zero address\") */\n      tag_180\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":3888:3890   */\n      0x20\n        /* \"Utils/Ownable.sol\":2053:2126  require(newOwner != address(0), \"Ownable: new owner is the zero address\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":3870:3891   */\n      mstore\n        /* \"#utility.yul\":3927:3929   */\n      0x26\n        /* \"#utility.yul\":3907:3925   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":3900:3930   */\n      mstore\n        /* \"#utility.yul\":3966:4000   */\n      0x4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061\n        /* \"#utility.yul\":3946:3964   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":3939:4001   */\n      mstore\n      shl(0xd0, 0x646472657373)\n        /* \"#utility.yul\":4017:4035   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":4010:4046   */\n      mstore\n        /* \"#utility.yul\":4063:4082   */\n      0x84\n      add\n        /* \"Utils/Ownable.sol\":2053:2126  require(newOwner != address(0), \"Ownable: new owner is the zero address\") */\n      tag_134\n        /* \"#utility.yul\":3860:4088   */\n      jump\n        /* \"Utils/Ownable.sol\":2053:2126  require(newOwner != address(0), \"Ownable: new owner is the zero address\") */\n    tag_180:\n        /* \"Utils/Ownable.sol\":2137:2165  _transferOwnership(newOwner) */\n      tag_141\n        /* \"Utils/Ownable.sol\":2156:2164  newOwner */\n      dup2\n        /* \"Utils/Ownable.sol\":2137:2155  _transferOwnership */\n      tag_138\n        /* \"Utils/Ownable.sol\":2137:2165  _transferOwnership(newOwner) */\n      jump\t// in\n        /* \"Utils/EnumerableSet.sol\":8259:8411  function add(AddressSet storage set, address value) internal returns (bool) {\r... */\n    tag_95:\n        /* \"Utils/EnumerableSet.sol\":8329:8333  bool */\n      0x00\n        /* \"Utils/EnumerableSet.sol\":8353:8403  _add(set._inner, bytes32(uint256(uint160(value)))) */\n      tag_186\n        /* \"Utils/EnumerableSet.sol\":8358:8361  set */\n      dup4\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"Utils/EnumerableSet.sol\":8378:8401  uint256(uint160(value)) */\n      dup5\n      and\n        /* \"Utils/EnumerableSet.sol\":8353:8357  _add */\n      tag_187\n        /* \"Utils/EnumerableSet.sol\":8353:8403  _add(set._inner, bytes32(uint256(uint160(value)))) */\n      jump\t// in\n    tag_186:\n        /* \"Utils/EnumerableSet.sol\":8346:8403  return _add(set._inner, bytes32(uint256(uint160(value)))) */\n      swap1\n      pop\n        /* \"Utils/EnumerableSet.sol\":8259:8411  function add(AddressSet storage set, address value) internal returns (bool) {\r... */\n    tag_185:\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"Utils/Ownable.sol\":2333:2524  function _transferOwnership(address newOwner) internal virtual {\r... */\n    tag_138:\n        /* \"Utils/Ownable.sol\":2426:2432  _owner */\n      0x01\n      dup1\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"Utils/Ownable.sol\":2443:2460  _owner = newOwner */\n      dup4\n      dup2\n      and\n      not(sub(shl(0xa0, 0x01), 0x01))\n      dup4\n      and\n      dup2\n      or\n      swap1\n      swap4\n      sstore\n        /* \"Utils/Ownable.sol\":2476:2516  OwnershipTransferred(oldOwner, newOwner) */\n      mload(0x40)\n        /* \"Utils/Ownable.sol\":2426:2432  _owner */\n      swap2\n      and\n      swap2\n        /* \"Utils/Ownable.sol\":2443:2460  _owner = newOwner */\n      swap1\n        /* \"Utils/Ownable.sol\":2426:2432  _owner */\n      dup3\n      swap1\n        /* \"Utils/Ownable.sol\":2476:2516  OwnershipTransferred(oldOwner, newOwner) */\n      0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\n      swap1\n        /* \"Utils/Ownable.sol\":2407:2423  address oldOwner */\n      0x00\n      swap1\n        /* \"Utils/Ownable.sol\":2476:2516  OwnershipTransferred(oldOwner, newOwner) */\n      log3\n        /* \"Utils/Ownable.sol\":2333:2524  function _transferOwnership(address newOwner) internal virtual {\r... */\n      pop\n      pop\n      jump\t// out\n        /* \"Utils/SafeMath.sol\":3228:3326  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r... */\n    tag_159:\n        /* \"Utils/SafeMath.sol\":3286:3293  uint256 */\n      0x00\n        /* \"Utils/SafeMath.sol\":3313:3318  a - b */\n      tag_186\n        /* \"Utils/SafeMath.sol\":3317:3318  b */\n      dup3\n        /* \"Utils/SafeMath.sol\":3313:3314  a */\n      dup5\n        /* \"Utils/SafeMath.sol\":3313:3318  a - b */\n      tag_103\n      jump\t// in\n        /* \"Utils/SafeMath.sol\":3585:3683  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r... */\n    tag_160:\n        /* \"Utils/SafeMath.sol\":3643:3650  uint256 */\n      0x00\n        /* \"Utils/SafeMath.sol\":3670:3675  a * b */\n      tag_186\n        /* \"Utils/SafeMath.sol\":3674:3675  b */\n      dup3\n        /* \"Utils/SafeMath.sol\":3670:3671  a */\n      dup5\n        /* \"Utils/SafeMath.sol\":3670:3675  a * b */\n      tag_116\n      jump\t// in\n        /* \"Utils/SafeMath.sol\":3984:4082  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r... */\n    tag_161:\n        /* \"Utils/SafeMath.sol\":4042:4049  uint256 */\n      0x00\n        /* \"Utils/SafeMath.sol\":4069:4074  a / b */\n      tag_186\n        /* \"Utils/SafeMath.sol\":4073:4074  b */\n      dup3\n        /* \"Utils/SafeMath.sol\":4069:4070  a */\n      dup5\n        /* \"Utils/SafeMath.sol\":4069:4074  a / b */\n      tag_196\n      jump\t// in\n        /* \"Utils/EnumerableSet.sol\":8831:8998  function contains(AddressSet storage set, address value) internal view returns (bool) {\r... */\n    tag_173:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"Utils/EnumerableSet.sol\":8965:8988  uint256(uint160(value)) */\n      dup2\n      and\n        /* \"Utils/EnumerableSet.sol\":8911:8915  bool */\n      0x00\n        /* \"Utils/EnumerableSet.sol\":4367:4386  set._indexes[value] */\n      swap1\n      dup2\n      mstore\n        /* \"Utils/EnumerableSet.sol\":4367:4379  set._indexes */\n      0x01\n      dup4\n      add\n        /* \"Utils/EnumerableSet.sol\":4367:4386  set._indexes[value] */\n      0x20\n      mstore\n      0x40\n      dup2\n      keccak256\n      sload\n        /* \"Utils/EnumerableSet.sol\":4367:4391  set._indexes[value] != 0 */\n      iszero\n      iszero\n        /* \"Utils/EnumerableSet.sol\":8935:8990  _contains(set._inner, bytes32(uint256(uint160(value)))) */\n      tag_186\n        /* \"Utils/EnumerableSet.sol\":4270:4399  function _contains(Set storage set, bytes32 value) private view returns (bool) {\r... */\n      jump\n        /* \"Utils/EnumerableSet.sol\":2174:2588  function _add(Set storage set, bytes32 value) private returns (bool) {\r... */\n    tag_187:\n        /* \"Utils/EnumerableSet.sol\":2237:2241  bool */\n      0x00\n        /* \"Utils/EnumerableSet.sol\":4367:4386  set._indexes[value] */\n      dup2\n      dup2\n      mstore\n        /* \"Utils/EnumerableSet.sol\":4367:4379  set._indexes */\n      0x01\n      dup4\n      add\n        /* \"Utils/EnumerableSet.sol\":4367:4386  set._indexes[value] */\n      0x20\n      mstore\n      0x40\n      dup2\n      keccak256\n      sload\n        /* \"Utils/EnumerableSet.sol\":2254:2581  if (!_contains(set, value)) {\r... */\n      tag_202\n      jumpi\n      pop\n        /* \"Utils/EnumerableSet.sol\":2297:2320  set._values.push(value) */\n      dup2\n      sload\n      0x01\n      dup2\n      dup2\n      add\n      dup5\n      sstore\n        /* \"Utils/EnumerableSet.sol\":2297:2308  set._values */\n      0x00\n        /* \"Utils/EnumerableSet.sol\":2297:2320  set._values.push(value) */\n      dup5\n      dup2\n      mstore\n      0x20\n      dup1\n      dup3\n      keccak256\n      swap1\n      swap4\n      add\n      dup5\n      swap1\n      sstore\n        /* \"Utils/EnumerableSet.sol\":2480:2498  set._values.length */\n      dup5\n      sload\n        /* \"Utils/EnumerableSet.sol\":2458:2477  set._indexes[value] */\n      dup5\n      dup3\n      mstore\n        /* \"Utils/EnumerableSet.sol\":2458:2470  set._indexes */\n      dup3\n      dup7\n      add\n        /* \"Utils/EnumerableSet.sol\":2458:2477  set._indexes[value] */\n      swap1\n      swap4\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"Utils/EnumerableSet.sol\":2458:2498  set._indexes[value] = set._values.length */\n      swap2\n      swap1\n      swap2\n      sstore\n        /* \"Utils/EnumerableSet.sol\":2513:2524  return true */\n      jump(tag_185)\n        /* \"Utils/EnumerableSet.sol\":2254:2581  if (!_contains(set, value)) {\r... */\n    tag_202:\n      pop\n        /* \"Utils/EnumerableSet.sol\":2564:2569  false */\n      0x00\n        /* \"Utils/EnumerableSet.sol\":2557:2569  return false */\n      jump(tag_185)\n        /* \"#utility.yul\":14:271   */\n    tag_42:\n        /* \"#utility.yul\":73:79   */\n      0x00\n        /* \"#utility.yul\":126:128   */\n      0x20\n        /* \"#utility.yul\":114:123   */\n      dup3\n        /* \"#utility.yul\":105:112   */\n      dup5\n        /* \"#utility.yul\":101:124   */\n      sub\n        /* \"#utility.yul\":97:129   */\n      slt\n        /* \"#utility.yul\":94:96   */\n      iszero\n      tag_208\n      jumpi\n        /* \"#utility.yul\":147:153   */\n      dup1\n        /* \"#utility.yul\":139:145   */\n      dup2\n        /* \"#utility.yul\":132:154   */\n      revert\n        /* \"#utility.yul\":94:96   */\n    tag_208:\n        /* \"#utility.yul\":191:200   */\n      dup2\n        /* \"#utility.yul\":178:201   */\n      calldataload\n        /* \"#utility.yul\":210:241   */\n      tag_209\n        /* \"#utility.yul\":235:240   */\n      dup2\n        /* \"#utility.yul\":210:241   */\n      tag_210\n      jump\t// in\n    tag_209:\n        /* \"#utility.yul\":260:265   */\n      swap4\n        /* \"#utility.yul\":84:271   */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":276:1572   */\n    tag_48:\n        /* \"#utility.yul\":419:425   */\n      0x00\n        /* \"#utility.yul\":427:433   */\n      dup1\n        /* \"#utility.yul\":435:441   */\n      0x00\n        /* \"#utility.yul\":443:449   */\n      dup1\n        /* \"#utility.yul\":474:477   */\n      0x0140\n        /* \"#utility.yul\":518:520   */\n      dup1\n        /* \"#utility.yul\":506:515   */\n      dup7\n        /* \"#utility.yul\":497:504   */\n      dup9\n        /* \"#utility.yul\":493:516   */\n      sub\n        /* \"#utility.yul\":489:521   */\n      slt\n        /* \"#utility.yul\":486:488   */\n      iszero\n      tag_212\n      jumpi\n        /* \"#utility.yul\":539:545   */\n      dup4\n        /* \"#utility.yul\":531:537   */\n      dup5\n        /* \"#utility.yul\":524:546   */\n      revert\n        /* \"#utility.yul\":486:488   */\n    tag_212:\n        /* \"#utility.yul\":583:592   */\n      dup6\n        /* \"#utility.yul\":570:593   */\n      calldataload\n        /* \"#utility.yul\":602:633   */\n      tag_213\n        /* \"#utility.yul\":627:632   */\n      dup2\n        /* \"#utility.yul\":602:633   */\n      tag_210\n      jump\t// in\n    tag_213:\n        /* \"#utility.yul\":652:657   */\n      swap5\n      pop\n        /* \"#utility.yul\":676:678   */\n      0x20\n        /* \"#utility.yul\":715:733   */\n      dup7\n      dup2\n      add\n        /* \"#utility.yul\":702:734   */\n      calldataload\n        /* \"#utility.yul\":743:776   */\n      tag_214\n        /* \"#utility.yul\":702:734   */\n      dup2\n        /* \"#utility.yul\":743:776   */\n      tag_210\n      jump\t// in\n    tag_214:\n        /* \"#utility.yul\":795:802   */\n      swap5\n      pop\n        /* \"#utility.yul\":854:856   */\n      0x40\n        /* \"#utility.yul\":839:857   */\n      dup8\n      add\n        /* \"#utility.yul\":826:858   */\n      calldataload\n        /* \"#utility.yul\":867:900   */\n      tag_215\n        /* \"#utility.yul\":826:858   */\n      dup2\n        /* \"#utility.yul\":867:900   */\n      tag_210\n      jump\t// in\n    tag_215:\n        /* \"#utility.yul\":919:926   */\n      swap4\n      pop\n        /* \"#utility.yul\":964:967   */\n      0x7f\n        /* \"#utility.yul\":949:968   */\n      dup8\n      add\n        /* \"#utility.yul\":945:978   */\n      dup9\n      sgt\n        /* \"#utility.yul\":935:937   */\n      tag_216\n      jumpi\n        /* \"#utility.yul\":997:1003   */\n      dup3\n        /* \"#utility.yul\":989:995   */\n      dup4\n        /* \"#utility.yul\":982:1004   */\n      revert\n        /* \"#utility.yul\":935:937   */\n    tag_216:\n        /* \"#utility.yul\":1035:1037   */\n      0x40\n        /* \"#utility.yul\":1029:1038   */\n      mload\n        /* \"#utility.yul\":1077:1080   */\n      0xe0\n        /* \"#utility.yul\":1069:1075   */\n      dup2\n        /* \"#utility.yul\":1065:1081   */\n      add\n        /* \"#utility.yul\":1147:1153   */\n      dup2\n        /* \"#utility.yul\":1135:1145   */\n      dup2\n        /* \"#utility.yul\":1132:1154   */\n      lt\n        /* \"#utility.yul\":1111:1129   */\n      0xffffffffffffffff\n        /* \"#utility.yul\":1099:1109   */\n      dup3\n        /* \"#utility.yul\":1096:1130   */\n      gt\n        /* \"#utility.yul\":1093:1155   */\n      or\n        /* \"#utility.yul\":1090:1092   */\n      iszero\n      tag_218\n      jumpi\n        /* \"#utility.yul\":1158:1176   */\n      tag_218\n      tag_219\n      jump\t// in\n    tag_218:\n        /* \"#utility.yul\":1194:1196   */\n      0x40\n        /* \"#utility.yul\":1187:1209   */\n      mstore\n        /* \"#utility.yul\":1229:1235   */\n      dup1\n        /* \"#utility.yul\":1270:1272   */\n      0x60\n        /* \"#utility.yul\":1255:1273   */\n      dup10\n      add\n        /* \"#utility.yul\":1288:1306   */\n      dup5\n      dup11\n      add\n        /* \"#utility.yul\":1285:1316   */\n      dup12\n      lt\n        /* \"#utility.yul\":1282:1284   */\n      iszero\n      tag_220\n      jumpi\n        /* \"#utility.yul\":1334:1340   */\n      dup6\n        /* \"#utility.yul\":1326:1332   */\n      dup7\n        /* \"#utility.yul\":1319:1341   */\n      revert\n        /* \"#utility.yul\":1282:1284   */\n    tag_220:\n        /* \"#utility.yul\":1361:1367   */\n      dup6\n        /* \"#utility.yul\":1352:1367   */\n      swap5\n      pop\n        /* \"#utility.yul\":1376:1541   */\n    tag_221:\n        /* \"#utility.yul\":1390:1394   */\n      0x07\n        /* \"#utility.yul\":1387:1388   */\n      dup6\n        /* \"#utility.yul\":1384:1395   */\n      lt\n        /* \"#utility.yul\":1376:1541   */\n      iszero\n      tag_223\n      jumpi\n        /* \"#utility.yul\":1449:1466   */\n      dup1\n      calldataload\n        /* \"#utility.yul\":1437:1467   */\n      dup3\n      mstore\n        /* \"#utility.yul\":1410:1411   */\n      0x01\n        /* \"#utility.yul\":1403:1412   */\n      swap5\n      swap1\n      swap5\n      add\n      swap4\n        /* \"#utility.yul\":1487:1499   */\n      swap1\n      dup4\n      add\n      swap1\n        /* \"#utility.yul\":1519:1531   */\n      dup4\n      add\n        /* \"#utility.yul\":1376:1541   */\n      jump(tag_221)\n    tag_223:\n        /* \"#utility.yul\":1380:1383   */\n      pop\n      pop\n        /* \"#utility.yul\":1560:1566   */\n      dup1\n        /* \"#utility.yul\":1550:1566   */\n      swap4\n      pop\n      pop\n      pop\n      pop\n        /* \"#utility.yul\":454:1572   */\n      swap3\n      swap6\n      swap2\n      swap5\n      pop\n      swap3\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1577:1767   */\n    tag_37:\n        /* \"#utility.yul\":1636:1642   */\n      0x00\n        /* \"#utility.yul\":1689:1691   */\n      0x20\n        /* \"#utility.yul\":1677:1686   */\n      dup3\n        /* \"#utility.yul\":1668:1675   */\n      dup5\n        /* \"#utility.yul\":1664:1687   */\n      sub\n        /* \"#utility.yul\":1660:1692   */\n      slt\n        /* \"#utility.yul\":1657:1659   */\n      iszero\n      tag_225\n      jumpi\n        /* \"#utility.yul\":1710:1716   */\n      dup1\n        /* \"#utility.yul\":1702:1708   */\n      dup2\n        /* \"#utility.yul\":1695:1717   */\n      revert\n        /* \"#utility.yul\":1657:1659   */\n    tag_225:\n      pop\n        /* \"#utility.yul\":1738:1761   */\n      calldataload\n      swap2\n        /* \"#utility.yul\":1647:1767   */\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1772:1966   */\n    tag_111:\n        /* \"#utility.yul\":1842:1848   */\n      0x00\n        /* \"#utility.yul\":1895:1897   */\n      0x20\n        /* \"#utility.yul\":1883:1892   */\n      dup3\n        /* \"#utility.yul\":1874:1881   */\n      dup5\n        /* \"#utility.yul\":1870:1893   */\n      sub\n        /* \"#utility.yul\":1866:1898   */\n      slt\n        /* \"#utility.yul\":1863:1865   */\n      iszero\n      tag_227\n      jumpi\n        /* \"#utility.yul\":1916:1922   */\n      dup1\n        /* \"#utility.yul\":1908:1914   */\n      dup2\n        /* \"#utility.yul\":1901:1923   */\n      revert\n        /* \"#utility.yul\":1863:1865   */\n    tag_227:\n      pop\n        /* \"#utility.yul\":1944:1960   */\n      mload\n      swap2\n        /* \"#utility.yul\":1853:1966   */\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6763:6980   */\n    tag_196:\n        /* \"#utility.yul\":6803:6804   */\n      0x00\n        /* \"#utility.yul\":6829:6830   */\n      dup3\n        /* \"#utility.yul\":6819:6821   */\n      tag_241\n      jumpi\n      shl(0xe0, 0x4e487b71)\n        /* \"#utility.yul\":6854:6885   */\n      dup2\n      mstore\n        /* \"#utility.yul\":6908:6912   */\n      0x12\n        /* \"#utility.yul\":6905:6906   */\n      0x04\n        /* \"#utility.yul\":6898:6913   */\n      mstore\n        /* \"#utility.yul\":6936:6940   */\n      0x24\n        /* \"#utility.yul\":6861:6862   */\n      dup2\n        /* \"#utility.yul\":6926:6941   */\n      revert\n        /* \"#utility.yul\":6819:6821   */\n    tag_241:\n      pop\n        /* \"#utility.yul\":6965:6974   */\n      div\n      swap1\n        /* \"#utility.yul\":6809:6980   */\n      jump\t// out\n        /* \"#utility.yul\":6985:7407   */\n    tag_242:\n        /* \"#utility.yul\":7074:7075   */\n      0x01\n        /* \"#utility.yul\":7117:7122   */\n      dup2\n        /* \"#utility.yul\":7074:7075   */\n      dup2\n        /* \"#utility.yul\":7131:7401   */\n    tag_244:\n        /* \"#utility.yul\":7152:7159   */\n      dup1\n        /* \"#utility.yul\":7142:7150   */\n      dup6\n        /* \"#utility.yul\":7139:7160   */\n      gt\n        /* \"#utility.yul\":7131:7401   */\n      iszero\n      tag_246\n      jumpi\n        /* \"#utility.yul\":7211:7215   */\n      dup2\n        /* \"#utility.yul\":7207:7208   */\n      0x00\n        /* \"#utility.yul\":7203:7209   */\n      not\n        /* \"#utility.yul\":7199:7216   */\n      div\n        /* \"#utility.yul\":7193:7197   */\n      dup3\n        /* \"#utility.yul\":7190:7217   */\n      gt\n        /* \"#utility.yul\":7187:7189   */\n      iszero\n      tag_248\n      jumpi\n        /* \"#utility.yul\":7220:7238   */\n      tag_248\n      tag_249\n      jump\t// in\n    tag_248:\n        /* \"#utility.yul\":7270:7277   */\n      dup1\n        /* \"#utility.yul\":7260:7268   */\n      dup6\n        /* \"#utility.yul\":7256:7278   */\n      and\n        /* \"#utility.yul\":7253:7255   */\n      iszero\n      tag_250\n      jumpi\n        /* \"#utility.yul\":7290:7306   */\n      swap2\n      dup2\n      mul\n      swap2\n        /* \"#utility.yul\":7253:7255   */\n    tag_250:\n        /* \"#utility.yul\":7369:7391   */\n      swap4\n      dup5\n      shr\n      swap4\n        /* \"#utility.yul\":7329:7344   */\n      swap1\n      dup1\n      mul\n      swap1\n        /* \"#utility.yul\":7131:7401   */\n      jump(tag_244)\n    tag_246:\n        /* \"#utility.yul\":7135:7138   */\n      pop\n        /* \"#utility.yul\":7049:7407   */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":7412:7543   */\n    tag_113:\n        /* \"#utility.yul\":7472:7477   */\n      0x00\n        /* \"#utility.yul\":7501:7537   */\n      tag_186\n        /* \"#utility.yul\":7528:7536   */\n      dup4\n        /* \"#utility.yul\":7522:7526   */\n      dup4\n        /* \"#utility.yul\":7597:7602   */\n      0x00\n        /* \"#utility.yul\":7627:7635   */\n      dup3\n        /* \"#utility.yul\":7617:7619   */\n      tag_255\n      jumpi\n      pop\n        /* \"#utility.yul\":7668:7669   */\n      0x01\n        /* \"#utility.yul\":7682:7687   */\n      jump(tag_185)\n        /* \"#utility.yul\":7617:7619   */\n    tag_255:\n        /* \"#utility.yul\":7716:7720   */\n      dup2\n        /* \"#utility.yul\":7706:7708   */\n      tag_256\n      jumpi\n      pop\n        /* \"#utility.yul\":7753:7754   */\n      0x00\n        /* \"#utility.yul\":7767:7772   */\n      jump(tag_185)\n        /* \"#utility.yul\":7706:7708   */\n    tag_256:\n        /* \"#utility.yul\":7798:7802   */\n      dup2\n        /* \"#utility.yul\":7816:7817   */\n      0x01\n        /* \"#utility.yul\":7811:7870   */\n      dup2\n      eq\n      tag_258\n      jumpi\n        /* \"#utility.yul\":7884:7885   */\n      0x02\n        /* \"#utility.yul\":7879:8009   */\n      dup2\n      eq\n      tag_259\n      jumpi\n        /* \"#utility.yul\":7791:8009   */\n      jump(tag_257)\n        /* \"#utility.yul\":7811:7870   */\n    tag_258:\n        /* \"#utility.yul\":7841:7842   */\n      0x01\n        /* \"#utility.yul\":7832:7842   */\n      swap2\n      pop\n        /* \"#utility.yul\":7855:7860   */\n      pop\n      jump(tag_185)\n        /* \"#utility.yul\":7879:8009   */\n    tag_259:\n        /* \"#utility.yul\":7916:7919   */\n      0xff\n        /* \"#utility.yul\":7906:7914   */\n      dup5\n        /* \"#utility.yul\":7903:7920   */\n      gt\n        /* \"#utility.yul\":7900:7902   */\n      iszero\n      tag_261\n      jumpi\n        /* \"#utility.yul\":7923:7941   */\n      tag_261\n      tag_249\n      jump\t// in\n    tag_261:\n      pop\n      pop\n        /* \"#utility.yul\":7979:7980   */\n      0x01\n        /* \"#utility.yul\":7965:7981   */\n      dup3\n      shl\n        /* \"#utility.yul\":7994:7999   */\n      jump(tag_185)\n        /* \"#utility.yul\":7791:8009   */\n    tag_257:\n      pop\n        /* \"#utility.yul\":8093:8095   */\n      0x20\n        /* \"#utility.yul\":8083:8091   */\n      dup4\n        /* \"#utility.yul\":8080:8096   */\n      lt\n        /* \"#utility.yul\":8074:8077   */\n      0x0133\n        /* \"#utility.yul\":8068:8072   */\n      dup4\n        /* \"#utility.yul\":8065:8078   */\n      lt\n        /* \"#utility.yul\":8061:8097   */\n      and\n        /* \"#utility.yul\":8055:8057   */\n      0x4e\n        /* \"#utility.yul\":8045:8053   */\n      dup5\n        /* \"#utility.yul\":8042:8058   */\n      lt\n        /* \"#utility.yul\":8037:8039   */\n      0x0b\n        /* \"#utility.yul\":8031:8035   */\n      dup5\n        /* \"#utility.yul\":8028:8040   */\n      lt\n        /* \"#utility.yul\":8024:8059   */\n      and\n        /* \"#utility.yul\":8021:8098   */\n      or\n        /* \"#utility.yul\":8018:8020   */\n      iszero\n      tag_262\n      jumpi\n      pop\n        /* \"#utility.yul\":8130:8149   */\n      dup2\n      dup2\n      exp\n        /* \"#utility.yul\":8162:8167   */\n      jump(tag_185)\n        /* \"#utility.yul\":8018:8020   */\n    tag_262:\n        /* \"#utility.yul\":8209:8243   */\n      tag_263\n        /* \"#utility.yul\":8234:8242   */\n      dup4\n        /* \"#utility.yul\":8228:8232   */\n      dup4\n        /* \"#utility.yul\":8209:8243   */\n      tag_242\n      jump\t// in\n    tag_263:\n        /* \"#utility.yul\":8279:8285   */\n      dup1\n        /* \"#utility.yul\":8275:8276   */\n      0x00\n        /* \"#utility.yul\":8271:8277   */\n      not\n        /* \"#utility.yul\":8267:8286   */\n      div\n        /* \"#utility.yul\":8258:8265   */\n      dup3\n        /* \"#utility.yul\":8255:8287   */\n      gt\n        /* \"#utility.yul\":8252:8254   */\n      iszero\n      tag_265\n      jumpi\n        /* \"#utility.yul\":8290:8308   */\n      tag_265\n      tag_249\n      jump\t// in\n    tag_265:\n        /* \"#utility.yul\":8328:8348   */\n      mul\n      swap4\n        /* \"#utility.yul\":7607:8354   */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":8359:8527   */\n    tag_116:\n        /* \"#utility.yul\":8399:8406   */\n      0x00\n        /* \"#utility.yul\":8465:8466   */\n      dup2\n        /* \"#utility.yul\":8461:8462   */\n      0x00\n        /* \"#utility.yul\":8457:8463   */\n      not\n        /* \"#utility.yul\":8453:8467   */\n      div\n        /* \"#utility.yul\":8450:8451   */\n      dup4\n        /* \"#utility.yul\":8447:8468   */\n      gt\n        /* \"#utility.yul\":8442:8443   */\n      dup3\n        /* \"#utility.yul\":8435:8444   */\n      iszero\n        /* \"#utility.yul\":8428:8445   */\n      iszero\n        /* \"#utility.yul\":8424:8469   */\n      and\n        /* \"#utility.yul\":8421:8423   */\n      iszero\n      tag_268\n      jumpi\n        /* \"#utility.yul\":8472:8490   */\n      tag_268\n      tag_249\n      jump\t// in\n    tag_268:\n      pop\n        /* \"#utility.yul\":8512:8521   */\n      mul\n      swap1\n        /* \"#utility.yul\":8411:8527   */\n      jump\t// out\n        /* \"#utility.yul\":8532:8657   */\n    tag_103:\n        /* \"#utility.yul\":8572:8576   */\n      0x00\n        /* \"#utility.yul\":8600:8601   */\n      dup3\n        /* \"#utility.yul\":8597:8598   */\n      dup3\n        /* \"#utility.yul\":8594:8602   */\n      lt\n        /* \"#utility.yul\":8591:8593   */\n      iszero\n      tag_271\n      jumpi\n        /* \"#utility.yul\":8605:8623   */\n      tag_271\n      tag_249\n      jump\t// in\n    tag_271:\n      pop\n        /* \"#utility.yul\":8642:8651   */\n      sub\n      swap1\n        /* \"#utility.yul\":8581:8657   */\n      jump\t// out\n        /* \"#utility.yul\":8662:8789   */\n    tag_249:\n        /* \"#utility.yul\":8723:8733   */\n      0x4e487b71\n        /* \"#utility.yul\":8718:8721   */\n      0xe0\n        /* \"#utility.yul\":8714:8734   */\n      shl\n        /* \"#utility.yul\":8711:8712   */\n      0x00\n        /* \"#utility.yul\":8704:8735   */\n      mstore\n        /* \"#utility.yul\":8754:8758   */\n      0x11\n        /* \"#utility.yul\":8751:8752   */\n      0x04\n        /* \"#utility.yul\":8744:8759   */\n      mstore\n        /* \"#utility.yul\":8778:8782   */\n      0x24\n        /* \"#utility.yul\":8775:8776   */\n      0x00\n        /* \"#utility.yul\":8768:8783   */\n      revert\n        /* \"#utility.yul\":8794:8921   */\n    tag_219:\n        /* \"#utility.yul\":8855:8865   */\n      0x4e487b71\n        /* \"#utility.yul\":8850:8853   */\n      0xe0\n        /* \"#utility.yul\":8846:8866   */\n      shl\n        /* \"#utility.yul\":8843:8844   */\n      0x00\n        /* \"#utility.yul\":8836:8867   */\n      mstore\n        /* \"#utility.yul\":8886:8890   */\n      0x41\n        /* \"#utility.yul\":8883:8884   */\n      0x04\n        /* \"#utility.yul\":8876:8891   */\n      mstore\n        /* \"#utility.yul\":8910:8914   */\n      0x24\n        /* \"#utility.yul\":8907:8908   */\n      0x00\n        /* \"#utility.yul\":8900:8915   */\n      revert\n        /* \"#utility.yul\":8926:9057   */\n    tag_210:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":9001:9032   */\n      dup2\n      and\n        /* \"#utility.yul\":8991:9033   */\n      dup2\n      eq\n        /* \"#utility.yul\":8981:8983   */\n      tag_141\n      jumpi\n        /* \"#utility.yul\":9047:9048   */\n      0x00\n        /* \"#utility.yul\":9044:9045   */\n      dup1\n        /* \"#utility.yul\":9037:9049   */\n      revert\n\n    auxdata: 0xa2646970667358221220be19ea4abafe580c5e14a2d470c348a0fb109091231220e63f69a27de01f207764736f6c63430008040033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "608060405260016000556100123361009c565b6017805473c778417e063141139fce010982780140aa0cd5ab6001600160a01b03199091161790556100646019736ccb41eeda5a073076f3e7dc1614c185b5fa41ed6100ee602090811b61099317901c565b50610091734f0b12bbf40fc182559822a5b1db6d34dbc3e01660196100ee60201b6109931790919060201c565b50601460185561015b565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000610103836001600160a01b03841661010c565b90505b92915050565b600081815260018301602052604081205461015357508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610106565b506000610106565b610d638061016a6000396000f3fe6080604052600436106100f35760003560e01c80638da5cb5b1161008a578063cad5b0f711610059578063cad5b0f71461033f578063e2d3f42314610364578063f2fde38b146103eb578063f8b2cb4f1461040b57600080fd5b80638da5cb5b14610275578063acfb2355146102a7578063ad5c4648146102ff578063b6b55f251461031f57600080fd5b806356c5f349116100c657806356c5f3491461020b57806361e1765514610238578063715018a614610258578063861faf5f1461026d57600080fd5b806318856a2f146100f8578063200d2ed2146101bd5780633b5ef2ad146101e05780634329db46146101f6575b600080fd5b34801561010457600080fd5b50600b54600c54600d54600e54600f5460105460115460125460135460145460155460165461014c9b6001600160a01b039081169b81169a16989796959493929160ff16908c565b604080516001600160a01b039d8e1681529b8d1660208d015299909b16988a01989098526060890196909652608088019490945260a087019290925260c086015260e08501526101008401526101208301521515610140820152610160810191909152610180015b60405180910390f35b3480156101c957600080fd5b506101d2610433565b6040519081526020016101b4565b3480156101ec57600080fd5b506101d260185481565b610209610204366004610b7b565b61045c565b005b34801561021757600080fd5b506101d2610226366004610a98565b60036020526000908152604090205481565b34801561024457600080fd5b50610209610253366004610abb565b610496565b34801561026457600080fd5b50610209610644565b6102096106af565b34801561028157600080fd5b506001546001600160a01b03165b6040516001600160a01b0390911681526020016101b4565b3480156102b357600080fd5b506004546005546006546007546008546009546102d295949392919086565b604080519687526020870195909552938501929092526060840152608083015260a082015260c0016101b4565b34801561030b57600080fd5b5060175461028f906001600160a01b031681565b34801561032b57600080fd5b506101d261033a366004610b7b565b6106de565b34801561034b57600080fd5b506103546108b9565b60405190151581526020016101b4565b34801561037057600080fd5b506103ba61037f366004610a98565b600260208190526000918252604090912080546001820154928201546003830154600490930154919392909160ff8082169161010090041686565b60408051968752602087019590955293850192909252606084015215156080830152151560a082015260c0016101b4565b3480156103f757600080fd5b50610209610406366004610a98565b6108cb565b34801561041757600080fd5b506101d2610426366004610a98565b6001600160a01b03163190565b600f546000904210156104465750600090565b6010544211156104565750600290565b50600190565b336108fc61046a8334610cd5565b6040518115909202916000818181858888f19350505050158015610492573d6000803e3d6000fd5b5050565b600b80546001600160a01b038087166001600160a01b031992831617909255600c80548684169083168117909155600d8054938616939092169290921790556040805163313ce56760e01b8152905163313ce56791600480820192602092909190829003018186803b15801561050b57600080fd5b505afa15801561051f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105439190610b93565b61054e90600a610c0e565b815161055a9190610cb6565b600e55602080820151600f556040808301516010556060830151601155600d54815163313ce56760e01b815291516001600160a01b039091169263313ce5679260048082019391829003018186803b1580156105b557600080fd5b505afa1580156105c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ed9190610b93565b6105f890600a610c0e565b60808201516106079190610cb6565b60125560a081015160135560c001516014555050600d54601754601580546001600160a01b03938416939092169290921460ff1990911617905550565b6001546001600160a01b031633146106a35760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b6106ad60006109b1565b565b60405133904780156108fc02916000818181858888f193505050501580156106db573d6000803e3d6000fd5b50565b60006106e8610433565b6001146107245760405162461bcd60e51b815260206004820152600a6024820152694e4f542041435449564560b01b604482015260640161069a565b336000908152600260205260408120601154909184918291906103e8908310156107835760405162461bcd60e51b815260206004820152601060248201526f4e6f7420656e6f7567682076616c756560801b604482015260640161069a565b6012548311156107c65760405162461bcd60e51b815260206004820152600e60248201526d4f766572666c6f772076616c756560901b604482015260640161069a565b6107ce6108b9565b6107fe576107fb816107f5856107ef60185486610a0390919063ffffffff16565b90610a0f565b90610a1b565b92505b60125460009061080f908590610cd5565b600d546040805163313ce56760e01b815290519293506000926108ac926001600160a01b03169163313ce567916004808301926020929190829003018186803b15801561085b57600080fd5b505afa15801561086f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108939190610b93565b61089e90600a610c0e565b600e546107f5908890610a0f565b9998505050505050505050565b60006108c6601933610a27565b905090565b6001546001600160a01b031633146109255760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161069a565b6001600160a01b03811661098a5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161069a565b6106db816109b1565b60006109a8836001600160a01b038416610a49565b90505b92915050565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60006109a88284610cd5565b60006109a88284610cb6565b60006109a88284610bab565b6001600160a01b038116600090815260018301602052604081205415156109a8565b6000818152600183016020526040812054610a90575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556109ab565b5060006109ab565b600060208284031215610aa9578081fd5b8135610ab481610d18565b9392505050565b600080600080610140808688031215610ad2578384fd5b8535610add81610d18565b9450602086810135610aee81610d18565b94506040870135610afe81610d18565b9350607f87018813610b0e578283fd5b60405160e0810181811067ffffffffffffffff82111715610b3157610b31610d02565b6040528060608901848a018b1015610b47578586fd5b8594505b6007851015610b6a578035825260019490940193908301908301610b4b565b505080935050505092959194509250565b600060208284031215610b8c578081fd5b5035919050565b600060208284031215610ba4578081fd5b5051919050565b600082610bc657634e487b7160e01b81526012600452602481fd5b500490565b600181815b80851115610c06578160001904821115610bec57610bec610cec565b80851615610bf957918102915b93841c9390800290610bd0565b509250929050565b60006109a88383600082610c24575060016109ab565b81610c31575060006109ab565b8160018114610c475760028114610c5157610c6d565b60019150506109ab565b60ff841115610c6257610c62610cec565b50506001821b6109ab565b5060208310610133831016604e8410600b8410161715610c90575081810a6109ab565b610c9a8383610bcb565b8060001904821115610cae57610cae610cec565b029392505050565b6000816000190483118215151615610cd057610cd0610cec565b500290565b600082821015610ce757610ce7610cec565b500390565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146106db57600080fdfea2646970667358221220be19ea4abafe580c5e14a2d470c348a0fb109091231220e63f69a27de01f207764736f6c63430008040033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x1 PUSH1 0x0 SSTORE PUSH2 0x12 CALLER PUSH2 0x9C JUMP JUMPDEST PUSH1 0x17 DUP1 SLOAD PUSH20 0xC778417E063141139FCE010982780140AA0CD5AB PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP1 SWAP2 AND OR SWAP1 SSTORE PUSH2 0x64 PUSH1 0x19 PUSH20 0x6CCB41EEDA5A073076F3E7DC1614C185B5FA41ED PUSH2 0xEE PUSH1 0x20 SWAP1 DUP2 SHL PUSH2 0x993 OR SWAP1 SHR JUMP JUMPDEST POP PUSH2 0x91 PUSH20 0x4F0B12BBF40FC182559822A5B1DB6D34DBC3E016 PUSH1 0x19 PUSH2 0xEE PUSH1 0x20 SHL PUSH2 0x993 OR SWAP1 SWAP2 SWAP1 PUSH1 0x20 SHR JUMP JUMPDEST POP PUSH1 0x14 PUSH1 0x18 SSTORE PUSH2 0x15B JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x103 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x10C JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 DUP4 ADD PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH2 0x153 JUMPI POP DUP2 SLOAD PUSH1 0x1 DUP2 DUP2 ADD DUP5 SSTORE PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 KECCAK256 SWAP1 SWAP4 ADD DUP5 SWAP1 SSTORE DUP5 SLOAD DUP5 DUP3 MSTORE DUP3 DUP7 ADD SWAP1 SWAP4 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP2 SWAP1 SWAP2 SSTORE PUSH2 0x106 JUMP JUMPDEST POP PUSH1 0x0 PUSH2 0x106 JUMP JUMPDEST PUSH2 0xD63 DUP1 PUSH2 0x16A PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0xF3 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8DA5CB5B GT PUSH2 0x8A JUMPI DUP1 PUSH4 0xCAD5B0F7 GT PUSH2 0x59 JUMPI DUP1 PUSH4 0xCAD5B0F7 EQ PUSH2 0x33F JUMPI DUP1 PUSH4 0xE2D3F423 EQ PUSH2 0x364 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x3EB JUMPI DUP1 PUSH4 0xF8B2CB4F EQ PUSH2 0x40B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x275 JUMPI DUP1 PUSH4 0xACFB2355 EQ PUSH2 0x2A7 JUMPI DUP1 PUSH4 0xAD5C4648 EQ PUSH2 0x2FF JUMPI DUP1 PUSH4 0xB6B55F25 EQ PUSH2 0x31F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x56C5F349 GT PUSH2 0xC6 JUMPI DUP1 PUSH4 0x56C5F349 EQ PUSH2 0x20B JUMPI DUP1 PUSH4 0x61E17655 EQ PUSH2 0x238 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x258 JUMPI DUP1 PUSH4 0x861FAF5F EQ PUSH2 0x26D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x18856A2F EQ PUSH2 0xF8 JUMPI DUP1 PUSH4 0x200D2ED2 EQ PUSH2 0x1BD JUMPI DUP1 PUSH4 0x3B5EF2AD EQ PUSH2 0x1E0 JUMPI DUP1 PUSH4 0x4329DB46 EQ PUSH2 0x1F6 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x104 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0xB SLOAD PUSH1 0xC SLOAD PUSH1 0xD SLOAD PUSH1 0xE SLOAD PUSH1 0xF SLOAD PUSH1 0x10 SLOAD PUSH1 0x11 SLOAD PUSH1 0x12 SLOAD PUSH1 0x13 SLOAD PUSH1 0x14 SLOAD PUSH1 0x15 SLOAD PUSH1 0x16 SLOAD PUSH2 0x14C SWAP12 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP12 DUP2 AND SWAP11 AND SWAP9 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 PUSH1 0xFF AND SWAP1 DUP13 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP14 DUP15 AND DUP2 MSTORE SWAP12 DUP14 AND PUSH1 0x20 DUP14 ADD MSTORE SWAP10 SWAP1 SWAP12 AND SWAP9 DUP11 ADD SWAP9 SWAP1 SWAP9 MSTORE PUSH1 0x60 DUP10 ADD SWAP7 SWAP1 SWAP7 MSTORE PUSH1 0x80 DUP9 ADD SWAP5 SWAP1 SWAP5 MSTORE PUSH1 0xA0 DUP8 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0xC0 DUP7 ADD MSTORE PUSH1 0xE0 DUP6 ADD MSTORE PUSH2 0x100 DUP5 ADD MSTORE PUSH2 0x120 DUP4 ADD MSTORE ISZERO ISZERO PUSH2 0x140 DUP3 ADD MSTORE PUSH2 0x160 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH2 0x180 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1C9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1D2 PUSH2 0x433 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1B4 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1EC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1D2 PUSH1 0x18 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x209 PUSH2 0x204 CALLDATASIZE PUSH1 0x4 PUSH2 0xB7B JUMP JUMPDEST PUSH2 0x45C JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x217 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1D2 PUSH2 0x226 CALLDATASIZE PUSH1 0x4 PUSH2 0xA98 JUMP JUMPDEST PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x244 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x209 PUSH2 0x253 CALLDATASIZE PUSH1 0x4 PUSH2 0xABB JUMP JUMPDEST PUSH2 0x496 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x264 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x209 PUSH2 0x644 JUMP JUMPDEST PUSH2 0x209 PUSH2 0x6AF JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x281 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1B4 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2B3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 SLOAD PUSH1 0x5 SLOAD PUSH1 0x6 SLOAD PUSH1 0x7 SLOAD PUSH1 0x8 SLOAD PUSH1 0x9 SLOAD PUSH2 0x2D2 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 DUP7 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP7 DUP8 MSTORE PUSH1 0x20 DUP8 ADD SWAP6 SWAP1 SWAP6 MSTORE SWAP4 DUP6 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 ADD PUSH2 0x1B4 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x30B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x17 SLOAD PUSH2 0x28F SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x32B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1D2 PUSH2 0x33A CALLDATASIZE PUSH1 0x4 PUSH2 0xB7B JUMP JUMPDEST PUSH2 0x6DE JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x34B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x354 PUSH2 0x8B9 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1B4 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x370 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3BA PUSH2 0x37F CALLDATASIZE PUSH1 0x4 PUSH2 0xA98 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD SWAP3 DUP3 ADD SLOAD PUSH1 0x3 DUP4 ADD SLOAD PUSH1 0x4 SWAP1 SWAP4 ADD SLOAD SWAP2 SWAP4 SWAP3 SWAP1 SWAP2 PUSH1 0xFF DUP1 DUP3 AND SWAP2 PUSH2 0x100 SWAP1 DIV AND DUP7 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP7 DUP8 MSTORE PUSH1 0x20 DUP8 ADD SWAP6 SWAP1 SWAP6 MSTORE SWAP4 DUP6 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x60 DUP5 ADD MSTORE ISZERO ISZERO PUSH1 0x80 DUP4 ADD MSTORE ISZERO ISZERO PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 ADD PUSH2 0x1B4 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3F7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x209 PUSH2 0x406 CALLDATASIZE PUSH1 0x4 PUSH2 0xA98 JUMP JUMPDEST PUSH2 0x8CB JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x417 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1D2 PUSH2 0x426 CALLDATASIZE PUSH1 0x4 PUSH2 0xA98 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND BALANCE SWAP1 JUMP JUMPDEST PUSH1 0xF SLOAD PUSH1 0x0 SWAP1 TIMESTAMP LT ISZERO PUSH2 0x446 JUMPI POP PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH1 0x10 SLOAD TIMESTAMP GT ISZERO PUSH2 0x456 JUMPI POP PUSH1 0x2 SWAP1 JUMP JUMPDEST POP PUSH1 0x1 SWAP1 JUMP JUMPDEST CALLER PUSH2 0x8FC PUSH2 0x46A DUP4 CALLVALUE PUSH2 0xCD5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 ISZERO SWAP1 SWAP3 MUL SWAP2 PUSH1 0x0 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x492 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP JUMP JUMPDEST PUSH1 0xB DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP8 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP3 DUP4 AND OR SWAP1 SWAP3 SSTORE PUSH1 0xC DUP1 SLOAD DUP7 DUP5 AND SWAP1 DUP4 AND DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 0xD DUP1 SLOAD SWAP4 DUP7 AND SWAP4 SWAP1 SWAP3 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SSTORE PUSH1 0x40 DUP1 MLOAD PUSH4 0x313CE567 PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 MLOAD PUSH4 0x313CE567 SWAP2 PUSH1 0x4 DUP1 DUP3 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x50B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x51F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x543 SWAP2 SWAP1 PUSH2 0xB93 JUMP JUMPDEST PUSH2 0x54E SWAP1 PUSH1 0xA PUSH2 0xC0E JUMP JUMPDEST DUP2 MLOAD PUSH2 0x55A SWAP2 SWAP1 PUSH2 0xCB6 JUMP JUMPDEST PUSH1 0xE SSTORE PUSH1 0x20 DUP1 DUP3 ADD MLOAD PUSH1 0xF SSTORE PUSH1 0x40 DUP1 DUP4 ADD MLOAD PUSH1 0x10 SSTORE PUSH1 0x60 DUP4 ADD MLOAD PUSH1 0x11 SSTORE PUSH1 0xD SLOAD DUP2 MLOAD PUSH4 0x313CE567 PUSH1 0xE0 SHL DUP2 MSTORE SWAP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP3 PUSH4 0x313CE567 SWAP3 PUSH1 0x4 DUP1 DUP3 ADD SWAP4 SWAP2 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5B5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x5C9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x5ED SWAP2 SWAP1 PUSH2 0xB93 JUMP JUMPDEST PUSH2 0x5F8 SWAP1 PUSH1 0xA PUSH2 0xC0E JUMP JUMPDEST PUSH1 0x80 DUP3 ADD MLOAD PUSH2 0x607 SWAP2 SWAP1 PUSH2 0xCB6 JUMP JUMPDEST PUSH1 0x12 SSTORE PUSH1 0xA0 DUP2 ADD MLOAD PUSH1 0x13 SSTORE PUSH1 0xC0 ADD MLOAD PUSH1 0x14 SSTORE POP POP PUSH1 0xD SLOAD PUSH1 0x17 SLOAD PUSH1 0x15 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND SWAP4 SWAP1 SWAP3 AND SWAP3 SWAP1 SWAP3 EQ PUSH1 0xFF NOT SWAP1 SWAP2 AND OR SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x6A3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x6AD PUSH1 0x0 PUSH2 0x9B1 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x40 MLOAD CALLER SWAP1 SELFBALANCE DUP1 ISZERO PUSH2 0x8FC MUL SWAP2 PUSH1 0x0 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x6DB JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x6E8 PUSH2 0x433 JUMP JUMPDEST PUSH1 0x1 EQ PUSH2 0x724 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xA PUSH1 0x24 DUP3 ADD MSTORE PUSH10 0x4E4F5420414354495645 PUSH1 0xB0 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x69A JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x11 SLOAD SWAP1 SWAP2 DUP5 SWAP2 DUP3 SWAP2 SWAP1 PUSH2 0x3E8 SWAP1 DUP4 LT ISZERO PUSH2 0x783 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x10 PUSH1 0x24 DUP3 ADD MSTORE PUSH16 0x4E6F7420656E6F7567682076616C7565 PUSH1 0x80 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x69A JUMP JUMPDEST PUSH1 0x12 SLOAD DUP4 GT ISZERO PUSH2 0x7C6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xE PUSH1 0x24 DUP3 ADD MSTORE PUSH14 0x4F766572666C6F772076616C7565 PUSH1 0x90 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x69A JUMP JUMPDEST PUSH2 0x7CE PUSH2 0x8B9 JUMP JUMPDEST PUSH2 0x7FE JUMPI PUSH2 0x7FB DUP2 PUSH2 0x7F5 DUP6 PUSH2 0x7EF PUSH1 0x18 SLOAD DUP7 PUSH2 0xA03 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 PUSH2 0xA0F JUMP JUMPDEST SWAP1 PUSH2 0xA1B JUMP JUMPDEST SWAP3 POP JUMPDEST PUSH1 0x12 SLOAD PUSH1 0x0 SWAP1 PUSH2 0x80F SWAP1 DUP6 SWAP1 PUSH2 0xCD5 JUMP JUMPDEST PUSH1 0xD SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0x313CE567 PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 MLOAD SWAP3 SWAP4 POP PUSH1 0x0 SWAP3 PUSH2 0x8AC SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 PUSH4 0x313CE567 SWAP2 PUSH1 0x4 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x85B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x86F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x893 SWAP2 SWAP1 PUSH2 0xB93 JUMP JUMPDEST PUSH2 0x89E SWAP1 PUSH1 0xA PUSH2 0xC0E JUMP JUMPDEST PUSH1 0xE SLOAD PUSH2 0x7F5 SWAP1 DUP9 SWAP1 PUSH2 0xA0F JUMP JUMPDEST SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x8C6 PUSH1 0x19 CALLER PUSH2 0xA27 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x925 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x69A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x98A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x69A JUMP JUMPDEST PUSH2 0x6DB DUP2 PUSH2 0x9B1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x9A8 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0xA49 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x9A8 DUP3 DUP5 PUSH2 0xCD5 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x9A8 DUP3 DUP5 PUSH2 0xCB6 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x9A8 DUP3 DUP5 PUSH2 0xBAB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 DUP4 ADD PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD ISZERO ISZERO PUSH2 0x9A8 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 DUP4 ADD PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH2 0xA90 JUMPI POP DUP2 SLOAD PUSH1 0x1 DUP2 DUP2 ADD DUP5 SSTORE PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 KECCAK256 SWAP1 SWAP4 ADD DUP5 SWAP1 SSTORE DUP5 SLOAD DUP5 DUP3 MSTORE DUP3 DUP7 ADD SWAP1 SWAP4 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP2 SWAP1 SWAP2 SSTORE PUSH2 0x9AB JUMP JUMPDEST POP PUSH1 0x0 PUSH2 0x9AB JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xAA9 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0xAB4 DUP2 PUSH2 0xD18 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH2 0x140 DUP1 DUP7 DUP9 SUB SLT ISZERO PUSH2 0xAD2 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH2 0xADD DUP2 PUSH2 0xD18 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 DUP2 ADD CALLDATALOAD PUSH2 0xAEE DUP2 PUSH2 0xD18 JUMP JUMPDEST SWAP5 POP PUSH1 0x40 DUP8 ADD CALLDATALOAD PUSH2 0xAFE DUP2 PUSH2 0xD18 JUMP JUMPDEST SWAP4 POP PUSH1 0x7F DUP8 ADD DUP9 SGT PUSH2 0xB0E JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0xE0 DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0xB31 JUMPI PUSH2 0xB31 PUSH2 0xD02 JUMP JUMPDEST PUSH1 0x40 MSTORE DUP1 PUSH1 0x60 DUP10 ADD DUP5 DUP11 ADD DUP12 LT ISZERO PUSH2 0xB47 JUMPI DUP6 DUP7 REVERT JUMPDEST DUP6 SWAP5 POP JUMPDEST PUSH1 0x7 DUP6 LT ISZERO PUSH2 0xB6A JUMPI DUP1 CALLDATALOAD DUP3 MSTORE PUSH1 0x1 SWAP5 SWAP1 SWAP5 ADD SWAP4 SWAP1 DUP4 ADD SWAP1 DUP4 ADD PUSH2 0xB4B JUMP JUMPDEST POP POP DUP1 SWAP4 POP POP POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xB8C JUMPI DUP1 DUP2 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xBA4 JUMPI DUP1 DUP2 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0xBC6 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 DUP2 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 JUMPDEST DUP1 DUP6 GT ISZERO PUSH2 0xC06 JUMPI DUP2 PUSH1 0x0 NOT DIV DUP3 GT ISZERO PUSH2 0xBEC JUMPI PUSH2 0xBEC PUSH2 0xCEC JUMP JUMPDEST DUP1 DUP6 AND ISZERO PUSH2 0xBF9 JUMPI SWAP2 DUP2 MUL SWAP2 JUMPDEST SWAP4 DUP5 SHR SWAP4 SWAP1 DUP1 MUL SWAP1 PUSH2 0xBD0 JUMP JUMPDEST POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x9A8 DUP4 DUP4 PUSH1 0x0 DUP3 PUSH2 0xC24 JUMPI POP PUSH1 0x1 PUSH2 0x9AB JUMP JUMPDEST DUP2 PUSH2 0xC31 JUMPI POP PUSH1 0x0 PUSH2 0x9AB JUMP JUMPDEST DUP2 PUSH1 0x1 DUP2 EQ PUSH2 0xC47 JUMPI PUSH1 0x2 DUP2 EQ PUSH2 0xC51 JUMPI PUSH2 0xC6D JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP PUSH2 0x9AB JUMP JUMPDEST PUSH1 0xFF DUP5 GT ISZERO PUSH2 0xC62 JUMPI PUSH2 0xC62 PUSH2 0xCEC JUMP JUMPDEST POP POP PUSH1 0x1 DUP3 SHL PUSH2 0x9AB JUMP JUMPDEST POP PUSH1 0x20 DUP4 LT PUSH2 0x133 DUP4 LT AND PUSH1 0x4E DUP5 LT PUSH1 0xB DUP5 LT AND OR ISZERO PUSH2 0xC90 JUMPI POP DUP2 DUP2 EXP PUSH2 0x9AB JUMP JUMPDEST PUSH2 0xC9A DUP4 DUP4 PUSH2 0xBCB JUMP JUMPDEST DUP1 PUSH1 0x0 NOT DIV DUP3 GT ISZERO PUSH2 0xCAE JUMPI PUSH2 0xCAE PUSH2 0xCEC JUMP JUMPDEST MUL SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0xCD0 JUMPI PUSH2 0xCD0 PUSH2 0xCEC JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0xCE7 JUMPI PUSH2 0xCE7 PUSH2 0xCEC JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x6DB JUMPI PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xBE NOT 0xEA 0x4A 0xBA INVALID PC 0xC 0x5E EQ LOG2 0xD4 PUSH17 0xC348A0FB109091231220E63F69A27DE01F KECCAK256 PUSH24 0x64736F6C6343000804003300000000000000000000000000 ",
							"sourceMap": "338:4519:3:-:0;;;1734:1:7;1845:7;:22;942:32:6;736:10:4;942:18:6;:32::i;:::-;1903:4:3;:56;;1916:42;-1:-1:-1;;;;;;1903:56:3;;;;;;1970:54;:6;1981:42;1970:10;;;;;;;:54;;:::i;:::-;;2035;2046:42;2035:6;:10;;;;;;:54;;;;:::i;:::-;-1:-1:-1;2112:2:3;2100:9;:14;338:4519;;2333:191:6;2426:6;;;-1:-1:-1;;;;;2443:17:6;;;-1:-1:-1;;;;;;2443:17:6;;;;;;;2476:40;;2426:6;;;2443:17;2426:6;;2476:40;;2407:16;;2476:40;2333:191;;:::o;8259:152:5:-;8329:4;8353:50;8358:3;-1:-1:-1;;;;;8378:23:5;;8353:4;:50::i;:::-;8346:57;;8259:152;;;;;:::o;2174:414::-;2237:4;4367:19;;;:12;;;:19;;;;;;2254:327;;-1:-1:-1;2297:23:5;;;;;;;;:11;:23;;;;;;;;;;;;;2480:18;;2458:19;;;:12;;;:19;;;;;;:40;;;;2513:11;;2254:327;-1:-1:-1;2564:5:5;2557:12;;338:4519:3;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:9059:10",
										"statements": [
											{
												"nodeType": "YulBlock",
												"src": "6:3:10",
												"statements": []
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "84:187:10",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "130:26:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "139:6:10"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "147:6:10"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "132:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "132:22:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "132:22:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "105:7:10"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "114:9:10"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "101:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "101:23:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "126:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "97:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "97:32:10"
															},
															"nodeType": "YulIf",
															"src": "94:2:10"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "165:36:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "191:9:10"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "178:12:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "178:23:10"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "169:5:10",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "235:5:10"
																	}
																],
																"functionName": {
																	"name": "validator_revert_address",
																	"nodeType": "YulIdentifier",
																	"src": "210:24:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "210:31:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "210:31:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "250:15:10",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "260:5:10"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "250:6:10"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "50:9:10",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "61:7:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "73:6:10",
														"type": ""
													}
												],
												"src": "14:257:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "454:1118:10",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "464:13:10",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "474:3:10",
																"type": "",
																"value": "320"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "468:2:10",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "522:26:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value1",
																					"nodeType": "YulIdentifier",
																					"src": "531:6:10"
																				},
																				{
																					"name": "value1",
																					"nodeType": "YulIdentifier",
																					"src": "539:6:10"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "524:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "524:22:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "524:22:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "497:7:10"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "506:9:10"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "493:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "493:23:10"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "518:2:10"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "489:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "489:32:10"
															},
															"nodeType": "YulIf",
															"src": "486:2:10"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "557:36:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "583:9:10"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "570:12:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "570:23:10"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "561:5:10",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "627:5:10"
																	}
																],
																"functionName": {
																	"name": "validator_revert_address",
																	"nodeType": "YulIdentifier",
																	"src": "602:24:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "602:31:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "602:31:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "642:15:10",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "652:5:10"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "642:6:10"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "666:12:10",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "676:2:10",
																"type": "",
																"value": "32"
															},
															"variables": [
																{
																	"name": "_2",
																	"nodeType": "YulTypedName",
																	"src": "670:2:10",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "687:47:10",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "719:9:10"
																			},
																			{
																				"name": "_2",
																				"nodeType": "YulIdentifier",
																				"src": "730:2:10"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "715:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "715:18:10"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "702:12:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "702:32:10"
															},
															"variables": [
																{
																	"name": "value_1",
																	"nodeType": "YulTypedName",
																	"src": "691:7:10",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value_1",
																		"nodeType": "YulIdentifier",
																		"src": "768:7:10"
																	}
																],
																"functionName": {
																	"name": "validator_revert_address",
																	"nodeType": "YulIdentifier",
																	"src": "743:24:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "743:33:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "743:33:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "785:17:10",
															"value": {
																"name": "value_1",
																"nodeType": "YulIdentifier",
																"src": "795:7:10"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "785:6:10"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "811:47:10",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "843:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "854:2:10",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "839:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "839:18:10"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "826:12:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "826:32:10"
															},
															"variables": [
																{
																	"name": "value_2",
																	"nodeType": "YulTypedName",
																	"src": "815:7:10",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value_2",
																		"nodeType": "YulIdentifier",
																		"src": "892:7:10"
																	}
																],
																"functionName": {
																	"name": "validator_revert_address",
																	"nodeType": "YulIdentifier",
																	"src": "867:24:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "867:33:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "867:33:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "909:17:10",
															"value": {
																"name": "value_2",
																"nodeType": "YulIdentifier",
																"src": "919:7:10"
															},
															"variableNames": [
																{
																	"name": "value2",
																	"nodeType": "YulIdentifier",
																	"src": "909:6:10"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "980:26:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value3",
																					"nodeType": "YulIdentifier",
																					"src": "989:6:10"
																				},
																				{
																					"name": "value3",
																					"nodeType": "YulIdentifier",
																					"src": "997:6:10"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "982:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "982:22:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "982:22:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "953:9:10"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "964:3:10",
																						"type": "",
																						"value": "127"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "949:3:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "949:19:10"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "970:7:10"
																			}
																		],
																		"functionName": {
																			"name": "slt",
																			"nodeType": "YulIdentifier",
																			"src": "945:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "945:33:10"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "938:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "938:41:10"
															},
															"nodeType": "YulIf",
															"src": "935:2:10"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1015:23:10",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1035:2:10",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "1029:5:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1029:9:10"
															},
															"variables": [
																{
																	"name": "memPtr",
																	"nodeType": "YulTypedName",
																	"src": "1019:6:10",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1047:34:10",
															"value": {
																"arguments": [
																	{
																		"name": "memPtr",
																		"nodeType": "YulIdentifier",
																		"src": "1069:6:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1077:3:10",
																		"type": "",
																		"value": "224"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1065:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1065:16:10"
															},
															"variables": [
																{
																	"name": "newFreePtr",
																	"nodeType": "YulTypedName",
																	"src": "1051:10:10",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1156:22:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x41",
																				"nodeType": "YulIdentifier",
																				"src": "1158:16:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1158:18:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1158:18:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "newFreePtr",
																				"nodeType": "YulIdentifier",
																				"src": "1099:10:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1111:18:10",
																				"type": "",
																				"value": "0xffffffffffffffff"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "1096:2:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1096:34:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "newFreePtr",
																				"nodeType": "YulIdentifier",
																				"src": "1135:10:10"
																			},
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "1147:6:10"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nodeType": "YulIdentifier",
																			"src": "1132:2:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1132:22:10"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "1093:2:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1093:62:10"
															},
															"nodeType": "YulIf",
															"src": "1090:2:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1194:2:10",
																		"type": "",
																		"value": "64"
																	},
																	{
																		"name": "newFreePtr",
																		"nodeType": "YulIdentifier",
																		"src": "1198:10:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1187:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1187:22:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1187:22:10"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1218:17:10",
															"value": {
																"name": "memPtr",
																"nodeType": "YulIdentifier",
																"src": "1229:6:10"
															},
															"variables": [
																{
																	"name": "dst",
																	"nodeType": "YulTypedName",
																	"src": "1222:3:10",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1244:29:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1259:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1270:2:10",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1255:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1255:18:10"
															},
															"variables": [
																{
																	"name": "src",
																	"nodeType": "YulTypedName",
																	"src": "1248:3:10",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1317:26:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value3",
																					"nodeType": "YulIdentifier",
																					"src": "1326:6:10"
																				},
																				{
																					"name": "value3",
																					"nodeType": "YulIdentifier",
																					"src": "1334:6:10"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1319:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1319:22:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1319:22:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1292:9:10"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "1303:2:10"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1288:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1288:18:10"
																	},
																	{
																		"name": "dataEnd",
																		"nodeType": "YulIdentifier",
																		"src": "1308:7:10"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "1285:2:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1285:31:10"
															},
															"nodeType": "YulIf",
															"src": "1282:2:10"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1352:15:10",
															"value": {
																"name": "value3",
																"nodeType": "YulIdentifier",
																"src": "1361:6:10"
															},
															"variables": [
																{
																	"name": "i",
																	"nodeType": "YulTypedName",
																	"src": "1356:1:10",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1423:118:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "dst",
																					"nodeType": "YulIdentifier",
																					"src": "1444:3:10"
																				},
																				{
																					"arguments": [
																						{
																							"name": "src",
																							"nodeType": "YulIdentifier",
																							"src": "1462:3:10"
																						}
																					],
																					"functionName": {
																						"name": "calldataload",
																						"nodeType": "YulIdentifier",
																						"src": "1449:12:10"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "1449:17:10"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "1437:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1437:30:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1437:30:10"
																	},
																	{
																		"nodeType": "YulAssignment",
																		"src": "1480:19:10",
																		"value": {
																			"arguments": [
																				{
																					"name": "dst",
																					"nodeType": "YulIdentifier",
																					"src": "1491:3:10"
																				},
																				{
																					"name": "_2",
																					"nodeType": "YulIdentifier",
																					"src": "1496:2:10"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "1487:3:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1487:12:10"
																		},
																		"variableNames": [
																			{
																				"name": "dst",
																				"nodeType": "YulIdentifier",
																				"src": "1480:3:10"
																			}
																		]
																	},
																	{
																		"nodeType": "YulAssignment",
																		"src": "1512:19:10",
																		"value": {
																			"arguments": [
																				{
																					"name": "src",
																					"nodeType": "YulIdentifier",
																					"src": "1523:3:10"
																				},
																				{
																					"name": "_2",
																					"nodeType": "YulIdentifier",
																					"src": "1528:2:10"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "1519:3:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1519:12:10"
																		},
																		"variableNames": [
																			{
																				"name": "src",
																				"nodeType": "YulIdentifier",
																				"src": "1512:3:10"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "1387:1:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1390:4:10",
																		"type": "",
																		"value": "0x07"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "1384:2:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1384:11:10"
															},
															"nodeType": "YulForLoop",
															"post": {
																"nodeType": "YulBlock",
																"src": "1396:18:10",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "1398:14:10",
																		"value": {
																			"arguments": [
																				{
																					"name": "i",
																					"nodeType": "YulIdentifier",
																					"src": "1407:1:10"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1410:1:10",
																					"type": "",
																					"value": "1"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "1403:3:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1403:9:10"
																		},
																		"variableNames": [
																			{
																				"name": "i",
																				"nodeType": "YulIdentifier",
																				"src": "1398:1:10"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nodeType": "YulBlock",
																"src": "1380:3:10",
																"statements": []
															},
															"src": "1376:165:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1550:16:10",
															"value": {
																"name": "memPtr",
																"nodeType": "YulIdentifier",
																"src": "1560:6:10"
															},
															"variableNames": [
																{
																	"name": "value3",
																	"nodeType": "YulIdentifier",
																	"src": "1550:6:10"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address_payablet_contract$_ERC20_$585t_contract$_ERC20_$585t_array$_t_uint256_$7_memory_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "396:9:10",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "407:7:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "419:6:10",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "427:6:10",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "435:6:10",
														"type": ""
													},
													{
														"name": "value3",
														"nodeType": "YulTypedName",
														"src": "443:6:10",
														"type": ""
													}
												],
												"src": "276:1296:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1647:120:10",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1693:26:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "1702:6:10"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "1710:6:10"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1695:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1695:22:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1695:22:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1668:7:10"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1677:9:10"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1664:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1664:23:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1689:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1660:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1660:32:10"
															},
															"nodeType": "YulIf",
															"src": "1657:2:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1728:33:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1751:9:10"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1738:12:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1738:23:10"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "1728:6:10"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1613:9:10",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1624:7:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1636:6:10",
														"type": ""
													}
												],
												"src": "1577:190:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1853:113:10",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1899:26:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "1908:6:10"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "1916:6:10"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1901:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1901:22:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1901:22:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1874:7:10"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1883:9:10"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1870:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1870:23:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1895:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1866:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1866:32:10"
															},
															"nodeType": "YulIf",
															"src": "1863:2:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1934:26:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1950:9:10"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "1944:5:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1944:16:10"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "1934:6:10"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1819:9:10",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1830:7:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1842:6:10",
														"type": ""
													}
												],
												"src": "1772:194:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2072:102:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2082:26:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2094:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2105:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2090:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2090:18:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "2082:4:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2124:9:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "2139:6:10"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "2155:3:10",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "2160:1:10",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nodeType": "YulIdentifier",
																							"src": "2151:3:10"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "2151:11:10"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "2164:1:10",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nodeType": "YulIdentifier",
																					"src": "2147:3:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2147:19:10"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "2135:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2135:32:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2117:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2117:51:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2117:51:10"
														}
													]
												},
												"name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2041:9:10",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2052:6:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "2063:4:10",
														"type": ""
													}
												],
												"src": "1971:203:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2626:641:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2636:27:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2648:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2659:3:10",
																		"type": "",
																		"value": "384"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2644:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2644:19:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "2636:4:10"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "2672:29:10",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2690:3:10",
																				"type": "",
																				"value": "160"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2695:1:10",
																				"type": "",
																				"value": "1"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "2686:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2686:11:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2699:1:10",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "2682:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2682:19:10"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "2676:2:10",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2717:9:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "2732:6:10"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "2740:2:10"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "2728:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2728:15:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2710:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2710:34:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2710:34:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2764:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2775:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2760:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2760:18:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value1",
																				"nodeType": "YulIdentifier",
																				"src": "2784:6:10"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "2792:2:10"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "2780:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2780:15:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2753:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2753:43:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2753:43:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2816:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2827:2:10",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2812:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2812:18:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value2",
																				"nodeType": "YulIdentifier",
																				"src": "2836:6:10"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "2844:2:10"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "2832:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2832:15:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2805:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2805:43:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2805:43:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2868:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2879:2:10",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2864:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2864:18:10"
																	},
																	{
																		"name": "value3",
																		"nodeType": "YulIdentifier",
																		"src": "2884:6:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2857:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2857:34:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2857:34:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2911:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2922:3:10",
																				"type": "",
																				"value": "128"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2907:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2907:19:10"
																	},
																	{
																		"name": "value4",
																		"nodeType": "YulIdentifier",
																		"src": "2928:6:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2900:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2900:35:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2900:35:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2955:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2966:3:10",
																				"type": "",
																				"value": "160"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2951:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2951:19:10"
																	},
																	{
																		"name": "value5",
																		"nodeType": "YulIdentifier",
																		"src": "2972:6:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2944:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2944:35:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2944:35:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2999:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3010:3:10",
																				"type": "",
																				"value": "192"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2995:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2995:19:10"
																	},
																	{
																		"name": "value6",
																		"nodeType": "YulIdentifier",
																		"src": "3016:6:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2988:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2988:35:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2988:35:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3043:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3054:3:10",
																				"type": "",
																				"value": "224"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3039:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3039:19:10"
																	},
																	{
																		"name": "value7",
																		"nodeType": "YulIdentifier",
																		"src": "3060:6:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3032:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3032:35:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3032:35:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3087:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3098:3:10",
																				"type": "",
																				"value": "256"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3083:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3083:19:10"
																	},
																	{
																		"name": "value8",
																		"nodeType": "YulIdentifier",
																		"src": "3104:6:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3076:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3076:35:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3076:35:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3131:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3142:3:10",
																				"type": "",
																				"value": "288"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3127:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3127:19:10"
																	},
																	{
																		"name": "value9",
																		"nodeType": "YulIdentifier",
																		"src": "3148:6:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3120:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3120:35:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3120:35:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3175:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3186:3:10",
																				"type": "",
																				"value": "320"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3171:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3171:19:10"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value10",
																						"nodeType": "YulIdentifier",
																						"src": "3206:7:10"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "3199:6:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3199:15:10"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "3192:6:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3192:23:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3164:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3164:52:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3164:52:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3236:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3247:3:10",
																				"type": "",
																				"value": "352"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3232:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3232:19:10"
																	},
																	{
																		"name": "value11",
																		"nodeType": "YulIdentifier",
																		"src": "3253:7:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3225:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3225:36:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3225:36:10"
														}
													]
												},
												"name": "abi_encode_tuple_t_address_payable_t_contract$_ERC20_$585_t_contract$_ERC20_$585_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256_t_bool_t_uint256__to_t_address_payable_t_address_t_address_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256_t_bool_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2505:9:10",
														"type": ""
													},
													{
														"name": "value11",
														"nodeType": "YulTypedName",
														"src": "2516:7:10",
														"type": ""
													},
													{
														"name": "value10",
														"nodeType": "YulTypedName",
														"src": "2525:7:10",
														"type": ""
													},
													{
														"name": "value9",
														"nodeType": "YulTypedName",
														"src": "2534:6:10",
														"type": ""
													},
													{
														"name": "value8",
														"nodeType": "YulTypedName",
														"src": "2542:6:10",
														"type": ""
													},
													{
														"name": "value7",
														"nodeType": "YulTypedName",
														"src": "2550:6:10",
														"type": ""
													},
													{
														"name": "value6",
														"nodeType": "YulTypedName",
														"src": "2558:6:10",
														"type": ""
													},
													{
														"name": "value5",
														"nodeType": "YulTypedName",
														"src": "2566:6:10",
														"type": ""
													},
													{
														"name": "value4",
														"nodeType": "YulTypedName",
														"src": "2574:6:10",
														"type": ""
													},
													{
														"name": "value3",
														"nodeType": "YulTypedName",
														"src": "2582:6:10",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "2590:6:10",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "2598:6:10",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2606:6:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "2617:4:10",
														"type": ""
													}
												],
												"src": "2179:1088:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3367:92:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3377:26:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3389:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3400:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3385:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3385:18:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "3377:4:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3419:9:10"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value0",
																						"nodeType": "YulIdentifier",
																						"src": "3444:6:10"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "3437:6:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3437:14:10"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "3430:6:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3430:22:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3412:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3412:41:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3412:41:10"
														}
													]
												},
												"name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3336:9:10",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "3347:6:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "3358:4:10",
														"type": ""
													}
												],
												"src": "3272:187:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3579:102:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3589:26:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3601:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3612:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3597:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3597:18:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "3589:4:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3631:9:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "3646:6:10"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "3662:3:10",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "3667:1:10",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nodeType": "YulIdentifier",
																							"src": "3658:3:10"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "3658:11:10"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "3671:1:10",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nodeType": "YulIdentifier",
																					"src": "3654:3:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3654:19:10"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "3642:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3642:32:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3624:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3624:51:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3624:51:10"
														}
													]
												},
												"name": "abi_encode_tuple_t_contract$_IERC20_$663__to_t_address__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3548:9:10",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "3559:6:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "3570:4:10",
														"type": ""
													}
												],
												"src": "3464:217:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3860:228:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3877:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3888:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3870:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3870:21:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3870:21:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3911:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3922:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3907:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3907:18:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3927:2:10",
																		"type": "",
																		"value": "38"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3900:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3900:30:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3900:30:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3950:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3961:2:10",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3946:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3946:18:10"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "3966:34:10",
																		"type": "",
																		"value": "Ownable: new owner is the zero a"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3939:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3939:62:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3939:62:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4021:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4032:2:10",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4017:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4017:18:10"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "4037:8:10",
																		"type": "",
																		"value": "ddress"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4010:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4010:36:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4010:36:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4055:27:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4067:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4078:3:10",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4063:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4063:19:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "4055:4:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3837:9:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "3851:4:10",
														"type": ""
													}
												],
												"src": "3686:402:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4267:164:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4284:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4295:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4277:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4277:21:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4277:21:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4318:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4329:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4314:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4314:18:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4334:2:10",
																		"type": "",
																		"value": "14"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4307:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4307:30:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4307:30:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4357:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4368:2:10",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4353:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4353:18:10"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "4373:16:10",
																		"type": "",
																		"value": "Overflow value"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4346:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4346:44:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4346:44:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4399:26:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4411:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4422:2:10",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4407:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4407:18:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "4399:4:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_48cc793e3ea877d6bf034b11f4c6d0d583dd24a0f1374daf495701b65f42f81c__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4244:9:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "4258:4:10",
														"type": ""
													}
												],
												"src": "4093:338:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4610:160:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4627:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4638:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4620:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4620:21:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4620:21:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4661:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4672:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4657:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4657:18:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4677:2:10",
																		"type": "",
																		"value": "10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4650:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4650:30:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4650:30:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4700:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4711:2:10",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4696:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4696:18:10"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "4716:12:10",
																		"type": "",
																		"value": "NOT ACTIVE"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4689:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4689:40:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4689:40:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4738:26:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4750:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4761:2:10",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4746:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4746:18:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "4738:4:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_5d6d122126ec0f9651beafbd0f488ecfebdba58f580ffa0510b0c9420d00f3cd__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4587:9:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "4601:4:10",
														"type": ""
													}
												],
												"src": "4436:334:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4949:166:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4966:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4977:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4959:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4959:21:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4959:21:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5000:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5011:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4996:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4996:18:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5016:2:10",
																		"type": "",
																		"value": "16"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4989:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4989:30:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4989:30:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5039:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5050:2:10",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5035:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5035:18:10"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "5055:18:10",
																		"type": "",
																		"value": "Not enough value"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5028:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "5028:46:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5028:46:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "5083:26:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5095:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5106:2:10",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5091:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "5091:18:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "5083:4:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_8254a19c2218e87bd65e7d451e5bbd6df57ba9f73035118b8f47be7b5659ddde__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4926:9:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "4940:4:10",
														"type": ""
													}
												],
												"src": "4775:340:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5294:182:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5311:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5322:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5304:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "5304:21:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5304:21:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5345:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5356:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5341:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5341:18:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5361:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5334:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "5334:30:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5334:30:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5384:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5395:2:10",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5380:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5380:18:10"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "5400:34:10",
																		"type": "",
																		"value": "Ownable: caller is not the owner"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5373:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "5373:62:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5373:62:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "5444:26:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5456:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5467:2:10",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5452:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "5452:18:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "5444:4:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5271:9:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "5285:4:10",
														"type": ""
													}
												],
												"src": "5120:356:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5582:76:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "5592:26:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5604:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5615:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5600:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "5600:18:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "5592:4:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5634:9:10"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "5645:6:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5627:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "5627:25:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5627:25:10"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5551:9:10",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "5562:6:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "5573:4:10",
														"type": ""
													}
												],
												"src": "5481:177:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5892:326:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "5902:27:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5914:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5925:3:10",
																		"type": "",
																		"value": "192"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5910:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "5910:19:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "5902:4:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5945:9:10"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "5956:6:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5938:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "5938:25:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5938:25:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5983:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5994:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5979:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5979:18:10"
																	},
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "5999:6:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5972:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "5972:34:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5972:34:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6026:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6037:2:10",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6022:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6022:18:10"
																	},
																	{
																		"name": "value2",
																		"nodeType": "YulIdentifier",
																		"src": "6042:6:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6015:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "6015:34:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6015:34:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6069:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6080:2:10",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6065:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6065:18:10"
																	},
																	{
																		"name": "value3",
																		"nodeType": "YulIdentifier",
																		"src": "6085:6:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6058:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "6058:34:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6058:34:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6112:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6123:3:10",
																				"type": "",
																				"value": "128"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6108:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6108:19:10"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value4",
																						"nodeType": "YulIdentifier",
																						"src": "6143:6:10"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "6136:6:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "6136:14:10"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "6129:6:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6129:22:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6101:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "6101:51:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6101:51:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6172:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6183:3:10",
																				"type": "",
																				"value": "160"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6168:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6168:19:10"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value5",
																						"nodeType": "YulIdentifier",
																						"src": "6203:6:10"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "6196:6:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "6196:14:10"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "6189:6:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6189:22:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6161:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "6161:51:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6161:51:10"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256_t_uint256_t_uint256_t_uint256_t_bool_t_bool__to_t_uint256_t_uint256_t_uint256_t_uint256_t_bool_t_bool__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5821:9:10",
														"type": ""
													},
													{
														"name": "value5",
														"nodeType": "YulTypedName",
														"src": "5832:6:10",
														"type": ""
													},
													{
														"name": "value4",
														"nodeType": "YulTypedName",
														"src": "5840:6:10",
														"type": ""
													},
													{
														"name": "value3",
														"nodeType": "YulTypedName",
														"src": "5848:6:10",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "5856:6:10",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "5864:6:10",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "5872:6:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "5883:4:10",
														"type": ""
													}
												],
												"src": "5663:555:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6464:294:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "6474:27:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6486:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6497:3:10",
																		"type": "",
																		"value": "192"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "6482:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "6482:19:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "6474:4:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6517:9:10"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "6528:6:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6510:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "6510:25:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6510:25:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6555:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6566:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6551:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6551:18:10"
																	},
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "6571:6:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6544:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "6544:34:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6544:34:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6598:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6609:2:10",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6594:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6594:18:10"
																	},
																	{
																		"name": "value2",
																		"nodeType": "YulIdentifier",
																		"src": "6614:6:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6587:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "6587:34:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6587:34:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6641:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6652:2:10",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6637:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6637:18:10"
																	},
																	{
																		"name": "value3",
																		"nodeType": "YulIdentifier",
																		"src": "6657:6:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6630:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "6630:34:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6630:34:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6684:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6695:3:10",
																				"type": "",
																				"value": "128"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6680:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6680:19:10"
																	},
																	{
																		"name": "value4",
																		"nodeType": "YulIdentifier",
																		"src": "6701:6:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6673:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "6673:35:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6673:35:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6728:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6739:3:10",
																				"type": "",
																				"value": "160"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6724:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6724:19:10"
																	},
																	{
																		"name": "value5",
																		"nodeType": "YulIdentifier",
																		"src": "6745:6:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6717:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "6717:35:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6717:35:10"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "6393:9:10",
														"type": ""
													},
													{
														"name": "value5",
														"nodeType": "YulTypedName",
														"src": "6404:6:10",
														"type": ""
													},
													{
														"name": "value4",
														"nodeType": "YulTypedName",
														"src": "6412:6:10",
														"type": ""
													},
													{
														"name": "value3",
														"nodeType": "YulTypedName",
														"src": "6420:6:10",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "6428:6:10",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "6436:6:10",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "6444:6:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "6455:4:10",
														"type": ""
													}
												],
												"src": "6223:535:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6809:171:10",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "6840:111:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "r",
																					"nodeType": "YulIdentifier",
																					"src": "6861:1:10"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "6868:3:10",
																							"type": "",
																							"value": "224"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "6873:10:10",
																							"type": "",
																							"value": "0x4e487b71"
																						}
																					],
																					"functionName": {
																						"name": "shl",
																						"nodeType": "YulIdentifier",
																						"src": "6864:3:10"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "6864:20:10"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "6854:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "6854:31:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "6854:31:10"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "6905:1:10",
																					"type": "",
																					"value": "4"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "6908:4:10",
																					"type": "",
																					"value": "0x12"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "6898:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "6898:15:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "6898:15:10"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "r",
																					"nodeType": "YulIdentifier",
																					"src": "6933:1:10"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "6936:4:10",
																					"type": "",
																					"value": "0x24"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "6926:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "6926:15:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "6926:15:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "6829:1:10"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "6822:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "6822:9:10"
															},
															"nodeType": "YulIf",
															"src": "6819:2:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "6960:14:10",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "6969:1:10"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "6972:1:10"
																	}
																],
																"functionName": {
																	"name": "div",
																	"nodeType": "YulIdentifier",
																	"src": "6965:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "6965:9:10"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "6960:1:10"
																}
															]
														}
													]
												},
												"name": "checked_div_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "6794:1:10",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "6797:1:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "r",
														"nodeType": "YulTypedName",
														"src": "6803:1:10",
														"type": ""
													}
												],
												"src": "6763:217:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7049:358:10",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "7059:16:10",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "7074:1:10",
																"type": "",
																"value": "1"
															},
															"variables": [
																{
																	"name": "power_1",
																	"nodeType": "YulTypedName",
																	"src": "7063:7:10",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "7084:16:10",
															"value": {
																"name": "power_1",
																"nodeType": "YulIdentifier",
																"src": "7093:7:10"
															},
															"variableNames": [
																{
																	"name": "power",
																	"nodeType": "YulIdentifier",
																	"src": "7084:5:10"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "7109:13:10",
															"value": {
																"name": "_base",
																"nodeType": "YulIdentifier",
																"src": "7117:5:10"
															},
															"variableNames": [
																{
																	"name": "base",
																	"nodeType": "YulIdentifier",
																	"src": "7109:4:10"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "7173:228:10",
																"statements": [
																	{
																		"body": {
																			"nodeType": "YulBlock",
																			"src": "7218:22:10",
																			"statements": [
																				{
																					"expression": {
																						"arguments": [],
																						"functionName": {
																							"name": "panic_error_0x11",
																							"nodeType": "YulIdentifier",
																							"src": "7220:16:10"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "7220:18:10"
																					},
																					"nodeType": "YulExpressionStatement",
																					"src": "7220:18:10"
																				}
																			]
																		},
																		"condition": {
																			"arguments": [
																				{
																					"name": "base",
																					"nodeType": "YulIdentifier",
																					"src": "7193:4:10"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"kind": "number",
																									"nodeType": "YulLiteral",
																									"src": "7207:1:10",
																									"type": "",
																									"value": "0"
																								}
																							],
																							"functionName": {
																								"name": "not",
																								"nodeType": "YulIdentifier",
																								"src": "7203:3:10"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "7203:6:10"
																						},
																						{
																							"name": "base",
																							"nodeType": "YulIdentifier",
																							"src": "7211:4:10"
																						}
																					],
																					"functionName": {
																						"name": "div",
																						"nodeType": "YulIdentifier",
																						"src": "7199:3:10"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "7199:17:10"
																				}
																			],
																			"functionName": {
																				"name": "gt",
																				"nodeType": "YulIdentifier",
																				"src": "7190:2:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "7190:27:10"
																		},
																		"nodeType": "YulIf",
																		"src": "7187:2:10"
																	},
																	{
																		"body": {
																			"nodeType": "YulBlock",
																			"src": "7279:29:10",
																			"statements": [
																				{
																					"nodeType": "YulAssignment",
																					"src": "7281:25:10",
																					"value": {
																						"arguments": [
																							{
																								"name": "power",
																								"nodeType": "YulIdentifier",
																								"src": "7294:5:10"
																							},
																							{
																								"name": "base",
																								"nodeType": "YulIdentifier",
																								"src": "7301:4:10"
																							}
																						],
																						"functionName": {
																							"name": "mul",
																							"nodeType": "YulIdentifier",
																							"src": "7290:3:10"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "7290:16:10"
																					},
																					"variableNames": [
																						{
																							"name": "power",
																							"nodeType": "YulIdentifier",
																							"src": "7281:5:10"
																						}
																					]
																				}
																			]
																		},
																		"condition": {
																			"arguments": [
																				{
																					"name": "exponent",
																					"nodeType": "YulIdentifier",
																					"src": "7260:8:10"
																				},
																				{
																					"name": "power_1",
																					"nodeType": "YulIdentifier",
																					"src": "7270:7:10"
																				}
																			],
																			"functionName": {
																				"name": "and",
																				"nodeType": "YulIdentifier",
																				"src": "7256:3:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "7256:22:10"
																		},
																		"nodeType": "YulIf",
																		"src": "7253:2:10"
																	},
																	{
																		"nodeType": "YulAssignment",
																		"src": "7321:23:10",
																		"value": {
																			"arguments": [
																				{
																					"name": "base",
																					"nodeType": "YulIdentifier",
																					"src": "7333:4:10"
																				},
																				{
																					"name": "base",
																					"nodeType": "YulIdentifier",
																					"src": "7339:4:10"
																				}
																			],
																			"functionName": {
																				"name": "mul",
																				"nodeType": "YulIdentifier",
																				"src": "7329:3:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "7329:15:10"
																		},
																		"variableNames": [
																			{
																				"name": "base",
																				"nodeType": "YulIdentifier",
																				"src": "7321:4:10"
																			}
																		]
																	},
																	{
																		"nodeType": "YulAssignment",
																		"src": "7357:34:10",
																		"value": {
																			"arguments": [
																				{
																					"name": "power_1",
																					"nodeType": "YulIdentifier",
																					"src": "7373:7:10"
																				},
																				{
																					"name": "exponent",
																					"nodeType": "YulIdentifier",
																					"src": "7382:8:10"
																				}
																			],
																			"functionName": {
																				"name": "shr",
																				"nodeType": "YulIdentifier",
																				"src": "7369:3:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "7369:22:10"
																		},
																		"variableNames": [
																			{
																				"name": "exponent",
																				"nodeType": "YulIdentifier",
																				"src": "7357:8:10"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "exponent",
																		"nodeType": "YulIdentifier",
																		"src": "7142:8:10"
																	},
																	{
																		"name": "power_1",
																		"nodeType": "YulIdentifier",
																		"src": "7152:7:10"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "7139:2:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "7139:21:10"
															},
															"nodeType": "YulForLoop",
															"post": {
																"nodeType": "YulBlock",
																"src": "7161:3:10",
																"statements": []
															},
															"pre": {
																"nodeType": "YulBlock",
																"src": "7135:3:10",
																"statements": []
															},
															"src": "7131:270:10"
														}
													]
												},
												"name": "checked_exp_helper",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "_base",
														"nodeType": "YulTypedName",
														"src": "7013:5:10",
														"type": ""
													},
													{
														"name": "exponent",
														"nodeType": "YulTypedName",
														"src": "7020:8:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "power",
														"nodeType": "YulTypedName",
														"src": "7033:5:10",
														"type": ""
													},
													{
														"name": "base",
														"nodeType": "YulTypedName",
														"src": "7040:4:10",
														"type": ""
													}
												],
												"src": "6985:422:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7482:61:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "7492:45:10",
															"value": {
																"arguments": [
																	{
																		"name": "base",
																		"nodeType": "YulIdentifier",
																		"src": "7522:4:10"
																	},
																	{
																		"name": "exponent",
																		"nodeType": "YulIdentifier",
																		"src": "7528:8:10"
																	}
																],
																"functionName": {
																	"name": "checked_exp_unsigned",
																	"nodeType": "YulIdentifier",
																	"src": "7501:20:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "7501:36:10"
															},
															"variableNames": [
																{
																	"name": "power",
																	"nodeType": "YulIdentifier",
																	"src": "7492:5:10"
																}
															]
														}
													]
												},
												"name": "checked_exp_t_uint256_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "base",
														"nodeType": "YulTypedName",
														"src": "7453:4:10",
														"type": ""
													},
													{
														"name": "exponent",
														"nodeType": "YulTypedName",
														"src": "7459:8:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "power",
														"nodeType": "YulTypedName",
														"src": "7472:5:10",
														"type": ""
													}
												],
												"src": "7412:131:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7607:747:10",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "7645:52:10",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "7659:10:10",
																		"value": {
																			"kind": "number",
																			"nodeType": "YulLiteral",
																			"src": "7668:1:10",
																			"type": "",
																			"value": "1"
																		},
																		"variableNames": [
																			{
																				"name": "power",
																				"nodeType": "YulIdentifier",
																				"src": "7659:5:10"
																			}
																		]
																	},
																	{
																		"nodeType": "YulLeave",
																		"src": "7682:5:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "exponent",
																		"nodeType": "YulIdentifier",
																		"src": "7627:8:10"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "7620:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "7620:16:10"
															},
															"nodeType": "YulIf",
															"src": "7617:2:10"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "7730:52:10",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "7744:10:10",
																		"value": {
																			"kind": "number",
																			"nodeType": "YulLiteral",
																			"src": "7753:1:10",
																			"type": "",
																			"value": "0"
																		},
																		"variableNames": [
																			{
																				"name": "power",
																				"nodeType": "YulIdentifier",
																				"src": "7744:5:10"
																			}
																		]
																	},
																	{
																		"nodeType": "YulLeave",
																		"src": "7767:5:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "base",
																		"nodeType": "YulIdentifier",
																		"src": "7716:4:10"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "7709:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "7709:12:10"
															},
															"nodeType": "YulIf",
															"src": "7706:2:10"
														},
														{
															"cases": [
																{
																	"body": {
																		"nodeType": "YulBlock",
																		"src": "7818:52:10",
																		"statements": [
																			{
																				"nodeType": "YulAssignment",
																				"src": "7832:10:10",
																				"value": {
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "7841:1:10",
																					"type": "",
																					"value": "1"
																				},
																				"variableNames": [
																					{
																						"name": "power",
																						"nodeType": "YulIdentifier",
																						"src": "7832:5:10"
																					}
																				]
																			},
																			{
																				"nodeType": "YulLeave",
																				"src": "7855:5:10"
																			}
																		]
																	},
																	"nodeType": "YulCase",
																	"src": "7811:59:10",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7816:1:10",
																		"type": "",
																		"value": "1"
																	}
																},
																{
																	"body": {
																		"nodeType": "YulBlock",
																		"src": "7886:123:10",
																		"statements": [
																			{
																				"body": {
																					"nodeType": "YulBlock",
																					"src": "7921:22:10",
																					"statements": [
																						{
																							"expression": {
																								"arguments": [],
																								"functionName": {
																									"name": "panic_error_0x11",
																									"nodeType": "YulIdentifier",
																									"src": "7923:16:10"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "7923:18:10"
																							},
																							"nodeType": "YulExpressionStatement",
																							"src": "7923:18:10"
																						}
																					]
																				},
																				"condition": {
																					"arguments": [
																						{
																							"name": "exponent",
																							"nodeType": "YulIdentifier",
																							"src": "7906:8:10"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "7916:3:10",
																							"type": "",
																							"value": "255"
																						}
																					],
																					"functionName": {
																						"name": "gt",
																						"nodeType": "YulIdentifier",
																						"src": "7903:2:10"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "7903:17:10"
																				},
																				"nodeType": "YulIf",
																				"src": "7900:2:10"
																			},
																			{
																				"nodeType": "YulAssignment",
																				"src": "7956:25:10",
																				"value": {
																					"arguments": [
																						{
																							"name": "exponent",
																							"nodeType": "YulIdentifier",
																							"src": "7969:8:10"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "7979:1:10",
																							"type": "",
																							"value": "1"
																						}
																					],
																					"functionName": {
																						"name": "shl",
																						"nodeType": "YulIdentifier",
																						"src": "7965:3:10"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "7965:16:10"
																				},
																				"variableNames": [
																					{
																						"name": "power",
																						"nodeType": "YulIdentifier",
																						"src": "7956:5:10"
																					}
																				]
																			},
																			{
																				"nodeType": "YulLeave",
																				"src": "7994:5:10"
																			}
																		]
																	},
																	"nodeType": "YulCase",
																	"src": "7879:130:10",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7884:1:10",
																		"type": "",
																		"value": "2"
																	}
																}
															],
															"expression": {
																"name": "base",
																"nodeType": "YulIdentifier",
																"src": "7798:4:10"
															},
															"nodeType": "YulSwitch",
															"src": "7791:218:10"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "8107:70:10",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "8121:28:10",
																		"value": {
																			"arguments": [
																				{
																					"name": "base",
																					"nodeType": "YulIdentifier",
																					"src": "8134:4:10"
																				},
																				{
																					"name": "exponent",
																					"nodeType": "YulIdentifier",
																					"src": "8140:8:10"
																				}
																			],
																			"functionName": {
																				"name": "exp",
																				"nodeType": "YulIdentifier",
																				"src": "8130:3:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "8130:19:10"
																		},
																		"variableNames": [
																			{
																				"name": "power",
																				"nodeType": "YulIdentifier",
																				"src": "8121:5:10"
																			}
																		]
																	},
																	{
																		"nodeType": "YulLeave",
																		"src": "8162:5:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "base",
																						"nodeType": "YulIdentifier",
																						"src": "8031:4:10"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "8037:2:10",
																						"type": "",
																						"value": "11"
																					}
																				],
																				"functionName": {
																					"name": "lt",
																					"nodeType": "YulIdentifier",
																					"src": "8028:2:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "8028:12:10"
																			},
																			{
																				"arguments": [
																					{
																						"name": "exponent",
																						"nodeType": "YulIdentifier",
																						"src": "8045:8:10"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "8055:2:10",
																						"type": "",
																						"value": "78"
																					}
																				],
																				"functionName": {
																					"name": "lt",
																					"nodeType": "YulIdentifier",
																					"src": "8042:2:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "8042:16:10"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "8024:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8024:35:10"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "base",
																						"nodeType": "YulIdentifier",
																						"src": "8068:4:10"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "8074:3:10",
																						"type": "",
																						"value": "307"
																					}
																				],
																				"functionName": {
																					"name": "lt",
																					"nodeType": "YulIdentifier",
																					"src": "8065:2:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "8065:13:10"
																			},
																			{
																				"arguments": [
																					{
																						"name": "exponent",
																						"nodeType": "YulIdentifier",
																						"src": "8083:8:10"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "8093:2:10",
																						"type": "",
																						"value": "32"
																					}
																				],
																				"functionName": {
																					"name": "lt",
																					"nodeType": "YulIdentifier",
																					"src": "8080:2:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "8080:16:10"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "8061:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8061:36:10"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "8021:2:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "8021:77:10"
															},
															"nodeType": "YulIf",
															"src": "8018:2:10"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "8186:57:10",
															"value": {
																"arguments": [
																	{
																		"name": "base",
																		"nodeType": "YulIdentifier",
																		"src": "8228:4:10"
																	},
																	{
																		"name": "exponent",
																		"nodeType": "YulIdentifier",
																		"src": "8234:8:10"
																	}
																],
																"functionName": {
																	"name": "checked_exp_helper",
																	"nodeType": "YulIdentifier",
																	"src": "8209:18:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "8209:34:10"
															},
															"variables": [
																{
																	"name": "power_1",
																	"nodeType": "YulTypedName",
																	"src": "8190:7:10",
																	"type": ""
																},
																{
																	"name": "base_1",
																	"nodeType": "YulTypedName",
																	"src": "8199:6:10",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "8288:22:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "8290:16:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "8290:18:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "8290:18:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "power_1",
																		"nodeType": "YulIdentifier",
																		"src": "8258:7:10"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "8275:1:10",
																						"type": "",
																						"value": "0"
																					}
																				],
																				"functionName": {
																					"name": "not",
																					"nodeType": "YulIdentifier",
																					"src": "8271:3:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "8271:6:10"
																			},
																			{
																				"name": "base_1",
																				"nodeType": "YulIdentifier",
																				"src": "8279:6:10"
																			}
																		],
																		"functionName": {
																			"name": "div",
																			"nodeType": "YulIdentifier",
																			"src": "8267:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8267:19:10"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "8255:2:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "8255:32:10"
															},
															"nodeType": "YulIf",
															"src": "8252:2:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "8319:29:10",
															"value": {
																"arguments": [
																	{
																		"name": "power_1",
																		"nodeType": "YulIdentifier",
																		"src": "8332:7:10"
																	},
																	{
																		"name": "base_1",
																		"nodeType": "YulIdentifier",
																		"src": "8341:6:10"
																	}
																],
																"functionName": {
																	"name": "mul",
																	"nodeType": "YulIdentifier",
																	"src": "8328:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "8328:20:10"
															},
															"variableNames": [
																{
																	"name": "power",
																	"nodeType": "YulIdentifier",
																	"src": "8319:5:10"
																}
															]
														}
													]
												},
												"name": "checked_exp_unsigned",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "base",
														"nodeType": "YulTypedName",
														"src": "7578:4:10",
														"type": ""
													},
													{
														"name": "exponent",
														"nodeType": "YulTypedName",
														"src": "7584:8:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "power",
														"nodeType": "YulTypedName",
														"src": "7597:5:10",
														"type": ""
													}
												],
												"src": "7548:806:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8411:116:10",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "8470:22:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "8472:16:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "8472:18:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "8472:18:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "x",
																						"nodeType": "YulIdentifier",
																						"src": "8442:1:10"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "8435:6:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "8435:9:10"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "8428:6:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8428:17:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "y",
																				"nodeType": "YulIdentifier",
																				"src": "8450:1:10"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "8461:1:10",
																								"type": "",
																								"value": "0"
																							}
																						],
																						"functionName": {
																							"name": "not",
																							"nodeType": "YulIdentifier",
																							"src": "8457:3:10"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "8457:6:10"
																					},
																					{
																						"name": "x",
																						"nodeType": "YulIdentifier",
																						"src": "8465:1:10"
																					}
																				],
																				"functionName": {
																					"name": "div",
																					"nodeType": "YulIdentifier",
																					"src": "8453:3:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "8453:14:10"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "8447:2:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8447:21:10"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "8424:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "8424:45:10"
															},
															"nodeType": "YulIf",
															"src": "8421:2:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "8501:20:10",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "8516:1:10"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "8519:1:10"
																	}
																],
																"functionName": {
																	"name": "mul",
																	"nodeType": "YulIdentifier",
																	"src": "8512:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "8512:9:10"
															},
															"variableNames": [
																{
																	"name": "product",
																	"nodeType": "YulIdentifier",
																	"src": "8501:7:10"
																}
															]
														}
													]
												},
												"name": "checked_mul_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "8390:1:10",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "8393:1:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "product",
														"nodeType": "YulTypedName",
														"src": "8399:7:10",
														"type": ""
													}
												],
												"src": "8359:168:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8581:76:10",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "8603:22:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "8605:16:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "8605:18:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "8605:18:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "8597:1:10"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "8600:1:10"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "8594:2:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "8594:8:10"
															},
															"nodeType": "YulIf",
															"src": "8591:2:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "8634:17:10",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "8646:1:10"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "8649:1:10"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "8642:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "8642:9:10"
															},
															"variableNames": [
																{
																	"name": "diff",
																	"nodeType": "YulIdentifier",
																	"src": "8634:4:10"
																}
															]
														}
													]
												},
												"name": "checked_sub_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "8563:1:10",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "8566:1:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "diff",
														"nodeType": "YulTypedName",
														"src": "8572:4:10",
														"type": ""
													}
												],
												"src": "8532:125:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8694:95:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8711:1:10",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8718:3:10",
																				"type": "",
																				"value": "224"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8723:10:10",
																				"type": "",
																				"value": "0x4e487b71"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "8714:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8714:20:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8704:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "8704:31:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8704:31:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8751:1:10",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8754:4:10",
																		"type": "",
																		"value": "0x11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8744:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "8744:15:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8744:15:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8775:1:10",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8778:4:10",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "8768:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "8768:15:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8768:15:10"
														}
													]
												},
												"name": "panic_error_0x11",
												"nodeType": "YulFunctionDefinition",
												"src": "8662:127:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8826:95:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8843:1:10",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8850:3:10",
																				"type": "",
																				"value": "224"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8855:10:10",
																				"type": "",
																				"value": "0x4e487b71"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "8846:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8846:20:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8836:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "8836:31:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8836:31:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8883:1:10",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8886:4:10",
																		"type": "",
																		"value": "0x41"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8876:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "8876:15:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8876:15:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8907:1:10",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8910:4:10",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "8900:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "8900:15:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8900:15:10"
														}
													]
												},
												"name": "panic_error_0x41",
												"nodeType": "YulFunctionDefinition",
												"src": "8794:127:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8971:86:10",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "9035:16:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "9044:1:10",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "9047:1:10",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "9037:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "9037:12:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "9037:12:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "8994:5:10"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "9005:5:10"
																					},
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "9020:3:10",
																										"type": "",
																										"value": "160"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "9025:1:10",
																										"type": "",
																										"value": "1"
																									}
																								],
																								"functionName": {
																									"name": "shl",
																									"nodeType": "YulIdentifier",
																									"src": "9016:3:10"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "9016:11:10"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "9029:1:10",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "sub",
																							"nodeType": "YulIdentifier",
																							"src": "9012:3:10"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "9012:19:10"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "9001:3:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "9001:31:10"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "8991:2:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8991:42:10"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "8984:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "8984:50:10"
															},
															"nodeType": "YulIf",
															"src": "8981:2:10"
														}
													]
												},
												"name": "validator_revert_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "8960:5:10",
														"type": ""
													}
												],
												"src": "8926:131:10"
											}
										]
									},
									"contents": "{\n    { }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function abi_decode_tuple_t_address_payablet_contract$_ERC20_$585t_contract$_ERC20_$585t_array$_t_uint256_$7_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        let _1 := 320\n        if slt(sub(dataEnd, headStart), _1) { revert(value1, value1) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let _2 := 32\n        let value_1 := calldataload(add(headStart, _2))\n        validator_revert_address(value_1)\n        value1 := value_1\n        let value_2 := calldataload(add(headStart, 64))\n        validator_revert_address(value_2)\n        value2 := value_2\n        if iszero(slt(add(headStart, 127), dataEnd)) { revert(value3, value3) }\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, 224)\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        let dst := memPtr\n        let src := add(headStart, 96)\n        if gt(add(headStart, _1), dataEnd) { revert(value3, value3) }\n        let i := value3\n        for { } lt(i, 0x07) { i := add(i, 1) }\n        {\n            mstore(dst, calldataload(src))\n            dst := add(dst, _2)\n            src := add(src, _2)\n        }\n        value3 := memPtr\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        value0 := mload(headStart)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_address_payable_t_contract$_ERC20_$585_t_contract$_ERC20_$585_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256_t_bool_t_uint256__to_t_address_payable_t_address_t_address_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256_t_bool_t_uint256__fromStack_reversed(headStart, value11, value10, value9, value8, value7, value6, value5, value4, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 384)\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), and(value2, _1))\n        mstore(add(headStart, 96), value3)\n        mstore(add(headStart, 128), value4)\n        mstore(add(headStart, 160), value5)\n        mstore(add(headStart, 192), value6)\n        mstore(add(headStart, 224), value7)\n        mstore(add(headStart, 256), value8)\n        mstore(add(headStart, 288), value9)\n        mstore(add(headStart, 320), iszero(iszero(value10)))\n        mstore(add(headStart, 352), value11)\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_encode_tuple_t_contract$_IERC20_$663__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"Ownable: new owner is the zero a\")\n        mstore(add(headStart, 96), \"ddress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_48cc793e3ea877d6bf034b11f4c6d0d583dd24a0f1374daf495701b65f42f81c__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 14)\n        mstore(add(headStart, 64), \"Overflow value\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_5d6d122126ec0f9651beafbd0f488ecfebdba58f580ffa0510b0c9420d00f3cd__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 10)\n        mstore(add(headStart, 64), \"NOT ACTIVE\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_8254a19c2218e87bd65e7d451e5bbd6df57ba9f73035118b8f47be7b5659ddde__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 16)\n        mstore(add(headStart, 64), \"Not enough value\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 32)\n        mstore(add(headStart, 64), \"Ownable: caller is not the owner\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_t_uint256_t_uint256_t_uint256_t_uint256_t_bool_t_bool__to_t_uint256_t_uint256_t_uint256_t_uint256_t_bool_t_bool__fromStack_reversed(headStart, value5, value4, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 192)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n        mstore(add(headStart, 128), iszero(iszero(value4)))\n        mstore(add(headStart, 160), iszero(iszero(value5)))\n    }\n    function abi_encode_tuple_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256__fromStack_reversed(headStart, value5, value4, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 192)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n        mstore(add(headStart, 128), value4)\n        mstore(add(headStart, 160), value5)\n    }\n    function checked_div_t_uint256(x, y) -> r\n    {\n        if iszero(y)\n        {\n            mstore(r, shl(224, 0x4e487b71))\n            mstore(4, 0x12)\n            revert(r, 0x24)\n        }\n        r := div(x, y)\n    }\n    function checked_exp_helper(_base, exponent) -> power, base\n    {\n        let power_1 := 1\n        power := power_1\n        base := _base\n        for { } gt(exponent, power_1) { }\n        {\n            if gt(base, div(not(0), base)) { panic_error_0x11() }\n            if and(exponent, power_1) { power := mul(power, base) }\n            base := mul(base, base)\n            exponent := shr(power_1, exponent)\n        }\n    }\n    function checked_exp_t_uint256_t_uint256(base, exponent) -> power\n    {\n        power := checked_exp_unsigned(base, exponent)\n    }\n    function checked_exp_unsigned(base, exponent) -> power\n    {\n        if iszero(exponent)\n        {\n            power := 1\n            leave\n        }\n        if iszero(base)\n        {\n            power := 0\n            leave\n        }\n        switch base\n        case 1 {\n            power := 1\n            leave\n        }\n        case 2 {\n            if gt(exponent, 255) { panic_error_0x11() }\n            power := shl(exponent, 1)\n            leave\n        }\n        if or(and(lt(base, 11), lt(exponent, 78)), and(lt(base, 307), lt(exponent, 32)))\n        {\n            power := exp(base, exponent)\n            leave\n        }\n        let power_1, base_1 := checked_exp_helper(base, exponent)\n        if gt(power_1, div(not(0), base_1)) { panic_error_0x11() }\n        power := mul(power_1, base_1)\n    }\n    function checked_mul_t_uint256(x, y) -> product\n    {\n        if and(iszero(iszero(x)), gt(y, div(not(0), x))) { panic_error_0x11() }\n        product := mul(x, y)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        if lt(x, y) { panic_error_0x11() }\n        diff := sub(x, y)\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function validator_revert_address(value)\n    {\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n}",
									"id": 10,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "6080604052600436106100f35760003560e01c80638da5cb5b1161008a578063cad5b0f711610059578063cad5b0f71461033f578063e2d3f42314610364578063f2fde38b146103eb578063f8b2cb4f1461040b57600080fd5b80638da5cb5b14610275578063acfb2355146102a7578063ad5c4648146102ff578063b6b55f251461031f57600080fd5b806356c5f349116100c657806356c5f3491461020b57806361e1765514610238578063715018a614610258578063861faf5f1461026d57600080fd5b806318856a2f146100f8578063200d2ed2146101bd5780633b5ef2ad146101e05780634329db46146101f6575b600080fd5b34801561010457600080fd5b50600b54600c54600d54600e54600f5460105460115460125460135460145460155460165461014c9b6001600160a01b039081169b81169a16989796959493929160ff16908c565b604080516001600160a01b039d8e1681529b8d1660208d015299909b16988a01989098526060890196909652608088019490945260a087019290925260c086015260e08501526101008401526101208301521515610140820152610160810191909152610180015b60405180910390f35b3480156101c957600080fd5b506101d2610433565b6040519081526020016101b4565b3480156101ec57600080fd5b506101d260185481565b610209610204366004610b7b565b61045c565b005b34801561021757600080fd5b506101d2610226366004610a98565b60036020526000908152604090205481565b34801561024457600080fd5b50610209610253366004610abb565b610496565b34801561026457600080fd5b50610209610644565b6102096106af565b34801561028157600080fd5b506001546001600160a01b03165b6040516001600160a01b0390911681526020016101b4565b3480156102b357600080fd5b506004546005546006546007546008546009546102d295949392919086565b604080519687526020870195909552938501929092526060840152608083015260a082015260c0016101b4565b34801561030b57600080fd5b5060175461028f906001600160a01b031681565b34801561032b57600080fd5b506101d261033a366004610b7b565b6106de565b34801561034b57600080fd5b506103546108b9565b60405190151581526020016101b4565b34801561037057600080fd5b506103ba61037f366004610a98565b600260208190526000918252604090912080546001820154928201546003830154600490930154919392909160ff8082169161010090041686565b60408051968752602087019590955293850192909252606084015215156080830152151560a082015260c0016101b4565b3480156103f757600080fd5b50610209610406366004610a98565b6108cb565b34801561041757600080fd5b506101d2610426366004610a98565b6001600160a01b03163190565b600f546000904210156104465750600090565b6010544211156104565750600290565b50600190565b336108fc61046a8334610cd5565b6040518115909202916000818181858888f19350505050158015610492573d6000803e3d6000fd5b5050565b600b80546001600160a01b038087166001600160a01b031992831617909255600c80548684169083168117909155600d8054938616939092169290921790556040805163313ce56760e01b8152905163313ce56791600480820192602092909190829003018186803b15801561050b57600080fd5b505afa15801561051f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105439190610b93565b61054e90600a610c0e565b815161055a9190610cb6565b600e55602080820151600f556040808301516010556060830151601155600d54815163313ce56760e01b815291516001600160a01b039091169263313ce5679260048082019391829003018186803b1580156105b557600080fd5b505afa1580156105c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ed9190610b93565b6105f890600a610c0e565b60808201516106079190610cb6565b60125560a081015160135560c001516014555050600d54601754601580546001600160a01b03938416939092169290921460ff1990911617905550565b6001546001600160a01b031633146106a35760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b6106ad60006109b1565b565b60405133904780156108fc02916000818181858888f193505050501580156106db573d6000803e3d6000fd5b50565b60006106e8610433565b6001146107245760405162461bcd60e51b815260206004820152600a6024820152694e4f542041435449564560b01b604482015260640161069a565b336000908152600260205260408120601154909184918291906103e8908310156107835760405162461bcd60e51b815260206004820152601060248201526f4e6f7420656e6f7567682076616c756560801b604482015260640161069a565b6012548311156107c65760405162461bcd60e51b815260206004820152600e60248201526d4f766572666c6f772076616c756560901b604482015260640161069a565b6107ce6108b9565b6107fe576107fb816107f5856107ef60185486610a0390919063ffffffff16565b90610a0f565b90610a1b565b92505b60125460009061080f908590610cd5565b600d546040805163313ce56760e01b815290519293506000926108ac926001600160a01b03169163313ce567916004808301926020929190829003018186803b15801561085b57600080fd5b505afa15801561086f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108939190610b93565b61089e90600a610c0e565b600e546107f5908890610a0f565b9998505050505050505050565b60006108c6601933610a27565b905090565b6001546001600160a01b031633146109255760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161069a565b6001600160a01b03811661098a5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161069a565b6106db816109b1565b60006109a8836001600160a01b038416610a49565b90505b92915050565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60006109a88284610cd5565b60006109a88284610cb6565b60006109a88284610bab565b6001600160a01b038116600090815260018301602052604081205415156109a8565b6000818152600183016020526040812054610a90575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556109ab565b5060006109ab565b600060208284031215610aa9578081fd5b8135610ab481610d18565b9392505050565b600080600080610140808688031215610ad2578384fd5b8535610add81610d18565b9450602086810135610aee81610d18565b94506040870135610afe81610d18565b9350607f87018813610b0e578283fd5b60405160e0810181811067ffffffffffffffff82111715610b3157610b31610d02565b6040528060608901848a018b1015610b47578586fd5b8594505b6007851015610b6a578035825260019490940193908301908301610b4b565b505080935050505092959194509250565b600060208284031215610b8c578081fd5b5035919050565b600060208284031215610ba4578081fd5b5051919050565b600082610bc657634e487b7160e01b81526012600452602481fd5b500490565b600181815b80851115610c06578160001904821115610bec57610bec610cec565b80851615610bf957918102915b93841c9390800290610bd0565b509250929050565b60006109a88383600082610c24575060016109ab565b81610c31575060006109ab565b8160018114610c475760028114610c5157610c6d565b60019150506109ab565b60ff841115610c6257610c62610cec565b50506001821b6109ab565b5060208310610133831016604e8410600b8410161715610c90575081810a6109ab565b610c9a8383610bcb565b8060001904821115610cae57610cae610cec565b029392505050565b6000816000190483118215151615610cd057610cd0610cec565b500290565b600082821015610ce757610ce7610cec565b500390565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146106db57600080fdfea2646970667358221220be19ea4abafe580c5e14a2d470c348a0fb109091231220e63f69a27de01f207764736f6c63430008040033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0xF3 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8DA5CB5B GT PUSH2 0x8A JUMPI DUP1 PUSH4 0xCAD5B0F7 GT PUSH2 0x59 JUMPI DUP1 PUSH4 0xCAD5B0F7 EQ PUSH2 0x33F JUMPI DUP1 PUSH4 0xE2D3F423 EQ PUSH2 0x364 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x3EB JUMPI DUP1 PUSH4 0xF8B2CB4F EQ PUSH2 0x40B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x275 JUMPI DUP1 PUSH4 0xACFB2355 EQ PUSH2 0x2A7 JUMPI DUP1 PUSH4 0xAD5C4648 EQ PUSH2 0x2FF JUMPI DUP1 PUSH4 0xB6B55F25 EQ PUSH2 0x31F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x56C5F349 GT PUSH2 0xC6 JUMPI DUP1 PUSH4 0x56C5F349 EQ PUSH2 0x20B JUMPI DUP1 PUSH4 0x61E17655 EQ PUSH2 0x238 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x258 JUMPI DUP1 PUSH4 0x861FAF5F EQ PUSH2 0x26D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x18856A2F EQ PUSH2 0xF8 JUMPI DUP1 PUSH4 0x200D2ED2 EQ PUSH2 0x1BD JUMPI DUP1 PUSH4 0x3B5EF2AD EQ PUSH2 0x1E0 JUMPI DUP1 PUSH4 0x4329DB46 EQ PUSH2 0x1F6 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x104 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0xB SLOAD PUSH1 0xC SLOAD PUSH1 0xD SLOAD PUSH1 0xE SLOAD PUSH1 0xF SLOAD PUSH1 0x10 SLOAD PUSH1 0x11 SLOAD PUSH1 0x12 SLOAD PUSH1 0x13 SLOAD PUSH1 0x14 SLOAD PUSH1 0x15 SLOAD PUSH1 0x16 SLOAD PUSH2 0x14C SWAP12 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP12 DUP2 AND SWAP11 AND SWAP9 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 PUSH1 0xFF AND SWAP1 DUP13 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP14 DUP15 AND DUP2 MSTORE SWAP12 DUP14 AND PUSH1 0x20 DUP14 ADD MSTORE SWAP10 SWAP1 SWAP12 AND SWAP9 DUP11 ADD SWAP9 SWAP1 SWAP9 MSTORE PUSH1 0x60 DUP10 ADD SWAP7 SWAP1 SWAP7 MSTORE PUSH1 0x80 DUP9 ADD SWAP5 SWAP1 SWAP5 MSTORE PUSH1 0xA0 DUP8 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0xC0 DUP7 ADD MSTORE PUSH1 0xE0 DUP6 ADD MSTORE PUSH2 0x100 DUP5 ADD MSTORE PUSH2 0x120 DUP4 ADD MSTORE ISZERO ISZERO PUSH2 0x140 DUP3 ADD MSTORE PUSH2 0x160 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH2 0x180 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1C9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1D2 PUSH2 0x433 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1B4 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1EC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1D2 PUSH1 0x18 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x209 PUSH2 0x204 CALLDATASIZE PUSH1 0x4 PUSH2 0xB7B JUMP JUMPDEST PUSH2 0x45C JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x217 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1D2 PUSH2 0x226 CALLDATASIZE PUSH1 0x4 PUSH2 0xA98 JUMP JUMPDEST PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x244 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x209 PUSH2 0x253 CALLDATASIZE PUSH1 0x4 PUSH2 0xABB JUMP JUMPDEST PUSH2 0x496 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x264 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x209 PUSH2 0x644 JUMP JUMPDEST PUSH2 0x209 PUSH2 0x6AF JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x281 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1B4 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2B3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 SLOAD PUSH1 0x5 SLOAD PUSH1 0x6 SLOAD PUSH1 0x7 SLOAD PUSH1 0x8 SLOAD PUSH1 0x9 SLOAD PUSH2 0x2D2 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 DUP7 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP7 DUP8 MSTORE PUSH1 0x20 DUP8 ADD SWAP6 SWAP1 SWAP6 MSTORE SWAP4 DUP6 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 ADD PUSH2 0x1B4 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x30B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x17 SLOAD PUSH2 0x28F SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x32B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1D2 PUSH2 0x33A CALLDATASIZE PUSH1 0x4 PUSH2 0xB7B JUMP JUMPDEST PUSH2 0x6DE JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x34B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x354 PUSH2 0x8B9 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1B4 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x370 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3BA PUSH2 0x37F CALLDATASIZE PUSH1 0x4 PUSH2 0xA98 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD SWAP3 DUP3 ADD SLOAD PUSH1 0x3 DUP4 ADD SLOAD PUSH1 0x4 SWAP1 SWAP4 ADD SLOAD SWAP2 SWAP4 SWAP3 SWAP1 SWAP2 PUSH1 0xFF DUP1 DUP3 AND SWAP2 PUSH2 0x100 SWAP1 DIV AND DUP7 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP7 DUP8 MSTORE PUSH1 0x20 DUP8 ADD SWAP6 SWAP1 SWAP6 MSTORE SWAP4 DUP6 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x60 DUP5 ADD MSTORE ISZERO ISZERO PUSH1 0x80 DUP4 ADD MSTORE ISZERO ISZERO PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 ADD PUSH2 0x1B4 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3F7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x209 PUSH2 0x406 CALLDATASIZE PUSH1 0x4 PUSH2 0xA98 JUMP JUMPDEST PUSH2 0x8CB JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x417 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1D2 PUSH2 0x426 CALLDATASIZE PUSH1 0x4 PUSH2 0xA98 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND BALANCE SWAP1 JUMP JUMPDEST PUSH1 0xF SLOAD PUSH1 0x0 SWAP1 TIMESTAMP LT ISZERO PUSH2 0x446 JUMPI POP PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH1 0x10 SLOAD TIMESTAMP GT ISZERO PUSH2 0x456 JUMPI POP PUSH1 0x2 SWAP1 JUMP JUMPDEST POP PUSH1 0x1 SWAP1 JUMP JUMPDEST CALLER PUSH2 0x8FC PUSH2 0x46A DUP4 CALLVALUE PUSH2 0xCD5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 ISZERO SWAP1 SWAP3 MUL SWAP2 PUSH1 0x0 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x492 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP JUMP JUMPDEST PUSH1 0xB DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP8 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP3 DUP4 AND OR SWAP1 SWAP3 SSTORE PUSH1 0xC DUP1 SLOAD DUP7 DUP5 AND SWAP1 DUP4 AND DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 0xD DUP1 SLOAD SWAP4 DUP7 AND SWAP4 SWAP1 SWAP3 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SSTORE PUSH1 0x40 DUP1 MLOAD PUSH4 0x313CE567 PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 MLOAD PUSH4 0x313CE567 SWAP2 PUSH1 0x4 DUP1 DUP3 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x50B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x51F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x543 SWAP2 SWAP1 PUSH2 0xB93 JUMP JUMPDEST PUSH2 0x54E SWAP1 PUSH1 0xA PUSH2 0xC0E JUMP JUMPDEST DUP2 MLOAD PUSH2 0x55A SWAP2 SWAP1 PUSH2 0xCB6 JUMP JUMPDEST PUSH1 0xE SSTORE PUSH1 0x20 DUP1 DUP3 ADD MLOAD PUSH1 0xF SSTORE PUSH1 0x40 DUP1 DUP4 ADD MLOAD PUSH1 0x10 SSTORE PUSH1 0x60 DUP4 ADD MLOAD PUSH1 0x11 SSTORE PUSH1 0xD SLOAD DUP2 MLOAD PUSH4 0x313CE567 PUSH1 0xE0 SHL DUP2 MSTORE SWAP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP3 PUSH4 0x313CE567 SWAP3 PUSH1 0x4 DUP1 DUP3 ADD SWAP4 SWAP2 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5B5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x5C9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x5ED SWAP2 SWAP1 PUSH2 0xB93 JUMP JUMPDEST PUSH2 0x5F8 SWAP1 PUSH1 0xA PUSH2 0xC0E JUMP JUMPDEST PUSH1 0x80 DUP3 ADD MLOAD PUSH2 0x607 SWAP2 SWAP1 PUSH2 0xCB6 JUMP JUMPDEST PUSH1 0x12 SSTORE PUSH1 0xA0 DUP2 ADD MLOAD PUSH1 0x13 SSTORE PUSH1 0xC0 ADD MLOAD PUSH1 0x14 SSTORE POP POP PUSH1 0xD SLOAD PUSH1 0x17 SLOAD PUSH1 0x15 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND SWAP4 SWAP1 SWAP3 AND SWAP3 SWAP1 SWAP3 EQ PUSH1 0xFF NOT SWAP1 SWAP2 AND OR SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x6A3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x6AD PUSH1 0x0 PUSH2 0x9B1 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x40 MLOAD CALLER SWAP1 SELFBALANCE DUP1 ISZERO PUSH2 0x8FC MUL SWAP2 PUSH1 0x0 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x6DB JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x6E8 PUSH2 0x433 JUMP JUMPDEST PUSH1 0x1 EQ PUSH2 0x724 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xA PUSH1 0x24 DUP3 ADD MSTORE PUSH10 0x4E4F5420414354495645 PUSH1 0xB0 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x69A JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x11 SLOAD SWAP1 SWAP2 DUP5 SWAP2 DUP3 SWAP2 SWAP1 PUSH2 0x3E8 SWAP1 DUP4 LT ISZERO PUSH2 0x783 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x10 PUSH1 0x24 DUP3 ADD MSTORE PUSH16 0x4E6F7420656E6F7567682076616C7565 PUSH1 0x80 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x69A JUMP JUMPDEST PUSH1 0x12 SLOAD DUP4 GT ISZERO PUSH2 0x7C6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xE PUSH1 0x24 DUP3 ADD MSTORE PUSH14 0x4F766572666C6F772076616C7565 PUSH1 0x90 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x69A JUMP JUMPDEST PUSH2 0x7CE PUSH2 0x8B9 JUMP JUMPDEST PUSH2 0x7FE JUMPI PUSH2 0x7FB DUP2 PUSH2 0x7F5 DUP6 PUSH2 0x7EF PUSH1 0x18 SLOAD DUP7 PUSH2 0xA03 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 PUSH2 0xA0F JUMP JUMPDEST SWAP1 PUSH2 0xA1B JUMP JUMPDEST SWAP3 POP JUMPDEST PUSH1 0x12 SLOAD PUSH1 0x0 SWAP1 PUSH2 0x80F SWAP1 DUP6 SWAP1 PUSH2 0xCD5 JUMP JUMPDEST PUSH1 0xD SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0x313CE567 PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 MLOAD SWAP3 SWAP4 POP PUSH1 0x0 SWAP3 PUSH2 0x8AC SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 PUSH4 0x313CE567 SWAP2 PUSH1 0x4 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x85B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x86F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x893 SWAP2 SWAP1 PUSH2 0xB93 JUMP JUMPDEST PUSH2 0x89E SWAP1 PUSH1 0xA PUSH2 0xC0E JUMP JUMPDEST PUSH1 0xE SLOAD PUSH2 0x7F5 SWAP1 DUP9 SWAP1 PUSH2 0xA0F JUMP JUMPDEST SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x8C6 PUSH1 0x19 CALLER PUSH2 0xA27 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x925 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x69A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x98A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x69A JUMP JUMPDEST PUSH2 0x6DB DUP2 PUSH2 0x9B1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x9A8 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0xA49 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x9A8 DUP3 DUP5 PUSH2 0xCD5 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x9A8 DUP3 DUP5 PUSH2 0xCB6 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x9A8 DUP3 DUP5 PUSH2 0xBAB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 DUP4 ADD PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD ISZERO ISZERO PUSH2 0x9A8 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 DUP4 ADD PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH2 0xA90 JUMPI POP DUP2 SLOAD PUSH1 0x1 DUP2 DUP2 ADD DUP5 SSTORE PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 KECCAK256 SWAP1 SWAP4 ADD DUP5 SWAP1 SSTORE DUP5 SLOAD DUP5 DUP3 MSTORE DUP3 DUP7 ADD SWAP1 SWAP4 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP2 SWAP1 SWAP2 SSTORE PUSH2 0x9AB JUMP JUMPDEST POP PUSH1 0x0 PUSH2 0x9AB JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xAA9 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0xAB4 DUP2 PUSH2 0xD18 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH2 0x140 DUP1 DUP7 DUP9 SUB SLT ISZERO PUSH2 0xAD2 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH2 0xADD DUP2 PUSH2 0xD18 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 DUP2 ADD CALLDATALOAD PUSH2 0xAEE DUP2 PUSH2 0xD18 JUMP JUMPDEST SWAP5 POP PUSH1 0x40 DUP8 ADD CALLDATALOAD PUSH2 0xAFE DUP2 PUSH2 0xD18 JUMP JUMPDEST SWAP4 POP PUSH1 0x7F DUP8 ADD DUP9 SGT PUSH2 0xB0E JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0xE0 DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0xB31 JUMPI PUSH2 0xB31 PUSH2 0xD02 JUMP JUMPDEST PUSH1 0x40 MSTORE DUP1 PUSH1 0x60 DUP10 ADD DUP5 DUP11 ADD DUP12 LT ISZERO PUSH2 0xB47 JUMPI DUP6 DUP7 REVERT JUMPDEST DUP6 SWAP5 POP JUMPDEST PUSH1 0x7 DUP6 LT ISZERO PUSH2 0xB6A JUMPI DUP1 CALLDATALOAD DUP3 MSTORE PUSH1 0x1 SWAP5 SWAP1 SWAP5 ADD SWAP4 SWAP1 DUP4 ADD SWAP1 DUP4 ADD PUSH2 0xB4B JUMP JUMPDEST POP POP DUP1 SWAP4 POP POP POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xB8C JUMPI DUP1 DUP2 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xBA4 JUMPI DUP1 DUP2 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0xBC6 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 DUP2 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 JUMPDEST DUP1 DUP6 GT ISZERO PUSH2 0xC06 JUMPI DUP2 PUSH1 0x0 NOT DIV DUP3 GT ISZERO PUSH2 0xBEC JUMPI PUSH2 0xBEC PUSH2 0xCEC JUMP JUMPDEST DUP1 DUP6 AND ISZERO PUSH2 0xBF9 JUMPI SWAP2 DUP2 MUL SWAP2 JUMPDEST SWAP4 DUP5 SHR SWAP4 SWAP1 DUP1 MUL SWAP1 PUSH2 0xBD0 JUMP JUMPDEST POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x9A8 DUP4 DUP4 PUSH1 0x0 DUP3 PUSH2 0xC24 JUMPI POP PUSH1 0x1 PUSH2 0x9AB JUMP JUMPDEST DUP2 PUSH2 0xC31 JUMPI POP PUSH1 0x0 PUSH2 0x9AB JUMP JUMPDEST DUP2 PUSH1 0x1 DUP2 EQ PUSH2 0xC47 JUMPI PUSH1 0x2 DUP2 EQ PUSH2 0xC51 JUMPI PUSH2 0xC6D JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP PUSH2 0x9AB JUMP JUMPDEST PUSH1 0xFF DUP5 GT ISZERO PUSH2 0xC62 JUMPI PUSH2 0xC62 PUSH2 0xCEC JUMP JUMPDEST POP POP PUSH1 0x1 DUP3 SHL PUSH2 0x9AB JUMP JUMPDEST POP PUSH1 0x20 DUP4 LT PUSH2 0x133 DUP4 LT AND PUSH1 0x4E DUP5 LT PUSH1 0xB DUP5 LT AND OR ISZERO PUSH2 0xC90 JUMPI POP DUP2 DUP2 EXP PUSH2 0x9AB JUMP JUMPDEST PUSH2 0xC9A DUP4 DUP4 PUSH2 0xBCB JUMP JUMPDEST DUP1 PUSH1 0x0 NOT DIV DUP3 GT ISZERO PUSH2 0xCAE JUMPI PUSH2 0xCAE PUSH2 0xCEC JUMP JUMPDEST MUL SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0xCD0 JUMPI PUSH2 0xCD0 PUSH2 0xCEC JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0xCE7 JUMPI PUSH2 0xCE7 PUSH2 0xCEC JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x6DB JUMPI PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xBE NOT 0xEA 0x4A 0xBA INVALID PC 0xC 0x5E EQ LOG2 0xD4 PUSH17 0xC348A0FB109091231220E63F69A27DE01F KECCAK256 PUSH24 0x64736F6C6343000804003300000000000000000000000000 ",
							"sourceMap": "338:4519:3:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1492:26;;;;;;;;;;-1:-1:-1;1492:26:3;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1492:26:3;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2728:15:10;;;2710:34;;2780:15;;;2775:2;2760:18;;2753:43;2832:15;;;;2812:18;;;2805:43;;;;2879:2;2864:18;;2857:34;;;;2922:3;2907:19;;2900:35;;;;2690:3;2951:19;;2944:35;;;;3010:3;2995:19;;2988:35;3054:3;3039:19;;3032:35;3098:3;3083:19;;3076:35;3142:3;3127:19;;3120:35;3199:15;3192:23;3186:3;3171:19;;3164:52;3247:3;3232:19;;3225:36;;;;2659:3;2644:19;1492:26:3;;;;;;;;2943:337;;;;;;;;;;;;;:::i;:::-;;;5627:25:10;;;5615:2;5600:18;2943:337:3;5582:76:10;1550:24:3;;;;;;;;;;;;;;;;4731:121;;;;;;:::i;:::-;;:::i;:::-;;1402:42;;;;;;;;;;-1:-1:-1;1402:42:3;;;;;:::i;:::-;;;;;;;;;;;;;;2130:804;;;;;;;;;;-1:-1:-1;2130:804:3;;;;;:::i;:::-;;:::i;1714:103:6:-;;;;;;;;;;;;;:::i;4615:108:3:-;;;:::i;1063:87:6:-;;;;;;;;;;-1:-1:-1;1136:6:6;;-1:-1:-1;;;;;1136:6:6;1063:87;;;-1:-1:-1;;;;;2135:32:10;;;2117:51;;2105:2;2090:18;1063:87:6;2072:102:10;1451:34:3;;;;;;;;;;-1:-1:-1;1451:34:3;;;;;;;;;;;;;;;;;;;;;;;;;6510:25:10;;;6566:2;6551:18;;6544:34;;;;6594:18;;;6587:34;;;;6652:2;6637:18;;6630:34;6695:3;6680:19;;6673:35;6739:3;6724:19;;6717:35;6497:3;6482:19;1451:34:3;6464:294:10;1525:18:3;;;;;;;;;;-1:-1:-1;1525:18:3;;;;-1:-1:-1;;;;;1525:18:3;;;3407:1078;;;;;;;;;;-1:-1:-1;3407:1078:3;;;;;:::i;:::-;;:::i;3289:110::-;;;;;;;;;;;;;:::i;:::-;;;3437:14:10;;3430:22;3412:41;;3400:2;3385:18;3289:110:3;3367:92:10;1349:46:3;;;;;;;;;;-1:-1:-1;1349:46:3;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5938:25:10;;;5994:2;5979:18;;5972:34;;;;6022:18;;;6015:34;;;;6080:2;6065:18;;6058:34;6136:14;6129:22;6123:3;6108:19;;6101:51;6196:14;6189:22;6183:3;6168:19;;6161:51;5925:3;5910:19;1349:46:3;5892:326:10;1972:201:6;;;;;;;;;;-1:-1:-1;1972:201:6;;;;;:::i;:::-;;:::i;4493:111:3:-;;;;;;;;;;-1:-1:-1;4493:111:3;;;;;:::i;:::-;-1:-1:-1;;;;;4580:16:3;;;4493:111;2943:337;3022:19;;2981:7;;3004:15;:37;3001:272;;;-1:-1:-1;3065:1:3;;2943:337::o;3001:272::-;3132:17;;3114:15;:35;3111:151;;;-1:-1:-1;3177:1:3;;2943:337::o;3111:151::-;-1:-1:-1;3235:1:3;;2943:337::o;4731:121::-;4804:10;4796:48;4825:18;4837:6;4825:9;:18;:::i;:::-;4796:48;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4731:121;:::o;2130:804::-;2311:9;:38;;-1:-1:-1;;;;;2311:38:3;;;-1:-1:-1;;;;;;2311:38:3;;;;;;;2360:19;:32;;;;;;;;;;;;;2403:19;:32;;;;;;;;;;;;;;;2493:37;;;-1:-1:-1;;;2493:37:3;;;;:35;;:37;;;;;;;;;;;;;;;2360:32;2493:37;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2480:51;;:2;:51;:::i;:::-;2469:8;;:62;;;;:::i;:::-;2446:20;:85;2564:8;;;;;2542:19;:30;2603:8;;;;;2583:17;:28;2651:8;;;;2622:26;:37;2729:19;;2723:37;;-1:-1:-1;;;2723:37:3;;;;-1:-1:-1;;;;;2729:19:3;;;;2723:35;;:37;;;;;;;;;;;2729:19;2723:37;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2710:51;;:2;:51;:::i;:::-;2699:8;;;;:62;;;;:::i;:::-;2670:26;:91;2794:8;;;;2772:19;:30;2834:8;;;2813:18;:29;-1:-1:-1;;2906:19:3;;2889:4;;2853:25;:73;;-1:-1:-1;;;;;2906:19:3;;;2889:4;;;;2881:45;;;;-1:-1:-1;;2853:73:3;;;;;;-1:-1:-1;2130:804:3:o;1714:103:6:-;1136:6;;-1:-1:-1;;;;;1136:6:6;736:10:4;1283:23:6;1275:68;;;;-1:-1:-1;;;1275:68:6;;5322:2:10;1275:68:6;;;5304:21:10;;;5341:18;;;5334:30;5400:34;5380:18;;;5373:62;5452:18;;1275:68:6;;;;;;;;;1779:30:::1;1806:1;1779:18;:30::i;:::-;1714:103::o:0;4615:108:3:-;4664:51;;4672:10;;4693:21;4664:51;;;;;;;;;4693:21;4672:10;4664:51;;;;;;;;;;;;;;;;;;;;;4615:108::o;3407:1078::-;3463:7;3491:8;:6;:8::i;:::-;3503:1;3491:13;3483:36;;;;-1:-1:-1;;;3483:36:3;;4638:2:10;3483:36:3;;;4620:21:10;4677:2;4657:18;;;4650:30;-1:-1:-1;;;4696:18:10;;;4689:40;4746:18;;3483:36:3;4610:160:10;3483:36:3;3576:10;3540:23;3566:21;;;:9;:21;;;;;3772:26;;3566:21;;3618:7;;;;3540:23;3731:4;;3754:44;;;3746:101;;;;-1:-1:-1;;;3746:101:3;;4977:2:10;3746:101:3;;;4959:21:10;5016:2;4996:18;;;4989:30;-1:-1:-1;;;5035:18:10;;;5028:46;5091:18;;3746:101:3;4949:166:10;3746:101:3;3884:26;;3866:44;;;3858:99;;;;-1:-1:-1;;;3858:99:3;;4295:2:10;3858:99:3;;;4277:21:10;4334:2;4314:18;;;4307:30;-1:-1:-1;;;4353:18:10;;;4346:44;4407:18;;3858:99:3;4267:164:10;3858:99:3;3972:19;:17;:19::i;:::-;3968:202;;4025:133;4144:13;4026:81;4092:14;4027:28;4045:9;;4027:13;:17;;:28;;;;:::i;:::-;4026:65;;:81::i;:::-;4025:118;;:133::i;:::-;4008:150;;3968:202;4200:26;;4180:17;;4200:43;;4229:14;;4200:43;:::i;:::-;4400:19;;4394:37;;;-1:-1:-1;;;4394:37:3;;;;4180:63;;-1:-1:-1;4254:17:3;;4275:158;;-1:-1:-1;;;;;4400:19:3;;4394:35;;:37;;;;;;;;;;;;;;4400:19;4394:37;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4380:52;;:2;:52;:::i;:::-;4324:20;;4275:70;;:14;;:48;:70::i;:158::-;4254:180;3407:1078;-1:-1:-1;;;;;;;;;3407:1078:3:o;3289:110::-;3338:4;3362:29;:6;736:10:4;3362:15:3;:29::i;:::-;3355:36;;3289:110;:::o;1972:201:6:-;1136:6;;-1:-1:-1;;;;;1136:6:6;736:10:4;1283:23:6;1275:68;;;;-1:-1:-1;;;1275:68:6;;5322:2:10;1275:68:6;;;5304:21:10;;;5341:18;;;5334:30;5400:34;5380:18;;;5373:62;5452:18;;1275:68:6;5294:182:10;1275:68:6;-1:-1:-1;;;;;2061:22:6;::::1;2053:73;;;::::0;-1:-1:-1;;;2053:73:6;;3888:2:10;2053:73:6::1;::::0;::::1;3870:21:10::0;3927:2;3907:18;;;3900:30;3966:34;3946:18;;;3939:62;-1:-1:-1;;;4017:18:10;;;4010:36;4063:19;;2053:73:6::1;3860:228:10::0;2053:73:6::1;2137:28;2156:8;2137:18;:28::i;8259:152:5:-:0;8329:4;8353:50;8358:3;-1:-1:-1;;;;;8378:23:5;;8353:4;:50::i;:::-;8346:57;;8259:152;;;;;:::o;2333:191:6:-;2426:6;;;-1:-1:-1;;;;;2443:17:6;;;-1:-1:-1;;;;;;2443:17:6;;;;;;;2476:40;;2426:6;;;2443:17;2426:6;;2476:40;;2407:16;;2476:40;2333:191;;:::o;3228:98:8:-;3286:7;3313:5;3317:1;3313;:5;:::i;3585:98::-;3643:7;3670:5;3674:1;3670;:5;:::i;3984:98::-;4042:7;4069:5;4073:1;4069;:5;:::i;8831:167:5:-;-1:-1:-1;;;;;8965:23:5;;8911:4;4367:19;;;:12;;;:19;;;;;;:24;;8935:55;4270:129;2174:414;2237:4;4367:19;;;:12;;;:19;;;;;;2254:327;;-1:-1:-1;2297:23:5;;;;;;;;:11;:23;;;;;;;;;;;;;2480:18;;2458:19;;;:12;;;:19;;;;;;:40;;;;2513:11;;2254:327;-1:-1:-1;2564:5:5;2557:12;;14:257:10;73:6;126:2;114:9;105:7;101:23;97:32;94:2;;;147:6;139;132:22;94:2;191:9;178:23;210:31;235:5;210:31;:::i;:::-;260:5;84:187;-1:-1:-1;;;84:187:10:o;276:1296::-;419:6;427;435;443;474:3;518:2;506:9;497:7;493:23;489:32;486:2;;;539:6;531;524:22;486:2;583:9;570:23;602:31;627:5;602:31;:::i;:::-;652:5;-1:-1:-1;676:2:10;715:18;;;702:32;743:33;702:32;743:33;:::i;:::-;795:7;-1:-1:-1;854:2:10;839:18;;826:32;867:33;826:32;867:33;:::i;:::-;919:7;-1:-1:-1;964:3:10;949:19;;945:33;-1:-1:-1;935:2:10;;997:6;989;982:22;935:2;1035;1029:9;1077:3;1069:6;1065:16;1147:6;1135:10;1132:22;1111:18;1099:10;1096:34;1093:62;1090:2;;;1158:18;;:::i;:::-;1194:2;1187:22;1229:6;1270:2;1255:18;;1288;;;1285:31;-1:-1:-1;1282:2:10;;;1334:6;1326;1319:22;1282:2;1361:6;1352:15;;1376:165;1390:4;1387:1;1384:11;1376:165;;;1449:17;;1437:30;;1410:1;1403:9;;;;;1487:12;;;;1519;;1376:165;;;1380:3;;1560:6;1550:16;;;;;454:1118;;;;;;;:::o;1577:190::-;1636:6;1689:2;1677:9;1668:7;1664:23;1660:32;1657:2;;;1710:6;1702;1695:22;1657:2;-1:-1:-1;1738:23:10;;1647:120;-1:-1:-1;1647:120:10:o;1772:194::-;1842:6;1895:2;1883:9;1874:7;1870:23;1866:32;1863:2;;;1916:6;1908;1901:22;1863:2;-1:-1:-1;1944:16:10;;1853:113;-1:-1:-1;1853:113:10:o;6763:217::-;6803:1;6829;6819:2;;-1:-1:-1;;;6854:31:10;;6908:4;6905:1;6898:15;6936:4;6861:1;6926:15;6819:2;-1:-1:-1;6965:9:10;;6809:171::o;6985:422::-;7074:1;7117:5;7074:1;7131:270;7152:7;7142:8;7139:21;7131:270;;;7211:4;7207:1;7203:6;7199:17;7193:4;7190:27;7187:2;;;7220:18;;:::i;:::-;7270:7;7260:8;7256:22;7253:2;;;7290:16;;;;7253:2;7369:22;;;;7329:15;;;;7131:270;;;7135:3;7049:358;;;;;:::o;7412:131::-;7472:5;7501:36;7528:8;7522:4;7597:5;7627:8;7617:2;;-1:-1:-1;7668:1:10;7682:5;;7617:2;7716:4;7706:2;;-1:-1:-1;7753:1:10;7767:5;;7706:2;7798:4;7816:1;7811:59;;;;7884:1;7879:130;;;;7791:218;;7811:59;7841:1;7832:10;;7855:5;;;7879:130;7916:3;7906:8;7903:17;7900:2;;;7923:18;;:::i;:::-;-1:-1:-1;;7979:1:10;7965:16;;7994:5;;7791:218;;8093:2;8083:8;8080:16;8074:3;8068:4;8065:13;8061:36;8055:2;8045:8;8042:16;8037:2;8031:4;8028:12;8024:35;8021:77;8018:2;;;-1:-1:-1;8130:19:10;;;8162:5;;8018:2;8209:34;8234:8;8228:4;8209:34;:::i;:::-;8279:6;8275:1;8271:6;8267:19;8258:7;8255:32;8252:2;;;8290:18;;:::i;:::-;8328:20;;7607:747;-1:-1:-1;;;7607:747:10:o;8359:168::-;8399:7;8465:1;8461;8457:6;8453:14;8450:1;8447:21;8442:1;8435:9;8428:17;8424:45;8421:2;;;8472:18;;:::i;:::-;-1:-1:-1;8512:9:10;;8411:116::o;8532:125::-;8572:4;8600:1;8597;8594:8;8591:2;;;8605:18;;:::i;:::-;-1:-1:-1;8642:9:10;;8581:76::o;8662:127::-;8723:10;8718:3;8714:20;8711:1;8704:31;8754:4;8751:1;8744:15;8778:4;8775:1;8768:15;8794:127;8855:10;8850:3;8846:20;8843:1;8836:31;8886:4;8883:1;8876:15;8910:4;8907:1;8900:15;8926:131;-1:-1:-1;;;;;9001:31:10;;8991:42;;8981:2;;9047:1;9044;9037:12"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "685400",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"external": {
								"WETH()": "1104",
								"backToken()": "infinite",
								"buyerInfo(address)": "4660",
								"checkAdminAddress()": "1199",
								"deposit(uint256)": "infinite",
								"feeAnyone()": "1063",
								"getBalance(address)": "1150",
								"initialSaleInfor(address,address,address,uint256[7])": "infinite",
								"owner()": "1043",
								"presaleStatus()": "5169",
								"renounceOwnership()": "23484",
								"saleInfor()": "10177",
								"status()": "1911",
								"transferETH(uint256)": "infinite",
								"transferOwnership(address)": "infinite",
								"userFee(address)": "1236"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 338,
									"end": 4857,
									"name": "PUSH",
									"source": 3,
									"value": "80"
								},
								{
									"begin": 338,
									"end": 4857,
									"name": "PUSH",
									"source": 3,
									"value": "40"
								},
								{
									"begin": 338,
									"end": 4857,
									"name": "MSTORE",
									"source": 3
								},
								{
									"begin": 1734,
									"end": 1735,
									"name": "PUSH",
									"source": 7,
									"value": "1"
								},
								{
									"begin": 1845,
									"end": 1852,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 1845,
									"end": 1867,
									"name": "SSTORE",
									"source": 7
								},
								{
									"begin": 942,
									"end": 974,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "6"
								},
								{
									"begin": 736,
									"end": 746,
									"name": "CALLER",
									"source": 4
								},
								{
									"begin": 942,
									"end": 960,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "9"
								},
								{
									"begin": 942,
									"end": 974,
									"name": "JUMP",
									"source": 6,
									"value": "[in]"
								},
								{
									"begin": 942,
									"end": 974,
									"name": "tag",
									"source": 6,
									"value": "6"
								},
								{
									"begin": 942,
									"end": 974,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 1903,
									"end": 1907,
									"name": "PUSH",
									"source": 3,
									"value": "17"
								},
								{
									"begin": 1903,
									"end": 1959,
									"name": "DUP1",
									"source": 3
								},
								{
									"begin": 1903,
									"end": 1959,
									"name": "SLOAD",
									"source": 3
								},
								{
									"begin": 1916,
									"end": 1958,
									"name": "PUSH",
									"source": 3,
									"value": "C778417E063141139FCE010982780140AA0CD5AB"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 1903,
									"end": 1959,
									"name": "SWAP1",
									"source": 3
								},
								{
									"begin": 1903,
									"end": 1959,
									"name": "SWAP2",
									"source": 3
								},
								{
									"begin": 1903,
									"end": 1959,
									"name": "AND",
									"source": 3
								},
								{
									"begin": 1903,
									"end": 1959,
									"name": "OR",
									"source": 3
								},
								{
									"begin": 1903,
									"end": 1959,
									"name": "SWAP1",
									"source": 3
								},
								{
									"begin": 1903,
									"end": 1959,
									"name": "SSTORE",
									"source": 3
								},
								{
									"begin": 1970,
									"end": 2024,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "11"
								},
								{
									"begin": 1970,
									"end": 1976,
									"name": "PUSH",
									"source": 3,
									"value": "19"
								},
								{
									"begin": 1981,
									"end": 2023,
									"name": "PUSH",
									"source": 3,
									"value": "6CCB41EEDA5A073076F3E7DC1614C185B5FA41ED"
								},
								{
									"begin": 1970,
									"end": 1980,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "12"
								},
								{
									"begin": 1970,
									"end": 1980,
									"name": "PUSH",
									"source": 3,
									"value": "20"
								},
								{
									"begin": 1970,
									"end": 1980,
									"name": "SWAP1",
									"source": 3
								},
								{
									"begin": 1970,
									"end": 1980,
									"name": "DUP2",
									"source": 3
								},
								{
									"begin": 1970,
									"end": 1980,
									"name": "SHL",
									"source": 3
								},
								{
									"begin": 1970,
									"end": 1980,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "18446744073709551711"
								},
								{
									"begin": 1970,
									"end": 1980,
									"name": "OR",
									"source": 3
								},
								{
									"begin": 1970,
									"end": 2024,
									"name": "SWAP1",
									"source": 3
								},
								{
									"begin": 1970,
									"end": 2024,
									"name": "SHR",
									"source": 3
								},
								{
									"begin": 1970,
									"end": 2024,
									"name": "JUMP",
									"source": 3,
									"value": "[in]"
								},
								{
									"begin": 1970,
									"end": 2024,
									"name": "tag",
									"source": 3,
									"value": "11"
								},
								{
									"begin": 1970,
									"end": 2024,
									"name": "JUMPDEST",
									"source": 3
								},
								{
									"begin": 1970,
									"end": 2024,
									"name": "POP",
									"source": 3
								},
								{
									"begin": 2035,
									"end": 2089,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "13"
								},
								{
									"begin": 2046,
									"end": 2088,
									"name": "PUSH",
									"source": 3,
									"value": "4F0B12BBF40FC182559822A5B1DB6D34DBC3E016"
								},
								{
									"begin": 2035,
									"end": 2041,
									"name": "PUSH",
									"source": 3,
									"value": "19"
								},
								{
									"begin": 2035,
									"end": 2045,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "12"
								},
								{
									"begin": 2035,
									"end": 2045,
									"name": "PUSH",
									"source": 3,
									"value": "20"
								},
								{
									"begin": 2035,
									"end": 2045,
									"name": "SHL",
									"source": 3
								},
								{
									"begin": 2035,
									"end": 2045,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "18446744073709551711"
								},
								{
									"begin": 2035,
									"end": 2045,
									"name": "OR",
									"source": 3
								},
								{
									"begin": 2035,
									"end": 2045,
									"name": "SWAP1",
									"source": 3
								},
								{
									"begin": 2035,
									"end": 2089,
									"name": "SWAP2",
									"source": 3
								},
								{
									"begin": 2035,
									"end": 2089,
									"name": "SWAP1",
									"source": 3
								},
								{
									"begin": 2035,
									"end": 2089,
									"name": "PUSH",
									"source": 3,
									"value": "20"
								},
								{
									"begin": 2035,
									"end": 2089,
									"name": "SHR",
									"source": 3
								},
								{
									"begin": 2035,
									"end": 2089,
									"name": "JUMP",
									"source": 3,
									"value": "[in]"
								},
								{
									"begin": 2035,
									"end": 2089,
									"name": "tag",
									"source": 3,
									"value": "13"
								},
								{
									"begin": 2035,
									"end": 2089,
									"name": "JUMPDEST",
									"source": 3
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 2112,
									"end": 2114,
									"name": "PUSH",
									"source": 3,
									"value": "14"
								},
								{
									"begin": 2100,
									"end": 2109,
									"name": "PUSH",
									"source": 3,
									"value": "18"
								},
								{
									"begin": 2100,
									"end": 2114,
									"name": "SSTORE",
									"source": 3
								},
								{
									"begin": 338,
									"end": 4857,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "14"
								},
								{
									"begin": 338,
									"end": 4857,
									"name": "JUMP",
									"source": 3
								},
								{
									"begin": 2333,
									"end": 2524,
									"name": "tag",
									"source": 6,
									"value": "9"
								},
								{
									"begin": 2333,
									"end": 2524,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 2426,
									"end": 2432,
									"name": "PUSH",
									"source": 6,
									"value": "1"
								},
								{
									"begin": 2426,
									"end": 2432,
									"name": "DUP1",
									"source": 6
								},
								{
									"begin": 2426,
									"end": 2432,
									"name": "SLOAD",
									"source": 6
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 2443,
									"end": 2460,
									"name": "DUP4",
									"source": 6
								},
								{
									"begin": 2443,
									"end": 2460,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 2443,
									"end": 2460,
									"name": "AND",
									"source": 6
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 2443,
									"end": 2460,
									"name": "DUP4",
									"source": 6
								},
								{
									"begin": 2443,
									"end": 2460,
									"name": "AND",
									"source": 6
								},
								{
									"begin": 2443,
									"end": 2460,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 2443,
									"end": 2460,
									"name": "OR",
									"source": 6
								},
								{
									"begin": 2443,
									"end": 2460,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 2443,
									"end": 2460,
									"name": "SWAP4",
									"source": 6
								},
								{
									"begin": 2443,
									"end": 2460,
									"name": "SSTORE",
									"source": 6
								},
								{
									"begin": 2476,
									"end": 2516,
									"name": "PUSH",
									"source": 6,
									"value": "40"
								},
								{
									"begin": 2476,
									"end": 2516,
									"name": "MLOAD",
									"source": 6
								},
								{
									"begin": 2426,
									"end": 2432,
									"name": "SWAP2",
									"source": 6
								},
								{
									"begin": 2426,
									"end": 2432,
									"name": "AND",
									"source": 6
								},
								{
									"begin": 2426,
									"end": 2432,
									"name": "SWAP2",
									"source": 6
								},
								{
									"begin": 2443,
									"end": 2460,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 2426,
									"end": 2432,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 2426,
									"end": 2432,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 2476,
									"end": 2516,
									"name": "PUSH",
									"source": 6,
									"value": "8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
								},
								{
									"begin": 2476,
									"end": 2516,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 2407,
									"end": 2423,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 2407,
									"end": 2423,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 2476,
									"end": 2516,
									"name": "LOG3",
									"source": 6
								},
								{
									"begin": 2333,
									"end": 2524,
									"name": "POP",
									"source": 6
								},
								{
									"begin": 2333,
									"end": 2524,
									"name": "POP",
									"source": 6
								},
								{
									"begin": 2333,
									"end": 2524,
									"name": "JUMP",
									"source": 6,
									"value": "[out]"
								},
								{
									"begin": 8259,
									"end": 8411,
									"name": "tag",
									"source": 5,
									"value": "12"
								},
								{
									"begin": 8259,
									"end": 8411,
									"name": "JUMPDEST",
									"source": 5
								},
								{
									"begin": 8329,
									"end": 8333,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 8353,
									"end": 8403,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "18"
								},
								{
									"begin": 8358,
									"end": 8361,
									"name": "DUP4",
									"source": 5
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 8378,
									"end": 8401,
									"name": "DUP5",
									"source": 5
								},
								{
									"begin": 8378,
									"end": 8401,
									"name": "AND",
									"source": 5
								},
								{
									"begin": 8353,
									"end": 8357,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "19"
								},
								{
									"begin": 8353,
									"end": 8403,
									"name": "JUMP",
									"source": 5,
									"value": "[in]"
								},
								{
									"begin": 8353,
									"end": 8403,
									"name": "tag",
									"source": 5,
									"value": "18"
								},
								{
									"begin": 8353,
									"end": 8403,
									"name": "JUMPDEST",
									"source": 5
								},
								{
									"begin": 8346,
									"end": 8403,
									"name": "SWAP1",
									"source": 5
								},
								{
									"begin": 8346,
									"end": 8403,
									"name": "POP",
									"source": 5
								},
								{
									"begin": 8259,
									"end": 8411,
									"name": "tag",
									"source": 5,
									"value": "17"
								},
								{
									"begin": 8259,
									"end": 8411,
									"name": "JUMPDEST",
									"source": 5
								},
								{
									"begin": 8259,
									"end": 8411,
									"name": "SWAP3",
									"source": 5
								},
								{
									"begin": 8259,
									"end": 8411,
									"name": "SWAP2",
									"source": 5
								},
								{
									"begin": 8259,
									"end": 8411,
									"name": "POP",
									"source": 5
								},
								{
									"begin": 8259,
									"end": 8411,
									"name": "POP",
									"source": 5
								},
								{
									"begin": 8259,
									"end": 8411,
									"name": "JUMP",
									"source": 5,
									"value": "[out]"
								},
								{
									"begin": 2174,
									"end": 2588,
									"name": "tag",
									"source": 5,
									"value": "19"
								},
								{
									"begin": 2174,
									"end": 2588,
									"name": "JUMPDEST",
									"source": 5
								},
								{
									"begin": 2237,
									"end": 2241,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 4367,
									"end": 4386,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 4367,
									"end": 4386,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 4367,
									"end": 4386,
									"name": "MSTORE",
									"source": 5
								},
								{
									"begin": 4367,
									"end": 4379,
									"name": "PUSH",
									"source": 5,
									"value": "1"
								},
								{
									"begin": 4367,
									"end": 4379,
									"name": "DUP4",
									"source": 5
								},
								{
									"begin": 4367,
									"end": 4379,
									"name": "ADD",
									"source": 5
								},
								{
									"begin": 4367,
									"end": 4386,
									"name": "PUSH",
									"source": 5,
									"value": "20"
								},
								{
									"begin": 4367,
									"end": 4386,
									"name": "MSTORE",
									"source": 5
								},
								{
									"begin": 4367,
									"end": 4386,
									"name": "PUSH",
									"source": 5,
									"value": "40"
								},
								{
									"begin": 4367,
									"end": 4386,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 4367,
									"end": 4386,
									"name": "KECCAK256",
									"source": 5
								},
								{
									"begin": 4367,
									"end": 4386,
									"name": "SLOAD",
									"source": 5
								},
								{
									"begin": 2254,
									"end": 2581,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "23"
								},
								{
									"begin": 2254,
									"end": 2581,
									"name": "JUMPI",
									"source": 5
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 2297,
									"end": 2320,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 2297,
									"end": 2320,
									"name": "SLOAD",
									"source": 5
								},
								{
									"begin": 2297,
									"end": 2320,
									"name": "PUSH",
									"source": 5,
									"value": "1"
								},
								{
									"begin": 2297,
									"end": 2320,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 2297,
									"end": 2320,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 2297,
									"end": 2320,
									"name": "ADD",
									"source": 5
								},
								{
									"begin": 2297,
									"end": 2320,
									"name": "DUP5",
									"source": 5
								},
								{
									"begin": 2297,
									"end": 2320,
									"name": "SSTORE",
									"source": 5
								},
								{
									"begin": 2297,
									"end": 2308,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 2297,
									"end": 2320,
									"name": "DUP5",
									"source": 5
								},
								{
									"begin": 2297,
									"end": 2320,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 2297,
									"end": 2320,
									"name": "MSTORE",
									"source": 5
								},
								{
									"begin": 2297,
									"end": 2320,
									"name": "PUSH",
									"source": 5,
									"value": "20"
								},
								{
									"begin": 2297,
									"end": 2320,
									"name": "DUP1",
									"source": 5
								},
								{
									"begin": 2297,
									"end": 2320,
									"name": "DUP3",
									"source": 5
								},
								{
									"begin": 2297,
									"end": 2320,
									"name": "KECCAK256",
									"source": 5
								},
								{
									"begin": 2297,
									"end": 2320,
									"name": "SWAP1",
									"source": 5
								},
								{
									"begin": 2297,
									"end": 2320,
									"name": "SWAP4",
									"source": 5
								},
								{
									"begin": 2297,
									"end": 2320,
									"name": "ADD",
									"source": 5
								},
								{
									"begin": 2297,
									"end": 2320,
									"name": "DUP5",
									"source": 5
								},
								{
									"begin": 2297,
									"end": 2320,
									"name": "SWAP1",
									"source": 5
								},
								{
									"begin": 2297,
									"end": 2320,
									"name": "SSTORE",
									"source": 5
								},
								{
									"begin": 2480,
									"end": 2498,
									"name": "DUP5",
									"source": 5
								},
								{
									"begin": 2480,
									"end": 2498,
									"name": "SLOAD",
									"source": 5
								},
								{
									"begin": 2458,
									"end": 2477,
									"name": "DUP5",
									"source": 5
								},
								{
									"begin": 2458,
									"end": 2477,
									"name": "DUP3",
									"source": 5
								},
								{
									"begin": 2458,
									"end": 2477,
									"name": "MSTORE",
									"source": 5
								},
								{
									"begin": 2458,
									"end": 2470,
									"name": "DUP3",
									"source": 5
								},
								{
									"begin": 2458,
									"end": 2470,
									"name": "DUP7",
									"source": 5
								},
								{
									"begin": 2458,
									"end": 2470,
									"name": "ADD",
									"source": 5
								},
								{
									"begin": 2458,
									"end": 2477,
									"name": "SWAP1",
									"source": 5
								},
								{
									"begin": 2458,
									"end": 2477,
									"name": "SWAP4",
									"source": 5
								},
								{
									"begin": 2458,
									"end": 2477,
									"name": "MSTORE",
									"source": 5
								},
								{
									"begin": 2458,
									"end": 2477,
									"name": "PUSH",
									"source": 5,
									"value": "40"
								},
								{
									"begin": 2458,
									"end": 2477,
									"name": "SWAP1",
									"source": 5
								},
								{
									"begin": 2458,
									"end": 2477,
									"name": "KECCAK256",
									"source": 5
								},
								{
									"begin": 2458,
									"end": 2498,
									"name": "SWAP2",
									"source": 5
								},
								{
									"begin": 2458,
									"end": 2498,
									"name": "SWAP1",
									"source": 5
								},
								{
									"begin": 2458,
									"end": 2498,
									"name": "SWAP2",
									"source": 5
								},
								{
									"begin": 2458,
									"end": 2498,
									"name": "SSTORE",
									"source": 5
								},
								{
									"begin": 2513,
									"end": 2524,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "17"
								},
								{
									"begin": 2513,
									"end": 2524,
									"name": "JUMP",
									"source": 5
								},
								{
									"begin": 2254,
									"end": 2581,
									"name": "tag",
									"source": 5,
									"value": "23"
								},
								{
									"begin": 2254,
									"end": 2581,
									"name": "JUMPDEST",
									"source": 5
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 2564,
									"end": 2569,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 2557,
									"end": 2569,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "17"
								},
								{
									"begin": 2557,
									"end": 2569,
									"name": "JUMP",
									"source": 5
								},
								{
									"begin": 338,
									"end": 4857,
									"name": "tag",
									"source": 3,
									"value": "14"
								},
								{
									"begin": 338,
									"end": 4857,
									"name": "JUMPDEST",
									"source": 3
								},
								{
									"begin": 338,
									"end": 4857,
									"name": "PUSH #[$]",
									"source": 3,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 338,
									"end": 4857,
									"name": "DUP1",
									"source": 3
								},
								{
									"begin": 338,
									"end": 4857,
									"name": "PUSH [$]",
									"source": 3,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 338,
									"end": 4857,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 338,
									"end": 4857,
									"name": "CODECOPY",
									"source": 3
								},
								{
									"begin": 338,
									"end": 4857,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 338,
									"end": 4857,
									"name": "RETURN",
									"source": 3
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220be19ea4abafe580c5e14a2d470c348a0fb109091231220e63f69a27de01f207764736f6c63430008040033",
									".code": [
										{
											"begin": 338,
											"end": 4857,
											"name": "PUSH",
											"source": 3,
											"value": "80"
										},
										{
											"begin": 338,
											"end": 4857,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 338,
											"end": 4857,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 338,
											"end": 4857,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 338,
											"end": 4857,
											"name": "CALLDATASIZE",
											"source": 3
										},
										{
											"begin": 338,
											"end": 4857,
											"name": "LT",
											"source": 3
										},
										{
											"begin": 338,
											"end": 4857,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "1"
										},
										{
											"begin": 338,
											"end": 4857,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 338,
											"end": 4857,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 338,
											"end": 4857,
											"name": "CALLDATALOAD",
											"source": 3
										},
										{
											"begin": 338,
											"end": 4857,
											"name": "PUSH",
											"source": 3,
											"value": "E0"
										},
										{
											"begin": 338,
											"end": 4857,
											"name": "SHR",
											"source": 3
										},
										{
											"begin": 338,
											"end": 4857,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 338,
											"end": 4857,
											"name": "PUSH",
											"source": 3,
											"value": "8DA5CB5B"
										},
										{
											"begin": 338,
											"end": 4857,
											"name": "GT",
											"source": 3
										},
										{
											"begin": 338,
											"end": 4857,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "18"
										},
										{
											"begin": 338,
											"end": 4857,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 338,
											"end": 4857,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 338,
											"end": 4857,
											"name": "PUSH",
											"source": 3,
											"value": "CAD5B0F7"
										},
										{
											"begin": 338,
											"end": 4857,
											"name": "GT",
											"source": 3
										},
										{
											"begin": 338,
											"end": 4857,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "19"
										},
										{
											"begin": 338,
											"end": 4857,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 338,
											"end": 4857,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 338,
											"end": 4857,
											"name": "PUSH",
											"source": 3,
											"value": "CAD5B0F7"
										},
										{
											"begin": 338,
											"end": 4857,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 338,
											"end": 4857,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "14"
										},
										{
											"begin": 338,
											"end": 4857,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 338,
											"end": 4857,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 338,
											"end": 4857,
											"name": "PUSH",
											"source": 3,
											"value": "E2D3F423"
										},
										{
											"begin": 338,
											"end": 4857,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 338,
											"end": 4857,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "15"
										},
										{
											"begin": 338,
											"end": 4857,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 338,
											"end": 4857,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 338,
											"end": 4857,
											"name": "PUSH",
											"source": 3,
											"value": "F2FDE38B"
										},
										{
											"begin": 338,
											"end": 4857,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 338,
											"end": 4857,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "16"
										},
										{
											"begin": 338,
											"end": 4857,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 338,
											"end": 4857,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 338,
											"end": 4857,
											"name": "PUSH",
											"source": 3,
											"value": "F8B2CB4F"
										},
										{
											"begin": 338,
											"end": 4857,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 338,
											"end": 4857,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "17"
										},
										{
											"begin": 338,
											"end": 4857,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 338,
											"end": 4857,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 338,
											"end": 4857,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 338,
											"end": 4857,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 338,
											"end": 4857,
											"name": "tag",
											"source": 3,
											"value": "19"
										},
										{
											"begin": 338,
											"end": 4857,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 338,
											"end": 4857,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 338,
											"end": 4857,
											"name": "PUSH",
											"source": 3,
											"value": "8DA5CB5B"
										},
										{
											"begin": 338,
											"end": 4857,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 338,
											"end": 4857,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "10"
										},
										{
											"begin": 338,
											"end": 4857,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 338,
											"end": 4857,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 338,
											"end": 4857,
											"name": "PUSH",
											"source": 3,
											"value": "ACFB2355"
										},
										{
											"begin": 338,
											"end": 4857,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 338,
											"end": 4857,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "11"
										},
										{
											"begin": 338,
											"end": 4857,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 338,
											"end": 4857,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 338,
											"end": 4857,
											"name": "PUSH",
											"source": 3,
											"value": "AD5C4648"
										},
										{
											"begin": 338,
											"end": 4857,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 338,
											"end": 4857,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "12"
										},
										{
											"begin": 338,
											"end": 4857,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 338,
											"end": 4857,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 338,
											"end": 4857,
											"name": "PUSH",
											"source": 3,
											"value": "B6B55F25"
										},
										{
											"begin": 338,
											"end": 4857,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 338,
											"end": 4857,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "13"
										},
										{
											"begin": 338,
											"end": 4857,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 338,
											"end": 4857,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 338,
											"end": 4857,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 338,
											"end": 4857,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 338,
											"end": 4857,
											"name": "tag",
											"source": 3,
											"value": "18"
										},
										{
											"begin": 338,
											"end": 4857,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 338,
											"end": 4857,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 338,
											"end": 4857,
											"name": "PUSH",
											"source": 3,
											"value": "56C5F349"
										},
										{
											"begin": 338,
											"end": 4857,
											"name": "GT",
											"source": 3
										},
										{
											"begin": 338,
											"end": 4857,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 338,
											"end": 4857,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 338,
											"end": 4857,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 338,
											"end": 4857,
											"name": "PUSH",
											"source": 3,
											"value": "56C5F349"
										},
										{
											"begin": 338,
											"end": 4857,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 338,
											"end": 4857,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "6"
										},
										{
											"begin": 338,
											"end": 4857,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 338,
											"end": 4857,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 338,
											"end": 4857,
											"name": "PUSH",
											"source": 3,
											"value": "61E17655"
										},
										{
											"begin": 338,
											"end": 4857,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 338,
											"end": 4857,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "7"
										},
										{
											"begin": 338,
											"end": 4857,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 338,
											"end": 4857,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 338,
											"end": 4857,
											"name": "PUSH",
											"source": 3,
											"value": "715018A6"
										},
										{
											"begin": 338,
											"end": 4857,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 338,
											"end": 4857,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "8"
										},
										{
											"begin": 338,
											"end": 4857,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 338,
											"end": 4857,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 338,
											"end": 4857,
											"name": "PUSH",
											"source": 3,
											"value": "861FAF5F"
										},
										{
											"begin": 338,
											"end": 4857,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 338,
											"end": 4857,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "9"
										},
										{
											"begin": 338,
											"end": 4857,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 338,
											"end": 4857,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 338,
											"end": 4857,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 338,
											"end": 4857,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 338,
											"end": 4857,
											"name": "tag",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 338,
											"end": 4857,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 338,
											"end": 4857,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 338,
											"end": 4857,
											"name": "PUSH",
											"source": 3,
											"value": "18856A2F"
										},
										{
											"begin": 338,
											"end": 4857,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 338,
											"end": 4857,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "2"
										},
										{
											"begin": 338,
											"end": 4857,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 338,
											"end": 4857,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 338,
											"end": 4857,
											"name": "PUSH",
											"source": 3,
											"value": "200D2ED2"
										},
										{
											"begin": 338,
											"end": 4857,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 338,
											"end": 4857,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "3"
										},
										{
											"begin": 338,
											"end": 4857,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 338,
											"end": 4857,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 338,
											"end": 4857,
											"name": "PUSH",
											"source": 3,
											"value": "3B5EF2AD"
										},
										{
											"begin": 338,
											"end": 4857,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 338,
											"end": 4857,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 338,
											"end": 4857,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 338,
											"end": 4857,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 338,
											"end": 4857,
											"name": "PUSH",
											"source": 3,
											"value": "4329DB46"
										},
										{
											"begin": 338,
											"end": 4857,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 338,
											"end": 4857,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "5"
										},
										{
											"begin": 338,
											"end": 4857,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 338,
											"end": 4857,
											"name": "tag",
											"source": 3,
											"value": "1"
										},
										{
											"begin": 338,
											"end": 4857,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 338,
											"end": 4857,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 338,
											"end": 4857,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 338,
											"end": 4857,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 1492,
											"end": 1518,
											"name": "tag",
											"source": 3,
											"value": "2"
										},
										{
											"begin": 1492,
											"end": 1518,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1492,
											"end": 1518,
											"name": "CALLVALUE",
											"source": 3
										},
										{
											"begin": 1492,
											"end": 1518,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1492,
											"end": 1518,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 1492,
											"end": 1518,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "21"
										},
										{
											"begin": 1492,
											"end": 1518,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 1492,
											"end": 1518,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 1492,
											"end": 1518,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1492,
											"end": 1518,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 1492,
											"end": 1518,
											"name": "tag",
											"source": 3,
											"value": "21"
										},
										{
											"begin": 1492,
											"end": 1518,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1492,
											"end": 1518,
											"name": "PUSH",
											"source": 3,
											"value": "B"
										},
										{
											"begin": 1492,
											"end": 1518,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 1492,
											"end": 1518,
											"name": "PUSH",
											"source": 3,
											"value": "C"
										},
										{
											"begin": 1492,
											"end": 1518,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 1492,
											"end": 1518,
											"name": "PUSH",
											"source": 3,
											"value": "D"
										},
										{
											"begin": 1492,
											"end": 1518,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 1492,
											"end": 1518,
											"name": "PUSH",
											"source": 3,
											"value": "E"
										},
										{
											"begin": 1492,
											"end": 1518,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 1492,
											"end": 1518,
											"name": "PUSH",
											"source": 3,
											"value": "F"
										},
										{
											"begin": 1492,
											"end": 1518,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 1492,
											"end": 1518,
											"name": "PUSH",
											"source": 3,
											"value": "10"
										},
										{
											"begin": 1492,
											"end": 1518,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 1492,
											"end": 1518,
											"name": "PUSH",
											"source": 3,
											"value": "11"
										},
										{
											"begin": 1492,
											"end": 1518,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 1492,
											"end": 1518,
											"name": "PUSH",
											"source": 3,
											"value": "12"
										},
										{
											"begin": 1492,
											"end": 1518,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 1492,
											"end": 1518,
											"name": "PUSH",
											"source": 3,
											"value": "13"
										},
										{
											"begin": 1492,
											"end": 1518,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 1492,
											"end": 1518,
											"name": "PUSH",
											"source": 3,
											"value": "14"
										},
										{
											"begin": 1492,
											"end": 1518,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 1492,
											"end": 1518,
											"name": "PUSH",
											"source": 3,
											"value": "15"
										},
										{
											"begin": 1492,
											"end": 1518,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 1492,
											"end": 1518,
											"name": "PUSH",
											"source": 3,
											"value": "16"
										},
										{
											"begin": 1492,
											"end": 1518,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 1492,
											"end": 1518,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "22"
										},
										{
											"begin": 1492,
											"end": 1518,
											"name": "SWAP12",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1492,
											"end": 1518,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1492,
											"end": 1518,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1492,
											"end": 1518,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 1492,
											"end": 1518,
											"name": "SWAP12",
											"source": 3
										},
										{
											"begin": 1492,
											"end": 1518,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1492,
											"end": 1518,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 1492,
											"end": 1518,
											"name": "SWAP11",
											"source": 3
										},
										{
											"begin": 1492,
											"end": 1518,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 1492,
											"end": 1518,
											"name": "SWAP9",
											"source": 3
										},
										{
											"begin": 1492,
											"end": 1518,
											"name": "SWAP8",
											"source": 3
										},
										{
											"begin": 1492,
											"end": 1518,
											"name": "SWAP7",
											"source": 3
										},
										{
											"begin": 1492,
											"end": 1518,
											"name": "SWAP6",
											"source": 3
										},
										{
											"begin": 1492,
											"end": 1518,
											"name": "SWAP5",
											"source": 3
										},
										{
											"begin": 1492,
											"end": 1518,
											"name": "SWAP4",
											"source": 3
										},
										{
											"begin": 1492,
											"end": 1518,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 1492,
											"end": 1518,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 1492,
											"end": 1518,
											"name": "PUSH",
											"source": 3,
											"value": "FF"
										},
										{
											"begin": 1492,
											"end": 1518,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 1492,
											"end": 1518,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1492,
											"end": 1518,
											"name": "DUP13",
											"source": 3
										},
										{
											"begin": 1492,
											"end": 1518,
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 1492,
											"end": 1518,
											"name": "tag",
											"source": 3,
											"value": "22"
										},
										{
											"begin": 1492,
											"end": 1518,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1492,
											"end": 1518,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 1492,
											"end": 1518,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1492,
											"end": 1518,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2728,
											"end": 2743,
											"name": "SWAP14",
											"source": 10
										},
										{
											"begin": 2728,
											"end": 2743,
											"name": "DUP15",
											"source": 10
										},
										{
											"begin": 2728,
											"end": 2743,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 2710,
											"end": 2744,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 2710,
											"end": 2744,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 2780,
											"end": 2795,
											"name": "SWAP12",
											"source": 10
										},
										{
											"begin": 2780,
											"end": 2795,
											"name": "DUP14",
											"source": 10
										},
										{
											"begin": 2780,
											"end": 2795,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 2775,
											"end": 2777,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 2760,
											"end": 2778,
											"name": "DUP14",
											"source": 10
										},
										{
											"begin": 2760,
											"end": 2778,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 2753,
											"end": 2796,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 2832,
											"end": 2847,
											"name": "SWAP10",
											"source": 10
										},
										{
											"begin": 2832,
											"end": 2847,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 2832,
											"end": 2847,
											"name": "SWAP12",
											"source": 10
										},
										{
											"begin": 2832,
											"end": 2847,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 2812,
											"end": 2830,
											"name": "SWAP9",
											"source": 10
										},
										{
											"begin": 2812,
											"end": 2830,
											"name": "DUP11",
											"source": 10
										},
										{
											"begin": 2812,
											"end": 2830,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 2805,
											"end": 2848,
											"name": "SWAP9",
											"source": 10
										},
										{
											"begin": 2805,
											"end": 2848,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 2805,
											"end": 2848,
											"name": "SWAP9",
											"source": 10
										},
										{
											"begin": 2805,
											"end": 2848,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 2879,
											"end": 2881,
											"name": "PUSH",
											"source": 10,
											"value": "60"
										},
										{
											"begin": 2864,
											"end": 2882,
											"name": "DUP10",
											"source": 10
										},
										{
											"begin": 2864,
											"end": 2882,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 2857,
											"end": 2891,
											"name": "SWAP7",
											"source": 10
										},
										{
											"begin": 2857,
											"end": 2891,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 2857,
											"end": 2891,
											"name": "SWAP7",
											"source": 10
										},
										{
											"begin": 2857,
											"end": 2891,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 2922,
											"end": 2925,
											"name": "PUSH",
											"source": 10,
											"value": "80"
										},
										{
											"begin": 2907,
											"end": 2926,
											"name": "DUP9",
											"source": 10
										},
										{
											"begin": 2907,
											"end": 2926,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 2900,
											"end": 2935,
											"name": "SWAP5",
											"source": 10
										},
										{
											"begin": 2900,
											"end": 2935,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 2900,
											"end": 2935,
											"name": "SWAP5",
											"source": 10
										},
										{
											"begin": 2900,
											"end": 2935,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 2690,
											"end": 2693,
											"name": "PUSH",
											"source": 10,
											"value": "A0"
										},
										{
											"begin": 2951,
											"end": 2970,
											"name": "DUP8",
											"source": 10
										},
										{
											"begin": 2951,
											"end": 2970,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 2944,
											"end": 2979,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 2944,
											"end": 2979,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 2944,
											"end": 2979,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 2944,
											"end": 2979,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 3010,
											"end": 3013,
											"name": "PUSH",
											"source": 10,
											"value": "C0"
										},
										{
											"begin": 2995,
											"end": 3014,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 2995,
											"end": 3014,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 2988,
											"end": 3023,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 3054,
											"end": 3057,
											"name": "PUSH",
											"source": 10,
											"value": "E0"
										},
										{
											"begin": 3039,
											"end": 3058,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 3039,
											"end": 3058,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 3032,
											"end": 3067,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 3098,
											"end": 3101,
											"name": "PUSH",
											"source": 10,
											"value": "100"
										},
										{
											"begin": 3083,
											"end": 3102,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 3083,
											"end": 3102,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 3076,
											"end": 3111,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 3142,
											"end": 3145,
											"name": "PUSH",
											"source": 10,
											"value": "120"
										},
										{
											"begin": 3127,
											"end": 3146,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 3127,
											"end": 3146,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 3120,
											"end": 3155,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 3199,
											"end": 3214,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 3192,
											"end": 3215,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 3186,
											"end": 3189,
											"name": "PUSH",
											"source": 10,
											"value": "140"
										},
										{
											"begin": 3171,
											"end": 3190,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 3171,
											"end": 3190,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 3164,
											"end": 3216,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 3247,
											"end": 3250,
											"name": "PUSH",
											"source": 10,
											"value": "160"
										},
										{
											"begin": 3232,
											"end": 3251,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 3232,
											"end": 3251,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 3225,
											"end": 3261,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 3225,
											"end": 3261,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 3225,
											"end": 3261,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 3225,
											"end": 3261,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 2659,
											"end": 2662,
											"name": "PUSH",
											"source": 10,
											"value": "180"
										},
										{
											"begin": 2644,
											"end": 2663,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1492,
											"end": 1518,
											"name": "tag",
											"source": 3,
											"value": "24"
										},
										{
											"begin": 1492,
											"end": 1518,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1492,
											"end": 1518,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 1492,
											"end": 1518,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 1492,
											"end": 1518,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1492,
											"end": 1518,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 1492,
											"end": 1518,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 1492,
											"end": 1518,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1492,
											"end": 1518,
											"name": "RETURN",
											"source": 3
										},
										{
											"begin": 2943,
											"end": 3280,
											"name": "tag",
											"source": 3,
											"value": "3"
										},
										{
											"begin": 2943,
											"end": 3280,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2943,
											"end": 3280,
											"name": "CALLVALUE",
											"source": 3
										},
										{
											"begin": 2943,
											"end": 3280,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2943,
											"end": 3280,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 2943,
											"end": 3280,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "26"
										},
										{
											"begin": 2943,
											"end": 3280,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 2943,
											"end": 3280,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 2943,
											"end": 3280,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2943,
											"end": 3280,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 2943,
											"end": 3280,
											"name": "tag",
											"source": 3,
											"value": "26"
										},
										{
											"begin": 2943,
											"end": 3280,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2943,
											"end": 3280,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2943,
											"end": 3280,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "27"
										},
										{
											"begin": 2943,
											"end": 3280,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "28"
										},
										{
											"begin": 2943,
											"end": 3280,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 2943,
											"end": 3280,
											"name": "tag",
											"source": 3,
											"value": "27"
										},
										{
											"begin": 2943,
											"end": 3280,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2943,
											"end": 3280,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 2943,
											"end": 3280,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 5627,
											"end": 5652,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 5627,
											"end": 5652,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 5627,
											"end": 5652,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 5615,
											"end": 5617,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 5600,
											"end": 5618,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 2943,
											"end": 3280,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "24"
										},
										{
											"begin": 5582,
											"end": 5658,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 1550,
											"end": 1574,
											"name": "tag",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 1550,
											"end": 1574,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1550,
											"end": 1574,
											"name": "CALLVALUE",
											"source": 3
										},
										{
											"begin": 1550,
											"end": 1574,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1550,
											"end": 1574,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 1550,
											"end": 1574,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "31"
										},
										{
											"begin": 1550,
											"end": 1574,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 1550,
											"end": 1574,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 1550,
											"end": 1574,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1550,
											"end": 1574,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 1550,
											"end": 1574,
											"name": "tag",
											"source": 3,
											"value": "31"
										},
										{
											"begin": 1550,
											"end": 1574,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1550,
											"end": 1574,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 1550,
											"end": 1574,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "27"
										},
										{
											"begin": 1550,
											"end": 1574,
											"name": "PUSH",
											"source": 3,
											"value": "18"
										},
										{
											"begin": 1550,
											"end": 1574,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 1550,
											"end": 1574,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1550,
											"end": 1574,
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 4731,
											"end": 4852,
											"name": "tag",
											"source": 3,
											"value": "5"
										},
										{
											"begin": 4731,
											"end": 4852,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4731,
											"end": 4852,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "35"
										},
										{
											"begin": 4731,
											"end": 4852,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "36"
										},
										{
											"begin": 4731,
											"end": 4852,
											"name": "CALLDATASIZE",
											"source": 3
										},
										{
											"begin": 4731,
											"end": 4852,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 4731,
											"end": 4852,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "37"
										},
										{
											"begin": 4731,
											"end": 4852,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 4731,
											"end": 4852,
											"name": "tag",
											"source": 3,
											"value": "36"
										},
										{
											"begin": 4731,
											"end": 4852,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4731,
											"end": 4852,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "38"
										},
										{
											"begin": 4731,
											"end": 4852,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 4731,
											"end": 4852,
											"name": "tag",
											"source": 3,
											"value": "35"
										},
										{
											"begin": 4731,
											"end": 4852,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4731,
											"end": 4852,
											"name": "STOP",
											"source": 3
										},
										{
											"begin": 1402,
											"end": 1444,
											"name": "tag",
											"source": 3,
											"value": "6"
										},
										{
											"begin": 1402,
											"end": 1444,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1402,
											"end": 1444,
											"name": "CALLVALUE",
											"source": 3
										},
										{
											"begin": 1402,
											"end": 1444,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1402,
											"end": 1444,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 1402,
											"end": 1444,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "39"
										},
										{
											"begin": 1402,
											"end": 1444,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 1402,
											"end": 1444,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 1402,
											"end": 1444,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1402,
											"end": 1444,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 1402,
											"end": 1444,
											"name": "tag",
											"source": 3,
											"value": "39"
										},
										{
											"begin": 1402,
											"end": 1444,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1402,
											"end": 1444,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "27"
										},
										{
											"begin": 1402,
											"end": 1444,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "41"
										},
										{
											"begin": 1402,
											"end": 1444,
											"name": "CALLDATASIZE",
											"source": 3
										},
										{
											"begin": 1402,
											"end": 1444,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 1402,
											"end": 1444,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "42"
										},
										{
											"begin": 1402,
											"end": 1444,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 1402,
											"end": 1444,
											"name": "tag",
											"source": 3,
											"value": "41"
										},
										{
											"begin": 1402,
											"end": 1444,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1402,
											"end": 1444,
											"name": "PUSH",
											"source": 3,
											"value": "3"
										},
										{
											"begin": 1402,
											"end": 1444,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 1402,
											"end": 1444,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 1402,
											"end": 1444,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 1402,
											"end": 1444,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1402,
											"end": 1444,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1402,
											"end": 1444,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 1402,
											"end": 1444,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 1402,
											"end": 1444,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1402,
											"end": 1444,
											"name": "KECCAK256",
											"source": 3
										},
										{
											"begin": 1402,
											"end": 1444,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 1402,
											"end": 1444,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1402,
											"end": 1444,
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 2130,
											"end": 2934,
											"name": "tag",
											"source": 3,
											"value": "7"
										},
										{
											"begin": 2130,
											"end": 2934,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2130,
											"end": 2934,
											"name": "CALLVALUE",
											"source": 3
										},
										{
											"begin": 2130,
											"end": 2934,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2130,
											"end": 2934,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 2130,
											"end": 2934,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "45"
										},
										{
											"begin": 2130,
											"end": 2934,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 2130,
											"end": 2934,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 2130,
											"end": 2934,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2130,
											"end": 2934,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 2130,
											"end": 2934,
											"name": "tag",
											"source": 3,
											"value": "45"
										},
										{
											"begin": 2130,
											"end": 2934,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2130,
											"end": 2934,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "35"
										},
										{
											"begin": 2130,
											"end": 2934,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "47"
										},
										{
											"begin": 2130,
											"end": 2934,
											"name": "CALLDATASIZE",
											"source": 3
										},
										{
											"begin": 2130,
											"end": 2934,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 2130,
											"end": 2934,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "48"
										},
										{
											"begin": 2130,
											"end": 2934,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 2130,
											"end": 2934,
											"name": "tag",
											"source": 3,
											"value": "47"
										},
										{
											"begin": 2130,
											"end": 2934,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2130,
											"end": 2934,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "49"
										},
										{
											"begin": 2130,
											"end": 2934,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 1714,
											"end": 1817,
											"name": "tag",
											"source": 6,
											"value": "8"
										},
										{
											"begin": 1714,
											"end": 1817,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1714,
											"end": 1817,
											"name": "CALLVALUE",
											"source": 6
										},
										{
											"begin": 1714,
											"end": 1817,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1714,
											"end": 1817,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 1714,
											"end": 1817,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "50"
										},
										{
											"begin": 1714,
											"end": 1817,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 1714,
											"end": 1817,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 1714,
											"end": 1817,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1714,
											"end": 1817,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 1714,
											"end": 1817,
											"name": "tag",
											"source": 6,
											"value": "50"
										},
										{
											"begin": 1714,
											"end": 1817,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1714,
											"end": 1817,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1714,
											"end": 1817,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "35"
										},
										{
											"begin": 1714,
											"end": 1817,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "52"
										},
										{
											"begin": 1714,
											"end": 1817,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 4615,
											"end": 4723,
											"name": "tag",
											"source": 3,
											"value": "9"
										},
										{
											"begin": 4615,
											"end": 4723,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4615,
											"end": 4723,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "35"
										},
										{
											"begin": 4615,
											"end": 4723,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "54"
										},
										{
											"begin": 4615,
											"end": 4723,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 1063,
											"end": 1150,
											"name": "tag",
											"source": 6,
											"value": "10"
										},
										{
											"begin": 1063,
											"end": 1150,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1063,
											"end": 1150,
											"name": "CALLVALUE",
											"source": 6
										},
										{
											"begin": 1063,
											"end": 1150,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1063,
											"end": 1150,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 1063,
											"end": 1150,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "55"
										},
										{
											"begin": 1063,
											"end": 1150,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 1063,
											"end": 1150,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 1063,
											"end": 1150,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1063,
											"end": 1150,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 1063,
											"end": 1150,
											"name": "tag",
											"source": 6,
											"value": "55"
										},
										{
											"begin": 1063,
											"end": 1150,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1136,
											"end": 1142,
											"name": "PUSH",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 1136,
											"end": 1142,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1136,
											"end": 1142,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 1063,
											"end": 1150,
											"name": "tag",
											"source": 6,
											"value": "56"
										},
										{
											"begin": 1063,
											"end": 1150,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1063,
											"end": 1150,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 1063,
											"end": 1150,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2135,
											"end": 2167,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 2135,
											"end": 2167,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 2135,
											"end": 2167,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 2117,
											"end": 2168,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 2117,
											"end": 2168,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 2105,
											"end": 2107,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 2090,
											"end": 2108,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1063,
											"end": 1150,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "24"
										},
										{
											"begin": 2072,
											"end": 2174,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 1451,
											"end": 1485,
											"name": "tag",
											"source": 3,
											"value": "11"
										},
										{
											"begin": 1451,
											"end": 1485,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1451,
											"end": 1485,
											"name": "CALLVALUE",
											"source": 3
										},
										{
											"begin": 1451,
											"end": 1485,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1451,
											"end": 1485,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 1451,
											"end": 1485,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "60"
										},
										{
											"begin": 1451,
											"end": 1485,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 1451,
											"end": 1485,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 1451,
											"end": 1485,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1451,
											"end": 1485,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 1451,
											"end": 1485,
											"name": "tag",
											"source": 3,
											"value": "60"
										},
										{
											"begin": 1451,
											"end": 1485,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1451,
											"end": 1485,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 1451,
											"end": 1485,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 1451,
											"end": 1485,
											"name": "PUSH",
											"source": 3,
											"value": "5"
										},
										{
											"begin": 1451,
											"end": 1485,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 1451,
											"end": 1485,
											"name": "PUSH",
											"source": 3,
											"value": "6"
										},
										{
											"begin": 1451,
											"end": 1485,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 1451,
											"end": 1485,
											"name": "PUSH",
											"source": 3,
											"value": "7"
										},
										{
											"begin": 1451,
											"end": 1485,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 1451,
											"end": 1485,
											"name": "PUSH",
											"source": 3,
											"value": "8"
										},
										{
											"begin": 1451,
											"end": 1485,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 1451,
											"end": 1485,
											"name": "PUSH",
											"source": 3,
											"value": "9"
										},
										{
											"begin": 1451,
											"end": 1485,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 1451,
											"end": 1485,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "61"
										},
										{
											"begin": 1451,
											"end": 1485,
											"name": "SWAP6",
											"source": 3
										},
										{
											"begin": 1451,
											"end": 1485,
											"name": "SWAP5",
											"source": 3
										},
										{
											"begin": 1451,
											"end": 1485,
											"name": "SWAP4",
											"source": 3
										},
										{
											"begin": 1451,
											"end": 1485,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 1451,
											"end": 1485,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 1451,
											"end": 1485,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1451,
											"end": 1485,
											"name": "DUP7",
											"source": 3
										},
										{
											"begin": 1451,
											"end": 1485,
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 1451,
											"end": 1485,
											"name": "tag",
											"source": 3,
											"value": "61"
										},
										{
											"begin": 1451,
											"end": 1485,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1451,
											"end": 1485,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 1451,
											"end": 1485,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1451,
											"end": 1485,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 6510,
											"end": 6535,
											"name": "SWAP7",
											"source": 10
										},
										{
											"begin": 6510,
											"end": 6535,
											"name": "DUP8",
											"source": 10
										},
										{
											"begin": 6510,
											"end": 6535,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 6566,
											"end": 6568,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 6551,
											"end": 6569,
											"name": "DUP8",
											"source": 10
										},
										{
											"begin": 6551,
											"end": 6569,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 6544,
											"end": 6578,
											"name": "SWAP6",
											"source": 10
										},
										{
											"begin": 6544,
											"end": 6578,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 6544,
											"end": 6578,
											"name": "SWAP6",
											"source": 10
										},
										{
											"begin": 6544,
											"end": 6578,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 6594,
											"end": 6612,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 6594,
											"end": 6612,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 6594,
											"end": 6612,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 6587,
											"end": 6621,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 6587,
											"end": 6621,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 6587,
											"end": 6621,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 6587,
											"end": 6621,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 6652,
											"end": 6654,
											"name": "PUSH",
											"source": 10,
											"value": "60"
										},
										{
											"begin": 6637,
											"end": 6655,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 6637,
											"end": 6655,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 6630,
											"end": 6664,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 6695,
											"end": 6698,
											"name": "PUSH",
											"source": 10,
											"value": "80"
										},
										{
											"begin": 6680,
											"end": 6699,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 6680,
											"end": 6699,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 6673,
											"end": 6708,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 6739,
											"end": 6742,
											"name": "PUSH",
											"source": 10,
											"value": "A0"
										},
										{
											"begin": 6724,
											"end": 6743,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 6724,
											"end": 6743,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 6717,
											"end": 6752,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 6497,
											"end": 6500,
											"name": "PUSH",
											"source": 10,
											"value": "C0"
										},
										{
											"begin": 6482,
											"end": 6501,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1451,
											"end": 1485,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "24"
										},
										{
											"begin": 6464,
											"end": 6758,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 1525,
											"end": 1543,
											"name": "tag",
											"source": 3,
											"value": "12"
										},
										{
											"begin": 1525,
											"end": 1543,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1525,
											"end": 1543,
											"name": "CALLVALUE",
											"source": 3
										},
										{
											"begin": 1525,
											"end": 1543,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1525,
											"end": 1543,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 1525,
											"end": 1543,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "65"
										},
										{
											"begin": 1525,
											"end": 1543,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 1525,
											"end": 1543,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 1525,
											"end": 1543,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1525,
											"end": 1543,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 1525,
											"end": 1543,
											"name": "tag",
											"source": 3,
											"value": "65"
										},
										{
											"begin": 1525,
											"end": 1543,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1525,
											"end": 1543,
											"name": "PUSH",
											"source": 3,
											"value": "17"
										},
										{
											"begin": 1525,
											"end": 1543,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 1525,
											"end": 1543,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "56"
										},
										{
											"begin": 1525,
											"end": 1543,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1525,
											"end": 1543,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 1525,
											"end": 1543,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1525,
											"end": 1543,
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 3407,
											"end": 4485,
											"name": "tag",
											"source": 3,
											"value": "13"
										},
										{
											"begin": 3407,
											"end": 4485,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3407,
											"end": 4485,
											"name": "CALLVALUE",
											"source": 3
										},
										{
											"begin": 3407,
											"end": 4485,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 3407,
											"end": 4485,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 3407,
											"end": 4485,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "70"
										},
										{
											"begin": 3407,
											"end": 4485,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 3407,
											"end": 4485,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 3407,
											"end": 4485,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 3407,
											"end": 4485,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 3407,
											"end": 4485,
											"name": "tag",
											"source": 3,
											"value": "70"
										},
										{
											"begin": 3407,
											"end": 4485,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3407,
											"end": 4485,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "27"
										},
										{
											"begin": 3407,
											"end": 4485,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "72"
										},
										{
											"begin": 3407,
											"end": 4485,
											"name": "CALLDATASIZE",
											"source": 3
										},
										{
											"begin": 3407,
											"end": 4485,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 3407,
											"end": 4485,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "37"
										},
										{
											"begin": 3407,
											"end": 4485,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 3407,
											"end": 4485,
											"name": "tag",
											"source": 3,
											"value": "72"
										},
										{
											"begin": 3407,
											"end": 4485,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3407,
											"end": 4485,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "73"
										},
										{
											"begin": 3407,
											"end": 4485,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 3289,
											"end": 3399,
											"name": "tag",
											"source": 3,
											"value": "14"
										},
										{
											"begin": 3289,
											"end": 3399,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3289,
											"end": 3399,
											"name": "CALLVALUE",
											"source": 3
										},
										{
											"begin": 3289,
											"end": 3399,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 3289,
											"end": 3399,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 3289,
											"end": 3399,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "75"
										},
										{
											"begin": 3289,
											"end": 3399,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 3289,
											"end": 3399,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 3289,
											"end": 3399,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 3289,
											"end": 3399,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 3289,
											"end": 3399,
											"name": "tag",
											"source": 3,
											"value": "75"
										},
										{
											"begin": 3289,
											"end": 3399,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3289,
											"end": 3399,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 3289,
											"end": 3399,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "76"
										},
										{
											"begin": 3289,
											"end": 3399,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "77"
										},
										{
											"begin": 3289,
											"end": 3399,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 3289,
											"end": 3399,
											"name": "tag",
											"source": 3,
											"value": "76"
										},
										{
											"begin": 3289,
											"end": 3399,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3289,
											"end": 3399,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 3289,
											"end": 3399,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 3437,
											"end": 3451,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 3437,
											"end": 3451,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 3430,
											"end": 3452,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 3412,
											"end": 3453,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 3412,
											"end": 3453,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 3400,
											"end": 3402,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 3385,
											"end": 3403,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 3289,
											"end": 3399,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "24"
										},
										{
											"begin": 3367,
											"end": 3459,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 1349,
											"end": 1395,
											"name": "tag",
											"source": 3,
											"value": "15"
										},
										{
											"begin": 1349,
											"end": 1395,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1349,
											"end": 1395,
											"name": "CALLVALUE",
											"source": 3
										},
										{
											"begin": 1349,
											"end": 1395,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1349,
											"end": 1395,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 1349,
											"end": 1395,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "80"
										},
										{
											"begin": 1349,
											"end": 1395,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 1349,
											"end": 1395,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 1349,
											"end": 1395,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1349,
											"end": 1395,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 1349,
											"end": 1395,
											"name": "tag",
											"source": 3,
											"value": "80"
										},
										{
											"begin": 1349,
											"end": 1395,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1349,
											"end": 1395,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "81"
										},
										{
											"begin": 1349,
											"end": 1395,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "82"
										},
										{
											"begin": 1349,
											"end": 1395,
											"name": "CALLDATASIZE",
											"source": 3
										},
										{
											"begin": 1349,
											"end": 1395,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 1349,
											"end": 1395,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "42"
										},
										{
											"begin": 1349,
											"end": 1395,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 1349,
											"end": 1395,
											"name": "tag",
											"source": 3,
											"value": "82"
										},
										{
											"begin": 1349,
											"end": 1395,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1349,
											"end": 1395,
											"name": "PUSH",
											"source": 3,
											"value": "2"
										},
										{
											"begin": 1349,
											"end": 1395,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 1349,
											"end": 1395,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1349,
											"end": 1395,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1349,
											"end": 1395,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 1349,
											"end": 1395,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 1349,
											"end": 1395,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 1349,
											"end": 1395,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 1349,
											"end": 1395,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 1349,
											"end": 1395,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 1349,
											"end": 1395,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1349,
											"end": 1395,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 1349,
											"end": 1395,
											"name": "KECCAK256",
											"source": 3
										},
										{
											"begin": 1349,
											"end": 1395,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1349,
											"end": 1395,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 1349,
											"end": 1395,
											"name": "PUSH",
											"source": 3,
											"value": "1"
										},
										{
											"begin": 1349,
											"end": 1395,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 1349,
											"end": 1395,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 1349,
											"end": 1395,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 1349,
											"end": 1395,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 1349,
											"end": 1395,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 1349,
											"end": 1395,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 1349,
											"end": 1395,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 1349,
											"end": 1395,
											"name": "PUSH",
											"source": 3,
											"value": "3"
										},
										{
											"begin": 1349,
											"end": 1395,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 1349,
											"end": 1395,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 1349,
											"end": 1395,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 1349,
											"end": 1395,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 1349,
											"end": 1395,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1349,
											"end": 1395,
											"name": "SWAP4",
											"source": 3
										},
										{
											"begin": 1349,
											"end": 1395,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 1349,
											"end": 1395,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 1349,
											"end": 1395,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 1349,
											"end": 1395,
											"name": "SWAP4",
											"source": 3
										},
										{
											"begin": 1349,
											"end": 1395,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 1349,
											"end": 1395,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1349,
											"end": 1395,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 1349,
											"end": 1395,
											"name": "PUSH",
											"source": 3,
											"value": "FF"
										},
										{
											"begin": 1349,
											"end": 1395,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1349,
											"end": 1395,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 1349,
											"end": 1395,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 1349,
											"end": 1395,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 1349,
											"end": 1395,
											"name": "PUSH",
											"source": 3,
											"value": "100"
										},
										{
											"begin": 1349,
											"end": 1395,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1349,
											"end": 1395,
											"name": "DIV",
											"source": 3
										},
										{
											"begin": 1349,
											"end": 1395,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 1349,
											"end": 1395,
											"name": "DUP7",
											"source": 3
										},
										{
											"begin": 1349,
											"end": 1395,
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 1349,
											"end": 1395,
											"name": "tag",
											"source": 3,
											"value": "81"
										},
										{
											"begin": 1349,
											"end": 1395,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1349,
											"end": 1395,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 1349,
											"end": 1395,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1349,
											"end": 1395,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 5938,
											"end": 5963,
											"name": "SWAP7",
											"source": 10
										},
										{
											"begin": 5938,
											"end": 5963,
											"name": "DUP8",
											"source": 10
										},
										{
											"begin": 5938,
											"end": 5963,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 5994,
											"end": 5996,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 5979,
											"end": 5997,
											"name": "DUP8",
											"source": 10
										},
										{
											"begin": 5979,
											"end": 5997,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 5972,
											"end": 6006,
											"name": "SWAP6",
											"source": 10
										},
										{
											"begin": 5972,
											"end": 6006,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 5972,
											"end": 6006,
											"name": "SWAP6",
											"source": 10
										},
										{
											"begin": 5972,
											"end": 6006,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 6022,
											"end": 6040,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 6022,
											"end": 6040,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 6022,
											"end": 6040,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 6015,
											"end": 6049,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 6015,
											"end": 6049,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 6015,
											"end": 6049,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 6015,
											"end": 6049,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 6080,
											"end": 6082,
											"name": "PUSH",
											"source": 10,
											"value": "60"
										},
										{
											"begin": 6065,
											"end": 6083,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 6065,
											"end": 6083,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 6058,
											"end": 6092,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 6136,
											"end": 6150,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 6129,
											"end": 6151,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 6123,
											"end": 6126,
											"name": "PUSH",
											"source": 10,
											"value": "80"
										},
										{
											"begin": 6108,
											"end": 6127,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 6108,
											"end": 6127,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 6101,
											"end": 6152,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 6196,
											"end": 6210,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 6189,
											"end": 6211,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 6183,
											"end": 6186,
											"name": "PUSH",
											"source": 10,
											"value": "A0"
										},
										{
											"begin": 6168,
											"end": 6187,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 6168,
											"end": 6187,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 6161,
											"end": 6212,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 5925,
											"end": 5928,
											"name": "PUSH",
											"source": 10,
											"value": "C0"
										},
										{
											"begin": 5910,
											"end": 5929,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1349,
											"end": 1395,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "24"
										},
										{
											"begin": 5892,
											"end": 6218,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 1972,
											"end": 2173,
											"name": "tag",
											"source": 6,
											"value": "16"
										},
										{
											"begin": 1972,
											"end": 2173,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1972,
											"end": 2173,
											"name": "CALLVALUE",
											"source": 6
										},
										{
											"begin": 1972,
											"end": 2173,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1972,
											"end": 2173,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 1972,
											"end": 2173,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "86"
										},
										{
											"begin": 1972,
											"end": 2173,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 1972,
											"end": 2173,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 1972,
											"end": 2173,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1972,
											"end": 2173,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 1972,
											"end": 2173,
											"name": "tag",
											"source": 6,
											"value": "86"
										},
										{
											"begin": 1972,
											"end": 2173,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1972,
											"end": 2173,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "35"
										},
										{
											"begin": 1972,
											"end": 2173,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "88"
										},
										{
											"begin": 1972,
											"end": 2173,
											"name": "CALLDATASIZE",
											"source": 6
										},
										{
											"begin": 1972,
											"end": 2173,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 1972,
											"end": 2173,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "42"
										},
										{
											"begin": 1972,
											"end": 2173,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 1972,
											"end": 2173,
											"name": "tag",
											"source": 6,
											"value": "88"
										},
										{
											"begin": 1972,
											"end": 2173,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1972,
											"end": 2173,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "89"
										},
										{
											"begin": 1972,
											"end": 2173,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 4493,
											"end": 4604,
											"name": "tag",
											"source": 3,
											"value": "17"
										},
										{
											"begin": 4493,
											"end": 4604,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4493,
											"end": 4604,
											"name": "CALLVALUE",
											"source": 3
										},
										{
											"begin": 4493,
											"end": 4604,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 4493,
											"end": 4604,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 4493,
											"end": 4604,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "90"
										},
										{
											"begin": 4493,
											"end": 4604,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 4493,
											"end": 4604,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 4493,
											"end": 4604,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 4493,
											"end": 4604,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 4493,
											"end": 4604,
											"name": "tag",
											"source": 3,
											"value": "90"
										},
										{
											"begin": 4493,
											"end": 4604,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4493,
											"end": 4604,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "27"
										},
										{
											"begin": 4493,
											"end": 4604,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "92"
										},
										{
											"begin": 4493,
											"end": 4604,
											"name": "CALLDATASIZE",
											"source": 3
										},
										{
											"begin": 4493,
											"end": 4604,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 4493,
											"end": 4604,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "42"
										},
										{
											"begin": 4493,
											"end": 4604,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 4493,
											"end": 4604,
											"name": "tag",
											"source": 3,
											"value": "92"
										},
										{
											"begin": 4493,
											"end": 4604,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4580,
											"end": 4596,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 4580,
											"end": 4596,
											"name": "BALANCE",
											"source": 3
										},
										{
											"begin": 4580,
											"end": 4596,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4493,
											"end": 4604,
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 2943,
											"end": 3280,
											"name": "tag",
											"source": 3,
											"value": "28"
										},
										{
											"begin": 2943,
											"end": 3280,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3022,
											"end": 3041,
											"name": "PUSH",
											"source": 3,
											"value": "F"
										},
										{
											"begin": 3022,
											"end": 3041,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 2981,
											"end": 2988,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 2981,
											"end": 2988,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3004,
											"end": 3019,
											"name": "TIMESTAMP",
											"source": 3
										},
										{
											"begin": 3004,
											"end": 3041,
											"name": "LT",
											"source": 3
										},
										{
											"begin": 3001,
											"end": 3273,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 3001,
											"end": 3273,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "97"
										},
										{
											"begin": 3001,
											"end": 3273,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3065,
											"end": 3066,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 3065,
											"end": 3066,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2943,
											"end": 3280,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										},
										{
											"begin": 3001,
											"end": 3273,
											"name": "tag",
											"source": 3,
											"value": "97"
										},
										{
											"begin": 3001,
											"end": 3273,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3132,
											"end": 3149,
											"name": "PUSH",
											"source": 3,
											"value": "10"
										},
										{
											"begin": 3132,
											"end": 3149,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 3114,
											"end": 3129,
											"name": "TIMESTAMP",
											"source": 3
										},
										{
											"begin": 3114,
											"end": 3149,
											"name": "GT",
											"source": 3
										},
										{
											"begin": 3111,
											"end": 3262,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 3111,
											"end": 3262,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "99"
										},
										{
											"begin": 3111,
											"end": 3262,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3177,
											"end": 3178,
											"name": "PUSH",
											"source": 3,
											"value": "2"
										},
										{
											"begin": 3177,
											"end": 3178,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2943,
											"end": 3280,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										},
										{
											"begin": 3111,
											"end": 3262,
											"name": "tag",
											"source": 3,
											"value": "99"
										},
										{
											"begin": 3111,
											"end": 3262,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3235,
											"end": 3236,
											"name": "PUSH",
											"source": 3,
											"value": "1"
										},
										{
											"begin": 3235,
											"end": 3236,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2943,
											"end": 3280,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										},
										{
											"begin": 4731,
											"end": 4852,
											"name": "tag",
											"source": 3,
											"value": "38"
										},
										{
											"begin": 4731,
											"end": 4852,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4804,
											"end": 4814,
											"name": "CALLER",
											"source": 3
										},
										{
											"begin": 4796,
											"end": 4844,
											"name": "PUSH",
											"source": 3,
											"value": "8FC"
										},
										{
											"begin": 4825,
											"end": 4843,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "102"
										},
										{
											"begin": 4837,
											"end": 4843,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 4825,
											"end": 4834,
											"name": "CALLVALUE",
											"source": 3
										},
										{
											"begin": 4825,
											"end": 4843,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "103"
										},
										{
											"begin": 4825,
											"end": 4843,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 4825,
											"end": 4843,
											"name": "tag",
											"source": 3,
											"value": "102"
										},
										{
											"begin": 4825,
											"end": 4843,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4796,
											"end": 4844,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 4796,
											"end": 4844,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 4796,
											"end": 4844,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 4796,
											"end": 4844,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 4796,
											"end": 4844,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4796,
											"end": 4844,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 4796,
											"end": 4844,
											"name": "MUL",
											"source": 3
										},
										{
											"begin": 4796,
											"end": 4844,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 4796,
											"end": 4844,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 4796,
											"end": 4844,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 4796,
											"end": 4844,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 4796,
											"end": 4844,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 4796,
											"end": 4844,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 4796,
											"end": 4844,
											"name": "DUP9",
											"source": 3
										},
										{
											"begin": 4796,
											"end": 4844,
											"name": "DUP9",
											"source": 3
										},
										{
											"begin": 4796,
											"end": 4844,
											"name": "CALL",
											"source": 3
										},
										{
											"begin": 4796,
											"end": 4844,
											"name": "SWAP4",
											"source": 3
										},
										{
											"begin": 4796,
											"end": 4844,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 4796,
											"end": 4844,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 4796,
											"end": 4844,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 4796,
											"end": 4844,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 4796,
											"end": 4844,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 4796,
											"end": 4844,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 4796,
											"end": 4844,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 4796,
											"end": 4844,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "105"
										},
										{
											"begin": 4796,
											"end": 4844,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 4796,
											"end": 4844,
											"name": "RETURNDATASIZE",
											"source": 3
										},
										{
											"begin": 4796,
											"end": 4844,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 4796,
											"end": 4844,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 4796,
											"end": 4844,
											"name": "RETURNDATACOPY",
											"source": 3
										},
										{
											"begin": 4796,
											"end": 4844,
											"name": "RETURNDATASIZE",
											"source": 3
										},
										{
											"begin": 4796,
											"end": 4844,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 4796,
											"end": 4844,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 4796,
											"end": 4844,
											"name": "tag",
											"source": 3,
											"value": "105"
										},
										{
											"begin": 4796,
											"end": 4844,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4796,
											"end": 4844,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 4731,
											"end": 4852,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 4731,
											"end": 4852,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										},
										{
											"begin": 2130,
											"end": 2934,
											"name": "tag",
											"source": 3,
											"value": "49"
										},
										{
											"begin": 2130,
											"end": 2934,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2311,
											"end": 2320,
											"name": "PUSH",
											"source": 3,
											"value": "B"
										},
										{
											"begin": 2311,
											"end": 2349,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2311,
											"end": 2349,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2311,
											"end": 2349,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2311,
											"end": 2349,
											"name": "DUP8",
											"source": 3
										},
										{
											"begin": 2311,
											"end": 2349,
											"name": "AND",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 2311,
											"end": 2349,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 2311,
											"end": 2349,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 2311,
											"end": 2349,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 2311,
											"end": 2349,
											"name": "OR",
											"source": 3
										},
										{
											"begin": 2311,
											"end": 2349,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2311,
											"end": 2349,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 2311,
											"end": 2349,
											"name": "SSTORE",
											"source": 3
										},
										{
											"begin": 2360,
											"end": 2379,
											"name": "PUSH",
											"source": 3,
											"value": "C"
										},
										{
											"begin": 2360,
											"end": 2392,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2360,
											"end": 2392,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 2360,
											"end": 2392,
											"name": "DUP7",
											"source": 3
										},
										{
											"begin": 2360,
											"end": 2392,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 2360,
											"end": 2392,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 2360,
											"end": 2392,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2360,
											"end": 2392,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 2360,
											"end": 2392,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 2360,
											"end": 2392,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 2360,
											"end": 2392,
											"name": "OR",
											"source": 3
										},
										{
											"begin": 2360,
											"end": 2392,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2360,
											"end": 2392,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 2360,
											"end": 2392,
											"name": "SSTORE",
											"source": 3
										},
										{
											"begin": 2403,
											"end": 2422,
											"name": "PUSH",
											"source": 3,
											"value": "D"
										},
										{
											"begin": 2403,
											"end": 2435,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2403,
											"end": 2435,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 2403,
											"end": 2435,
											"name": "SWAP4",
											"source": 3
										},
										{
											"begin": 2403,
											"end": 2435,
											"name": "DUP7",
											"source": 3
										},
										{
											"begin": 2403,
											"end": 2435,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 2403,
											"end": 2435,
											"name": "SWAP4",
											"source": 3
										},
										{
											"begin": 2403,
											"end": 2435,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2403,
											"end": 2435,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 2403,
											"end": 2435,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 2403,
											"end": 2435,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 2403,
											"end": 2435,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2403,
											"end": 2435,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 2403,
											"end": 2435,
											"name": "OR",
											"source": 3
										},
										{
											"begin": 2403,
											"end": 2435,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2403,
											"end": 2435,
											"name": "SSTORE",
											"source": 3
										},
										{
											"begin": 2493,
											"end": 2530,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 2493,
											"end": 2530,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2493,
											"end": 2530,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "313CE567"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2493,
											"end": 2530,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 2493,
											"end": 2530,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 2493,
											"end": 2530,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2493,
											"end": 2530,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 2493,
											"end": 2528,
											"name": "PUSH",
											"source": 3,
											"value": "313CE567"
										},
										{
											"begin": 2493,
											"end": 2528,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 2493,
											"end": 2530,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 2493,
											"end": 2530,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2493,
											"end": 2530,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 2493,
											"end": 2530,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2493,
											"end": 2530,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 2493,
											"end": 2530,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 2493,
											"end": 2530,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 2493,
											"end": 2530,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2493,
											"end": 2530,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 2493,
											"end": 2530,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2493,
											"end": 2530,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 2493,
											"end": 2530,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2493,
											"end": 2530,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 2493,
											"end": 2530,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2493,
											"end": 2530,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 2360,
											"end": 2392,
											"name": "DUP7",
											"source": 3
										},
										{
											"begin": 2493,
											"end": 2530,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2493,
											"end": 2530,
											"name": "EXTCODESIZE",
											"source": 3
										},
										{
											"begin": 2493,
											"end": 2530,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 2493,
											"end": 2530,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2493,
											"end": 2530,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 2493,
											"end": 2530,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "107"
										},
										{
											"begin": 2493,
											"end": 2530,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 2493,
											"end": 2530,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 2493,
											"end": 2530,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2493,
											"end": 2530,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 2493,
											"end": 2530,
											"name": "tag",
											"source": 3,
											"value": "107"
										},
										{
											"begin": 2493,
											"end": 2530,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2493,
											"end": 2530,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2493,
											"end": 2530,
											"name": "GAS",
											"source": 3
										},
										{
											"begin": 2493,
											"end": 2530,
											"name": "STATICCALL",
											"source": 3
										},
										{
											"begin": 2493,
											"end": 2530,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 2493,
											"end": 2530,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2493,
											"end": 2530,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 2493,
											"end": 2530,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "109"
										},
										{
											"begin": 2493,
											"end": 2530,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 2493,
											"end": 2530,
											"name": "RETURNDATASIZE",
											"source": 3
										},
										{
											"begin": 2493,
											"end": 2530,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 2493,
											"end": 2530,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2493,
											"end": 2530,
											"name": "RETURNDATACOPY",
											"source": 3
										},
										{
											"begin": 2493,
											"end": 2530,
											"name": "RETURNDATASIZE",
											"source": 3
										},
										{
											"begin": 2493,
											"end": 2530,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 2493,
											"end": 2530,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 2493,
											"end": 2530,
											"name": "tag",
											"source": 3,
											"value": "109"
										},
										{
											"begin": 2493,
											"end": 2530,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2493,
											"end": 2530,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2493,
											"end": 2530,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2493,
											"end": 2530,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2493,
											"end": 2530,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2493,
											"end": 2530,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 2493,
											"end": 2530,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 2493,
											"end": 2530,
											"name": "RETURNDATASIZE",
											"source": 3
										},
										{
											"begin": 2493,
											"end": 2530,
											"name": "PUSH",
											"source": 3,
											"value": "1F"
										},
										{
											"begin": 2493,
											"end": 2530,
											"name": "NOT",
											"source": 3
										},
										{
											"begin": 2493,
											"end": 2530,
											"name": "PUSH",
											"source": 3,
											"value": "1F"
										},
										{
											"begin": 2493,
											"end": 2530,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 2493,
											"end": 2530,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2493,
											"end": 2530,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 2493,
											"end": 2530,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 2493,
											"end": 2530,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2493,
											"end": 2530,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2493,
											"end": 2530,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 2493,
											"end": 2530,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 2493,
											"end": 2530,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2493,
											"end": 2530,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 2493,
											"end": 2530,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2493,
											"end": 2530,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2493,
											"end": 2530,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "110"
										},
										{
											"begin": 2493,
											"end": 2530,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 2493,
											"end": 2530,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2493,
											"end": 2530,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "111"
										},
										{
											"begin": 2493,
											"end": 2530,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 2493,
											"end": 2530,
											"name": "tag",
											"source": 3,
											"value": "110"
										},
										{
											"begin": 2493,
											"end": 2530,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2480,
											"end": 2531,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "112"
										},
										{
											"begin": 2480,
											"end": 2531,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2480,
											"end": 2482,
											"name": "PUSH",
											"source": 3,
											"value": "A"
										},
										{
											"begin": 2480,
											"end": 2531,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "113"
										},
										{
											"begin": 2480,
											"end": 2531,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 2480,
											"end": 2531,
											"name": "tag",
											"source": 3,
											"value": "112"
										},
										{
											"begin": 2480,
											"end": 2531,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2469,
											"end": 2477,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 2469,
											"end": 2477,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 2469,
											"end": 2531,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "115"
										},
										{
											"begin": 2469,
											"end": 2531,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 2469,
											"end": 2531,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2469,
											"end": 2531,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "116"
										},
										{
											"begin": 2469,
											"end": 2531,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 2469,
											"end": 2531,
											"name": "tag",
											"source": 3,
											"value": "115"
										},
										{
											"begin": 2469,
											"end": 2531,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2446,
											"end": 2466,
											"name": "PUSH",
											"source": 3,
											"value": "E"
										},
										{
											"begin": 2446,
											"end": 2531,
											"name": "SSTORE",
											"source": 3
										},
										{
											"begin": 2564,
											"end": 2572,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 2564,
											"end": 2572,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2564,
											"end": 2572,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 2564,
											"end": 2572,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2564,
											"end": 2572,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 2542,
											"end": 2561,
											"name": "PUSH",
											"source": 3,
											"value": "F"
										},
										{
											"begin": 2542,
											"end": 2572,
											"name": "SSTORE",
											"source": 3
										},
										{
											"begin": 2603,
											"end": 2611,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 2603,
											"end": 2611,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2603,
											"end": 2611,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 2603,
											"end": 2611,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2603,
											"end": 2611,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 2583,
											"end": 2600,
											"name": "PUSH",
											"source": 3,
											"value": "10"
										},
										{
											"begin": 2583,
											"end": 2611,
											"name": "SSTORE",
											"source": 3
										},
										{
											"begin": 2651,
											"end": 2659,
											"name": "PUSH",
											"source": 3,
											"value": "60"
										},
										{
											"begin": 2651,
											"end": 2659,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 2651,
											"end": 2659,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2651,
											"end": 2659,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 2622,
											"end": 2648,
											"name": "PUSH",
											"source": 3,
											"value": "11"
										},
										{
											"begin": 2622,
											"end": 2659,
											"name": "SSTORE",
											"source": 3
										},
										{
											"begin": 2729,
											"end": 2748,
											"name": "PUSH",
											"source": 3,
											"value": "D"
										},
										{
											"begin": 2729,
											"end": 2748,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 2723,
											"end": 2760,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 2723,
											"end": 2760,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "313CE567"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2723,
											"end": 2760,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 2723,
											"end": 2760,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 2723,
											"end": 2760,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 2723,
											"end": 2760,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2729,
											"end": 2748,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2729,
											"end": 2748,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 2729,
											"end": 2748,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 2729,
											"end": 2748,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 2723,
											"end": 2758,
											"name": "PUSH",
											"source": 3,
											"value": "313CE567"
										},
										{
											"begin": 2723,
											"end": 2758,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 2723,
											"end": 2760,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 2723,
											"end": 2760,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2723,
											"end": 2760,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 2723,
											"end": 2760,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2723,
											"end": 2760,
											"name": "SWAP4",
											"source": 3
										},
										{
											"begin": 2723,
											"end": 2760,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 2723,
											"end": 2760,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 2723,
											"end": 2760,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2723,
											"end": 2760,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 2723,
											"end": 2760,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2723,
											"end": 2760,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 2729,
											"end": 2748,
											"name": "DUP7",
											"source": 3
										},
										{
											"begin": 2723,
											"end": 2760,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2723,
											"end": 2760,
											"name": "EXTCODESIZE",
											"source": 3
										},
										{
											"begin": 2723,
											"end": 2760,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 2723,
											"end": 2760,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2723,
											"end": 2760,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 2723,
											"end": 2760,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "120"
										},
										{
											"begin": 2723,
											"end": 2760,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 2723,
											"end": 2760,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 2723,
											"end": 2760,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2723,
											"end": 2760,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 2723,
											"end": 2760,
											"name": "tag",
											"source": 3,
											"value": "120"
										},
										{
											"begin": 2723,
											"end": 2760,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2723,
											"end": 2760,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2723,
											"end": 2760,
											"name": "GAS",
											"source": 3
										},
										{
											"begin": 2723,
											"end": 2760,
											"name": "STATICCALL",
											"source": 3
										},
										{
											"begin": 2723,
											"end": 2760,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 2723,
											"end": 2760,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2723,
											"end": 2760,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 2723,
											"end": 2760,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "122"
										},
										{
											"begin": 2723,
											"end": 2760,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 2723,
											"end": 2760,
											"name": "RETURNDATASIZE",
											"source": 3
										},
										{
											"begin": 2723,
											"end": 2760,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 2723,
											"end": 2760,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2723,
											"end": 2760,
											"name": "RETURNDATACOPY",
											"source": 3
										},
										{
											"begin": 2723,
											"end": 2760,
											"name": "RETURNDATASIZE",
											"source": 3
										},
										{
											"begin": 2723,
											"end": 2760,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 2723,
											"end": 2760,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 2723,
											"end": 2760,
											"name": "tag",
											"source": 3,
											"value": "122"
										},
										{
											"begin": 2723,
											"end": 2760,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2723,
											"end": 2760,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2723,
											"end": 2760,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2723,
											"end": 2760,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2723,
											"end": 2760,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2723,
											"end": 2760,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 2723,
											"end": 2760,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 2723,
											"end": 2760,
											"name": "RETURNDATASIZE",
											"source": 3
										},
										{
											"begin": 2723,
											"end": 2760,
											"name": "PUSH",
											"source": 3,
											"value": "1F"
										},
										{
											"begin": 2723,
											"end": 2760,
											"name": "NOT",
											"source": 3
										},
										{
											"begin": 2723,
											"end": 2760,
											"name": "PUSH",
											"source": 3,
											"value": "1F"
										},
										{
											"begin": 2723,
											"end": 2760,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 2723,
											"end": 2760,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2723,
											"end": 2760,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 2723,
											"end": 2760,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 2723,
											"end": 2760,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2723,
											"end": 2760,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2723,
											"end": 2760,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 2723,
											"end": 2760,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 2723,
											"end": 2760,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2723,
											"end": 2760,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 2723,
											"end": 2760,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2723,
											"end": 2760,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2723,
											"end": 2760,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "123"
										},
										{
											"begin": 2723,
											"end": 2760,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 2723,
											"end": 2760,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2723,
											"end": 2760,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "111"
										},
										{
											"begin": 2723,
											"end": 2760,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 2723,
											"end": 2760,
											"name": "tag",
											"source": 3,
											"value": "123"
										},
										{
											"begin": 2723,
											"end": 2760,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2710,
											"end": 2761,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "124"
										},
										{
											"begin": 2710,
											"end": 2761,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2710,
											"end": 2712,
											"name": "PUSH",
											"source": 3,
											"value": "A"
										},
										{
											"begin": 2710,
											"end": 2761,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "113"
										},
										{
											"begin": 2710,
											"end": 2761,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 2710,
											"end": 2761,
											"name": "tag",
											"source": 3,
											"value": "124"
										},
										{
											"begin": 2710,
											"end": 2761,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2699,
											"end": 2707,
											"name": "PUSH",
											"source": 3,
											"value": "80"
										},
										{
											"begin": 2699,
											"end": 2707,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 2699,
											"end": 2707,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2699,
											"end": 2707,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 2699,
											"end": 2761,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "126"
										},
										{
											"begin": 2699,
											"end": 2761,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 2699,
											"end": 2761,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2699,
											"end": 2761,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "116"
										},
										{
											"begin": 2699,
											"end": 2761,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 2699,
											"end": 2761,
											"name": "tag",
											"source": 3,
											"value": "126"
										},
										{
											"begin": 2699,
											"end": 2761,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2670,
											"end": 2696,
											"name": "PUSH",
											"source": 3,
											"value": "12"
										},
										{
											"begin": 2670,
											"end": 2761,
											"name": "SSTORE",
											"source": 3
										},
										{
											"begin": 2794,
											"end": 2802,
											"name": "PUSH",
											"source": 3,
											"value": "A0"
										},
										{
											"begin": 2794,
											"end": 2802,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 2794,
											"end": 2802,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2794,
											"end": 2802,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 2772,
											"end": 2791,
											"name": "PUSH",
											"source": 3,
											"value": "13"
										},
										{
											"begin": 2772,
											"end": 2802,
											"name": "SSTORE",
											"source": 3
										},
										{
											"begin": 2834,
											"end": 2842,
											"name": "PUSH",
											"source": 3,
											"value": "C0"
										},
										{
											"begin": 2834,
											"end": 2842,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2834,
											"end": 2842,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 2813,
											"end": 2831,
											"name": "PUSH",
											"source": 3,
											"value": "14"
										},
										{
											"begin": 2813,
											"end": 2842,
											"name": "SSTORE",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2906,
											"end": 2925,
											"name": "PUSH",
											"source": 3,
											"value": "D"
										},
										{
											"begin": 2906,
											"end": 2925,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 2889,
											"end": 2893,
											"name": "PUSH",
											"source": 3,
											"value": "17"
										},
										{
											"begin": 2889,
											"end": 2893,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 2853,
											"end": 2878,
											"name": "PUSH",
											"source": 3,
											"value": "15"
										},
										{
											"begin": 2853,
											"end": 2926,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2853,
											"end": 2926,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2906,
											"end": 2925,
											"name": "SWAP4",
											"source": 3
										},
										{
											"begin": 2906,
											"end": 2925,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 2906,
											"end": 2925,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 2889,
											"end": 2893,
											"name": "SWAP4",
											"source": 3
										},
										{
											"begin": 2889,
											"end": 2893,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2889,
											"end": 2893,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 2889,
											"end": 2893,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 2881,
											"end": 2926,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 2881,
											"end": 2926,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2881,
											"end": 2926,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 2881,
											"end": 2926,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 2853,
											"end": 2926,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2853,
											"end": 2926,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 2853,
											"end": 2926,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 2853,
											"end": 2926,
											"name": "OR",
											"source": 3
										},
										{
											"begin": 2853,
											"end": 2926,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2853,
											"end": 2926,
											"name": "SSTORE",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2130,
											"end": 2934,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										},
										{
											"begin": 1714,
											"end": 1817,
											"name": "tag",
											"source": 6,
											"value": "52"
										},
										{
											"begin": 1714,
											"end": 1817,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1136,
											"end": 1142,
											"name": "PUSH",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 1136,
											"end": 1142,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1136,
											"end": 1142,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 736,
											"end": 746,
											"name": "CALLER",
											"source": 4
										},
										{
											"begin": 1283,
											"end": 1306,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 1275,
											"end": 1343,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "133"
										},
										{
											"begin": 1275,
											"end": 1343,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 1275,
											"end": 1343,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 1275,
											"end": 1343,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1275,
											"end": 1343,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1275,
											"end": 1343,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 5322,
											"end": 5324,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 1275,
											"end": 1343,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 1275,
											"end": 1343,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 1275,
											"end": 1343,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5304,
											"end": 5325,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 5304,
											"end": 5325,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 5304,
											"end": 5325,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 5341,
											"end": 5359,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 5341,
											"end": 5359,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 5341,
											"end": 5359,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 5334,
											"end": 5364,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 5400,
											"end": 5434,
											"name": "PUSH",
											"source": 10,
											"value": "4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572"
										},
										{
											"begin": 5380,
											"end": 5398,
											"name": "PUSH",
											"source": 10,
											"value": "44"
										},
										{
											"begin": 5380,
											"end": 5398,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 5380,
											"end": 5398,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 5373,
											"end": 5435,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 5452,
											"end": 5470,
											"name": "PUSH",
											"source": 10,
											"value": "64"
										},
										{
											"begin": 5452,
											"end": 5470,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1275,
											"end": 1343,
											"name": "tag",
											"source": 6,
											"value": "134"
										},
										{
											"begin": 1275,
											"end": 1343,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1275,
											"end": 1343,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 1275,
											"end": 1343,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 1275,
											"end": 1343,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1275,
											"end": 1343,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 1275,
											"end": 1343,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 1275,
											"end": 1343,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1275,
											"end": 1343,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 1275,
											"end": 1343,
											"name": "tag",
											"source": 6,
											"value": "133"
										},
										{
											"begin": 1275,
											"end": 1343,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1779,
											"end": 1809,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "137"
										},
										{
											"begin": 1806,
											"end": 1807,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 1779,
											"end": 1797,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "138"
										},
										{
											"begin": 1779,
											"end": 1809,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 1779,
											"end": 1809,
											"name": "tag",
											"source": 6,
											"value": "137"
										},
										{
											"begin": 1779,
											"end": 1809,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1714,
											"end": 1817,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 4615,
											"end": 4723,
											"name": "tag",
											"source": 3,
											"value": "54"
										},
										{
											"begin": 4615,
											"end": 4723,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4664,
											"end": 4715,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 4664,
											"end": 4715,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 4672,
											"end": 4682,
											"name": "CALLER",
											"source": 3
										},
										{
											"begin": 4672,
											"end": 4682,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4693,
											"end": 4714,
											"name": "SELFBALANCE",
											"source": 3
										},
										{
											"begin": 4664,
											"end": 4715,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 4664,
											"end": 4715,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 4664,
											"end": 4715,
											"name": "PUSH",
											"source": 3,
											"value": "8FC"
										},
										{
											"begin": 4664,
											"end": 4715,
											"name": "MUL",
											"source": 3
										},
										{
											"begin": 4664,
											"end": 4715,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 4664,
											"end": 4715,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 4664,
											"end": 4715,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 4664,
											"end": 4715,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 4664,
											"end": 4715,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 4693,
											"end": 4714,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 4672,
											"end": 4682,
											"name": "DUP9",
											"source": 3
										},
										{
											"begin": 4664,
											"end": 4715,
											"name": "DUP9",
											"source": 3
										},
										{
											"begin": 4664,
											"end": 4715,
											"name": "CALL",
											"source": 3
										},
										{
											"begin": 4664,
											"end": 4715,
											"name": "SWAP4",
											"source": 3
										},
										{
											"begin": 4664,
											"end": 4715,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 4664,
											"end": 4715,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 4664,
											"end": 4715,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 4664,
											"end": 4715,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 4664,
											"end": 4715,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 4664,
											"end": 4715,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 4664,
											"end": 4715,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 4664,
											"end": 4715,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "141"
										},
										{
											"begin": 4664,
											"end": 4715,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 4664,
											"end": 4715,
											"name": "RETURNDATASIZE",
											"source": 3
										},
										{
											"begin": 4664,
											"end": 4715,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 4664,
											"end": 4715,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 4664,
											"end": 4715,
											"name": "RETURNDATACOPY",
											"source": 3
										},
										{
											"begin": 4664,
											"end": 4715,
											"name": "RETURNDATASIZE",
											"source": 3
										},
										{
											"begin": 4664,
											"end": 4715,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 4664,
											"end": 4715,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 4664,
											"end": 4715,
											"name": "tag",
											"source": 3,
											"value": "141"
										},
										{
											"begin": 4664,
											"end": 4715,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4664,
											"end": 4715,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 4615,
											"end": 4723,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										},
										{
											"begin": 3407,
											"end": 4485,
											"name": "tag",
											"source": 3,
											"value": "73"
										},
										{
											"begin": 3407,
											"end": 4485,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3463,
											"end": 3470,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 3491,
											"end": 3499,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "144"
										},
										{
											"begin": 3491,
											"end": 3497,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "28"
										},
										{
											"begin": 3491,
											"end": 3499,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 3491,
											"end": 3499,
											"name": "tag",
											"source": 3,
											"value": "144"
										},
										{
											"begin": 3491,
											"end": 3499,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3503,
											"end": 3504,
											"name": "PUSH",
											"source": 3,
											"value": "1"
										},
										{
											"begin": 3491,
											"end": 3504,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 3483,
											"end": 3519,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "145"
										},
										{
											"begin": 3483,
											"end": 3519,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 3483,
											"end": 3519,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 3483,
											"end": 3519,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3483,
											"end": 3519,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 3483,
											"end": 3519,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 4638,
											"end": 4640,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 3483,
											"end": 3519,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 3483,
											"end": 3519,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 3483,
											"end": 3519,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 4620,
											"end": 4641,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 4677,
											"end": 4679,
											"name": "PUSH",
											"source": 10,
											"value": "A"
										},
										{
											"begin": 4657,
											"end": 4675,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 4657,
											"end": 4675,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 4657,
											"end": 4675,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 4650,
											"end": 4680,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "4E4F5420414354495645"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "B0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4696,
											"end": 4714,
											"name": "PUSH",
											"source": 10,
											"value": "44"
										},
										{
											"begin": 4696,
											"end": 4714,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 4696,
											"end": 4714,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 4689,
											"end": 4729,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 4746,
											"end": 4764,
											"name": "PUSH",
											"source": 10,
											"value": "64"
										},
										{
											"begin": 4746,
											"end": 4764,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 3483,
											"end": 3519,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "134"
										},
										{
											"begin": 4610,
											"end": 4770,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 3483,
											"end": 3519,
											"name": "tag",
											"source": 3,
											"value": "145"
										},
										{
											"begin": 3483,
											"end": 3519,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3576,
											"end": 3586,
											"name": "CALLER",
											"source": 3
										},
										{
											"begin": 3540,
											"end": 3563,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 3566,
											"end": 3587,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3566,
											"end": 3587,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 3566,
											"end": 3587,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 3566,
											"end": 3575,
											"name": "PUSH",
											"source": 3,
											"value": "2"
										},
										{
											"begin": 3566,
											"end": 3587,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 3566,
											"end": 3587,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 3566,
											"end": 3587,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 3566,
											"end": 3587,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 3566,
											"end": 3587,
											"name": "KECCAK256",
											"source": 3
										},
										{
											"begin": 3772,
											"end": 3798,
											"name": "PUSH",
											"source": 3,
											"value": "11"
										},
										{
											"begin": 3772,
											"end": 3798,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 3566,
											"end": 3587,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3566,
											"end": 3587,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 3618,
											"end": 3625,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 3618,
											"end": 3625,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 3618,
											"end": 3625,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 3618,
											"end": 3625,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 3540,
											"end": 3563,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3731,
											"end": 3735,
											"name": "PUSH",
											"source": 3,
											"value": "3E8"
										},
										{
											"begin": 3731,
											"end": 3735,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3754,
											"end": 3798,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 3754,
											"end": 3798,
											"name": "LT",
											"source": 3
										},
										{
											"begin": 3754,
											"end": 3798,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 3746,
											"end": 3847,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "148"
										},
										{
											"begin": 3746,
											"end": 3847,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 3746,
											"end": 3847,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 3746,
											"end": 3847,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3746,
											"end": 3847,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 3746,
											"end": 3847,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 4977,
											"end": 4979,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 3746,
											"end": 3847,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 3746,
											"end": 3847,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 3746,
											"end": 3847,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 4959,
											"end": 4980,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 5016,
											"end": 5018,
											"name": "PUSH",
											"source": 10,
											"value": "10"
										},
										{
											"begin": 4996,
											"end": 5014,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 4996,
											"end": 5014,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 4996,
											"end": 5014,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 4989,
											"end": 5019,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "4E6F7420656E6F7567682076616C7565"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "80"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5035,
											"end": 5053,
											"name": "PUSH",
											"source": 10,
											"value": "44"
										},
										{
											"begin": 5035,
											"end": 5053,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 5035,
											"end": 5053,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 5028,
											"end": 5074,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 5091,
											"end": 5109,
											"name": "PUSH",
											"source": 10,
											"value": "64"
										},
										{
											"begin": 5091,
											"end": 5109,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 3746,
											"end": 3847,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "134"
										},
										{
											"begin": 4949,
											"end": 5115,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 3746,
											"end": 3847,
											"name": "tag",
											"source": 3,
											"value": "148"
										},
										{
											"begin": 3746,
											"end": 3847,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3884,
											"end": 3910,
											"name": "PUSH",
											"source": 3,
											"value": "12"
										},
										{
											"begin": 3884,
											"end": 3910,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 3866,
											"end": 3910,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 3866,
											"end": 3910,
											"name": "GT",
											"source": 3
										},
										{
											"begin": 3866,
											"end": 3910,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 3858,
											"end": 3957,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "151"
										},
										{
											"begin": 3858,
											"end": 3957,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 3858,
											"end": 3957,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 3858,
											"end": 3957,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3858,
											"end": 3957,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 3858,
											"end": 3957,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 4295,
											"end": 4297,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 3858,
											"end": 3957,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 3858,
											"end": 3957,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 3858,
											"end": 3957,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 4277,
											"end": 4298,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 4334,
											"end": 4336,
											"name": "PUSH",
											"source": 10,
											"value": "E"
										},
										{
											"begin": 4314,
											"end": 4332,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 4314,
											"end": 4332,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 4314,
											"end": 4332,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 4307,
											"end": 4337,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "4F766572666C6F772076616C7565"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "90"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4353,
											"end": 4371,
											"name": "PUSH",
											"source": 10,
											"value": "44"
										},
										{
											"begin": 4353,
											"end": 4371,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 4353,
											"end": 4371,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 4346,
											"end": 4390,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 4407,
											"end": 4425,
											"name": "PUSH",
											"source": 10,
											"value": "64"
										},
										{
											"begin": 4407,
											"end": 4425,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 3858,
											"end": 3957,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "134"
										},
										{
											"begin": 4267,
											"end": 4431,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 3858,
											"end": 3957,
											"name": "tag",
											"source": 3,
											"value": "151"
										},
										{
											"begin": 3858,
											"end": 3957,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3972,
											"end": 3991,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "154"
										},
										{
											"begin": 3972,
											"end": 3989,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "77"
										},
										{
											"begin": 3972,
											"end": 3991,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 3972,
											"end": 3991,
											"name": "tag",
											"source": 3,
											"value": "154"
										},
										{
											"begin": 3972,
											"end": 3991,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3968,
											"end": 4170,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "155"
										},
										{
											"begin": 3968,
											"end": 4170,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 4025,
											"end": 4158,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "156"
										},
										{
											"begin": 4144,
											"end": 4157,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 4026,
											"end": 4107,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "157"
										},
										{
											"begin": 4092,
											"end": 4106,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 4027,
											"end": 4055,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "158"
										},
										{
											"begin": 4045,
											"end": 4054,
											"name": "PUSH",
											"source": 3,
											"value": "18"
										},
										{
											"begin": 4045,
											"end": 4054,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 4027,
											"end": 4040,
											"name": "DUP7",
											"source": 3
										},
										{
											"begin": 4027,
											"end": 4044,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "159"
										},
										{
											"begin": 4027,
											"end": 4044,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4027,
											"end": 4055,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 4027,
											"end": 4055,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4027,
											"end": 4055,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFF"
										},
										{
											"begin": 4027,
											"end": 4055,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 4027,
											"end": 4055,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 4027,
											"end": 4055,
											"name": "tag",
											"source": 3,
											"value": "158"
										},
										{
											"begin": 4027,
											"end": 4055,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4026,
											"end": 4091,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4026,
											"end": 4091,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "160"
										},
										{
											"begin": 4026,
											"end": 4107,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 4026,
											"end": 4107,
											"name": "tag",
											"source": 3,
											"value": "157"
										},
										{
											"begin": 4026,
											"end": 4107,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4025,
											"end": 4143,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4025,
											"end": 4143,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "161"
										},
										{
											"begin": 4025,
											"end": 4158,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 4025,
											"end": 4158,
											"name": "tag",
											"source": 3,
											"value": "156"
										},
										{
											"begin": 4025,
											"end": 4158,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4008,
											"end": 4158,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 4008,
											"end": 4158,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 3968,
											"end": 4170,
											"name": "tag",
											"source": 3,
											"value": "155"
										},
										{
											"begin": 3968,
											"end": 4170,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4200,
											"end": 4226,
											"name": "PUSH",
											"source": 3,
											"value": "12"
										},
										{
											"begin": 4200,
											"end": 4226,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 4180,
											"end": 4197,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 4180,
											"end": 4197,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4200,
											"end": 4243,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "162"
										},
										{
											"begin": 4200,
											"end": 4243,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4229,
											"end": 4243,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 4229,
											"end": 4243,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4200,
											"end": 4243,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "103"
										},
										{
											"begin": 4200,
											"end": 4243,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 4200,
											"end": 4243,
											"name": "tag",
											"source": 3,
											"value": "162"
										},
										{
											"begin": 4200,
											"end": 4243,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4400,
											"end": 4419,
											"name": "PUSH",
											"source": 3,
											"value": "D"
										},
										{
											"begin": 4400,
											"end": 4419,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 4394,
											"end": 4431,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 4394,
											"end": 4431,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 4394,
											"end": 4431,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "313CE567"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4394,
											"end": 4431,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 4394,
											"end": 4431,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 4394,
											"end": 4431,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4394,
											"end": 4431,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 4180,
											"end": 4243,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 4180,
											"end": 4243,
											"name": "SWAP4",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4254,
											"end": 4271,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 4254,
											"end": 4271,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 4275,
											"end": 4433,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "163"
										},
										{
											"begin": 4275,
											"end": 4433,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4400,
											"end": 4419,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 4400,
											"end": 4419,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 4394,
											"end": 4429,
											"name": "PUSH",
											"source": 3,
											"value": "313CE567"
										},
										{
											"begin": 4394,
											"end": 4429,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 4394,
											"end": 4431,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 4394,
											"end": 4431,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 4394,
											"end": 4431,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 4394,
											"end": 4431,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 4394,
											"end": 4431,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 4394,
											"end": 4431,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 4394,
											"end": 4431,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 4394,
											"end": 4431,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 4394,
											"end": 4431,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4394,
											"end": 4431,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 4394,
											"end": 4431,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4394,
											"end": 4431,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 4394,
											"end": 4431,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 4394,
											"end": 4431,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 4400,
											"end": 4419,
											"name": "DUP7",
											"source": 3
										},
										{
											"begin": 4394,
											"end": 4431,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 4394,
											"end": 4431,
											"name": "EXTCODESIZE",
											"source": 3
										},
										{
											"begin": 4394,
											"end": 4431,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 4394,
											"end": 4431,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 4394,
											"end": 4431,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 4394,
											"end": 4431,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "164"
										},
										{
											"begin": 4394,
											"end": 4431,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 4394,
											"end": 4431,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 4394,
											"end": 4431,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 4394,
											"end": 4431,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 4394,
											"end": 4431,
											"name": "tag",
											"source": 3,
											"value": "164"
										},
										{
											"begin": 4394,
											"end": 4431,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4394,
											"end": 4431,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 4394,
											"end": 4431,
											"name": "GAS",
											"source": 3
										},
										{
											"begin": 4394,
											"end": 4431,
											"name": "STATICCALL",
											"source": 3
										},
										{
											"begin": 4394,
											"end": 4431,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 4394,
											"end": 4431,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 4394,
											"end": 4431,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 4394,
											"end": 4431,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "166"
										},
										{
											"begin": 4394,
											"end": 4431,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 4394,
											"end": 4431,
											"name": "RETURNDATASIZE",
											"source": 3
										},
										{
											"begin": 4394,
											"end": 4431,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 4394,
											"end": 4431,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 4394,
											"end": 4431,
											"name": "RETURNDATACOPY",
											"source": 3
										},
										{
											"begin": 4394,
											"end": 4431,
											"name": "RETURNDATASIZE",
											"source": 3
										},
										{
											"begin": 4394,
											"end": 4431,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 4394,
											"end": 4431,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 4394,
											"end": 4431,
											"name": "tag",
											"source": 3,
											"value": "166"
										},
										{
											"begin": 4394,
											"end": 4431,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4394,
											"end": 4431,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 4394,
											"end": 4431,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 4394,
											"end": 4431,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 4394,
											"end": 4431,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 4394,
											"end": 4431,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 4394,
											"end": 4431,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 4394,
											"end": 4431,
											"name": "RETURNDATASIZE",
											"source": 3
										},
										{
											"begin": 4394,
											"end": 4431,
											"name": "PUSH",
											"source": 3,
											"value": "1F"
										},
										{
											"begin": 4394,
											"end": 4431,
											"name": "NOT",
											"source": 3
										},
										{
											"begin": 4394,
											"end": 4431,
											"name": "PUSH",
											"source": 3,
											"value": "1F"
										},
										{
											"begin": 4394,
											"end": 4431,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 4394,
											"end": 4431,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 4394,
											"end": 4431,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 4394,
											"end": 4431,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 4394,
											"end": 4431,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 4394,
											"end": 4431,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 4394,
											"end": 4431,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 4394,
											"end": 4431,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 4394,
											"end": 4431,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 4394,
											"end": 4431,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 4394,
											"end": 4431,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 4394,
											"end": 4431,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4394,
											"end": 4431,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "167"
										},
										{
											"begin": 4394,
											"end": 4431,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 4394,
											"end": 4431,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4394,
											"end": 4431,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "111"
										},
										{
											"begin": 4394,
											"end": 4431,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 4394,
											"end": 4431,
											"name": "tag",
											"source": 3,
											"value": "167"
										},
										{
											"begin": 4394,
											"end": 4431,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4380,
											"end": 4432,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "168"
										},
										{
											"begin": 4380,
											"end": 4432,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4380,
											"end": 4382,
											"name": "PUSH",
											"source": 3,
											"value": "A"
										},
										{
											"begin": 4380,
											"end": 4432,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "113"
										},
										{
											"begin": 4380,
											"end": 4432,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 4380,
											"end": 4432,
											"name": "tag",
											"source": 3,
											"value": "168"
										},
										{
											"begin": 4380,
											"end": 4432,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4324,
											"end": 4344,
											"name": "PUSH",
											"source": 3,
											"value": "E"
										},
										{
											"begin": 4324,
											"end": 4344,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 4275,
											"end": 4345,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "157"
										},
										{
											"begin": 4275,
											"end": 4345,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4275,
											"end": 4289,
											"name": "DUP9",
											"source": 3
										},
										{
											"begin": 4275,
											"end": 4289,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4275,
											"end": 4323,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "160"
										},
										{
											"begin": 4275,
											"end": 4345,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 4275,
											"end": 4433,
											"name": "tag",
											"source": 3,
											"value": "163"
										},
										{
											"begin": 4275,
											"end": 4433,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4254,
											"end": 4434,
											"name": "SWAP10",
											"source": 3
										},
										{
											"begin": 3407,
											"end": 4485,
											"name": "SWAP9",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3407,
											"end": 4485,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										},
										{
											"begin": 3289,
											"end": 3399,
											"name": "tag",
											"source": 3,
											"value": "77"
										},
										{
											"begin": 3289,
											"end": 3399,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3338,
											"end": 3342,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 3362,
											"end": 3391,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "171"
										},
										{
											"begin": 3362,
											"end": 3368,
											"name": "PUSH",
											"source": 3,
											"value": "19"
										},
										{
											"begin": 736,
											"end": 746,
											"name": "CALLER",
											"source": 4
										},
										{
											"begin": 3362,
											"end": 3377,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "173"
										},
										{
											"begin": 3362,
											"end": 3391,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 3362,
											"end": 3391,
											"name": "tag",
											"source": 3,
											"value": "171"
										},
										{
											"begin": 3362,
											"end": 3391,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3355,
											"end": 3391,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3355,
											"end": 3391,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 3289,
											"end": 3399,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3289,
											"end": 3399,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										},
										{
											"begin": 1972,
											"end": 2173,
											"name": "tag",
											"source": 6,
											"value": "89"
										},
										{
											"begin": 1972,
											"end": 2173,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1136,
											"end": 1142,
											"name": "PUSH",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 1136,
											"end": 1142,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1136,
											"end": 1142,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 736,
											"end": 746,
											"name": "CALLER",
											"source": 4
										},
										{
											"begin": 1283,
											"end": 1306,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 1275,
											"end": 1343,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "177"
										},
										{
											"begin": 1275,
											"end": 1343,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 1275,
											"end": 1343,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 1275,
											"end": 1343,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1275,
											"end": 1343,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1275,
											"end": 1343,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 5322,
											"end": 5324,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 1275,
											"end": 1343,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 1275,
											"end": 1343,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 1275,
											"end": 1343,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5304,
											"end": 5325,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 5304,
											"end": 5325,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 5304,
											"end": 5325,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 5341,
											"end": 5359,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 5341,
											"end": 5359,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 5341,
											"end": 5359,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 5334,
											"end": 5364,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 5400,
											"end": 5434,
											"name": "PUSH",
											"source": 10,
											"value": "4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572"
										},
										{
											"begin": 5380,
											"end": 5398,
											"name": "PUSH",
											"source": 10,
											"value": "44"
										},
										{
											"begin": 5380,
											"end": 5398,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 5380,
											"end": 5398,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 5373,
											"end": 5435,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 5452,
											"end": 5470,
											"name": "PUSH",
											"source": 10,
											"value": "64"
										},
										{
											"begin": 5452,
											"end": 5470,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1275,
											"end": 1343,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "134"
										},
										{
											"begin": 5294,
											"end": 5476,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 1275,
											"end": 1343,
											"name": "tag",
											"source": 6,
											"value": "177"
										},
										{
											"begin": 1275,
											"end": 1343,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2061,
											"end": 2083,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 2061,
											"end": 2083,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 2053,
											"end": 2126,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "180"
										},
										{
											"begin": 2053,
											"end": 2126,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 2053,
											"end": 2126,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 2053,
											"end": 2126,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2053,
											"end": 2126,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 2053,
											"end": 2126,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 3888,
											"end": 3890,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 2053,
											"end": 2126,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 2053,
											"end": 2126,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 2053,
											"end": 2126,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 3870,
											"end": 3891,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 3927,
											"end": 3929,
											"name": "PUSH",
											"source": 10,
											"value": "26"
										},
										{
											"begin": 3907,
											"end": 3925,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 3907,
											"end": 3925,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 3907,
											"end": 3925,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 3900,
											"end": 3930,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 3966,
											"end": 4000,
											"name": "PUSH",
											"source": 10,
											"value": "4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061"
										},
										{
											"begin": 3946,
											"end": 3964,
											"name": "PUSH",
											"source": 10,
											"value": "44"
										},
										{
											"begin": 3946,
											"end": 3964,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 3946,
											"end": 3964,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 3939,
											"end": 4001,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "646472657373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4017,
											"end": 4035,
											"name": "PUSH",
											"source": 10,
											"value": "64"
										},
										{
											"begin": 4017,
											"end": 4035,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 4017,
											"end": 4035,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 4010,
											"end": 4046,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 4063,
											"end": 4082,
											"name": "PUSH",
											"source": 10,
											"value": "84"
										},
										{
											"begin": 4063,
											"end": 4082,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 2053,
											"end": 2126,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "134"
										},
										{
											"begin": 3860,
											"end": 4088,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 2053,
											"end": 2126,
											"name": "tag",
											"source": 6,
											"value": "180"
										},
										{
											"begin": 2053,
											"end": 2126,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2137,
											"end": 2165,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "141"
										},
										{
											"begin": 2156,
											"end": 2164,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 2137,
											"end": 2155,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "138"
										},
										{
											"begin": 2137,
											"end": 2165,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 8259,
											"end": 8411,
											"name": "tag",
											"source": 5,
											"value": "95"
										},
										{
											"begin": 8259,
											"end": 8411,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 8329,
											"end": 8333,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 8353,
											"end": 8403,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "186"
										},
										{
											"begin": 8358,
											"end": 8361,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8378,
											"end": 8401,
											"name": "DUP5",
											"source": 5
										},
										{
											"begin": 8378,
											"end": 8401,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 8353,
											"end": 8357,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "187"
										},
										{
											"begin": 8353,
											"end": 8403,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 8353,
											"end": 8403,
											"name": "tag",
											"source": 5,
											"value": "186"
										},
										{
											"begin": 8353,
											"end": 8403,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 8346,
											"end": 8403,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 8346,
											"end": 8403,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 8259,
											"end": 8411,
											"name": "tag",
											"source": 5,
											"value": "185"
										},
										{
											"begin": 8259,
											"end": 8411,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 8259,
											"end": 8411,
											"name": "SWAP3",
											"source": 5
										},
										{
											"begin": 8259,
											"end": 8411,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 8259,
											"end": 8411,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 8259,
											"end": 8411,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 8259,
											"end": 8411,
											"name": "JUMP",
											"source": 5,
											"value": "[out]"
										},
										{
											"begin": 2333,
											"end": 2524,
											"name": "tag",
											"source": 6,
											"value": "138"
										},
										{
											"begin": 2333,
											"end": 2524,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2426,
											"end": 2432,
											"name": "PUSH",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 2426,
											"end": 2432,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 2426,
											"end": 2432,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2443,
											"end": 2460,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 2443,
											"end": 2460,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 2443,
											"end": 2460,
											"name": "AND",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 2443,
											"end": 2460,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 2443,
											"end": 2460,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 2443,
											"end": 2460,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 2443,
											"end": 2460,
											"name": "OR",
											"source": 6
										},
										{
											"begin": 2443,
											"end": 2460,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2443,
											"end": 2460,
											"name": "SWAP4",
											"source": 6
										},
										{
											"begin": 2443,
											"end": 2460,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 2476,
											"end": 2516,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 2476,
											"end": 2516,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 2426,
											"end": 2432,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 2426,
											"end": 2432,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 2426,
											"end": 2432,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 2443,
											"end": 2460,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2426,
											"end": 2432,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 2426,
											"end": 2432,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2476,
											"end": 2516,
											"name": "PUSH",
											"source": 6,
											"value": "8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
										},
										{
											"begin": 2476,
											"end": 2516,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2407,
											"end": 2423,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 2407,
											"end": 2423,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2476,
											"end": 2516,
											"name": "LOG3",
											"source": 6
										},
										{
											"begin": 2333,
											"end": 2524,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 2333,
											"end": 2524,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 2333,
											"end": 2524,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 3228,
											"end": 3326,
											"name": "tag",
											"source": 8,
											"value": "159"
										},
										{
											"begin": 3228,
											"end": 3326,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3286,
											"end": 3293,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 3313,
											"end": 3318,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "186"
										},
										{
											"begin": 3317,
											"end": 3318,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 3313,
											"end": 3314,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 3313,
											"end": 3318,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "103"
										},
										{
											"begin": 3313,
											"end": 3318,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 3585,
											"end": 3683,
											"name": "tag",
											"source": 8,
											"value": "160"
										},
										{
											"begin": 3585,
											"end": 3683,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3643,
											"end": 3650,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 3670,
											"end": 3675,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "186"
										},
										{
											"begin": 3674,
											"end": 3675,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 3670,
											"end": 3671,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 3670,
											"end": 3675,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "116"
										},
										{
											"begin": 3670,
											"end": 3675,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 3984,
											"end": 4082,
											"name": "tag",
											"source": 8,
											"value": "161"
										},
										{
											"begin": 3984,
											"end": 4082,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 4042,
											"end": 4049,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 4069,
											"end": 4074,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "186"
										},
										{
											"begin": 4073,
											"end": 4074,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 4069,
											"end": 4070,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 4069,
											"end": 4074,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "196"
										},
										{
											"begin": 4069,
											"end": 4074,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 8831,
											"end": 8998,
											"name": "tag",
											"source": 5,
											"value": "173"
										},
										{
											"begin": 8831,
											"end": 8998,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8965,
											"end": 8988,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 8965,
											"end": 8988,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 8911,
											"end": 8915,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 4367,
											"end": 4386,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 4367,
											"end": 4386,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 4367,
											"end": 4386,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 4367,
											"end": 4379,
											"name": "PUSH",
											"source": 5,
											"value": "1"
										},
										{
											"begin": 4367,
											"end": 4379,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 4367,
											"end": 4379,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 4367,
											"end": 4386,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 4367,
											"end": 4386,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 4367,
											"end": 4386,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 4367,
											"end": 4386,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 4367,
											"end": 4386,
											"name": "KECCAK256",
											"source": 5
										},
										{
											"begin": 4367,
											"end": 4386,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 4367,
											"end": 4391,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 4367,
											"end": 4391,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 8935,
											"end": 8990,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "186"
										},
										{
											"begin": 4270,
											"end": 4399,
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 2174,
											"end": 2588,
											"name": "tag",
											"source": 5,
											"value": "187"
										},
										{
											"begin": 2174,
											"end": 2588,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 2237,
											"end": 2241,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 4367,
											"end": 4386,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 4367,
											"end": 4386,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 4367,
											"end": 4386,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 4367,
											"end": 4379,
											"name": "PUSH",
											"source": 5,
											"value": "1"
										},
										{
											"begin": 4367,
											"end": 4379,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 4367,
											"end": 4379,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 4367,
											"end": 4386,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 4367,
											"end": 4386,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 4367,
											"end": 4386,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 4367,
											"end": 4386,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 4367,
											"end": 4386,
											"name": "KECCAK256",
											"source": 5
										},
										{
											"begin": 4367,
											"end": 4386,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 2254,
											"end": 2581,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "202"
										},
										{
											"begin": 2254,
											"end": 2581,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2297,
											"end": 2320,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 2297,
											"end": 2320,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 2297,
											"end": 2320,
											"name": "PUSH",
											"source": 5,
											"value": "1"
										},
										{
											"begin": 2297,
											"end": 2320,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 2297,
											"end": 2320,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 2297,
											"end": 2320,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 2297,
											"end": 2320,
											"name": "DUP5",
											"source": 5
										},
										{
											"begin": 2297,
											"end": 2320,
											"name": "SSTORE",
											"source": 5
										},
										{
											"begin": 2297,
											"end": 2308,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 2297,
											"end": 2320,
											"name": "DUP5",
											"source": 5
										},
										{
											"begin": 2297,
											"end": 2320,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 2297,
											"end": 2320,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 2297,
											"end": 2320,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 2297,
											"end": 2320,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 2297,
											"end": 2320,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 2297,
											"end": 2320,
											"name": "KECCAK256",
											"source": 5
										},
										{
											"begin": 2297,
											"end": 2320,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2297,
											"end": 2320,
											"name": "SWAP4",
											"source": 5
										},
										{
											"begin": 2297,
											"end": 2320,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 2297,
											"end": 2320,
											"name": "DUP5",
											"source": 5
										},
										{
											"begin": 2297,
											"end": 2320,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2297,
											"end": 2320,
											"name": "SSTORE",
											"source": 5
										},
										{
											"begin": 2480,
											"end": 2498,
											"name": "DUP5",
											"source": 5
										},
										{
											"begin": 2480,
											"end": 2498,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 2458,
											"end": 2477,
											"name": "DUP5",
											"source": 5
										},
										{
											"begin": 2458,
											"end": 2477,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 2458,
											"end": 2477,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 2458,
											"end": 2470,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 2458,
											"end": 2470,
											"name": "DUP7",
											"source": 5
										},
										{
											"begin": 2458,
											"end": 2470,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 2458,
											"end": 2477,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2458,
											"end": 2477,
											"name": "SWAP4",
											"source": 5
										},
										{
											"begin": 2458,
											"end": 2477,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 2458,
											"end": 2477,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 2458,
											"end": 2477,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2458,
											"end": 2477,
											"name": "KECCAK256",
											"source": 5
										},
										{
											"begin": 2458,
											"end": 2498,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 2458,
											"end": 2498,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2458,
											"end": 2498,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 2458,
											"end": 2498,
											"name": "SSTORE",
											"source": 5
										},
										{
											"begin": 2513,
											"end": 2524,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "185"
										},
										{
											"begin": 2513,
											"end": 2524,
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 2254,
											"end": 2581,
											"name": "tag",
											"source": 5,
											"value": "202"
										},
										{
											"begin": 2254,
											"end": 2581,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2564,
											"end": 2569,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 2557,
											"end": 2569,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "185"
										},
										{
											"begin": 2557,
											"end": 2569,
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 14,
											"end": 271,
											"name": "tag",
											"source": 10,
											"value": "42"
										},
										{
											"begin": 14,
											"end": 271,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 73,
											"end": 79,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 126,
											"end": 128,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 114,
											"end": 123,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 105,
											"end": 112,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 101,
											"end": 124,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 97,
											"end": 129,
											"name": "SLT",
											"source": 10
										},
										{
											"begin": 94,
											"end": 96,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 94,
											"end": 96,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "208"
										},
										{
											"begin": 94,
											"end": 96,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 147,
											"end": 153,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 139,
											"end": 145,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 132,
											"end": 154,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 94,
											"end": 96,
											"name": "tag",
											"source": 10,
											"value": "208"
										},
										{
											"begin": 94,
											"end": 96,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 191,
											"end": 200,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 178,
											"end": 201,
											"name": "CALLDATALOAD",
											"source": 10
										},
										{
											"begin": 210,
											"end": 241,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "209"
										},
										{
											"begin": 235,
											"end": 240,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 210,
											"end": 241,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "210"
										},
										{
											"begin": 210,
											"end": 241,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 210,
											"end": 241,
											"name": "tag",
											"source": 10,
											"value": "209"
										},
										{
											"begin": 210,
											"end": 241,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 260,
											"end": 265,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 84,
											"end": 271,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 84,
											"end": 271,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 276,
											"end": 1572,
											"name": "tag",
											"source": 10,
											"value": "48"
										},
										{
											"begin": 276,
											"end": 1572,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 419,
											"end": 425,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 427,
											"end": 433,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 435,
											"end": 441,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 443,
											"end": 449,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 474,
											"end": 477,
											"name": "PUSH",
											"source": 10,
											"value": "140"
										},
										{
											"begin": 518,
											"end": 520,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 506,
											"end": 515,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 497,
											"end": 504,
											"name": "DUP9",
											"source": 10
										},
										{
											"begin": 493,
											"end": 516,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 489,
											"end": 521,
											"name": "SLT",
											"source": 10
										},
										{
											"begin": 486,
											"end": 488,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 486,
											"end": 488,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "212"
										},
										{
											"begin": 486,
											"end": 488,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 539,
											"end": 545,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 531,
											"end": 537,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 524,
											"end": 546,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 486,
											"end": 488,
											"name": "tag",
											"source": 10,
											"value": "212"
										},
										{
											"begin": 486,
											"end": 488,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 583,
											"end": 592,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 570,
											"end": 593,
											"name": "CALLDATALOAD",
											"source": 10
										},
										{
											"begin": 602,
											"end": 633,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "213"
										},
										{
											"begin": 627,
											"end": 632,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 602,
											"end": 633,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "210"
										},
										{
											"begin": 602,
											"end": 633,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 602,
											"end": 633,
											"name": "tag",
											"source": 10,
											"value": "213"
										},
										{
											"begin": 602,
											"end": 633,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 652,
											"end": 657,
											"name": "SWAP5",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 676,
											"end": 678,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 715,
											"end": 733,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 715,
											"end": 733,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 715,
											"end": 733,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 702,
											"end": 734,
											"name": "CALLDATALOAD",
											"source": 10
										},
										{
											"begin": 743,
											"end": 776,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "214"
										},
										{
											"begin": 702,
											"end": 734,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 743,
											"end": 776,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "210"
										},
										{
											"begin": 743,
											"end": 776,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 743,
											"end": 776,
											"name": "tag",
											"source": 10,
											"value": "214"
										},
										{
											"begin": 743,
											"end": 776,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 795,
											"end": 802,
											"name": "SWAP5",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 854,
											"end": 856,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 839,
											"end": 857,
											"name": "DUP8",
											"source": 10
										},
										{
											"begin": 839,
											"end": 857,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 826,
											"end": 858,
											"name": "CALLDATALOAD",
											"source": 10
										},
										{
											"begin": 867,
											"end": 900,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "215"
										},
										{
											"begin": 826,
											"end": 858,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 867,
											"end": 900,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "210"
										},
										{
											"begin": 867,
											"end": 900,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 867,
											"end": 900,
											"name": "tag",
											"source": 10,
											"value": "215"
										},
										{
											"begin": 867,
											"end": 900,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 919,
											"end": 926,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 964,
											"end": 967,
											"name": "PUSH",
											"source": 10,
											"value": "7F"
										},
										{
											"begin": 949,
											"end": 968,
											"name": "DUP8",
											"source": 10
										},
										{
											"begin": 949,
											"end": 968,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 945,
											"end": 978,
											"name": "DUP9",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SGT",
											"source": -1
										},
										{
											"begin": 935,
											"end": 937,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "216"
										},
										{
											"begin": 935,
											"end": 937,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 997,
											"end": 1003,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 989,
											"end": 995,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 982,
											"end": 1004,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 935,
											"end": 937,
											"name": "tag",
											"source": 10,
											"value": "216"
										},
										{
											"begin": 935,
											"end": 937,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1035,
											"end": 1037,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 1029,
											"end": 1038,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 1077,
											"end": 1080,
											"name": "PUSH",
											"source": 10,
											"value": "E0"
										},
										{
											"begin": 1069,
											"end": 1075,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1065,
											"end": 1081,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1147,
											"end": 1153,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1135,
											"end": 1145,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1132,
											"end": 1154,
											"name": "LT",
											"source": 10
										},
										{
											"begin": 1111,
											"end": 1129,
											"name": "PUSH",
											"source": 10,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1099,
											"end": 1109,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 1096,
											"end": 1130,
											"name": "GT",
											"source": 10
										},
										{
											"begin": 1093,
											"end": 1155,
											"name": "OR",
											"source": 10
										},
										{
											"begin": 1090,
											"end": 1092,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 1090,
											"end": 1092,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "218"
										},
										{
											"begin": 1090,
											"end": 1092,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 1158,
											"end": 1176,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "218"
										},
										{
											"begin": 1158,
											"end": 1176,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "219"
										},
										{
											"begin": 1158,
											"end": 1176,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 1158,
											"end": 1176,
											"name": "tag",
											"source": 10,
											"value": "218"
										},
										{
											"begin": 1158,
											"end": 1176,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1194,
											"end": 1196,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 1187,
											"end": 1209,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 1229,
											"end": 1235,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1270,
											"end": 1272,
											"name": "PUSH",
											"source": 10,
											"value": "60"
										},
										{
											"begin": 1255,
											"end": 1273,
											"name": "DUP10",
											"source": 10
										},
										{
											"begin": 1255,
											"end": 1273,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1288,
											"end": 1306,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 1288,
											"end": 1306,
											"name": "DUP11",
											"source": 10
										},
										{
											"begin": 1288,
											"end": 1306,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1285,
											"end": 1316,
											"name": "DUP12",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "LT",
											"source": -1
										},
										{
											"begin": 1282,
											"end": 1284,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 1282,
											"end": 1284,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "220"
										},
										{
											"begin": 1282,
											"end": 1284,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 1334,
											"end": 1340,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 1326,
											"end": 1332,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 1319,
											"end": 1341,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 1282,
											"end": 1284,
											"name": "tag",
											"source": 10,
											"value": "220"
										},
										{
											"begin": 1282,
											"end": 1284,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1361,
											"end": 1367,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 1352,
											"end": 1367,
											"name": "SWAP5",
											"source": 10
										},
										{
											"begin": 1352,
											"end": 1367,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1376,
											"end": 1541,
											"name": "tag",
											"source": 10,
											"value": "221"
										},
										{
											"begin": 1376,
											"end": 1541,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1390,
											"end": 1394,
											"name": "PUSH",
											"source": 10,
											"value": "7"
										},
										{
											"begin": 1387,
											"end": 1388,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 1384,
											"end": 1395,
											"name": "LT",
											"source": 10
										},
										{
											"begin": 1376,
											"end": 1541,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 1376,
											"end": 1541,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "223"
										},
										{
											"begin": 1376,
											"end": 1541,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 1449,
											"end": 1466,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1449,
											"end": 1466,
											"name": "CALLDATALOAD",
											"source": 10
										},
										{
											"begin": 1437,
											"end": 1467,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 1437,
											"end": 1467,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 1410,
											"end": 1411,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 1403,
											"end": 1412,
											"name": "SWAP5",
											"source": 10
										},
										{
											"begin": 1403,
											"end": 1412,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1403,
											"end": 1412,
											"name": "SWAP5",
											"source": 10
										},
										{
											"begin": 1403,
											"end": 1412,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1403,
											"end": 1412,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 1487,
											"end": 1499,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1487,
											"end": 1499,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 1487,
											"end": 1499,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1487,
											"end": 1499,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1519,
											"end": 1531,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 1519,
											"end": 1531,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1376,
											"end": 1541,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "221"
										},
										{
											"begin": 1376,
											"end": 1541,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 1376,
											"end": 1541,
											"name": "tag",
											"source": 10,
											"value": "223"
										},
										{
											"begin": 1376,
											"end": 1541,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1380,
											"end": 1383,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1380,
											"end": 1383,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1560,
											"end": 1566,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1550,
											"end": 1566,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 1550,
											"end": 1566,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1550,
											"end": 1566,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1550,
											"end": 1566,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1550,
											"end": 1566,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 454,
											"end": 1572,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 454,
											"end": 1572,
											"name": "SWAP6",
											"source": 10
										},
										{
											"begin": 454,
											"end": 1572,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 454,
											"end": 1572,
											"name": "SWAP5",
											"source": 10
										},
										{
											"begin": 454,
											"end": 1572,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 454,
											"end": 1572,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 454,
											"end": 1572,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 454,
											"end": 1572,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 1577,
											"end": 1767,
											"name": "tag",
											"source": 10,
											"value": "37"
										},
										{
											"begin": 1577,
											"end": 1767,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1636,
											"end": 1642,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1689,
											"end": 1691,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 1677,
											"end": 1686,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 1668,
											"end": 1675,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 1664,
											"end": 1687,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 1660,
											"end": 1692,
											"name": "SLT",
											"source": 10
										},
										{
											"begin": 1657,
											"end": 1659,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 1657,
											"end": 1659,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "225"
										},
										{
											"begin": 1657,
											"end": 1659,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 1710,
											"end": 1716,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1702,
											"end": 1708,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1695,
											"end": 1717,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 1657,
											"end": 1659,
											"name": "tag",
											"source": 10,
											"value": "225"
										},
										{
											"begin": 1657,
											"end": 1659,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1738,
											"end": 1761,
											"name": "CALLDATALOAD",
											"source": 10
										},
										{
											"begin": 1738,
											"end": 1761,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 1647,
											"end": 1767,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1647,
											"end": 1767,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 1772,
											"end": 1966,
											"name": "tag",
											"source": 10,
											"value": "111"
										},
										{
											"begin": 1772,
											"end": 1966,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1842,
											"end": 1848,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1895,
											"end": 1897,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 1883,
											"end": 1892,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 1874,
											"end": 1881,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 1870,
											"end": 1893,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 1866,
											"end": 1898,
											"name": "SLT",
											"source": 10
										},
										{
											"begin": 1863,
											"end": 1865,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 1863,
											"end": 1865,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "227"
										},
										{
											"begin": 1863,
											"end": 1865,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 1916,
											"end": 1922,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1908,
											"end": 1914,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1901,
											"end": 1923,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 1863,
											"end": 1865,
											"name": "tag",
											"source": 10,
											"value": "227"
										},
										{
											"begin": 1863,
											"end": 1865,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1944,
											"end": 1960,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 1944,
											"end": 1960,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 1853,
											"end": 1966,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1853,
											"end": 1966,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 6763,
											"end": 6980,
											"name": "tag",
											"source": 10,
											"value": "196"
										},
										{
											"begin": 6763,
											"end": 6980,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 6803,
											"end": 6804,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 6829,
											"end": 6830,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 6819,
											"end": 6821,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "241"
										},
										{
											"begin": 6819,
											"end": 6821,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "4E487B71"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 6854,
											"end": 6885,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 6854,
											"end": 6885,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 6908,
											"end": 6912,
											"name": "PUSH",
											"source": 10,
											"value": "12"
										},
										{
											"begin": 6905,
											"end": 6906,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 6898,
											"end": 6913,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 6936,
											"end": 6940,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 6861,
											"end": 6862,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 6926,
											"end": 6941,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 6819,
											"end": 6821,
											"name": "tag",
											"source": 10,
											"value": "241"
										},
										{
											"begin": 6819,
											"end": 6821,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6965,
											"end": 6974,
											"name": "DIV",
											"source": 10
										},
										{
											"begin": 6965,
											"end": 6974,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 6809,
											"end": 6980,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 6985,
											"end": 7407,
											"name": "tag",
											"source": 10,
											"value": "242"
										},
										{
											"begin": 6985,
											"end": 7407,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 7074,
											"end": 7075,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 7117,
											"end": 7122,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 7074,
											"end": 7075,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 7131,
											"end": 7401,
											"name": "tag",
											"source": 10,
											"value": "244"
										},
										{
											"begin": 7131,
											"end": 7401,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 7152,
											"end": 7159,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 7142,
											"end": 7150,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 7139,
											"end": 7160,
											"name": "GT",
											"source": 10
										},
										{
											"begin": 7131,
											"end": 7401,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 7131,
											"end": 7401,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "246"
										},
										{
											"begin": 7131,
											"end": 7401,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 7211,
											"end": 7215,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 7207,
											"end": 7208,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 7203,
											"end": 7209,
											"name": "NOT",
											"source": 10
										},
										{
											"begin": 7199,
											"end": 7216,
											"name": "DIV",
											"source": 10
										},
										{
											"begin": 7193,
											"end": 7197,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 7190,
											"end": 7217,
											"name": "GT",
											"source": 10
										},
										{
											"begin": 7187,
											"end": 7189,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 7187,
											"end": 7189,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "248"
										},
										{
											"begin": 7187,
											"end": 7189,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 7220,
											"end": 7238,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "248"
										},
										{
											"begin": 7220,
											"end": 7238,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "249"
										},
										{
											"begin": 7220,
											"end": 7238,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 7220,
											"end": 7238,
											"name": "tag",
											"source": 10,
											"value": "248"
										},
										{
											"begin": 7220,
											"end": 7238,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 7270,
											"end": 7277,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 7260,
											"end": 7268,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 7256,
											"end": 7278,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 7253,
											"end": 7255,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 7253,
											"end": 7255,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "250"
										},
										{
											"begin": 7253,
											"end": 7255,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 7290,
											"end": 7306,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 7290,
											"end": 7306,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 7290,
											"end": 7306,
											"name": "MUL",
											"source": 10
										},
										{
											"begin": 7290,
											"end": 7306,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 7253,
											"end": 7255,
											"name": "tag",
											"source": 10,
											"value": "250"
										},
										{
											"begin": 7253,
											"end": 7255,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 7369,
											"end": 7391,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 7369,
											"end": 7391,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 7369,
											"end": 7391,
											"name": "SHR",
											"source": 10
										},
										{
											"begin": 7369,
											"end": 7391,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 7329,
											"end": 7344,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 7329,
											"end": 7344,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 7329,
											"end": 7344,
											"name": "MUL",
											"source": 10
										},
										{
											"begin": 7329,
											"end": 7344,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 7131,
											"end": 7401,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "244"
										},
										{
											"begin": 7131,
											"end": 7401,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 7131,
											"end": 7401,
											"name": "tag",
											"source": 10,
											"value": "246"
										},
										{
											"begin": 7131,
											"end": 7401,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 7135,
											"end": 7138,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 7049,
											"end": 7407,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 7049,
											"end": 7407,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 7049,
											"end": 7407,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 7049,
											"end": 7407,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 7049,
											"end": 7407,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 7049,
											"end": 7407,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 7412,
											"end": 7543,
											"name": "tag",
											"source": 10,
											"value": "113"
										},
										{
											"begin": 7412,
											"end": 7543,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 7472,
											"end": 7477,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 7501,
											"end": 7537,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "186"
										},
										{
											"begin": 7528,
											"end": 7536,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 7522,
											"end": 7526,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 7597,
											"end": 7602,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 7627,
											"end": 7635,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 7617,
											"end": 7619,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "255"
										},
										{
											"begin": 7617,
											"end": 7619,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 7668,
											"end": 7669,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 7682,
											"end": 7687,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "185"
										},
										{
											"begin": 7682,
											"end": 7687,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 7617,
											"end": 7619,
											"name": "tag",
											"source": 10,
											"value": "255"
										},
										{
											"begin": 7617,
											"end": 7619,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 7716,
											"end": 7720,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 7706,
											"end": 7708,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "256"
										},
										{
											"begin": 7706,
											"end": 7708,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 7753,
											"end": 7754,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 7767,
											"end": 7772,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "185"
										},
										{
											"begin": 7767,
											"end": 7772,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 7706,
											"end": 7708,
											"name": "tag",
											"source": 10,
											"value": "256"
										},
										{
											"begin": 7706,
											"end": 7708,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 7798,
											"end": 7802,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 7816,
											"end": 7817,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 7811,
											"end": 7870,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 7811,
											"end": 7870,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 7811,
											"end": 7870,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "258"
										},
										{
											"begin": 7811,
											"end": 7870,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 7884,
											"end": 7885,
											"name": "PUSH",
											"source": 10,
											"value": "2"
										},
										{
											"begin": 7879,
											"end": 8009,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 7879,
											"end": 8009,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 7879,
											"end": 8009,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "259"
										},
										{
											"begin": 7879,
											"end": 8009,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 7791,
											"end": 8009,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "257"
										},
										{
											"begin": 7791,
											"end": 8009,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 7811,
											"end": 7870,
											"name": "tag",
											"source": 10,
											"value": "258"
										},
										{
											"begin": 7811,
											"end": 7870,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 7841,
											"end": 7842,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 7832,
											"end": 7842,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 7832,
											"end": 7842,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 7855,
											"end": 7860,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 7855,
											"end": 7860,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "185"
										},
										{
											"begin": 7855,
											"end": 7860,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 7879,
											"end": 8009,
											"name": "tag",
											"source": 10,
											"value": "259"
										},
										{
											"begin": 7879,
											"end": 8009,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 7916,
											"end": 7919,
											"name": "PUSH",
											"source": 10,
											"value": "FF"
										},
										{
											"begin": 7906,
											"end": 7914,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 7903,
											"end": 7920,
											"name": "GT",
											"source": 10
										},
										{
											"begin": 7900,
											"end": 7902,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 7900,
											"end": 7902,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "261"
										},
										{
											"begin": 7900,
											"end": 7902,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 7923,
											"end": 7941,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "261"
										},
										{
											"begin": 7923,
											"end": 7941,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "249"
										},
										{
											"begin": 7923,
											"end": 7941,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 7923,
											"end": 7941,
											"name": "tag",
											"source": 10,
											"value": "261"
										},
										{
											"begin": 7923,
											"end": 7941,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 7979,
											"end": 7980,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 7965,
											"end": 7981,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 7965,
											"end": 7981,
											"name": "SHL",
											"source": 10
										},
										{
											"begin": 7994,
											"end": 7999,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "185"
										},
										{
											"begin": 7994,
											"end": 7999,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 7791,
											"end": 8009,
											"name": "tag",
											"source": 10,
											"value": "257"
										},
										{
											"begin": 7791,
											"end": 8009,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 7791,
											"end": 8009,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 8093,
											"end": 8095,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 8083,
											"end": 8091,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 8080,
											"end": 8096,
											"name": "LT",
											"source": 10
										},
										{
											"begin": 8074,
											"end": 8077,
											"name": "PUSH",
											"source": 10,
											"value": "133"
										},
										{
											"begin": 8068,
											"end": 8072,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 8065,
											"end": 8078,
											"name": "LT",
											"source": 10
										},
										{
											"begin": 8061,
											"end": 8097,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 8055,
											"end": 8057,
											"name": "PUSH",
											"source": 10,
											"value": "4E"
										},
										{
											"begin": 8045,
											"end": 8053,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 8042,
											"end": 8058,
											"name": "LT",
											"source": 10
										},
										{
											"begin": 8037,
											"end": 8039,
											"name": "PUSH",
											"source": 10,
											"value": "B"
										},
										{
											"begin": 8031,
											"end": 8035,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 8028,
											"end": 8040,
											"name": "LT",
											"source": 10
										},
										{
											"begin": 8024,
											"end": 8059,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 8021,
											"end": 8098,
											"name": "OR",
											"source": 10
										},
										{
											"begin": 8018,
											"end": 8020,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 8018,
											"end": 8020,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "262"
										},
										{
											"begin": 8018,
											"end": 8020,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 8130,
											"end": 8149,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 8130,
											"end": 8149,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 8130,
											"end": 8149,
											"name": "EXP",
											"source": 10
										},
										{
											"begin": 8162,
											"end": 8167,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "185"
										},
										{
											"begin": 8162,
											"end": 8167,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 8018,
											"end": 8020,
											"name": "tag",
											"source": 10,
											"value": "262"
										},
										{
											"begin": 8018,
											"end": 8020,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 8209,
											"end": 8243,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "263"
										},
										{
											"begin": 8234,
											"end": 8242,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 8228,
											"end": 8232,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 8209,
											"end": 8243,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "242"
										},
										{
											"begin": 8209,
											"end": 8243,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 8209,
											"end": 8243,
											"name": "tag",
											"source": 10,
											"value": "263"
										},
										{
											"begin": 8209,
											"end": 8243,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 8279,
											"end": 8285,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 8275,
											"end": 8276,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 8271,
											"end": 8277,
											"name": "NOT",
											"source": 10
										},
										{
											"begin": 8267,
											"end": 8286,
											"name": "DIV",
											"source": 10
										},
										{
											"begin": 8258,
											"end": 8265,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 8255,
											"end": 8287,
											"name": "GT",
											"source": 10
										},
										{
											"begin": 8252,
											"end": 8254,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 8252,
											"end": 8254,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "265"
										},
										{
											"begin": 8252,
											"end": 8254,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 8290,
											"end": 8308,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "265"
										},
										{
											"begin": 8290,
											"end": 8308,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "249"
										},
										{
											"begin": 8290,
											"end": 8308,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 8290,
											"end": 8308,
											"name": "tag",
											"source": 10,
											"value": "265"
										},
										{
											"begin": 8290,
											"end": 8308,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 8328,
											"end": 8348,
											"name": "MUL",
											"source": 10
										},
										{
											"begin": 8328,
											"end": 8348,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 7607,
											"end": 8354,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 7607,
											"end": 8354,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 8359,
											"end": 8527,
											"name": "tag",
											"source": 10,
											"value": "116"
										},
										{
											"begin": 8359,
											"end": 8527,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 8399,
											"end": 8406,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 8465,
											"end": 8466,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 8461,
											"end": 8462,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 8457,
											"end": 8463,
											"name": "NOT",
											"source": 10
										},
										{
											"begin": 8453,
											"end": 8467,
											"name": "DIV",
											"source": 10
										},
										{
											"begin": 8450,
											"end": 8451,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 8447,
											"end": 8468,
											"name": "GT",
											"source": 10
										},
										{
											"begin": 8442,
											"end": 8443,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 8435,
											"end": 8444,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 8428,
											"end": 8445,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 8424,
											"end": 8469,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 8421,
											"end": 8423,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 8421,
											"end": 8423,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "268"
										},
										{
											"begin": 8421,
											"end": 8423,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 8472,
											"end": 8490,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "268"
										},
										{
											"begin": 8472,
											"end": 8490,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "249"
										},
										{
											"begin": 8472,
											"end": 8490,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 8472,
											"end": 8490,
											"name": "tag",
											"source": 10,
											"value": "268"
										},
										{
											"begin": 8472,
											"end": 8490,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 8512,
											"end": 8521,
											"name": "MUL",
											"source": 10
										},
										{
											"begin": 8512,
											"end": 8521,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 8411,
											"end": 8527,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 8532,
											"end": 8657,
											"name": "tag",
											"source": 10,
											"value": "103"
										},
										{
											"begin": 8532,
											"end": 8657,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 8572,
											"end": 8576,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 8600,
											"end": 8601,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 8597,
											"end": 8598,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 8594,
											"end": 8602,
											"name": "LT",
											"source": 10
										},
										{
											"begin": 8591,
											"end": 8593,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 8591,
											"end": 8593,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "271"
										},
										{
											"begin": 8591,
											"end": 8593,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 8605,
											"end": 8623,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "271"
										},
										{
											"begin": 8605,
											"end": 8623,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "249"
										},
										{
											"begin": 8605,
											"end": 8623,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 8605,
											"end": 8623,
											"name": "tag",
											"source": 10,
											"value": "271"
										},
										{
											"begin": 8605,
											"end": 8623,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 8642,
											"end": 8651,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 8642,
											"end": 8651,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 8581,
											"end": 8657,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 8662,
											"end": 8789,
											"name": "tag",
											"source": 10,
											"value": "249"
										},
										{
											"begin": 8662,
											"end": 8789,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 8723,
											"end": 8733,
											"name": "PUSH",
											"source": 10,
											"value": "4E487B71"
										},
										{
											"begin": 8718,
											"end": 8721,
											"name": "PUSH",
											"source": 10,
											"value": "E0"
										},
										{
											"begin": 8714,
											"end": 8734,
											"name": "SHL",
											"source": 10
										},
										{
											"begin": 8711,
											"end": 8712,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 8704,
											"end": 8735,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 8754,
											"end": 8758,
											"name": "PUSH",
											"source": 10,
											"value": "11"
										},
										{
											"begin": 8751,
											"end": 8752,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 8744,
											"end": 8759,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 8778,
											"end": 8782,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 8775,
											"end": 8776,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 8768,
											"end": 8783,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 8794,
											"end": 8921,
											"name": "tag",
											"source": 10,
											"value": "219"
										},
										{
											"begin": 8794,
											"end": 8921,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 8855,
											"end": 8865,
											"name": "PUSH",
											"source": 10,
											"value": "4E487B71"
										},
										{
											"begin": 8850,
											"end": 8853,
											"name": "PUSH",
											"source": 10,
											"value": "E0"
										},
										{
											"begin": 8846,
											"end": 8866,
											"name": "SHL",
											"source": 10
										},
										{
											"begin": 8843,
											"end": 8844,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 8836,
											"end": 8867,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 8886,
											"end": 8890,
											"name": "PUSH",
											"source": 10,
											"value": "41"
										},
										{
											"begin": 8883,
											"end": 8884,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 8876,
											"end": 8891,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 8910,
											"end": 8914,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 8907,
											"end": 8908,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 8900,
											"end": 8915,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 8926,
											"end": 9057,
											"name": "tag",
											"source": 10,
											"value": "210"
										},
										{
											"begin": 8926,
											"end": 9057,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 9001,
											"end": 9032,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 9001,
											"end": 9032,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 8991,
											"end": 9033,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 8991,
											"end": 9033,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 8981,
											"end": 8983,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "141"
										},
										{
											"begin": 8981,
											"end": 8983,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 9047,
											"end": 9048,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 9044,
											"end": 9045,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 9037,
											"end": 9049,
											"name": "REVERT",
											"source": 10
										}
									]
								}
							}
						},
						"methodIdentifiers": {
							"WETH()": "ad5c4648",
							"backToken()": "861faf5f",
							"buyerInfo(address)": "e2d3f423",
							"checkAdminAddress()": "cad5b0f7",
							"deposit(uint256)": "b6b55f25",
							"feeAnyone()": "3b5ef2ad",
							"getBalance(address)": "f8b2cb4f",
							"initialSaleInfor(address,address,address,uint256[7])": "61e17655",
							"owner()": "8da5cb5b",
							"presaleStatus()": "acfb2355",
							"renounceOwnership()": "715018a6",
							"saleInfor()": "18856a2f",
							"status()": "200d2ed2",
							"transferETH(uint256)": "4329db46",
							"transferOwnership(address)": "f2fde38b",
							"userFee(address)": "56c5f349"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"backToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"buyerInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"baseDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenOwner\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastWithDraw\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalTokenWithDraw\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isRefund\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isClaim\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkAdminAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeAnyone\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_presaleOwner\",\"type\":\"address\"},{\"internalType\":\"contract ERC20\",\"name\":\"_saleToken\",\"type\":\"address\"},{\"internalType\":\"contract ERC20\",\"name\":\"_baseTOken\",\"type\":\"address\"},{\"internalType\":\"uint256[7]\",\"name\":\"datas\",\"type\":\"uint256[7]\"}],\"name\":\"initialSaleInfor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleStatus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalBaseCollected\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalTokenSold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalTokenWithDraw\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBaseWithDraw\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numByer\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saleInfor\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"presaleOwner\",\"type\":\"address\"},{\"internalType\":\"contract ERC20\",\"name\":\"saleToken\",\"type\":\"address\"},{\"internalType\":\"contract ERC20\",\"name\":\"baseToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startSale\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endSale\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minSpendPerBuyer\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSpendPerBuyer\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"refundFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimFee\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"saleIsBaseToken\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amountTokenForSale\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"status\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"Ethereum/Presale.sol\":\"Presale\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"ERC20/ERC20.sol\":{\"keccak256\":\"0x06de64a6e4f0f98aaf7bc91b3826b714e7ce7827a08da3031f8f2f91c14c5687\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://79cb85a1ebbc907f8b80a26cfce98cd61eb1dfc5dbed47f2cc5f6e7a3e87d2db\",\"dweb:/ipfs/QmWzRXkG6oFwtNiGz98zduSDVYhnTKkCE5YMTVE15fBFse\"]},\"ERC20/IERC20.sol\":{\"keccak256\":\"0x62e7e272bf9d2c10b294645ea698d7fc41dadc18146ac88e9b9cc18514faacc1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e09024b0f1ddb94bdc13008d4c221747b1a6f1e07b0ca599d8d213925982af34\",\"dweb:/ipfs/QmcL6X4KCFc45tk5xSEgBDFUrsKap8G74aJtti5sUYzYCL\"]},\"ERC20/IERC20Metadata.sol\":{\"keccak256\":\"0x2095e6b6cd9fc67a55c1dce6c4a4282036fef487baf848e399adc2f571f6c47b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bbdbc5c7af217e674e7c45ab729cf3ffe1c2756c4438e5818f39f30266b836e2\",\"dweb:/ipfs/QmPkmQQ6bAVYGRKR1KMqRhU1kPL49aFc5zqCLmJZEMsavE\"]},\"Ethereum/Presale.sol\":{\"keccak256\":\"0x4ed0af641cf66c9746b893637d7acb86941d2ab462281f86acdead9126507b5c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ab145f1d0d2bc81a1f0c6ee59ea8ac31190a40cae2d41ea960b5dcdf577a49bb\",\"dweb:/ipfs/QmQQRVgsTDFpYsLH3wDqiKGTLMaZG6BNhuuhH5h5qEmvdx\"]},\"Utils/Context.sol\":{\"keccak256\":\"0x81d5fc973a522c8909d60be6a201869d46aa47b030b8813f60616404628c2b94\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9755b505799e622d964a843a8ed1fd60fedffca230178e5cb95ae9280df4dcd2\",\"dweb:/ipfs/QmRkhUYUUgRZ2QYJjmtQct2ubyYwS3bdUMhbuFYM12VfYn\"]},\"Utils/EnumerableSet.sol\":{\"keccak256\":\"0x8adfeb5c886c6a727bdeac6db8e78f418e09f16f7c941c7111125b59ec2fd838\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://632e2346228015ce98183a0f0658057a9f2ae8b8d25b639eb9303e8e0ea34957\",\"dweb:/ipfs/QmPY3nbe3JhMsgyHJTtXRkLTioW997Bvizt23mPNKKGSgu\"]},\"Utils/Ownable.sol\":{\"keccak256\":\"0x5eeb86897007c578f301464fceac720c7330486c54ae85c0c09068b46197cfb9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://edefd9ff4f087a3016763a687eaae449c0e8f6dcda9d86032a49de900f129050\",\"dweb:/ipfs/Qmc4adiPdGKgEJLxqgd8JuKkwrNBNtB78kkGinnnuUnyJN\"]},\"Utils/ReentrancyGuard.sol\":{\"keccak256\":\"0x5531a4a8604939470e38d88dbb16a35c38cf17a3d66393fe9c73b5da561615df\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d0fd4ce017408e0e7cda8bb02298443533e2fbb261878df176374bee5c3e4adf\",\"dweb:/ipfs/QmPhT3sFavHxyWopC7f1Ukzw1TDmmkzr5te24Btuvunpz1\"]},\"Utils/SafeMath.sol\":{\"keccak256\":\"0xdc9b51d94a1db880c1f2e722af561c28c41100eea201b1ae5e77eb7c4250e389\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0b69f7fb378dcfd4aff8ba0547a575485d2d4bb567381e3bf8c593b63272ffc0\",\"dweb:/ipfs/QmaEo28ZDAnpDvpQRRt7Qc8bF5QgJAnTEE4TxYnJS8YmnN\"]},\"Utils/TransferHelper.sol\":{\"keccak256\":\"0x7ab3ec832cb3fa01c85928f2aa6535f00adda76d891cb087e75ba493b6027d7f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ffc0f1cefbdb42cb111d8e76e27e788cd2ed8b846d3b8f19d0935beedffca891\",\"dweb:/ipfs/QmbRJm5q9Xqv9Py9aqkGqiKMfkHzdXvnidCLFH66oXY3Zk\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 1898,
								"contract": "Ethereum/Presale.sol:Presale",
								"label": "_status",
								"offset": 0,
								"slot": "0",
								"type": "t_uint256"
							},
							{
								"astId": 1790,
								"contract": "Ethereum/Presale.sol:Presale",
								"label": "_owner",
								"offset": 0,
								"slot": "1",
								"type": "t_address"
							},
							{
								"astId": 768,
								"contract": "Ethereum/Presale.sol:Presale",
								"label": "buyerInfo",
								"offset": 0,
								"slot": "2",
								"type": "t_mapping(t_address,t_struct(BuyerInfo)747_storage)"
							},
							{
								"astId": 772,
								"contract": "Ethereum/Presale.sol:Presale",
								"label": "userFee",
								"offset": 0,
								"slot": "3",
								"type": "t_mapping(t_address,t_uint256)"
							},
							{
								"astId": 775,
								"contract": "Ethereum/Presale.sol:Presale",
								"label": "presaleStatus",
								"offset": 0,
								"slot": "4",
								"type": "t_struct(PresaleStatus)763_storage"
							},
							{
								"astId": 778,
								"contract": "Ethereum/Presale.sol:Presale",
								"label": "saleInfor",
								"offset": 0,
								"slot": "11",
								"type": "t_struct(SaleInfor)734_storage"
							},
							{
								"astId": 781,
								"contract": "Ethereum/Presale.sol:Presale",
								"label": "WETH",
								"offset": 0,
								"slot": "23",
								"type": "t_contract(IERC20)663"
							},
							{
								"astId": 783,
								"contract": "Ethereum/Presale.sol:Presale",
								"label": "feeAnyone",
								"offset": 0,
								"slot": "24",
								"type": "t_uint256"
							},
							{
								"astId": 786,
								"contract": "Ethereum/Presale.sol:Presale",
								"label": "admins",
								"offset": 0,
								"slot": "25",
								"type": "t_struct(AddressSet)1495_storage"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_address_payable": {
								"encoding": "inplace",
								"label": "address payable",
								"numberOfBytes": "20"
							},
							"t_array(t_address)dyn_storage": {
								"base": "t_address",
								"encoding": "dynamic_array",
								"label": "address[]",
								"numberOfBytes": "32"
							},
							"t_array(t_bytes32)dyn_storage": {
								"base": "t_bytes32",
								"encoding": "dynamic_array",
								"label": "bytes32[]",
								"numberOfBytes": "32"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_bytes32": {
								"encoding": "inplace",
								"label": "bytes32",
								"numberOfBytes": "32"
							},
							"t_contract(ERC20)585": {
								"encoding": "inplace",
								"label": "contract ERC20",
								"numberOfBytes": "20"
							},
							"t_contract(IERC20)663": {
								"encoding": "inplace",
								"label": "contract IERC20",
								"numberOfBytes": "20"
							},
							"t_mapping(t_address,t_struct(BuyerInfo)747_storage)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => struct Presale.BuyerInfo)",
								"numberOfBytes": "32",
								"value": "t_struct(BuyerInfo)747_storage"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_mapping(t_bytes32,t_uint256)": {
								"encoding": "mapping",
								"key": "t_bytes32",
								"label": "mapping(bytes32 => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_struct(AddressSet)1495_storage": {
								"encoding": "inplace",
								"label": "struct EnumerableSet.AddressSet",
								"members": [
									{
										"astId": 1494,
										"contract": "Ethereum/Presale.sol:Presale",
										"label": "_inner",
										"offset": 0,
										"slot": "0",
										"type": "t_struct(Set)1194_storage"
									}
								],
								"numberOfBytes": "64"
							},
							"t_struct(BuyerInfo)747_storage": {
								"encoding": "inplace",
								"label": "struct Presale.BuyerInfo",
								"members": [
									{
										"astId": 736,
										"contract": "Ethereum/Presale.sol:Presale",
										"label": "baseDeposit",
										"offset": 0,
										"slot": "0",
										"type": "t_uint256"
									},
									{
										"astId": 738,
										"contract": "Ethereum/Presale.sol:Presale",
										"label": "tokenOwner",
										"offset": 0,
										"slot": "1",
										"type": "t_uint256"
									},
									{
										"astId": 740,
										"contract": "Ethereum/Presale.sol:Presale",
										"label": "lastWithDraw",
										"offset": 0,
										"slot": "2",
										"type": "t_uint256"
									},
									{
										"astId": 742,
										"contract": "Ethereum/Presale.sol:Presale",
										"label": "totalTokenWithDraw",
										"offset": 0,
										"slot": "3",
										"type": "t_uint256"
									},
									{
										"astId": 744,
										"contract": "Ethereum/Presale.sol:Presale",
										"label": "isRefund",
										"offset": 0,
										"slot": "4",
										"type": "t_bool"
									},
									{
										"astId": 746,
										"contract": "Ethereum/Presale.sol:Presale",
										"label": "isClaim",
										"offset": 1,
										"slot": "4",
										"type": "t_bool"
									}
								],
								"numberOfBytes": "160"
							},
							"t_struct(PresaleStatus)763_storage": {
								"encoding": "inplace",
								"label": "struct Presale.PresaleStatus",
								"members": [
									{
										"astId": 749,
										"contract": "Ethereum/Presale.sol:Presale",
										"label": "totalBaseCollected",
										"offset": 0,
										"slot": "0",
										"type": "t_uint256"
									},
									{
										"astId": 751,
										"contract": "Ethereum/Presale.sol:Presale",
										"label": "totalTokenSold",
										"offset": 0,
										"slot": "1",
										"type": "t_uint256"
									},
									{
										"astId": 753,
										"contract": "Ethereum/Presale.sol:Presale",
										"label": "totalTokenWithDraw",
										"offset": 0,
										"slot": "2",
										"type": "t_uint256"
									},
									{
										"astId": 755,
										"contract": "Ethereum/Presale.sol:Presale",
										"label": "totalBaseWithDraw",
										"offset": 0,
										"slot": "3",
										"type": "t_uint256"
									},
									{
										"astId": 757,
										"contract": "Ethereum/Presale.sol:Presale",
										"label": "numByer",
										"offset": 0,
										"slot": "4",
										"type": "t_uint256"
									},
									{
										"astId": 759,
										"contract": "Ethereum/Presale.sol:Presale",
										"label": "totalFee",
										"offset": 0,
										"slot": "5",
										"type": "t_uint256"
									},
									{
										"astId": 762,
										"contract": "Ethereum/Presale.sol:Presale",
										"label": "admin",
										"offset": 0,
										"slot": "6",
										"type": "t_array(t_address)dyn_storage"
									}
								],
								"numberOfBytes": "224"
							},
							"t_struct(SaleInfor)734_storage": {
								"encoding": "inplace",
								"label": "struct Presale.SaleInfor",
								"members": [
									{
										"astId": 709,
										"contract": "Ethereum/Presale.sol:Presale",
										"label": "presaleOwner",
										"offset": 0,
										"slot": "0",
										"type": "t_address_payable"
									},
									{
										"astId": 712,
										"contract": "Ethereum/Presale.sol:Presale",
										"label": "saleToken",
										"offset": 0,
										"slot": "1",
										"type": "t_contract(ERC20)585"
									},
									{
										"astId": 715,
										"contract": "Ethereum/Presale.sol:Presale",
										"label": "baseToken",
										"offset": 0,
										"slot": "2",
										"type": "t_contract(ERC20)585"
									},
									{
										"astId": 717,
										"contract": "Ethereum/Presale.sol:Presale",
										"label": "tokenPrice",
										"offset": 0,
										"slot": "3",
										"type": "t_uint256"
									},
									{
										"astId": 719,
										"contract": "Ethereum/Presale.sol:Presale",
										"label": "startSale",
										"offset": 0,
										"slot": "4",
										"type": "t_uint256"
									},
									{
										"astId": 721,
										"contract": "Ethereum/Presale.sol:Presale",
										"label": "endSale",
										"offset": 0,
										"slot": "5",
										"type": "t_uint256"
									},
									{
										"astId": 723,
										"contract": "Ethereum/Presale.sol:Presale",
										"label": "minSpendPerBuyer",
										"offset": 0,
										"slot": "6",
										"type": "t_uint256"
									},
									{
										"astId": 725,
										"contract": "Ethereum/Presale.sol:Presale",
										"label": "maxSpendPerBuyer",
										"offset": 0,
										"slot": "7",
										"type": "t_uint256"
									},
									{
										"astId": 727,
										"contract": "Ethereum/Presale.sol:Presale",
										"label": "refundFee",
										"offset": 0,
										"slot": "8",
										"type": "t_uint256"
									},
									{
										"astId": 729,
										"contract": "Ethereum/Presale.sol:Presale",
										"label": "claimFee",
										"offset": 0,
										"slot": "9",
										"type": "t_uint256"
									},
									{
										"astId": 731,
										"contract": "Ethereum/Presale.sol:Presale",
										"label": "saleIsBaseToken",
										"offset": 0,
										"slot": "10",
										"type": "t_bool"
									},
									{
										"astId": 733,
										"contract": "Ethereum/Presale.sol:Presale",
										"label": "amountTokenForSale",
										"offset": 0,
										"slot": "11",
										"type": "t_uint256"
									}
								],
								"numberOfBytes": "384"
							},
							"t_struct(Set)1194_storage": {
								"encoding": "inplace",
								"label": "struct EnumerableSet.Set",
								"members": [
									{
										"astId": 1189,
										"contract": "Ethereum/Presale.sol:Presale",
										"label": "_values",
										"offset": 0,
										"slot": "0",
										"type": "t_array(t_bytes32)dyn_storage"
									},
									{
										"astId": 1193,
										"contract": "Ethereum/Presale.sol:Presale",
										"label": "_indexes",
										"offset": 0,
										"slot": "1",
										"type": "t_mapping(t_bytes32,t_uint256)"
									}
								],
								"numberOfBytes": "64"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"Utils/Context.sol": {
				"Context": {
					"abi": [],
					"devdoc": {
						"details": "Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"Utils/Context.sol\":\"Context\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"Utils/Context.sol\":{\"keccak256\":\"0x81d5fc973a522c8909d60be6a201869d46aa47b030b8813f60616404628c2b94\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9755b505799e622d964a843a8ed1fd60fedffca230178e5cb95ae9280df4dcd2\",\"dweb:/ipfs/QmRkhUYUUgRZ2QYJjmtQct2ubyYwS3bdUMhbuFYM12VfYn\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"Utils/EnumerableSet.sol": {
				"EnumerableSet": {
					"abi": [],
					"devdoc": {
						"details": "Library for managing https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive types. Sets have the following properties: - Elements are added, removed, and checked for existence in constant time (O(1)). - Elements are enumerated in O(n). No guarantees are made on the ordering. ``` contract Example {     // Add the library methods     using EnumerableSet for EnumerableSet.AddressSet;     // Declare a set state variable     EnumerableSet.AddressSet private mySet; } ``` As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`) and `uint256` (`UintSet`) are supported. [WARNING] ====  Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable.  See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.  In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet. ====",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"Utils/EnumerableSet.sol\":1265:13048  library EnumerableSet {\r... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"Utils/EnumerableSet.sol\":1265:13048  library EnumerableSet {\r... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220e53c495bbcb95b26375932641aebc5c4c0c184b4691d7201b38f69c15214bdc164736f6c63430008040033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220e53c495bbcb95b26375932641aebc5c4c0c184b4691d7201b38f69c15214bdc164736f6c63430008040033",
							"opcodes": "PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE5 EXTCODECOPY 0x49 JUMPDEST 0xBC 0xB9 JUMPDEST 0x26 CALLDATACOPY MSIZE ORIGIN PUSH5 0x1AEBC5C4C0 0xC1 DUP5 0xB4 PUSH10 0x1D7201B38F69C15214BD 0xC1 PUSH5 0x736F6C6343 STOP ADDMOD DIV STOP CALLER ",
							"sourceMap": "1265:11783:5:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;1265:11783:5;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220e53c495bbcb95b26375932641aebc5c4c0c184b4691d7201b38f69c15214bdc164736f6c63430008040033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE5 EXTCODECOPY 0x49 JUMPDEST 0xBC 0xB9 JUMPDEST 0x26 CALLDATACOPY MSIZE ORIGIN PUSH5 0x1AEBC5C4C0 0xC1 DUP5 0xB4 PUSH10 0x1D7201B38F69C15214BD 0xC1 PUSH5 0x736F6C6343 STOP ADDMOD DIV STOP CALLER ",
							"sourceMap": "1265:11783:5:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "103",
								"totalCost": "17303"
							},
							"internal": {
								"_add(struct EnumerableSet.Set storage pointer,bytes32)": "infinite",
								"_at(struct EnumerableSet.Set storage pointer,uint256)": "infinite",
								"_contains(struct EnumerableSet.Set storage pointer,bytes32)": "infinite",
								"_length(struct EnumerableSet.Set storage pointer)": "infinite",
								"_remove(struct EnumerableSet.Set storage pointer,bytes32)": "infinite",
								"_values(struct EnumerableSet.Set storage pointer)": "infinite",
								"add(struct EnumerableSet.AddressSet storage pointer,address)": "infinite",
								"add(struct EnumerableSet.Bytes32Set storage pointer,bytes32)": "infinite",
								"add(struct EnumerableSet.UintSet storage pointer,uint256)": "infinite",
								"at(struct EnumerableSet.AddressSet storage pointer,uint256)": "infinite",
								"at(struct EnumerableSet.Bytes32Set storage pointer,uint256)": "infinite",
								"at(struct EnumerableSet.UintSet storage pointer,uint256)": "infinite",
								"contains(struct EnumerableSet.AddressSet storage pointer,address)": "infinite",
								"contains(struct EnumerableSet.Bytes32Set storage pointer,bytes32)": "infinite",
								"contains(struct EnumerableSet.UintSet storage pointer,uint256)": "infinite",
								"length(struct EnumerableSet.AddressSet storage pointer)": "infinite",
								"length(struct EnumerableSet.Bytes32Set storage pointer)": "infinite",
								"length(struct EnumerableSet.UintSet storage pointer)": "infinite",
								"remove(struct EnumerableSet.AddressSet storage pointer,address)": "infinite",
								"remove(struct EnumerableSet.Bytes32Set storage pointer,bytes32)": "infinite",
								"remove(struct EnumerableSet.UintSet storage pointer,uint256)": "infinite",
								"values(struct EnumerableSet.AddressSet storage pointer)": "infinite",
								"values(struct EnumerableSet.Bytes32Set storage pointer)": "infinite",
								"values(struct EnumerableSet.UintSet storage pointer)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 1265,
									"end": 13048,
									"name": "PUSH #[$]",
									"source": 5,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1265,
									"end": 13048,
									"name": "PUSH [$]",
									"source": 5,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1265,
									"end": 13048,
									"name": "PUSH",
									"source": 5,
									"value": "B"
								},
								{
									"begin": 1265,
									"end": 13048,
									"name": "DUP3",
									"source": 5
								},
								{
									"begin": 1265,
									"end": 13048,
									"name": "DUP3",
									"source": 5
								},
								{
									"begin": 1265,
									"end": 13048,
									"name": "DUP3",
									"source": 5
								},
								{
									"begin": 1265,
									"end": 13048,
									"name": "CODECOPY",
									"source": 5
								},
								{
									"begin": 1265,
									"end": 13048,
									"name": "DUP1",
									"source": 5
								},
								{
									"begin": 1265,
									"end": 13048,
									"name": "MLOAD",
									"source": 5
								},
								{
									"begin": 1265,
									"end": 13048,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 1265,
									"end": 13048,
									"name": "BYTE",
									"source": 5
								},
								{
									"begin": 1265,
									"end": 13048,
									"name": "PUSH",
									"source": 5,
									"value": "73"
								},
								{
									"begin": 1265,
									"end": 13048,
									"name": "EQ",
									"source": 5
								},
								{
									"begin": 1265,
									"end": 13048,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "1"
								},
								{
									"begin": 1265,
									"end": 13048,
									"name": "JUMPI",
									"source": 5
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 1265,
									"end": 13048,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 1265,
									"end": 13048,
									"name": "MSTORE",
									"source": 5
								},
								{
									"begin": 1265,
									"end": 13048,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 1265,
									"end": 13048,
									"name": "PUSH",
									"source": 5,
									"value": "4"
								},
								{
									"begin": 1265,
									"end": 13048,
									"name": "MSTORE",
									"source": 5
								},
								{
									"begin": 1265,
									"end": 13048,
									"name": "PUSH",
									"source": 5,
									"value": "24"
								},
								{
									"begin": 1265,
									"end": 13048,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 1265,
									"end": 13048,
									"name": "REVERT",
									"source": 5
								},
								{
									"begin": 1265,
									"end": 13048,
									"name": "tag",
									"source": 5,
									"value": "1"
								},
								{
									"begin": 1265,
									"end": 13048,
									"name": "JUMPDEST",
									"source": 5
								},
								{
									"begin": 1265,
									"end": 13048,
									"name": "ADDRESS",
									"source": 5
								},
								{
									"begin": 1265,
									"end": 13048,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 1265,
									"end": 13048,
									"name": "MSTORE",
									"source": 5
								},
								{
									"begin": 1265,
									"end": 13048,
									"name": "PUSH",
									"source": 5,
									"value": "73"
								},
								{
									"begin": 1265,
									"end": 13048,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 1265,
									"end": 13048,
									"name": "MSTORE8",
									"source": 5
								},
								{
									"begin": 1265,
									"end": 13048,
									"name": "DUP3",
									"source": 5
								},
								{
									"begin": 1265,
									"end": 13048,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 1265,
									"end": 13048,
									"name": "RETURN",
									"source": 5
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220e53c495bbcb95b26375932641aebc5c4c0c184b4691d7201b38f69c15214bdc164736f6c63430008040033",
									".code": [
										{
											"begin": 1265,
											"end": 13048,
											"name": "PUSHDEPLOYADDRESS",
											"source": 5
										},
										{
											"begin": 1265,
											"end": 13048,
											"name": "ADDRESS",
											"source": 5
										},
										{
											"begin": 1265,
											"end": 13048,
											"name": "EQ",
											"source": 5
										},
										{
											"begin": 1265,
											"end": 13048,
											"name": "PUSH",
											"source": 5,
											"value": "80"
										},
										{
											"begin": 1265,
											"end": 13048,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 1265,
											"end": 13048,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 1265,
											"end": 13048,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 1265,
											"end": 13048,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 1265,
											"end": 13048,
											"name": "REVERT",
											"source": 5
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Library for managing https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive types. Sets have the following properties: - Elements are added, removed, and checked for existence in constant time (O(1)). - Elements are enumerated in O(n). No guarantees are made on the ordering. ``` contract Example {     // Add the library methods     using EnumerableSet for EnumerableSet.AddressSet;     // Declare a set state variable     EnumerableSet.AddressSet private mySet; } ``` As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`) and `uint256` (`UintSet`) are supported. [WARNING] ====  Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable.  See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.  In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet. ====\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"Utils/EnumerableSet.sol\":\"EnumerableSet\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"Utils/EnumerableSet.sol\":{\"keccak256\":\"0x8adfeb5c886c6a727bdeac6db8e78f418e09f16f7c941c7111125b59ec2fd838\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://632e2346228015ce98183a0f0658057a9f2ae8b8d25b639eb9303e8e0ea34957\",\"dweb:/ipfs/QmPY3nbe3JhMsgyHJTtXRkLTioW997Bvizt23mPNKKGSgu\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"Utils/Ownable.sol": {
				"Ownable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.",
						"kind": "dev",
						"methods": {
							"constructor": {
								"details": "Initializes the contract setting the deployer as the initial owner."
							},
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"owner()": "8da5cb5b",
							"renounceOwnership()": "715018a6",
							"transferOwnership(address)": "f2fde38b"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the contract setting the deployer as the initial owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"Utils/Ownable.sol\":\"Ownable\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"Utils/Context.sol\":{\"keccak256\":\"0x81d5fc973a522c8909d60be6a201869d46aa47b030b8813f60616404628c2b94\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9755b505799e622d964a843a8ed1fd60fedffca230178e5cb95ae9280df4dcd2\",\"dweb:/ipfs/QmRkhUYUUgRZ2QYJjmtQct2ubyYwS3bdUMhbuFYM12VfYn\"]},\"Utils/Ownable.sol\":{\"keccak256\":\"0x5eeb86897007c578f301464fceac720c7330486c54ae85c0c09068b46197cfb9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://edefd9ff4f087a3016763a687eaae449c0e8f6dcda9d86032a49de900f129050\",\"dweb:/ipfs/Qmc4adiPdGKgEJLxqgd8JuKkwrNBNtB78kkGinnnuUnyJN\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 1790,
								"contract": "Utils/Ownable.sol:Ownable",
								"label": "_owner",
								"offset": 0,
								"slot": "0",
								"type": "t_address"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"Utils/ReentrancyGuard.sol": {
				"ReentrancyGuard": {
					"abi": [],
					"devdoc": {
						"details": "Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"Utils/ReentrancyGuard.sol\":\"ReentrancyGuard\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"Utils/ReentrancyGuard.sol\":{\"keccak256\":\"0x5531a4a8604939470e38d88dbb16a35c38cf17a3d66393fe9c73b5da561615df\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d0fd4ce017408e0e7cda8bb02298443533e2fbb261878df176374bee5c3e4adf\",\"dweb:/ipfs/QmPhT3sFavHxyWopC7f1Ukzw1TDmmkzr5te24Btuvunpz1\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 1898,
								"contract": "Utils/ReentrancyGuard.sol:ReentrancyGuard",
								"label": "_status",
								"offset": 0,
								"slot": "0",
								"type": "t_uint256"
							}
						],
						"types": {
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"Utils/SafeMath.sol": {
				"SafeMath": {
					"abi": [],
					"devdoc": {
						"details": "Wrappers over Solidity's arithmetic operations. NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler now has built in overflow checking.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"Utils/SafeMath.sol\":497:7008  library SafeMath {\r... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"Utils/SafeMath.sol\":497:7008  library SafeMath {\r... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220a0b337010d3b45e2490a749575289c7fd3966b6186b0a19be6d68cb1c67b6dd064736f6c63430008040033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220a0b337010d3b45e2490a749575289c7fd3966b6186b0a19be6d68cb1c67b6dd064736f6c63430008040033",
							"opcodes": "PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 LOG0 0xB3 CALLDATACOPY ADD 0xD EXTCODESIZE GASLIMIT 0xE2 0x49 EXP PUSH21 0x9575289C7FD3966B6186B0A19BE6D68CB1C67B6DD0 PUSH5 0x736F6C6343 STOP ADDMOD DIV STOP CALLER ",
							"sourceMap": "497:6511:8:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;497:6511:8;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220a0b337010d3b45e2490a749575289c7fd3966b6186b0a19be6d68cb1c67b6dd064736f6c63430008040033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 LOG0 0xB3 CALLDATACOPY ADD 0xD EXTCODESIZE GASLIMIT 0xE2 0x49 EXP PUSH21 0x9575289C7FD3966B6186B0A19BE6D68CB1C67B6DD0 PUSH5 0x736F6C6343 STOP ADDMOD DIV STOP CALLER ",
							"sourceMap": "497:6511:8:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "103",
								"totalCost": "17303"
							},
							"internal": {
								"add(uint256,uint256)": "infinite",
								"div(uint256,uint256)": "infinite",
								"div(uint256,uint256,string memory)": "infinite",
								"mod(uint256,uint256)": "infinite",
								"mod(uint256,uint256,string memory)": "infinite",
								"mul(uint256,uint256)": "infinite",
								"sub(uint256,uint256)": "infinite",
								"sub(uint256,uint256,string memory)": "infinite",
								"tryAdd(uint256,uint256)": "infinite",
								"tryDiv(uint256,uint256)": "infinite",
								"tryMod(uint256,uint256)": "infinite",
								"tryMul(uint256,uint256)": "infinite",
								"trySub(uint256,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 497,
									"end": 7008,
									"name": "PUSH #[$]",
									"source": 8,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 497,
									"end": 7008,
									"name": "PUSH [$]",
									"source": 8,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 497,
									"end": 7008,
									"name": "PUSH",
									"source": 8,
									"value": "B"
								},
								{
									"begin": 497,
									"end": 7008,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 497,
									"end": 7008,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 497,
									"end": 7008,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 497,
									"end": 7008,
									"name": "CODECOPY",
									"source": 8
								},
								{
									"begin": 497,
									"end": 7008,
									"name": "DUP1",
									"source": 8
								},
								{
									"begin": 497,
									"end": 7008,
									"name": "MLOAD",
									"source": 8
								},
								{
									"begin": 497,
									"end": 7008,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 497,
									"end": 7008,
									"name": "BYTE",
									"source": 8
								},
								{
									"begin": 497,
									"end": 7008,
									"name": "PUSH",
									"source": 8,
									"value": "73"
								},
								{
									"begin": 497,
									"end": 7008,
									"name": "EQ",
									"source": 8
								},
								{
									"begin": 497,
									"end": 7008,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "1"
								},
								{
									"begin": 497,
									"end": 7008,
									"name": "JUMPI",
									"source": 8
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 497,
									"end": 7008,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 497,
									"end": 7008,
									"name": "MSTORE",
									"source": 8
								},
								{
									"begin": 497,
									"end": 7008,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 497,
									"end": 7008,
									"name": "PUSH",
									"source": 8,
									"value": "4"
								},
								{
									"begin": 497,
									"end": 7008,
									"name": "MSTORE",
									"source": 8
								},
								{
									"begin": 497,
									"end": 7008,
									"name": "PUSH",
									"source": 8,
									"value": "24"
								},
								{
									"begin": 497,
									"end": 7008,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 497,
									"end": 7008,
									"name": "REVERT",
									"source": 8
								},
								{
									"begin": 497,
									"end": 7008,
									"name": "tag",
									"source": 8,
									"value": "1"
								},
								{
									"begin": 497,
									"end": 7008,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 497,
									"end": 7008,
									"name": "ADDRESS",
									"source": 8
								},
								{
									"begin": 497,
									"end": 7008,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 497,
									"end": 7008,
									"name": "MSTORE",
									"source": 8
								},
								{
									"begin": 497,
									"end": 7008,
									"name": "PUSH",
									"source": 8,
									"value": "73"
								},
								{
									"begin": 497,
									"end": 7008,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 497,
									"end": 7008,
									"name": "MSTORE8",
									"source": 8
								},
								{
									"begin": 497,
									"end": 7008,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 497,
									"end": 7008,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 497,
									"end": 7008,
									"name": "RETURN",
									"source": 8
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220a0b337010d3b45e2490a749575289c7fd3966b6186b0a19be6d68cb1c67b6dd064736f6c63430008040033",
									".code": [
										{
											"begin": 497,
											"end": 7008,
											"name": "PUSHDEPLOYADDRESS",
											"source": 8
										},
										{
											"begin": 497,
											"end": 7008,
											"name": "ADDRESS",
											"source": 8
										},
										{
											"begin": 497,
											"end": 7008,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 497,
											"end": 7008,
											"name": "PUSH",
											"source": 8,
											"value": "80"
										},
										{
											"begin": 497,
											"end": 7008,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 497,
											"end": 7008,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 497,
											"end": 7008,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 497,
											"end": 7008,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 497,
											"end": 7008,
											"name": "REVERT",
											"source": 8
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Wrappers over Solidity's arithmetic operations. NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler now has built in overflow checking.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"Utils/SafeMath.sol\":\"SafeMath\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"Utils/SafeMath.sol\":{\"keccak256\":\"0xdc9b51d94a1db880c1f2e722af561c28c41100eea201b1ae5e77eb7c4250e389\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0b69f7fb378dcfd4aff8ba0547a575485d2d4bb567381e3bf8c593b63272ffc0\",\"dweb:/ipfs/QmaEo28ZDAnpDvpQRRt7Qc8bF5QgJAnTEE4TxYnJS8YmnN\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"Utils/TransferHelper.sol": {
				"TransferHelper": {
					"abi": [],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"Utils/TransferHelper.sol\":244:2136  library TransferHelper {\r... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"Utils/TransferHelper.sol\":244:2136  library TransferHelper {\r... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220fc2dcae6a05713213a1bab948a2cccec934b4b9050961801211140207d87ec0264736f6c63430008040033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220fc2dcae6a05713213a1bab948a2cccec934b4b9050961801211140207d87ec0264736f6c63430008040033",
							"opcodes": "PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xFC 0x2D 0xCA 0xE6 LOG0 JUMPI SGT 0x21 GASPRICE SHL 0xAB SWAP5 DUP11 0x2C 0xCC 0xEC SWAP4 0x4B 0x4B SWAP1 POP SWAP7 XOR ADD 0x21 GT BLOCKHASH KECCAK256 PUSH30 0x87EC0264736F6C6343000804003300000000000000000000000000000000 ",
							"sourceMap": "244:1892:9:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;244:1892:9;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220fc2dcae6a05713213a1bab948a2cccec934b4b9050961801211140207d87ec0264736f6c63430008040033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xFC 0x2D 0xCA 0xE6 LOG0 JUMPI SGT 0x21 GASPRICE SHL 0xAB SWAP5 DUP11 0x2C 0xCC 0xEC SWAP4 0x4B 0x4B SWAP1 POP SWAP7 XOR ADD 0x21 GT BLOCKHASH KECCAK256 PUSH30 0x87EC0264736F6C6343000804003300000000000000000000000000000000 ",
							"sourceMap": "244:1892:9:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "103",
								"totalCost": "17303"
							},
							"internal": {
								"safeApprove(address,address,uint256)": "infinite",
								"safeTransferBaseToken(address,address payable,uint256,bool)": "infinite",
								"safeTransferFrom(address,address,address,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 244,
									"end": 2136,
									"name": "PUSH #[$]",
									"source": 9,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 244,
									"end": 2136,
									"name": "PUSH [$]",
									"source": 9,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 244,
									"end": 2136,
									"name": "PUSH",
									"source": 9,
									"value": "B"
								},
								{
									"begin": 244,
									"end": 2136,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 244,
									"end": 2136,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 244,
									"end": 2136,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 244,
									"end": 2136,
									"name": "CODECOPY",
									"source": 9
								},
								{
									"begin": 244,
									"end": 2136,
									"name": "DUP1",
									"source": 9
								},
								{
									"begin": 244,
									"end": 2136,
									"name": "MLOAD",
									"source": 9
								},
								{
									"begin": 244,
									"end": 2136,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 244,
									"end": 2136,
									"name": "BYTE",
									"source": 9
								},
								{
									"begin": 244,
									"end": 2136,
									"name": "PUSH",
									"source": 9,
									"value": "73"
								},
								{
									"begin": 244,
									"end": 2136,
									"name": "EQ",
									"source": 9
								},
								{
									"begin": 244,
									"end": 2136,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "1"
								},
								{
									"begin": 244,
									"end": 2136,
									"name": "JUMPI",
									"source": 9
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 244,
									"end": 2136,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 244,
									"end": 2136,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 244,
									"end": 2136,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 244,
									"end": 2136,
									"name": "PUSH",
									"source": 9,
									"value": "4"
								},
								{
									"begin": 244,
									"end": 2136,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 244,
									"end": 2136,
									"name": "PUSH",
									"source": 9,
									"value": "24"
								},
								{
									"begin": 244,
									"end": 2136,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 244,
									"end": 2136,
									"name": "REVERT",
									"source": 9
								},
								{
									"begin": 244,
									"end": 2136,
									"name": "tag",
									"source": 9,
									"value": "1"
								},
								{
									"begin": 244,
									"end": 2136,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 244,
									"end": 2136,
									"name": "ADDRESS",
									"source": 9
								},
								{
									"begin": 244,
									"end": 2136,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 244,
									"end": 2136,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 244,
									"end": 2136,
									"name": "PUSH",
									"source": 9,
									"value": "73"
								},
								{
									"begin": 244,
									"end": 2136,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 244,
									"end": 2136,
									"name": "MSTORE8",
									"source": 9
								},
								{
									"begin": 244,
									"end": 2136,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 244,
									"end": 2136,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 244,
									"end": 2136,
									"name": "RETURN",
									"source": 9
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220fc2dcae6a05713213a1bab948a2cccec934b4b9050961801211140207d87ec0264736f6c63430008040033",
									".code": [
										{
											"begin": 244,
											"end": 2136,
											"name": "PUSHDEPLOYADDRESS",
											"source": 9
										},
										{
											"begin": 244,
											"end": 2136,
											"name": "ADDRESS",
											"source": 9
										},
										{
											"begin": 244,
											"end": 2136,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 244,
											"end": 2136,
											"name": "PUSH",
											"source": 9,
											"value": "80"
										},
										{
											"begin": 244,
											"end": 2136,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 244,
											"end": 2136,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 244,
											"end": 2136,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 244,
											"end": 2136,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 244,
											"end": 2136,
											"name": "REVERT",
											"source": 9
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"helper methods for interacting with ERC20 tokens that do not consistently return true/false with the addition of a transfer function to send eth or an erc20 token\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"Utils/TransferHelper.sol\":\"TransferHelper\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"Utils/TransferHelper.sol\":{\"keccak256\":\"0x7ab3ec832cb3fa01c85928f2aa6535f00adda76d891cb087e75ba493b6027d7f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ffc0f1cefbdb42cb111d8e76e27e788cd2ed8b846d3b8f19d0935beedffca891\",\"dweb:/ipfs/QmbRJm5q9Xqv9Py9aqkGqiKMfkHzdXvnidCLFH66oXY3Zk\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"notice": "helper methods for interacting with ERC20 tokens that do not consistently return true/false with the addition of a transfer function to send eth or an erc20 token",
						"version": 1
					}
				}
			}
		},
		"errors": [
			{
				"component": "general",
				"errorCode": "2072",
				"formattedMessage": "Warning: Unused local variable.\n   --> Ethereum/Presale.sol:115:9:\n    |\n115 |         BuyerInfo storage buyer = buyerInfo[msg.sender];\n    |         ^^^^^^^^^^^^^^^^^^^^^^^\n\n",
				"message": "Unused local variable.",
				"severity": "warning",
				"sourceLocation": {
					"end": 3563,
					"file": "Ethereum/Presale.sol",
					"start": 3540
				},
				"type": "Warning"
			},
			{
				"component": "general",
				"errorCode": "2072",
				"formattedMessage": "Warning: Unused local variable.\n   --> Ethereum/Presale.sol:118:9:\n    |\n118 |         uint256 fee = 0;\n    |         ^^^^^^^^^^^\n\n",
				"message": "Unused local variable.",
				"severity": "warning",
				"sourceLocation": {
					"end": 3692,
					"file": "Ethereum/Presale.sol",
					"start": 3681
				},
				"type": "Warning"
			},
			{
				"component": "general",
				"errorCode": "2072",
				"formattedMessage": "Warning: Unused local variable.\n   --> Ethereum/Presale.sol:131:9:\n    |\n131 |         uint256 remaining = saleInfor.maxSpendPerBuyer - real_amount_in;\n    |         ^^^^^^^^^^^^^^^^^\n\n",
				"message": "Unused local variable.",
				"severity": "warning",
				"sourceLocation": {
					"end": 4197,
					"file": "Ethereum/Presale.sol",
					"start": 4180
				},
				"type": "Warning"
			}
		],
		"sources": {
			"ERC20/ERC20.sol": {
				"ast": {
					"absolutePath": "ERC20/ERC20.sol",
					"exportedSymbols": {
						"Context": [
							1183
						],
						"ERC20": [
							585
						],
						"IERC20": [
							663
						],
						"IERC20Metadata": [
							688
						]
					},
					"id": 586,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "108:23:0"
						},
						{
							"absolutePath": "ERC20/IERC20.sol",
							"file": "./IERC20.sol",
							"id": 2,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 586,
							"sourceUnit": 664,
							"src": "135:22:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "ERC20/IERC20Metadata.sol",
							"file": "./IERC20Metadata.sol",
							"id": 3,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 586,
							"sourceUnit": 689,
							"src": "159:30:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "Utils/Context.sol",
							"file": "../Utils/Context.sol",
							"id": 4,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 586,
							"sourceUnit": 1184,
							"src": "191:30:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 6,
										"name": "Context",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1183,
										"src": "1442:7:0"
									},
									"id": 7,
									"nodeType": "InheritanceSpecifier",
									"src": "1442:7:0"
								},
								{
									"baseName": {
										"id": 8,
										"name": "IERC20",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 663,
										"src": "1451:6:0"
									},
									"id": 9,
									"nodeType": "InheritanceSpecifier",
									"src": "1451:6:0"
								},
								{
									"baseName": {
										"id": 10,
										"name": "IERC20Metadata",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 688,
										"src": "1459:14:0"
									},
									"id": 11,
									"nodeType": "InheritanceSpecifier",
									"src": "1459:14:0"
								}
							],
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 5,
								"nodeType": "StructuredDocumentation",
								"src": "225:1197:0",
								"text": " @dev Implementation of the {IERC20} interface.\nz\n This implementation is agnostic to the way tokens are created. This means\n that a supply mechanism has to be added in a derived contract using {_mint}.\n For a generic mechanism see {ERC20PresetMinterPauser}.\n TIP: For a detailed writeup see our guide\n https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n to implement supply mechanisms].\n We have followed general OpenZeppelin Contracts guidelines: functions revert\n instead returning `false` on failure. This behavior is nonetheless\n conventional and does not conflict with the expectations of ERC20\n applications.\n Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n This allows applications to reconstruct the allowance for all accounts just\n by listening to said events. Other implementations of the EIP may not emit\n these events, as it isn't required by the specification.\n Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n functions have been added to mitigate the well-known issues around setting\n allowances. See {IERC20-approve}."
							},
							"fullyImplemented": true,
							"id": 585,
							"linearizedBaseContracts": [
								585,
								688,
								663,
								1183
							],
							"name": "ERC20",
							"nameLocation": "1433:5:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 15,
									"mutability": "mutable",
									"name": "_balances",
									"nameLocation": "1517:9:0",
									"nodeType": "VariableDeclaration",
									"scope": 585,
									"src": "1481:45:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
										"typeString": "mapping(address => uint256)"
									},
									"typeName": {
										"id": 14,
										"keyType": {
											"id": 12,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1489:7:0",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "1481:27:0",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
											"typeString": "mapping(address => uint256)"
										},
										"valueType": {
											"id": 13,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "1500:7:0",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 21,
									"mutability": "mutable",
									"name": "_allowances",
									"nameLocation": "1591:11:0",
									"nodeType": "VariableDeclaration",
									"scope": 585,
									"src": "1535:67:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
										"typeString": "mapping(address => mapping(address => uint256))"
									},
									"typeName": {
										"id": 20,
										"keyType": {
											"id": 16,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1543:7:0",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "1535:47:0",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
											"typeString": "mapping(address => mapping(address => uint256))"
										},
										"valueType": {
											"id": 19,
											"keyType": {
												"id": 17,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "1562:7:0",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"nodeType": "Mapping",
											"src": "1554:27:0",
											"typeDescriptions": {
												"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
												"typeString": "mapping(address => uint256)"
											},
											"valueType": {
												"id": 18,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1573:7:0",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											}
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 23,
									"mutability": "mutable",
									"name": "_totalSupply",
									"nameLocation": "1627:12:0",
									"nodeType": "VariableDeclaration",
									"scope": 585,
									"src": "1611:28:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 22,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1611:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 25,
									"mutability": "mutable",
									"name": "_name",
									"nameLocation": "1663:5:0",
									"nodeType": "VariableDeclaration",
									"scope": 585,
									"src": "1648:20:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_string_storage",
										"typeString": "string"
									},
									"typeName": {
										"id": 24,
										"name": "string",
										"nodeType": "ElementaryTypeName",
										"src": "1648:6:0",
										"typeDescriptions": {
											"typeIdentifier": "t_string_storage_ptr",
											"typeString": "string"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 27,
									"mutability": "mutable",
									"name": "_symbol",
									"nameLocation": "1690:7:0",
									"nodeType": "VariableDeclaration",
									"scope": 585,
									"src": "1675:22:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_string_storage",
										"typeString": "string"
									},
									"typeName": {
										"id": 26,
										"name": "string",
										"nodeType": "ElementaryTypeName",
										"src": "1675:6:0",
										"typeDescriptions": {
											"typeIdentifier": "t_string_storage_ptr",
											"typeString": "string"
										}
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 43,
										"nodeType": "Block",
										"src": "2074:60:0",
										"statements": [
											{
												"expression": {
													"id": 37,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 35,
														"name": "_name",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 25,
														"src": "2085:5:0",
														"typeDescriptions": {
															"typeIdentifier": "t_string_storage",
															"typeString": "string storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 36,
														"name": "name_",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 30,
														"src": "2093:5:0",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string memory"
														}
													},
													"src": "2085:13:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"id": 38,
												"nodeType": "ExpressionStatement",
												"src": "2085:13:0"
											},
											{
												"expression": {
													"id": 41,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 39,
														"name": "_symbol",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 27,
														"src": "2109:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_string_storage",
															"typeString": "string storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 40,
														"name": "symbol_",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 32,
														"src": "2119:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string memory"
														}
													},
													"src": "2109:17:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"id": 42,
												"nodeType": "ExpressionStatement",
												"src": "2109:17:0"
											}
										]
									},
									"documentation": {
										"id": 28,
										"nodeType": "StructuredDocumentation",
										"src": "1706:306:0",
										"text": " @dev Sets the values for {name} and {symbol}.\n The default value of {decimals} is 18. To select a different value for\n {decimals} you should overload it.\n All two of these values are immutable: they can only be set once during\n construction."
									},
									"id": 44,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 33,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 30,
												"mutability": "mutable",
												"name": "name_",
												"nameLocation": "2044:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 44,
												"src": "2030:19:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 29,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2030:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 32,
												"mutability": "mutable",
												"name": "symbol_",
												"nameLocation": "2065:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 44,
												"src": "2051:21:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 31,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2051:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2029:44:0"
									},
									"returnParameters": {
										"id": 34,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2074:0:0"
									},
									"scope": 585,
									"src": "2018:116:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										675
									],
									"body": {
										"id": 53,
										"nodeType": "Block",
										"src": "2273:31:0",
										"statements": [
											{
												"expression": {
													"id": 51,
													"name": "_name",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 25,
													"src": "2291:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"functionReturnParameters": 50,
												"id": 52,
												"nodeType": "Return",
												"src": "2284:12:0"
											}
										]
									},
									"documentation": {
										"id": 45,
										"nodeType": "StructuredDocumentation",
										"src": "2142:56:0",
										"text": " @dev Returns the name of the token."
									},
									"functionSelector": "06fdde03",
									"id": 54,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "name",
									"nameLocation": "2213:4:0",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 47,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "2240:8:0"
									},
									"parameters": {
										"id": 46,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2217:2:0"
									},
									"returnParameters": {
										"id": 50,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 49,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 54,
												"src": "2258:13:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 48,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2258:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2257:15:0"
									},
									"scope": 585,
									"src": "2204:100:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										681
									],
									"body": {
										"id": 63,
										"nodeType": "Block",
										"src": "2494:33:0",
										"statements": [
											{
												"expression": {
													"id": 61,
													"name": "_symbol",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 27,
													"src": "2512:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"functionReturnParameters": 60,
												"id": 62,
												"nodeType": "Return",
												"src": "2505:14:0"
											}
										]
									},
									"documentation": {
										"id": 55,
										"nodeType": "StructuredDocumentation",
										"src": "2312:105:0",
										"text": " @dev Returns the symbol of the token, usually a shorter version of the\n name."
									},
									"functionSelector": "95d89b41",
									"id": 64,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "symbol",
									"nameLocation": "2432:6:0",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 57,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "2461:8:0"
									},
									"parameters": {
										"id": 56,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2438:2:0"
									},
									"returnParameters": {
										"id": 60,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 59,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 64,
												"src": "2479:13:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 58,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2479:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2478:15:0"
									},
									"scope": 585,
									"src": "2423:104:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										687
									],
									"body": {
										"id": 73,
										"nodeType": "Block",
										"src": "3233:28:0",
										"statements": [
											{
												"expression": {
													"hexValue": "3138",
													"id": 71,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "3251:2:0",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_18_by_1",
														"typeString": "int_const 18"
													},
													"value": "18"
												},
												"functionReturnParameters": 70,
												"id": 72,
												"nodeType": "Return",
												"src": "3244:9:0"
											}
										]
									},
									"documentation": {
										"id": 65,
										"nodeType": "StructuredDocumentation",
										"src": "2535:625:0",
										"text": " @dev Returns the number of decimals used to get its user representation.\n For example, if `decimals` equals `2`, a balance of `505` tokens should\n be displayed to a user as `5.05` (`505 / 10 ** 2`).\n Tokens usually opt for a value of 18, imitating the relationship between\n Ether and Wei. This is the value {ERC20} uses, unless this function is\n overridden;\n NOTE: This information is only used for _display_ purposes: it in\n no way affects any of the arithmetic of the contract, including\n {IERC20-balanceOf} and {IERC20-transfer}."
									},
									"functionSelector": "313ce567",
									"id": 74,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "decimals",
									"nameLocation": "3175:8:0",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 67,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "3206:8:0"
									},
									"parameters": {
										"id": 66,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3183:2:0"
									},
									"returnParameters": {
										"id": 70,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 69,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 74,
												"src": "3224:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 68,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3224:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3223:9:0"
									},
									"scope": 585,
									"src": "3166:95:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										612
									],
									"body": {
										"id": 83,
										"nodeType": "Block",
										"src": "3396:38:0",
										"statements": [
											{
												"expression": {
													"id": 81,
													"name": "_totalSupply",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 23,
													"src": "3414:12:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 80,
												"id": 82,
												"nodeType": "Return",
												"src": "3407:19:0"
											}
										]
									},
									"documentation": {
										"id": 75,
										"nodeType": "StructuredDocumentation",
										"src": "3269:51:0",
										"text": " @dev See {IERC20-totalSupply}."
									},
									"functionSelector": "18160ddd",
									"id": 84,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "3335:11:0",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 77,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "3369:8:0"
									},
									"parameters": {
										"id": 76,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3346:2:0"
									},
									"returnParameters": {
										"id": 80,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 79,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 84,
												"src": "3387:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 78,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3387:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3386:9:0"
									},
									"scope": 585,
									"src": "3326:108:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										620
									],
									"body": {
										"id": 97,
										"nodeType": "Block",
										"src": "3580:44:0",
										"statements": [
											{
												"expression": {
													"baseExpression": {
														"id": 93,
														"name": "_balances",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 15,
														"src": "3598:9:0",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 95,
													"indexExpression": {
														"id": 94,
														"name": "account",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 87,
														"src": "3608:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "3598:18:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 92,
												"id": 96,
												"nodeType": "Return",
												"src": "3591:25:0"
											}
										]
									},
									"documentation": {
										"id": 85,
										"nodeType": "StructuredDocumentation",
										"src": "3442:49:0",
										"text": " @dev See {IERC20-balanceOf}."
									},
									"functionSelector": "70a08231",
									"id": 98,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "3506:9:0",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 89,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "3553:8:0"
									},
									"parameters": {
										"id": 88,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 87,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "3524:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 98,
												"src": "3516:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 86,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3516:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3515:17:0"
									},
									"returnParameters": {
										"id": 92,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 91,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 98,
												"src": "3571:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 90,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3571:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3570:9:0"
									},
									"scope": 585,
									"src": "3497:127:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										630
									],
									"body": {
										"id": 122,
										"nodeType": "Block",
										"src": "3915:108:0",
										"statements": [
											{
												"assignments": [
													110
												],
												"declarations": [
													{
														"constant": false,
														"id": 110,
														"mutability": "mutable",
														"name": "owner",
														"nameLocation": "3934:5:0",
														"nodeType": "VariableDeclaration",
														"scope": 122,
														"src": "3926:13:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 109,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "3926:7:0",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 113,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 111,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1173,
														"src": "3942:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 112,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3942:12:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3926:28:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 115,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 110,
															"src": "3975:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 116,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 101,
															"src": "3982:2:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 117,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 103,
															"src": "3986:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 114,
														"name": "_transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 346,
														"src": "3965:9:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 118,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3965:28:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 119,
												"nodeType": "ExpressionStatement",
												"src": "3965:28:0"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 120,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "4011:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 108,
												"id": 121,
												"nodeType": "Return",
												"src": "4004:11:0"
											}
										]
									},
									"documentation": {
										"id": 99,
										"nodeType": "StructuredDocumentation",
										"src": "3632:192:0",
										"text": " @dev See {IERC20-transfer}.\n Requirements:\n - `to` cannot be the zero address.\n - the caller must have a balance of at least `amount`."
									},
									"functionSelector": "a9059cbb",
									"id": 123,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nameLocation": "3839:8:0",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 105,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "3891:8:0"
									},
									"parameters": {
										"id": 104,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 101,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "3856:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 123,
												"src": "3848:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 100,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3848:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 103,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "3868:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 123,
												"src": "3860:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 102,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3860:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3847:28:0"
									},
									"returnParameters": {
										"id": 108,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 107,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 123,
												"src": "3909:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 106,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "3909:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3908:6:0"
									},
									"scope": 585,
									"src": "3830:193:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										640
									],
									"body": {
										"id": 140,
										"nodeType": "Block",
										"src": "4184:53:0",
										"statements": [
											{
												"expression": {
													"baseExpression": {
														"baseExpression": {
															"id": 134,
															"name": "_allowances",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 21,
															"src": "4202:11:0",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
																"typeString": "mapping(address => mapping(address => uint256))"
															}
														},
														"id": 136,
														"indexExpression": {
															"id": 135,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 126,
															"src": "4214:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "4202:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 138,
													"indexExpression": {
														"id": 137,
														"name": "spender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 128,
														"src": "4221:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "4202:27:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 133,
												"id": 139,
												"nodeType": "Return",
												"src": "4195:34:0"
											}
										]
									},
									"documentation": {
										"id": 124,
										"nodeType": "StructuredDocumentation",
										"src": "4031:49:0",
										"text": " @dev See {IERC20-allowance}."
									},
									"functionSelector": "dd62ed3e",
									"id": 141,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nameLocation": "4095:9:0",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 130,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "4157:8:0"
									},
									"parameters": {
										"id": 129,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 126,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "4113:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 141,
												"src": "4105:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 125,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4105:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 128,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "4128:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 141,
												"src": "4120:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 127,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4120:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4104:32:0"
									},
									"returnParameters": {
										"id": 133,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 132,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 141,
												"src": "4175:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 131,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4175:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4174:9:0"
									},
									"scope": 585,
									"src": "4086:151:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										650
									],
									"body": {
										"id": 165,
										"nodeType": "Block",
										"src": "4646:112:0",
										"statements": [
											{
												"assignments": [
													153
												],
												"declarations": [
													{
														"constant": false,
														"id": 153,
														"mutability": "mutable",
														"name": "owner",
														"nameLocation": "4665:5:0",
														"nodeType": "VariableDeclaration",
														"scope": 165,
														"src": "4657:13:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 152,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "4657:7:0",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 156,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 154,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1173,
														"src": "4673:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 155,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4673:12:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4657:28:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 158,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 153,
															"src": "4705:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 159,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 144,
															"src": "4712:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 160,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 146,
															"src": "4721:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 157,
														"name": "_approve",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 519,
														"src": "4696:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 161,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4696:32:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 162,
												"nodeType": "ExpressionStatement",
												"src": "4696:32:0"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 163,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "4746:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 151,
												"id": 164,
												"nodeType": "Return",
												"src": "4739:11:0"
											}
										]
									},
									"documentation": {
										"id": 142,
										"nodeType": "StructuredDocumentation",
										"src": "4245:306:0",
										"text": " @dev See {IERC20-approve}.\n NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n `transferFrom`. This is semantically equivalent to an infinite approval.\n Requirements:\n - `spender` cannot be the zero address."
									},
									"functionSelector": "095ea7b3",
									"id": 166,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "4566:7:0",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 148,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "4622:8:0"
									},
									"parameters": {
										"id": 147,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 144,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "4582:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 166,
												"src": "4574:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 143,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4574:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 146,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "4599:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 166,
												"src": "4591:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 145,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4591:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4573:33:0"
									},
									"returnParameters": {
										"id": 151,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 150,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 166,
												"src": "4640:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 149,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4640:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4639:6:0"
									},
									"scope": 585,
									"src": "4557:201:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										662
									],
									"body": {
										"id": 198,
										"nodeType": "Block",
										"src": "5475:158:0",
										"statements": [
											{
												"assignments": [
													180
												],
												"declarations": [
													{
														"constant": false,
														"id": 180,
														"mutability": "mutable",
														"name": "spender",
														"nameLocation": "5494:7:0",
														"nodeType": "VariableDeclaration",
														"scope": 198,
														"src": "5486:15:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 179,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "5486:7:0",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 183,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 181,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1173,
														"src": "5504:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 182,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5504:12:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5486:30:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 185,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 169,
															"src": "5543:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 186,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 180,
															"src": "5549:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 187,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 173,
															"src": "5558:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 184,
														"name": "_spendAllowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 562,
														"src": "5527:15:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 188,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5527:38:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 189,
												"nodeType": "ExpressionStatement",
												"src": "5527:38:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 191,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 169,
															"src": "5586:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 192,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 171,
															"src": "5592:2:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 193,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 173,
															"src": "5596:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 190,
														"name": "_transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 346,
														"src": "5576:9:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 194,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5576:27:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 195,
												"nodeType": "ExpressionStatement",
												"src": "5576:27:0"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 196,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "5621:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 178,
												"id": 197,
												"nodeType": "Return",
												"src": "5614:11:0"
											}
										]
									},
									"documentation": {
										"id": 167,
										"nodeType": "StructuredDocumentation",
										"src": "4766:566:0",
										"text": " @dev See {IERC20-transferFrom}.\n Emits an {Approval} event indicating the updated allowance. This is not\n required by the EIP. See the note at the beginning of {ERC20}.\n NOTE: Does not update the allowance if the current allowance\n is the maximum `uint256`.\n Requirements:\n - `from` and `to` cannot be the zero address.\n - `from` must have a balance of at least `amount`.\n - the caller must have allowance for ``from``'s tokens of at least\n `amount`."
									},
									"functionSelector": "23b872dd",
									"id": 199,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "5347:12:0",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 175,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "5451:8:0"
									},
									"parameters": {
										"id": 174,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 169,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "5378:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 199,
												"src": "5370:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 168,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5370:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 171,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "5401:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 199,
												"src": "5393:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 170,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5393:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 173,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "5422:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 199,
												"src": "5414:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 172,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5414:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5359:76:0"
									},
									"returnParameters": {
										"id": 178,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 177,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 199,
												"src": "5469:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 176,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "5469:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5468:6:0"
									},
									"scope": 585,
									"src": "5338:295:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 227,
										"nodeType": "Block",
										"src": "6136:144:0",
										"statements": [
											{
												"assignments": [
													210
												],
												"declarations": [
													{
														"constant": false,
														"id": 210,
														"mutability": "mutable",
														"name": "owner",
														"nameLocation": "6155:5:0",
														"nodeType": "VariableDeclaration",
														"scope": 227,
														"src": "6147:13:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 209,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "6147:7:0",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 213,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 211,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1173,
														"src": "6163:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 212,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6163:12:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6147:28:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 215,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 210,
															"src": "6195:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 216,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 202,
															"src": "6202:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 222,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [
																	{
																		"id": 218,
																		"name": "owner",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 210,
																		"src": "6221:5:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 219,
																		"name": "spender",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 202,
																		"src": "6228:7:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 217,
																	"name": "allowance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 141,
																	"src": "6211:9:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$returns$_t_uint256_$",
																		"typeString": "function (address,address) view returns (uint256)"
																	}
																},
																"id": 220,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "6211:25:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"id": 221,
																"name": "addedValue",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 204,
																"src": "6239:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "6211:38:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 214,
														"name": "_approve",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 519,
														"src": "6186:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 223,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6186:64:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 224,
												"nodeType": "ExpressionStatement",
												"src": "6186:64:0"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 225,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "6268:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 208,
												"id": 226,
												"nodeType": "Return",
												"src": "6261:11:0"
											}
										]
									},
									"documentation": {
										"id": 200,
										"nodeType": "StructuredDocumentation",
										"src": "5641:395:0",
										"text": " @dev Atomically increases the allowance granted to `spender` by the caller.\n This is an alternative to {approve} that can be used as a mitigation for\n problems described in {IERC20-approve}.\n Emits an {Approval} event indicating the updated allowance.\n Requirements:\n - `spender` cannot be the zero address."
									},
									"functionSelector": "39509351",
									"id": 228,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "increaseAllowance",
									"nameLocation": "6051:17:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 205,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 202,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "6077:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 228,
												"src": "6069:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 201,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6069:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 204,
												"mutability": "mutable",
												"name": "addedValue",
												"nameLocation": "6094:10:0",
												"nodeType": "VariableDeclaration",
												"scope": 228,
												"src": "6086:18:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 203,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6086:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6068:37:0"
									},
									"returnParameters": {
										"id": 208,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 207,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 228,
												"src": "6130:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 206,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "6130:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6129:6:0"
									},
									"scope": 585,
									"src": "6042:238:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 268,
										"nodeType": "Block",
										"src": "6882:337:0",
										"statements": [
											{
												"assignments": [
													239
												],
												"declarations": [
													{
														"constant": false,
														"id": 239,
														"mutability": "mutable",
														"name": "owner",
														"nameLocation": "6901:5:0",
														"nodeType": "VariableDeclaration",
														"scope": 268,
														"src": "6893:13:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 238,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "6893:7:0",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 242,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 240,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1173,
														"src": "6909:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 241,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6909:12:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6893:28:0"
											},
											{
												"assignments": [
													244
												],
												"declarations": [
													{
														"constant": false,
														"id": 244,
														"mutability": "mutable",
														"name": "currentAllowance",
														"nameLocation": "6940:16:0",
														"nodeType": "VariableDeclaration",
														"scope": 268,
														"src": "6932:24:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 243,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "6932:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 249,
												"initialValue": {
													"arguments": [
														{
															"id": 246,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 239,
															"src": "6969:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 247,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 231,
															"src": "6976:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 245,
														"name": "allowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 141,
														"src": "6959:9:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address,address) view returns (uint256)"
														}
													},
													"id": 248,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6959:25:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6932:52:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 253,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 251,
																"name": "currentAllowance",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 244,
																"src": "7003:16:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 252,
																"name": "subtractedValue",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 233,
																"src": "7023:15:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7003:35:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f",
															"id": 254,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "7040:39:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8",
																"typeString": "literal_string \"ERC20: decreased allowance below zero\""
															},
															"value": "ERC20: decreased allowance below zero"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8",
																"typeString": "literal_string \"ERC20: decreased allowance below zero\""
															}
														],
														"id": 250,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "6995:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 255,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6995:85:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 256,
												"nodeType": "ExpressionStatement",
												"src": "6995:85:0"
											},
											{
												"id": 265,
												"nodeType": "UncheckedBlock",
												"src": "7091:97:0",
												"statements": [
													{
														"expression": {
															"arguments": [
																{
																	"id": 258,
																	"name": "owner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 239,
																	"src": "7125:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 259,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 231,
																	"src": "7132:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 262,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 260,
																		"name": "currentAllowance",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 244,
																		"src": "7141:16:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "-",
																	"rightExpression": {
																		"id": 261,
																		"name": "subtractedValue",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 233,
																		"src": "7160:15:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "7141:34:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 257,
																"name": "_approve",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 519,
																"src": "7116:8:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
																	"typeString": "function (address,address,uint256)"
																}
															},
															"id": 263,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "7116:60:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$__$",
																"typeString": "tuple()"
															}
														},
														"id": 264,
														"nodeType": "ExpressionStatement",
														"src": "7116:60:0"
													}
												]
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 266,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "7207:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 237,
												"id": 267,
												"nodeType": "Return",
												"src": "7200:11:0"
											}
										]
									},
									"documentation": {
										"id": 229,
										"nodeType": "StructuredDocumentation",
										"src": "6288:489:0",
										"text": " @dev Atomically decreases the allowance granted to `spender` by the caller.\n This is an alternative to {approve} that can be used as a mitigation for\n problems described in {IERC20-approve}.\n Emits an {Approval} event indicating the updated allowance.\n Requirements:\n - `spender` cannot be the zero address.\n - `spender` must have allowance for the caller of at least\n `subtractedValue`."
									},
									"functionSelector": "a457c2d7",
									"id": 269,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "decreaseAllowance",
									"nameLocation": "6792:17:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 234,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 231,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "6818:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 269,
												"src": "6810:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 230,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6810:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 233,
												"mutability": "mutable",
												"name": "subtractedValue",
												"nameLocation": "6835:15:0",
												"nodeType": "VariableDeclaration",
												"scope": 269,
												"src": "6827:23:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 232,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6827:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6809:42:0"
									},
									"returnParameters": {
										"id": 237,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 236,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 269,
												"src": "6876:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 235,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "6876:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6875:6:0"
									},
									"scope": 585,
									"src": "6783:436:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 345,
										"nodeType": "Block",
										"src": "7810:559:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 285,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 280,
																"name": "from",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 272,
																"src": "7829:4:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 283,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "7845:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 282,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "7837:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 281,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "7837:7:0",
																		"typeDescriptions": {}
																	}
																},
																"id": 284,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7837:10:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "7829:18:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a207472616e736665722066726f6d20746865207a65726f2061646472657373",
															"id": 286,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "7849:39:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea",
																"typeString": "literal_string \"ERC20: transfer from the zero address\""
															},
															"value": "ERC20: transfer from the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea",
																"typeString": "literal_string \"ERC20: transfer from the zero address\""
															}
														],
														"id": 279,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "7821:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 287,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7821:68:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 288,
												"nodeType": "ExpressionStatement",
												"src": "7821:68:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 295,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 290,
																"name": "to",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 274,
																"src": "7908:2:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 293,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "7922:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 292,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "7914:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 291,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "7914:7:0",
																		"typeDescriptions": {}
																	}
																},
																"id": 294,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7914:10:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "7908:16:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a207472616e7366657220746f20746865207a65726f2061646472657373",
															"id": 296,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "7926:37:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f",
																"typeString": "literal_string \"ERC20: transfer to the zero address\""
															},
															"value": "ERC20: transfer to the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f",
																"typeString": "literal_string \"ERC20: transfer to the zero address\""
															}
														],
														"id": 289,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "7900:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 297,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7900:64:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 298,
												"nodeType": "ExpressionStatement",
												"src": "7900:64:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 300,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 272,
															"src": "7998:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 301,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 274,
															"src": "8004:2:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 302,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 276,
															"src": "8008:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 299,
														"name": "_beforeTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 573,
														"src": "7977:20:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 303,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7977:38:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 304,
												"nodeType": "ExpressionStatement",
												"src": "7977:38:0"
											},
											{
												"assignments": [
													306
												],
												"declarations": [
													{
														"constant": false,
														"id": 306,
														"mutability": "mutable",
														"name": "fromBalance",
														"nameLocation": "8036:11:0",
														"nodeType": "VariableDeclaration",
														"scope": 345,
														"src": "8028:19:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 305,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "8028:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 310,
												"initialValue": {
													"baseExpression": {
														"id": 307,
														"name": "_balances",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 15,
														"src": "8050:9:0",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 309,
													"indexExpression": {
														"id": 308,
														"name": "from",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 272,
														"src": "8060:4:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "8050:15:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "8028:37:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 314,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 312,
																"name": "fromBalance",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 306,
																"src": "8084:11:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 313,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 276,
																"src": "8099:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "8084:21:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e6365",
															"id": 315,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "8107:40:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6",
																"typeString": "literal_string \"ERC20: transfer amount exceeds balance\""
															},
															"value": "ERC20: transfer amount exceeds balance"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6",
																"typeString": "literal_string \"ERC20: transfer amount exceeds balance\""
															}
														],
														"id": 311,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "8076:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 316,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8076:72:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 317,
												"nodeType": "ExpressionStatement",
												"src": "8076:72:0"
											},
											{
												"id": 326,
												"nodeType": "UncheckedBlock",
												"src": "8159:75:0",
												"statements": [
													{
														"expression": {
															"id": 324,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"baseExpression": {
																	"id": 318,
																	"name": "_balances",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 15,
																	"src": "8184:9:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 320,
																"indexExpression": {
																	"id": 319,
																	"name": "from",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 272,
																	"src": "8194:4:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"nodeType": "IndexAccess",
																"src": "8184:15:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 323,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 321,
																	"name": "fromBalance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 306,
																	"src": "8202:11:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"id": 322,
																	"name": "amount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 276,
																	"src": "8216:6:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "8202:20:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "8184:38:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 325,
														"nodeType": "ExpressionStatement",
														"src": "8184:38:0"
													}
												]
											},
											{
												"expression": {
													"id": 331,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 327,
															"name": "_balances",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 15,
															"src": "8244:9:0",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 329,
														"indexExpression": {
															"id": 328,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 274,
															"src": "8254:2:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "8244:13:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"id": 330,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 276,
														"src": "8261:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "8244:23:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 332,
												"nodeType": "ExpressionStatement",
												"src": "8244:23:0"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 334,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 272,
															"src": "8294:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 335,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 274,
															"src": "8300:2:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 336,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 276,
															"src": "8304:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 333,
														"name": "Transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 597,
														"src": "8285:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 337,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8285:26:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 338,
												"nodeType": "EmitStatement",
												"src": "8280:31:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 340,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 272,
															"src": "8344:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 341,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 274,
															"src": "8350:2:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 342,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 276,
															"src": "8354:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 339,
														"name": "_afterTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 584,
														"src": "8324:19:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 343,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8324:37:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 344,
												"nodeType": "ExpressionStatement",
												"src": "8324:37:0"
											}
										]
									},
									"documentation": {
										"id": 270,
										"nodeType": "StructuredDocumentation",
										"src": "7227:465:0",
										"text": " @dev Moves `amount` of tokens from `sender` to `recipient`.\n This internal function is equivalent to {transfer}, and can be used to\n e.g. implement automatic token fees, slashing mechanisms, etc.\n Emits a {Transfer} event.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `from` must have a balance of at least `amount`."
									},
									"id": 346,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_transfer",
									"nameLocation": "7707:9:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 277,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 272,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "7735:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 346,
												"src": "7727:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 271,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7727:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 274,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "7758:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 346,
												"src": "7750:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 273,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7750:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 276,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "7779:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 346,
												"src": "7771:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 275,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7771:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7716:76:0"
									},
									"returnParameters": {
										"id": 278,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7810:0:0"
									},
									"scope": 585,
									"src": "7698:671:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 401,
										"nodeType": "Block",
										"src": "8721:334:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 360,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 355,
																"name": "account",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 349,
																"src": "8740:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 358,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "8759:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 357,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "8751:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 356,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "8751:7:0",
																		"typeDescriptions": {}
																	}
																},
																"id": 359,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8751:10:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "8740:21:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a206d696e7420746f20746865207a65726f2061646472657373",
															"id": 361,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "8763:33:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e",
																"typeString": "literal_string \"ERC20: mint to the zero address\""
															},
															"value": "ERC20: mint to the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e",
																"typeString": "literal_string \"ERC20: mint to the zero address\""
															}
														],
														"id": 354,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "8732:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 362,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8732:65:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 363,
												"nodeType": "ExpressionStatement",
												"src": "8732:65:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 367,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8839:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 366,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "8831:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 365,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "8831:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 368,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8831:10:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 369,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 349,
															"src": "8843:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 370,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 351,
															"src": "8852:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 364,
														"name": "_beforeTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 573,
														"src": "8810:20:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 371,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8810:49:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 372,
												"nodeType": "ExpressionStatement",
												"src": "8810:49:0"
											},
											{
												"expression": {
													"id": 375,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 373,
														"name": "_totalSupply",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 23,
														"src": "8872:12:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"id": 374,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 351,
														"src": "8888:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "8872:22:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 376,
												"nodeType": "ExpressionStatement",
												"src": "8872:22:0"
											},
											{
												"expression": {
													"id": 381,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 377,
															"name": "_balances",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 15,
															"src": "8905:9:0",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 379,
														"indexExpression": {
															"id": 378,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 349,
															"src": "8915:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "8905:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"id": 380,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 351,
														"src": "8927:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "8905:28:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 382,
												"nodeType": "ExpressionStatement",
												"src": "8905:28:0"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 386,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8966:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 385,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "8958:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 384,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "8958:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 387,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8958:10:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 388,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 349,
															"src": "8970:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 389,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 351,
															"src": "8979:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 383,
														"name": "Transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 597,
														"src": "8949:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 390,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8949:37:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 391,
												"nodeType": "EmitStatement",
												"src": "8944:42:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 395,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9027:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 394,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "9019:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 393,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "9019:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 396,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9019:10:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 397,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 349,
															"src": "9031:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 398,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 351,
															"src": "9040:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 392,
														"name": "_afterTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 584,
														"src": "8999:19:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 399,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8999:48:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 400,
												"nodeType": "ExpressionStatement",
												"src": "8999:48:0"
											}
										]
									},
									"documentation": {
										"id": 347,
										"nodeType": "StructuredDocumentation",
										"src": "8377:273:0",
										"text": "@dev Creates `amount` tokens and assigns them to `account`, increasing\n the total supply.\n Emits a {Transfer} event with `from` set to the zero address.\n Requirements:\n - `account` cannot be the zero address."
									},
									"id": 402,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_mint",
									"nameLocation": "8665:5:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 352,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 349,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "8679:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 402,
												"src": "8671:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 348,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8671:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 351,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "8696:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 402,
												"src": "8688:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 350,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8688:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8670:33:0"
									},
									"returnParameters": {
										"id": 353,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8721:0:0"
									},
									"scope": 585,
									"src": "8656:399:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 473,
										"nodeType": "Block",
										"src": "9453:526:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 416,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 411,
																"name": "account",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 405,
																"src": "9472:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 414,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "9491:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 413,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "9483:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 412,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "9483:7:0",
																		"typeDescriptions": {}
																	}
																},
																"id": 415,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "9483:10:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "9472:21:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a206275726e2066726f6d20746865207a65726f2061646472657373",
															"id": 417,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "9495:35:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f",
																"typeString": "literal_string \"ERC20: burn from the zero address\""
															},
															"value": "ERC20: burn from the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f",
																"typeString": "literal_string \"ERC20: burn from the zero address\""
															}
														],
														"id": 410,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "9464:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 418,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9464:67:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 419,
												"nodeType": "ExpressionStatement",
												"src": "9464:67:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 421,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 405,
															"src": "9565:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 424,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9582:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 423,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "9574:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 422,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "9574:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 425,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9574:10:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 426,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 407,
															"src": "9586:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 420,
														"name": "_beforeTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 573,
														"src": "9544:20:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 427,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9544:49:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 428,
												"nodeType": "ExpressionStatement",
												"src": "9544:49:0"
											},
											{
												"assignments": [
													430
												],
												"declarations": [
													{
														"constant": false,
														"id": 430,
														"mutability": "mutable",
														"name": "accountBalance",
														"nameLocation": "9614:14:0",
														"nodeType": "VariableDeclaration",
														"scope": 473,
														"src": "9606:22:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 429,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "9606:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 434,
												"initialValue": {
													"baseExpression": {
														"id": 431,
														"name": "_balances",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 15,
														"src": "9631:9:0",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 433,
													"indexExpression": {
														"id": 432,
														"name": "account",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 405,
														"src": "9641:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "9631:18:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "9606:43:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 438,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 436,
																"name": "accountBalance",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 430,
																"src": "9668:14:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 437,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 407,
																"src": "9686:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "9668:24:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a206275726e20616d6f756e7420657863656564732062616c616e6365",
															"id": 439,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "9694:36:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd",
																"typeString": "literal_string \"ERC20: burn amount exceeds balance\""
															},
															"value": "ERC20: burn amount exceeds balance"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd",
																"typeString": "literal_string \"ERC20: burn amount exceeds balance\""
															}
														],
														"id": 435,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "9660:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 440,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9660:71:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 441,
												"nodeType": "ExpressionStatement",
												"src": "9660:71:0"
											},
											{
												"id": 450,
												"nodeType": "UncheckedBlock",
												"src": "9742:81:0",
												"statements": [
													{
														"expression": {
															"id": 448,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"baseExpression": {
																	"id": 442,
																	"name": "_balances",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 15,
																	"src": "9767:9:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 444,
																"indexExpression": {
																	"id": 443,
																	"name": "account",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 405,
																	"src": "9777:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"nodeType": "IndexAccess",
																"src": "9767:18:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 447,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 445,
																	"name": "accountBalance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 430,
																	"src": "9788:14:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"id": 446,
																	"name": "amount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 407,
																	"src": "9805:6:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "9788:23:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "9767:44:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 449,
														"nodeType": "ExpressionStatement",
														"src": "9767:44:0"
													}
												]
											},
											{
												"expression": {
													"id": 453,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 451,
														"name": "_totalSupply",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 23,
														"src": "9833:12:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "-=",
													"rightHandSide": {
														"id": 452,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 407,
														"src": "9849:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "9833:22:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 454,
												"nodeType": "ExpressionStatement",
												"src": "9833:22:0"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 456,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 405,
															"src": "9882:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 459,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9899:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 458,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "9891:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 457,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "9891:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 460,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9891:10:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 461,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 407,
															"src": "9903:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 455,
														"name": "Transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 597,
														"src": "9873:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 462,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9873:37:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 463,
												"nodeType": "EmitStatement",
												"src": "9868:42:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 465,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 405,
															"src": "9943:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 468,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9960:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 467,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "9952:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 466,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "9952:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 469,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9952:10:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 470,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 407,
															"src": "9964:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 464,
														"name": "_afterTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 584,
														"src": "9923:19:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 471,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9923:48:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 472,
												"nodeType": "ExpressionStatement",
												"src": "9923:48:0"
											}
										]
									},
									"documentation": {
										"id": 403,
										"nodeType": "StructuredDocumentation",
										"src": "9063:319:0",
										"text": " @dev Destroys `amount` tokens from `account`, reducing the\n total supply.\n Emits a {Transfer} event with `to` set to the zero address.\n Requirements:\n - `account` cannot be the zero address.\n - `account` must have at least `amount` tokens."
									},
									"id": 474,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_burn",
									"nameLocation": "9397:5:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 408,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 405,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "9411:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 474,
												"src": "9403:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 404,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9403:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 407,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "9428:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 474,
												"src": "9420:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 406,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9420:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9402:33:0"
									},
									"returnParameters": {
										"id": 409,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9453:0:0"
									},
									"scope": 585,
									"src": "9388:591:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 518,
										"nodeType": "Block",
										"src": "10534:263:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 490,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 485,
																"name": "owner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 477,
																"src": "10553:5:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 488,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "10570:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 487,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "10562:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 486,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "10562:7:0",
																		"typeDescriptions": {}
																	}
																},
																"id": 489,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "10562:10:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "10553:19:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a20617070726f76652066726f6d20746865207a65726f2061646472657373",
															"id": 491,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "10574:38:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208",
																"typeString": "literal_string \"ERC20: approve from the zero address\""
															},
															"value": "ERC20: approve from the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208",
																"typeString": "literal_string \"ERC20: approve from the zero address\""
															}
														],
														"id": 484,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "10545:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 492,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10545:68:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 493,
												"nodeType": "ExpressionStatement",
												"src": "10545:68:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 500,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 495,
																"name": "spender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 479,
																"src": "10632:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 498,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "10651:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 497,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "10643:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 496,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "10643:7:0",
																		"typeDescriptions": {}
																	}
																},
																"id": 499,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "10643:10:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "10632:21:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a20617070726f766520746f20746865207a65726f2061646472657373",
															"id": 501,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "10655:36:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029",
																"typeString": "literal_string \"ERC20: approve to the zero address\""
															},
															"value": "ERC20: approve to the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029",
																"typeString": "literal_string \"ERC20: approve to the zero address\""
															}
														],
														"id": 494,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "10624:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 502,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10624:68:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 503,
												"nodeType": "ExpressionStatement",
												"src": "10624:68:0"
											},
											{
												"expression": {
													"id": 510,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"baseExpression": {
																"id": 504,
																"name": "_allowances",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 21,
																"src": "10705:11:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
																	"typeString": "mapping(address => mapping(address => uint256))"
																}
															},
															"id": 507,
															"indexExpression": {
																"id": 505,
																"name": "owner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 477,
																"src": "10717:5:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "10705:18:0",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 508,
														"indexExpression": {
															"id": 506,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 479,
															"src": "10724:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "10705:27:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 509,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 481,
														"src": "10735:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "10705:36:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 511,
												"nodeType": "ExpressionStatement",
												"src": "10705:36:0"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 513,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 477,
															"src": "10766:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 514,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 479,
															"src": "10773:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 515,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 481,
															"src": "10782:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 512,
														"name": "Approval",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 606,
														"src": "10757:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 516,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10757:32:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 517,
												"nodeType": "EmitStatement",
												"src": "10752:37:0"
											}
										]
									},
									"documentation": {
										"id": 475,
										"nodeType": "StructuredDocumentation",
										"src": "9987:424:0",
										"text": " @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n This internal function is equivalent to `approve`, and can be used to\n e.g. set automatic allowances for certain subsystems, etc.\n Emits an {Approval} event.\n Requirements:\n - `owner` cannot be the zero address.\n - `spender` cannot be the zero address."
									},
									"id": 519,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_approve",
									"nameLocation": "10426:8:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 482,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 477,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "10453:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 519,
												"src": "10445:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 476,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10445:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 479,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "10477:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 519,
												"src": "10469:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 478,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10469:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 481,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "10503:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 519,
												"src": "10495:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 480,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10495:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10434:82:0"
									},
									"returnParameters": {
										"id": 483,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10534:0:0"
									},
									"scope": 585,
									"src": "10417:380:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 561,
										"nodeType": "Block",
										"src": "11212:329:0",
										"statements": [
											{
												"assignments": [
													530
												],
												"declarations": [
													{
														"constant": false,
														"id": 530,
														"mutability": "mutable",
														"name": "currentAllowance",
														"nameLocation": "11231:16:0",
														"nodeType": "VariableDeclaration",
														"scope": 561,
														"src": "11223:24:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 529,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "11223:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 535,
												"initialValue": {
													"arguments": [
														{
															"id": 532,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 522,
															"src": "11260:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 533,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 524,
															"src": "11267:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 531,
														"name": "allowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 141,
														"src": "11250:9:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address,address) view returns (uint256)"
														}
													},
													"id": 534,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "11250:25:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "11223:52:0"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 542,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 536,
														"name": "currentAllowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 530,
														"src": "11290:16:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"expression": {
															"arguments": [
																{
																	"id": 539,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "11315:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint256_$",
																		"typeString": "type(uint256)"
																	},
																	"typeName": {
																		"id": 538,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "11315:7:0",
																		"typeDescriptions": {}
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_type$_t_uint256_$",
																		"typeString": "type(uint256)"
																	}
																],
																"id": 537,
																"name": "type",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967269,
																"src": "11310:4:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																	"typeString": "function () pure"
																}
															},
															"id": 540,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "11310:13:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_magic_meta_type_t_uint256",
																"typeString": "type(uint256)"
															}
														},
														"id": 541,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberName": "max",
														"nodeType": "MemberAccess",
														"src": "11310:17:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "11290:37:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 560,
												"nodeType": "IfStatement",
												"src": "11286:248:0",
												"trueBody": {
													"id": 559,
													"nodeType": "Block",
													"src": "11329:205:0",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 546,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 544,
																			"name": "currentAllowance",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 530,
																			"src": "11352:16:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": ">=",
																		"rightExpression": {
																			"id": 545,
																			"name": "amount",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 526,
																			"src": "11372:6:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "11352:26:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	{
																		"hexValue": "45524332303a20696e73756666696369656e7420616c6c6f77616e6365",
																		"id": 547,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "11380:31:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe",
																			"typeString": "literal_string \"ERC20: insufficient allowance\""
																		},
																		"value": "ERC20: insufficient allowance"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		{
																			"typeIdentifier": "t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe",
																			"typeString": "literal_string \"ERC20: insufficient allowance\""
																		}
																	],
																	"id": 543,
																	"name": "require",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967278,
																		4294967278
																	],
																	"referencedDeclaration": 4294967278,
																	"src": "11344:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bool,string memory) pure"
																	}
																},
																"id": 548,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "11344:68:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 549,
															"nodeType": "ExpressionStatement",
															"src": "11344:68:0"
														},
														{
															"id": 558,
															"nodeType": "UncheckedBlock",
															"src": "11427:96:0",
															"statements": [
																{
																	"expression": {
																		"arguments": [
																			{
																				"id": 551,
																				"name": "owner",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 522,
																				"src": "11465:5:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			{
																				"id": 552,
																				"name": "spender",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 524,
																				"src": "11472:7:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			{
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 555,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 553,
																					"name": "currentAllowance",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 530,
																					"src": "11481:16:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "-",
																				"rightExpression": {
																					"id": 554,
																					"name": "amount",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 526,
																					"src": "11500:6:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "11481:25:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				},
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				},
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			],
																			"id": 550,
																			"name": "_approve",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 519,
																			"src": "11456:8:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
																				"typeString": "function (address,address,uint256)"
																			}
																		},
																		"id": 556,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "11456:51:0",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_tuple$__$",
																			"typeString": "tuple()"
																		}
																	},
																	"id": 557,
																	"nodeType": "ExpressionStatement",
																	"src": "11456:51:0"
																}
															]
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 520,
										"nodeType": "StructuredDocumentation",
										"src": "10805:277:0",
										"text": " @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n Does not update the allowance amount in case of infinite allowance.\n Revert if not enough allowance is available.\n Might emit an {Approval} event."
									},
									"id": 562,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_spendAllowance",
									"nameLocation": "11097:15:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 527,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 522,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "11131:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 562,
												"src": "11123:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 521,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "11123:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 524,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "11155:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 562,
												"src": "11147:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 523,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "11147:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 526,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "11181:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 562,
												"src": "11173:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 525,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11173:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11112:82:0"
									},
									"returnParameters": {
										"id": 528,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "11212:0:0"
									},
									"scope": 585,
									"src": "11088:453:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 572,
										"nodeType": "Block",
										"src": "12264:2:0",
										"statements": []
									},
									"documentation": {
										"id": 563,
										"nodeType": "StructuredDocumentation",
										"src": "11549:586:0",
										"text": " @dev Hook that is called before any transfer of tokens. This includes\n minting and burning.\n Calling conditions:\n - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n will be transferred to `to`.\n - when `from` is zero, `amount` tokens will be minted for `to`.\n - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n - `from` and `to` are never both zero.\n To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]."
									},
									"id": 573,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_beforeTokenTransfer",
									"nameLocation": "12150:20:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 570,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 565,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "12189:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 573,
												"src": "12181:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 564,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "12181:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 567,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "12212:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 573,
												"src": "12204:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 566,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "12204:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 569,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "12233:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 573,
												"src": "12225:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 568,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12225:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12170:76:0"
									},
									"returnParameters": {
										"id": 571,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "12264:0:0"
									},
									"scope": 585,
									"src": "12141:125:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 583,
										"nodeType": "Block",
										"src": "12992:2:0",
										"statements": []
									},
									"documentation": {
										"id": 574,
										"nodeType": "StructuredDocumentation",
										"src": "12274:590:0",
										"text": " @dev Hook that is called after any transfer of tokens. This includes\n minting and burning.\n Calling conditions:\n - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n has been transferred to `to`.\n - when `from` is zero, `amount` tokens have been minted for `to`.\n - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n - `from` and `to` are never both zero.\n To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]."
									},
									"id": 584,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_afterTokenTransfer",
									"nameLocation": "12879:19:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 581,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 576,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "12917:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 584,
												"src": "12909:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 575,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "12909:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 578,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "12940:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 584,
												"src": "12932:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 577,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "12932:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 580,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "12961:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 584,
												"src": "12953:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 579,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12953:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12898:76:0"
									},
									"returnParameters": {
										"id": 582,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "12992:0:0"
									},
									"scope": 585,
									"src": "12870:124:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 586,
							"src": "1424:11573:0",
							"usedErrors": []
						}
					],
					"src": "108:12889:0"
				},
				"id": 0
			},
			"ERC20/IERC20.sol": {
				"ast": {
					"absolutePath": "ERC20/IERC20.sol",
					"exportedSymbols": {
						"IERC20": [
							663
						]
					},
					"id": 664,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 587,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "109:23:1"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 588,
								"nodeType": "StructuredDocumentation",
								"src": "136:72:1",
								"text": " @dev Interface of the ERC20 standard as defined in the EIP."
							},
							"fullyImplemented": false,
							"id": 663,
							"linearizedBaseContracts": [
								663
							],
							"name": "IERC20",
							"nameLocation": "220:6:1",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 589,
										"nodeType": "StructuredDocumentation",
										"src": "234:163:1",
										"text": " @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."
									},
									"id": 597,
									"name": "Transfer",
									"nameLocation": "409:8:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 596,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 591,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "434:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 597,
												"src": "418:20:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 590,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "418:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 593,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "456:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 597,
												"src": "440:18:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 592,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "440:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 595,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "468:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 597,
												"src": "460:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 594,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "460:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "417:57:1"
									},
									"src": "403:72:1"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 598,
										"nodeType": "StructuredDocumentation",
										"src": "483:151:1",
										"text": " @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."
									},
									"id": 606,
									"name": "Approval",
									"nameLocation": "646:8:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 605,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 600,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "671:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 606,
												"src": "655:21:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 599,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "655:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 602,
												"indexed": true,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "694:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 606,
												"src": "678:23:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 601,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "678:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 604,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "711:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 606,
												"src": "703:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 603,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "703:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "654:63:1"
									},
									"src": "640:78:1"
								},
								{
									"documentation": {
										"id": 607,
										"nodeType": "StructuredDocumentation",
										"src": "726:68:1",
										"text": " @dev Returns the amount of tokens in existence."
									},
									"functionSelector": "18160ddd",
									"id": 612,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "809:11:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 608,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "820:2:1"
									},
									"returnParameters": {
										"id": 611,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 610,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 612,
												"src": "846:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 609,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "846:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "845:9:1"
									},
									"scope": 663,
									"src": "800:55:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 613,
										"nodeType": "StructuredDocumentation",
										"src": "863:74:1",
										"text": " @dev Returns the amount of tokens owned by `account`."
									},
									"functionSelector": "70a08231",
									"id": 620,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "952:9:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 616,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 615,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "970:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 620,
												"src": "962:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 614,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "962:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "961:17:1"
									},
									"returnParameters": {
										"id": 619,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 618,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 620,
												"src": "1002:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 617,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1002:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1001:9:1"
									},
									"scope": 663,
									"src": "943:68:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 621,
										"nodeType": "StructuredDocumentation",
										"src": "1027:208:1",
										"text": " @dev Moves `amount` tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "a9059cbb",
									"id": 630,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nameLocation": "1250:8:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 626,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 623,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1267:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 630,
												"src": "1259:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 622,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1259:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 625,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "1279:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 630,
												"src": "1271:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 624,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1271:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1258:28:1"
									},
									"returnParameters": {
										"id": 629,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 628,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 630,
												"src": "1305:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 627,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1305:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1304:6:1"
									},
									"scope": 663,
									"src": "1241:70:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 631,
										"nodeType": "StructuredDocumentation",
										"src": "1319:270:1",
										"text": " @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."
									},
									"functionSelector": "dd62ed3e",
									"id": 640,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nameLocation": "1604:9:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 636,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 633,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1622:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 640,
												"src": "1614:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 632,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1614:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 635,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1637:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 640,
												"src": "1629:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 634,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1629:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1613:32:1"
									},
									"returnParameters": {
										"id": 639,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 638,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 640,
												"src": "1669:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 637,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1669:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1668:9:1"
									},
									"scope": 663,
									"src": "1595:83:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 641,
										"nodeType": "StructuredDocumentation",
										"src": "1686:655:1",
										"text": " @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."
									},
									"functionSelector": "095ea7b3",
									"id": 650,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "2356:7:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 646,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 643,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2372:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 650,
												"src": "2364:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 642,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2364:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 645,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2389:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 650,
												"src": "2381:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 644,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2381:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2363:33:1"
									},
									"returnParameters": {
										"id": 649,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 648,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 650,
												"src": "2415:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 647,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2415:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2414:6:1"
									},
									"scope": 663,
									"src": "2347:74:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 651,
										"nodeType": "StructuredDocumentation",
										"src": "2429:295:1",
										"text": " @dev Moves `amount` tokens from `from` to `to` using the\n allowance mechanism. `amount` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "23b872dd",
									"id": 662,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "2739:12:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 658,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 653,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "2770:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 662,
												"src": "2762:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 652,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2762:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 655,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "2793:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 662,
												"src": "2785:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 654,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2785:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 657,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2814:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 662,
												"src": "2806:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 656,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2806:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2751:76:1"
									},
									"returnParameters": {
										"id": 661,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 660,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 662,
												"src": "2846:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 659,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2846:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2845:6:1"
									},
									"scope": 663,
									"src": "2730:122:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 664,
							"src": "210:2645:1",
							"usedErrors": []
						}
					],
					"src": "109:2748:1"
				},
				"id": 1
			},
			"ERC20/IERC20Metadata.sol": {
				"ast": {
					"absolutePath": "ERC20/IERC20Metadata.sol",
					"exportedSymbols": {
						"IERC20": [
							663
						],
						"IERC20Metadata": [
							688
						]
					},
					"id": 689,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 665,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "113:23:2"
						},
						{
							"absolutePath": "ERC20/IERC20.sol",
							"file": "./IERC20.sol",
							"id": 666,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 689,
							"sourceUnit": 664,
							"src": "140:22:2",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 668,
										"name": "IERC20",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 663,
										"src": "316:6:2"
									},
									"id": 669,
									"nodeType": "InheritanceSpecifier",
									"src": "316:6:2"
								}
							],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 667,
								"nodeType": "StructuredDocumentation",
								"src": "166:120:2",
								"text": " @dev Interface for the optional metadata functions from the ERC20 standard.\n _Available since v4.1._"
							},
							"fullyImplemented": false,
							"id": 688,
							"linearizedBaseContracts": [
								688,
								663
							],
							"name": "IERC20Metadata",
							"nameLocation": "298:14:2",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 670,
										"nodeType": "StructuredDocumentation",
										"src": "330:56:2",
										"text": " @dev Returns the name of the token."
									},
									"functionSelector": "06fdde03",
									"id": 675,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "name",
									"nameLocation": "401:4:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 671,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "405:2:2"
									},
									"returnParameters": {
										"id": 674,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 673,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 675,
												"src": "431:13:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 672,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "431:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "430:15:2"
									},
									"scope": 688,
									"src": "392:54:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 676,
										"nodeType": "StructuredDocumentation",
										"src": "454:58:2",
										"text": " @dev Returns the symbol of the token."
									},
									"functionSelector": "95d89b41",
									"id": 681,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "symbol",
									"nameLocation": "527:6:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 677,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "533:2:2"
									},
									"returnParameters": {
										"id": 680,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 679,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 681,
												"src": "559:13:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 678,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "559:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "558:15:2"
									},
									"scope": 688,
									"src": "518:56:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 682,
										"nodeType": "StructuredDocumentation",
										"src": "582:67:2",
										"text": " @dev Returns the decimals places of the token."
									},
									"functionSelector": "313ce567",
									"id": 687,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "decimals",
									"nameLocation": "664:8:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 683,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "672:2:2"
									},
									"returnParameters": {
										"id": 686,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 685,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 687,
												"src": "698:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 684,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "698:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "697:9:2"
									},
									"scope": 688,
									"src": "655:52:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 689,
							"src": "288:422:2",
							"usedErrors": []
						}
					],
					"src": "113:599:2"
				},
				"id": 2
			},
			"Ethereum/Presale.sol": {
				"ast": {
					"absolutePath": "Ethereum/Presale.sol",
					"exportedSymbols": {
						"Context": [
							1183
						],
						"ERC20": [
							585
						],
						"EnumerableSet": [
							1782
						],
						"IERC20": [
							663
						],
						"IERC20Metadata": [
							688
						],
						"Ownable": [
							1887
						],
						"Presale": [
							1161
						],
						"ReentrancyGuard": [
							1927
						],
						"SafeMath": [
							2239
						],
						"TransferHelper": [
							2388
						]
					},
					"id": 1162,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 690,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "93:23:3"
						},
						{
							"absolutePath": "ERC20/ERC20.sol",
							"file": "../ERC20/ERC20.sol",
							"id": 691,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1162,
							"sourceUnit": 586,
							"src": "120:28:3",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "Utils/ReentrancyGuard.sol",
							"file": "../Utils/ReentrancyGuard.sol",
							"id": 692,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1162,
							"sourceUnit": 1928,
							"src": "150:38:3",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "Utils/TransferHelper.sol",
							"file": "../Utils/TransferHelper.sol",
							"id": 693,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1162,
							"sourceUnit": 2389,
							"src": "190:37:3",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "Utils/EnumerableSet.sol",
							"file": "../Utils/EnumerableSet.sol",
							"id": 694,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1162,
							"sourceUnit": 1783,
							"src": "229:36:3",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "Utils/Ownable.sol",
							"file": "../Utils/Ownable.sol",
							"id": 695,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1162,
							"sourceUnit": 1888,
							"src": "267:30:3",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "Utils/SafeMath.sol",
							"file": "../Utils/SafeMath.sol",
							"id": 696,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1162,
							"sourceUnit": 2240,
							"src": "299:31:3",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 697,
										"name": "ReentrancyGuard",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1927,
										"src": "358:15:3"
									},
									"id": 698,
									"nodeType": "InheritanceSpecifier",
									"src": "358:15:3"
								},
								{
									"baseName": {
										"id": 699,
										"name": "Ownable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1887,
										"src": "375:7:3"
									},
									"id": 700,
									"nodeType": "InheritanceSpecifier",
									"src": "375:7:3"
								}
							],
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 1161,
							"linearizedBaseContracts": [
								1161,
								1887,
								1183,
								1927
							],
							"name": "Presale",
							"nameLocation": "347:7:3",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"id": 704,
									"libraryName": {
										"id": 701,
										"name": "EnumerableSet",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1782,
										"src": "395:13:3"
									},
									"nodeType": "UsingForDirective",
									"src": "389:49:3",
									"typeName": {
										"id": 703,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 702,
											"name": "EnumerableSet.AddressSet",
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 1495,
											"src": "413:24:3"
										},
										"referencedDeclaration": 1495,
										"src": "413:24:3",
										"typeDescriptions": {
											"typeIdentifier": "t_struct$_AddressSet_$1495_storage_ptr",
											"typeString": "struct EnumerableSet.AddressSet"
										}
									}
								},
								{
									"id": 707,
									"libraryName": {
										"id": 705,
										"name": "SafeMath",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 2239,
										"src": "450:8:3"
									},
									"nodeType": "UsingForDirective",
									"src": "444:27:3",
									"typeName": {
										"id": 706,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "463:7:3",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									}
								},
								{
									"canonicalName": "Presale.SaleInfor",
									"id": 734,
									"members": [
										{
											"constant": false,
											"id": 709,
											"mutability": "mutable",
											"name": "presaleOwner",
											"nameLocation": "523:12:3",
											"nodeType": "VariableDeclaration",
											"scope": 734,
											"src": "507:28:3",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address_payable",
												"typeString": "address payable"
											},
											"typeName": {
												"id": 708,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "507:15:3",
												"stateMutability": "payable",
												"typeDescriptions": {
													"typeIdentifier": "t_address_payable",
													"typeString": "address payable"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 712,
											"mutability": "mutable",
											"name": "saleToken",
											"nameLocation": "552:9:3",
											"nodeType": "VariableDeclaration",
											"scope": 734,
											"src": "546:15:3",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_contract$_ERC20_$585",
												"typeString": "contract ERC20"
											},
											"typeName": {
												"id": 711,
												"nodeType": "UserDefinedTypeName",
												"pathNode": {
													"id": 710,
													"name": "ERC20",
													"nodeType": "IdentifierPath",
													"referencedDeclaration": 585,
													"src": "546:5:3"
												},
												"referencedDeclaration": 585,
												"src": "546:5:3",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ERC20_$585",
													"typeString": "contract ERC20"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 715,
											"mutability": "mutable",
											"name": "baseToken",
											"nameLocation": "578:9:3",
											"nodeType": "VariableDeclaration",
											"scope": 734,
											"src": "572:15:3",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_contract$_ERC20_$585",
												"typeString": "contract ERC20"
											},
											"typeName": {
												"id": 714,
												"nodeType": "UserDefinedTypeName",
												"pathNode": {
													"id": 713,
													"name": "ERC20",
													"nodeType": "IdentifierPath",
													"referencedDeclaration": 585,
													"src": "572:5:3"
												},
												"referencedDeclaration": 585,
												"src": "572:5:3",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ERC20_$585",
													"typeString": "contract ERC20"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 717,
											"mutability": "mutable",
											"name": "tokenPrice",
											"nameLocation": "606:10:3",
											"nodeType": "VariableDeclaration",
											"scope": 734,
											"src": "598:18:3",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 716,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "598:7:3",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 719,
											"mutability": "mutable",
											"name": "startSale",
											"nameLocation": "635:9:3",
											"nodeType": "VariableDeclaration",
											"scope": 734,
											"src": "627:17:3",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 718,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "627:7:3",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 721,
											"mutability": "mutable",
											"name": "endSale",
											"nameLocation": "663:7:3",
											"nodeType": "VariableDeclaration",
											"scope": 734,
											"src": "655:15:3",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 720,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "655:7:3",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 723,
											"mutability": "mutable",
											"name": "minSpendPerBuyer",
											"nameLocation": "689:16:3",
											"nodeType": "VariableDeclaration",
											"scope": 734,
											"src": "681:24:3",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 722,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "681:7:3",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 725,
											"mutability": "mutable",
											"name": "maxSpendPerBuyer",
											"nameLocation": "724:16:3",
											"nodeType": "VariableDeclaration",
											"scope": 734,
											"src": "716:24:3",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 724,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "716:7:3",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 727,
											"mutability": "mutable",
											"name": "refundFee",
											"nameLocation": "759:9:3",
											"nodeType": "VariableDeclaration",
											"scope": 734,
											"src": "751:17:3",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 726,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "751:7:3",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 729,
											"mutability": "mutable",
											"name": "claimFee",
											"nameLocation": "787:8:3",
											"nodeType": "VariableDeclaration",
											"scope": 734,
											"src": "779:16:3",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 728,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "779:7:3",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 731,
											"mutability": "mutable",
											"name": "saleIsBaseToken",
											"nameLocation": "811:15:3",
											"nodeType": "VariableDeclaration",
											"scope": 734,
											"src": "806:20:3",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bool",
												"typeString": "bool"
											},
											"typeName": {
												"id": 730,
												"name": "bool",
												"nodeType": "ElementaryTypeName",
												"src": "806:4:3",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 733,
											"mutability": "mutable",
											"name": "amountTokenForSale",
											"nameLocation": "845:18:3",
											"nodeType": "VariableDeclaration",
											"scope": 734,
											"src": "837:26:3",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 732,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "837:7:3",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "SaleInfor",
									"nameLocation": "486:9:3",
									"nodeType": "StructDefinition",
									"scope": 1161,
									"src": "479:392:3",
									"visibility": "public"
								},
								{
									"canonicalName": "Presale.BuyerInfo",
									"id": 747,
									"members": [
										{
											"constant": false,
											"id": 736,
											"mutability": "mutable",
											"name": "baseDeposit",
											"nameLocation": "915:11:3",
											"nodeType": "VariableDeclaration",
											"scope": 747,
											"src": "907:19:3",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 735,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "907:7:3",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 738,
											"mutability": "mutable",
											"name": "tokenOwner",
											"nameLocation": "945:10:3",
											"nodeType": "VariableDeclaration",
											"scope": 747,
											"src": "937:18:3",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 737,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "937:7:3",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 740,
											"mutability": "mutable",
											"name": "lastWithDraw",
											"nameLocation": "974:12:3",
											"nodeType": "VariableDeclaration",
											"scope": 747,
											"src": "966:20:3",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 739,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "966:7:3",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 742,
											"mutability": "mutable",
											"name": "totalTokenWithDraw",
											"nameLocation": "1005:18:3",
											"nodeType": "VariableDeclaration",
											"scope": 747,
											"src": "997:26:3",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 741,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "997:7:3",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 744,
											"mutability": "mutable",
											"name": "isRefund",
											"nameLocation": "1039:8:3",
											"nodeType": "VariableDeclaration",
											"scope": 747,
											"src": "1034:13:3",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bool",
												"typeString": "bool"
											},
											"typeName": {
												"id": 743,
												"name": "bool",
												"nodeType": "ElementaryTypeName",
												"src": "1034:4:3",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 746,
											"mutability": "mutable",
											"name": "isClaim",
											"nameLocation": "1063:7:3",
											"nodeType": "VariableDeclaration",
											"scope": 747,
											"src": "1058:12:3",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bool",
												"typeString": "bool"
											},
											"typeName": {
												"id": 745,
												"name": "bool",
												"nodeType": "ElementaryTypeName",
												"src": "1058:4:3",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "BuyerInfo",
									"nameLocation": "886:9:3",
									"nodeType": "StructDefinition",
									"scope": 1161,
									"src": "879:199:3",
									"visibility": "public"
								},
								{
									"canonicalName": "Presale.PresaleStatus",
									"id": 763,
									"members": [
										{
											"constant": false,
											"id": 749,
											"mutability": "mutable",
											"name": "totalBaseCollected",
											"nameLocation": "1126:18:3",
											"nodeType": "VariableDeclaration",
											"scope": 763,
											"src": "1118:26:3",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 748,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1118:7:3",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 751,
											"mutability": "mutable",
											"name": "totalTokenSold",
											"nameLocation": "1163:14:3",
											"nodeType": "VariableDeclaration",
											"scope": 763,
											"src": "1155:22:3",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 750,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1155:7:3",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 753,
											"mutability": "mutable",
											"name": "totalTokenWithDraw",
											"nameLocation": "1196:18:3",
											"nodeType": "VariableDeclaration",
											"scope": 763,
											"src": "1188:26:3",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 752,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1188:7:3",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 755,
											"mutability": "mutable",
											"name": "totalBaseWithDraw",
											"nameLocation": "1233:17:3",
											"nodeType": "VariableDeclaration",
											"scope": 763,
											"src": "1225:25:3",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 754,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1225:7:3",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 757,
											"mutability": "mutable",
											"name": "numByer",
											"nameLocation": "1269:7:3",
											"nodeType": "VariableDeclaration",
											"scope": 763,
											"src": "1261:15:3",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 756,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1261:7:3",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 759,
											"mutability": "mutable",
											"name": "totalFee",
											"nameLocation": "1295:8:3",
											"nodeType": "VariableDeclaration",
											"scope": 763,
											"src": "1287:16:3",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 758,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1287:7:3",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 762,
											"mutability": "mutable",
											"name": "admin",
											"nameLocation": "1324:5:3",
											"nodeType": "VariableDeclaration",
											"scope": 763,
											"src": "1314:15:3",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
												"typeString": "address[]"
											},
											"typeName": {
												"baseType": {
													"id": 760,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1314:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 761,
												"nodeType": "ArrayTypeName",
												"src": "1314:9:3",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
													"typeString": "address[]"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "PresaleStatus",
									"nameLocation": "1093:13:3",
									"nodeType": "StructDefinition",
									"scope": 1161,
									"src": "1086:251:3",
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "e2d3f423",
									"id": 768,
									"mutability": "mutable",
									"name": "buyerInfo",
									"nameLocation": "1386:9:3",
									"nodeType": "VariableDeclaration",
									"scope": 1161,
									"src": "1349:46:3",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_struct$_BuyerInfo_$747_storage_$",
										"typeString": "mapping(address => struct Presale.BuyerInfo)"
									},
									"typeName": {
										"id": 767,
										"keyType": {
											"id": 764,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1357:7:3",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "1349:29:3",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_struct$_BuyerInfo_$747_storage_$",
											"typeString": "mapping(address => struct Presale.BuyerInfo)"
										},
										"valueType": {
											"id": 766,
											"nodeType": "UserDefinedTypeName",
											"pathNode": {
												"id": 765,
												"name": "BuyerInfo",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 747,
												"src": "1368:9:3"
											},
											"referencedDeclaration": 747,
											"src": "1368:9:3",
											"typeDescriptions": {
												"typeIdentifier": "t_struct$_BuyerInfo_$747_storage_ptr",
												"typeString": "struct Presale.BuyerInfo"
											}
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "56c5f349",
									"id": 772,
									"mutability": "mutable",
									"name": "userFee",
									"nameLocation": "1437:7:3",
									"nodeType": "VariableDeclaration",
									"scope": 1161,
									"src": "1402:42:3",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
										"typeString": "mapping(address => uint256)"
									},
									"typeName": {
										"id": 771,
										"keyType": {
											"id": 769,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1410:7:3",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "1402:27:3",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
											"typeString": "mapping(address => uint256)"
										},
										"valueType": {
											"id": 770,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "1421:7:3",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "acfb2355",
									"id": 775,
									"mutability": "mutable",
									"name": "presaleStatus",
									"nameLocation": "1472:13:3",
									"nodeType": "VariableDeclaration",
									"scope": 1161,
									"src": "1451:34:3",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_struct$_PresaleStatus_$763_storage",
										"typeString": "struct Presale.PresaleStatus"
									},
									"typeName": {
										"id": 774,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 773,
											"name": "PresaleStatus",
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 763,
											"src": "1451:13:3"
										},
										"referencedDeclaration": 763,
										"src": "1451:13:3",
										"typeDescriptions": {
											"typeIdentifier": "t_struct$_PresaleStatus_$763_storage_ptr",
											"typeString": "struct Presale.PresaleStatus"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "18856a2f",
									"id": 778,
									"mutability": "mutable",
									"name": "saleInfor",
									"nameLocation": "1509:9:3",
									"nodeType": "VariableDeclaration",
									"scope": 1161,
									"src": "1492:26:3",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_struct$_SaleInfor_$734_storage",
										"typeString": "struct Presale.SaleInfor"
									},
									"typeName": {
										"id": 777,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 776,
											"name": "SaleInfor",
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 734,
											"src": "1492:9:3"
										},
										"referencedDeclaration": 734,
										"src": "1492:9:3",
										"typeDescriptions": {
											"typeIdentifier": "t_struct$_SaleInfor_$734_storage_ptr",
											"typeString": "struct Presale.SaleInfor"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "ad5c4648",
									"id": 781,
									"mutability": "mutable",
									"name": "WETH",
									"nameLocation": "1539:4:3",
									"nodeType": "VariableDeclaration",
									"scope": 1161,
									"src": "1525:18:3",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_contract$_IERC20_$663",
										"typeString": "contract IERC20"
									},
									"typeName": {
										"id": 780,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 779,
											"name": "IERC20",
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 663,
											"src": "1525:6:3"
										},
										"referencedDeclaration": 663,
										"src": "1525:6:3",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IERC20_$663",
											"typeString": "contract IERC20"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "3b5ef2ad",
									"id": 783,
									"mutability": "mutable",
									"name": "feeAnyone",
									"nameLocation": "1565:9:3",
									"nodeType": "VariableDeclaration",
									"scope": 1161,
									"src": "1550:24:3",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 782,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1550:7:3",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"id": 786,
									"mutability": "mutable",
									"name": "admins",
									"nameLocation": "1614:6:3",
									"nodeType": "VariableDeclaration",
									"scope": 1161,
									"src": "1581:39:3",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_struct$_AddressSet_$1495_storage",
										"typeString": "struct EnumerableSet.AddressSet"
									},
									"typeName": {
										"id": 785,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 784,
											"name": "EnumerableSet.AddressSet",
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 1495,
											"src": "1581:24:3"
										},
										"referencedDeclaration": 1495,
										"src": "1581:24:3",
										"typeDescriptions": {
											"typeIdentifier": "t_struct$_AddressSet_$1495_storage_ptr",
											"typeString": "struct EnumerableSet.AddressSet"
										}
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 798,
										"nodeType": "Block",
										"src": "1651:82:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"arguments": [],
																	"expression": {
																		"argumentTypes": [],
																		"id": 791,
																		"name": "_msgSender",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1173,
																		"src": "1686:10:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																			"typeString": "function () view returns (address)"
																		}
																	},
																	"id": 792,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "1686:12:3",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"expression": {
																	"id": 789,
																	"name": "admins",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 786,
																	"src": "1670:6:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_AddressSet_$1495_storage",
																		"typeString": "struct EnumerableSet.AddressSet storage ref"
																	}
																},
																"id": 790,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "contains",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 1576,
																"src": "1670:15:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$_t_struct$_AddressSet_$1495_storage_ptr_$_t_address_$returns$_t_bool_$bound_to$_t_struct$_AddressSet_$1495_storage_ptr_$",
																	"typeString": "function (struct EnumerableSet.AddressSet storage pointer,address) view returns (bool)"
																}
															},
															"id": 793,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1670:29:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4e6f742061646d696e",
															"id": 794,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1701:11:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_fa7e120cf98867f00c0ac28b387a73caec64b93b1889065f7b4c5e5232c0bad6",
																"typeString": "literal_string \"Not admin\""
															},
															"value": "Not admin"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_fa7e120cf98867f00c0ac28b387a73caec64b93b1889065f7b4c5e5232c0bad6",
																"typeString": "literal_string \"Not admin\""
															}
														],
														"id": 788,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1662:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 795,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1662:51:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 796,
												"nodeType": "ExpressionStatement",
												"src": "1662:51:3"
											},
											{
												"id": 797,
												"nodeType": "PlaceholderStatement",
												"src": "1724:1:3"
											}
										]
									},
									"id": 799,
									"name": "onlyAdmin",
									"nameLocation": "1639:9:3",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 787,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1648:2:3"
									},
									"src": "1630:103:3",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 811,
										"nodeType": "Block",
										"src": "1766:96:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 806,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 802,
																	"name": "_msgSender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1173,
																	"src": "1785:10:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																		"typeString": "function () view returns (address)"
																	}
																},
																"id": 803,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1785:12:3",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"expression": {
																	"id": 804,
																	"name": "saleInfor",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 778,
																	"src": "1801:9:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_SaleInfor_$734_storage",
																		"typeString": "struct Presale.SaleInfor storage ref"
																	}
																},
																"id": 805,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "presaleOwner",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 709,
																"src": "1801:22:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"src": "1785:38:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4e6f742073616c65206f776e6572",
															"id": 807,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1825:16:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_d260997bd85ce88e5fe3a090aa0509f0362655b7ef85530ca7ca41b7767ad72f",
																"typeString": "literal_string \"Not sale owner\""
															},
															"value": "Not sale owner"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_d260997bd85ce88e5fe3a090aa0509f0362655b7ef85530ca7ca41b7767ad72f",
																"typeString": "literal_string \"Not sale owner\""
															}
														],
														"id": 801,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1777:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 808,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1777:65:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 809,
												"nodeType": "ExpressionStatement",
												"src": "1777:65:3"
											},
											{
												"id": 810,
												"nodeType": "PlaceholderStatement",
												"src": "1853:1:3"
											}
										]
									},
									"id": 812,
									"name": "onlySaleOwner",
									"nameLocation": "1750:13:3",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 800,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1763:2:3"
									},
									"src": "1741:121:3",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 837,
										"nodeType": "Block",
										"src": "1892:230:3",
										"statements": [
											{
												"expression": {
													"id": 819,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 815,
														"name": "WETH",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 781,
														"src": "1903:4:3",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IERC20_$663",
															"typeString": "contract IERC20"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"hexValue": "307863373738343137453036333134313133394663653031303938323738303134304161306344354162",
																"id": 817,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1916:42:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																},
																"value": "0xc778417E063141139Fce010982780140Aa0cD5Ab"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															],
															"id": 816,
															"name": "ERC20",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 585,
															"src": "1910:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_ERC20_$585_$",
																"typeString": "type(contract ERC20)"
															}
														},
														"id": 818,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1910:49:3",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_ERC20_$585",
															"typeString": "contract ERC20"
														}
													},
													"src": "1903:56:3",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$663",
														"typeString": "contract IERC20"
													}
												},
												"id": 820,
												"nodeType": "ExpressionStatement",
												"src": "1903:56:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"hexValue": "307836436362343165656441356130373330373646334537644331363134433138356235664134316544",
															"id": 824,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1981:42:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"value": "0x6Ccb41eedA5a073076F3E7dC1614C185b5fA41eD"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"expression": {
															"id": 821,
															"name": "admins",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 786,
															"src": "1970:6:3",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_AddressSet_$1495_storage",
																"typeString": "struct EnumerableSet.AddressSet storage ref"
															}
														},
														"id": 823,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "add",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1522,
														"src": "1970:10:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_struct$_AddressSet_$1495_storage_ptr_$_t_address_$returns$_t_bool_$bound_to$_t_struct$_AddressSet_$1495_storage_ptr_$",
															"typeString": "function (struct EnumerableSet.AddressSet storage pointer,address) returns (bool)"
														}
													},
													"id": 825,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1970:54:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 826,
												"nodeType": "ExpressionStatement",
												"src": "1970:54:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"hexValue": "307834663042313262424634304663313832353539383232413562316442364433346462433345303136",
															"id": 830,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2046:42:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"value": "0x4f0B12bBF40Fc182559822A5b1dB6D34dbC3E016"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"expression": {
															"id": 827,
															"name": "admins",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 786,
															"src": "2035:6:3",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_AddressSet_$1495_storage",
																"typeString": "struct EnumerableSet.AddressSet storage ref"
															}
														},
														"id": 829,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "add",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1522,
														"src": "2035:10:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_struct$_AddressSet_$1495_storage_ptr_$_t_address_$returns$_t_bool_$bound_to$_t_struct$_AddressSet_$1495_storage_ptr_$",
															"typeString": "function (struct EnumerableSet.AddressSet storage pointer,address) returns (bool)"
														}
													},
													"id": 831,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2035:54:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 832,
												"nodeType": "ExpressionStatement",
												"src": "2035:54:3"
											},
											{
												"expression": {
													"id": 835,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 833,
														"name": "feeAnyone",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 783,
														"src": "2100:9:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "3230",
														"id": 834,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2112:2:3",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_20_by_1",
															"typeString": "int_const 20"
														},
														"value": "20"
													},
													"src": "2100:14:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 836,
												"nodeType": "ExpressionStatement",
												"src": "2100:14:3"
											}
										]
									},
									"id": 838,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 813,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1881:2:3"
									},
									"returnParameters": {
										"id": 814,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1892:0:3"
									},
									"scope": 1161,
									"src": "1870:252:3",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 966,
										"nodeType": "Block",
										"src": "2300:634:3",
										"statements": [
											{
												"expression": {
													"id": 857,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 853,
															"name": "saleInfor",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 778,
															"src": "2311:9:3",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_SaleInfor_$734_storage",
																"typeString": "struct Presale.SaleInfor storage ref"
															}
														},
														"id": 855,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "presaleOwner",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 709,
														"src": "2311:22:3",
														"typeDescriptions": {
															"typeIdentifier": "t_address_payable",
															"typeString": "address payable"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 856,
														"name": "_presaleOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 840,
														"src": "2336:13:3",
														"typeDescriptions": {
															"typeIdentifier": "t_address_payable",
															"typeString": "address payable"
														}
													},
													"src": "2311:38:3",
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"id": 858,
												"nodeType": "ExpressionStatement",
												"src": "2311:38:3"
											},
											{
												"expression": {
													"id": 863,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 859,
															"name": "saleInfor",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 778,
															"src": "2360:9:3",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_SaleInfor_$734_storage",
																"typeString": "struct Presale.SaleInfor storage ref"
															}
														},
														"id": 861,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "saleToken",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 712,
														"src": "2360:19:3",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_ERC20_$585",
															"typeString": "contract ERC20"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 862,
														"name": "_saleToken",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 843,
														"src": "2382:10:3",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_ERC20_$585",
															"typeString": "contract ERC20"
														}
													},
													"src": "2360:32:3",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ERC20_$585",
														"typeString": "contract ERC20"
													}
												},
												"id": 864,
												"nodeType": "ExpressionStatement",
												"src": "2360:32:3"
											},
											{
												"expression": {
													"id": 869,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 865,
															"name": "saleInfor",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 778,
															"src": "2403:9:3",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_SaleInfor_$734_storage",
																"typeString": "struct Presale.SaleInfor storage ref"
															}
														},
														"id": 867,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "baseToken",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 715,
														"src": "2403:19:3",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_ERC20_$585",
															"typeString": "contract ERC20"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 868,
														"name": "_baseTOken",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 846,
														"src": "2425:10:3",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_ERC20_$585",
															"typeString": "contract ERC20"
														}
													},
													"src": "2403:32:3",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ERC20_$585",
														"typeString": "contract ERC20"
													}
												},
												"id": 870,
												"nodeType": "ExpressionStatement",
												"src": "2403:32:3"
											},
											{
												"expression": {
													"id": 889,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 871,
															"name": "saleInfor",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 778,
															"src": "2446:9:3",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_SaleInfor_$734_storage",
																"typeString": "struct Presale.SaleInfor storage ref"
															}
														},
														"id": 873,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "tokenPrice",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 717,
														"src": "2446:20:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 888,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"baseExpression": {
																"id": 874,
																"name": "datas",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 850,
																"src": "2469:5:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_array$_t_uint256_$7_memory_ptr",
																	"typeString": "uint256[7] memory"
																}
															},
															"id": 876,
															"indexExpression": {
																"hexValue": "30",
																"id": 875,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2475:1:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "2469:8:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "*",
														"rightExpression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 887,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"hexValue": "3130",
																"id": 877,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2480:2:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_10_by_1",
																	"typeString": "int_const 10"
																},
																"value": "10"
															},
															"nodeType": "BinaryOperation",
															"operator": "**",
															"rightExpression": {
																"arguments": [
																	{
																		"arguments": [],
																		"expression": {
																			"argumentTypes": [],
																			"expression": {
																				"arguments": [
																					{
																						"expression": {
																							"id": 881,
																							"name": "saleInfor",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 778,
																							"src": "2499:9:3",
																							"typeDescriptions": {
																								"typeIdentifier": "t_struct$_SaleInfor_$734_storage",
																								"typeString": "struct Presale.SaleInfor storage ref"
																							}
																						},
																						"id": 882,
																						"isConstant": false,
																						"isLValue": true,
																						"isPure": false,
																						"lValueRequested": false,
																						"memberName": "saleToken",
																						"nodeType": "MemberAccess",
																						"referencedDeclaration": 712,
																						"src": "2499:19:3",
																						"typeDescriptions": {
																							"typeIdentifier": "t_contract$_ERC20_$585",
																							"typeString": "contract ERC20"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_contract$_ERC20_$585",
																							"typeString": "contract ERC20"
																						}
																					],
																					"id": 880,
																					"name": "ERC20",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 585,
																					"src": "2493:5:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_contract$_ERC20_$585_$",
																						"typeString": "type(contract ERC20)"
																					}
																				},
																				"id": 883,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "typeConversion",
																				"lValueRequested": false,
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "2493:26:3",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_contract$_ERC20_$585",
																					"typeString": "contract ERC20"
																				}
																			},
																			"id": 884,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberName": "decimals",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 74,
																			"src": "2493:35:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_external_view$__$returns$_t_uint256_$",
																				"typeString": "function () view external returns (uint256)"
																			}
																		},
																		"id": 885,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "2493:37:3",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 879,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "2485:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint256_$",
																		"typeString": "type(uint256)"
																	},
																	"typeName": {
																		"id": 878,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "2485:7:3",
																		"typeDescriptions": {}
																	}
																},
																"id": 886,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2485:46:3",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2480:51:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "2469:62:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2446:85:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 890,
												"nodeType": "ExpressionStatement",
												"src": "2446:85:3"
											},
											{
												"expression": {
													"id": 897,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 891,
															"name": "saleInfor",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 778,
															"src": "2542:9:3",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_SaleInfor_$734_storage",
																"typeString": "struct Presale.SaleInfor storage ref"
															}
														},
														"id": 893,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "startSale",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 719,
														"src": "2542:19:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"baseExpression": {
															"id": 894,
															"name": "datas",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 850,
															"src": "2564:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_uint256_$7_memory_ptr",
																"typeString": "uint256[7] memory"
															}
														},
														"id": 896,
														"indexExpression": {
															"hexValue": "31",
															"id": 895,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2570:1:3",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "2564:8:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2542:30:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 898,
												"nodeType": "ExpressionStatement",
												"src": "2542:30:3"
											},
											{
												"expression": {
													"id": 905,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 899,
															"name": "saleInfor",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 778,
															"src": "2583:9:3",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_SaleInfor_$734_storage",
																"typeString": "struct Presale.SaleInfor storage ref"
															}
														},
														"id": 901,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "endSale",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 721,
														"src": "2583:17:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"baseExpression": {
															"id": 902,
															"name": "datas",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 850,
															"src": "2603:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_uint256_$7_memory_ptr",
																"typeString": "uint256[7] memory"
															}
														},
														"id": 904,
														"indexExpression": {
															"hexValue": "32",
															"id": 903,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2609:1:3",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_2_by_1",
																"typeString": "int_const 2"
															},
															"value": "2"
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "2603:8:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2583:28:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 906,
												"nodeType": "ExpressionStatement",
												"src": "2583:28:3"
											},
											{
												"expression": {
													"id": 913,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 907,
															"name": "saleInfor",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 778,
															"src": "2622:9:3",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_SaleInfor_$734_storage",
																"typeString": "struct Presale.SaleInfor storage ref"
															}
														},
														"id": 909,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "minSpendPerBuyer",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 723,
														"src": "2622:26:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"baseExpression": {
															"id": 910,
															"name": "datas",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 850,
															"src": "2651:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_uint256_$7_memory_ptr",
																"typeString": "uint256[7] memory"
															}
														},
														"id": 912,
														"indexExpression": {
															"hexValue": "33",
															"id": 911,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2657:1:3",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_3_by_1",
																"typeString": "int_const 3"
															},
															"value": "3"
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "2651:8:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2622:37:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 914,
												"nodeType": "ExpressionStatement",
												"src": "2622:37:3"
											},
											{
												"expression": {
													"id": 933,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 915,
															"name": "saleInfor",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 778,
															"src": "2670:9:3",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_SaleInfor_$734_storage",
																"typeString": "struct Presale.SaleInfor storage ref"
															}
														},
														"id": 917,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "maxSpendPerBuyer",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 725,
														"src": "2670:26:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 932,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"baseExpression": {
																"id": 918,
																"name": "datas",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 850,
																"src": "2699:5:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_array$_t_uint256_$7_memory_ptr",
																	"typeString": "uint256[7] memory"
																}
															},
															"id": 920,
															"indexExpression": {
																"hexValue": "34",
																"id": 919,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2705:1:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_4_by_1",
																	"typeString": "int_const 4"
																},
																"value": "4"
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "2699:8:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "*",
														"rightExpression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 931,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"hexValue": "3130",
																"id": 921,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2710:2:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_10_by_1",
																	"typeString": "int_const 10"
																},
																"value": "10"
															},
															"nodeType": "BinaryOperation",
															"operator": "**",
															"rightExpression": {
																"arguments": [
																	{
																		"arguments": [],
																		"expression": {
																			"argumentTypes": [],
																			"expression": {
																				"arguments": [
																					{
																						"expression": {
																							"id": 925,
																							"name": "saleInfor",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 778,
																							"src": "2729:9:3",
																							"typeDescriptions": {
																								"typeIdentifier": "t_struct$_SaleInfor_$734_storage",
																								"typeString": "struct Presale.SaleInfor storage ref"
																							}
																						},
																						"id": 926,
																						"isConstant": false,
																						"isLValue": true,
																						"isPure": false,
																						"lValueRequested": false,
																						"memberName": "baseToken",
																						"nodeType": "MemberAccess",
																						"referencedDeclaration": 715,
																						"src": "2729:19:3",
																						"typeDescriptions": {
																							"typeIdentifier": "t_contract$_ERC20_$585",
																							"typeString": "contract ERC20"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_contract$_ERC20_$585",
																							"typeString": "contract ERC20"
																						}
																					],
																					"id": 924,
																					"name": "ERC20",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 585,
																					"src": "2723:5:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_contract$_ERC20_$585_$",
																						"typeString": "type(contract ERC20)"
																					}
																				},
																				"id": 927,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "typeConversion",
																				"lValueRequested": false,
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "2723:26:3",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_contract$_ERC20_$585",
																					"typeString": "contract ERC20"
																				}
																			},
																			"id": 928,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberName": "decimals",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 74,
																			"src": "2723:35:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_external_view$__$returns$_t_uint256_$",
																				"typeString": "function () view external returns (uint256)"
																			}
																		},
																		"id": 929,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "2723:37:3",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 923,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "2715:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint256_$",
																		"typeString": "type(uint256)"
																	},
																	"typeName": {
																		"id": 922,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "2715:7:3",
																		"typeDescriptions": {}
																	}
																},
																"id": 930,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2715:46:3",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2710:51:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "2699:62:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2670:91:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 934,
												"nodeType": "ExpressionStatement",
												"src": "2670:91:3"
											},
											{
												"expression": {
													"id": 941,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 935,
															"name": "saleInfor",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 778,
															"src": "2772:9:3",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_SaleInfor_$734_storage",
																"typeString": "struct Presale.SaleInfor storage ref"
															}
														},
														"id": 937,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "refundFee",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 727,
														"src": "2772:19:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"baseExpression": {
															"id": 938,
															"name": "datas",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 850,
															"src": "2794:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_uint256_$7_memory_ptr",
																"typeString": "uint256[7] memory"
															}
														},
														"id": 940,
														"indexExpression": {
															"hexValue": "35",
															"id": 939,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2800:1:3",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_5_by_1",
																"typeString": "int_const 5"
															},
															"value": "5"
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "2794:8:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2772:30:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 942,
												"nodeType": "ExpressionStatement",
												"src": "2772:30:3"
											},
											{
												"expression": {
													"id": 949,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 943,
															"name": "saleInfor",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 778,
															"src": "2813:9:3",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_SaleInfor_$734_storage",
																"typeString": "struct Presale.SaleInfor storage ref"
															}
														},
														"id": 945,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "claimFee",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 729,
														"src": "2813:18:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"baseExpression": {
															"id": 946,
															"name": "datas",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 850,
															"src": "2834:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_uint256_$7_memory_ptr",
																"typeString": "uint256[7] memory"
															}
														},
														"id": 948,
														"indexExpression": {
															"hexValue": "36",
															"id": 947,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2840:1:3",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_6_by_1",
																"typeString": "int_const 6"
															},
															"value": "6"
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "2834:8:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2813:29:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 950,
												"nodeType": "ExpressionStatement",
												"src": "2813:29:3"
											},
											{
												"expression": {
													"id": 964,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 951,
															"name": "saleInfor",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 778,
															"src": "2853:9:3",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_SaleInfor_$734_storage",
																"typeString": "struct Presale.SaleInfor storage ref"
															}
														},
														"id": 953,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "saleIsBaseToken",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 731,
														"src": "2853:25:3",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"commonType": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"id": 963,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"arguments": [
																{
																	"id": 956,
																	"name": "WETH",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 781,
																	"src": "2889:4:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$663",
																		"typeString": "contract IERC20"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_IERC20_$663",
																		"typeString": "contract IERC20"
																	}
																],
																"id": 955,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "2881:7:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 954,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "2881:7:3",
																	"typeDescriptions": {}
																}
															},
															"id": 957,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2881:13:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"arguments": [
																{
																	"expression": {
																		"id": 960,
																		"name": "saleInfor",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 778,
																		"src": "2906:9:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_SaleInfor_$734_storage",
																			"typeString": "struct Presale.SaleInfor storage ref"
																		}
																	},
																	"id": 961,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "baseToken",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 715,
																	"src": "2906:19:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_ERC20_$585",
																		"typeString": "contract ERC20"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_ERC20_$585",
																		"typeString": "contract ERC20"
																	}
																],
																"id": 959,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "2898:7:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 958,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "2898:7:3",
																	"typeDescriptions": {}
																}
															},
															"id": 962,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2898:28:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"src": "2881:45:3",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "2853:73:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 965,
												"nodeType": "ExpressionStatement",
												"src": "2853:73:3"
											}
										]
									},
									"functionSelector": "61e17655",
									"id": 967,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "initialSaleInfor",
									"nameLocation": "2139:16:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 851,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 840,
												"mutability": "mutable",
												"name": "_presaleOwner",
												"nameLocation": "2182:13:3",
												"nodeType": "VariableDeclaration",
												"scope": 967,
												"src": "2166:29:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address_payable",
													"typeString": "address payable"
												},
												"typeName": {
													"id": 839,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2166:15:3",
													"stateMutability": "payable",
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 843,
												"mutability": "mutable",
												"name": "_saleToken",
												"nameLocation": "2212:10:3",
												"nodeType": "VariableDeclaration",
												"scope": 967,
												"src": "2206:16:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ERC20_$585",
													"typeString": "contract ERC20"
												},
												"typeName": {
													"id": 842,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 841,
														"name": "ERC20",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 585,
														"src": "2206:5:3"
													},
													"referencedDeclaration": 585,
													"src": "2206:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ERC20_$585",
														"typeString": "contract ERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 846,
												"mutability": "mutable",
												"name": "_baseTOken",
												"nameLocation": "2239:10:3",
												"nodeType": "VariableDeclaration",
												"scope": 967,
												"src": "2233:16:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ERC20_$585",
													"typeString": "contract ERC20"
												},
												"typeName": {
													"id": 845,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 844,
														"name": "ERC20",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 585,
														"src": "2233:5:3"
													},
													"referencedDeclaration": 585,
													"src": "2233:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ERC20_$585",
														"typeString": "contract ERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 850,
												"mutability": "mutable",
												"name": "datas",
												"nameLocation": "2278:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 967,
												"src": "2260:23:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$7_memory_ptr",
													"typeString": "uint256[7]"
												},
												"typeName": {
													"baseType": {
														"id": 847,
														"name": "uint256",
														"nodeType": "ElementaryTypeName",
														"src": "2260:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 849,
													"length": {
														"hexValue": "37",
														"id": 848,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2268:1:3",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_7_by_1",
															"typeString": "int_const 7"
														},
														"value": "7"
													},
													"nodeType": "ArrayTypeName",
													"src": "2260:10:3",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$7_storage_ptr",
														"typeString": "uint256[7]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2155:135:3"
									},
									"returnParameters": {
										"id": 852,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2300:0:3"
									},
									"scope": 1161,
									"src": "2130:804:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 994,
										"nodeType": "Block",
										"src": "2990:290:3",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 976,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 972,
															"name": "block",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967292,
															"src": "3004:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_block",
																"typeString": "block"
															}
														},
														"id": 973,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "timestamp",
														"nodeType": "MemberAccess",
														"src": "3004:15:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"expression": {
															"id": 974,
															"name": "saleInfor",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 778,
															"src": "3022:9:3",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_SaleInfor_$734_storage",
																"typeString": "struct Presale.SaleInfor storage ref"
															}
														},
														"id": 975,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "startSale",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 719,
														"src": "3022:19:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3004:37:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 992,
													"nodeType": "Block",
													"src": "3096:177:3",
													"statements": [
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 984,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"expression": {
																		"id": 980,
																		"name": "block",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967292,
																		"src": "3114:5:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_block",
																			"typeString": "block"
																		}
																	},
																	"id": 981,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "timestamp",
																	"nodeType": "MemberAccess",
																	"src": "3114:15:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">",
																"rightExpression": {
																	"expression": {
																		"id": 982,
																		"name": "saleInfor",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 778,
																		"src": "3132:9:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_SaleInfor_$734_storage",
																			"typeString": "struct Presale.SaleInfor storage ref"
																		}
																	},
																	"id": 983,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "endSale",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 721,
																	"src": "3132:17:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "3114:35:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"falseBody": {
																"id": 990,
																"nodeType": "Block",
																"src": "3209:53:3",
																"statements": [
																	{
																		"expression": {
																			"hexValue": "31",
																			"id": 988,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "3235:1:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"functionReturnParameters": 971,
																		"id": 989,
																		"nodeType": "Return",
																		"src": "3228:8:3"
																	}
																]
															},
															"id": 991,
															"nodeType": "IfStatement",
															"src": "3111:151:3",
															"trueBody": {
																"id": 987,
																"nodeType": "Block",
																"src": "3151:54:3",
																"statements": [
																	{
																		"expression": {
																			"hexValue": "32",
																			"id": 985,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "3177:1:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_2_by_1",
																				"typeString": "int_const 2"
																			},
																			"value": "2"
																		},
																		"functionReturnParameters": 971,
																		"id": 986,
																		"nodeType": "Return",
																		"src": "3170:8:3"
																	}
																]
															}
														}
													]
												},
												"id": 993,
												"nodeType": "IfStatement",
												"src": "3001:272:3",
												"trueBody": {
													"id": 979,
													"nodeType": "Block",
													"src": "3043:49:3",
													"statements": [
														{
															"expression": {
																"hexValue": "30",
																"id": 977,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "3065:1:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"functionReturnParameters": 971,
															"id": 978,
															"nodeType": "Return",
															"src": "3058:8:3"
														}
													]
												}
											}
										]
									},
									"functionSelector": "200d2ed2",
									"id": 995,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "status",
									"nameLocation": "2952:6:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 968,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2958:2:3"
									},
									"returnParameters": {
										"id": 971,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 970,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 995,
												"src": "2981:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 969,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2981:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2980:9:3"
									},
									"scope": 1161,
									"src": "2943:337:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1006,
										"nodeType": "Block",
										"src": "3344:55:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 1002,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1173,
																"src": "3378:10:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 1003,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3378:12:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"expression": {
															"id": 1000,
															"name": "admins",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 786,
															"src": "3362:6:3",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_AddressSet_$1495_storage",
																"typeString": "struct EnumerableSet.AddressSet storage ref"
															}
														},
														"id": 1001,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "contains",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1576,
														"src": "3362:15:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_struct$_AddressSet_$1495_storage_ptr_$_t_address_$returns$_t_bool_$bound_to$_t_struct$_AddressSet_$1495_storage_ptr_$",
															"typeString": "function (struct EnumerableSet.AddressSet storage pointer,address) view returns (bool)"
														}
													},
													"id": 1004,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3362:29:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 999,
												"id": 1005,
												"nodeType": "Return",
												"src": "3355:36:3"
											}
										]
									},
									"functionSelector": "cad5b0f7",
									"id": 1007,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "checkAdminAddress",
									"nameLocation": "3298:17:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 996,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3315:2:3"
									},
									"returnParameters": {
										"id": 999,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 998,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1007,
												"src": "3338:4:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 997,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "3338:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3337:6:3"
									},
									"scope": 1161,
									"src": "3289:110:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1113,
										"nodeType": "Block",
										"src": "3472:1013:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1018,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 1015,
																	"name": "status",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 995,
																	"src": "3491:6:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
																		"typeString": "function () view returns (uint256)"
																	}
																},
																"id": 1016,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3491:8:3",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "31",
																"id": 1017,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "3503:1:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1_by_1",
																	"typeString": "int_const 1"
																},
																"value": "1"
															},
															"src": "3491:13:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4e4f5420414354495645",
															"id": 1019,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3506:12:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_5d6d122126ec0f9651beafbd0f488ecfebdba58f580ffa0510b0c9420d00f3cd",
																"typeString": "literal_string \"NOT ACTIVE\""
															},
															"value": "NOT ACTIVE"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_5d6d122126ec0f9651beafbd0f488ecfebdba58f580ffa0510b0c9420d00f3cd",
																"typeString": "literal_string \"NOT ACTIVE\""
															}
														],
														"id": 1014,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "3483:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1020,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3483:36:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1021,
												"nodeType": "ExpressionStatement",
												"src": "3483:36:3"
											},
											{
												"assignments": [
													1024
												],
												"declarations": [
													{
														"constant": false,
														"id": 1024,
														"mutability": "mutable",
														"name": "buyer",
														"nameLocation": "3558:5:3",
														"nodeType": "VariableDeclaration",
														"scope": 1113,
														"src": "3540:23:3",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_BuyerInfo_$747_storage_ptr",
															"typeString": "struct Presale.BuyerInfo"
														},
														"typeName": {
															"id": 1023,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 1022,
																"name": "BuyerInfo",
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 747,
																"src": "3540:9:3"
															},
															"referencedDeclaration": 747,
															"src": "3540:9:3",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_BuyerInfo_$747_storage_ptr",
																"typeString": "struct Presale.BuyerInfo"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1029,
												"initialValue": {
													"baseExpression": {
														"id": 1025,
														"name": "buyerInfo",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 768,
														"src": "3566:9:3",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_struct$_BuyerInfo_$747_storage_$",
															"typeString": "mapping(address => struct Presale.BuyerInfo storage ref)"
														}
													},
													"id": 1028,
													"indexExpression": {
														"expression": {
															"id": 1026,
															"name": "msg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967281,
															"src": "3576:3:3",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_message",
																"typeString": "msg"
															}
														},
														"id": 1027,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "sender",
														"nodeType": "MemberAccess",
														"src": "3576:10:3",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "3566:21:3",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_BuyerInfo_$747_storage",
														"typeString": "struct Presale.BuyerInfo storage ref"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3540:47:3"
											},
											{
												"assignments": [
													1031
												],
												"declarations": [
													{
														"constant": false,
														"id": 1031,
														"mutability": "mutable",
														"name": "amount_in",
														"nameLocation": "3606:9:3",
														"nodeType": "VariableDeclaration",
														"scope": 1113,
														"src": "3598:17:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1030,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "3598:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1033,
												"initialValue": {
													"id": 1032,
													"name": "_amount",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1009,
													"src": "3618:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3598:27:3"
											},
											{
												"assignments": [
													1035
												],
												"declarations": [
													{
														"constant": false,
														"id": 1035,
														"mutability": "mutable",
														"name": "real_amount_in",
														"nameLocation": "3644:14:3",
														"nodeType": "VariableDeclaration",
														"scope": 1113,
														"src": "3636:22:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1034,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "3636:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1037,
												"initialValue": {
													"id": 1036,
													"name": "amount_in",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1031,
													"src": "3661:9:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3636:34:3"
											},
											{
												"assignments": [
													1039
												],
												"declarations": [
													{
														"constant": false,
														"id": 1039,
														"mutability": "mutable",
														"name": "fee",
														"nameLocation": "3689:3:3",
														"nodeType": "VariableDeclaration",
														"scope": 1113,
														"src": "3681:11:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1038,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "3681:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1041,
												"initialValue": {
													"hexValue": "30",
													"id": 1040,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "3695:1:3",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3681:15:3"
											},
											{
												"assignments": [
													1043
												],
												"declarations": [
													{
														"constant": false,
														"id": 1043,
														"mutability": "mutable",
														"name": "fullPercenFee",
														"nameLocation": "3715:13:3",
														"nodeType": "VariableDeclaration",
														"scope": 1113,
														"src": "3707:21:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1042,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "3707:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1045,
												"initialValue": {
													"hexValue": "31303030",
													"id": 1044,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "3731:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_1000_by_1",
														"typeString": "int_const 1000"
													},
													"value": "1000"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3707:28:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1050,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1047,
																"name": "real_amount_in",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1035,
																"src": "3754:14:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"expression": {
																	"id": 1048,
																	"name": "saleInfor",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 778,
																	"src": "3772:9:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_SaleInfor_$734_storage",
																		"typeString": "struct Presale.SaleInfor storage ref"
																	}
																},
																"id": 1049,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "minSpendPerBuyer",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 723,
																"src": "3772:26:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "3754:44:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4e6f7420656e6f7567682076616c7565",
															"id": 1051,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3818:18:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_8254a19c2218e87bd65e7d451e5bbd6df57ba9f73035118b8f47be7b5659ddde",
																"typeString": "literal_string \"Not enough value\""
															},
															"value": "Not enough value"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_8254a19c2218e87bd65e7d451e5bbd6df57ba9f73035118b8f47be7b5659ddde",
																"typeString": "literal_string \"Not enough value\""
															}
														],
														"id": 1046,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "3746:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1052,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3746:101:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1053,
												"nodeType": "ExpressionStatement",
												"src": "3746:101:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1058,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1055,
																"name": "real_amount_in",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1035,
																"src": "3866:14:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<=",
															"rightExpression": {
																"expression": {
																	"id": 1056,
																	"name": "saleInfor",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 778,
																	"src": "3884:9:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_SaleInfor_$734_storage",
																		"typeString": "struct Presale.SaleInfor storage ref"
																	}
																},
																"id": 1057,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "maxSpendPerBuyer",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 725,
																"src": "3884:26:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "3866:44:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4f766572666c6f772076616c7565",
															"id": 1059,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3930:16:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_48cc793e3ea877d6bf034b11f4c6d0d583dd24a0f1374daf495701b65f42f81c",
																"typeString": "literal_string \"Overflow value\""
															},
															"value": "Overflow value"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_48cc793e3ea877d6bf034b11f4c6d0d583dd24a0f1374daf495701b65f42f81c",
																"typeString": "literal_string \"Overflow value\""
															}
														],
														"id": 1054,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "3858:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1060,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3858:99:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1061,
												"nodeType": "ExpressionStatement",
												"src": "3858:99:3"
											},
											{
												"condition": {
													"id": 1064,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "!",
													"prefix": true,
													"src": "3971:20:3",
													"subExpression": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 1062,
															"name": "checkAdminAddress",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1007,
															"src": "3972:17:3",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$__$returns$_t_bool_$",
																"typeString": "function () view returns (bool)"
															}
														},
														"id": 1063,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3972:19:3",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1081,
												"nodeType": "IfStatement",
												"src": "3968:202:3",
												"trueBody": {
													"id": 1080,
													"nodeType": "Block",
													"src": "3993:177:3",
													"statements": [
														{
															"expression": {
																"id": 1078,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 1065,
																	"name": "real_amount_in",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1035,
																	"src": "4008:14:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"arguments": [
																		{
																			"id": 1076,
																			"name": "fullPercenFee",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1043,
																			"src": "4144:13:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"expression": {
																			"components": [
																				{
																					"arguments": [
																						{
																							"id": 1072,
																							"name": "real_amount_in",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 1035,
																							"src": "4092:14:3",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						}
																					],
																					"expression": {
																						"argumentTypes": [
																							{
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						],
																						"expression": {
																							"components": [
																								{
																									"arguments": [
																										{
																											"id": 1068,
																											"name": "feeAnyone",
																											"nodeType": "Identifier",
																											"overloadedDeclarations": [],
																											"referencedDeclaration": 783,
																											"src": "4045:9:3",
																											"typeDescriptions": {
																												"typeIdentifier": "t_uint256",
																												"typeString": "uint256"
																											}
																										}
																									],
																									"expression": {
																										"argumentTypes": [
																											{
																												"typeIdentifier": "t_uint256",
																												"typeString": "uint256"
																											}
																										],
																										"expression": {
																											"id": 1066,
																											"name": "fullPercenFee",
																											"nodeType": "Identifier",
																											"overloadedDeclarations": [],
																											"referencedDeclaration": 1043,
																											"src": "4027:13:3",
																											"typeDescriptions": {
																												"typeIdentifier": "t_uint256",
																												"typeString": "uint256"
																											}
																										},
																										"id": 1067,
																										"isConstant": false,
																										"isLValue": false,
																										"isPure": false,
																										"lValueRequested": false,
																										"memberName": "sub",
																										"nodeType": "MemberAccess",
																										"referencedDeclaration": 2118,
																										"src": "4027:17:3",
																										"typeDescriptions": {
																											"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																											"typeString": "function (uint256,uint256) pure returns (uint256)"
																										}
																									},
																									"id": 1069,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": false,
																									"kind": "functionCall",
																									"lValueRequested": false,
																									"names": [],
																									"nodeType": "FunctionCall",
																									"src": "4027:28:3",
																									"tryCall": false,
																									"typeDescriptions": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									}
																								}
																							],
																							"id": 1070,
																							"isConstant": false,
																							"isInlineArray": false,
																							"isLValue": false,
																							"isPure": false,
																							"lValueRequested": false,
																							"nodeType": "TupleExpression",
																							"src": "4026:30:3",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						},
																						"id": 1071,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"memberName": "mul",
																						"nodeType": "MemberAccess",
																						"referencedDeclaration": 2133,
																						"src": "4026:65:3",
																						"typeDescriptions": {
																							"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																							"typeString": "function (uint256,uint256) pure returns (uint256)"
																						}
																					},
																					"id": 1073,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"kind": "functionCall",
																					"lValueRequested": false,
																					"names": [],
																					"nodeType": "FunctionCall",
																					"src": "4026:81:3",
																					"tryCall": false,
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"id": 1074,
																			"isConstant": false,
																			"isInlineArray": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "TupleExpression",
																			"src": "4025:83:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"id": 1075,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "div",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 2148,
																		"src": "4025:118:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																			"typeString": "function (uint256,uint256) pure returns (uint256)"
																		}
																	},
																	"id": 1077,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "4025:133:3",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "4008:150:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1079,
															"nodeType": "ExpressionStatement",
															"src": "4008:150:3"
														}
													]
												}
											},
											{
												"assignments": [
													1083
												],
												"declarations": [
													{
														"constant": false,
														"id": 1083,
														"mutability": "mutable",
														"name": "remaining",
														"nameLocation": "4188:9:3",
														"nodeType": "VariableDeclaration",
														"scope": 1113,
														"src": "4180:17:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1082,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "4180:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1088,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1087,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 1084,
															"name": "saleInfor",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 778,
															"src": "4200:9:3",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_SaleInfor_$734_storage",
																"typeString": "struct Presale.SaleInfor storage ref"
															}
														},
														"id": 1085,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "maxSpendPerBuyer",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 725,
														"src": "4200:26:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "-",
													"rightExpression": {
														"id": 1086,
														"name": "real_amount_in",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1035,
														"src": "4229:14:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "4200:43:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4180:63:3"
											},
											{
												"assignments": [
													1090
												],
												"declarations": [
													{
														"constant": false,
														"id": 1090,
														"mutability": "mutable",
														"name": "tokenSold",
														"nameLocation": "4262:9:3",
														"nodeType": "VariableDeclaration",
														"scope": 1113,
														"src": "4254:17:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1089,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "4254:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1110,
												"initialValue": {
													"components": [
														{
															"arguments": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1107,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"hexValue": "3130",
																		"id": 1097,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "4380:2:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_10_by_1",
																			"typeString": "int_const 10"
																		},
																		"value": "10"
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "**",
																	"rightExpression": {
																		"arguments": [
																			{
																				"arguments": [],
																				"expression": {
																					"argumentTypes": [],
																					"expression": {
																						"arguments": [
																							{
																								"expression": {
																									"id": 1101,
																									"name": "saleInfor",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 778,
																									"src": "4400:9:3",
																									"typeDescriptions": {
																										"typeIdentifier": "t_struct$_SaleInfor_$734_storage",
																										"typeString": "struct Presale.SaleInfor storage ref"
																									}
																								},
																								"id": 1102,
																								"isConstant": false,
																								"isLValue": true,
																								"isPure": false,
																								"lValueRequested": false,
																								"memberName": "baseToken",
																								"nodeType": "MemberAccess",
																								"referencedDeclaration": 715,
																								"src": "4400:19:3",
																								"typeDescriptions": {
																									"typeIdentifier": "t_contract$_ERC20_$585",
																									"typeString": "contract ERC20"
																								}
																							}
																						],
																						"expression": {
																							"argumentTypes": [
																								{
																									"typeIdentifier": "t_contract$_ERC20_$585",
																									"typeString": "contract ERC20"
																								}
																							],
																							"id": 1100,
																							"name": "ERC20",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 585,
																							"src": "4394:5:3",
																							"typeDescriptions": {
																								"typeIdentifier": "t_type$_t_contract$_ERC20_$585_$",
																								"typeString": "type(contract ERC20)"
																							}
																						},
																						"id": 1103,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"kind": "typeConversion",
																						"lValueRequested": false,
																						"names": [],
																						"nodeType": "FunctionCall",
																						"src": "4394:26:3",
																						"tryCall": false,
																						"typeDescriptions": {
																							"typeIdentifier": "t_contract$_ERC20_$585",
																							"typeString": "contract ERC20"
																						}
																					},
																					"id": 1104,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"memberName": "decimals",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 74,
																					"src": "4394:35:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_external_view$__$returns$_t_uint256_$",
																						"typeString": "function () view external returns (uint256)"
																					}
																				},
																				"id": 1105,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "4394:37:3",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			],
																			"id": 1099,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "4386:7:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_uint256_$",
																				"typeString": "type(uint256)"
																			},
																			"typeName": {
																				"id": 1098,
																				"name": "uint256",
																				"nodeType": "ElementaryTypeName",
																				"src": "4386:7:3",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 1106,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "4386:46:3",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "4380:52:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"arguments": [
																		{
																			"expression": {
																				"id": 1093,
																				"name": "saleInfor",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 778,
																				"src": "4324:9:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_struct$_SaleInfor_$734_storage",
																					"typeString": "struct Presale.SaleInfor storage ref"
																				}
																			},
																			"id": 1094,
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberName": "tokenPrice",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 717,
																			"src": "4324:20:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"expression": {
																			"id": 1091,
																			"name": "real_amount_in",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1035,
																			"src": "4275:14:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"id": 1092,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "mul",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 2133,
																		"src": "4275:48:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																			"typeString": "function (uint256,uint256) pure returns (uint256)"
																		}
																	},
																	"id": 1095,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "4275:70:3",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"id": 1096,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "div",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2148,
																"src": "4275:104:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																	"typeString": "function (uint256,uint256) pure returns (uint256)"
																}
															},
															"id": 1108,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4275:158:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"id": 1109,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "4274:160:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4254:180:3"
											},
											{
												"expression": {
													"id": 1111,
													"name": "tokenSold",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1090,
													"src": "4452:9:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1013,
												"id": 1112,
												"nodeType": "Return",
												"src": "4445:16:3"
											}
										]
									},
									"functionSelector": "b6b55f25",
									"id": 1114,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "deposit",
									"nameLocation": "3416:7:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1010,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1009,
												"mutability": "mutable",
												"name": "_amount",
												"nameLocation": "3432:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 1114,
												"src": "3424:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1008,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3424:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3423:17:3"
									},
									"returnParameters": {
										"id": 1013,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1012,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1114,
												"src": "3463:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1011,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3463:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3462:9:3"
									},
									"scope": 1161,
									"src": "3407:1078:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1124,
										"nodeType": "Block",
										"src": "4562:42:3",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 1121,
														"name": "_address",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1116,
														"src": "4580:8:3",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"id": 1122,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "balance",
													"nodeType": "MemberAccess",
													"src": "4580:16:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1120,
												"id": 1123,
												"nodeType": "Return",
												"src": "4573:23:3"
											}
										]
									},
									"functionSelector": "f8b2cb4f",
									"id": 1125,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getBalance",
									"nameLocation": "4502:10:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1117,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1116,
												"mutability": "mutable",
												"name": "_address",
												"nameLocation": "4521:8:3",
												"nodeType": "VariableDeclaration",
												"scope": 1125,
												"src": "4513:16:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1115,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4513:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4512:18:3"
									},
									"returnParameters": {
										"id": 1120,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1119,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1125,
												"src": "4553:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1118,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4553:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4552:9:3"
									},
									"scope": 1161,
									"src": "4493:111:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1141,
										"nodeType": "Block",
										"src": "4653:70:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 1136,
																		"name": "this",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967268,
																		"src": "4701:4:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_Presale_$1161",
																			"typeString": "contract Presale"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_Presale_$1161",
																			"typeString": "contract Presale"
																		}
																	],
																	"id": 1135,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "4693:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 1134,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "4693:7:3",
																		"typeDescriptions": {}
																	}
																},
																"id": 1137,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4693:13:3",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 1138,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "balance",
															"nodeType": "MemberAccess",
															"src": "4693:21:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"arguments": [
																{
																	"expression": {
																		"id": 1130,
																		"name": "msg",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967281,
																		"src": "4672:3:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_message",
																			"typeString": "msg"
																		}
																	},
																	"id": 1131,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "sender",
																	"nodeType": "MemberAccess",
																	"src": "4672:10:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 1129,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "4664:8:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_payable_$",
																	"typeString": "type(address payable)"
																},
																"typeName": {
																	"id": 1128,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "4664:8:3",
																	"stateMutability": "payable",
																	"typeDescriptions": {}
																}
															},
															"id": 1132,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4664:19:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														"id": 1133,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "transfer",
														"nodeType": "MemberAccess",
														"src": "4664:28:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_transfer_nonpayable$_t_uint256_$returns$__$",
															"typeString": "function (uint256)"
														}
													},
													"id": 1139,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4664:51:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1140,
												"nodeType": "ExpressionStatement",
												"src": "4664:51:3"
											}
										]
									},
									"functionSelector": "861faf5f",
									"id": 1142,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "backToken",
									"nameLocation": "4624:9:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1126,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4633:2:3"
									},
									"returnParameters": {
										"id": 1127,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4653:0:3"
									},
									"scope": 1161,
									"src": "4615:108:3",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1159,
										"nodeType": "Block",
										"src": "4785:67:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1156,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 1153,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "4825:3:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 1154,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "value",
																"nodeType": "MemberAccess",
																"src": "4825:9:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "-",
															"rightExpression": {
																"id": 1155,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1144,
																"src": "4837:6:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "4825:18:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"arguments": [
																{
																	"expression": {
																		"id": 1149,
																		"name": "msg",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967281,
																		"src": "4804:3:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_message",
																			"typeString": "msg"
																		}
																	},
																	"id": 1150,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "sender",
																	"nodeType": "MemberAccess",
																	"src": "4804:10:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 1148,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "4796:8:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_payable_$",
																	"typeString": "type(address payable)"
																},
																"typeName": {
																	"id": 1147,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "4796:8:3",
																	"stateMutability": "payable",
																	"typeDescriptions": {}
																}
															},
															"id": 1151,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4796:19:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														"id": 1152,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "transfer",
														"nodeType": "MemberAccess",
														"src": "4796:28:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_transfer_nonpayable$_t_uint256_$returns$__$",
															"typeString": "function (uint256)"
														}
													},
													"id": 1157,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4796:48:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1158,
												"nodeType": "ExpressionStatement",
												"src": "4796:48:3"
											}
										]
									},
									"functionSelector": "4329db46",
									"id": 1160,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "transferETH",
									"nameLocation": "4740:11:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1145,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1144,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "4760:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 1160,
												"src": "4752:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1143,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4752:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4751:16:3"
									},
									"returnParameters": {
										"id": 1146,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4785:0:3"
									},
									"scope": 1161,
									"src": "4731:121:3",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1162,
							"src": "338:4519:3",
							"usedErrors": []
						}
					],
					"src": "93:4764:3"
				},
				"id": 3
			},
			"Utils/Context.sol": {
				"ast": {
					"absolutePath": "Utils/Context.sol",
					"exportedSymbols": {
						"Context": [
							1183
						]
					},
					"id": 1184,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1163,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "89:23:4"
						},
						{
							"abstract": true,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 1164,
								"nodeType": "StructuredDocumentation",
								"src": "116:505:4",
								"text": " @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."
							},
							"fullyImplemented": true,
							"id": 1183,
							"linearizedBaseContracts": [
								1183
							],
							"name": "Context",
							"nameLocation": "641:7:4",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 1172,
										"nodeType": "Block",
										"src": "718:36:4",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 1169,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "736:3:4",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 1170,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "sender",
													"nodeType": "MemberAccess",
													"src": "736:10:4",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 1168,
												"id": 1171,
												"nodeType": "Return",
												"src": "729:17:4"
											}
										]
									},
									"id": 1173,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgSender",
									"nameLocation": "665:10:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1165,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "675:2:4"
									},
									"returnParameters": {
										"id": 1168,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1167,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1173,
												"src": "709:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1166,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "709:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "708:9:4"
									},
									"scope": 1183,
									"src": "656:98:4",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1181,
										"nodeType": "Block",
										"src": "829:34:4",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 1178,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "847:3:4",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 1179,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "data",
													"nodeType": "MemberAccess",
													"src": "847:8:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_calldata_ptr",
														"typeString": "bytes calldata"
													}
												},
												"functionReturnParameters": 1177,
												"id": 1180,
												"nodeType": "Return",
												"src": "840:15:4"
											}
										]
									},
									"id": 1182,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgData",
									"nameLocation": "771:8:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1174,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "779:2:4"
									},
									"returnParameters": {
										"id": 1177,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1176,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1182,
												"src": "813:14:4",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1175,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "813:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "812:16:4"
									},
									"scope": 1183,
									"src": "762:101:4",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 1184,
							"src": "623:243:4",
							"usedErrors": []
						}
					],
					"src": "89:779:4"
				},
				"id": 4
			},
			"Utils/EnumerableSet.sol": {
				"ast": {
					"absolutePath": "Utils/EnumerableSet.sol",
					"exportedSymbols": {
						"EnumerableSet": [
							1782
						]
					},
					"id": 1783,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1185,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "118:23:5"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 1186,
								"nodeType": "StructuredDocumentation",
								"src": "145:1118:5",
								"text": " @dev Library for managing\n https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n types.\n Sets have the following properties:\n - Elements are added, removed, and checked for existence in constant time\n (O(1)).\n - Elements are enumerated in O(n). No guarantees are made on the ordering.\n ```\n contract Example {\n     // Add the library methods\n     using EnumerableSet for EnumerableSet.AddressSet;\n     // Declare a set state variable\n     EnumerableSet.AddressSet private mySet;\n }\n ```\n As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n and `uint256` (`UintSet`) are supported.\n [WARNING]\n ====\n  Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable.\n  See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n  In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet.\n ===="
							},
							"fullyImplemented": true,
							"id": 1782,
							"linearizedBaseContracts": [
								1782
							],
							"name": "EnumerableSet",
							"nameLocation": "1273:13:5",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"canonicalName": "EnumerableSet.Set",
									"id": 1194,
									"members": [
										{
											"constant": false,
											"id": 1189,
											"mutability": "mutable",
											"name": "_values",
											"nameLocation": "1809:7:5",
											"nodeType": "VariableDeclaration",
											"scope": 1194,
											"src": "1799:17:5",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
												"typeString": "bytes32[]"
											},
											"typeName": {
												"baseType": {
													"id": 1187,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1799:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"id": 1188,
												"nodeType": "ArrayTypeName",
												"src": "1799:9:5",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
													"typeString": "bytes32[]"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1193,
											"mutability": "mutable",
											"name": "_indexes",
											"nameLocation": "1980:8:5",
											"nodeType": "VariableDeclaration",
											"scope": 1194,
											"src": "1952:36:5",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
												"typeString": "mapping(bytes32 => uint256)"
											},
											"typeName": {
												"id": 1192,
												"keyType": {
													"id": 1190,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1960:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"nodeType": "Mapping",
												"src": "1952:27:5",
												"typeDescriptions": {
													"typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
													"typeString": "mapping(bytes32 => uint256)"
												},
												"valueType": {
													"id": 1191,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1971:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												}
											},
											"visibility": "internal"
										}
									],
									"name": "Set",
									"nameLocation": "1750:3:5",
									"nodeType": "StructDefinition",
									"scope": 1782,
									"src": "1743:253:5",
									"visibility": "public"
								},
								{
									"body": {
										"id": 1235,
										"nodeType": "Block",
										"src": "2243:345:5",
										"statements": [
											{
												"condition": {
													"id": 1209,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "!",
													"prefix": true,
													"src": "2258:22:5",
													"subExpression": {
														"arguments": [
															{
																"id": 1206,
																"name": "set",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1198,
																"src": "2269:3:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Set_$1194_storage_ptr",
																	"typeString": "struct EnumerableSet.Set storage pointer"
																}
															},
															{
																"id": 1207,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1200,
																"src": "2274:5:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_struct$_Set_$1194_storage_ptr",
																	"typeString": "struct EnumerableSet.Set storage pointer"
																},
																{
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															],
															"id": 1205,
															"name": "_contains",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1339,
															"src": "2259:9:5",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$_t_struct$_Set_$1194_storage_ptr_$_t_bytes32_$returns$_t_bool_$",
																"typeString": "function (struct EnumerableSet.Set storage pointer,bytes32) view returns (bool)"
															}
														},
														"id": 1208,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2259:21:5",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 1233,
													"nodeType": "Block",
													"src": "2542:39:5",
													"statements": [
														{
															"expression": {
																"hexValue": "66616c7365",
																"id": 1231,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2564:5:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "false"
															},
															"functionReturnParameters": 1204,
															"id": 1232,
															"nodeType": "Return",
															"src": "2557:12:5"
														}
													]
												},
												"id": 1234,
												"nodeType": "IfStatement",
												"src": "2254:327:5",
												"trueBody": {
													"id": 1230,
													"nodeType": "Block",
													"src": "2282:254:5",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 1215,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1200,
																		"src": "2314:5:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	],
																	"expression": {
																		"expression": {
																			"id": 1210,
																			"name": "set",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1198,
																			"src": "2297:3:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_Set_$1194_storage_ptr",
																				"typeString": "struct EnumerableSet.Set storage pointer"
																			}
																		},
																		"id": 1213,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "_values",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 1189,
																		"src": "2297:11:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_bytes32_$dyn_storage",
																			"typeString": "bytes32[] storage ref"
																		}
																	},
																	"id": 1214,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "push",
																	"nodeType": "MemberAccess",
																	"src": "2297:16:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_arraypush_nonpayable$_t_array$_t_bytes32_$dyn_storage_ptr_$_t_bytes32_$returns$__$bound_to$_t_array$_t_bytes32_$dyn_storage_ptr_$",
																		"typeString": "function (bytes32[] storage pointer,bytes32)"
																	}
																},
																"id": 1216,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2297:23:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1217,
															"nodeType": "ExpressionStatement",
															"src": "2297:23:5"
														},
														{
															"expression": {
																"id": 1226,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"baseExpression": {
																		"expression": {
																			"id": 1218,
																			"name": "set",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1198,
																			"src": "2458:3:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_Set_$1194_storage_ptr",
																				"typeString": "struct EnumerableSet.Set storage pointer"
																			}
																		},
																		"id": 1221,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "_indexes",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 1193,
																		"src": "2458:12:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
																			"typeString": "mapping(bytes32 => uint256)"
																		}
																	},
																	"id": 1222,
																	"indexExpression": {
																		"id": 1220,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1200,
																		"src": "2471:5:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"nodeType": "IndexAccess",
																	"src": "2458:19:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"expression": {
																		"expression": {
																			"id": 1223,
																			"name": "set",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1198,
																			"src": "2480:3:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_Set_$1194_storage_ptr",
																				"typeString": "struct EnumerableSet.Set storage pointer"
																			}
																		},
																		"id": 1224,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "_values",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 1189,
																		"src": "2480:11:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_bytes32_$dyn_storage",
																			"typeString": "bytes32[] storage ref"
																		}
																	},
																	"id": 1225,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "length",
																	"nodeType": "MemberAccess",
																	"src": "2480:18:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "2458:40:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1227,
															"nodeType": "ExpressionStatement",
															"src": "2458:40:5"
														},
														{
															"expression": {
																"hexValue": "74727565",
																"id": 1228,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2520:4:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "true"
															},
															"functionReturnParameters": 1204,
															"id": 1229,
															"nodeType": "Return",
															"src": "2513:11:5"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1195,
										"nodeType": "StructuredDocumentation",
										"src": "2004:164:5",
										"text": " @dev Add a value to a set. O(1).\n Returns true if the value was added to the set, that is if it was not\n already present."
									},
									"id": 1236,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_add",
									"nameLocation": "2183:4:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1201,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1198,
												"mutability": "mutable",
												"name": "set",
												"nameLocation": "2200:3:5",
												"nodeType": "VariableDeclaration",
												"scope": 1236,
												"src": "2188:15:5",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Set_$1194_storage_ptr",
													"typeString": "struct EnumerableSet.Set"
												},
												"typeName": {
													"id": 1197,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1196,
														"name": "Set",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1194,
														"src": "2188:3:5"
													},
													"referencedDeclaration": 1194,
													"src": "2188:3:5",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Set_$1194_storage_ptr",
														"typeString": "struct EnumerableSet.Set"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1200,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2213:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 1236,
												"src": "2205:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1199,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2205:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2187:32:5"
									},
									"returnParameters": {
										"id": 1204,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1203,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1236,
												"src": "2237:4:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1202,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2237:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2236:6:5"
									},
									"scope": 1782,
									"src": "2174:414:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 1319,
										"nodeType": "Block",
										"src": "2836:1348:5",
										"statements": [
											{
												"assignments": [
													1248
												],
												"declarations": [
													{
														"constant": false,
														"id": 1248,
														"mutability": "mutable",
														"name": "valueIndex",
														"nameLocation": "2956:10:5",
														"nodeType": "VariableDeclaration",
														"scope": 1319,
														"src": "2948:18:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1247,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2948:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1253,
												"initialValue": {
													"baseExpression": {
														"expression": {
															"id": 1249,
															"name": "set",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1240,
															"src": "2969:3:5",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Set_$1194_storage_ptr",
																"typeString": "struct EnumerableSet.Set storage pointer"
															}
														},
														"id": 1250,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "_indexes",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1193,
														"src": "2969:12:5",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
															"typeString": "mapping(bytes32 => uint256)"
														}
													},
													"id": 1252,
													"indexExpression": {
														"id": 1251,
														"name": "value",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1242,
														"src": "2982:5:5",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "2969:19:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2948:40:5"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1256,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1254,
														"name": "valueIndex",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1248,
														"src": "3005:10:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 1255,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3019:1:5",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "3005:15:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 1317,
													"nodeType": "Block",
													"src": "4138:39:5",
													"statements": [
														{
															"expression": {
																"hexValue": "66616c7365",
																"id": 1315,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "4160:5:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "false"
															},
															"functionReturnParameters": 1246,
															"id": 1316,
															"nodeType": "Return",
															"src": "4153:12:5"
														}
													]
												},
												"id": 1318,
												"nodeType": "IfStatement",
												"src": "3001:1176:5",
												"trueBody": {
													"id": 1314,
													"nodeType": "Block",
													"src": "3022:1110:5",
													"statements": [
														{
															"assignments": [
																1258
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1258,
																	"mutability": "mutable",
																	"name": "toDeleteIndex",
																	"nameLocation": "3388:13:5",
																	"nodeType": "VariableDeclaration",
																	"scope": 1314,
																	"src": "3380:21:5",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 1257,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "3380:7:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1262,
															"initialValue": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1261,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1259,
																	"name": "valueIndex",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1248,
																	"src": "3404:10:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 1260,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "3417:1:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "3404:14:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "3380:38:5"
														},
														{
															"assignments": [
																1264
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1264,
																	"mutability": "mutable",
																	"name": "lastIndex",
																	"nameLocation": "3441:9:5",
																	"nodeType": "VariableDeclaration",
																	"scope": 1314,
																	"src": "3433:17:5",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 1263,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "3433:7:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1270,
															"initialValue": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1269,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"expression": {
																		"expression": {
																			"id": 1265,
																			"name": "set",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1240,
																			"src": "3453:3:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_Set_$1194_storage_ptr",
																				"typeString": "struct EnumerableSet.Set storage pointer"
																			}
																		},
																		"id": 1266,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "_values",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 1189,
																		"src": "3453:11:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_bytes32_$dyn_storage",
																			"typeString": "bytes32[] storage ref"
																		}
																	},
																	"id": 1267,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "length",
																	"nodeType": "MemberAccess",
																	"src": "3453:18:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 1268,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "3474:1:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "3453:22:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "3433:42:5"
														},
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1273,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1271,
																	"name": "lastIndex",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1264,
																	"src": "3496:9:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "!=",
																"rightExpression": {
																	"id": 1272,
																	"name": "toDeleteIndex",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1258,
																	"src": "3509:13:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "3496:26:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 1298,
															"nodeType": "IfStatement",
															"src": "3492:405:5",
															"trueBody": {
																"id": 1297,
																"nodeType": "Block",
																"src": "3524:373:5",
																"statements": [
																	{
																		"assignments": [
																			1275
																		],
																		"declarations": [
																			{
																				"constant": false,
																				"id": 1275,
																				"mutability": "mutable",
																				"name": "lastValue",
																				"nameLocation": "3551:9:5",
																				"nodeType": "VariableDeclaration",
																				"scope": 1297,
																				"src": "3543:17:5",
																				"stateVariable": false,
																				"storageLocation": "default",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes32",
																					"typeString": "bytes32"
																				},
																				"typeName": {
																					"id": 1274,
																					"name": "bytes32",
																					"nodeType": "ElementaryTypeName",
																					"src": "3543:7:5",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bytes32",
																						"typeString": "bytes32"
																					}
																				},
																				"visibility": "internal"
																			}
																		],
																		"id": 1280,
																		"initialValue": {
																			"baseExpression": {
																				"expression": {
																					"id": 1276,
																					"name": "set",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1240,
																					"src": "3563:3:5",
																					"typeDescriptions": {
																						"typeIdentifier": "t_struct$_Set_$1194_storage_ptr",
																						"typeString": "struct EnumerableSet.Set storage pointer"
																					}
																				},
																				"id": 1277,
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "_values",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 1189,
																				"src": "3563:11:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_array$_t_bytes32_$dyn_storage",
																					"typeString": "bytes32[] storage ref"
																				}
																			},
																			"id": 1279,
																			"indexExpression": {
																				"id": 1278,
																				"name": "lastIndex",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1264,
																				"src": "3575:9:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "IndexAccess",
																			"src": "3563:22:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		},
																		"nodeType": "VariableDeclarationStatement",
																		"src": "3543:42:5"
																	},
																	{
																		"expression": {
																			"id": 1287,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftHandSide": {
																				"baseExpression": {
																					"expression": {
																						"id": 1281,
																						"name": "set",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1240,
																						"src": "3688:3:5",
																						"typeDescriptions": {
																							"typeIdentifier": "t_struct$_Set_$1194_storage_ptr",
																							"typeString": "struct EnumerableSet.Set storage pointer"
																						}
																					},
																					"id": 1284,
																					"isConstant": false,
																					"isLValue": true,
																					"isPure": false,
																					"lValueRequested": false,
																					"memberName": "_values",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 1189,
																					"src": "3688:11:5",
																					"typeDescriptions": {
																						"typeIdentifier": "t_array$_t_bytes32_$dyn_storage",
																						"typeString": "bytes32[] storage ref"
																					}
																				},
																				"id": 1285,
																				"indexExpression": {
																					"id": 1283,
																					"name": "toDeleteIndex",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1258,
																					"src": "3700:13:5",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": true,
																				"nodeType": "IndexAccess",
																				"src": "3688:26:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes32",
																					"typeString": "bytes32"
																				}
																			},
																			"nodeType": "Assignment",
																			"operator": "=",
																			"rightHandSide": {
																				"id": 1286,
																				"name": "lastValue",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1275,
																				"src": "3717:9:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes32",
																					"typeString": "bytes32"
																				}
																			},
																			"src": "3688:38:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		},
																		"id": 1288,
																		"nodeType": "ExpressionStatement",
																		"src": "3688:38:5"
																	},
																	{
																		"expression": {
																			"id": 1295,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftHandSide": {
																				"baseExpression": {
																					"expression": {
																						"id": 1289,
																						"name": "set",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1240,
																						"src": "3802:3:5",
																						"typeDescriptions": {
																							"typeIdentifier": "t_struct$_Set_$1194_storage_ptr",
																							"typeString": "struct EnumerableSet.Set storage pointer"
																						}
																					},
																					"id": 1292,
																					"isConstant": false,
																					"isLValue": true,
																					"isPure": false,
																					"lValueRequested": false,
																					"memberName": "_indexes",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 1193,
																					"src": "3802:12:5",
																					"typeDescriptions": {
																						"typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
																						"typeString": "mapping(bytes32 => uint256)"
																					}
																				},
																				"id": 1293,
																				"indexExpression": {
																					"id": 1291,
																					"name": "lastValue",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1275,
																					"src": "3815:9:5",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bytes32",
																						"typeString": "bytes32"
																					}
																				},
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": true,
																				"nodeType": "IndexAccess",
																				"src": "3802:23:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "Assignment",
																			"operator": "=",
																			"rightHandSide": {
																				"id": 1294,
																				"name": "valueIndex",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1248,
																				"src": "3828:10:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "3802:36:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"id": 1296,
																		"nodeType": "ExpressionStatement",
																		"src": "3802:36:5"
																	}
																]
															}
														},
														{
															"expression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"expression": {
																		"expression": {
																			"id": 1299,
																			"name": "set",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1240,
																			"src": "3978:3:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_Set_$1194_storage_ptr",
																				"typeString": "struct EnumerableSet.Set storage pointer"
																			}
																		},
																		"id": 1302,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "_values",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 1189,
																		"src": "3978:11:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_bytes32_$dyn_storage",
																			"typeString": "bytes32[] storage ref"
																		}
																	},
																	"id": 1303,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "pop",
																	"nodeType": "MemberAccess",
																	"src": "3978:15:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_arraypop_nonpayable$_t_array$_t_bytes32_$dyn_storage_ptr_$returns$__$bound_to$_t_array$_t_bytes32_$dyn_storage_ptr_$",
																		"typeString": "function (bytes32[] storage pointer)"
																	}
																},
																"id": 1304,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3978:17:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1305,
															"nodeType": "ExpressionStatement",
															"src": "3978:17:5"
														},
														{
															"expression": {
																"id": 1310,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "UnaryOperation",
																"operator": "delete",
																"prefix": true,
																"src": "4066:26:5",
																"subExpression": {
																	"baseExpression": {
																		"expression": {
																			"id": 1306,
																			"name": "set",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1240,
																			"src": "4073:3:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_Set_$1194_storage_ptr",
																				"typeString": "struct EnumerableSet.Set storage pointer"
																			}
																		},
																		"id": 1307,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "_indexes",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 1193,
																		"src": "4073:12:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
																			"typeString": "mapping(bytes32 => uint256)"
																		}
																	},
																	"id": 1309,
																	"indexExpression": {
																		"id": 1308,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1242,
																		"src": "4086:5:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"nodeType": "IndexAccess",
																	"src": "4073:19:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1311,
															"nodeType": "ExpressionStatement",
															"src": "4066:26:5"
														},
														{
															"expression": {
																"hexValue": "74727565",
																"id": 1312,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "4116:4:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "true"
															},
															"functionReturnParameters": 1246,
															"id": 1313,
															"nodeType": "Return",
															"src": "4109:11:5"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1237,
										"nodeType": "StructuredDocumentation",
										"src": "2596:162:5",
										"text": " @dev Removes a value from a set. O(1).\n Returns true if the value was removed from the set, that is if it was\n present."
									},
									"id": 1320,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_remove",
									"nameLocation": "2773:7:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1243,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1240,
												"mutability": "mutable",
												"name": "set",
												"nameLocation": "2793:3:5",
												"nodeType": "VariableDeclaration",
												"scope": 1320,
												"src": "2781:15:5",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Set_$1194_storage_ptr",
													"typeString": "struct EnumerableSet.Set"
												},
												"typeName": {
													"id": 1239,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1238,
														"name": "Set",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1194,
														"src": "2781:3:5"
													},
													"referencedDeclaration": 1194,
													"src": "2781:3:5",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Set_$1194_storage_ptr",
														"typeString": "struct EnumerableSet.Set"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1242,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2806:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 1320,
												"src": "2798:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1241,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2798:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2780:32:5"
									},
									"returnParameters": {
										"id": 1246,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1245,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1320,
												"src": "2830:4:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1244,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2830:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2829:6:5"
									},
									"scope": 1782,
									"src": "2764:1420:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 1338,
										"nodeType": "Block",
										"src": "4349:50:5",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1336,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"baseExpression": {
															"expression": {
																"id": 1331,
																"name": "set",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1324,
																"src": "4367:3:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Set_$1194_storage_ptr",
																	"typeString": "struct EnumerableSet.Set storage pointer"
																}
															},
															"id": 1332,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "_indexes",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1193,
															"src": "4367:12:5",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
																"typeString": "mapping(bytes32 => uint256)"
															}
														},
														"id": 1334,
														"indexExpression": {
															"id": 1333,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1326,
															"src": "4380:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "4367:19:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 1335,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "4390:1:5",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "4367:24:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 1330,
												"id": 1337,
												"nodeType": "Return",
												"src": "4360:31:5"
											}
										]
									},
									"documentation": {
										"id": 1321,
										"nodeType": "StructuredDocumentation",
										"src": "4192:72:5",
										"text": " @dev Returns true if the value is in the set. O(1)."
									},
									"id": 1339,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_contains",
									"nameLocation": "4279:9:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1327,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1324,
												"mutability": "mutable",
												"name": "set",
												"nameLocation": "4301:3:5",
												"nodeType": "VariableDeclaration",
												"scope": 1339,
												"src": "4289:15:5",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Set_$1194_storage_ptr",
													"typeString": "struct EnumerableSet.Set"
												},
												"typeName": {
													"id": 1323,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1322,
														"name": "Set",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1194,
														"src": "4289:3:5"
													},
													"referencedDeclaration": 1194,
													"src": "4289:3:5",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Set_$1194_storage_ptr",
														"typeString": "struct EnumerableSet.Set"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1326,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "4314:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 1339,
												"src": "4306:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1325,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4306:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4288:32:5"
									},
									"returnParameters": {
										"id": 1330,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1329,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1339,
												"src": "4343:4:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1328,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4343:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4342:6:5"
									},
									"scope": 1782,
									"src": "4270:129:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 1352,
										"nodeType": "Block",
										"src": "4550:44:5",
										"statements": [
											{
												"expression": {
													"expression": {
														"expression": {
															"id": 1348,
															"name": "set",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1343,
															"src": "4568:3:5",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Set_$1194_storage_ptr",
																"typeString": "struct EnumerableSet.Set storage pointer"
															}
														},
														"id": 1349,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "_values",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1189,
														"src": "4568:11:5",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_bytes32_$dyn_storage",
															"typeString": "bytes32[] storage ref"
														}
													},
													"id": 1350,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "length",
													"nodeType": "MemberAccess",
													"src": "4568:18:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1347,
												"id": 1351,
												"nodeType": "Return",
												"src": "4561:25:5"
											}
										]
									},
									"documentation": {
										"id": 1340,
										"nodeType": "StructuredDocumentation",
										"src": "4407:72:5",
										"text": " @dev Returns the number of values on the set. O(1)."
									},
									"id": 1353,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_length",
									"nameLocation": "4494:7:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1344,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1343,
												"mutability": "mutable",
												"name": "set",
												"nameLocation": "4514:3:5",
												"nodeType": "VariableDeclaration",
												"scope": 1353,
												"src": "4502:15:5",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Set_$1194_storage_ptr",
													"typeString": "struct EnumerableSet.Set"
												},
												"typeName": {
													"id": 1342,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1341,
														"name": "Set",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1194,
														"src": "4502:3:5"
													},
													"referencedDeclaration": 1194,
													"src": "4502:3:5",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Set_$1194_storage_ptr",
														"typeString": "struct EnumerableSet.Set"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4501:17:5"
									},
									"returnParameters": {
										"id": 1347,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1346,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1353,
												"src": "4541:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1345,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4541:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4540:9:5"
									},
									"scope": 1782,
									"src": "4485:109:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 1369,
										"nodeType": "Block",
										"src": "5024:44:5",
										"statements": [
											{
												"expression": {
													"baseExpression": {
														"expression": {
															"id": 1364,
															"name": "set",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1357,
															"src": "5042:3:5",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Set_$1194_storage_ptr",
																"typeString": "struct EnumerableSet.Set storage pointer"
															}
														},
														"id": 1365,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "_values",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1189,
														"src": "5042:11:5",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_bytes32_$dyn_storage",
															"typeString": "bytes32[] storage ref"
														}
													},
													"id": 1367,
													"indexExpression": {
														"id": 1366,
														"name": "index",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1359,
														"src": "5054:5:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "5042:18:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"functionReturnParameters": 1363,
												"id": 1368,
												"nodeType": "Return",
												"src": "5035:25:5"
											}
										]
									},
									"documentation": {
										"id": 1354,
										"nodeType": "StructuredDocumentation",
										"src": "4602:340:5",
										"text": " @dev Returns the value stored at position `index` in the set. O(1).\n Note that there are no guarantees on the ordering of values inside the\n array, and it may change when more values are added or removed.\n Requirements:\n - `index` must be strictly less than {length}."
									},
									"id": 1370,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_at",
									"nameLocation": "4957:3:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1360,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1357,
												"mutability": "mutable",
												"name": "set",
												"nameLocation": "4973:3:5",
												"nodeType": "VariableDeclaration",
												"scope": 1370,
												"src": "4961:15:5",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Set_$1194_storage_ptr",
													"typeString": "struct EnumerableSet.Set"
												},
												"typeName": {
													"id": 1356,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1355,
														"name": "Set",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1194,
														"src": "4961:3:5"
													},
													"referencedDeclaration": 1194,
													"src": "4961:3:5",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Set_$1194_storage_ptr",
														"typeString": "struct EnumerableSet.Set"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1359,
												"mutability": "mutable",
												"name": "index",
												"nameLocation": "4986:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 1370,
												"src": "4978:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1358,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4978:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4960:32:5"
									},
									"returnParameters": {
										"id": 1363,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1362,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1370,
												"src": "5015:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1361,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "5015:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5014:9:5"
									},
									"scope": 1782,
									"src": "4948:120:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 1383,
										"nodeType": "Block",
										"src": "5692:37:5",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 1380,
														"name": "set",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1374,
														"src": "5710:3:5",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Set_$1194_storage_ptr",
															"typeString": "struct EnumerableSet.Set storage pointer"
														}
													},
													"id": 1381,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "_values",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 1189,
													"src": "5710:11:5",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage",
														"typeString": "bytes32[] storage ref"
													}
												},
												"functionReturnParameters": 1379,
												"id": 1382,
												"nodeType": "Return",
												"src": "5703:18:5"
											}
										]
									},
									"documentation": {
										"id": 1371,
										"nodeType": "StructuredDocumentation",
										"src": "5076:536:5",
										"text": " @dev Return the entire set in an array\n WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n this function has an unbounded cost, and using it as part of a state-changing function may render the function\n uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block."
									},
									"id": 1384,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_values",
									"nameLocation": "5627:7:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1375,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1374,
												"mutability": "mutable",
												"name": "set",
												"nameLocation": "5647:3:5",
												"nodeType": "VariableDeclaration",
												"scope": 1384,
												"src": "5635:15:5",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Set_$1194_storage_ptr",
													"typeString": "struct EnumerableSet.Set"
												},
												"typeName": {
													"id": 1373,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1372,
														"name": "Set",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1194,
														"src": "5635:3:5"
													},
													"referencedDeclaration": 1194,
													"src": "5635:3:5",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Set_$1194_storage_ptr",
														"typeString": "struct EnumerableSet.Set"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5634:17:5"
									},
									"returnParameters": {
										"id": 1379,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1378,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1384,
												"src": "5674:16:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 1376,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "5674:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 1377,
													"nodeType": "ArrayTypeName",
													"src": "5674:9:5",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5673:18:5"
									},
									"scope": 1782,
									"src": "5618:111:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "private"
								},
								{
									"canonicalName": "EnumerableSet.Bytes32Set",
									"id": 1388,
									"members": [
										{
											"constant": false,
											"id": 1387,
											"mutability": "mutable",
											"name": "_inner",
											"nameLocation": "5791:6:5",
											"nodeType": "VariableDeclaration",
											"scope": 1388,
											"src": "5787:10:5",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_struct$_Set_$1194_storage_ptr",
												"typeString": "struct EnumerableSet.Set"
											},
											"typeName": {
												"id": 1386,
												"nodeType": "UserDefinedTypeName",
												"pathNode": {
													"id": 1385,
													"name": "Set",
													"nodeType": "IdentifierPath",
													"referencedDeclaration": 1194,
													"src": "5787:3:5"
												},
												"referencedDeclaration": 1194,
												"src": "5787:3:5",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Set_$1194_storage_ptr",
													"typeString": "struct EnumerableSet.Set"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "Bytes32Set",
									"nameLocation": "5765:10:5",
									"nodeType": "StructDefinition",
									"scope": 1782,
									"src": "5758:47:5",
									"visibility": "public"
								},
								{
									"body": {
										"id": 1405,
										"nodeType": "Block",
										"src": "6059:49:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 1400,
																"name": "set",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1392,
																"src": "6082:3:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Bytes32Set_$1388_storage_ptr",
																	"typeString": "struct EnumerableSet.Bytes32Set storage pointer"
																}
															},
															"id": 1401,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "_inner",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1387,
															"src": "6082:10:5",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Set_$1194_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															}
														},
														{
															"id": 1402,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1394,
															"src": "6094:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_struct$_Set_$1194_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 1399,
														"name": "_add",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1236,
														"src": "6077:4:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_struct$_Set_$1194_storage_ptr_$_t_bytes32_$returns$_t_bool_$",
															"typeString": "function (struct EnumerableSet.Set storage pointer,bytes32) returns (bool)"
														}
													},
													"id": 1403,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6077:23:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 1398,
												"id": 1404,
												"nodeType": "Return",
												"src": "6070:30:5"
											}
										]
									},
									"documentation": {
										"id": 1389,
										"nodeType": "StructuredDocumentation",
										"src": "5813:164:5",
										"text": " @dev Add a value to a set. O(1).\n Returns true if the value was added to the set, that is if it was not\n already present."
									},
									"id": 1406,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "add",
									"nameLocation": "5992:3:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1395,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1392,
												"mutability": "mutable",
												"name": "set",
												"nameLocation": "6015:3:5",
												"nodeType": "VariableDeclaration",
												"scope": 1406,
												"src": "5996:22:5",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Bytes32Set_$1388_storage_ptr",
													"typeString": "struct EnumerableSet.Bytes32Set"
												},
												"typeName": {
													"id": 1391,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1390,
														"name": "Bytes32Set",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1388,
														"src": "5996:10:5"
													},
													"referencedDeclaration": 1388,
													"src": "5996:10:5",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Bytes32Set_$1388_storage_ptr",
														"typeString": "struct EnumerableSet.Bytes32Set"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1394,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "6028:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 1406,
												"src": "6020:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1393,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "6020:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5995:39:5"
									},
									"returnParameters": {
										"id": 1398,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1397,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1406,
												"src": "6053:4:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1396,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "6053:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6052:6:5"
									},
									"scope": 1782,
									"src": "5983:125:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1423,
										"nodeType": "Block",
										"src": "6363:52:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 1418,
																"name": "set",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1410,
																"src": "6389:3:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Bytes32Set_$1388_storage_ptr",
																	"typeString": "struct EnumerableSet.Bytes32Set storage pointer"
																}
															},
															"id": 1419,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "_inner",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1387,
															"src": "6389:10:5",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Set_$1194_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															}
														},
														{
															"id": 1420,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1412,
															"src": "6401:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_struct$_Set_$1194_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 1417,
														"name": "_remove",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1320,
														"src": "6381:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_struct$_Set_$1194_storage_ptr_$_t_bytes32_$returns$_t_bool_$",
															"typeString": "function (struct EnumerableSet.Set storage pointer,bytes32) returns (bool)"
														}
													},
													"id": 1421,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6381:26:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 1416,
												"id": 1422,
												"nodeType": "Return",
												"src": "6374:33:5"
											}
										]
									},
									"documentation": {
										"id": 1407,
										"nodeType": "StructuredDocumentation",
										"src": "6116:162:5",
										"text": " @dev Removes a value from a set. O(1).\n Returns true if the value was removed from the set, that is if it was\n present."
									},
									"id": 1424,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "remove",
									"nameLocation": "6293:6:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1413,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1410,
												"mutability": "mutable",
												"name": "set",
												"nameLocation": "6319:3:5",
												"nodeType": "VariableDeclaration",
												"scope": 1424,
												"src": "6300:22:5",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Bytes32Set_$1388_storage_ptr",
													"typeString": "struct EnumerableSet.Bytes32Set"
												},
												"typeName": {
													"id": 1409,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1408,
														"name": "Bytes32Set",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1388,
														"src": "6300:10:5"
													},
													"referencedDeclaration": 1388,
													"src": "6300:10:5",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Bytes32Set_$1388_storage_ptr",
														"typeString": "struct EnumerableSet.Bytes32Set"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1412,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "6332:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 1424,
												"src": "6324:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1411,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "6324:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6299:39:5"
									},
									"returnParameters": {
										"id": 1416,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1415,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1424,
												"src": "6357:4:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1414,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "6357:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6356:6:5"
									},
									"scope": 1782,
									"src": "6284:131:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1441,
										"nodeType": "Block",
										"src": "6587:54:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 1436,
																"name": "set",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1428,
																"src": "6615:3:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Bytes32Set_$1388_storage_ptr",
																	"typeString": "struct EnumerableSet.Bytes32Set storage pointer"
																}
															},
															"id": 1437,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "_inner",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1387,
															"src": "6615:10:5",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Set_$1194_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															}
														},
														{
															"id": 1438,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1430,
															"src": "6627:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_struct$_Set_$1194_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 1435,
														"name": "_contains",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1339,
														"src": "6605:9:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_struct$_Set_$1194_storage_ptr_$_t_bytes32_$returns$_t_bool_$",
															"typeString": "function (struct EnumerableSet.Set storage pointer,bytes32) view returns (bool)"
														}
													},
													"id": 1439,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6605:28:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 1434,
												"id": 1440,
												"nodeType": "Return",
												"src": "6598:35:5"
											}
										]
									},
									"documentation": {
										"id": 1425,
										"nodeType": "StructuredDocumentation",
										"src": "6423:72:5",
										"text": " @dev Returns true if the value is in the set. O(1)."
									},
									"id": 1442,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "contains",
									"nameLocation": "6510:8:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1431,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1428,
												"mutability": "mutable",
												"name": "set",
												"nameLocation": "6538:3:5",
												"nodeType": "VariableDeclaration",
												"scope": 1442,
												"src": "6519:22:5",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Bytes32Set_$1388_storage_ptr",
													"typeString": "struct EnumerableSet.Bytes32Set"
												},
												"typeName": {
													"id": 1427,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1426,
														"name": "Bytes32Set",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1388,
														"src": "6519:10:5"
													},
													"referencedDeclaration": 1388,
													"src": "6519:10:5",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Bytes32Set_$1388_storage_ptr",
														"typeString": "struct EnumerableSet.Bytes32Set"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1430,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "6551:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 1442,
												"src": "6543:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1429,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "6543:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6518:39:5"
									},
									"returnParameters": {
										"id": 1434,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1433,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1442,
												"src": "6581:4:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1432,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "6581:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6580:6:5"
									},
									"scope": 1782,
									"src": "6501:140:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1456,
										"nodeType": "Block",
										"src": "6799:45:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 1452,
																"name": "set",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1446,
																"src": "6825:3:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Bytes32Set_$1388_storage_ptr",
																	"typeString": "struct EnumerableSet.Bytes32Set storage pointer"
																}
															},
															"id": 1453,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "_inner",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1387,
															"src": "6825:10:5",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Set_$1194_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_struct$_Set_$1194_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															}
														],
														"id": 1451,
														"name": "_length",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1353,
														"src": "6817:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_struct$_Set_$1194_storage_ptr_$returns$_t_uint256_$",
															"typeString": "function (struct EnumerableSet.Set storage pointer) view returns (uint256)"
														}
													},
													"id": 1454,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6817:19:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1450,
												"id": 1455,
												"nodeType": "Return",
												"src": "6810:26:5"
											}
										]
									},
									"documentation": {
										"id": 1443,
										"nodeType": "StructuredDocumentation",
										"src": "6649:72:5",
										"text": " @dev Returns the number of values in the set. O(1)."
									},
									"id": 1457,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "length",
									"nameLocation": "6736:6:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1447,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1446,
												"mutability": "mutable",
												"name": "set",
												"nameLocation": "6762:3:5",
												"nodeType": "VariableDeclaration",
												"scope": 1457,
												"src": "6743:22:5",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Bytes32Set_$1388_storage_ptr",
													"typeString": "struct EnumerableSet.Bytes32Set"
												},
												"typeName": {
													"id": 1445,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1444,
														"name": "Bytes32Set",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1388,
														"src": "6743:10:5"
													},
													"referencedDeclaration": 1388,
													"src": "6743:10:5",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Bytes32Set_$1388_storage_ptr",
														"typeString": "struct EnumerableSet.Bytes32Set"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6742:24:5"
									},
									"returnParameters": {
										"id": 1450,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1449,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1457,
												"src": "6790:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1448,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6790:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6789:9:5"
									},
									"scope": 1782,
									"src": "6727:117:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1474,
										"nodeType": "Block",
										"src": "7281:48:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 1469,
																"name": "set",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1461,
																"src": "7303:3:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Bytes32Set_$1388_storage_ptr",
																	"typeString": "struct EnumerableSet.Bytes32Set storage pointer"
																}
															},
															"id": 1470,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "_inner",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1387,
															"src": "7303:10:5",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Set_$1194_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															}
														},
														{
															"id": 1471,
															"name": "index",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1463,
															"src": "7315:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_struct$_Set_$1194_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1468,
														"name": "_at",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1370,
														"src": "7299:3:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_struct$_Set_$1194_storage_ptr_$_t_uint256_$returns$_t_bytes32_$",
															"typeString": "function (struct EnumerableSet.Set storage pointer,uint256) view returns (bytes32)"
														}
													},
													"id": 1472,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7299:22:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"functionReturnParameters": 1467,
												"id": 1473,
												"nodeType": "Return",
												"src": "7292:29:5"
											}
										]
									},
									"documentation": {
										"id": 1458,
										"nodeType": "StructuredDocumentation",
										"src": "6852:340:5",
										"text": " @dev Returns the value stored at position `index` in the set. O(1).\n Note that there are no guarantees on the ordering of values inside the\n array, and it may change when more values are added or removed.\n Requirements:\n - `index` must be strictly less than {length}."
									},
									"id": 1475,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "at",
									"nameLocation": "7207:2:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1464,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1461,
												"mutability": "mutable",
												"name": "set",
												"nameLocation": "7229:3:5",
												"nodeType": "VariableDeclaration",
												"scope": 1475,
												"src": "7210:22:5",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Bytes32Set_$1388_storage_ptr",
													"typeString": "struct EnumerableSet.Bytes32Set"
												},
												"typeName": {
													"id": 1460,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1459,
														"name": "Bytes32Set",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1388,
														"src": "7210:10:5"
													},
													"referencedDeclaration": 1388,
													"src": "7210:10:5",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Bytes32Set_$1388_storage_ptr",
														"typeString": "struct EnumerableSet.Bytes32Set"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1463,
												"mutability": "mutable",
												"name": "index",
												"nameLocation": "7242:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 1475,
												"src": "7234:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1462,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7234:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7209:39:5"
									},
									"returnParameters": {
										"id": 1467,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1466,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1475,
												"src": "7272:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1465,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "7272:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7271:9:5"
									},
									"scope": 1782,
									"src": "7198:131:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1490,
										"nodeType": "Block",
										"src": "7960:45:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 1486,
																"name": "set",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1479,
																"src": "7986:3:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Bytes32Set_$1388_storage_ptr",
																	"typeString": "struct EnumerableSet.Bytes32Set storage pointer"
																}
															},
															"id": 1487,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "_inner",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1387,
															"src": "7986:10:5",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Set_$1194_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_struct$_Set_$1194_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															}
														],
														"id": 1485,
														"name": "_values",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1384,
														"src": "7978:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_struct$_Set_$1194_storage_ptr_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$",
															"typeString": "function (struct EnumerableSet.Set storage pointer) view returns (bytes32[] memory)"
														}
													},
													"id": 1488,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7978:19:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
														"typeString": "bytes32[] memory"
													}
												},
												"functionReturnParameters": 1484,
												"id": 1489,
												"nodeType": "Return",
												"src": "7971:26:5"
											}
										]
									},
									"documentation": {
										"id": 1476,
										"nodeType": "StructuredDocumentation",
										"src": "7337:536:5",
										"text": " @dev Return the entire set in an array\n WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n this function has an unbounded cost, and using it as part of a state-changing function may render the function\n uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block."
									},
									"id": 1491,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "values",
									"nameLocation": "7888:6:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1480,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1479,
												"mutability": "mutable",
												"name": "set",
												"nameLocation": "7914:3:5",
												"nodeType": "VariableDeclaration",
												"scope": 1491,
												"src": "7895:22:5",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Bytes32Set_$1388_storage_ptr",
													"typeString": "struct EnumerableSet.Bytes32Set"
												},
												"typeName": {
													"id": 1478,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1477,
														"name": "Bytes32Set",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1388,
														"src": "7895:10:5"
													},
													"referencedDeclaration": 1388,
													"src": "7895:10:5",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Bytes32Set_$1388_storage_ptr",
														"typeString": "struct EnumerableSet.Bytes32Set"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7894:24:5"
									},
									"returnParameters": {
										"id": 1484,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1483,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1491,
												"src": "7942:16:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 1481,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "7942:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 1482,
													"nodeType": "ArrayTypeName",
													"src": "7942:9:5",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7941:18:5"
									},
									"scope": 1782,
									"src": "7879:126:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"canonicalName": "EnumerableSet.AddressSet",
									"id": 1495,
									"members": [
										{
											"constant": false,
											"id": 1494,
											"mutability": "mutable",
											"name": "_inner",
											"nameLocation": "8067:6:5",
											"nodeType": "VariableDeclaration",
											"scope": 1495,
											"src": "8063:10:5",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_struct$_Set_$1194_storage_ptr",
												"typeString": "struct EnumerableSet.Set"
											},
											"typeName": {
												"id": 1493,
												"nodeType": "UserDefinedTypeName",
												"pathNode": {
													"id": 1492,
													"name": "Set",
													"nodeType": "IdentifierPath",
													"referencedDeclaration": 1194,
													"src": "8063:3:5"
												},
												"referencedDeclaration": 1194,
												"src": "8063:3:5",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Set_$1194_storage_ptr",
													"typeString": "struct EnumerableSet.Set"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "AddressSet",
									"nameLocation": "8041:10:5",
									"nodeType": "StructDefinition",
									"scope": 1782,
									"src": "8034:47:5",
									"visibility": "public"
								},
								{
									"body": {
										"id": 1521,
										"nodeType": "Block",
										"src": "8335:76:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 1507,
																"name": "set",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1499,
																"src": "8358:3:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_AddressSet_$1495_storage_ptr",
																	"typeString": "struct EnumerableSet.AddressSet storage pointer"
																}
															},
															"id": 1508,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "_inner",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1494,
															"src": "8358:10:5",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Set_$1194_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															}
														},
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"arguments": [
																				{
																					"id": 1515,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1501,
																					"src": "8394:5:5",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				],
																				"id": 1514,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "8386:7:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_uint160_$",
																					"typeString": "type(uint160)"
																				},
																				"typeName": {
																					"id": 1513,
																					"name": "uint160",
																					"nodeType": "ElementaryTypeName",
																					"src": "8386:7:5",
																					"typeDescriptions": {}
																				}
																			},
																			"id": 1516,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "typeConversion",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "8386:14:5",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint160",
																				"typeString": "uint160"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint160",
																				"typeString": "uint160"
																			}
																		],
																		"id": 1512,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "8378:7:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_uint256_$",
																			"typeString": "type(uint256)"
																		},
																		"typeName": {
																			"id": 1511,
																			"name": "uint256",
																			"nodeType": "ElementaryTypeName",
																			"src": "8378:7:5",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 1517,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "8378:23:5",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 1510,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "8370:7:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_bytes32_$",
																	"typeString": "type(bytes32)"
																},
																"typeName": {
																	"id": 1509,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "8370:7:5",
																	"typeDescriptions": {}
																}
															},
															"id": 1518,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8370:32:5",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_struct$_Set_$1194_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 1506,
														"name": "_add",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1236,
														"src": "8353:4:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_struct$_Set_$1194_storage_ptr_$_t_bytes32_$returns$_t_bool_$",
															"typeString": "function (struct EnumerableSet.Set storage pointer,bytes32) returns (bool)"
														}
													},
													"id": 1519,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8353:50:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 1505,
												"id": 1520,
												"nodeType": "Return",
												"src": "8346:57:5"
											}
										]
									},
									"documentation": {
										"id": 1496,
										"nodeType": "StructuredDocumentation",
										"src": "8089:164:5",
										"text": " @dev Add a value to a set. O(1).\n Returns true if the value was added to the set, that is if it was not\n already present."
									},
									"id": 1522,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "add",
									"nameLocation": "8268:3:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1502,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1499,
												"mutability": "mutable",
												"name": "set",
												"nameLocation": "8291:3:5",
												"nodeType": "VariableDeclaration",
												"scope": 1522,
												"src": "8272:22:5",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_AddressSet_$1495_storage_ptr",
													"typeString": "struct EnumerableSet.AddressSet"
												},
												"typeName": {
													"id": 1498,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1497,
														"name": "AddressSet",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1495,
														"src": "8272:10:5"
													},
													"referencedDeclaration": 1495,
													"src": "8272:10:5",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_AddressSet_$1495_storage_ptr",
														"typeString": "struct EnumerableSet.AddressSet"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1501,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "8304:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 1522,
												"src": "8296:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1500,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8296:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8271:39:5"
									},
									"returnParameters": {
										"id": 1505,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1504,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1522,
												"src": "8329:4:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1503,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "8329:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8328:6:5"
									},
									"scope": 1782,
									"src": "8259:152:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1548,
										"nodeType": "Block",
										"src": "8666:79:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 1534,
																"name": "set",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1526,
																"src": "8692:3:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_AddressSet_$1495_storage_ptr",
																	"typeString": "struct EnumerableSet.AddressSet storage pointer"
																}
															},
															"id": 1535,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "_inner",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1494,
															"src": "8692:10:5",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Set_$1194_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															}
														},
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"arguments": [
																				{
																					"id": 1542,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1528,
																					"src": "8728:5:5",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				],
																				"id": 1541,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "8720:7:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_uint160_$",
																					"typeString": "type(uint160)"
																				},
																				"typeName": {
																					"id": 1540,
																					"name": "uint160",
																					"nodeType": "ElementaryTypeName",
																					"src": "8720:7:5",
																					"typeDescriptions": {}
																				}
																			},
																			"id": 1543,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "typeConversion",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "8720:14:5",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint160",
																				"typeString": "uint160"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint160",
																				"typeString": "uint160"
																			}
																		],
																		"id": 1539,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "8712:7:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_uint256_$",
																			"typeString": "type(uint256)"
																		},
																		"typeName": {
																			"id": 1538,
																			"name": "uint256",
																			"nodeType": "ElementaryTypeName",
																			"src": "8712:7:5",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 1544,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "8712:23:5",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 1537,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "8704:7:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_bytes32_$",
																	"typeString": "type(bytes32)"
																},
																"typeName": {
																	"id": 1536,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "8704:7:5",
																	"typeDescriptions": {}
																}
															},
															"id": 1545,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8704:32:5",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_struct$_Set_$1194_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 1533,
														"name": "_remove",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1320,
														"src": "8684:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_struct$_Set_$1194_storage_ptr_$_t_bytes32_$returns$_t_bool_$",
															"typeString": "function (struct EnumerableSet.Set storage pointer,bytes32) returns (bool)"
														}
													},
													"id": 1546,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8684:53:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 1532,
												"id": 1547,
												"nodeType": "Return",
												"src": "8677:60:5"
											}
										]
									},
									"documentation": {
										"id": 1523,
										"nodeType": "StructuredDocumentation",
										"src": "8419:162:5",
										"text": " @dev Removes a value from a set. O(1).\n Returns true if the value was removed from the set, that is if it was\n present."
									},
									"id": 1549,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "remove",
									"nameLocation": "8596:6:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1529,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1526,
												"mutability": "mutable",
												"name": "set",
												"nameLocation": "8622:3:5",
												"nodeType": "VariableDeclaration",
												"scope": 1549,
												"src": "8603:22:5",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_AddressSet_$1495_storage_ptr",
													"typeString": "struct EnumerableSet.AddressSet"
												},
												"typeName": {
													"id": 1525,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1524,
														"name": "AddressSet",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1495,
														"src": "8603:10:5"
													},
													"referencedDeclaration": 1495,
													"src": "8603:10:5",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_AddressSet_$1495_storage_ptr",
														"typeString": "struct EnumerableSet.AddressSet"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1528,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "8635:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 1549,
												"src": "8627:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1527,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8627:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8602:39:5"
									},
									"returnParameters": {
										"id": 1532,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1531,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1549,
												"src": "8660:4:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1530,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "8660:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8659:6:5"
									},
									"scope": 1782,
									"src": "8587:158:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1575,
										"nodeType": "Block",
										"src": "8917:81:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 1561,
																"name": "set",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1553,
																"src": "8945:3:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_AddressSet_$1495_storage_ptr",
																	"typeString": "struct EnumerableSet.AddressSet storage pointer"
																}
															},
															"id": 1562,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "_inner",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1494,
															"src": "8945:10:5",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Set_$1194_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															}
														},
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"arguments": [
																				{
																					"id": 1569,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1555,
																					"src": "8981:5:5",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				],
																				"id": 1568,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "8973:7:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_uint160_$",
																					"typeString": "type(uint160)"
																				},
																				"typeName": {
																					"id": 1567,
																					"name": "uint160",
																					"nodeType": "ElementaryTypeName",
																					"src": "8973:7:5",
																					"typeDescriptions": {}
																				}
																			},
																			"id": 1570,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "typeConversion",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "8973:14:5",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint160",
																				"typeString": "uint160"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint160",
																				"typeString": "uint160"
																			}
																		],
																		"id": 1566,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "8965:7:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_uint256_$",
																			"typeString": "type(uint256)"
																		},
																		"typeName": {
																			"id": 1565,
																			"name": "uint256",
																			"nodeType": "ElementaryTypeName",
																			"src": "8965:7:5",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 1571,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "8965:23:5",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 1564,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "8957:7:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_bytes32_$",
																	"typeString": "type(bytes32)"
																},
																"typeName": {
																	"id": 1563,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "8957:7:5",
																	"typeDescriptions": {}
																}
															},
															"id": 1572,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8957:32:5",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_struct$_Set_$1194_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 1560,
														"name": "_contains",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1339,
														"src": "8935:9:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_struct$_Set_$1194_storage_ptr_$_t_bytes32_$returns$_t_bool_$",
															"typeString": "function (struct EnumerableSet.Set storage pointer,bytes32) view returns (bool)"
														}
													},
													"id": 1573,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8935:55:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 1559,
												"id": 1574,
												"nodeType": "Return",
												"src": "8928:62:5"
											}
										]
									},
									"documentation": {
										"id": 1550,
										"nodeType": "StructuredDocumentation",
										"src": "8753:72:5",
										"text": " @dev Returns true if the value is in the set. O(1)."
									},
									"id": 1576,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "contains",
									"nameLocation": "8840:8:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1556,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1553,
												"mutability": "mutable",
												"name": "set",
												"nameLocation": "8868:3:5",
												"nodeType": "VariableDeclaration",
												"scope": 1576,
												"src": "8849:22:5",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_AddressSet_$1495_storage_ptr",
													"typeString": "struct EnumerableSet.AddressSet"
												},
												"typeName": {
													"id": 1552,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1551,
														"name": "AddressSet",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1495,
														"src": "8849:10:5"
													},
													"referencedDeclaration": 1495,
													"src": "8849:10:5",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_AddressSet_$1495_storage_ptr",
														"typeString": "struct EnumerableSet.AddressSet"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1555,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "8881:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 1576,
												"src": "8873:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1554,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8873:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8848:39:5"
									},
									"returnParameters": {
										"id": 1559,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1558,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1576,
												"src": "8911:4:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1557,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "8911:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8910:6:5"
									},
									"scope": 1782,
									"src": "8831:167:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1590,
										"nodeType": "Block",
										"src": "9156:45:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 1586,
																"name": "set",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1580,
																"src": "9182:3:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_AddressSet_$1495_storage_ptr",
																	"typeString": "struct EnumerableSet.AddressSet storage pointer"
																}
															},
															"id": 1587,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "_inner",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1494,
															"src": "9182:10:5",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Set_$1194_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_struct$_Set_$1194_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															}
														],
														"id": 1585,
														"name": "_length",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1353,
														"src": "9174:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_struct$_Set_$1194_storage_ptr_$returns$_t_uint256_$",
															"typeString": "function (struct EnumerableSet.Set storage pointer) view returns (uint256)"
														}
													},
													"id": 1588,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9174:19:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1584,
												"id": 1589,
												"nodeType": "Return",
												"src": "9167:26:5"
											}
										]
									},
									"documentation": {
										"id": 1577,
										"nodeType": "StructuredDocumentation",
										"src": "9006:72:5",
										"text": " @dev Returns the number of values in the set. O(1)."
									},
									"id": 1591,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "length",
									"nameLocation": "9093:6:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1581,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1580,
												"mutability": "mutable",
												"name": "set",
												"nameLocation": "9119:3:5",
												"nodeType": "VariableDeclaration",
												"scope": 1591,
												"src": "9100:22:5",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_AddressSet_$1495_storage_ptr",
													"typeString": "struct EnumerableSet.AddressSet"
												},
												"typeName": {
													"id": 1579,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1578,
														"name": "AddressSet",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1495,
														"src": "9100:10:5"
													},
													"referencedDeclaration": 1495,
													"src": "9100:10:5",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_AddressSet_$1495_storage_ptr",
														"typeString": "struct EnumerableSet.AddressSet"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9099:24:5"
									},
									"returnParameters": {
										"id": 1584,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1583,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1591,
												"src": "9147:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1582,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9147:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9146:9:5"
									},
									"scope": 1782,
									"src": "9084:117:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1617,
										"nodeType": "Block",
										"src": "9638:75:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"arguments": [
																				{
																					"expression": {
																						"id": 1609,
																						"name": "set",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1595,
																						"src": "9684:3:5",
																						"typeDescriptions": {
																							"typeIdentifier": "t_struct$_AddressSet_$1495_storage_ptr",
																							"typeString": "struct EnumerableSet.AddressSet storage pointer"
																						}
																					},
																					"id": 1610,
																					"isConstant": false,
																					"isLValue": true,
																					"isPure": false,
																					"lValueRequested": false,
																					"memberName": "_inner",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 1494,
																					"src": "9684:10:5",
																					"typeDescriptions": {
																						"typeIdentifier": "t_struct$_Set_$1194_storage",
																						"typeString": "struct EnumerableSet.Set storage ref"
																					}
																				},
																				{
																					"id": 1611,
																					"name": "index",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1597,
																					"src": "9696:5:5",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_struct$_Set_$1194_storage",
																						"typeString": "struct EnumerableSet.Set storage ref"
																					},
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				],
																				"id": 1608,
																				"name": "_at",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1370,
																				"src": "9680:3:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_internal_view$_t_struct$_Set_$1194_storage_ptr_$_t_uint256_$returns$_t_bytes32_$",
																					"typeString": "function (struct EnumerableSet.Set storage pointer,uint256) view returns (bytes32)"
																				}
																			},
																			"id": 1612,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "9680:22:5",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		],
																		"id": 1607,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "9672:7:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_uint256_$",
																			"typeString": "type(uint256)"
																		},
																		"typeName": {
																			"id": 1606,
																			"name": "uint256",
																			"nodeType": "ElementaryTypeName",
																			"src": "9672:7:5",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 1613,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "9672:31:5",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 1605,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "9664:7:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_uint160_$",
																	"typeString": "type(uint160)"
																},
																"typeName": {
																	"id": 1604,
																	"name": "uint160",
																	"nodeType": "ElementaryTypeName",
																	"src": "9664:7:5",
																	"typeDescriptions": {}
																}
															},
															"id": 1614,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9664:40:5",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint160",
																"typeString": "uint160"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint160",
																"typeString": "uint160"
															}
														],
														"id": 1603,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "9656:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_address_$",
															"typeString": "type(address)"
														},
														"typeName": {
															"id": 1602,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "9656:7:5",
															"typeDescriptions": {}
														}
													},
													"id": 1615,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9656:49:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 1601,
												"id": 1616,
												"nodeType": "Return",
												"src": "9649:56:5"
											}
										]
									},
									"documentation": {
										"id": 1592,
										"nodeType": "StructuredDocumentation",
										"src": "9209:340:5",
										"text": " @dev Returns the value stored at position `index` in the set. O(1).\n Note that there are no guarantees on the ordering of values inside the\n array, and it may change when more values are added or removed.\n Requirements:\n - `index` must be strictly less than {length}."
									},
									"id": 1618,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "at",
									"nameLocation": "9564:2:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1598,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1595,
												"mutability": "mutable",
												"name": "set",
												"nameLocation": "9586:3:5",
												"nodeType": "VariableDeclaration",
												"scope": 1618,
												"src": "9567:22:5",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_AddressSet_$1495_storage_ptr",
													"typeString": "struct EnumerableSet.AddressSet"
												},
												"typeName": {
													"id": 1594,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1593,
														"name": "AddressSet",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1495,
														"src": "9567:10:5"
													},
													"referencedDeclaration": 1495,
													"src": "9567:10:5",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_AddressSet_$1495_storage_ptr",
														"typeString": "struct EnumerableSet.AddressSet"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1597,
												"mutability": "mutable",
												"name": "index",
												"nameLocation": "9599:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 1618,
												"src": "9591:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1596,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9591:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9566:39:5"
									},
									"returnParameters": {
										"id": 1601,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1600,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1618,
												"src": "9629:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1599,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9629:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9628:9:5"
									},
									"scope": 1782,
									"src": "9555:158:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1647,
										"nodeType": "Block",
										"src": "10344:229:5",
										"statements": [
											{
												"assignments": [
													1632
												],
												"declarations": [
													{
														"constant": false,
														"id": 1632,
														"mutability": "mutable",
														"name": "store",
														"nameLocation": "10372:5:5",
														"nodeType": "VariableDeclaration",
														"scope": 1647,
														"src": "10355:22:5",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
															"typeString": "bytes32[]"
														},
														"typeName": {
															"baseType": {
																"id": 1630,
																"name": "bytes32",
																"nodeType": "ElementaryTypeName",
																"src": "10355:7:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"id": 1631,
															"nodeType": "ArrayTypeName",
															"src": "10355:9:5",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
																"typeString": "bytes32[]"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1637,
												"initialValue": {
													"arguments": [
														{
															"expression": {
																"id": 1634,
																"name": "set",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1622,
																"src": "10388:3:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_AddressSet_$1495_storage_ptr",
																	"typeString": "struct EnumerableSet.AddressSet storage pointer"
																}
															},
															"id": 1635,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "_inner",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1494,
															"src": "10388:10:5",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Set_$1194_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_struct$_Set_$1194_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															}
														],
														"id": 1633,
														"name": "_values",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1384,
														"src": "10380:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_struct$_Set_$1194_storage_ptr_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$",
															"typeString": "function (struct EnumerableSet.Set storage pointer) view returns (bytes32[] memory)"
														}
													},
													"id": 1636,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10380:19:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
														"typeString": "bytes32[] memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "10355:44:5"
											},
											{
												"assignments": [
													1642
												],
												"declarations": [
													{
														"constant": false,
														"id": 1642,
														"mutability": "mutable",
														"name": "result",
														"nameLocation": "10427:6:5",
														"nodeType": "VariableDeclaration",
														"scope": 1647,
														"src": "10410:23:5",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
															"typeString": "address[]"
														},
														"typeName": {
															"baseType": {
																"id": 1640,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "10410:7:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 1641,
															"nodeType": "ArrayTypeName",
															"src": "10410:9:5",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
																"typeString": "address[]"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1643,
												"nodeType": "VariableDeclarationStatement",
												"src": "10410:23:5"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "10499:41:5",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "10514:15:5",
															"value": {
																"name": "store",
																"nodeType": "YulIdentifier",
																"src": "10524:5:5"
															},
															"variableNames": [
																{
																	"name": "result",
																	"nodeType": "YulIdentifier",
																	"src": "10514:6:5"
																}
															]
														}
													]
												},
												"documentation": "@solidity memory-safe-assembly",
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 1642,
														"isOffset": false,
														"isSlot": false,
														"src": "10514:6:5",
														"valueSize": 1
													},
													{
														"declaration": 1632,
														"isOffset": false,
														"isSlot": false,
														"src": "10524:5:5",
														"valueSize": 1
													}
												],
												"id": 1644,
												"nodeType": "InlineAssembly",
												"src": "10490:50:5"
											},
											{
												"expression": {
													"id": 1645,
													"name": "result",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1642,
													"src": "10559:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
														"typeString": "address[] memory"
													}
												},
												"functionReturnParameters": 1627,
												"id": 1646,
												"nodeType": "Return",
												"src": "10552:13:5"
											}
										]
									},
									"documentation": {
										"id": 1619,
										"nodeType": "StructuredDocumentation",
										"src": "9721:536:5",
										"text": " @dev Return the entire set in an array\n WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n this function has an unbounded cost, and using it as part of a state-changing function may render the function\n uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block."
									},
									"id": 1648,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "values",
									"nameLocation": "10272:6:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1623,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1622,
												"mutability": "mutable",
												"name": "set",
												"nameLocation": "10298:3:5",
												"nodeType": "VariableDeclaration",
												"scope": 1648,
												"src": "10279:22:5",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_AddressSet_$1495_storage_ptr",
													"typeString": "struct EnumerableSet.AddressSet"
												},
												"typeName": {
													"id": 1621,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1620,
														"name": "AddressSet",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1495,
														"src": "10279:10:5"
													},
													"referencedDeclaration": 1495,
													"src": "10279:10:5",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_AddressSet_$1495_storage_ptr",
														"typeString": "struct EnumerableSet.AddressSet"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10278:24:5"
									},
									"returnParameters": {
										"id": 1627,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1626,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1648,
												"src": "10326:16:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
													"typeString": "address[]"
												},
												"typeName": {
													"baseType": {
														"id": 1624,
														"name": "address",
														"nodeType": "ElementaryTypeName",
														"src": "10326:7:5",
														"stateMutability": "nonpayable",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"id": 1625,
													"nodeType": "ArrayTypeName",
													"src": "10326:9:5",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
														"typeString": "address[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10325:18:5"
									},
									"scope": 1782,
									"src": "10263:310:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"canonicalName": "EnumerableSet.UintSet",
									"id": 1652,
									"members": [
										{
											"constant": false,
											"id": 1651,
											"mutability": "mutable",
											"name": "_inner",
											"nameLocation": "10629:6:5",
											"nodeType": "VariableDeclaration",
											"scope": 1652,
											"src": "10625:10:5",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_struct$_Set_$1194_storage_ptr",
												"typeString": "struct EnumerableSet.Set"
											},
											"typeName": {
												"id": 1650,
												"nodeType": "UserDefinedTypeName",
												"pathNode": {
													"id": 1649,
													"name": "Set",
													"nodeType": "IdentifierPath",
													"referencedDeclaration": 1194,
													"src": "10625:3:5"
												},
												"referencedDeclaration": 1194,
												"src": "10625:3:5",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Set_$1194_storage_ptr",
													"typeString": "struct EnumerableSet.Set"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "UintSet",
									"nameLocation": "10606:7:5",
									"nodeType": "StructDefinition",
									"scope": 1782,
									"src": "10599:44:5",
									"visibility": "public"
								},
								{
									"body": {
										"id": 1672,
										"nodeType": "Block",
										"src": "10894:58:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 1664,
																"name": "set",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1656,
																"src": "10917:3:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_UintSet_$1652_storage_ptr",
																	"typeString": "struct EnumerableSet.UintSet storage pointer"
																}
															},
															"id": 1665,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "_inner",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1651,
															"src": "10917:10:5",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Set_$1194_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															}
														},
														{
															"arguments": [
																{
																	"id": 1668,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1658,
																	"src": "10937:5:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 1667,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "10929:7:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_bytes32_$",
																	"typeString": "type(bytes32)"
																},
																"typeName": {
																	"id": 1666,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "10929:7:5",
																	"typeDescriptions": {}
																}
															},
															"id": 1669,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "10929:14:5",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_struct$_Set_$1194_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 1663,
														"name": "_add",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1236,
														"src": "10912:4:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_struct$_Set_$1194_storage_ptr_$_t_bytes32_$returns$_t_bool_$",
															"typeString": "function (struct EnumerableSet.Set storage pointer,bytes32) returns (bool)"
														}
													},
													"id": 1670,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10912:32:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 1662,
												"id": 1671,
												"nodeType": "Return",
												"src": "10905:39:5"
											}
										]
									},
									"documentation": {
										"id": 1653,
										"nodeType": "StructuredDocumentation",
										"src": "10651:164:5",
										"text": " @dev Add a value to a set. O(1).\n Returns true if the value was added to the set, that is if it was not\n already present."
									},
									"id": 1673,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "add",
									"nameLocation": "10830:3:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1659,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1656,
												"mutability": "mutable",
												"name": "set",
												"nameLocation": "10850:3:5",
												"nodeType": "VariableDeclaration",
												"scope": 1673,
												"src": "10834:19:5",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_UintSet_$1652_storage_ptr",
													"typeString": "struct EnumerableSet.UintSet"
												},
												"typeName": {
													"id": 1655,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1654,
														"name": "UintSet",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1652,
														"src": "10834:7:5"
													},
													"referencedDeclaration": 1652,
													"src": "10834:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_UintSet_$1652_storage_ptr",
														"typeString": "struct EnumerableSet.UintSet"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1658,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "10863:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 1673,
												"src": "10855:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1657,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10855:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10833:36:5"
									},
									"returnParameters": {
										"id": 1662,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1661,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1673,
												"src": "10888:4:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1660,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "10888:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10887:6:5"
									},
									"scope": 1782,
									"src": "10821:131:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1693,
										"nodeType": "Block",
										"src": "11204:61:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 1685,
																"name": "set",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1677,
																"src": "11230:3:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_UintSet_$1652_storage_ptr",
																	"typeString": "struct EnumerableSet.UintSet storage pointer"
																}
															},
															"id": 1686,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "_inner",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1651,
															"src": "11230:10:5",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Set_$1194_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															}
														},
														{
															"arguments": [
																{
																	"id": 1689,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1679,
																	"src": "11250:5:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 1688,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "11242:7:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_bytes32_$",
																	"typeString": "type(bytes32)"
																},
																"typeName": {
																	"id": 1687,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "11242:7:5",
																	"typeDescriptions": {}
																}
															},
															"id": 1690,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "11242:14:5",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_struct$_Set_$1194_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 1684,
														"name": "_remove",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1320,
														"src": "11222:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_struct$_Set_$1194_storage_ptr_$_t_bytes32_$returns$_t_bool_$",
															"typeString": "function (struct EnumerableSet.Set storage pointer,bytes32) returns (bool)"
														}
													},
													"id": 1691,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "11222:35:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 1683,
												"id": 1692,
												"nodeType": "Return",
												"src": "11215:42:5"
											}
										]
									},
									"documentation": {
										"id": 1674,
										"nodeType": "StructuredDocumentation",
										"src": "10960:162:5",
										"text": " @dev Removes a value from a set. O(1).\n Returns true if the value was removed from the set, that is if it was\n present."
									},
									"id": 1694,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "remove",
									"nameLocation": "11137:6:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1680,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1677,
												"mutability": "mutable",
												"name": "set",
												"nameLocation": "11160:3:5",
												"nodeType": "VariableDeclaration",
												"scope": 1694,
												"src": "11144:19:5",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_UintSet_$1652_storage_ptr",
													"typeString": "struct EnumerableSet.UintSet"
												},
												"typeName": {
													"id": 1676,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1675,
														"name": "UintSet",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1652,
														"src": "11144:7:5"
													},
													"referencedDeclaration": 1652,
													"src": "11144:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_UintSet_$1652_storage_ptr",
														"typeString": "struct EnumerableSet.UintSet"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1679,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "11173:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 1694,
												"src": "11165:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1678,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11165:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11143:36:5"
									},
									"returnParameters": {
										"id": 1683,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1682,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1694,
												"src": "11198:4:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1681,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "11198:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11197:6:5"
									},
									"scope": 1782,
									"src": "11128:137:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1714,
										"nodeType": "Block",
										"src": "11434:63:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 1706,
																"name": "set",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1698,
																"src": "11462:3:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_UintSet_$1652_storage_ptr",
																	"typeString": "struct EnumerableSet.UintSet storage pointer"
																}
															},
															"id": 1707,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "_inner",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1651,
															"src": "11462:10:5",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Set_$1194_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															}
														},
														{
															"arguments": [
																{
																	"id": 1710,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1700,
																	"src": "11482:5:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 1709,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "11474:7:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_bytes32_$",
																	"typeString": "type(bytes32)"
																},
																"typeName": {
																	"id": 1708,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "11474:7:5",
																	"typeDescriptions": {}
																}
															},
															"id": 1711,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "11474:14:5",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_struct$_Set_$1194_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 1705,
														"name": "_contains",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1339,
														"src": "11452:9:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_struct$_Set_$1194_storage_ptr_$_t_bytes32_$returns$_t_bool_$",
															"typeString": "function (struct EnumerableSet.Set storage pointer,bytes32) view returns (bool)"
														}
													},
													"id": 1712,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "11452:37:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 1704,
												"id": 1713,
												"nodeType": "Return",
												"src": "11445:44:5"
											}
										]
									},
									"documentation": {
										"id": 1695,
										"nodeType": "StructuredDocumentation",
										"src": "11273:72:5",
										"text": " @dev Returns true if the value is in the set. O(1)."
									},
									"id": 1715,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "contains",
									"nameLocation": "11360:8:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1701,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1698,
												"mutability": "mutable",
												"name": "set",
												"nameLocation": "11385:3:5",
												"nodeType": "VariableDeclaration",
												"scope": 1715,
												"src": "11369:19:5",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_UintSet_$1652_storage_ptr",
													"typeString": "struct EnumerableSet.UintSet"
												},
												"typeName": {
													"id": 1697,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1696,
														"name": "UintSet",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1652,
														"src": "11369:7:5"
													},
													"referencedDeclaration": 1652,
													"src": "11369:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_UintSet_$1652_storage_ptr",
														"typeString": "struct EnumerableSet.UintSet"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1700,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "11398:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 1715,
												"src": "11390:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1699,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11390:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11368:36:5"
									},
									"returnParameters": {
										"id": 1704,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1703,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1715,
												"src": "11428:4:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1702,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "11428:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11427:6:5"
									},
									"scope": 1782,
									"src": "11351:146:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1729,
										"nodeType": "Block",
										"src": "11652:45:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 1725,
																"name": "set",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1719,
																"src": "11678:3:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_UintSet_$1652_storage_ptr",
																	"typeString": "struct EnumerableSet.UintSet storage pointer"
																}
															},
															"id": 1726,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "_inner",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1651,
															"src": "11678:10:5",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Set_$1194_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_struct$_Set_$1194_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															}
														],
														"id": 1724,
														"name": "_length",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1353,
														"src": "11670:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_struct$_Set_$1194_storage_ptr_$returns$_t_uint256_$",
															"typeString": "function (struct EnumerableSet.Set storage pointer) view returns (uint256)"
														}
													},
													"id": 1727,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "11670:19:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1723,
												"id": 1728,
												"nodeType": "Return",
												"src": "11663:26:5"
											}
										]
									},
									"documentation": {
										"id": 1716,
										"nodeType": "StructuredDocumentation",
										"src": "11505:72:5",
										"text": " @dev Returns the number of values on the set. O(1)."
									},
									"id": 1730,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "length",
									"nameLocation": "11592:6:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1720,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1719,
												"mutability": "mutable",
												"name": "set",
												"nameLocation": "11615:3:5",
												"nodeType": "VariableDeclaration",
												"scope": 1730,
												"src": "11599:19:5",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_UintSet_$1652_storage_ptr",
													"typeString": "struct EnumerableSet.UintSet"
												},
												"typeName": {
													"id": 1718,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1717,
														"name": "UintSet",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1652,
														"src": "11599:7:5"
													},
													"referencedDeclaration": 1652,
													"src": "11599:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_UintSet_$1652_storage_ptr",
														"typeString": "struct EnumerableSet.UintSet"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11598:21:5"
									},
									"returnParameters": {
										"id": 1723,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1722,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1730,
												"src": "11643:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1721,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11643:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11642:9:5"
									},
									"scope": 1782,
									"src": "11583:114:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1750,
										"nodeType": "Block",
										"src": "12131:57:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"expression": {
																		"id": 1744,
																		"name": "set",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1734,
																		"src": "12161:3:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_UintSet_$1652_storage_ptr",
																			"typeString": "struct EnumerableSet.UintSet storage pointer"
																		}
																	},
																	"id": 1745,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "_inner",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 1651,
																	"src": "12161:10:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Set_$1194_storage",
																		"typeString": "struct EnumerableSet.Set storage ref"
																	}
																},
																{
																	"id": 1746,
																	"name": "index",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1736,
																	"src": "12173:5:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_struct$_Set_$1194_storage",
																		"typeString": "struct EnumerableSet.Set storage ref"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 1743,
																"name": "_at",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1370,
																"src": "12157:3:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$_t_struct$_Set_$1194_storage_ptr_$_t_uint256_$returns$_t_bytes32_$",
																	"typeString": "function (struct EnumerableSet.Set storage pointer,uint256) view returns (bytes32)"
																}
															},
															"id": 1747,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "12157:22:5",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 1742,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "12149:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_uint256_$",
															"typeString": "type(uint256)"
														},
														"typeName": {
															"id": 1741,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "12149:7:5",
															"typeDescriptions": {}
														}
													},
													"id": 1748,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "12149:31:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1740,
												"id": 1749,
												"nodeType": "Return",
												"src": "12142:38:5"
											}
										]
									},
									"documentation": {
										"id": 1731,
										"nodeType": "StructuredDocumentation",
										"src": "11705:340:5",
										"text": " @dev Returns the value stored at position `index` in the set. O(1).\n Note that there are no guarantees on the ordering of values inside the\n array, and it may change when more values are added or removed.\n Requirements:\n - `index` must be strictly less than {length}."
									},
									"id": 1751,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "at",
									"nameLocation": "12060:2:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1737,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1734,
												"mutability": "mutable",
												"name": "set",
												"nameLocation": "12079:3:5",
												"nodeType": "VariableDeclaration",
												"scope": 1751,
												"src": "12063:19:5",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_UintSet_$1652_storage_ptr",
													"typeString": "struct EnumerableSet.UintSet"
												},
												"typeName": {
													"id": 1733,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1732,
														"name": "UintSet",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1652,
														"src": "12063:7:5"
													},
													"referencedDeclaration": 1652,
													"src": "12063:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_UintSet_$1652_storage_ptr",
														"typeString": "struct EnumerableSet.UintSet"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1736,
												"mutability": "mutable",
												"name": "index",
												"nameLocation": "12092:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 1751,
												"src": "12084:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1735,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12084:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12062:36:5"
									},
									"returnParameters": {
										"id": 1740,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1739,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1751,
												"src": "12122:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1738,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12122:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12121:9:5"
									},
									"scope": 1782,
									"src": "12051:137:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1780,
										"nodeType": "Block",
										"src": "12816:229:5",
										"statements": [
											{
												"assignments": [
													1765
												],
												"declarations": [
													{
														"constant": false,
														"id": 1765,
														"mutability": "mutable",
														"name": "store",
														"nameLocation": "12844:5:5",
														"nodeType": "VariableDeclaration",
														"scope": 1780,
														"src": "12827:22:5",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
															"typeString": "bytes32[]"
														},
														"typeName": {
															"baseType": {
																"id": 1763,
																"name": "bytes32",
																"nodeType": "ElementaryTypeName",
																"src": "12827:7:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"id": 1764,
															"nodeType": "ArrayTypeName",
															"src": "12827:9:5",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
																"typeString": "bytes32[]"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1770,
												"initialValue": {
													"arguments": [
														{
															"expression": {
																"id": 1767,
																"name": "set",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1755,
																"src": "12860:3:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_UintSet_$1652_storage_ptr",
																	"typeString": "struct EnumerableSet.UintSet storage pointer"
																}
															},
															"id": 1768,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "_inner",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1651,
															"src": "12860:10:5",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Set_$1194_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_struct$_Set_$1194_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															}
														],
														"id": 1766,
														"name": "_values",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1384,
														"src": "12852:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_struct$_Set_$1194_storage_ptr_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$",
															"typeString": "function (struct EnumerableSet.Set storage pointer) view returns (bytes32[] memory)"
														}
													},
													"id": 1769,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "12852:19:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
														"typeString": "bytes32[] memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "12827:44:5"
											},
											{
												"assignments": [
													1775
												],
												"declarations": [
													{
														"constant": false,
														"id": 1775,
														"mutability": "mutable",
														"name": "result",
														"nameLocation": "12899:6:5",
														"nodeType": "VariableDeclaration",
														"scope": 1780,
														"src": "12882:23:5",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
															"typeString": "uint256[]"
														},
														"typeName": {
															"baseType": {
																"id": 1773,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "12882:7:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1774,
															"nodeType": "ArrayTypeName",
															"src": "12882:9:5",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
																"typeString": "uint256[]"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1776,
												"nodeType": "VariableDeclarationStatement",
												"src": "12882:23:5"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "12971:41:5",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "12986:15:5",
															"value": {
																"name": "store",
																"nodeType": "YulIdentifier",
																"src": "12996:5:5"
															},
															"variableNames": [
																{
																	"name": "result",
																	"nodeType": "YulIdentifier",
																	"src": "12986:6:5"
																}
															]
														}
													]
												},
												"documentation": "@solidity memory-safe-assembly",
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 1775,
														"isOffset": false,
														"isSlot": false,
														"src": "12986:6:5",
														"valueSize": 1
													},
													{
														"declaration": 1765,
														"isOffset": false,
														"isSlot": false,
														"src": "12996:5:5",
														"valueSize": 1
													}
												],
												"id": 1777,
												"nodeType": "InlineAssembly",
												"src": "12962:50:5"
											},
											{
												"expression": {
													"id": 1778,
													"name": "result",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1775,
													"src": "13031:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
														"typeString": "uint256[] memory"
													}
												},
												"functionReturnParameters": 1760,
												"id": 1779,
												"nodeType": "Return",
												"src": "13024:13:5"
											}
										]
									},
									"documentation": {
										"id": 1752,
										"nodeType": "StructuredDocumentation",
										"src": "12196:536:5",
										"text": " @dev Return the entire set in an array\n WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n this function has an unbounded cost, and using it as part of a state-changing function may render the function\n uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block."
									},
									"id": 1781,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "values",
									"nameLocation": "12747:6:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1756,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1755,
												"mutability": "mutable",
												"name": "set",
												"nameLocation": "12770:3:5",
												"nodeType": "VariableDeclaration",
												"scope": 1781,
												"src": "12754:19:5",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_UintSet_$1652_storage_ptr",
													"typeString": "struct EnumerableSet.UintSet"
												},
												"typeName": {
													"id": 1754,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1753,
														"name": "UintSet",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1652,
														"src": "12754:7:5"
													},
													"referencedDeclaration": 1652,
													"src": "12754:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_UintSet_$1652_storage_ptr",
														"typeString": "struct EnumerableSet.UintSet"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12753:21:5"
									},
									"returnParameters": {
										"id": 1760,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1759,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1781,
												"src": "12798:16:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
													"typeString": "uint256[]"
												},
												"typeName": {
													"baseType": {
														"id": 1757,
														"name": "uint256",
														"nodeType": "ElementaryTypeName",
														"src": "12798:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1758,
													"nodeType": "ArrayTypeName",
													"src": "12798:9:5",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
														"typeString": "uint256[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12797:18:5"
									},
									"scope": 1782,
									"src": "12738:307:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 1783,
							"src": "1265:11783:5",
							"usedErrors": []
						}
					],
					"src": "118:12930:5"
				},
				"id": 5
			},
			"Utils/Ownable.sol": {
				"ast": {
					"absolutePath": "Utils/Ownable.sol",
					"exportedSymbols": {
						"Context": [
							1183
						],
						"Ownable": [
							1887
						]
					},
					"id": 1888,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1784,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "90:23:6"
						},
						{
							"absolutePath": "Utils/Context.sol",
							"file": "./Context.sol",
							"id": 1785,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1888,
							"sourceUnit": 1184,
							"src": "117:23:6",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 1787,
										"name": "Context",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1183,
										"src": "680:7:6"
									},
									"id": 1788,
									"nodeType": "InheritanceSpecifier",
									"src": "680:7:6"
								}
							],
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 1786,
								"nodeType": "StructuredDocumentation",
								"src": "144:505:6",
								"text": " @dev Contract module which provides a basic access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n By default, the owner account will be the one that deploys the contract. This\n can later be changed with {transferOwnership}.\n This module is used through inheritance. It will make available the modifier\n `onlyOwner`, which can be applied to your functions to restrict their use to\n the owner."
							},
							"fullyImplemented": true,
							"id": 1887,
							"linearizedBaseContracts": [
								1887,
								1183
							],
							"name": "Ownable",
							"nameLocation": "669:7:6",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 1790,
									"mutability": "mutable",
									"name": "_owner",
									"nameLocation": "711:6:6",
									"nodeType": "VariableDeclaration",
									"scope": 1887,
									"src": "695:22:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 1789,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "695:7:6",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "private"
								},
								{
									"anonymous": false,
									"id": 1796,
									"name": "OwnershipTransferred",
									"nameLocation": "732:20:6",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1795,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1792,
												"indexed": true,
												"mutability": "mutable",
												"name": "previousOwner",
												"nameLocation": "769:13:6",
												"nodeType": "VariableDeclaration",
												"scope": 1796,
												"src": "753:29:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1791,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "753:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1794,
												"indexed": true,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "800:8:6",
												"nodeType": "VariableDeclaration",
												"scope": 1796,
												"src": "784:24:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1793,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "784:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "752:57:6"
									},
									"src": "726:84:6"
								},
								{
									"body": {
										"id": 1805,
										"nodeType": "Block",
										"src": "931:51:6",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 1801,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1173,
																"src": "961:10:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 1802,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "961:12:6",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 1800,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1886,
														"src": "942:18:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 1803,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "942:32:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1804,
												"nodeType": "ExpressionStatement",
												"src": "942:32:6"
											}
										]
									},
									"documentation": {
										"id": 1797,
										"nodeType": "StructuredDocumentation",
										"src": "818:93:6",
										"text": " @dev Initializes the contract setting the deployer as the initial owner."
									},
									"id": 1806,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1798,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "928:2:6"
									},
									"returnParameters": {
										"id": 1799,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "931:0:6"
									},
									"scope": 1887,
									"src": "917:65:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1814,
										"nodeType": "Block",
										"src": "1118:32:6",
										"statements": [
											{
												"expression": {
													"id": 1812,
													"name": "_owner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1790,
													"src": "1136:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 1811,
												"id": 1813,
												"nodeType": "Return",
												"src": "1129:13:6"
											}
										]
									},
									"documentation": {
										"id": 1807,
										"nodeType": "StructuredDocumentation",
										"src": "990:67:6",
										"text": " @dev Returns the address of the current owner."
									},
									"functionSelector": "8da5cb5b",
									"id": 1815,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "owner",
									"nameLocation": "1072:5:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1808,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1077:2:6"
									},
									"returnParameters": {
										"id": 1811,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1810,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1815,
												"src": "1109:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1809,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1109:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1108:9:6"
									},
									"scope": 1887,
									"src": "1063:87:6",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1828,
										"nodeType": "Block",
										"src": "1264:99:6",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 1823,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 1819,
																	"name": "owner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1815,
																	"src": "1283:5:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																		"typeString": "function () view returns (address)"
																	}
																},
																"id": 1820,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1283:7:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 1821,
																	"name": "_msgSender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1173,
																	"src": "1294:10:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																		"typeString": "function () view returns (address)"
																	}
																},
																"id": 1822,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1294:12:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "1283:23:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572",
															"id": 1824,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1308:34:6",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe",
																"typeString": "literal_string \"Ownable: caller is not the owner\""
															},
															"value": "Ownable: caller is not the owner"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe",
																"typeString": "literal_string \"Ownable: caller is not the owner\""
															}
														],
														"id": 1818,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1275:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1825,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1275:68:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1826,
												"nodeType": "ExpressionStatement",
												"src": "1275:68:6"
											},
											{
												"id": 1827,
												"nodeType": "PlaceholderStatement",
												"src": "1354:1:6"
											}
										]
									},
									"documentation": {
										"id": 1816,
										"nodeType": "StructuredDocumentation",
										"src": "1158:79:6",
										"text": " @dev Throws if called by any account other than the owner."
									},
									"id": 1829,
									"name": "onlyOwner",
									"nameLocation": "1252:9:6",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 1817,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1261:2:6"
									},
									"src": "1243:120:6",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1842,
										"nodeType": "Block",
										"src": "1768:49:6",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 1838,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1806:1:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 1837,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "1798:7:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1836,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "1798:7:6",
																	"typeDescriptions": {}
																}
															},
															"id": 1839,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1798:10:6",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 1835,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1886,
														"src": "1779:18:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 1840,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1779:30:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1841,
												"nodeType": "ExpressionStatement",
												"src": "1779:30:6"
											}
										]
									},
									"documentation": {
										"id": 1830,
										"nodeType": "StructuredDocumentation",
										"src": "1371:337:6",
										"text": " @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions anymore. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby removing any functionality that is only available to the owner."
									},
									"functionSelector": "715018a6",
									"id": 1843,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1833,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1832,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 1829,
												"src": "1758:9:6"
											},
											"nodeType": "ModifierInvocation",
											"src": "1758:9:6"
										}
									],
									"name": "renounceOwnership",
									"nameLocation": "1723:17:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1831,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1740:2:6"
									},
									"returnParameters": {
										"id": 1834,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1768:0:6"
									},
									"scope": 1887,
									"src": "1714:103:6",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1865,
										"nodeType": "Block",
										"src": "2042:131:6",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 1857,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1852,
																"name": "newOwner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1846,
																"src": "2061:8:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 1855,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2081:1:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 1854,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "2073:7:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 1853,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "2073:7:6",
																		"typeDescriptions": {}
																	}
																},
																"id": 1856,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2073:10:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "2061:22:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373",
															"id": 1858,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2085:40:6",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe",
																"typeString": "literal_string \"Ownable: new owner is the zero address\""
															},
															"value": "Ownable: new owner is the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe",
																"typeString": "literal_string \"Ownable: new owner is the zero address\""
															}
														],
														"id": 1851,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2053:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1859,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2053:73:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1860,
												"nodeType": "ExpressionStatement",
												"src": "2053:73:6"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1862,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1846,
															"src": "2156:8:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 1861,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1886,
														"src": "2137:18:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 1863,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2137:28:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1864,
												"nodeType": "ExpressionStatement",
												"src": "2137:28:6"
											}
										]
									},
									"documentation": {
										"id": 1844,
										"nodeType": "StructuredDocumentation",
										"src": "1825:141:6",
										"text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."
									},
									"functionSelector": "f2fde38b",
									"id": 1866,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1849,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1848,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 1829,
												"src": "2032:9:6"
											},
											"nodeType": "ModifierInvocation",
											"src": "2032:9:6"
										}
									],
									"name": "transferOwnership",
									"nameLocation": "1981:17:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1847,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1846,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "2007:8:6",
												"nodeType": "VariableDeclaration",
												"scope": 1866,
												"src": "1999:16:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1845,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1999:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1998:18:6"
									},
									"returnParameters": {
										"id": 1850,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2042:0:6"
									},
									"scope": 1887,
									"src": "1972:201:6",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1885,
										"nodeType": "Block",
										"src": "2396:128:6",
										"statements": [
											{
												"assignments": [
													1873
												],
												"declarations": [
													{
														"constant": false,
														"id": 1873,
														"mutability": "mutable",
														"name": "oldOwner",
														"nameLocation": "2415:8:6",
														"nodeType": "VariableDeclaration",
														"scope": 1885,
														"src": "2407:16:6",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 1872,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "2407:7:6",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1875,
												"initialValue": {
													"id": 1874,
													"name": "_owner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1790,
													"src": "2426:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2407:25:6"
											},
											{
												"expression": {
													"id": 1878,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1876,
														"name": "_owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1790,
														"src": "2443:6:6",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1877,
														"name": "newOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1869,
														"src": "2452:8:6",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "2443:17:6",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 1879,
												"nodeType": "ExpressionStatement",
												"src": "2443:17:6"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 1881,
															"name": "oldOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1873,
															"src": "2497:8:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1882,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1869,
															"src": "2507:8:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 1880,
														"name": "OwnershipTransferred",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1796,
														"src": "2476:20:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
															"typeString": "function (address,address)"
														}
													},
													"id": 1883,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2476:40:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1884,
												"nodeType": "EmitStatement",
												"src": "2471:45:6"
											}
										]
									},
									"documentation": {
										"id": 1867,
										"nodeType": "StructuredDocumentation",
										"src": "2181:146:6",
										"text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Internal function without access restriction."
									},
									"id": 1886,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_transferOwnership",
									"nameLocation": "2342:18:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1870,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1869,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "2369:8:6",
												"nodeType": "VariableDeclaration",
												"scope": 1886,
												"src": "2361:16:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1868,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2361:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2360:18:6"
									},
									"returnParameters": {
										"id": 1871,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2396:0:6"
									},
									"scope": 1887,
									"src": "2333:191:6",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 1888,
							"src": "651:1876:6",
							"usedErrors": []
						}
					],
					"src": "90:2437:6"
				},
				"id": 6
			},
			"Utils/ReentrancyGuard.sol": {
				"ast": {
					"absolutePath": "Utils/ReentrancyGuard.sol",
					"exportedSymbols": {
						"ReentrancyGuard": [
							1927
						]
					},
					"id": 1928,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1889,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "100:23:7"
						},
						{
							"abstract": true,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 1890,
								"nodeType": "StructuredDocumentation",
								"src": "127:765:7",
								"text": " @dev Contract module that helps prevent reentrant calls to a function.\n Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n available, which can be applied to functions to make sure there are no nested\n (reentrant) calls to them.\n Note that because there is a single `nonReentrant` guard, functions marked as\n `nonReentrant` may not call one another. This can be worked around by making\n those functions `private`, and then adding `external` `nonReentrant` entry\n points to them.\n TIP: If you would like to learn more about reentrancy and alternative ways\n to protect against it, check out our blog post\n https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul]."
							},
							"fullyImplemented": true,
							"id": 1927,
							"linearizedBaseContracts": [
								1927
							],
							"name": "ReentrancyGuard",
							"nameLocation": "912:15:7",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": true,
									"id": 1893,
									"mutability": "constant",
									"name": "_NOT_ENTERED",
									"nameLocation": "1719:12:7",
									"nodeType": "VariableDeclaration",
									"scope": 1927,
									"src": "1694:41:7",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 1891,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1694:7:7",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "31",
										"id": 1892,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "1734:1:7",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_1_by_1",
											"typeString": "int_const 1"
										},
										"value": "1"
									},
									"visibility": "private"
								},
								{
									"constant": true,
									"id": 1896,
									"mutability": "constant",
									"name": "_ENTERED",
									"nameLocation": "1767:8:7",
									"nodeType": "VariableDeclaration",
									"scope": 1927,
									"src": "1742:37:7",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 1894,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1742:7:7",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "32",
										"id": 1895,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "1778:1:7",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_2_by_1",
											"typeString": "int_const 2"
										},
										"value": "2"
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 1898,
									"mutability": "mutable",
									"name": "_status",
									"nameLocation": "1804:7:7",
									"nodeType": "VariableDeclaration",
									"scope": 1927,
									"src": "1788:23:7",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 1897,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1788:7:7",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 1905,
										"nodeType": "Block",
										"src": "1834:41:7",
										"statements": [
											{
												"expression": {
													"id": 1903,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1901,
														"name": "_status",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1898,
														"src": "1845:7:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1902,
														"name": "_NOT_ENTERED",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1893,
														"src": "1855:12:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1845:22:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1904,
												"nodeType": "ExpressionStatement",
												"src": "1845:22:7"
											}
										]
									},
									"id": 1906,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1899,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1831:2:7"
									},
									"returnParameters": {
										"id": 1900,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1834:0:7"
									},
									"scope": 1927,
									"src": "1820:55:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1925,
										"nodeType": "Block",
										"src": "2285:433:7",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1912,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1910,
																"name": "_status",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1898,
																"src": "2376:7:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"id": 1911,
																"name": "_ENTERED",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1896,
																"src": "2387:8:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2376:19:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "5265656e7472616e637947756172643a207265656e7472616e742063616c6c",
															"id": 1913,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2397:33:7",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619",
																"typeString": "literal_string \"ReentrancyGuard: reentrant call\""
															},
															"value": "ReentrancyGuard: reentrant call"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619",
																"typeString": "literal_string \"ReentrancyGuard: reentrant call\""
															}
														],
														"id": 1909,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2368:7:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1914,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2368:63:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1915,
												"nodeType": "ExpressionStatement",
												"src": "2368:63:7"
											},
											{
												"expression": {
													"id": 1918,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1916,
														"name": "_status",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1898,
														"src": "2509:7:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1917,
														"name": "_ENTERED",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1896,
														"src": "2519:8:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2509:18:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1919,
												"nodeType": "ExpressionStatement",
												"src": "2509:18:7"
											},
											{
												"id": 1920,
												"nodeType": "PlaceholderStatement",
												"src": "2540:1:7"
											},
											{
												"expression": {
													"id": 1923,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1921,
														"name": "_status",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1898,
														"src": "2688:7:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1922,
														"name": "_NOT_ENTERED",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1893,
														"src": "2698:12:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2688:22:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1924,
												"nodeType": "ExpressionStatement",
												"src": "2688:22:7"
											}
										]
									},
									"documentation": {
										"id": 1907,
										"nodeType": "StructuredDocumentation",
										"src": "1883:372:7",
										"text": " @dev Prevents a contract from calling itself, directly or indirectly.\n Calling a `nonReentrant` function from another `nonReentrant`\n function is not supported. It is possible to prevent this from happening\n by making the `nonReentrant` function external, and making it call a\n `private` function that does the actual work."
									},
									"id": 1926,
									"name": "nonReentrant",
									"nameLocation": "2270:12:7",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 1908,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2282:2:7"
									},
									"src": "2261:457:7",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 1928,
							"src": "894:1827:7",
							"usedErrors": []
						}
					],
					"src": "100:2621:7"
				},
				"id": 7
			},
			"Utils/SafeMath.sol": {
				"ast": {
					"absolutePath": "Utils/SafeMath.sol",
					"exportedSymbols": {
						"SafeMath": [
							2239
						]
					},
					"id": 2240,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1929,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "110:23:8"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 1930,
								"nodeType": "StructuredDocumentation",
								"src": "294:201:8",
								"text": " @dev Wrappers over Solidity's arithmetic operations.\n NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n now has built in overflow checking."
							},
							"fullyImplemented": true,
							"id": 2239,
							"linearizedBaseContracts": [
								2239
							],
							"name": "SafeMath",
							"nameLocation": "505:8:8",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 1961,
										"nodeType": "Block",
										"src": "738:146:8",
										"statements": [
											{
												"id": 1960,
												"nodeType": "UncheckedBlock",
												"src": "749:128:8",
												"statements": [
													{
														"assignments": [
															1943
														],
														"declarations": [
															{
																"constant": false,
																"id": 1943,
																"mutability": "mutable",
																"name": "c",
																"nameLocation": "782:1:8",
																"nodeType": "VariableDeclaration",
																"scope": 1960,
																"src": "774:9:8",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 1942,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "774:7:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 1947,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1946,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1944,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1933,
																"src": "786:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"id": 1945,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1935,
																"src": "790:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "786:5:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "774:17:8"
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1950,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1948,
																"name": "c",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1943,
																"src": "810:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<",
															"rightExpression": {
																"id": 1949,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1933,
																"src": "814:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "810:5:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 1955,
														"nodeType": "IfStatement",
														"src": "806:28:8",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "66616c7365",
																		"id": 1951,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "825:5:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "false"
																	},
																	{
																		"hexValue": "30",
																		"id": 1952,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "832:1:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 1953,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "824:10:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 1941,
															"id": 1954,
															"nodeType": "Return",
															"src": "817:17:8"
														}
													},
													{
														"expression": {
															"components": [
																{
																	"hexValue": "74727565",
																	"id": 1956,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "857:4:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																{
																	"id": 1957,
																	"name": "c",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1943,
																	"src": "863:1:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 1958,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "856:9:8",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
																"typeString": "tuple(bool,uint256)"
															}
														},
														"functionReturnParameters": 1941,
														"id": 1959,
														"nodeType": "Return",
														"src": "849:16:8"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 1931,
										"nodeType": "StructuredDocumentation",
										"src": "521:135:8",
										"text": " @dev Returns the addition of two unsigned integers, with an overflow flag.\n _Available since v3.4._"
									},
									"id": 1962,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryAdd",
									"nameLocation": "671:6:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1936,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1933,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "686:1:8",
												"nodeType": "VariableDeclaration",
												"scope": 1962,
												"src": "678:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1932,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "678:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1935,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "697:1:8",
												"nodeType": "VariableDeclaration",
												"scope": 1962,
												"src": "689:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1934,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "689:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "677:22:8"
									},
									"returnParameters": {
										"id": 1941,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1938,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1962,
												"src": "723:4:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1937,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "723:4:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1940,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1962,
												"src": "729:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1939,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "729:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "722:15:8"
									},
									"scope": 2239,
									"src": "662:222:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1989,
										"nodeType": "Block",
										"src": "1112:118:8",
										"statements": [
											{
												"id": 1988,
												"nodeType": "UncheckedBlock",
												"src": "1123:100:8",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1976,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1974,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1967,
																"src": "1152:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"id": 1975,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1965,
																"src": "1156:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1152:5:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 1981,
														"nodeType": "IfStatement",
														"src": "1148:28:8",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "66616c7365",
																		"id": 1977,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1167:5:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "false"
																	},
																	{
																		"hexValue": "30",
																		"id": 1978,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1174:1:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 1979,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1166:10:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 1973,
															"id": 1980,
															"nodeType": "Return",
															"src": "1159:17:8"
														}
													},
													{
														"expression": {
															"components": [
																{
																	"hexValue": "74727565",
																	"id": 1982,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1199:4:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1985,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 1983,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1965,
																		"src": "1205:1:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "-",
																	"rightExpression": {
																		"id": 1984,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1967,
																		"src": "1209:1:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "1205:5:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 1986,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "1198:13:8",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
																"typeString": "tuple(bool,uint256)"
															}
														},
														"functionReturnParameters": 1973,
														"id": 1987,
														"nodeType": "Return",
														"src": "1191:20:8"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 1963,
										"nodeType": "StructuredDocumentation",
										"src": "892:138:8",
										"text": " @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n _Available since v3.4._"
									},
									"id": 1990,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "trySub",
									"nameLocation": "1045:6:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1968,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1965,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "1060:1:8",
												"nodeType": "VariableDeclaration",
												"scope": 1990,
												"src": "1052:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1964,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1052:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1967,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "1071:1:8",
												"nodeType": "VariableDeclaration",
												"scope": 1990,
												"src": "1063:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1966,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1063:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1051:22:8"
									},
									"returnParameters": {
										"id": 1973,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1970,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1990,
												"src": "1097:4:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1969,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1097:4:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1972,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1990,
												"src": "1103:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1971,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1103:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1096:15:8"
									},
									"scope": 2239,
									"src": "1036:194:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2031,
										"nodeType": "Block",
										"src": "1461:427:8",
										"statements": [
											{
												"id": 2030,
												"nodeType": "UncheckedBlock",
												"src": "1472:409:8",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2004,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2002,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1993,
																"src": "1734:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "30",
																"id": 2003,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1739:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "1734:6:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2009,
														"nodeType": "IfStatement",
														"src": "1730:28:8",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "74727565",
																		"id": 2005,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1750:4:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "true"
																	},
																	{
																		"hexValue": "30",
																		"id": 2006,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1756:1:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 2007,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1749:9:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 2001,
															"id": 2008,
															"nodeType": "Return",
															"src": "1742:16:8"
														}
													},
													{
														"assignments": [
															2011
														],
														"declarations": [
															{
																"constant": false,
																"id": 2011,
																"mutability": "mutable",
																"name": "c",
																"nameLocation": "1781:1:8",
																"nodeType": "VariableDeclaration",
																"scope": 2030,
																"src": "1773:9:8",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 2010,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "1773:7:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2015,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2014,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2012,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1993,
																"src": "1785:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "*",
															"rightExpression": {
																"id": 2013,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1995,
																"src": "1789:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1785:5:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "1773:17:8"
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2020,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2018,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2016,
																	"name": "c",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2011,
																	"src": "1809:1:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "/",
																"rightExpression": {
																	"id": 2017,
																	"name": "a",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1993,
																	"src": "1813:1:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "1809:5:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"id": 2019,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1995,
																"src": "1818:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1809:10:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2025,
														"nodeType": "IfStatement",
														"src": "1805:33:8",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "66616c7365",
																		"id": 2021,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1829:5:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "false"
																	},
																	{
																		"hexValue": "30",
																		"id": 2022,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1836:1:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 2023,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1828:10:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 2001,
															"id": 2024,
															"nodeType": "Return",
															"src": "1821:17:8"
														}
													},
													{
														"expression": {
															"components": [
																{
																	"hexValue": "74727565",
																	"id": 2026,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1861:4:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																{
																	"id": 2027,
																	"name": "c",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2011,
																	"src": "1867:1:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 2028,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "1860:9:8",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
																"typeString": "tuple(bool,uint256)"
															}
														},
														"functionReturnParameters": 2001,
														"id": 2029,
														"nodeType": "Return",
														"src": "1853:16:8"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 1991,
										"nodeType": "StructuredDocumentation",
										"src": "1238:141:8",
										"text": " @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n _Available since v3.4._"
									},
									"id": 2032,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryMul",
									"nameLocation": "1394:6:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1996,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1993,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "1409:1:8",
												"nodeType": "VariableDeclaration",
												"scope": 2032,
												"src": "1401:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1992,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1401:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1995,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "1420:1:8",
												"nodeType": "VariableDeclaration",
												"scope": 2032,
												"src": "1412:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1994,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1412:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1400:22:8"
									},
									"returnParameters": {
										"id": 2001,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1998,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2032,
												"src": "1446:4:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1997,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1446:4:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2000,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2032,
												"src": "1452:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1999,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1452:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1445:15:8"
									},
									"scope": 2239,
									"src": "1385:503:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2059,
										"nodeType": "Block",
										"src": "2120:119:8",
										"statements": [
											{
												"id": 2058,
												"nodeType": "UncheckedBlock",
												"src": "2131:101:8",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2046,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2044,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2037,
																"src": "2160:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "30",
																"id": 2045,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2165:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "2160:6:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2051,
														"nodeType": "IfStatement",
														"src": "2156:29:8",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "66616c7365",
																		"id": 2047,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2176:5:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "false"
																	},
																	{
																		"hexValue": "30",
																		"id": 2048,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2183:1:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 2049,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2175:10:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 2043,
															"id": 2050,
															"nodeType": "Return",
															"src": "2168:17:8"
														}
													},
													{
														"expression": {
															"components": [
																{
																	"hexValue": "74727565",
																	"id": 2052,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2208:4:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2055,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2053,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2035,
																		"src": "2214:1:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "/",
																	"rightExpression": {
																		"id": 2054,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2037,
																		"src": "2218:1:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "2214:5:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 2056,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "2207:13:8",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
																"typeString": "tuple(bool,uint256)"
															}
														},
														"functionReturnParameters": 2043,
														"id": 2057,
														"nodeType": "Return",
														"src": "2200:20:8"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2033,
										"nodeType": "StructuredDocumentation",
										"src": "1896:142:8",
										"text": " @dev Returns the division of two unsigned integers, with a division by zero flag.\n _Available since v3.4._"
									},
									"id": 2060,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryDiv",
									"nameLocation": "2053:6:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2038,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2035,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "2068:1:8",
												"nodeType": "VariableDeclaration",
												"scope": 2060,
												"src": "2060:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2034,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2060:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2037,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "2079:1:8",
												"nodeType": "VariableDeclaration",
												"scope": 2060,
												"src": "2071:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2036,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2071:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2059:22:8"
									},
									"returnParameters": {
										"id": 2043,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2040,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2060,
												"src": "2105:4:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2039,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2105:4:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2042,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2060,
												"src": "2111:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2041,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2111:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2104:15:8"
									},
									"scope": 2239,
									"src": "2044:195:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2087,
										"nodeType": "Block",
										"src": "2481:119:8",
										"statements": [
											{
												"id": 2086,
												"nodeType": "UncheckedBlock",
												"src": "2492:101:8",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2074,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2072,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2065,
																"src": "2521:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "30",
																"id": 2073,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2526:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "2521:6:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2079,
														"nodeType": "IfStatement",
														"src": "2517:29:8",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "66616c7365",
																		"id": 2075,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2537:5:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "false"
																	},
																	{
																		"hexValue": "30",
																		"id": 2076,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2544:1:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 2077,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2536:10:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 2071,
															"id": 2078,
															"nodeType": "Return",
															"src": "2529:17:8"
														}
													},
													{
														"expression": {
															"components": [
																{
																	"hexValue": "74727565",
																	"id": 2080,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2569:4:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2083,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2081,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2063,
																		"src": "2575:1:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "%",
																	"rightExpression": {
																		"id": 2082,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2065,
																		"src": "2579:1:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "2575:5:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 2084,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "2568:13:8",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
																"typeString": "tuple(bool,uint256)"
															}
														},
														"functionReturnParameters": 2071,
														"id": 2085,
														"nodeType": "Return",
														"src": "2561:20:8"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2061,
										"nodeType": "StructuredDocumentation",
										"src": "2247:152:8",
										"text": " @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n _Available since v3.4._"
									},
									"id": 2088,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryMod",
									"nameLocation": "2414:6:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2066,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2063,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "2429:1:8",
												"nodeType": "VariableDeclaration",
												"scope": 2088,
												"src": "2421:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2062,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2421:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2065,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "2440:1:8",
												"nodeType": "VariableDeclaration",
												"scope": 2088,
												"src": "2432:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2064,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2432:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2420:22:8"
									},
									"returnParameters": {
										"id": 2071,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2068,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2088,
												"src": "2466:4:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2067,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2466:4:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2070,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2088,
												"src": "2472:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2069,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2472:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2465:15:8"
									},
									"scope": 2239,
									"src": "2405:195:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2102,
										"nodeType": "Block",
										"src": "2914:31:8",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2100,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2098,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2091,
														"src": "2932:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"id": 2099,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2093,
														"src": "2936:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2932:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2097,
												"id": 2101,
												"nodeType": "Return",
												"src": "2925:12:8"
											}
										]
									},
									"documentation": {
										"id": 2089,
										"nodeType": "StructuredDocumentation",
										"src": "2608:233:8",
										"text": " @dev Returns the addition of two unsigned integers, reverting on\n overflow.\n Counterpart to Solidity's `+` operator.\n Requirements:\n - Addition cannot overflow."
									},
									"id": 2103,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "add",
									"nameLocation": "2856:3:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2094,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2091,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "2868:1:8",
												"nodeType": "VariableDeclaration",
												"scope": 2103,
												"src": "2860:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2090,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2860:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2093,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "2879:1:8",
												"nodeType": "VariableDeclaration",
												"scope": 2103,
												"src": "2871:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2092,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2871:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2859:22:8"
									},
									"returnParameters": {
										"id": 2097,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2096,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2103,
												"src": "2905:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2095,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2905:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2904:9:8"
									},
									"scope": 2239,
									"src": "2847:98:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2117,
										"nodeType": "Block",
										"src": "3295:31:8",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2115,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2113,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2106,
														"src": "3313:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "-",
													"rightExpression": {
														"id": 2114,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2108,
														"src": "3317:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3313:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2112,
												"id": 2116,
												"nodeType": "Return",
												"src": "3306:12:8"
											}
										]
									},
									"documentation": {
										"id": 2104,
										"nodeType": "StructuredDocumentation",
										"src": "2953:269:8",
										"text": " @dev Returns the subtraction of two unsigned integers, reverting on\n overflow (when the result is negative).\n Counterpart to Solidity's `-` operator.\n Requirements:\n - Subtraction cannot overflow."
									},
									"id": 2118,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sub",
									"nameLocation": "3237:3:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2109,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2106,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "3249:1:8",
												"nodeType": "VariableDeclaration",
												"scope": 2118,
												"src": "3241:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2105,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3241:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2108,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "3260:1:8",
												"nodeType": "VariableDeclaration",
												"scope": 2118,
												"src": "3252:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2107,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3252:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3240:22:8"
									},
									"returnParameters": {
										"id": 2112,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2111,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2118,
												"src": "3286:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2110,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3286:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3285:9:8"
									},
									"scope": 2239,
									"src": "3228:98:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2132,
										"nodeType": "Block",
										"src": "3652:31:8",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2130,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2128,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2121,
														"src": "3670:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "*",
													"rightExpression": {
														"id": 2129,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2123,
														"src": "3674:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3670:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2127,
												"id": 2131,
												"nodeType": "Return",
												"src": "3663:12:8"
											}
										]
									},
									"documentation": {
										"id": 2119,
										"nodeType": "StructuredDocumentation",
										"src": "3334:245:8",
										"text": " @dev Returns the multiplication of two unsigned integers, reverting on\n overflow.\n Counterpart to Solidity's `*` operator.\n Requirements:\n - Multiplication cannot overflow."
									},
									"id": 2133,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mul",
									"nameLocation": "3594:3:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2124,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2121,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "3606:1:8",
												"nodeType": "VariableDeclaration",
												"scope": 2133,
												"src": "3598:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2120,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3598:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2123,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "3617:1:8",
												"nodeType": "VariableDeclaration",
												"scope": 2133,
												"src": "3609:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2122,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3609:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3597:22:8"
									},
									"returnParameters": {
										"id": 2127,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2126,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2133,
												"src": "3643:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2125,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3643:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3642:9:8"
									},
									"scope": 2239,
									"src": "3585:98:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2147,
										"nodeType": "Block",
										"src": "4051:31:8",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2145,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2143,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2136,
														"src": "4069:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "/",
													"rightExpression": {
														"id": 2144,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2138,
														"src": "4073:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "4069:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2142,
												"id": 2146,
												"nodeType": "Return",
												"src": "4062:12:8"
											}
										]
									},
									"documentation": {
										"id": 2134,
										"nodeType": "StructuredDocumentation",
										"src": "3691:287:8",
										"text": " @dev Returns the integer division of two unsigned integers, reverting on\n division by zero. The result is rounded towards zero.\n Counterpart to Solidity's `/` operator.\n Requirements:\n - The divisor cannot be zero."
									},
									"id": 2148,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "div",
									"nameLocation": "3993:3:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2139,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2136,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "4005:1:8",
												"nodeType": "VariableDeclaration",
												"scope": 2148,
												"src": "3997:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2135,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3997:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2138,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "4016:1:8",
												"nodeType": "VariableDeclaration",
												"scope": 2148,
												"src": "4008:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2137,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4008:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3996:22:8"
									},
									"returnParameters": {
										"id": 2142,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2141,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2148,
												"src": "4042:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2140,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4042:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4041:9:8"
									},
									"scope": 2239,
									"src": "3984:98:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2162,
										"nodeType": "Block",
										"src": "4616:31:8",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2160,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2158,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2151,
														"src": "4634:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "%",
													"rightExpression": {
														"id": 2159,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2153,
														"src": "4638:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "4634:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2157,
												"id": 2161,
												"nodeType": "Return",
												"src": "4627:12:8"
											}
										]
									},
									"documentation": {
										"id": 2149,
										"nodeType": "StructuredDocumentation",
										"src": "4090:453:8",
										"text": " @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n reverting when dividing by zero.\n Counterpart to Solidity's `%` operator. This function uses a `revert`\n opcode (which leaves remaining gas untouched) while Solidity uses an\n invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."
									},
									"id": 2163,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mod",
									"nameLocation": "4558:3:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2154,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2151,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "4570:1:8",
												"nodeType": "VariableDeclaration",
												"scope": 2163,
												"src": "4562:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2150,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4562:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2153,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "4581:1:8",
												"nodeType": "VariableDeclaration",
												"scope": 2163,
												"src": "4573:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2152,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4573:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4561:22:8"
									},
									"returnParameters": {
										"id": 2157,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2156,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2163,
												"src": "4607:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2155,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4607:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4606:9:8"
									},
									"scope": 2239,
									"src": "4549:98:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2187,
										"nodeType": "Block",
										"src": "5255:111:8",
										"statements": [
											{
												"id": 2186,
												"nodeType": "UncheckedBlock",
												"src": "5266:93:8",
												"statements": [
													{
														"expression": {
															"arguments": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2178,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2176,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2168,
																		"src": "5299:1:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "<=",
																	"rightExpression": {
																		"id": 2177,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2166,
																		"src": "5304:1:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "5299:6:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																{
																	"id": 2179,
																	"name": "errorMessage",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2170,
																	"src": "5307:12:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	{
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																],
																"id": 2175,
																"name": "require",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	4294967278,
																	4294967278
																],
																"referencedDeclaration": 4294967278,
																"src": "5291:7:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																	"typeString": "function (bool,string memory) pure"
																}
															},
															"id": 2180,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5291:29:8",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$__$",
																"typeString": "tuple()"
															}
														},
														"id": 2181,
														"nodeType": "ExpressionStatement",
														"src": "5291:29:8"
													},
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2184,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2182,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2166,
																"src": "5342:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "-",
															"rightExpression": {
																"id": 2183,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2168,
																"src": "5346:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5342:5:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 2174,
														"id": 2185,
														"nodeType": "Return",
														"src": "5335:12:8"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2164,
										"nodeType": "StructuredDocumentation",
										"src": "4655:465:8",
										"text": " @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n overflow (when the result is negative).\n CAUTION: This function is deprecated because it requires allocating memory for the error\n message unnecessarily. For custom revert reasons use {trySub}.\n Counterpart to Solidity's `-` operator.\n Requirements:\n - Subtraction cannot overflow."
									},
									"id": 2188,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sub",
									"nameLocation": "5135:3:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2171,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2166,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "5157:1:8",
												"nodeType": "VariableDeclaration",
												"scope": 2188,
												"src": "5149:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2165,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5149:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2168,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "5177:1:8",
												"nodeType": "VariableDeclaration",
												"scope": 2188,
												"src": "5169:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2167,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5169:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2170,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "5203:12:8",
												"nodeType": "VariableDeclaration",
												"scope": 2188,
												"src": "5189:26:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 2169,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "5189:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5138:84:8"
									},
									"returnParameters": {
										"id": 2174,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2173,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2188,
												"src": "5246:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2172,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5246:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5245:9:8"
									},
									"scope": 2239,
									"src": "5126:240:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2212,
										"nodeType": "Block",
										"src": "5993:110:8",
										"statements": [
											{
												"id": 2211,
												"nodeType": "UncheckedBlock",
												"src": "6004:92:8",
												"statements": [
													{
														"expression": {
															"arguments": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2203,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2201,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2193,
																		"src": "6037:1:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": ">",
																	"rightExpression": {
																		"hexValue": "30",
																		"id": 2202,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "6041:1:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	},
																	"src": "6037:5:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																{
																	"id": 2204,
																	"name": "errorMessage",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2195,
																	"src": "6044:12:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	{
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																],
																"id": 2200,
																"name": "require",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	4294967278,
																	4294967278
																],
																"referencedDeclaration": 4294967278,
																"src": "6029:7:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																	"typeString": "function (bool,string memory) pure"
																}
															},
															"id": 2205,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "6029:28:8",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$__$",
																"typeString": "tuple()"
															}
														},
														"id": 2206,
														"nodeType": "ExpressionStatement",
														"src": "6029:28:8"
													},
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2209,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2207,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2191,
																"src": "6079:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "/",
															"rightExpression": {
																"id": 2208,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2193,
																"src": "6083:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "6079:5:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 2199,
														"id": 2210,
														"nodeType": "Return",
														"src": "6072:12:8"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2189,
										"nodeType": "StructuredDocumentation",
										"src": "5374:484:8",
										"text": " @dev Returns the integer division of two unsigned integers, reverting with custom message on\n division by zero. The result is rounded towards zero.\n Counterpart to Solidity's `/` operator. Note: this function uses a\n `revert` opcode (which leaves remaining gas untouched) while Solidity\n uses an invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."
									},
									"id": 2213,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "div",
									"nameLocation": "5873:3:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2196,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2191,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "5895:1:8",
												"nodeType": "VariableDeclaration",
												"scope": 2213,
												"src": "5887:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2190,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5887:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2193,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "5915:1:8",
												"nodeType": "VariableDeclaration",
												"scope": 2213,
												"src": "5907:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2192,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5907:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2195,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "5941:12:8",
												"nodeType": "VariableDeclaration",
												"scope": 2213,
												"src": "5927:26:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 2194,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "5927:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5876:84:8"
									},
									"returnParameters": {
										"id": 2199,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2198,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2213,
												"src": "5984:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2197,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5984:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5983:9:8"
									},
									"scope": 2239,
									"src": "5864:239:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2237,
										"nodeType": "Block",
										"src": "6895:110:8",
										"statements": [
											{
												"id": 2236,
												"nodeType": "UncheckedBlock",
												"src": "6906:92:8",
												"statements": [
													{
														"expression": {
															"arguments": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2228,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2226,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2218,
																		"src": "6939:1:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": ">",
																	"rightExpression": {
																		"hexValue": "30",
																		"id": 2227,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "6943:1:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	},
																	"src": "6939:5:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																{
																	"id": 2229,
																	"name": "errorMessage",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2220,
																	"src": "6946:12:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	{
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																],
																"id": 2225,
																"name": "require",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	4294967278,
																	4294967278
																],
																"referencedDeclaration": 4294967278,
																"src": "6931:7:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																	"typeString": "function (bool,string memory) pure"
																}
															},
															"id": 2230,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "6931:28:8",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$__$",
																"typeString": "tuple()"
															}
														},
														"id": 2231,
														"nodeType": "ExpressionStatement",
														"src": "6931:28:8"
													},
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2234,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2232,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2216,
																"src": "6981:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "%",
															"rightExpression": {
																"id": 2233,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2218,
																"src": "6985:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "6981:5:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 2224,
														"id": 2235,
														"nodeType": "Return",
														"src": "6974:12:8"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2214,
										"nodeType": "StructuredDocumentation",
										"src": "6111:649:8",
										"text": " @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n reverting with custom message when dividing by zero.\n CAUTION: This function is deprecated because it requires allocating memory for the error\n message unnecessarily. For custom revert reasons use {tryMod}.\n Counterpart to Solidity's `%` operator. This function uses a `revert`\n opcode (which leaves remaining gas untouched) while Solidity uses an\n invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."
									},
									"id": 2238,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mod",
									"nameLocation": "6775:3:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2221,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2216,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "6797:1:8",
												"nodeType": "VariableDeclaration",
												"scope": 2238,
												"src": "6789:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2215,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6789:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2218,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "6817:1:8",
												"nodeType": "VariableDeclaration",
												"scope": 2238,
												"src": "6809:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2217,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6809:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2220,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "6843:12:8",
												"nodeType": "VariableDeclaration",
												"scope": 2238,
												"src": "6829:26:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 2219,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "6829:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6778:84:8"
									},
									"returnParameters": {
										"id": 2224,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2223,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2238,
												"src": "6886:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2222,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6886:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6885:9:8"
									},
									"scope": 2239,
									"src": "6766:239:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 2240,
							"src": "497:6511:8",
							"usedErrors": []
						}
					],
					"src": "110:6898:8"
				},
				"id": 8
			},
			"Utils/TransferHelper.sol": {
				"ast": {
					"absolutePath": "Utils/TransferHelper.sol",
					"exportedSymbols": {
						"TransferHelper": [
							2388
						]
					},
					"id": 2389,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2241,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "35:23:9"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 2242,
								"nodeType": "StructuredDocumentation",
								"src": "62:180:9",
								"text": "helper methods for interacting with ERC20 tokens that do not consistently return true/false\nwith the addition of a transfer function to send eth or an erc20 token"
							},
							"fullyImplemented": true,
							"id": 2388,
							"linearizedBaseContracts": [
								2388
							],
							"name": "TransferHelper",
							"nameLocation": "252:14:9",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 2284,
										"nodeType": "Block",
										"src": "380:284:9",
										"statements": [
											{
												"assignments": [
													2252,
													2254
												],
												"declarations": [
													{
														"constant": false,
														"id": 2252,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "397:7:9",
														"nodeType": "VariableDeclaration",
														"scope": 2284,
														"src": "392:12:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 2251,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "392:4:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 2254,
														"mutability": "mutable",
														"name": "data",
														"nameLocation": "419:4:9",
														"nodeType": "VariableDeclaration",
														"scope": 2284,
														"src": "406:17:9",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 2253,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "406:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2264,
												"initialValue": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30783039356561376233",
																	"id": 2259,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "475:10:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_157198259_by_1",
																		"typeString": "int_const 157198259"
																	},
																	"value": "0x095ea7b3"
																},
																{
																	"id": 2260,
																	"name": "to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2246,
																	"src": "487:2:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 2261,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2248,
																	"src": "491:5:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_157198259_by_1",
																		"typeString": "int_const 157198259"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 2257,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "452:3:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 2258,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"src": "452:22:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 2262,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "452:45:9",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"id": 2255,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2244,
															"src": "427:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 2256,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "call",
														"nodeType": "MemberAccess",
														"src": "427:10:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 2263,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "427:81:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "391:117:9"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 2280,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2266,
																"name": "success",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2252,
																"src": "541:7:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "&&",
															"rightExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"id": 2278,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 2270,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"expression": {
																					"id": 2267,
																					"name": "data",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2254,
																					"src": "553:4:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bytes_memory_ptr",
																						"typeString": "bytes memory"
																					}
																				},
																				"id": 2268,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "length",
																				"nodeType": "MemberAccess",
																				"src": "553:11:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "==",
																			"rightExpression": {
																				"hexValue": "30",
																				"id": 2269,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "568:1:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			},
																			"src": "553:16:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "||",
																		"rightExpression": {
																			"arguments": [
																				{
																					"id": 2273,
																					"name": "data",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2254,
																					"src": "584:4:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bytes_memory_ptr",
																						"typeString": "bytes memory"
																					}
																				},
																				{
																					"components": [
																						{
																							"id": 2275,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"lValueRequested": false,
																							"nodeType": "ElementaryTypeNameExpression",
																							"src": "591:4:9",
																							"typeDescriptions": {
																								"typeIdentifier": "t_type$_t_bool_$",
																								"typeString": "type(bool)"
																							},
																							"typeName": {
																								"id": 2274,
																								"name": "bool",
																								"nodeType": "ElementaryTypeName",
																								"src": "591:4:9",
																								"typeDescriptions": {}
																							}
																						}
																					],
																					"id": 2276,
																					"isConstant": false,
																					"isInlineArray": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"nodeType": "TupleExpression",
																					"src": "590:6:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_bool_$",
																						"typeString": "type(bool)"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_bytes_memory_ptr",
																						"typeString": "bytes memory"
																					},
																					{
																						"typeIdentifier": "t_type$_t_bool_$",
																						"typeString": "type(bool)"
																					}
																				],
																				"expression": {
																					"id": 2271,
																					"name": "abi",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 4294967295,
																					"src": "573:3:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_magic_abi",
																						"typeString": "abi"
																					}
																				},
																				"id": 2272,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"memberName": "decode",
																				"nodeType": "MemberAccess",
																				"src": "573:10:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_abidecode_pure$__$returns$__$",
																					"typeString": "function () pure"
																				}
																			},
																			"id": 2277,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "573:24:9",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"src": "553:44:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	}
																],
																"id": 2279,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "552:46:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "541:57:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "5472616e7366657248656c7065723a20415050524f56455f4641494c4544",
															"id": 2281,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "613:32:9",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_3e27be550bb5367a6d8a8b2dd8b5c52ee0710d2d5b26de50062207957ab5bd00",
																"typeString": "literal_string \"TransferHelper: APPROVE_FAILED\""
															},
															"value": "TransferHelper: APPROVE_FAILED"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_3e27be550bb5367a6d8a8b2dd8b5c52ee0710d2d5b26de50062207957ab5bd00",
																"typeString": "literal_string \"TransferHelper: APPROVE_FAILED\""
															}
														],
														"id": 2265,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "519:7:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 2282,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "519:137:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2283,
												"nodeType": "ExpressionStatement",
												"src": "519:137:9"
											}
										]
									},
									"id": 2285,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeApprove",
									"nameLocation": "283:11:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2249,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2244,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "313:5:9",
												"nodeType": "VariableDeclaration",
												"scope": 2285,
												"src": "305:13:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2243,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "305:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2246,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "337:2:9",
												"nodeType": "VariableDeclaration",
												"scope": 2285,
												"src": "329:10:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2245,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "329:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2248,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "358:5:9",
												"nodeType": "VariableDeclaration",
												"scope": 2285,
												"src": "350:13:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2247,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "350:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "294:76:9"
									},
									"returnParameters": {
										"id": 2250,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "380:0:9"
									},
									"scope": 2388,
									"src": "274:390:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2330,
										"nodeType": "Block",
										"src": "1246:296:9",
										"statements": [
											{
												"assignments": [
													2297,
													2299
												],
												"declarations": [
													{
														"constant": false,
														"id": 2297,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "1263:7:9",
														"nodeType": "VariableDeclaration",
														"scope": 2330,
														"src": "1258:12:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 2296,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "1258:4:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 2299,
														"mutability": "mutable",
														"name": "data",
														"nameLocation": "1285:4:9",
														"nodeType": "VariableDeclaration",
														"scope": 2330,
														"src": "1272:17:9",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 2298,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "1272:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2310,
												"initialValue": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30783233623837326464",
																	"id": 2304,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1341:10:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_599290589_by_1",
																		"typeString": "int_const 599290589"
																	},
																	"value": "0x23b872dd"
																},
																{
																	"id": 2305,
																	"name": "from",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2289,
																	"src": "1353:4:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 2306,
																	"name": "to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2291,
																	"src": "1359:2:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 2307,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2293,
																	"src": "1363:5:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_599290589_by_1",
																		"typeString": "int_const 599290589"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 2302,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "1318:3:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 2303,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"src": "1318:22:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 2308,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1318:51:9",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"id": 2300,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2287,
															"src": "1293:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 2301,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "call",
														"nodeType": "MemberAccess",
														"src": "1293:10:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 2309,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1293:87:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1257:123:9"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 2326,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2312,
																"name": "success",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2297,
																"src": "1413:7:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "&&",
															"rightExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"id": 2324,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 2316,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"expression": {
																					"id": 2313,
																					"name": "data",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2299,
																					"src": "1425:4:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bytes_memory_ptr",
																						"typeString": "bytes memory"
																					}
																				},
																				"id": 2314,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "length",
																				"nodeType": "MemberAccess",
																				"src": "1425:11:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "==",
																			"rightExpression": {
																				"hexValue": "30",
																				"id": 2315,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "1440:1:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			},
																			"src": "1425:16:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "||",
																		"rightExpression": {
																			"arguments": [
																				{
																					"id": 2319,
																					"name": "data",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2299,
																					"src": "1456:4:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bytes_memory_ptr",
																						"typeString": "bytes memory"
																					}
																				},
																				{
																					"components": [
																						{
																							"id": 2321,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"lValueRequested": false,
																							"nodeType": "ElementaryTypeNameExpression",
																							"src": "1463:4:9",
																							"typeDescriptions": {
																								"typeIdentifier": "t_type$_t_bool_$",
																								"typeString": "type(bool)"
																							},
																							"typeName": {
																								"id": 2320,
																								"name": "bool",
																								"nodeType": "ElementaryTypeName",
																								"src": "1463:4:9",
																								"typeDescriptions": {}
																							}
																						}
																					],
																					"id": 2322,
																					"isConstant": false,
																					"isInlineArray": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"nodeType": "TupleExpression",
																					"src": "1462:6:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_bool_$",
																						"typeString": "type(bool)"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_bytes_memory_ptr",
																						"typeString": "bytes memory"
																					},
																					{
																						"typeIdentifier": "t_type$_t_bool_$",
																						"typeString": "type(bool)"
																					}
																				],
																				"expression": {
																					"id": 2317,
																					"name": "abi",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 4294967295,
																					"src": "1445:3:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_magic_abi",
																						"typeString": "abi"
																					}
																				},
																				"id": 2318,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"memberName": "decode",
																				"nodeType": "MemberAccess",
																				"src": "1445:10:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_abidecode_pure$__$returns$__$",
																					"typeString": "function () pure"
																				}
																			},
																			"id": 2323,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "1445:24:9",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"src": "1425:44:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	}
																],
																"id": 2325,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1424:46:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "1413:57:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "5472616e7366657248656c7065723a205452414e534645525f46524f4d5f4641494c4544",
															"id": 2327,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1485:38:9",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_eb2904bf3c0c9ae693b53eb0188a703c388998a9c405b7965ca678cef9a51d18",
																"typeString": "literal_string \"TransferHelper: TRANSFER_FROM_FAILED\""
															},
															"value": "TransferHelper: TRANSFER_FROM_FAILED"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_eb2904bf3c0c9ae693b53eb0188a703c388998a9c405b7965ca678cef9a51d18",
																"typeString": "literal_string \"TransferHelper: TRANSFER_FROM_FAILED\""
															}
														],
														"id": 2311,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1391:7:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 2328,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1391:143:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2329,
												"nodeType": "ExpressionStatement",
												"src": "1391:143:9"
											}
										]
									},
									"id": 2331,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferFrom",
									"nameLocation": "1121:16:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2294,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2287,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "1156:5:9",
												"nodeType": "VariableDeclaration",
												"scope": 2331,
												"src": "1148:13:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2286,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1148:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2289,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "1180:4:9",
												"nodeType": "VariableDeclaration",
												"scope": 2331,
												"src": "1172:12:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2288,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1172:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2291,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1203:2:9",
												"nodeType": "VariableDeclaration",
												"scope": 2331,
												"src": "1195:10:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2290,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1195:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2293,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1224:5:9",
												"nodeType": "VariableDeclaration",
												"scope": 2331,
												"src": "1216:13:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2292,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1216:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1137:99:9"
									},
									"returnParameters": {
										"id": 2295,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1246:0:9"
									},
									"scope": 2388,
									"src": "1112:430:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2386,
										"nodeType": "Block",
										"src": "1733:400:9",
										"statements": [
											{
												"condition": {
													"id": 2343,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "!",
													"prefix": true,
													"src": "1748:8:9",
													"subExpression": {
														"id": 2342,
														"name": "isERC20",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2339,
														"src": "1749:7:9",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 2384,
													"nodeType": "Block",
													"src": "1809:317:9",
													"statements": [
														{
															"assignments": [
																2352,
																2354
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 2352,
																	"mutability": "mutable",
																	"name": "success",
																	"nameLocation": "1830:7:9",
																	"nodeType": "VariableDeclaration",
																	"scope": 2384,
																	"src": "1825:12:9",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"typeName": {
																		"id": 2351,
																		"name": "bool",
																		"nodeType": "ElementaryTypeName",
																		"src": "1825:4:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"visibility": "internal"
																},
																{
																	"constant": false,
																	"id": 2354,
																	"mutability": "mutable",
																	"name": "data",
																	"nameLocation": "1852:4:9",
																	"nodeType": "VariableDeclaration",
																	"scope": 2384,
																	"src": "1839:17:9",
																	"stateVariable": false,
																	"storageLocation": "memory",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes"
																	},
																	"typeName": {
																		"id": 2353,
																		"name": "bytes",
																		"nodeType": "ElementaryTypeName",
																		"src": "1839:5:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_storage_ptr",
																			"typeString": "bytes"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 2364,
															"initialValue": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30786139303539636262",
																				"id": 2359,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "1912:10:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_2835717307_by_1",
																					"typeString": "int_const 2835717307"
																				},
																				"value": "0xa9059cbb"
																			},
																			{
																				"id": 2360,
																				"name": "to",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2335,
																				"src": "1924:2:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address_payable",
																					"typeString": "address payable"
																				}
																			},
																			{
																				"id": 2361,
																				"name": "value",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2337,
																				"src": "1928:5:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_2835717307_by_1",
																					"typeString": "int_const 2835717307"
																				},
																				{
																					"typeIdentifier": "t_address_payable",
																					"typeString": "address payable"
																				},
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			],
																			"expression": {
																				"id": 2357,
																				"name": "abi",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4294967295,
																				"src": "1889:3:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_magic_abi",
																					"typeString": "abi"
																				}
																			},
																			"id": 2358,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"memberName": "encodeWithSelector",
																			"nodeType": "MemberAccess",
																			"src": "1889:22:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																				"typeString": "function (bytes4) pure returns (bytes memory)"
																			}
																		},
																		"id": 2362,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "1889:45:9",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	],
																	"expression": {
																		"id": 2355,
																		"name": "token",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2333,
																		"src": "1860:5:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"id": 2356,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "call",
																	"nodeType": "MemberAccess",
																	"src": "1860:10:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																		"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
																	}
																},
																"id": 2363,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1860:89:9",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
																	"typeString": "tuple(bool,bytes memory)"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "1824:125:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"id": 2380,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 2366,
																			"name": "success",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2352,
																			"src": "1990:7:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "&&",
																		"rightExpression": {
																			"components": [
																				{
																					"commonType": {
																						"typeIdentifier": "t_bool",
																						"typeString": "bool"
																					},
																					"id": 2378,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"commonType": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						},
																						"id": 2370,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"leftExpression": {
																							"expression": {
																								"id": 2367,
																								"name": "data",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 2354,
																								"src": "2002:4:9",
																								"typeDescriptions": {
																									"typeIdentifier": "t_bytes_memory_ptr",
																									"typeString": "bytes memory"
																								}
																							},
																							"id": 2368,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": false,
																							"lValueRequested": false,
																							"memberName": "length",
																							"nodeType": "MemberAccess",
																							"src": "2002:11:9",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						},
																						"nodeType": "BinaryOperation",
																						"operator": "==",
																						"rightExpression": {
																							"hexValue": "30",
																							"id": 2369,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"kind": "number",
																							"lValueRequested": false,
																							"nodeType": "Literal",
																							"src": "2017:1:9",
																							"typeDescriptions": {
																								"typeIdentifier": "t_rational_0_by_1",
																								"typeString": "int_const 0"
																							},
																							"value": "0"
																						},
																						"src": "2002:16:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_bool",
																							"typeString": "bool"
																						}
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "||",
																					"rightExpression": {
																						"arguments": [
																							{
																								"id": 2373,
																								"name": "data",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 2354,
																								"src": "2033:4:9",
																								"typeDescriptions": {
																									"typeIdentifier": "t_bytes_memory_ptr",
																									"typeString": "bytes memory"
																								}
																							},
																							{
																								"components": [
																									{
																										"id": 2375,
																										"isConstant": false,
																										"isLValue": false,
																										"isPure": true,
																										"lValueRequested": false,
																										"nodeType": "ElementaryTypeNameExpression",
																										"src": "2040:4:9",
																										"typeDescriptions": {
																											"typeIdentifier": "t_type$_t_bool_$",
																											"typeString": "type(bool)"
																										},
																										"typeName": {
																											"id": 2374,
																											"name": "bool",
																											"nodeType": "ElementaryTypeName",
																											"src": "2040:4:9",
																											"typeDescriptions": {}
																										}
																									}
																								],
																								"id": 2376,
																								"isConstant": false,
																								"isInlineArray": false,
																								"isLValue": false,
																								"isPure": true,
																								"lValueRequested": false,
																								"nodeType": "TupleExpression",
																								"src": "2039:6:9",
																								"typeDescriptions": {
																									"typeIdentifier": "t_type$_t_bool_$",
																									"typeString": "type(bool)"
																								}
																							}
																						],
																						"expression": {
																							"argumentTypes": [
																								{
																									"typeIdentifier": "t_bytes_memory_ptr",
																									"typeString": "bytes memory"
																								},
																								{
																									"typeIdentifier": "t_type$_t_bool_$",
																									"typeString": "type(bool)"
																								}
																							],
																							"expression": {
																								"id": 2371,
																								"name": "abi",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 4294967295,
																								"src": "2022:3:9",
																								"typeDescriptions": {
																									"typeIdentifier": "t_magic_abi",
																									"typeString": "abi"
																								}
																							},
																							"id": 2372,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"lValueRequested": false,
																							"memberName": "decode",
																							"nodeType": "MemberAccess",
																							"src": "2022:10:9",
																							"typeDescriptions": {
																								"typeIdentifier": "t_function_abidecode_pure$__$returns$__$",
																								"typeString": "function () pure"
																							}
																						},
																						"id": 2377,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"kind": "functionCall",
																						"lValueRequested": false,
																						"names": [],
																						"nodeType": "FunctionCall",
																						"src": "2022:24:9",
																						"tryCall": false,
																						"typeDescriptions": {
																							"typeIdentifier": "t_bool",
																							"typeString": "bool"
																						}
																					},
																					"src": "2002:44:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bool",
																						"typeString": "bool"
																					}
																				}
																			],
																			"id": 2379,
																			"isConstant": false,
																			"isInlineArray": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "TupleExpression",
																			"src": "2001:46:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"src": "1990:57:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	{
																		"hexValue": "5472616e7366657248656c7065723a205452414e534645525f4641494c4544",
																		"id": 2381,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2066:33:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_05d7eee434319ef96b9de8eaf182057f1e6a6441451c0ddc676469e4b256f426",
																			"typeString": "literal_string \"TransferHelper: TRANSFER_FAILED\""
																		},
																		"value": "TransferHelper: TRANSFER_FAILED"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		{
																			"typeIdentifier": "t_stringliteral_05d7eee434319ef96b9de8eaf182057f1e6a6441451c0ddc676469e4b256f426",
																			"typeString": "literal_string \"TransferHelper: TRANSFER_FAILED\""
																		}
																	],
																	"id": 2365,
																	"name": "require",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967278,
																		4294967278
																	],
																	"referencedDeclaration": 4294967278,
																	"src": "1964:7:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bool,string memory) pure"
																	}
																},
																"id": 2382,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1964:150:9",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 2383,
															"nodeType": "ExpressionStatement",
															"src": "1964:150:9"
														}
													]
												},
												"id": 2385,
												"nodeType": "IfStatement",
												"src": "1744:382:9",
												"trueBody": {
													"id": 2350,
													"nodeType": "Block",
													"src": "1758:45:9",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 2347,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2337,
																		"src": "1785:5:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"id": 2344,
																		"name": "to",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2335,
																		"src": "1773:2:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address_payable",
																			"typeString": "address payable"
																		}
																	},
																	"id": 2346,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "transfer",
																	"nodeType": "MemberAccess",
																	"src": "1773:11:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_transfer_nonpayable$_t_uint256_$returns$__$",
																		"typeString": "function (uint256)"
																	}
																},
																"id": 2348,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1773:18:9",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 2349,
															"nodeType": "ExpressionStatement",
															"src": "1773:18:9"
														}
													]
												}
											}
										]
									},
									"id": 2387,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferBaseToken",
									"nameLocation": "1595:21:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2340,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2333,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "1635:5:9",
												"nodeType": "VariableDeclaration",
												"scope": 2387,
												"src": "1627:13:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2332,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1627:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2335,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1667:2:9",
												"nodeType": "VariableDeclaration",
												"scope": 2387,
												"src": "1651:18:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address_payable",
													"typeString": "address payable"
												},
												"typeName": {
													"id": 2334,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1651:15:9",
													"stateMutability": "payable",
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2337,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1688:5:9",
												"nodeType": "VariableDeclaration",
												"scope": 2387,
												"src": "1680:13:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2336,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1680:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2339,
												"mutability": "mutable",
												"name": "isERC20",
												"nameLocation": "1709:7:9",
												"nodeType": "VariableDeclaration",
												"scope": 2387,
												"src": "1704:12:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2338,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1704:4:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1616:107:9"
									},
									"returnParameters": {
										"id": 2341,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1733:0:9"
									},
									"scope": 2388,
									"src": "1586:547:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 2389,
							"src": "244:1892:9",
							"usedErrors": []
						}
					],
					"src": "35:2103:9"
				},
				"id": 9
			}
		}
	}
}