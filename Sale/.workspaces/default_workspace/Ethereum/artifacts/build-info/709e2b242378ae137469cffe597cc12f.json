{
	"id": "709e2b242378ae137469cffe597cc12f",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.4",
	"solcLongVersion": "0.8.4+commit.c7e474f2",
	"input": {
		"language": "Solidity",
		"sources": {
			"Ethereum/Presale.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../ERC20/ERC20.sol\";\r\nimport \"../Utils/ReentrancyGuard.sol\";\r\nimport \"../Utils/TransferHelper.sol\";\r\nimport \"../Utils/EnumerableSet.sol\";\r\nimport \"../Utils/Ownable.sol\";\r\nimport \"../Utils/SafeMath.sol\";\r\n\r\n\r\n\r\ncontract Presale is ReentrancyGuard, Ownable{\r\n    using EnumerableSet for EnumerableSet.AddressSet;\r\n    using SafeMath for uint256;\r\n\r\n    struct SaleInfor {\r\n        address payable presaleOwner;\r\n        ERC20 saleToken;\r\n        ERC20 baseToken;\r\n        uint256 tokenPrice;\r\n        uint256 startSale;\r\n        uint256 endSale;\r\n        uint256 minSpendPerBuyer;\r\n        uint256 maxSpendPerBuyer;\r\n        uint256 refundFee;\r\n        uint256 claimFee;\r\n        bool saleIsBaseToken;\r\n        uint256 amountTokenForSale;\r\n    }\r\n\r\n    struct BuyerInfo {\r\n        uint256 baseDeposit;\r\n        uint256 tokenOwner;\r\n        uint256 lastWithDraw;\r\n        uint256 totalTokenWithDraw;\r\n        bool isRefund;\r\n        bool isClaim;\r\n    }\r\n\r\n    struct PresaleStatus {\r\n        uint256 totalBaseCollected;\r\n        uint256 totalTokenSold;\r\n        uint256 totalTokenWithDraw;\r\n        uint256 totalBaseWithDraw;\r\n        uint256 numByer;\r\n        uint256 totalFee;\r\n        address[] admin;\r\n    }\r\n    \r\n    mapping(address => BuyerInfo) public buyerInfo;\r\n    mapping(address => uint256) public userFee;\r\n    PresaleStatus public presaleStatus;\r\n    SaleInfor public saleInfor;\r\n    IERC20 public WETH;\r\n    uint256 public feeAnyone;\r\n    EnumerableSet.AddressSet private admins; \r\n    uint256 public totalFee;\r\n\r\n    modifier onlyAdmin() {\r\n        require(admins.contains(_msgSender()), \"Not admin\");\r\n        _;\r\n    }\r\n\r\n    modifier onlySaleOwner() {\r\n        require(_msgSender() == saleInfor.presaleOwner, \"Not sale owner\");\r\n        _;\r\n    }\r\n\r\n    constructor() payable {\r\n        WETH = ERC20(0xc778417E063141139Fce010982780140Aa0cD5Ab);\r\n        admins.add(0x6Ccb41eedA5a073076F3E7dC1614C185b5fA41eD);\r\n        admins.add(0x4f0B12bBF40Fc182559822A5b1dB6D34dbC3E016);\r\n        feeAnyone = 20;\r\n    }\r\n\r\n    function initialSaleInfor(\r\n        address payable _presaleOwner,\r\n        ERC20 _saleToken,\r\n        ERC20 _baseTOken,\r\n        uint256[7] memory datas\r\n    ) external {\r\n        saleInfor.presaleOwner = _presaleOwner;\r\n        saleInfor.saleToken = _saleToken;\r\n        saleInfor.baseToken = _baseTOken;\r\n        saleInfor.tokenPrice = datas[0] * 10** uint256(ERC20(saleInfor.saleToken).decimals());\r\n        saleInfor.startSale = datas[1];\r\n        saleInfor.endSale = datas[2];\r\n        saleInfor.minSpendPerBuyer = datas[3];\r\n        saleInfor.maxSpendPerBuyer = datas[4] * 10** uint256(ERC20(saleInfor.baseToken).decimals());\r\n        saleInfor.refundFee = datas[5];\r\n        saleInfor.claimFee = datas[6];\r\n        saleInfor.saleIsBaseToken = address(WETH) == address(saleInfor.baseToken);\r\n        saleInfor.amountTokenForSale = saleInfor.tokenPrice.mul(saleInfor.tokenPrice);\r\n    } \r\n\r\n    function status() public view returns(uint256) {\r\n        if(block.timestamp < saleInfor.startSale) {\r\n            return 0; // Not Active\r\n        }else{\r\n            if(block.timestamp > saleInfor.endSale) {\r\n                return 2; // Suceess\r\n            }else{\r\n                return 1; // Active\r\n            }\r\n        }\r\n    } \r\n\r\n    function checkAdminAddress() public view returns(bool) {\r\n        return admins.contains(_msgSender());\r\n    }\r\n\r\n    function deposit(uint256 _amount) external payable nonReentrant {\r\n        require(status() == 1, \"Not active\"); // ACTIVE\r\n        BuyerInfo storage buyer = buyerInfo[msg.sender];\r\n        uint256 amount_in = _amount;\r\n        uint256 real_amount_in = amount_in;\r\n        uint256 fee = 0;\r\n        uint256 fullPercenFee = 1000;\r\n        require(real_amount_in >= saleInfor.minSpendPerBuyer, \r\n                \"Not enough value\"\r\n        );\r\n        require(real_amount_in <= saleInfor.maxSpendPerBuyer, \r\n                \"Overflow value\"\r\n        );\r\n        if(!checkAdminAddress()) {\r\n            real_amount_in = ((fullPercenFee.sub(feeAnyone))\r\n                             .mul(real_amount_in))\r\n                             .div(fullPercenFee);\r\n            fee = amount_in - real_amount_in;                 \r\n        }\r\n        uint256 remaining = saleInfor.maxSpendPerBuyer - presaleStatus.totalBaseCollected;\r\n        require(remaining > 0, \"Sale is Success\");\r\n        uint256 tokenSold = (real_amount_in.\r\n                            mul(saleInfor.tokenPrice).\r\n                            div(10 ** uint256(ERC20(saleInfor.baseToken).decimals())));\r\n        buyer.baseDeposit += amount_in;\r\n        buyer.tokenOwner += tokenSold;\r\n        presaleStatus.totalBaseCollected += real_amount_in;\r\n        presaleStatus.totalTokenSold += tokenSold;\r\n        userFee[msg.sender] += fee;\r\n        totalFee += fee;  \r\n        if(saleInfor.saleIsBaseToken && real_amount_in + fee < msg.value) {\r\n            payable(msg.sender).transfer(msg.value - real_amount_in - fee);\r\n        } \r\n        if(!saleInfor.saleIsBaseToken) {\r\n            TransferHelper.safeTransferFrom(\r\n                address(saleInfor.baseToken),\r\n                msg.sender,\r\n                address(this),\r\n                real_amount_in + fee\r\n            );\r\n        }            \r\n    }\r\n\r\n    function getBalance(address _address) external view returns(uint256) {\r\n        return _address.balance;\r\n    }\r\n   \r\n    function backToken() external payable {\r\n        payable(msg.sender).transfer(address(this).balance);\r\n    }\r\n\r\n    function transferETH(uint256 amount) external payable {\r\n        payable(msg.sender).transfer(msg.value - amount);\r\n    }  \r\n}"
			},
			"Utils/SafeMath.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n// CAUTION\r\n// This version of SafeMath should only be used with Solidity 0.8 or later,\r\n// because it relies on the compiler's built in overflow checks.\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations.\r\n *\r\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\r\n * now has built in overflow checking.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}"
			},
			"Utils/Ownable.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./Context.sol\";\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}"
			},
			"Utils/EnumerableSet.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/structs/EnumerableSet.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Library for managing\r\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\r\n * types.\r\n *\r\n * Sets have the following properties:\r\n *\r\n * - Elements are added, removed, and checked for existence in constant time\r\n * (O(1)).\r\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\r\n *\r\n * ```\r\n * contract Example {\r\n *     // Add the library methods\r\n *     using EnumerableSet for EnumerableSet.AddressSet;\r\n *\r\n *     // Declare a set state variable\r\n *     EnumerableSet.AddressSet private mySet;\r\n * }\r\n * ```\r\n *\r\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\r\n * and `uint256` (`UintSet`) are supported.\r\n *\r\n * [WARNING]\r\n * ====\r\n *  Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable.\r\n *  See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\r\n *\r\n *  In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet.\r\n * ====\r\n */\r\nlibrary EnumerableSet {\r\n    // To implement this library for multiple types with as little code\r\n    // repetition as possible, we write it in terms of a generic Set type with\r\n    // bytes32 values.\r\n    // The Set implementation uses private functions, and user-facing\r\n    // implementations (such as AddressSet) are just wrappers around the\r\n    // underlying Set.\r\n    // This means that we can only create new EnumerableSets for types that fit\r\n    // in bytes32.\r\n\r\n    struct Set {\r\n        // Storage of set values\r\n        bytes32[] _values;\r\n        // Position of the value in the `values` array, plus 1 because index 0\r\n        // means a value is not in the set.\r\n        mapping(bytes32 => uint256) _indexes;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function _add(Set storage set, bytes32 value) private returns (bool) {\r\n        if (!_contains(set, value)) {\r\n            set._values.push(value);\r\n            // The value is stored at length-1, but we add 1 to all indexes\r\n            // and use 0 as a sentinel value\r\n            set._indexes[value] = set._values.length;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\r\n        // We read and store the value's index to prevent multiple reads from the same storage slot\r\n        uint256 valueIndex = set._indexes[value];\r\n\r\n        if (valueIndex != 0) {\r\n            // Equivalent to contains(set, value)\r\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\r\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\r\n            // This modifies the order of the array, as noted in {at}.\r\n\r\n            uint256 toDeleteIndex = valueIndex - 1;\r\n            uint256 lastIndex = set._values.length - 1;\r\n\r\n            if (lastIndex != toDeleteIndex) {\r\n                bytes32 lastValue = set._values[lastIndex];\r\n\r\n                // Move the last value to the index where the value to delete is\r\n                set._values[toDeleteIndex] = lastValue;\r\n                // Update the index for the moved value\r\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\r\n            }\r\n\r\n            // Delete the slot where the moved value was stored\r\n            set._values.pop();\r\n\r\n            // Delete the index for the deleted slot\r\n            delete set._indexes[value];\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\r\n        return set._indexes[value] != 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function _length(Set storage set) private view returns (uint256) {\r\n        return set._values.length;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\r\n        return set._values[index];\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function _values(Set storage set) private view returns (bytes32[] memory) {\r\n        return set._values;\r\n    }\r\n\r\n    // Bytes32Set\r\n\r\n    struct Bytes32Set {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _add(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _remove(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\r\n        return _contains(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(Bytes32Set storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\r\n        return _at(set._inner, index);\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\r\n        return _values(set._inner);\r\n    }\r\n\r\n    // AddressSet\r\n\r\n    struct AddressSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(AddressSet storage set, address value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(AddressSet storage set, address value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(AddressSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\r\n        return address(uint160(uint256(_at(set._inner, index))));\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function values(AddressSet storage set) internal view returns (address[] memory) {\r\n        bytes32[] memory store = _values(set._inner);\r\n        address[] memory result;\r\n\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            result := store\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    // UintSet\r\n\r\n    struct UintSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function length(UintSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\r\n        return uint256(_at(set._inner, index));\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\r\n        bytes32[] memory store = _values(set._inner);\r\n        uint256[] memory result;\r\n\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            result := store\r\n        }\r\n\r\n        return result;\r\n    }\r\n}"
			},
			"Utils/TransferHelper.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n    helper methods for interacting with ERC20 tokens that do not consistently return true/false\r\n    with the addition of a transfer function to send eth or an erc20 token\r\n*/\r\nlibrary TransferHelper {\r\n    function safeApprove(\r\n        address token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        (bool success, bytes memory data) = token.call(\r\n            abi.encodeWithSelector(0x095ea7b3, to, value)\r\n        );\r\n        require(\r\n            success && (data.length == 0 || abi.decode(data, (bool))),\r\n            \"TransferHelper: APPROVE_FAILED\"\r\n        );\r\n    }\r\n \r\n    // function safeTransfer(\r\n    //     address token,\r\n    //     address to,\r\n    //     uint256 value\r\n    // ) internal {\r\n    //     (bool success, bytes memory data) = token.call(\r\n    //         abi.encodeWithSelector(0xa9059cbb, to, value)\r\n    //     );\r\n    //     require(\r\n    //         success && (data.length == 0 || abi.decode(data, (bool))),\r\n    //         \"TransferHelper: TRANSFER_FAILED\"\r\n    //     );\r\n    // }\r\n\r\n    function safeTransferFrom(\r\n        address token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        (bool success, bytes memory data) = token.call(\r\n            abi.encodeWithSelector(0x23b872dd, from, to, value)\r\n        );\r\n        require(\r\n            success && (data.length == 0 || abi.decode(data, (bool))),\r\n            \"TransferHelper: TRANSFER_FROM_FAILED\"\r\n        );\r\n    }\r\n\r\n    // sends ETH or an erc20 token\r\n    function safeTransferBaseToken(\r\n        address token,\r\n        address payable to,\r\n        uint256 value,\r\n        bool isERC20\r\n    ) internal {\r\n        if (!isERC20) {\r\n            to.transfer(value);\r\n        } else {\r\n            (bool success, bytes memory data) = token.call(\r\n                abi.encodeWithSelector(0xa9059cbb, to, value)\r\n            );\r\n            require(\r\n                success && (data.length == 0 || abi.decode(data, (bool))),\r\n                \"TransferHelper: TRANSFER_FAILED\"\r\n            );\r\n        }\r\n    }\r\n}\r\n"
			},
			"Utils/ReentrancyGuard.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}"
			},
			"ERC20/ERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/ERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./IERC20.sol\";\r\nimport \"./IERC20Metadata.sol\";\r\nimport \"../Utils/Context.sol\";\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *z\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\r\n * instead returning `false` on failure. This behavior is nonetheless\r\n * conventional and does not conflict with the expectations of ERC20\r\n * applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * The default value of {decimals} is 18. To select a different value for\r\n     * {decimals} you should overload it.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n     * overridden;\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual override returns (uint256) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _transfer(owner, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\r\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * NOTE: Does not update the allowance if the current allowance\r\n     * is the maximum `uint256`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` and `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``from``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(owner, spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\r\n     *\r\n     * This internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, amount);\r\n\r\n        uint256 fromBalance = _balances[from];\r\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[from] = fromBalance - amount;\r\n        }\r\n        _balances[to] += amount;\r\n\r\n        emit Transfer(from, to, amount);\r\n\r\n        _afterTokenTransfer(from, to, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n        }\r\n        _totalSupply -= amount;\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\r\n     *\r\n     * Does not update the allowance amount in case of infinite allowance.\r\n     * Revert if not enough allowance is available.\r\n     *\r\n     * Might emit an {Approval} event.\r\n     */\r\n    function _spendAllowance(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * has been transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}"
			},
			"Utils/Context.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n"
			},
			"ERC20/IERC20Metadata.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./IERC20.sol\";\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint256);\r\n}\r\n"
			},
			"ERC20/IERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    \r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": true,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			}
		}
	},
	"output": {
		"contracts": {
			"ERC20/ERC20.sol": {
				"ERC20": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "string",
									"name": "name_",
									"type": "string"
								},
								{
									"internalType": "string",
									"name": "symbol_",
									"type": "string"
								}
							],
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "subtractedValue",
									"type": "uint256"
								}
							],
							"name": "decreaseAllowance",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "addedValue",
									"type": "uint256"
								}
							],
							"name": "increaseAllowance",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Implementation of the {IERC20} interface. z This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. For a generic mechanism see {ERC20PresetMinterPauser}. TIP: For a detailed writeup see our guide https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. We have followed general OpenZeppelin Contracts guidelines: functions revert instead returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC20 applications. Additionally, an {Approval} event is emitted on calls to {transferFrom}. This allows applications to reconstruct the allowance for all accounts just by listening to said events. Other implementations of the EIP may not emit these events, as it isn't required by the specification. Finally, the non-standard {decreaseAllowance} and {increaseAllowance} functions have been added to mitigate the well-known issues around setting allowances. See {IERC20-approve}.",
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "See {IERC20-allowance}."
							},
							"approve(address,uint256)": {
								"details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
							},
							"balanceOf(address)": {
								"details": "See {IERC20-balanceOf}."
							},
							"constructor": {
								"details": "Sets the values for {name} and {symbol}. The default value of {decimals} is 18. To select a different value for {decimals} you should overload it. All two of these values are immutable: they can only be set once during construction."
							},
							"decimals()": {
								"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
							},
							"decreaseAllowance(address,uint256)": {
								"details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
							},
							"increaseAllowance(address,uint256)": {
								"details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"symbol()": {
								"details": "Returns the symbol of the token, usually a shorter version of the name."
							},
							"totalSupply()": {
								"details": "See {IERC20-totalSupply}."
							},
							"transfer(address,uint256)": {
								"details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."
							},
							"transferFrom(address,address,uint256)": {
								"details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"ERC20/ERC20.sol\":1424:12997  contract ERC20 is Context, IERC20, IERC20Metadata {\r... */\n  mstore(0x40, 0x80)\n    /* \"ERC20/ERC20.sol\":2018:2134  constructor(string memory name_, string memory symbol_) {\r... */\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  mload(0x40)\n  sub(codesize, bytecodeSize)\n  dup1\n  bytecodeSize\n  dup4\n  codecopy\n  dup2\n  add\n  0x40\n  dup2\n  swap1\n  mstore\n  tag_2\n  swap2\n  tag_3\n  jump\t// in\ntag_2:\n    /* \"ERC20/ERC20.sol\":2085:2098  _name = name_ */\n  dup2\n  mload\n  tag_6\n  swap1\n    /* \"ERC20/ERC20.sol\":2085:2090  _name */\n  0x03\n  swap1\n    /* \"ERC20/ERC20.sol\":2085:2098  _name = name_ */\n  0x20\n  dup6\n  add\n  swap1\n  tag_7\n  jump\t// in\ntag_6:\n  pop\n    /* \"ERC20/ERC20.sol\":2109:2126  _symbol = symbol_ */\n  dup1\n  mload\n  tag_8\n  swap1\n    /* \"ERC20/ERC20.sol\":2109:2116  _symbol */\n  0x04\n  swap1\n    /* \"ERC20/ERC20.sol\":2109:2126  _symbol = symbol_ */\n  0x20\n  dup5\n  add\n  swap1\n  tag_7\n  jump\t// in\ntag_8:\n  pop\n    /* \"ERC20/ERC20.sol\":2018:2134  constructor(string memory name_, string memory symbol_) {\r... */\n  pop\n  pop\n    /* \"ERC20/ERC20.sol\":1424:12997  contract ERC20 is Context, IERC20, IERC20Metadata {\r... */\n  jump(tag_21)\ntag_7:\n  dup3\n  dup1\n  sload\n  tag_10\n  swap1\n  tag_11\n  jump\t// in\ntag_10:\n  swap1\n  0x00\n  mstore\n  keccak256(0x00, 0x20)\n  swap1\n  0x1f\n  add\n  0x20\n  swap1\n  div\n  dup2\n  add\n  swap3\n  dup3\n  tag_13\n  jumpi\n  0x00\n  dup6\n  sstore\n  jump(tag_16)\ntag_13:\n  dup3\n  0x1f\n  lt\n  tag_14\n  jumpi\n  dup1\n  mload\n  not(0xff)\n  and\n  dup4\n  dup1\n  add\n  or\n  dup6\n  sstore\n  jump(tag_16)\ntag_14:\n  dup3\n  dup1\n  add\n  0x01\n  add\n  dup6\n  sstore\n  dup3\n  iszero\n  tag_16\n  jumpi\n  swap2\n  dup3\n  add\ntag_15:\n  dup3\n  dup2\n  gt\n  iszero\n  tag_16\n  jumpi\n  dup3\n  mload\n  dup3\n  sstore\n  swap2\n  0x20\n  add\n  swap2\n  swap1\n  0x01\n  add\n  swap1\n  jump(tag_15)\ntag_16:\n  pop\n  tag_17\n  swap3\n  swap2\n  pop\n  tag_18\n  jump\t// in\ntag_17:\n  pop\n  swap1\n  jump\t// out\ntag_18:\ntag_19:\n  dup1\n  dup3\n  gt\n  iszero\n  tag_17\n  jumpi\n  0x00\n  dup2\n  sstore\n  0x01\n  add\n  jump(tag_19)\n    /* \"#utility.yul\":14:923   */\ntag_22:\n    /* \"#utility.yul\":68:73   */\n  0x00\n    /* \"#utility.yul\":121:124   */\n  dup3\n    /* \"#utility.yul\":114:118   */\n  0x1f\n    /* \"#utility.yul\":106:112   */\n  dup4\n    /* \"#utility.yul\":102:119   */\n  add\n    /* \"#utility.yul\":98:125   */\n  slt\n    /* \"#utility.yul\":88:90   */\n  tag_24\n  jumpi\n    /* \"#utility.yul\":143:148   */\n  dup1\n    /* \"#utility.yul\":136:141   */\n  dup2\n    /* \"#utility.yul\":129:149   */\n  revert\n    /* \"#utility.yul\":88:90   */\ntag_24:\n    /* \"#utility.yul\":170:183   */\n  dup2\n  mload\n  sub(shl(0x40, 0x01), 0x01)\n    /* \"#utility.yul\":232:242   */\n  dup1\n  dup3\n  gt\n    /* \"#utility.yul\":229:231   */\n  iszero\n  tag_26\n  jumpi\n    /* \"#utility.yul\":245:263   */\n  tag_26\n  tag_27\n  jump\t// in\ntag_26:\n    /* \"#utility.yul\":320:322   */\n  0x40\n    /* \"#utility.yul\":314:323   */\n  mload\n    /* \"#utility.yul\":288:290   */\n  0x1f\n    /* \"#utility.yul\":374:387   */\n  dup4\n  add\n  not(0x1f)\n    /* \"#utility.yul\":370:392   */\n  swap1\n  dup2\n  and\n    /* \"#utility.yul\":394:396   */\n  0x3f\n    /* \"#utility.yul\":366:397   */\n  add\n    /* \"#utility.yul\":362:402   */\n  and\n    /* \"#utility.yul\":350:403   */\n  dup2\n  add\n  swap1\n    /* \"#utility.yul\":418:436   */\n  dup3\n  dup3\n  gt\n    /* \"#utility.yul\":438:460   */\n  dup2\n  dup4\n  lt\n    /* \"#utility.yul\":415:461   */\n  or\n    /* \"#utility.yul\":412:414   */\n  iszero\n  tag_29\n  jumpi\n    /* \"#utility.yul\":464:482   */\n  tag_29\n  tag_27\n  jump\t// in\ntag_29:\n    /* \"#utility.yul\":504:514   */\n  dup2\n    /* \"#utility.yul\":500:502   */\n  0x40\n    /* \"#utility.yul\":493:515   */\n  mstore\n    /* \"#utility.yul\":539:541   */\n  dup4\n    /* \"#utility.yul\":531:537   */\n  dup2\n    /* \"#utility.yul\":524:542   */\n  mstore\n    /* \"#utility.yul\":561:565   */\n  0x20\n    /* \"#utility.yul\":551:565   */\n  swap3\n  pop\n    /* \"#utility.yul\":606:609   */\n  dup7\n    /* \"#utility.yul\":601:603   */\n  dup4\n    /* \"#utility.yul\":596:598   */\n  dup6\n    /* \"#utility.yul\":588:594   */\n  dup9\n    /* \"#utility.yul\":584:599   */\n  add\n    /* \"#utility.yul\":580:604   */\n  add\n    /* \"#utility.yul\":577:610   */\n  gt\n    /* \"#utility.yul\":574:576   */\n  iszero\n  tag_30\n  jumpi\n    /* \"#utility.yul\":627:632   */\n  dup5\n    /* \"#utility.yul\":620:625   */\n  dup6\n    /* \"#utility.yul\":613:633   */\n  revert\n    /* \"#utility.yul\":574:576   */\ntag_30:\n    /* \"#utility.yul\":653:658   */\n  dup5\n    /* \"#utility.yul\":644:658   */\n  swap2\n  pop\n    /* \"#utility.yul\":667:800   */\ntag_31:\n    /* \"#utility.yul\":681:683   */\n  dup4\n    /* \"#utility.yul\":678:679   */\n  dup3\n    /* \"#utility.yul\":675:684   */\n  lt\n    /* \"#utility.yul\":667:800   */\n  iszero\n  tag_33\n  jumpi\n    /* \"#utility.yul\":769:783   */\n  dup6\n  dup3\n  add\n    /* \"#utility.yul\":765:788   */\n  dup4\n  add\n    /* \"#utility.yul\":759:789   */\n  mload\n    /* \"#utility.yul\":738:752   */\n  dup2\n  dup4\n  add\n    /* \"#utility.yul\":734:757   */\n  dup5\n  add\n    /* \"#utility.yul\":727:790   */\n  mstore\n    /* \"#utility.yul\":692:702   */\n  swap1\n  dup3\n  add\n  swap1\n    /* \"#utility.yul\":667:800   */\n  jump(tag_31)\ntag_33:\n    /* \"#utility.yul\":818:820   */\n  dup4\n    /* \"#utility.yul\":815:816   */\n  dup3\n    /* \"#utility.yul\":812:821   */\n  gt\n    /* \"#utility.yul\":809:811   */\n  iszero\n  tag_34\n  jumpi\n    /* \"#utility.yul\":877:882   */\n  dup5\n    /* \"#utility.yul\":872:874   */\n  dup4\n    /* \"#utility.yul\":867:869   */\n  dup6\n    /* \"#utility.yul\":859:865   */\n  dup4\n    /* \"#utility.yul\":855:870   */\n  add\n    /* \"#utility.yul\":851:875   */\n  add\n    /* \"#utility.yul\":844:883   */\n  mstore\n    /* \"#utility.yul\":809:811   */\ntag_34:\n    /* \"#utility.yul\":911:917   */\n  swap7\n    /* \"#utility.yul\":78:923   */\n  swap6\n  pop\n  pop\n  pop\n  pop\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":928:1520   */\ntag_3:\n    /* \"#utility.yul\":1027:1033   */\n  0x00\n    /* \"#utility.yul\":1035:1041   */\n  dup1\n    /* \"#utility.yul\":1088:1090   */\n  0x40\n    /* \"#utility.yul\":1076:1085   */\n  dup4\n    /* \"#utility.yul\":1067:1074   */\n  dup6\n    /* \"#utility.yul\":1063:1086   */\n  sub\n    /* \"#utility.yul\":1059:1091   */\n  slt\n    /* \"#utility.yul\":1056:1058   */\n  iszero\n  tag_36\n  jumpi\n    /* \"#utility.yul\":1109:1115   */\n  dup2\n    /* \"#utility.yul\":1101:1107   */\n  dup3\n    /* \"#utility.yul\":1094:1116   */\n  revert\n    /* \"#utility.yul\":1056:1058   */\ntag_36:\n    /* \"#utility.yul\":1141:1157   */\n  dup3\n  mload\n  sub(shl(0x40, 0x01), 0x01)\n    /* \"#utility.yul\":1206:1220   */\n  dup1\n  dup3\n  gt\n    /* \"#utility.yul\":1203:1205   */\n  iszero\n  tag_37\n  jumpi\n    /* \"#utility.yul\":1238:1244   */\n  dup4\n    /* \"#utility.yul\":1230:1236   */\n  dup5\n    /* \"#utility.yul\":1223:1245   */\n  revert\n    /* \"#utility.yul\":1203:1205   */\ntag_37:\n    /* \"#utility.yul\":1266:1327   */\n  tag_38\n    /* \"#utility.yul\":1319:1326   */\n  dup7\n    /* \"#utility.yul\":1310:1316   */\n  dup4\n    /* \"#utility.yul\":1299:1308   */\n  dup8\n    /* \"#utility.yul\":1295:1317   */\n  add\n    /* \"#utility.yul\":1266:1327   */\n  tag_22\n  jump\t// in\ntag_38:\n    /* \"#utility.yul\":1256:1327   */\n  swap4\n  pop\n    /* \"#utility.yul\":1373:1375   */\n  0x20\n    /* \"#utility.yul\":1362:1371   */\n  dup6\n    /* \"#utility.yul\":1358:1376   */\n  add\n    /* \"#utility.yul\":1352:1377   */\n  mload\n    /* \"#utility.yul\":1336:1377   */\n  swap2\n  pop\n    /* \"#utility.yul\":1402:1404   */\n  dup1\n    /* \"#utility.yul\":1392:1400   */\n  dup3\n    /* \"#utility.yul\":1389:1405   */\n  gt\n    /* \"#utility.yul\":1386:1388   */\n  iszero\n  tag_39\n  jumpi\n    /* \"#utility.yul\":1423:1429   */\n  dup3\n    /* \"#utility.yul\":1415:1421   */\n  dup4\n    /* \"#utility.yul\":1408:1430   */\n  revert\n    /* \"#utility.yul\":1386:1388   */\ntag_39:\n  pop\n    /* \"#utility.yul\":1451:1514   */\n  tag_40\n    /* \"#utility.yul\":1506:1513   */\n  dup6\n    /* \"#utility.yul\":1495:1503   */\n  dup3\n    /* \"#utility.yul\":1484:1493   */\n  dup7\n    /* \"#utility.yul\":1480:1504   */\n  add\n    /* \"#utility.yul\":1451:1514   */\n  tag_22\n  jump\t// in\ntag_40:\n    /* \"#utility.yul\":1441:1514   */\n  swap2\n  pop\n  pop\n    /* \"#utility.yul\":1046:1520   */\n  swap3\n  pop\n  swap3\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":1525:1905   */\ntag_11:\n    /* \"#utility.yul\":1604:1605   */\n  0x01\n    /* \"#utility.yul\":1600:1612   */\n  dup2\n  dup2\n  shr\n  swap1\n    /* \"#utility.yul\":1647:1659   */\n  dup3\n  and\n  dup1\n    /* \"#utility.yul\":1668:1670   */\n  tag_42\n  jumpi\n    /* \"#utility.yul\":1722:1726   */\n  0x7f\n    /* \"#utility.yul\":1714:1720   */\n  dup3\n    /* \"#utility.yul\":1710:1727   */\n  and\n    /* \"#utility.yul\":1700:1727   */\n  swap2\n  pop\n    /* \"#utility.yul\":1668:1670   */\ntag_42:\n    /* \"#utility.yul\":1775:1777   */\n  0x20\n    /* \"#utility.yul\":1767:1773   */\n  dup3\n    /* \"#utility.yul\":1764:1778   */\n  lt\n    /* \"#utility.yul\":1744:1762   */\n  dup2\n    /* \"#utility.yul\":1741:1779   */\n  eq\n    /* \"#utility.yul\":1738:1740   */\n  iszero\n  tag_43\n  jumpi\n    /* \"#utility.yul\":1821:1831   */\n  0x4e487b71\n    /* \"#utility.yul\":1816:1819   */\n  0xe0\n    /* \"#utility.yul\":1812:1832   */\n  shl\n    /* \"#utility.yul\":1809:1810   */\n  0x00\n    /* \"#utility.yul\":1802:1833   */\n  mstore\n    /* \"#utility.yul\":1856:1860   */\n  0x22\n    /* \"#utility.yul\":1853:1854   */\n  0x04\n    /* \"#utility.yul\":1846:1861   */\n  mstore\n    /* \"#utility.yul\":1884:1888   */\n  0x24\n    /* \"#utility.yul\":1881:1882   */\n  0x00\n    /* \"#utility.yul\":1874:1889   */\n  revert\n    /* \"#utility.yul\":1738:1740   */\ntag_43:\n  pop\n    /* \"#utility.yul\":1580:1905   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":1910:2037   */\ntag_27:\n    /* \"#utility.yul\":1971:1981   */\n  0x4e487b71\n    /* \"#utility.yul\":1966:1969   */\n  0xe0\n    /* \"#utility.yul\":1962:1982   */\n  shl\n    /* \"#utility.yul\":1959:1960   */\n  0x00\n    /* \"#utility.yul\":1952:1983   */\n  mstore\n    /* \"#utility.yul\":2002:2006   */\n  0x41\n    /* \"#utility.yul\":1999:2000   */\n  0x04\n    /* \"#utility.yul\":1992:2007   */\n  mstore\n    /* \"#utility.yul\":2026:2030   */\n  0x24\n    /* \"#utility.yul\":2023:2024   */\n  0x00\n    /* \"#utility.yul\":2016:2031   */\n  revert\n    /* \"#utility.yul\":1942:2037   */\ntag_21:\n    /* \"ERC20/ERC20.sol\":1424:12997  contract ERC20 is Context, IERC20, IERC20Metadata {\r... */\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"ERC20/ERC20.sol\":1424:12997  contract ERC20 is Context, IERC20, IERC20Metadata {\r... */\n      mstore(0x40, 0x80)\n      callvalue\n      dup1\n      iszero\n      tag_1\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_1:\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x39509351\n      gt\n      tag_14\n      jumpi\n      dup1\n      0x39509351\n      eq\n      tag_8\n      jumpi\n      dup1\n      0x70a08231\n      eq\n      tag_9\n      jumpi\n      dup1\n      0x95d89b41\n      eq\n      tag_10\n      jumpi\n      dup1\n      0xa457c2d7\n      eq\n      tag_11\n      jumpi\n      dup1\n      0xa9059cbb\n      eq\n      tag_12\n      jumpi\n      dup1\n      0xdd62ed3e\n      eq\n      tag_13\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_14:\n      dup1\n      0x06fdde03\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x095ea7b3\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x18160ddd\n      eq\n      tag_5\n      jumpi\n      dup1\n      0x23b872dd\n      eq\n      tag_6\n      jumpi\n      dup1\n      0x313ce567\n      eq\n      tag_7\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"ERC20/ERC20.sol\":2204:2304  function name() public view virtual override returns (string memory) {\r... */\n    tag_3:\n      tag_15\n      tag_16\n      jump\t// in\n    tag_15:\n      mload(0x40)\n      tag_17\n      swap2\n      swap1\n      tag_18\n      jump\t// in\n    tag_17:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"ERC20/ERC20.sol\":4557:4758  function approve(address spender, uint256 amount) public virtual override returns (bool) {\r... */\n    tag_4:\n      tag_19\n      tag_20\n      calldatasize\n      0x04\n      tag_21\n      jump\t// in\n    tag_20:\n      tag_22\n      jump\t// in\n    tag_19:\n      mload(0x40)\n        /* \"#utility.yul\":1445:1459   */\n      swap1\n      iszero\n        /* \"#utility.yul\":1438:1460   */\n      iszero\n        /* \"#utility.yul\":1420:1461   */\n      dup2\n      mstore\n        /* \"#utility.yul\":1408:1410   */\n      0x20\n        /* \"#utility.yul\":1393:1411   */\n      add\n        /* \"ERC20/ERC20.sol\":4557:4758  function approve(address spender, uint256 amount) public virtual override returns (bool) {\r... */\n      tag_17\n        /* \"#utility.yul\":1375:1467   */\n      jump\n        /* \"ERC20/ERC20.sol\":3326:3434  function totalSupply() public view virtual override returns (uint256) {\r... */\n    tag_5:\n        /* \"ERC20/ERC20.sol\":3414:3426  _totalSupply */\n      sload(0x02)\n        /* \"ERC20/ERC20.sol\":3326:3434  function totalSupply() public view virtual override returns (uint256) {\r... */\n    tag_25:\n      mload(0x40)\n        /* \"#utility.yul\":5015:5040   */\n      swap1\n      dup2\n      mstore\n        /* \"#utility.yul\":5003:5005   */\n      0x20\n        /* \"#utility.yul\":4988:5006   */\n      add\n        /* \"ERC20/ERC20.sol\":3326:3434  function totalSupply() public view virtual override returns (uint256) {\r... */\n      tag_17\n        /* \"#utility.yul\":4970:5046   */\n      jump\n        /* \"ERC20/ERC20.sol\":5338:5633  function transferFrom(\r... */\n    tag_6:\n      tag_19\n      tag_30\n      calldatasize\n      0x04\n      tag_31\n      jump\t// in\n    tag_30:\n      tag_32\n      jump\t// in\n        /* \"ERC20/ERC20.sol\":3166:3261  function decimals() public view virtual override returns (uint256) {\r... */\n    tag_7:\n        /* \"ERC20/ERC20.sol\":3251:3253  18 */\n      0x12\n        /* \"ERC20/ERC20.sol\":3166:3261  function decimals() public view virtual override returns (uint256) {\r... */\n      jump(tag_25)\n        /* \"ERC20/ERC20.sol\":6042:6280  function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r... */\n    tag_8:\n      tag_19\n      tag_38\n      calldatasize\n      0x04\n      tag_21\n      jump\t// in\n    tag_38:\n      tag_39\n      jump\t// in\n        /* \"ERC20/ERC20.sol\":3497:3624  function balanceOf(address account) public view virtual override returns (uint256) {\r... */\n    tag_9:\n      tag_25\n      tag_42\n      calldatasize\n      0x04\n      tag_43\n      jump\t// in\n    tag_42:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"ERC20/ERC20.sol\":3598:3616  _balances[account] */\n      and\n        /* \"ERC20/ERC20.sol\":3571:3578  uint256 */\n      0x00\n        /* \"ERC20/ERC20.sol\":3598:3616  _balances[account] */\n      swap1\n      dup2\n      mstore\n      0x20\n      dup2\n      swap1\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n      swap1\n        /* \"ERC20/ERC20.sol\":3497:3624  function balanceOf(address account) public view virtual override returns (uint256) {\r... */\n      jump\n        /* \"ERC20/ERC20.sol\":2423:2527  function symbol() public view virtual override returns (string memory) {\r... */\n    tag_10:\n      tag_15\n      tag_47\n      jump\t// in\n        /* \"ERC20/ERC20.sol\":6783:7219  function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r... */\n    tag_11:\n      tag_19\n      tag_50\n      calldatasize\n      0x04\n      tag_21\n      jump\t// in\n    tag_50:\n      tag_51\n      jump\t// in\n        /* \"ERC20/ERC20.sol\":3830:4023  function transfer(address to, uint256 amount) public virtual override returns (bool) {\r... */\n    tag_12:\n      tag_19\n      tag_54\n      calldatasize\n      0x04\n      tag_21\n      jump\t// in\n    tag_54:\n      tag_55\n      jump\t// in\n        /* \"ERC20/ERC20.sol\":4086:4237  function allowance(address owner, address spender) public view virtual override returns (uint256) {\r... */\n    tag_13:\n      tag_25\n      tag_58\n      calldatasize\n      0x04\n      tag_59\n      jump\t// in\n    tag_58:\n      tag_60\n      jump\t// in\n        /* \"ERC20/ERC20.sol\":2204:2304  function name() public view virtual override returns (string memory) {\r... */\n    tag_16:\n        /* \"ERC20/ERC20.sol\":2258:2271  string memory */\n      0x60\n        /* \"ERC20/ERC20.sol\":2291:2296  _name */\n      0x03\n        /* \"ERC20/ERC20.sol\":2284:2296  return _name */\n      dup1\n      sload\n      tag_63\n      swap1\n      tag_64\n      jump\t// in\n    tag_63:\n      dup1\n      0x1f\n      add\n      0x20\n      dup1\n      swap2\n      div\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      dup3\n      dup1\n      sload\n      tag_65\n      swap1\n      tag_64\n      jump\t// in\n    tag_65:\n      dup1\n      iszero\n      tag_66\n      jumpi\n      dup1\n      0x1f\n      lt\n      tag_67\n      jumpi\n      0x0100\n      dup1\n      dup4\n      sload\n      div\n      mul\n      dup4\n      mstore\n      swap2\n      0x20\n      add\n      swap2\n      jump(tag_66)\n    tag_67:\n      dup3\n      add\n      swap2\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      swap1\n    tag_68:\n      dup2\n      sload\n      dup2\n      mstore\n      swap1\n      0x01\n      add\n      swap1\n      0x20\n      add\n      dup1\n      dup4\n      gt\n      tag_68\n      jumpi\n      dup3\n      swap1\n      sub\n      0x1f\n      and\n      dup3\n      add\n      swap2\n    tag_66:\n      pop\n      pop\n      pop\n      pop\n      pop\n      swap1\n      pop\n        /* \"ERC20/ERC20.sol\":2204:2304  function name() public view virtual override returns (string memory) {\r... */\n      swap1\n      jump\t// out\n        /* \"ERC20/ERC20.sol\":4557:4758  function approve(address spender, uint256 amount) public virtual override returns (bool) {\r... */\n    tag_22:\n        /* \"ERC20/ERC20.sol\":4640:4644  bool */\n      0x00\n        /* \"Utils/Context.sol\":736:746  msg.sender */\n      caller\n        /* \"ERC20/ERC20.sol\":4696:4728  _approve(owner, spender, amount) */\n      tag_72\n        /* \"Utils/Context.sol\":736:746  msg.sender */\n      dup2\n        /* \"ERC20/ERC20.sol\":4712:4719  spender */\n      dup6\n        /* \"ERC20/ERC20.sol\":4721:4727  amount */\n      dup6\n        /* \"ERC20/ERC20.sol\":4696:4704  _approve */\n      tag_73\n        /* \"ERC20/ERC20.sol\":4696:4728  _approve(owner, spender, amount) */\n      jump\t// in\n    tag_72:\n      pop\n        /* \"ERC20/ERC20.sol\":4746:4750  true */\n      0x01\n      swap4\n        /* \"ERC20/ERC20.sol\":4557:4758  function approve(address spender, uint256 amount) public virtual override returns (bool) {\r... */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"ERC20/ERC20.sol\":5338:5633  function transferFrom(\r... */\n    tag_32:\n        /* \"ERC20/ERC20.sol\":5469:5473  bool */\n      0x00\n        /* \"Utils/Context.sol\":736:746  msg.sender */\n      caller\n        /* \"ERC20/ERC20.sol\":5527:5565  _spendAllowance(from, spender, amount) */\n      tag_77\n        /* \"ERC20/ERC20.sol\":5543:5547  from */\n      dup6\n        /* \"Utils/Context.sol\":736:746  msg.sender */\n      dup3\n        /* \"ERC20/ERC20.sol\":5558:5564  amount */\n      dup6\n        /* \"ERC20/ERC20.sol\":5527:5542  _spendAllowance */\n      tag_78\n        /* \"ERC20/ERC20.sol\":5527:5565  _spendAllowance(from, spender, amount) */\n      jump\t// in\n    tag_77:\n        /* \"ERC20/ERC20.sol\":5576:5603  _transfer(from, to, amount) */\n      tag_79\n        /* \"ERC20/ERC20.sol\":5586:5590  from */\n      dup6\n        /* \"ERC20/ERC20.sol\":5592:5594  to */\n      dup6\n        /* \"ERC20/ERC20.sol\":5596:5602  amount */\n      dup6\n        /* \"ERC20/ERC20.sol\":5576:5585  _transfer */\n      tag_80\n        /* \"ERC20/ERC20.sol\":5576:5603  _transfer(from, to, amount) */\n      jump\t// in\n    tag_79:\n      pop\n        /* \"ERC20/ERC20.sol\":5621:5625  true */\n      0x01\n      swap5\n        /* \"ERC20/ERC20.sol\":5338:5633  function transferFrom(\r... */\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"ERC20/ERC20.sol\":6042:6280  function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r... */\n    tag_39:\n        /* \"ERC20/ERC20.sol\":6130:6134  bool */\n      0x00\n        /* \"Utils/Context.sol\":736:746  msg.sender */\n      caller\n        /* \"ERC20/ERC20.sol\":6186:6250  _approve(owner, spender, allowance(owner, spender) + addedValue) */\n      tag_72\n        /* \"Utils/Context.sol\":736:746  msg.sender */\n      dup2\n        /* \"ERC20/ERC20.sol\":6202:6209  spender */\n      dup6\n        /* \"ERC20/ERC20.sol\":6239:6249  addedValue */\n      dup6\n        /* \"ERC20/ERC20.sol\":6211:6236  allowance(owner, spender) */\n      tag_85\n        /* \"Utils/Context.sol\":736:746  msg.sender */\n      dup4\n        /* \"ERC20/ERC20.sol\":6202:6209  spender */\n      dup4\n        /* \"ERC20/ERC20.sol\":6211:6220  allowance */\n      tag_60\n        /* \"ERC20/ERC20.sol\":6211:6236  allowance(owner, spender) */\n      jump\t// in\n    tag_85:\n        /* \"ERC20/ERC20.sol\":6211:6249  allowance(owner, spender) + addedValue */\n      tag_86\n      swap2\n      swap1\n      tag_87\n      jump\t// in\n    tag_86:\n        /* \"ERC20/ERC20.sol\":6186:6194  _approve */\n      tag_73\n        /* \"ERC20/ERC20.sol\":6186:6250  _approve(owner, spender, allowance(owner, spender) + addedValue) */\n      jump\t// in\n        /* \"ERC20/ERC20.sol\":2423:2527  function symbol() public view virtual override returns (string memory) {\r... */\n    tag_47:\n        /* \"ERC20/ERC20.sol\":2479:2492  string memory */\n      0x60\n        /* \"ERC20/ERC20.sol\":2512:2519  _symbol */\n      0x04\n        /* \"ERC20/ERC20.sol\":2505:2519  return _symbol */\n      dup1\n      sload\n      tag_63\n      swap1\n      tag_64\n      jump\t// in\n        /* \"ERC20/ERC20.sol\":6783:7219  function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r... */\n    tag_51:\n        /* \"ERC20/ERC20.sol\":6876:6880  bool */\n      0x00\n        /* \"Utils/Context.sol\":736:746  msg.sender */\n      caller\n        /* \"ERC20/ERC20.sol\":6876:6880  bool */\n      dup2\n        /* \"ERC20/ERC20.sol\":6959:6984  allowance(owner, spender) */\n      tag_97\n        /* \"Utils/Context.sol\":736:746  msg.sender */\n      dup3\n        /* \"ERC20/ERC20.sol\":6976:6983  spender */\n      dup7\n        /* \"ERC20/ERC20.sol\":6959:6968  allowance */\n      tag_60\n        /* \"ERC20/ERC20.sol\":6959:6984  allowance(owner, spender) */\n      jump\t// in\n    tag_97:\n        /* \"ERC20/ERC20.sol\":6932:6984  uint256 currentAllowance = allowance(owner, spender) */\n      swap1\n      pop\n        /* \"ERC20/ERC20.sol\":7023:7038  subtractedValue */\n      dup4\n        /* \"ERC20/ERC20.sol\":7003:7019  currentAllowance */\n      dup2\n        /* \"ERC20/ERC20.sol\":7003:7038  currentAllowance >= subtractedValue */\n      lt\n      iszero\n        /* \"ERC20/ERC20.sol\":6995:7080  require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\") */\n      tag_98\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":4665:4667   */\n      0x20\n        /* \"ERC20/ERC20.sol\":6995:7080  require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":4647:4668   */\n      mstore\n        /* \"#utility.yul\":4704:4706   */\n      0x25\n        /* \"#utility.yul\":4684:4702   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":4677:4707   */\n      mstore\n        /* \"#utility.yul\":4743:4777   */\n      0x45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77\n        /* \"#utility.yul\":4723:4741   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":4716:4778   */\n      mstore\n      shl(0xd8, 0x207a65726f)\n        /* \"#utility.yul\":4794:4812   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":4787:4822   */\n      mstore\n        /* \"#utility.yul\":4839:4858   */\n      0x84\n      add\n        /* \"ERC20/ERC20.sol\":6995:7080  require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\") */\n    tag_99:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_98:\n        /* \"ERC20/ERC20.sol\":7116:7176  _approve(owner, spender, currentAllowance - subtractedValue) */\n      tag_79\n        /* \"ERC20/ERC20.sol\":7125:7130  owner */\n      dup3\n        /* \"ERC20/ERC20.sol\":7132:7139  spender */\n      dup7\n        /* \"ERC20/ERC20.sol\":7160:7175  subtractedValue */\n      dup7\n        /* \"ERC20/ERC20.sol\":7141:7157  currentAllowance */\n      dup5\n        /* \"ERC20/ERC20.sol\":7141:7175  currentAllowance - subtractedValue */\n      sub\n        /* \"ERC20/ERC20.sol\":7116:7124  _approve */\n      tag_73\n        /* \"ERC20/ERC20.sol\":7116:7176  _approve(owner, spender, currentAllowance - subtractedValue) */\n      jump\t// in\n        /* \"ERC20/ERC20.sol\":3830:4023  function transfer(address to, uint256 amount) public virtual override returns (bool) {\r... */\n    tag_55:\n        /* \"ERC20/ERC20.sol\":3909:3913  bool */\n      0x00\n        /* \"Utils/Context.sol\":736:746  msg.sender */\n      caller\n        /* \"ERC20/ERC20.sol\":3965:3993  _transfer(owner, to, amount) */\n      tag_72\n        /* \"Utils/Context.sol\":736:746  msg.sender */\n      dup2\n        /* \"ERC20/ERC20.sol\":3982:3984  to */\n      dup6\n        /* \"ERC20/ERC20.sol\":3986:3992  amount */\n      dup6\n        /* \"ERC20/ERC20.sol\":3965:3974  _transfer */\n      tag_80\n        /* \"ERC20/ERC20.sol\":3965:3993  _transfer(owner, to, amount) */\n      jump\t// in\n        /* \"ERC20/ERC20.sol\":4086:4237  function allowance(address owner, address spender) public view virtual override returns (uint256) {\r... */\n    tag_60:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"ERC20/ERC20.sol\":4202:4220  _allowances[owner] */\n      swap2\n      dup3\n      and\n        /* \"ERC20/ERC20.sol\":4175:4182  uint256 */\n      0x00\n        /* \"ERC20/ERC20.sol\":4202:4220  _allowances[owner] */\n      swap1\n      dup2\n      mstore\n        /* \"ERC20/ERC20.sol\":4202:4213  _allowances */\n      0x01\n        /* \"ERC20/ERC20.sol\":4202:4220  _allowances[owner] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"ERC20/ERC20.sol\":4202:4229  _allowances[owner][spender] */\n      swap4\n      swap1\n      swap5\n      and\n      dup3\n      mstore\n      swap2\n      swap1\n      swap2\n      mstore\n      keccak256\n      sload\n      swap1\n        /* \"ERC20/ERC20.sol\":4086:4237  function allowance(address owner, address spender) public view virtual override returns (uint256) {\r... */\n      jump\t// out\n        /* \"ERC20/ERC20.sol\":10417:10797  function _approve(\r... */\n    tag_73:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"ERC20/ERC20.sol\":10553:10572  owner != address(0) */\n      dup4\n      and\n        /* \"ERC20/ERC20.sol\":10545:10613  require(owner != address(0), \"ERC20: approve from the zero address\") */\n      tag_108\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":4260:4262   */\n      0x20\n        /* \"ERC20/ERC20.sol\":10545:10613  require(owner != address(0), \"ERC20: approve from the zero address\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":4242:4263   */\n      mstore\n        /* \"#utility.yul\":4299:4301   */\n      0x24\n        /* \"#utility.yul\":4279:4297   */\n      dup1\n      dup3\n      add\n        /* \"#utility.yul\":4272:4302   */\n      mstore\n        /* \"#utility.yul\":4338:4372   */\n      0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464\n        /* \"#utility.yul\":4318:4336   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":4311:4373   */\n      mstore\n      shl(0xe0, 0x72657373)\n        /* \"#utility.yul\":4389:4407   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":4382:4416   */\n      mstore\n        /* \"#utility.yul\":4433:4452   */\n      0x84\n      add\n        /* \"ERC20/ERC20.sol\":10545:10613  require(owner != address(0), \"ERC20: approve from the zero address\") */\n      tag_99\n        /* \"#utility.yul\":4232:4458   */\n      jump\n        /* \"ERC20/ERC20.sol\":10545:10613  require(owner != address(0), \"ERC20: approve from the zero address\") */\n    tag_108:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"ERC20/ERC20.sol\":10632:10653  spender != address(0) */\n      dup3\n      and\n        /* \"ERC20/ERC20.sol\":10624:10692  require(spender != address(0), \"ERC20: approve to the zero address\") */\n      tag_111\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":2686:2688   */\n      0x20\n        /* \"ERC20/ERC20.sol\":10624:10692  require(spender != address(0), \"ERC20: approve to the zero address\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":2668:2689   */\n      mstore\n        /* \"#utility.yul\":2725:2727   */\n      0x22\n        /* \"#utility.yul\":2705:2723   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":2698:2728   */\n      mstore\n        /* \"#utility.yul\":2764:2798   */\n      0x45524332303a20617070726f766520746f20746865207a65726f206164647265\n        /* \"#utility.yul\":2744:2762   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":2737:2799   */\n      mstore\n      shl(0xf0, 0x7373)\n        /* \"#utility.yul\":2815:2833   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":2808:2840   */\n      mstore\n        /* \"#utility.yul\":2857:2876   */\n      0x84\n      add\n        /* \"ERC20/ERC20.sol\":10624:10692  require(spender != address(0), \"ERC20: approve to the zero address\") */\n      tag_99\n        /* \"#utility.yul\":2658:2882   */\n      jump\n        /* \"ERC20/ERC20.sol\":10624:10692  require(spender != address(0), \"ERC20: approve to the zero address\") */\n    tag_111:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"ERC20/ERC20.sol\":10705:10723  _allowances[owner] */\n      dup4\n      dup2\n      and\n      0x00\n      dup2\n      dup2\n      mstore\n        /* \"ERC20/ERC20.sol\":10705:10716  _allowances */\n      0x01\n        /* \"ERC20/ERC20.sol\":10705:10723  _allowances[owner] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"ERC20/ERC20.sol\":10705:10732  _allowances[owner][spender] */\n      swap5\n      dup8\n      and\n      dup1\n      dup5\n      mstore\n      swap5\n      dup3\n      mstore\n      swap2\n      dup3\n      swap1\n      keccak256\n        /* \"ERC20/ERC20.sol\":10705:10741  _allowances[owner][spender] = amount */\n      dup6\n      swap1\n      sstore\n        /* \"ERC20/ERC20.sol\":10757:10789  Approval(owner, spender, amount) */\n      swap1\n      mload\n        /* \"#utility.yul\":5015:5040   */\n      dup5\n      dup2\n      mstore\n        /* \"ERC20/ERC20.sol\":10757:10789  Approval(owner, spender, amount) */\n      0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925\n      swap2\n        /* \"#utility.yul\":4988:5006   */\n      add\n        /* \"ERC20/ERC20.sol\":10757:10789  Approval(owner, spender, amount) */\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"ERC20/ERC20.sol\":10417:10797  function _approve(\r... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"ERC20/ERC20.sol\":11088:11541  function _spendAllowance(\r... */\n    tag_78:\n        /* \"ERC20/ERC20.sol\":11223:11247  uint256 currentAllowance */\n      0x00\n        /* \"ERC20/ERC20.sol\":11250:11275  allowance(owner, spender) */\n      tag_116\n        /* \"ERC20/ERC20.sol\":11260:11265  owner */\n      dup5\n        /* \"ERC20/ERC20.sol\":11267:11274  spender */\n      dup5\n        /* \"ERC20/ERC20.sol\":11250:11259  allowance */\n      tag_60\n        /* \"ERC20/ERC20.sol\":11250:11275  allowance(owner, spender) */\n      jump\t// in\n    tag_116:\n        /* \"ERC20/ERC20.sol\":11223:11275  uint256 currentAllowance = allowance(owner, spender) */\n      swap1\n      pop\n      not(0x00)\n        /* \"ERC20/ERC20.sol\":11290:11306  currentAllowance */\n      dup2\n        /* \"ERC20/ERC20.sol\":11290:11327  currentAllowance != type(uint256).max */\n      eq\n        /* \"ERC20/ERC20.sol\":11286:11534  if (currentAllowance != type(uint256).max) {\r... */\n      tag_121\n      jumpi\n        /* \"ERC20/ERC20.sol\":11372:11378  amount */\n      dup2\n        /* \"ERC20/ERC20.sol\":11352:11368  currentAllowance */\n      dup2\n        /* \"ERC20/ERC20.sol\":11352:11378  currentAllowance >= amount */\n      lt\n      iszero\n        /* \"ERC20/ERC20.sol\":11344:11412  require(currentAllowance >= amount, \"ERC20: insufficient allowance\") */\n      tag_118\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":3089:3091   */\n      0x20\n        /* \"ERC20/ERC20.sol\":11344:11412  require(currentAllowance >= amount, \"ERC20: insufficient allowance\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":3071:3092   */\n      mstore\n        /* \"#utility.yul\":3128:3130   */\n      0x1d\n        /* \"#utility.yul\":3108:3126   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":3101:3131   */\n      mstore\n        /* \"#utility.yul\":3167:3198   */\n      0x45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000\n        /* \"#utility.yul\":3147:3165   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":3140:3199   */\n      mstore\n        /* \"#utility.yul\":3216:3234   */\n      0x64\n      add\n        /* \"ERC20/ERC20.sol\":11344:11412  require(currentAllowance >= amount, \"ERC20: insufficient allowance\") */\n      tag_99\n        /* \"#utility.yul\":3061:3240   */\n      jump\n        /* \"ERC20/ERC20.sol\":11344:11412  require(currentAllowance >= amount, \"ERC20: insufficient allowance\") */\n    tag_118:\n        /* \"ERC20/ERC20.sol\":11456:11507  _approve(owner, spender, currentAllowance - amount) */\n      tag_121\n        /* \"ERC20/ERC20.sol\":11465:11470  owner */\n      dup5\n        /* \"ERC20/ERC20.sol\":11472:11479  spender */\n      dup5\n        /* \"ERC20/ERC20.sol\":11500:11506  amount */\n      dup5\n        /* \"ERC20/ERC20.sol\":11481:11497  currentAllowance */\n      dup5\n        /* \"ERC20/ERC20.sol\":11481:11506  currentAllowance - amount */\n      sub\n        /* \"ERC20/ERC20.sol\":11456:11464  _approve */\n      tag_73\n        /* \"ERC20/ERC20.sol\":11456:11507  _approve(owner, spender, currentAllowance - amount) */\n      jump\t// in\n    tag_121:\n        /* \"ERC20/ERC20.sol\":11088:11541  function _spendAllowance(\r... */\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"ERC20/ERC20.sol\":7698:8369  function _transfer(\r... */\n    tag_80:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"ERC20/ERC20.sol\":7829:7847  from != address(0) */\n      dup4\n      and\n        /* \"ERC20/ERC20.sol\":7821:7889  require(from != address(0), \"ERC20: transfer from the zero address\") */\n      tag_123\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":3854:3856   */\n      0x20\n        /* \"ERC20/ERC20.sol\":7821:7889  require(from != address(0), \"ERC20: transfer from the zero address\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":3836:3857   */\n      mstore\n        /* \"#utility.yul\":3893:3895   */\n      0x25\n        /* \"#utility.yul\":3873:3891   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":3866:3896   */\n      mstore\n        /* \"#utility.yul\":3932:3966   */\n      0x45524332303a207472616e736665722066726f6d20746865207a65726f206164\n        /* \"#utility.yul\":3912:3930   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":3905:3967   */\n      mstore\n      shl(0xd8, 0x6472657373)\n        /* \"#utility.yul\":3983:4001   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":3976:4011   */\n      mstore\n        /* \"#utility.yul\":4028:4047   */\n      0x84\n      add\n        /* \"ERC20/ERC20.sol\":7821:7889  require(from != address(0), \"ERC20: transfer from the zero address\") */\n      tag_99\n        /* \"#utility.yul\":3826:4053   */\n      jump\n        /* \"ERC20/ERC20.sol\":7821:7889  require(from != address(0), \"ERC20: transfer from the zero address\") */\n    tag_123:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"ERC20/ERC20.sol\":7908:7924  to != address(0) */\n      dup3\n      and\n        /* \"ERC20/ERC20.sol\":7900:7964  require(to != address(0), \"ERC20: transfer to the zero address\") */\n      tag_126\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":2282:2284   */\n      0x20\n        /* \"ERC20/ERC20.sol\":7900:7964  require(to != address(0), \"ERC20: transfer to the zero address\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":2264:2285   */\n      mstore\n        /* \"#utility.yul\":2321:2323   */\n      0x23\n        /* \"#utility.yul\":2301:2319   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":2294:2324   */\n      mstore\n        /* \"#utility.yul\":2360:2394   */\n      0x45524332303a207472616e7366657220746f20746865207a65726f2061646472\n        /* \"#utility.yul\":2340:2358   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":2333:2395   */\n      mstore\n      shl(0xe8, 0x657373)\n        /* \"#utility.yul\":2411:2429   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":2404:2437   */\n      mstore\n        /* \"#utility.yul\":2454:2473   */\n      0x84\n      add\n        /* \"ERC20/ERC20.sol\":7900:7964  require(to != address(0), \"ERC20: transfer to the zero address\") */\n      tag_99\n        /* \"#utility.yul\":2254:2479   */\n      jump\n        /* \"ERC20/ERC20.sol\":7900:7964  require(to != address(0), \"ERC20: transfer to the zero address\") */\n    tag_126:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"ERC20/ERC20.sol\":8050:8065  _balances[from] */\n      dup4\n      and\n        /* \"ERC20/ERC20.sol\":8028:8047  uint256 fromBalance */\n      0x00\n        /* \"ERC20/ERC20.sol\":8050:8065  _balances[from] */\n      swap1\n      dup2\n      mstore\n      0x20\n      dup2\n      swap1\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n        /* \"ERC20/ERC20.sol\":8084:8105  fromBalance >= amount */\n      dup2\n      dup2\n      lt\n      iszero\n        /* \"ERC20/ERC20.sol\":8076:8148  require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\") */\n      tag_131\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":3447:3449   */\n      0x20\n        /* \"ERC20/ERC20.sol\":8076:8148  require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":3429:3450   */\n      mstore\n        /* \"#utility.yul\":3486:3488   */\n      0x26\n        /* \"#utility.yul\":3466:3484   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":3459:3489   */\n      mstore\n        /* \"#utility.yul\":3525:3559   */\n      0x45524332303a207472616e7366657220616d6f756e7420657863656564732062\n        /* \"#utility.yul\":3505:3523   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":3498:3560   */\n      mstore\n      shl(0xd0, 0x616c616e6365)\n        /* \"#utility.yul\":3576:3594   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":3569:3605   */\n      mstore\n        /* \"#utility.yul\":3622:3641   */\n      0x84\n      add\n        /* \"ERC20/ERC20.sol\":8076:8148  require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\") */\n      tag_99\n        /* \"#utility.yul\":3419:3647   */\n      jump\n        /* \"ERC20/ERC20.sol\":8076:8148  require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\") */\n    tag_131:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"ERC20/ERC20.sol\":8184:8199  _balances[from] */\n      dup1\n      dup6\n      and\n        /* \"ERC20/ERC20.sol\":8184:8193  _balances */\n      0x00\n        /* \"ERC20/ERC20.sol\":8184:8199  _balances[from] */\n      swap1\n      dup2\n      mstore\n      0x20\n      dup2\n      swap1\n      mstore\n      0x40\n      dup1\n      dup3\n      keccak256\n        /* \"ERC20/ERC20.sol\":8202:8222  fromBalance - amount */\n      dup6\n      dup6\n      sub\n        /* \"ERC20/ERC20.sol\":8184:8222  _balances[from] = fromBalance - amount */\n      swap1\n      sstore\n        /* \"ERC20/ERC20.sol\":8244:8257  _balances[to] */\n      swap2\n      dup6\n      and\n      dup2\n      mstore\n      swap1\n      dup2\n      keccak256\n        /* \"ERC20/ERC20.sol\":8244:8267  _balances[to] += amount */\n      dup1\n      sload\n        /* \"ERC20/ERC20.sol\":8216:8222  amount */\n      dup5\n      swap3\n        /* \"ERC20/ERC20.sol\":8184:8193  _balances */\n      swap1\n        /* \"ERC20/ERC20.sol\":8244:8267  _balances[to] += amount */\n      tag_134\n      swap1\n        /* \"ERC20/ERC20.sol\":8216:8222  amount */\n      dup5\n      swap1\n        /* \"ERC20/ERC20.sol\":8244:8267  _balances[to] += amount */\n      tag_87\n      jump\t// in\n    tag_134:\n      swap3\n      pop\n      pop\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"ERC20/ERC20.sol\":8300:8302  to */\n      dup3\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"ERC20/ERC20.sol\":8285:8311  Transfer(from, to, amount) */\n      and\n        /* \"ERC20/ERC20.sol\":8294:8298  from */\n      dup5\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"ERC20/ERC20.sol\":8285:8311  Transfer(from, to, amount) */\n      and\n      0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\n        /* \"ERC20/ERC20.sol\":8304:8310  amount */\n      dup5\n        /* \"ERC20/ERC20.sol\":8285:8311  Transfer(from, to, amount) */\n      mload(0x40)\n      tag_135\n      swap2\n        /* \"#utility.yul\":5015:5040   */\n      dup2\n      mstore\n        /* \"#utility.yul\":5003:5005   */\n      0x20\n        /* \"#utility.yul\":4988:5006   */\n      add\n      swap1\n        /* \"#utility.yul\":4970:5046   */\n      jump\n        /* \"ERC20/ERC20.sol\":8285:8311  Transfer(from, to, amount) */\n    tag_135:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"ERC20/ERC20.sol\":8324:8361  _afterTokenTransfer(from, to, amount) */\n      tag_121\n        /* \"ERC20/ERC20.sol\":12141:12266  function _beforeTokenTransfer(\r... */\n      jump\n        /* \"#utility.yul\":14:187   */\n    tag_141:\n        /* \"#utility.yul\":82:102   */\n      dup1\n      calldataload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":131:162   */\n      dup2\n      and\n        /* \"#utility.yul\":121:163   */\n      dup2\n      eq\n        /* \"#utility.yul\":111:113   */\n      tag_143\n      jumpi\n        /* \"#utility.yul\":177:178   */\n      0x00\n        /* \"#utility.yul\":174:175   */\n      dup1\n        /* \"#utility.yul\":167:179   */\n      revert\n        /* \"#utility.yul\":111:113   */\n    tag_143:\n        /* \"#utility.yul\":63:187   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":192:388   */\n    tag_43:\n        /* \"#utility.yul\":251:257   */\n      0x00\n        /* \"#utility.yul\":304:306   */\n      0x20\n        /* \"#utility.yul\":292:301   */\n      dup3\n        /* \"#utility.yul\":283:290   */\n      dup5\n        /* \"#utility.yul\":279:302   */\n      sub\n        /* \"#utility.yul\":275:307   */\n      slt\n        /* \"#utility.yul\":272:274   */\n      iszero\n      tag_145\n      jumpi\n        /* \"#utility.yul\":325:331   */\n      dup1\n        /* \"#utility.yul\":317:323   */\n      dup2\n        /* \"#utility.yul\":310:332   */\n      revert\n        /* \"#utility.yul\":272:274   */\n    tag_145:\n        /* \"#utility.yul\":353:382   */\n      tag_146\n        /* \"#utility.yul\":372:381   */\n      dup3\n        /* \"#utility.yul\":353:382   */\n      tag_141\n      jump\t// in\n    tag_146:\n        /* \"#utility.yul\":343:382   */\n      swap4\n        /* \"#utility.yul\":262:388   */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":393:663   */\n    tag_59:\n        /* \"#utility.yul\":461:467   */\n      0x00\n        /* \"#utility.yul\":469:475   */\n      dup1\n        /* \"#utility.yul\":522:524   */\n      0x40\n        /* \"#utility.yul\":510:519   */\n      dup4\n        /* \"#utility.yul\":501:508   */\n      dup6\n        /* \"#utility.yul\":497:520   */\n      sub\n        /* \"#utility.yul\":493:525   */\n      slt\n        /* \"#utility.yul\":490:492   */\n      iszero\n      tag_148\n      jumpi\n        /* \"#utility.yul\":543:549   */\n      dup1\n        /* \"#utility.yul\":535:541   */\n      dup2\n        /* \"#utility.yul\":528:550   */\n      revert\n        /* \"#utility.yul\":490:492   */\n    tag_148:\n        /* \"#utility.yul\":571:600   */\n      tag_149\n        /* \"#utility.yul\":590:599   */\n      dup4\n        /* \"#utility.yul\":571:600   */\n      tag_141\n      jump\t// in\n    tag_149:\n        /* \"#utility.yul\":561:600   */\n      swap2\n      pop\n        /* \"#utility.yul\":619:657   */\n      tag_150\n        /* \"#utility.yul\":653:655   */\n      0x20\n        /* \"#utility.yul\":642:651   */\n      dup5\n        /* \"#utility.yul\":638:656   */\n      add\n        /* \"#utility.yul\":619:657   */\n      tag_141\n      jump\t// in\n    tag_150:\n        /* \"#utility.yul\":609:657   */\n      swap1\n      pop\n        /* \"#utility.yul\":480:663   */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":668:1006   */\n    tag_31:\n        /* \"#utility.yul\":745:751   */\n      0x00\n        /* \"#utility.yul\":753:759   */\n      dup1\n        /* \"#utility.yul\":761:767   */\n      0x00\n        /* \"#utility.yul\":814:816   */\n      0x60\n        /* \"#utility.yul\":802:811   */\n      dup5\n        /* \"#utility.yul\":793:800   */\n      dup7\n        /* \"#utility.yul\":789:812   */\n      sub\n        /* \"#utility.yul\":785:817   */\n      slt\n        /* \"#utility.yul\":782:784   */\n      iszero\n      tag_152\n      jumpi\n        /* \"#utility.yul\":835:841   */\n      dup1\n        /* \"#utility.yul\":827:833   */\n      dup2\n        /* \"#utility.yul\":820:842   */\n      revert\n        /* \"#utility.yul\":782:784   */\n    tag_152:\n        /* \"#utility.yul\":863:892   */\n      tag_153\n        /* \"#utility.yul\":882:891   */\n      dup5\n        /* \"#utility.yul\":863:892   */\n      tag_141\n      jump\t// in\n    tag_153:\n        /* \"#utility.yul\":853:892   */\n      swap3\n      pop\n        /* \"#utility.yul\":911:949   */\n      tag_154\n        /* \"#utility.yul\":945:947   */\n      0x20\n        /* \"#utility.yul\":934:943   */\n      dup6\n        /* \"#utility.yul\":930:948   */\n      add\n        /* \"#utility.yul\":911:949   */\n      tag_141\n      jump\t// in\n    tag_154:\n        /* \"#utility.yul\":901:949   */\n      swap2\n      pop\n        /* \"#utility.yul\":996:998   */\n      0x40\n        /* \"#utility.yul\":985:994   */\n      dup5\n        /* \"#utility.yul\":981:999   */\n      add\n        /* \"#utility.yul\":968:1000   */\n      calldataload\n        /* \"#utility.yul\":958:1000   */\n      swap1\n      pop\n        /* \"#utility.yul\":772:1006   */\n      swap3\n      pop\n      swap3\n      pop\n      swap3\n      jump\t// out\n        /* \"#utility.yul\":1011:1275   */\n    tag_21:\n        /* \"#utility.yul\":1079:1085   */\n      0x00\n        /* \"#utility.yul\":1087:1093   */\n      dup1\n        /* \"#utility.yul\":1140:1142   */\n      0x40\n        /* \"#utility.yul\":1128:1137   */\n      dup4\n        /* \"#utility.yul\":1119:1126   */\n      dup6\n        /* \"#utility.yul\":1115:1138   */\n      sub\n        /* \"#utility.yul\":1111:1143   */\n      slt\n        /* \"#utility.yul\":1108:1110   */\n      iszero\n      tag_156\n      jumpi\n        /* \"#utility.yul\":1161:1167   */\n      dup2\n        /* \"#utility.yul\":1153:1159   */\n      dup3\n        /* \"#utility.yul\":1146:1168   */\n      revert\n        /* \"#utility.yul\":1108:1110   */\n    tag_156:\n        /* \"#utility.yul\":1189:1218   */\n      tag_157\n        /* \"#utility.yul\":1208:1217   */\n      dup4\n        /* \"#utility.yul\":1189:1218   */\n      tag_141\n      jump\t// in\n    tag_157:\n        /* \"#utility.yul\":1179:1218   */\n      swap5\n        /* \"#utility.yul\":1265:1267   */\n      0x20\n        /* \"#utility.yul\":1250:1268   */\n      swap4\n      swap1\n      swap4\n      add\n        /* \"#utility.yul\":1237:1269   */\n      calldataload\n      swap4\n      pop\n      pop\n      pop\n        /* \"#utility.yul\":1098:1275   */\n      jump\t// out\n        /* \"#utility.yul\":1472:2075   */\n    tag_18:\n        /* \"#utility.yul\":1584:1588   */\n      0x00\n        /* \"#utility.yul\":1613:1615   */\n      0x20\n        /* \"#utility.yul\":1642:1644   */\n      dup1\n        /* \"#utility.yul\":1631:1640   */\n      dup4\n        /* \"#utility.yul\":1624:1645   */\n      mstore\n        /* \"#utility.yul\":1674:1680   */\n      dup4\n        /* \"#utility.yul\":1668:1681   */\n      mload\n        /* \"#utility.yul\":1717:1723   */\n      dup1\n        /* \"#utility.yul\":1712:1714   */\n      dup3\n        /* \"#utility.yul\":1701:1710   */\n      dup6\n        /* \"#utility.yul\":1697:1715   */\n      add\n        /* \"#utility.yul\":1690:1724   */\n      mstore\n        /* \"#utility.yul\":1742:1746   */\n      dup3\n        /* \"#utility.yul\":1755:1895   */\n    tag_160:\n        /* \"#utility.yul\":1769:1775   */\n      dup2\n        /* \"#utility.yul\":1766:1767   */\n      dup2\n        /* \"#utility.yul\":1763:1776   */\n      lt\n        /* \"#utility.yul\":1755:1895   */\n      iszero\n      tag_162\n      jumpi\n        /* \"#utility.yul\":1864:1878   */\n      dup6\n      dup2\n      add\n        /* \"#utility.yul\":1860:1883   */\n      dup4\n      add\n        /* \"#utility.yul\":1854:1884   */\n      mload\n        /* \"#utility.yul\":1830:1847   */\n      dup6\n      dup3\n      add\n        /* \"#utility.yul\":1849:1851   */\n      0x40\n        /* \"#utility.yul\":1826:1852   */\n      add\n        /* \"#utility.yul\":1819:1885   */\n      mstore\n        /* \"#utility.yul\":1784:1794   */\n      dup3\n      add\n        /* \"#utility.yul\":1755:1895   */\n      jump(tag_160)\n    tag_162:\n        /* \"#utility.yul\":1913:1919   */\n      dup2\n        /* \"#utility.yul\":1910:1911   */\n      dup2\n        /* \"#utility.yul\":1907:1920   */\n      gt\n        /* \"#utility.yul\":1904:1906   */\n      iszero\n      tag_163\n      jumpi\n        /* \"#utility.yul\":1983:1987   */\n      dup4\n        /* \"#utility.yul\":1978:1980   */\n      0x40\n        /* \"#utility.yul\":1969:1975   */\n      dup4\n        /* \"#utility.yul\":1958:1967   */\n      dup8\n        /* \"#utility.yul\":1954:1976   */\n      add\n        /* \"#utility.yul\":1950:1981   */\n      add\n        /* \"#utility.yul\":1943:1988   */\n      mstore\n        /* \"#utility.yul\":1904:1906   */\n    tag_163:\n      pop\n        /* \"#utility.yul\":2059:2061   */\n      0x1f\n        /* \"#utility.yul\":2038:2053   */\n      add\n      not(0x1f)\n        /* \"#utility.yul\":2034:2063   */\n      and\n        /* \"#utility.yul\":2019:2064   */\n      swap3\n      swap1\n      swap3\n      add\n        /* \"#utility.yul\":2066:2068   */\n      0x40\n        /* \"#utility.yul\":2015:2069   */\n      add\n      swap4\n        /* \"#utility.yul\":1593:2075   */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5051:5280   */\n    tag_87:\n        /* \"#utility.yul\":5091:5094   */\n      0x00\n        /* \"#utility.yul\":5122:5123   */\n      dup3\n        /* \"#utility.yul\":5118:5124   */\n      not\n        /* \"#utility.yul\":5115:5116   */\n      dup3\n        /* \"#utility.yul\":5112:5125   */\n      gt\n        /* \"#utility.yul\":5109:5111   */\n      iszero\n      tag_173\n      jumpi\n      shl(0xe0, 0x4e487b71)\n        /* \"#utility.yul\":5148:5181   */\n      dup2\n      mstore\n        /* \"#utility.yul\":5204:5208   */\n      0x11\n        /* \"#utility.yul\":5201:5202   */\n      0x04\n        /* \"#utility.yul\":5194:5209   */\n      mstore\n        /* \"#utility.yul\":5234:5238   */\n      0x24\n        /* \"#utility.yul\":5155:5158   */\n      dup2\n        /* \"#utility.yul\":5222:5239   */\n      revert\n        /* \"#utility.yul\":5109:5111   */\n    tag_173:\n      pop\n        /* \"#utility.yul\":5265:5274   */\n      add\n      swap1\n        /* \"#utility.yul\":5099:5280   */\n      jump\t// out\n        /* \"#utility.yul\":5285:5665   */\n    tag_64:\n        /* \"#utility.yul\":5364:5365   */\n      0x01\n        /* \"#utility.yul\":5360:5372   */\n      dup2\n      dup2\n      shr\n      swap1\n        /* \"#utility.yul\":5407:5419   */\n      dup3\n      and\n      dup1\n        /* \"#utility.yul\":5428:5430   */\n      tag_175\n      jumpi\n        /* \"#utility.yul\":5482:5486   */\n      0x7f\n        /* \"#utility.yul\":5474:5480   */\n      dup3\n        /* \"#utility.yul\":5470:5487   */\n      and\n        /* \"#utility.yul\":5460:5487   */\n      swap2\n      pop\n        /* \"#utility.yul\":5428:5430   */\n    tag_175:\n        /* \"#utility.yul\":5535:5537   */\n      0x20\n        /* \"#utility.yul\":5527:5533   */\n      dup3\n        /* \"#utility.yul\":5524:5538   */\n      lt\n        /* \"#utility.yul\":5504:5522   */\n      dup2\n        /* \"#utility.yul\":5501:5539   */\n      eq\n        /* \"#utility.yul\":5498:5500   */\n      iszero\n      tag_176\n      jumpi\n        /* \"#utility.yul\":5581:5591   */\n      0x4e487b71\n        /* \"#utility.yul\":5576:5579   */\n      0xe0\n        /* \"#utility.yul\":5572:5592   */\n      shl\n        /* \"#utility.yul\":5569:5570   */\n      0x00\n        /* \"#utility.yul\":5562:5593   */\n      mstore\n        /* \"#utility.yul\":5616:5620   */\n      0x22\n        /* \"#utility.yul\":5613:5614   */\n      0x04\n        /* \"#utility.yul\":5606:5621   */\n      mstore\n        /* \"#utility.yul\":5644:5648   */\n      0x24\n        /* \"#utility.yul\":5641:5642   */\n      0x00\n        /* \"#utility.yul\":5634:5649   */\n      revert\n        /* \"#utility.yul\":5498:5500   */\n    tag_176:\n      pop\n        /* \"#utility.yul\":5340:5665   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n\n    auxdata: 0xa2646970667358221220c92c03cd519d545ecfd82912cd8ce8d5c8a8b337db27724fc62cc5e62f66d5be64736f6c63430008040033\n}\n",
						"bytecode": {
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:2039:10",
										"statements": [
											{
												"nodeType": "YulBlock",
												"src": "6:3:10",
												"statements": []
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "78:845:10",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "127:24:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "array",
																					"nodeType": "YulIdentifier",
																					"src": "136:5:10"
																				},
																				{
																					"name": "array",
																					"nodeType": "YulIdentifier",
																					"src": "143:5:10"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "129:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "129:20:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "129:20:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "106:6:10"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "114:4:10",
																						"type": "",
																						"value": "0x1f"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "102:3:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "102:17:10"
																			},
																			{
																				"name": "end",
																				"nodeType": "YulIdentifier",
																				"src": "121:3:10"
																			}
																		],
																		"functionName": {
																			"name": "slt",
																			"nodeType": "YulIdentifier",
																			"src": "98:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "98:27:10"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "91:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "91:35:10"
															},
															"nodeType": "YulIf",
															"src": "88:2:10"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "160:23:10",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "176:6:10"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "170:5:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "170:13:10"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "164:2:10",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "192:28:10",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "210:2:10",
																				"type": "",
																				"value": "64"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "214:1:10",
																				"type": "",
																				"value": "1"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "206:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "206:10:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "218:1:10",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "202:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "202:18:10"
															},
															"variables": [
																{
																	"name": "_2",
																	"nodeType": "YulTypedName",
																	"src": "196:2:10",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "243:22:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x41",
																				"nodeType": "YulIdentifier",
																				"src": "245:16:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "245:18:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "245:18:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "235:2:10"
																	},
																	{
																		"name": "_2",
																		"nodeType": "YulIdentifier",
																		"src": "239:2:10"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "232:2:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "232:10:10"
															},
															"nodeType": "YulIf",
															"src": "229:2:10"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "274:17:10",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "288:2:10",
																		"type": "",
																		"value": "31"
																	}
																],
																"functionName": {
																	"name": "not",
																	"nodeType": "YulIdentifier",
																	"src": "284:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "284:7:10"
															},
															"variables": [
																{
																	"name": "_3",
																	"nodeType": "YulTypedName",
																	"src": "278:2:10",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "300:23:10",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "320:2:10",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "314:5:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "314:9:10"
															},
															"variables": [
																{
																	"name": "memPtr",
																	"nodeType": "YulTypedName",
																	"src": "304:6:10",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "332:71:10",
															"value": {
																"arguments": [
																	{
																		"name": "memPtr",
																		"nodeType": "YulIdentifier",
																		"src": "354:6:10"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"name": "_1",
																										"nodeType": "YulIdentifier",
																										"src": "378:2:10"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "382:4:10",
																										"type": "",
																										"value": "0x1f"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nodeType": "YulIdentifier",
																									"src": "374:3:10"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "374:13:10"
																							},
																							{
																								"name": "_3",
																								"nodeType": "YulIdentifier",
																								"src": "389:2:10"
																							}
																						],
																						"functionName": {
																							"name": "and",
																							"nodeType": "YulIdentifier",
																							"src": "370:3:10"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "370:22:10"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "394:2:10",
																						"type": "",
																						"value": "63"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "366:3:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "366:31:10"
																			},
																			{
																				"name": "_3",
																				"nodeType": "YulIdentifier",
																				"src": "399:2:10"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "362:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "362:40:10"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "350:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "350:53:10"
															},
															"variables": [
																{
																	"name": "newFreePtr",
																	"nodeType": "YulTypedName",
																	"src": "336:10:10",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "462:22:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x41",
																				"nodeType": "YulIdentifier",
																				"src": "464:16:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "464:18:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "464:18:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "newFreePtr",
																				"nodeType": "YulIdentifier",
																				"src": "421:10:10"
																			},
																			{
																				"name": "_2",
																				"nodeType": "YulIdentifier",
																				"src": "433:2:10"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "418:2:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "418:18:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "newFreePtr",
																				"nodeType": "YulIdentifier",
																				"src": "441:10:10"
																			},
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "453:6:10"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nodeType": "YulIdentifier",
																			"src": "438:2:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "438:22:10"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "415:2:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "415:46:10"
															},
															"nodeType": "YulIf",
															"src": "412:2:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "500:2:10",
																		"type": "",
																		"value": "64"
																	},
																	{
																		"name": "newFreePtr",
																		"nodeType": "YulIdentifier",
																		"src": "504:10:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "493:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "493:22:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "493:22:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "memPtr",
																		"nodeType": "YulIdentifier",
																		"src": "531:6:10"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "539:2:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "524:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "524:18:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "524:18:10"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "551:14:10",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "561:4:10",
																"type": "",
																"value": "0x20"
															},
															"variables": [
																{
																	"name": "_4",
																	"nodeType": "YulTypedName",
																	"src": "555:2:10",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "611:24:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "array",
																					"nodeType": "YulIdentifier",
																					"src": "620:5:10"
																				},
																				{
																					"name": "array",
																					"nodeType": "YulIdentifier",
																					"src": "627:5:10"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "613:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "613:20:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "613:20:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "588:6:10"
																					},
																					{
																						"name": "_1",
																						"nodeType": "YulIdentifier",
																						"src": "596:2:10"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "584:3:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "584:15:10"
																			},
																			{
																				"name": "_4",
																				"nodeType": "YulIdentifier",
																				"src": "601:2:10"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "580:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "580:24:10"
																	},
																	{
																		"name": "end",
																		"nodeType": "YulIdentifier",
																		"src": "606:3:10"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "577:2:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "577:33:10"
															},
															"nodeType": "YulIf",
															"src": "574:2:10"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "644:14:10",
															"value": {
																"name": "array",
																"nodeType": "YulIdentifier",
																"src": "653:5:10"
															},
															"variables": [
																{
																	"name": "i",
																	"nodeType": "YulTypedName",
																	"src": "648:1:10",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "713:87:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "memPtr",
																									"nodeType": "YulIdentifier",
																									"src": "742:6:10"
																								},
																								{
																									"name": "i",
																									"nodeType": "YulIdentifier",
																									"src": "750:1:10"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "738:3:10"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "738:14:10"
																						},
																						{
																							"name": "_4",
																							"nodeType": "YulIdentifier",
																							"src": "754:2:10"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "734:3:10"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "734:23:10"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"arguments": [
																										{
																											"name": "offset",
																											"nodeType": "YulIdentifier",
																											"src": "773:6:10"
																										},
																										{
																											"name": "i",
																											"nodeType": "YulIdentifier",
																											"src": "781:1:10"
																										}
																									],
																									"functionName": {
																										"name": "add",
																										"nodeType": "YulIdentifier",
																										"src": "769:3:10"
																									},
																									"nodeType": "YulFunctionCall",
																									"src": "769:14:10"
																								},
																								{
																									"name": "_4",
																									"nodeType": "YulIdentifier",
																									"src": "785:2:10"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "765:3:10"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "765:23:10"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nodeType": "YulIdentifier",
																						"src": "759:5:10"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "759:30:10"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "727:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "727:63:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "727:63:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "678:1:10"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "681:2:10"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "675:2:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "675:9:10"
															},
															"nodeType": "YulForLoop",
															"post": {
																"nodeType": "YulBlock",
																"src": "685:19:10",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "687:15:10",
																		"value": {
																			"arguments": [
																				{
																					"name": "i",
																					"nodeType": "YulIdentifier",
																					"src": "696:1:10"
																				},
																				{
																					"name": "_4",
																					"nodeType": "YulIdentifier",
																					"src": "699:2:10"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "692:3:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "692:10:10"
																		},
																		"variableNames": [
																			{
																				"name": "i",
																				"nodeType": "YulIdentifier",
																				"src": "687:1:10"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nodeType": "YulBlock",
																"src": "671:3:10",
																"statements": []
															},
															"src": "667:133:10"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "830:63:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "memPtr",
																									"nodeType": "YulIdentifier",
																									"src": "859:6:10"
																								},
																								{
																									"name": "_1",
																									"nodeType": "YulIdentifier",
																									"src": "867:2:10"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "855:3:10"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "855:15:10"
																						},
																						{
																							"name": "_4",
																							"nodeType": "YulIdentifier",
																							"src": "872:2:10"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "851:3:10"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "851:24:10"
																				},
																				{
																					"name": "array",
																					"nodeType": "YulIdentifier",
																					"src": "877:5:10"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "844:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "844:39:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "844:39:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "815:1:10"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "818:2:10"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "812:2:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "812:9:10"
															},
															"nodeType": "YulIf",
															"src": "809:2:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "902:15:10",
															"value": {
																"name": "memPtr",
																"nodeType": "YulIdentifier",
																"src": "911:6:10"
															},
															"variableNames": [
																{
																	"name": "array",
																	"nodeType": "YulIdentifier",
																	"src": "902:5:10"
																}
															]
														}
													]
												},
												"name": "abi_decode_string_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "52:6:10",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "60:3:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "array",
														"nodeType": "YulTypedName",
														"src": "68:5:10",
														"type": ""
													}
												],
												"src": "14:909:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1046:474:10",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1092:26:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "1101:6:10"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "1109:6:10"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1094:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1094:22:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1094:22:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1067:7:10"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1076:9:10"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1063:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1063:23:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1088:2:10",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1059:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1059:32:10"
															},
															"nodeType": "YulIf",
															"src": "1056:2:10"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1127:30:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1147:9:10"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "1141:5:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1141:16:10"
															},
															"variables": [
																{
																	"name": "offset",
																	"nodeType": "YulTypedName",
																	"src": "1131:6:10",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1166:28:10",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1184:2:10",
																				"type": "",
																				"value": "64"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1188:1:10",
																				"type": "",
																				"value": "1"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "1180:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1180:10:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1192:1:10",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "1176:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1176:18:10"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "1170:2:10",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1221:26:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "1230:6:10"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "1238:6:10"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1223:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1223:22:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1223:22:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "1209:6:10"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "1217:2:10"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "1206:2:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1206:14:10"
															},
															"nodeType": "YulIf",
															"src": "1203:2:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1256:71:10",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1299:9:10"
																			},
																			{
																				"name": "offset",
																				"nodeType": "YulIdentifier",
																				"src": "1310:6:10"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1295:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1295:22:10"
																	},
																	{
																		"name": "dataEnd",
																		"nodeType": "YulIdentifier",
																		"src": "1319:7:10"
																	}
																],
																"functionName": {
																	"name": "abi_decode_string_fromMemory",
																	"nodeType": "YulIdentifier",
																	"src": "1266:28:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1266:61:10"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "1256:6:10"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1336:41:10",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1362:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1373:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1358:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1358:18:10"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "1352:5:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1352:25:10"
															},
															"variables": [
																{
																	"name": "offset_1",
																	"nodeType": "YulTypedName",
																	"src": "1340:8:10",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1406:26:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value1",
																					"nodeType": "YulIdentifier",
																					"src": "1415:6:10"
																				},
																				{
																					"name": "value1",
																					"nodeType": "YulIdentifier",
																					"src": "1423:6:10"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1408:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1408:22:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1408:22:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "offset_1",
																		"nodeType": "YulIdentifier",
																		"src": "1392:8:10"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "1402:2:10"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "1389:2:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1389:16:10"
															},
															"nodeType": "YulIf",
															"src": "1386:2:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1441:73:10",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1484:9:10"
																			},
																			{
																				"name": "offset_1",
																				"nodeType": "YulIdentifier",
																				"src": "1495:8:10"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1480:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1480:24:10"
																	},
																	{
																		"name": "dataEnd",
																		"nodeType": "YulIdentifier",
																		"src": "1506:7:10"
																	}
																],
																"functionName": {
																	"name": "abi_decode_string_fromMemory",
																	"nodeType": "YulIdentifier",
																	"src": "1451:28:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1451:63:10"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "1441:6:10"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_string_memory_ptrt_string_memory_ptr_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1004:9:10",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1015:7:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1027:6:10",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "1035:6:10",
														"type": ""
													}
												],
												"src": "928:592:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1580:325:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1590:22:10",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1604:1:10",
																		"type": "",
																		"value": "1"
																	},
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "1607:4:10"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "1600:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1600:12:10"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nodeType": "YulIdentifier",
																	"src": "1590:6:10"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1621:38:10",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "1651:4:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1657:1:10",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "1647:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1647:12:10"
															},
															"variables": [
																{
																	"name": "outOfPlaceEncoding",
																	"nodeType": "YulTypedName",
																	"src": "1625:18:10",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1698:31:10",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "1700:27:10",
																		"value": {
																			"arguments": [
																				{
																					"name": "length",
																					"nodeType": "YulIdentifier",
																					"src": "1714:6:10"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1722:4:10",
																					"type": "",
																					"value": "0x7f"
																				}
																			],
																			"functionName": {
																				"name": "and",
																				"nodeType": "YulIdentifier",
																				"src": "1710:3:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1710:17:10"
																		},
																		"variableNames": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "1700:6:10"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "1678:18:10"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "1671:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1671:26:10"
															},
															"nodeType": "YulIf",
															"src": "1668:2:10"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1788:111:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1809:1:10",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "1816:3:10",
																							"type": "",
																							"value": "224"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "1821:10:10",
																							"type": "",
																							"value": "0x4e487b71"
																						}
																					],
																					"functionName": {
																						"name": "shl",
																						"nodeType": "YulIdentifier",
																						"src": "1812:3:10"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "1812:20:10"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "1802:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1802:31:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1802:31:10"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1853:1:10",
																					"type": "",
																					"value": "4"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1856:4:10",
																					"type": "",
																					"value": "0x22"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "1846:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1846:15:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1846:15:10"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1881:1:10",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1884:4:10",
																					"type": "",
																					"value": "0x24"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1874:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1874:15:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1874:15:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "1744:18:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "1767:6:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1775:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nodeType": "YulIdentifier",
																			"src": "1764:2:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1764:14:10"
																	}
																],
																"functionName": {
																	"name": "eq",
																	"nodeType": "YulIdentifier",
																	"src": "1741:2:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1741:38:10"
															},
															"nodeType": "YulIf",
															"src": "1738:2:10"
														}
													]
												},
												"name": "extract_byte_array_length",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "data",
														"nodeType": "YulTypedName",
														"src": "1560:4:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "1569:6:10",
														"type": ""
													}
												],
												"src": "1525:380:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1942:95:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1959:1:10",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1966:3:10",
																				"type": "",
																				"value": "224"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1971:10:10",
																				"type": "",
																				"value": "0x4e487b71"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "1962:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1962:20:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1952:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1952:31:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1952:31:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1999:1:10",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2002:4:10",
																		"type": "",
																		"value": "0x41"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1992:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1992:15:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1992:15:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2023:1:10",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2026:4:10",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "2016:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2016:15:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2016:15:10"
														}
													]
												},
												"name": "panic_error_0x41",
												"nodeType": "YulFunctionDefinition",
												"src": "1910:127:10"
											}
										]
									},
									"contents": "{\n    { }\n    function abi_decode_string_fromMemory(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(array, array) }\n        let _1 := mload(offset)\n        let _2 := sub(shl(64, 1), 1)\n        if gt(_1, _2) { panic_error_0x41() }\n        let _3 := not(31)\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(and(add(_1, 0x1f), _3), 63), _3))\n        if or(gt(newFreePtr, _2), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        mstore(memPtr, _1)\n        let _4 := 0x20\n        if gt(add(add(offset, _1), _4), end) { revert(array, array) }\n        let i := array\n        for { } lt(i, _1) { i := add(i, _4) }\n        {\n            mstore(add(add(memPtr, i), _4), mload(add(add(offset, i), _4)))\n        }\n        if gt(i, _1)\n        {\n            mstore(add(add(memPtr, _1), _4), array)\n        }\n        array := memPtr\n    }\n    function abi_decode_tuple_t_string_memory_ptrt_string_memory_ptr_fromMemory(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(value0, value0) }\n        let offset := mload(headStart)\n        let _1 := sub(shl(64, 1), 1)\n        if gt(offset, _1) { revert(value0, value0) }\n        value0 := abi_decode_string_fromMemory(add(headStart, offset), dataEnd)\n        let offset_1 := mload(add(headStart, 32))\n        if gt(offset_1, _1) { revert(value1, value1) }\n        value1 := abi_decode_string_fromMemory(add(headStart, offset_1), dataEnd)\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n}",
									"id": 10,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"linkReferences": {},
							"object": "60806040523480156200001157600080fd5b5060405162000b0238038062000b028339810160408190526200003491620001c1565b81516200004990600390602085019062000068565b5080516200005f90600490602084019062000068565b5050506200027b565b828054620000769062000228565b90600052602060002090601f0160209004810192826200009a5760008555620000e5565b82601f10620000b557805160ff1916838001178555620000e5565b82800160010185558215620000e5579182015b82811115620000e5578251825591602001919060010190620000c8565b50620000f3929150620000f7565b5090565b5b80821115620000f35760008155600101620000f8565b600082601f8301126200011f578081fd5b81516001600160401b03808211156200013c576200013c62000265565b604051601f8301601f19908116603f0116810190828211818310171562000167576200016762000265565b8160405283815260209250868385880101111562000183578485fd5b8491505b83821015620001a6578582018301518183018401529082019062000187565b83821115620001b757848385830101525b9695505050505050565b60008060408385031215620001d4578182fd5b82516001600160401b0380821115620001eb578384fd5b620001f9868387016200010e565b935060208501519150808211156200020f578283fd5b506200021e858286016200010e565b9150509250929050565b600181811c908216806200023d57607f821691505b602082108114156200025f57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b610877806200028b6000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c80633950935111610071578063395093511461011b57806370a082311461012e57806395d89b4114610157578063a457c2d71461015f578063a9059cbb14610172578063dd62ed3e1461018557600080fd5b806306fdde03146100ae578063095ea7b3146100cc57806318160ddd146100ef57806323b872dd14610101578063313ce56714610114575b600080fd5b6100b6610198565b6040516100c3919061078f565b60405180910390f35b6100df6100da366004610766565b61022a565b60405190151581526020016100c3565b6002545b6040519081526020016100c3565b6100df61010f36600461072b565b610242565b60126100f3565b6100df610129366004610766565b610266565b6100f361013c3660046106d8565b6001600160a01b031660009081526020819052604090205490565b6100b6610288565b6100df61016d366004610766565b610297565b6100df610180366004610766565b610317565b6100f36101933660046106f9565b610325565b6060600380546101a790610806565b80601f01602080910402602001604051908101604052809291908181526020018280546101d390610806565b80156102205780601f106101f557610100808354040283529160200191610220565b820191906000526020600020905b81548152906001019060200180831161020357829003601f168201915b5050505050905090565b600033610238818585610350565b5060019392505050565b600033610250858285610474565b61025b8585856104ee565b506001949350505050565b6000336102388185856102798383610325565b61028391906107e2565b610350565b6060600480546101a790610806565b600033816102a58286610325565b90508381101561030a5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084015b60405180910390fd5b61025b8286868403610350565b6000336102388185856104ee565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6001600160a01b0383166103b25760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610301565b6001600160a01b0382166104135760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610301565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b60006104808484610325565b905060001981146104e857818110156104db5760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610301565b6104e88484848403610350565b50505050565b6001600160a01b0383166105525760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610301565b6001600160a01b0382166105b45760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610301565b6001600160a01b0383166000908152602081905260409020548181101561062c5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610301565b6001600160a01b038085166000908152602081905260408082208585039055918516815290812080548492906106639084906107e2565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516106af91815260200190565b60405180910390a36104e8565b80356001600160a01b03811681146106d357600080fd5b919050565b6000602082840312156106e9578081fd5b6106f2826106bc565b9392505050565b6000806040838503121561070b578081fd5b610714836106bc565b9150610722602084016106bc565b90509250929050565b60008060006060848603121561073f578081fd5b610748846106bc565b9250610756602085016106bc565b9150604084013590509250925092565b60008060408385031215610778578182fd5b610781836106bc565b946020939093013593505050565b6000602080835283518082850152825b818110156107bb5785810183015185820160400152820161079f565b818111156107cc5783604083870101525b50601f01601f1916929092016040019392505050565b6000821982111561080157634e487b7160e01b81526011600452602481fd5b500190565b600181811c9082168061081a57607f821691505b6020821081141561083b57634e487b7160e01b600052602260045260246000fd5b5091905056fea2646970667358221220c92c03cd519d545ecfd82912cd8ce8d5c8a8b337db27724fc62cc5e62f66d5be64736f6c63430008040033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0xB02 CODESIZE SUB DUP1 PUSH3 0xB02 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x34 SWAP2 PUSH3 0x1C1 JUMP JUMPDEST DUP2 MLOAD PUSH3 0x49 SWAP1 PUSH1 0x3 SWAP1 PUSH1 0x20 DUP6 ADD SWAP1 PUSH3 0x68 JUMP JUMPDEST POP DUP1 MLOAD PUSH3 0x5F SWAP1 PUSH1 0x4 SWAP1 PUSH1 0x20 DUP5 ADD SWAP1 PUSH3 0x68 JUMP JUMPDEST POP POP POP PUSH3 0x27B JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH3 0x76 SWAP1 PUSH3 0x228 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH3 0x9A JUMPI PUSH1 0x0 DUP6 SSTORE PUSH3 0xE5 JUMP JUMPDEST DUP3 PUSH1 0x1F LT PUSH3 0xB5 JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH3 0xE5 JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH3 0xE5 JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH3 0xE5 JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH3 0xC8 JUMP JUMPDEST POP PUSH3 0xF3 SWAP3 SWAP2 POP PUSH3 0xF7 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH3 0xF3 JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH3 0xF8 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH3 0x11F JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH3 0x13C JUMPI PUSH3 0x13C PUSH3 0x265 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP4 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP3 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH3 0x167 JUMPI PUSH3 0x167 PUSH3 0x265 JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP4 DUP2 MSTORE PUSH1 0x20 SWAP3 POP DUP7 DUP4 DUP6 DUP9 ADD ADD GT ISZERO PUSH3 0x183 JUMPI DUP5 DUP6 REVERT JUMPDEST DUP5 SWAP2 POP JUMPDEST DUP4 DUP3 LT ISZERO PUSH3 0x1A6 JUMPI DUP6 DUP3 ADD DUP4 ADD MLOAD DUP2 DUP4 ADD DUP5 ADD MSTORE SWAP1 DUP3 ADD SWAP1 PUSH3 0x187 JUMP JUMPDEST DUP4 DUP3 GT ISZERO PUSH3 0x1B7 JUMPI DUP5 DUP4 DUP6 DUP4 ADD ADD MSTORE JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH3 0x1D4 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH3 0x1EB JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH3 0x1F9 DUP7 DUP4 DUP8 ADD PUSH3 0x10E JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD MLOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH3 0x20F JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH3 0x21E DUP6 DUP3 DUP7 ADD PUSH3 0x10E JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH3 0x23D JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH3 0x25F JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x877 DUP1 PUSH3 0x28B PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xA9 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x39509351 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x11B JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x12E JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x157 JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x15F JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x172 JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x185 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0xAE JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0xCC JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0xEF JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x101 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x114 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB6 PUSH2 0x198 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xC3 SWAP2 SWAP1 PUSH2 0x78F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xDF PUSH2 0xDA CALLDATASIZE PUSH1 0x4 PUSH2 0x766 JUMP JUMPDEST PUSH2 0x22A JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xC3 JUMP JUMPDEST PUSH1 0x2 SLOAD JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xC3 JUMP JUMPDEST PUSH2 0xDF PUSH2 0x10F CALLDATASIZE PUSH1 0x4 PUSH2 0x72B JUMP JUMPDEST PUSH2 0x242 JUMP JUMPDEST PUSH1 0x12 PUSH2 0xF3 JUMP JUMPDEST PUSH2 0xDF PUSH2 0x129 CALLDATASIZE PUSH1 0x4 PUSH2 0x766 JUMP JUMPDEST PUSH2 0x266 JUMP JUMPDEST PUSH2 0xF3 PUSH2 0x13C CALLDATASIZE PUSH1 0x4 PUSH2 0x6D8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0xB6 PUSH2 0x288 JUMP JUMPDEST PUSH2 0xDF PUSH2 0x16D CALLDATASIZE PUSH1 0x4 PUSH2 0x766 JUMP JUMPDEST PUSH2 0x297 JUMP JUMPDEST PUSH2 0xDF PUSH2 0x180 CALLDATASIZE PUSH1 0x4 PUSH2 0x766 JUMP JUMPDEST PUSH2 0x317 JUMP JUMPDEST PUSH2 0xF3 PUSH2 0x193 CALLDATASIZE PUSH1 0x4 PUSH2 0x6F9 JUMP JUMPDEST PUSH2 0x325 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD PUSH2 0x1A7 SWAP1 PUSH2 0x806 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x1D3 SWAP1 PUSH2 0x806 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x220 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1F5 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x220 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x203 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x238 DUP2 DUP6 DUP6 PUSH2 0x350 JUMP JUMPDEST POP PUSH1 0x1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x250 DUP6 DUP3 DUP6 PUSH2 0x474 JUMP JUMPDEST PUSH2 0x25B DUP6 DUP6 DUP6 PUSH2 0x4EE JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x238 DUP2 DUP6 DUP6 PUSH2 0x279 DUP4 DUP4 PUSH2 0x325 JUMP JUMPDEST PUSH2 0x283 SWAP2 SWAP1 PUSH2 0x7E2 JUMP JUMPDEST PUSH2 0x350 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x4 DUP1 SLOAD PUSH2 0x1A7 SWAP1 PUSH2 0x806 JUMP JUMPDEST PUSH1 0x0 CALLER DUP2 PUSH2 0x2A5 DUP3 DUP7 PUSH2 0x325 JUMP JUMPDEST SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0x30A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x207A65726F PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x25B DUP3 DUP7 DUP7 DUP5 SUB PUSH2 0x350 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x238 DUP2 DUP6 DUP6 PUSH2 0x4EE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x3B2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x301 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x413 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x7373 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x301 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP6 SWAP1 SSTORE SWAP1 MLOAD DUP5 DUP2 MSTORE PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x480 DUP5 DUP5 PUSH2 0x325 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 NOT DUP2 EQ PUSH2 0x4E8 JUMPI DUP2 DUP2 LT ISZERO PUSH2 0x4DB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x301 JUMP JUMPDEST PUSH2 0x4E8 DUP5 DUP5 DUP5 DUP5 SUB PUSH2 0x350 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x552 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x6472657373 PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x301 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x5B4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x44 DUP3 ADD MSTORE PUSH3 0x657373 PUSH1 0xE8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x301 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0x62C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x616C616E6365 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x301 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP6 DUP6 SUB SWAP1 SSTORE SWAP2 DUP6 AND DUP2 MSTORE SWAP1 DUP2 KECCAK256 DUP1 SLOAD DUP5 SWAP3 SWAP1 PUSH2 0x663 SWAP1 DUP5 SWAP1 PUSH2 0x7E2 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP5 PUSH1 0x40 MLOAD PUSH2 0x6AF SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0x4E8 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x6D3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x6E9 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x6F2 DUP3 PUSH2 0x6BC JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x70B JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x714 DUP4 PUSH2 0x6BC JUMP JUMPDEST SWAP2 POP PUSH2 0x722 PUSH1 0x20 DUP5 ADD PUSH2 0x6BC JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x73F JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x748 DUP5 PUSH2 0x6BC JUMP JUMPDEST SWAP3 POP PUSH2 0x756 PUSH1 0x20 DUP6 ADD PUSH2 0x6BC JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x778 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x781 DUP4 PUSH2 0x6BC JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 DUP3 DUP6 ADD MSTORE DUP3 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x7BB JUMPI DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP3 ADD PUSH2 0x79F JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0x7CC JUMPI DUP4 PUSH1 0x40 DUP4 DUP8 ADD ADD MSTORE JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x40 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x801 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 DUP2 REVERT JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x81A JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0x83B JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC9 0x2C SUB 0xCD MLOAD SWAP14 SLOAD 0x5E 0xCF 0xD8 0x29 SLT 0xCD DUP13 0xE8 0xD5 0xC8 0xA8 0xB3 CALLDATACOPY 0xDB 0x27 PUSH19 0x4FC62CC5E62F66D5BE64736F6C634300080400 CALLER ",
							"sourceMap": "1424:11573:0:-:0;;;2018:116;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2085:13;;;;:5;;:13;;;;;:::i;:::-;-1:-1:-1;2109:17:0;;;;:7;;:17;;;;;:::i;:::-;;2018:116;;1424:11573;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1424:11573:0;;;-1:-1:-1;1424:11573:0;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;14:909:10;68:5;121:3;114:4;106:6;102:17;98:27;88:2;;143:5;136;129:20;88:2;170:13;;-1:-1:-1;;;;;232:10:10;;;229:2;;;245:18;;:::i;:::-;320:2;314:9;288:2;374:13;;-1:-1:-1;;370:22:10;;;394:2;366:31;362:40;350:53;;;418:18;;;438:22;;;415:46;412:2;;;464:18;;:::i;:::-;504:10;500:2;493:22;539:2;531:6;524:18;561:4;551:14;;606:3;601:2;596;588:6;584:15;580:24;577:33;574:2;;;627:5;620;613:20;574:2;653:5;644:14;;667:133;681:2;678:1;675:9;667:133;;;769:14;;;765:23;;759:30;738:14;;;734:23;;727:63;692:10;;;;667:133;;;818:2;815:1;812:9;809:2;;;877:5;872:2;867;859:6;855:15;851:24;844:39;809:2;911:6;78:845;-1:-1:-1;;;;;;78:845:10:o;928:592::-;1027:6;1035;1088:2;1076:9;1067:7;1063:23;1059:32;1056:2;;;1109:6;1101;1094:22;1056:2;1141:16;;-1:-1:-1;;;;;1206:14:10;;;1203:2;;;1238:6;1230;1223:22;1203:2;1266:61;1319:7;1310:6;1299:9;1295:22;1266:61;:::i;:::-;1256:71;;1373:2;1362:9;1358:18;1352:25;1336:41;;1402:2;1392:8;1389:16;1386:2;;;1423:6;1415;1408:22;1386:2;;1451:63;1506:7;1495:8;1484:9;1480:24;1451:63;:::i;:::-;1441:73;;;1046:474;;;;;:::o;1525:380::-;1604:1;1600:12;;;;1647;;;1668:2;;1722:4;1714:6;1710:17;1700:27;;1668:2;1775;1767:6;1764:14;1744:18;1741:38;1738:2;;;1821:10;1816:3;1812:20;1809:1;1802:31;1856:4;1853:1;1846:15;1884:4;1881:1;1874:15;1738:2;;1580:325;;;:::o;1910:127::-;1971:10;1966:3;1962:20;1959:1;1952:31;2002:4;1999:1;1992:15;2026:4;2023:1;2016:15;1942:95;1424:11573:0;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:5667:10",
										"statements": [
											{
												"nodeType": "YulBlock",
												"src": "6:3:10",
												"statements": []
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "63:124:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "73:29:10",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "95:6:10"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "82:12:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "82:20:10"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "73:5:10"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "165:16:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "174:1:10",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "177:1:10",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "167:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "167:12:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "167:12:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "124:5:10"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "135:5:10"
																					},
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "150:3:10",
																										"type": "",
																										"value": "160"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "155:1:10",
																										"type": "",
																										"value": "1"
																									}
																								],
																								"functionName": {
																									"name": "shl",
																									"nodeType": "YulIdentifier",
																									"src": "146:3:10"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "146:11:10"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "159:1:10",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "sub",
																							"nodeType": "YulIdentifier",
																							"src": "142:3:10"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "142:19:10"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "131:3:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "131:31:10"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "121:2:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "121:42:10"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "114:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "114:50:10"
															},
															"nodeType": "YulIf",
															"src": "111:2:10"
														}
													]
												},
												"name": "abi_decode_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "42:6:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "53:5:10",
														"type": ""
													}
												],
												"src": "14:173:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "262:126:10",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "308:26:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "317:6:10"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "325:6:10"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "310:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "310:22:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "310:22:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "283:7:10"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "292:9:10"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "279:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "279:23:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "304:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "275:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "275:32:10"
															},
															"nodeType": "YulIf",
															"src": "272:2:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "343:39:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "372:9:10"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "353:18:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "353:29:10"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "343:6:10"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "228:9:10",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "239:7:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "251:6:10",
														"type": ""
													}
												],
												"src": "192:196:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "480:183:10",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "526:26:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value1",
																					"nodeType": "YulIdentifier",
																					"src": "535:6:10"
																				},
																				{
																					"name": "value1",
																					"nodeType": "YulIdentifier",
																					"src": "543:6:10"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "528:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "528:22:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "528:22:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "501:7:10"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "510:9:10"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "497:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "497:23:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "522:2:10",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "493:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "493:32:10"
															},
															"nodeType": "YulIf",
															"src": "490:2:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "561:39:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "590:9:10"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "571:18:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "571:29:10"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "561:6:10"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "609:48:10",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "642:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "653:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "638:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "638:18:10"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "619:18:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "619:38:10"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "609:6:10"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "438:9:10",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "449:7:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "461:6:10",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "469:6:10",
														"type": ""
													}
												],
												"src": "393:270:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "772:234:10",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "818:26:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value2",
																					"nodeType": "YulIdentifier",
																					"src": "827:6:10"
																				},
																				{
																					"name": "value2",
																					"nodeType": "YulIdentifier",
																					"src": "835:6:10"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "820:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "820:22:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "820:22:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "793:7:10"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "802:9:10"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "789:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "789:23:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "814:2:10",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "785:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "785:32:10"
															},
															"nodeType": "YulIf",
															"src": "782:2:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "853:39:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "882:9:10"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "863:18:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "863:29:10"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "853:6:10"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "901:48:10",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "934:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "945:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "930:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "930:18:10"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "911:18:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "911:38:10"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "901:6:10"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "958:42:10",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "985:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "996:2:10",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "981:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "981:18:10"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "968:12:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "968:32:10"
															},
															"variableNames": [
																{
																	"name": "value2",
																	"nodeType": "YulIdentifier",
																	"src": "958:6:10"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_addresst_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "722:9:10",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "733:7:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "745:6:10",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "753:6:10",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "761:6:10",
														"type": ""
													}
												],
												"src": "668:338:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1098:177:10",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1144:26:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "1153:6:10"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "1161:6:10"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1146:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1146:22:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1146:22:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1119:7:10"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1128:9:10"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1115:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1115:23:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1140:2:10",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1111:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1111:32:10"
															},
															"nodeType": "YulIf",
															"src": "1108:2:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1179:39:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1208:9:10"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "1189:18:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1189:29:10"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "1179:6:10"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "1227:42:10",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1254:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1265:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1250:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1250:18:10"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1237:12:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1237:32:10"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "1227:6:10"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1056:9:10",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1067:7:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1079:6:10",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "1087:6:10",
														"type": ""
													}
												],
												"src": "1011:264:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1375:92:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1385:26:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1397:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1408:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1393:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1393:18:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "1385:4:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1427:9:10"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value0",
																						"nodeType": "YulIdentifier",
																						"src": "1452:6:10"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "1445:6:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1445:14:10"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "1438:6:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1438:22:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1420:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1420:41:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1420:41:10"
														}
													]
												},
												"name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1344:9:10",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1355:6:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "1366:4:10",
														"type": ""
													}
												],
												"src": "1280:187:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1593:482:10",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1603:12:10",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "1613:2:10",
																"type": "",
																"value": "32"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "1607:2:10",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1631:9:10"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "1642:2:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1624:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1624:21:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1624:21:10"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1654:27:10",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "1674:6:10"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "1668:5:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1668:13:10"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "1658:6:10",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1701:9:10"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "1712:2:10"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1697:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1697:18:10"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "1717:6:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1690:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1690:34:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1690:34:10"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1733:13:10",
															"value": {
																"name": "tail",
																"nodeType": "YulIdentifier",
																"src": "1742:4:10"
															},
															"variables": [
																{
																	"name": "i",
																	"nodeType": "YulTypedName",
																	"src": "1737:1:10",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1805:90:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "headStart",
																									"nodeType": "YulIdentifier",
																									"src": "1834:9:10"
																								},
																								{
																									"name": "i",
																									"nodeType": "YulIdentifier",
																									"src": "1845:1:10"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "1830:3:10"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "1830:17:10"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "1849:2:10",
																							"type": "",
																							"value": "64"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "1826:3:10"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "1826:26:10"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"arguments": [
																										{
																											"name": "value0",
																											"nodeType": "YulIdentifier",
																											"src": "1868:6:10"
																										},
																										{
																											"name": "i",
																											"nodeType": "YulIdentifier",
																											"src": "1876:1:10"
																										}
																									],
																									"functionName": {
																										"name": "add",
																										"nodeType": "YulIdentifier",
																										"src": "1864:3:10"
																									},
																									"nodeType": "YulFunctionCall",
																									"src": "1864:14:10"
																								},
																								{
																									"name": "_1",
																									"nodeType": "YulIdentifier",
																									"src": "1880:2:10"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "1860:3:10"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "1860:23:10"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nodeType": "YulIdentifier",
																						"src": "1854:5:10"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "1854:30:10"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "1819:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1819:66:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1819:66:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "1766:1:10"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "1769:6:10"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "1763:2:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1763:13:10"
															},
															"nodeType": "YulForLoop",
															"post": {
																"nodeType": "YulBlock",
																"src": "1777:19:10",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "1779:15:10",
																		"value": {
																			"arguments": [
																				{
																					"name": "i",
																					"nodeType": "YulIdentifier",
																					"src": "1788:1:10"
																				},
																				{
																					"name": "_1",
																					"nodeType": "YulIdentifier",
																					"src": "1791:2:10"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "1784:3:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1784:10:10"
																		},
																		"variableNames": [
																			{
																				"name": "i",
																				"nodeType": "YulIdentifier",
																				"src": "1779:1:10"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nodeType": "YulBlock",
																"src": "1759:3:10",
																"statements": []
															},
															"src": "1755:140:10"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1929:69:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "headStart",
																									"nodeType": "YulIdentifier",
																									"src": "1958:9:10"
																								},
																								{
																									"name": "length",
																									"nodeType": "YulIdentifier",
																									"src": "1969:6:10"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "1954:3:10"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "1954:22:10"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "1978:2:10",
																							"type": "",
																							"value": "64"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "1950:3:10"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "1950:31:10"
																				},
																				{
																					"name": "tail",
																					"nodeType": "YulIdentifier",
																					"src": "1983:4:10"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "1943:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1943:45:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1943:45:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "1910:1:10"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "1913:6:10"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "1907:2:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1907:13:10"
															},
															"nodeType": "YulIf",
															"src": "1904:2:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2007:62:10",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2023:9:10"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"name": "length",
																								"nodeType": "YulIdentifier",
																								"src": "2042:6:10"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "2050:2:10",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "add",
																							"nodeType": "YulIdentifier",
																							"src": "2038:3:10"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "2038:15:10"
																					},
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "2059:2:10",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "not",
																							"nodeType": "YulIdentifier",
																							"src": "2055:3:10"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "2055:7:10"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "2034:3:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2034:29:10"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2019:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2019:45:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2066:2:10",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2015:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2015:54:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "2007:4:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1562:9:10",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1573:6:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "1584:4:10",
														"type": ""
													}
												],
												"src": "1472:603:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2254:225:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2271:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2282:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2264:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2264:21:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2264:21:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2305:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2316:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2301:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2301:18:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2321:2:10",
																		"type": "",
																		"value": "35"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2294:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2294:30:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2294:30:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2344:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2355:2:10",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2340:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2340:18:10"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "2360:34:10",
																		"type": "",
																		"value": "ERC20: transfer to the zero addr"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2333:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2333:62:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2333:62:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2415:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2426:2:10",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2411:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2411:18:10"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "2431:5:10",
																		"type": "",
																		"value": "ess"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2404:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2404:33:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2404:33:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2446:27:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2458:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2469:3:10",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2454:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2454:19:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "2446:4:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2231:9:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "2245:4:10",
														"type": ""
													}
												],
												"src": "2080:399:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2658:224:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2675:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2686:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2668:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2668:21:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2668:21:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2709:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2720:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2705:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2705:18:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2725:2:10",
																		"type": "",
																		"value": "34"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2698:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2698:30:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2698:30:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2748:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2759:2:10",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2744:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2744:18:10"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "2764:34:10",
																		"type": "",
																		"value": "ERC20: approve to the zero addre"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2737:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2737:62:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2737:62:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2819:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2830:2:10",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2815:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2815:18:10"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "2835:4:10",
																		"type": "",
																		"value": "ss"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2808:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2808:32:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2808:32:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2849:27:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2861:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2872:3:10",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2857:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2857:19:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "2849:4:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2635:9:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "2649:4:10",
														"type": ""
													}
												],
												"src": "2484:398:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3061:179:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3078:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3089:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3071:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3071:21:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3071:21:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3112:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3123:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3108:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3108:18:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3128:2:10",
																		"type": "",
																		"value": "29"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3101:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3101:30:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3101:30:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3151:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3162:2:10",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3147:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3147:18:10"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "3167:31:10",
																		"type": "",
																		"value": "ERC20: insufficient allowance"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3140:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3140:59:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3140:59:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3208:26:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3220:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3231:2:10",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3216:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3216:18:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "3208:4:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3038:9:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "3052:4:10",
														"type": ""
													}
												],
												"src": "2887:353:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3419:228:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3436:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3447:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3429:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3429:21:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3429:21:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3470:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3481:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3466:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3466:18:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3486:2:10",
																		"type": "",
																		"value": "38"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3459:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3459:30:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3459:30:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3509:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3520:2:10",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3505:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3505:18:10"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "3525:34:10",
																		"type": "",
																		"value": "ERC20: transfer amount exceeds b"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3498:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3498:62:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3498:62:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3580:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3591:2:10",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3576:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3576:18:10"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "3596:8:10",
																		"type": "",
																		"value": "alance"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3569:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3569:36:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3569:36:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3614:27:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3626:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3637:3:10",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3622:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3622:19:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "3614:4:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3396:9:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "3410:4:10",
														"type": ""
													}
												],
												"src": "3245:402:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3826:227:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3843:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3854:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3836:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3836:21:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3836:21:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3877:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3888:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3873:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3873:18:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3893:2:10",
																		"type": "",
																		"value": "37"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3866:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3866:30:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3866:30:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3916:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3927:2:10",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3912:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3912:18:10"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "3932:34:10",
																		"type": "",
																		"value": "ERC20: transfer from the zero ad"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3905:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3905:62:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3905:62:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3987:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3998:2:10",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3983:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3983:18:10"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "4003:7:10",
																		"type": "",
																		"value": "dress"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3976:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3976:35:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3976:35:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4020:27:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4032:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4043:3:10",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4028:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4028:19:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "4020:4:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3803:9:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "3817:4:10",
														"type": ""
													}
												],
												"src": "3652:401:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4232:226:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4249:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4260:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4242:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4242:21:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4242:21:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4283:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4294:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4279:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4279:18:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4299:2:10",
																		"type": "",
																		"value": "36"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4272:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4272:30:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4272:30:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4322:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4333:2:10",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4318:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4318:18:10"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "4338:34:10",
																		"type": "",
																		"value": "ERC20: approve from the zero add"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4311:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4311:62:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4311:62:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4393:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4404:2:10",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4389:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4389:18:10"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "4409:6:10",
																		"type": "",
																		"value": "ress"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4382:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4382:34:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4382:34:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4425:27:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4437:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4448:3:10",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4433:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4433:19:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "4425:4:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4209:9:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "4223:4:10",
														"type": ""
													}
												],
												"src": "4058:400:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4637:227:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4654:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4665:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4647:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4647:21:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4647:21:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4688:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4699:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4684:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4684:18:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4704:2:10",
																		"type": "",
																		"value": "37"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4677:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4677:30:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4677:30:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4727:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4738:2:10",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4723:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4723:18:10"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "4743:34:10",
																		"type": "",
																		"value": "ERC20: decreased allowance below"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4716:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4716:62:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4716:62:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4798:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4809:2:10",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4794:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4794:18:10"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "4814:7:10",
																		"type": "",
																		"value": " zero"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4787:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4787:35:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4787:35:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4831:27:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4843:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4854:3:10",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4839:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4839:19:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "4831:4:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4614:9:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "4628:4:10",
														"type": ""
													}
												],
												"src": "4463:401:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4970:76:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "4980:26:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4992:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5003:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4988:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4988:18:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "4980:4:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5022:9:10"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "5033:6:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5015:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "5015:25:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5015:25:10"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4939:9:10",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "4950:6:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "4961:4:10",
														"type": ""
													}
												],
												"src": "4869:177:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5099:181:10",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "5134:115:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "sum",
																					"nodeType": "YulIdentifier",
																					"src": "5155:3:10"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "5164:3:10",
																							"type": "",
																							"value": "224"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "5169:10:10",
																							"type": "",
																							"value": "0x4e487b71"
																						}
																					],
																					"functionName": {
																						"name": "shl",
																						"nodeType": "YulIdentifier",
																						"src": "5160:3:10"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "5160:20:10"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "5148:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5148:33:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5148:33:10"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5201:1:10",
																					"type": "",
																					"value": "4"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5204:4:10",
																					"type": "",
																					"value": "0x11"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "5194:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5194:15:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5194:15:10"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "sum",
																					"nodeType": "YulIdentifier",
																					"src": "5229:3:10"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5234:4:10",
																					"type": "",
																					"value": "0x24"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "5222:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5222:17:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5222:17:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "5115:1:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "y",
																				"nodeType": "YulIdentifier",
																				"src": "5122:1:10"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nodeType": "YulIdentifier",
																			"src": "5118:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5118:6:10"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "5112:2:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "5112:13:10"
															},
															"nodeType": "YulIf",
															"src": "5109:2:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "5258:16:10",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "5269:1:10"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "5272:1:10"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5265:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "5265:9:10"
															},
															"variableNames": [
																{
																	"name": "sum",
																	"nodeType": "YulIdentifier",
																	"src": "5258:3:10"
																}
															]
														}
													]
												},
												"name": "checked_add_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "5082:1:10",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "5085:1:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "sum",
														"nodeType": "YulTypedName",
														"src": "5091:3:10",
														"type": ""
													}
												],
												"src": "5051:229:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5340:325:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "5350:22:10",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5364:1:10",
																		"type": "",
																		"value": "1"
																	},
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "5367:4:10"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "5360:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "5360:12:10"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nodeType": "YulIdentifier",
																	"src": "5350:6:10"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5381:38:10",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "5411:4:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5417:1:10",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "5407:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "5407:12:10"
															},
															"variables": [
																{
																	"name": "outOfPlaceEncoding",
																	"nodeType": "YulTypedName",
																	"src": "5385:18:10",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "5458:31:10",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "5460:27:10",
																		"value": {
																			"arguments": [
																				{
																					"name": "length",
																					"nodeType": "YulIdentifier",
																					"src": "5474:6:10"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5482:4:10",
																					"type": "",
																					"value": "0x7f"
																				}
																			],
																			"functionName": {
																				"name": "and",
																				"nodeType": "YulIdentifier",
																				"src": "5470:3:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5470:17:10"
																		},
																		"variableNames": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "5460:6:10"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "5438:18:10"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "5431:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "5431:26:10"
															},
															"nodeType": "YulIf",
															"src": "5428:2:10"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "5548:111:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5569:1:10",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "5576:3:10",
																							"type": "",
																							"value": "224"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "5581:10:10",
																							"type": "",
																							"value": "0x4e487b71"
																						}
																					],
																					"functionName": {
																						"name": "shl",
																						"nodeType": "YulIdentifier",
																						"src": "5572:3:10"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "5572:20:10"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "5562:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5562:31:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5562:31:10"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5613:1:10",
																					"type": "",
																					"value": "4"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5616:4:10",
																					"type": "",
																					"value": "0x22"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "5606:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5606:15:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5606:15:10"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5641:1:10",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5644:4:10",
																					"type": "",
																					"value": "0x24"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "5634:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5634:15:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5634:15:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "5504:18:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "5527:6:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5535:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nodeType": "YulIdentifier",
																			"src": "5524:2:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5524:14:10"
																	}
																],
																"functionName": {
																	"name": "eq",
																	"nodeType": "YulIdentifier",
																	"src": "5501:2:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "5501:38:10"
															},
															"nodeType": "YulIf",
															"src": "5498:2:10"
														}
													]
												},
												"name": "extract_byte_array_length",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "data",
														"nodeType": "YulTypedName",
														"src": "5320:4:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "5329:6:10",
														"type": ""
													}
												],
												"src": "5285:380:10"
											}
										]
									},
									"contents": "{\n    { }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(value1, value1) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(value2, value2) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(value0, value0) }\n        value0 := abi_decode_address(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        let _1 := 32\n        mstore(headStart, _1)\n        let length := mload(value0)\n        mstore(add(headStart, _1), length)\n        let i := tail\n        for { } lt(i, length) { i := add(i, _1) }\n        {\n            mstore(add(add(headStart, i), 64), mload(add(add(value0, i), _1)))\n        }\n        if gt(i, length)\n        {\n            mstore(add(add(headStart, length), 64), tail)\n        }\n        tail := add(add(headStart, and(add(length, 31), not(31))), 64)\n    }\n    function abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 35)\n        mstore(add(headStart, 64), \"ERC20: transfer to the zero addr\")\n        mstore(add(headStart, 96), \"ess\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 34)\n        mstore(add(headStart, 64), \"ERC20: approve to the zero addre\")\n        mstore(add(headStart, 96), \"ss\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"ERC20: insufficient allowance\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"ERC20: transfer amount exceeds b\")\n        mstore(add(headStart, 96), \"alance\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 37)\n        mstore(add(headStart, 64), \"ERC20: transfer from the zero ad\")\n        mstore(add(headStart, 96), \"dress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 36)\n        mstore(add(headStart, 64), \"ERC20: approve from the zero add\")\n        mstore(add(headStart, 96), \"ress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 37)\n        mstore(add(headStart, 64), \"ERC20: decreased allowance below\")\n        mstore(add(headStart, 96), \" zero\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        if gt(x, not(y))\n        {\n            mstore(sum, shl(224, 0x4e487b71))\n            mstore(4, 0x11)\n            revert(sum, 0x24)\n        }\n        sum := add(x, y)\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n}",
									"id": 10,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b50600436106100a95760003560e01c80633950935111610071578063395093511461011b57806370a082311461012e57806395d89b4114610157578063a457c2d71461015f578063a9059cbb14610172578063dd62ed3e1461018557600080fd5b806306fdde03146100ae578063095ea7b3146100cc57806318160ddd146100ef57806323b872dd14610101578063313ce56714610114575b600080fd5b6100b6610198565b6040516100c3919061078f565b60405180910390f35b6100df6100da366004610766565b61022a565b60405190151581526020016100c3565b6002545b6040519081526020016100c3565b6100df61010f36600461072b565b610242565b60126100f3565b6100df610129366004610766565b610266565b6100f361013c3660046106d8565b6001600160a01b031660009081526020819052604090205490565b6100b6610288565b6100df61016d366004610766565b610297565b6100df610180366004610766565b610317565b6100f36101933660046106f9565b610325565b6060600380546101a790610806565b80601f01602080910402602001604051908101604052809291908181526020018280546101d390610806565b80156102205780601f106101f557610100808354040283529160200191610220565b820191906000526020600020905b81548152906001019060200180831161020357829003601f168201915b5050505050905090565b600033610238818585610350565b5060019392505050565b600033610250858285610474565b61025b8585856104ee565b506001949350505050565b6000336102388185856102798383610325565b61028391906107e2565b610350565b6060600480546101a790610806565b600033816102a58286610325565b90508381101561030a5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084015b60405180910390fd5b61025b8286868403610350565b6000336102388185856104ee565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6001600160a01b0383166103b25760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610301565b6001600160a01b0382166104135760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610301565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b60006104808484610325565b905060001981146104e857818110156104db5760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610301565b6104e88484848403610350565b50505050565b6001600160a01b0383166105525760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610301565b6001600160a01b0382166105b45760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610301565b6001600160a01b0383166000908152602081905260409020548181101561062c5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610301565b6001600160a01b038085166000908152602081905260408082208585039055918516815290812080548492906106639084906107e2565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516106af91815260200190565b60405180910390a36104e8565b80356001600160a01b03811681146106d357600080fd5b919050565b6000602082840312156106e9578081fd5b6106f2826106bc565b9392505050565b6000806040838503121561070b578081fd5b610714836106bc565b9150610722602084016106bc565b90509250929050565b60008060006060848603121561073f578081fd5b610748846106bc565b9250610756602085016106bc565b9150604084013590509250925092565b60008060408385031215610778578182fd5b610781836106bc565b946020939093013593505050565b6000602080835283518082850152825b818110156107bb5785810183015185820160400152820161079f565b818111156107cc5783604083870101525b50601f01601f1916929092016040019392505050565b6000821982111561080157634e487b7160e01b81526011600452602481fd5b500190565b600181811c9082168061081a57607f821691505b6020821081141561083b57634e487b7160e01b600052602260045260246000fd5b5091905056fea2646970667358221220c92c03cd519d545ecfd82912cd8ce8d5c8a8b337db27724fc62cc5e62f66d5be64736f6c63430008040033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xA9 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x39509351 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x11B JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x12E JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x157 JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x15F JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x172 JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x185 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0xAE JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0xCC JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0xEF JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x101 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x114 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB6 PUSH2 0x198 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xC3 SWAP2 SWAP1 PUSH2 0x78F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xDF PUSH2 0xDA CALLDATASIZE PUSH1 0x4 PUSH2 0x766 JUMP JUMPDEST PUSH2 0x22A JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xC3 JUMP JUMPDEST PUSH1 0x2 SLOAD JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xC3 JUMP JUMPDEST PUSH2 0xDF PUSH2 0x10F CALLDATASIZE PUSH1 0x4 PUSH2 0x72B JUMP JUMPDEST PUSH2 0x242 JUMP JUMPDEST PUSH1 0x12 PUSH2 0xF3 JUMP JUMPDEST PUSH2 0xDF PUSH2 0x129 CALLDATASIZE PUSH1 0x4 PUSH2 0x766 JUMP JUMPDEST PUSH2 0x266 JUMP JUMPDEST PUSH2 0xF3 PUSH2 0x13C CALLDATASIZE PUSH1 0x4 PUSH2 0x6D8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0xB6 PUSH2 0x288 JUMP JUMPDEST PUSH2 0xDF PUSH2 0x16D CALLDATASIZE PUSH1 0x4 PUSH2 0x766 JUMP JUMPDEST PUSH2 0x297 JUMP JUMPDEST PUSH2 0xDF PUSH2 0x180 CALLDATASIZE PUSH1 0x4 PUSH2 0x766 JUMP JUMPDEST PUSH2 0x317 JUMP JUMPDEST PUSH2 0xF3 PUSH2 0x193 CALLDATASIZE PUSH1 0x4 PUSH2 0x6F9 JUMP JUMPDEST PUSH2 0x325 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD PUSH2 0x1A7 SWAP1 PUSH2 0x806 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x1D3 SWAP1 PUSH2 0x806 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x220 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1F5 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x220 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x203 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x238 DUP2 DUP6 DUP6 PUSH2 0x350 JUMP JUMPDEST POP PUSH1 0x1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x250 DUP6 DUP3 DUP6 PUSH2 0x474 JUMP JUMPDEST PUSH2 0x25B DUP6 DUP6 DUP6 PUSH2 0x4EE JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x238 DUP2 DUP6 DUP6 PUSH2 0x279 DUP4 DUP4 PUSH2 0x325 JUMP JUMPDEST PUSH2 0x283 SWAP2 SWAP1 PUSH2 0x7E2 JUMP JUMPDEST PUSH2 0x350 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x4 DUP1 SLOAD PUSH2 0x1A7 SWAP1 PUSH2 0x806 JUMP JUMPDEST PUSH1 0x0 CALLER DUP2 PUSH2 0x2A5 DUP3 DUP7 PUSH2 0x325 JUMP JUMPDEST SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0x30A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x207A65726F PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x25B DUP3 DUP7 DUP7 DUP5 SUB PUSH2 0x350 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x238 DUP2 DUP6 DUP6 PUSH2 0x4EE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x3B2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x301 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x413 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x7373 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x301 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP6 SWAP1 SSTORE SWAP1 MLOAD DUP5 DUP2 MSTORE PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x480 DUP5 DUP5 PUSH2 0x325 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 NOT DUP2 EQ PUSH2 0x4E8 JUMPI DUP2 DUP2 LT ISZERO PUSH2 0x4DB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x301 JUMP JUMPDEST PUSH2 0x4E8 DUP5 DUP5 DUP5 DUP5 SUB PUSH2 0x350 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x552 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x6472657373 PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x301 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x5B4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x44 DUP3 ADD MSTORE PUSH3 0x657373 PUSH1 0xE8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x301 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0x62C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x616C616E6365 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x301 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP6 DUP6 SUB SWAP1 SSTORE SWAP2 DUP6 AND DUP2 MSTORE SWAP1 DUP2 KECCAK256 DUP1 SLOAD DUP5 SWAP3 SWAP1 PUSH2 0x663 SWAP1 DUP5 SWAP1 PUSH2 0x7E2 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP5 PUSH1 0x40 MLOAD PUSH2 0x6AF SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0x4E8 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x6D3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x6E9 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x6F2 DUP3 PUSH2 0x6BC JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x70B JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x714 DUP4 PUSH2 0x6BC JUMP JUMPDEST SWAP2 POP PUSH2 0x722 PUSH1 0x20 DUP5 ADD PUSH2 0x6BC JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x73F JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x748 DUP5 PUSH2 0x6BC JUMP JUMPDEST SWAP3 POP PUSH2 0x756 PUSH1 0x20 DUP6 ADD PUSH2 0x6BC JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x778 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x781 DUP4 PUSH2 0x6BC JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 DUP3 DUP6 ADD MSTORE DUP3 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x7BB JUMPI DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP3 ADD PUSH2 0x79F JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0x7CC JUMPI DUP4 PUSH1 0x40 DUP4 DUP8 ADD ADD MSTORE JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x40 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x801 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 DUP2 REVERT JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x81A JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0x83B JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC9 0x2C SUB 0xCD MLOAD SWAP14 SLOAD 0x5E 0xCF 0xD8 0x29 SLT 0xCD DUP13 0xE8 0xD5 0xC8 0xA8 0xB3 CALLDATACOPY 0xDB 0x27 PUSH19 0x4FC62CC5E62F66D5BE64736F6C634300080400 CALLER ",
							"sourceMap": "1424:11573:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2204:100;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4557:201;;;;;;:::i;:::-;;:::i;:::-;;;1445:14:10;;1438:22;1420:41;;1408:2;1393:18;4557:201:0;1375:92:10;3326:108:0;3414:12;;3326:108;;;5015:25:10;;;5003:2;4988:18;3326:108:0;4970:76:10;5338:295:0;;;;;;:::i;:::-;;:::i;3166:95::-;3251:2;3166:95;;6042:238;;;;;;:::i;:::-;;:::i;3497:127::-;;;;;;:::i;:::-;-1:-1:-1;;;;;3598:18:0;3571:7;3598:18;;;;;;;;;;;;3497:127;2423:104;;;:::i;6783:436::-;;;;;;:::i;:::-;;:::i;3830:193::-;;;;;;:::i;:::-;;:::i;4086:151::-;;;;;;:::i;:::-;;:::i;2204:100::-;2258:13;2291:5;2284:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2204:100;:::o;4557:201::-;4640:4;736:10:4;4696:32:0;736:10:4;4712:7:0;4721:6;4696:8;:32::i;:::-;-1:-1:-1;4746:4:0;;4557:201;-1:-1:-1;;;4557:201:0:o;5338:295::-;5469:4;736:10:4;5527:38:0;5543:4;736:10:4;5558:6:0;5527:15;:38::i;:::-;5576:27;5586:4;5592:2;5596:6;5576:9;:27::i;:::-;-1:-1:-1;5621:4:0;;5338:295;-1:-1:-1;;;;5338:295:0:o;6042:238::-;6130:4;736:10:4;6186:64:0;736:10:4;6202:7:0;6239:10;6211:25;736:10:4;6202:7:0;6211:9;:25::i;:::-;:38;;;;:::i;:::-;6186:8;:64::i;2423:104::-;2479:13;2512:7;2505:14;;;;;:::i;6783:436::-;6876:4;736:10:4;6876:4:0;6959:25;736:10:4;6976:7:0;6959:9;:25::i;:::-;6932:52;;7023:15;7003:16;:35;;6995:85;;;;-1:-1:-1;;;6995:85:0;;4665:2:10;6995:85:0;;;4647:21:10;4704:2;4684:18;;;4677:30;4743:34;4723:18;;;4716:62;-1:-1:-1;;;4794:18:10;;;4787:35;4839:19;;6995:85:0;;;;;;;;;7116:60;7125:5;7132:7;7160:15;7141:16;:34;7116:8;:60::i;3830:193::-;3909:4;736:10:4;3965:28:0;736:10:4;3982:2:0;3986:6;3965:9;:28::i;4086:151::-;-1:-1:-1;;;;;4202:18:0;;;4175:7;4202:18;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;4086:151::o;10417:380::-;-1:-1:-1;;;;;10553:19:0;;10545:68;;;;-1:-1:-1;;;10545:68:0;;4260:2:10;10545:68:0;;;4242:21:10;4299:2;4279:18;;;4272:30;4338:34;4318:18;;;4311:62;-1:-1:-1;;;4389:18:10;;;4382:34;4433:19;;10545:68:0;4232:226:10;10545:68:0;-1:-1:-1;;;;;10632:21:0;;10624:68;;;;-1:-1:-1;;;10624:68:0;;2686:2:10;10624:68:0;;;2668:21:10;2725:2;2705:18;;;2698:30;2764:34;2744:18;;;2737:62;-1:-1:-1;;;2815:18:10;;;2808:32;2857:19;;10624:68:0;2658:224:10;10624:68:0;-1:-1:-1;;;;;10705:18:0;;;;;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;:36;;;10757:32;;5015:25:10;;;10757:32:0;;4988:18:10;10757:32:0;;;;;;;10417:380;;;:::o;11088:453::-;11223:24;11250:25;11260:5;11267:7;11250:9;:25::i;:::-;11223:52;;-1:-1:-1;;11290:16:0;:37;11286:248;;11372:6;11352:16;:26;;11344:68;;;;-1:-1:-1;;;11344:68:0;;3089:2:10;11344:68:0;;;3071:21:10;3128:2;3108:18;;;3101:30;3167:31;3147:18;;;3140:59;3216:18;;11344:68:0;3061:179:10;11344:68:0;11456:51;11465:5;11472:7;11500:6;11481:16;:25;11456:8;:51::i;:::-;11088:453;;;;:::o;7698:671::-;-1:-1:-1;;;;;7829:18:0;;7821:68;;;;-1:-1:-1;;;7821:68:0;;3854:2:10;7821:68:0;;;3836:21:10;3893:2;3873:18;;;3866:30;3932:34;3912:18;;;3905:62;-1:-1:-1;;;3983:18:10;;;3976:35;4028:19;;7821:68:0;3826:227:10;7821:68:0;-1:-1:-1;;;;;7908:16:0;;7900:64;;;;-1:-1:-1;;;7900:64:0;;2282:2:10;7900:64:0;;;2264:21:10;2321:2;2301:18;;;2294:30;2360:34;2340:18;;;2333:62;-1:-1:-1;;;2411:18:10;;;2404:33;2454:19;;7900:64:0;2254:225:10;7900:64:0;-1:-1:-1;;;;;8050:15:0;;8028:19;8050:15;;;;;;;;;;;8084:21;;;;8076:72;;;;-1:-1:-1;;;8076:72:0;;3447:2:10;8076:72:0;;;3429:21:10;3486:2;3466:18;;;3459:30;3525:34;3505:18;;;3498:62;-1:-1:-1;;;3576:18:10;;;3569:36;3622:19;;8076:72:0;3419:228:10;8076:72:0;-1:-1:-1;;;;;8184:15:0;;;:9;:15;;;;;;;;;;;8202:20;;;8184:38;;8244:13;;;;;;;;:23;;8216:6;;8184:9;8244:23;;8216:6;;8244:23;:::i;:::-;;;;;;;;8300:2;-1:-1:-1;;;;;8285:26:0;8294:4;-1:-1:-1;;;;;8285:26:0;;8304:6;8285:26;;;;5015:25:10;;5003:2;4988:18;;4970:76;8285:26:0;;;;;;;;8324:37;12141:125;14:173:10;82:20;;-1:-1:-1;;;;;131:31:10;;121:42;;111:2;;177:1;174;167:12;111:2;63:124;;;:::o;192:196::-;251:6;304:2;292:9;283:7;279:23;275:32;272:2;;;325:6;317;310:22;272:2;353:29;372:9;353:29;:::i;:::-;343:39;262:126;-1:-1:-1;;;262:126:10:o;393:270::-;461:6;469;522:2;510:9;501:7;497:23;493:32;490:2;;;543:6;535;528:22;490:2;571:29;590:9;571:29;:::i;:::-;561:39;;619:38;653:2;642:9;638:18;619:38;:::i;:::-;609:48;;480:183;;;;;:::o;668:338::-;745:6;753;761;814:2;802:9;793:7;789:23;785:32;782:2;;;835:6;827;820:22;782:2;863:29;882:9;863:29;:::i;:::-;853:39;;911:38;945:2;934:9;930:18;911:38;:::i;:::-;901:48;;996:2;985:9;981:18;968:32;958:42;;772:234;;;;;:::o;1011:264::-;1079:6;1087;1140:2;1128:9;1119:7;1115:23;1111:32;1108:2;;;1161:6;1153;1146:22;1108:2;1189:29;1208:9;1189:29;:::i;:::-;1179:39;1265:2;1250:18;;;;1237:32;;-1:-1:-1;;;1098:177:10:o;1472:603::-;1584:4;1613:2;1642;1631:9;1624:21;1674:6;1668:13;1717:6;1712:2;1701:9;1697:18;1690:34;1742:4;1755:140;1769:6;1766:1;1763:13;1755:140;;;1864:14;;;1860:23;;1854:30;1830:17;;;1849:2;1826:26;1819:66;1784:10;;1755:140;;;1913:6;1910:1;1907:13;1904:2;;;1983:4;1978:2;1969:6;1958:9;1954:22;1950:31;1943:45;1904:2;-1:-1:-1;2059:2:10;2038:15;-1:-1:-1;;2034:29:10;2019:45;;;;2066:2;2015:54;;1593:482;-1:-1:-1;;;1593:482:10:o;5051:229::-;5091:3;5122:1;5118:6;5115:1;5112:13;5109:2;;;-1:-1:-1;;;5148:33:10;;5204:4;5201:1;5194:15;5234:4;5155:3;5222:17;5109:2;-1:-1:-1;5265:9:10;;5099:181::o;5285:380::-;5364:1;5360:12;;;;5407;;;5428:2;;5482:4;5474:6;5470:17;5460:27;;5428:2;5535;5527:6;5524:14;5504:18;5501:38;5498:2;;;5581:10;5576:3;5572:20;5569:1;5562:31;5616:4;5613:1;5606:15;5644:4;5641:1;5634:15;5498:2;;5340:325;;;:::o"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "433400",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"external": {
								"allowance(address,address)": "infinite",
								"approve(address,uint256)": "22524",
								"balanceOf(address)": "1262",
								"decimals()": "281",
								"decreaseAllowance(address,uint256)": "23616",
								"increaseAllowance(address,uint256)": "23578",
								"name()": "infinite",
								"symbol()": "infinite",
								"totalSupply()": "1026",
								"transfer(address,uint256)": "44470",
								"transferFrom(address,address,uint256)": "infinite"
							},
							"internal": {
								"_afterTokenTransfer(address,address,uint256)": "infinite",
								"_approve(address,address,uint256)": "infinite",
								"_beforeTokenTransfer(address,address,uint256)": "infinite",
								"_burn(address,uint256)": "infinite",
								"_mint(address,uint256)": "infinite",
								"_spendAllowance(address,address,uint256)": "infinite",
								"_transfer(address,address,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 1424,
									"end": 12997,
									"name": "PUSH",
									"source": 0,
									"value": "80"
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 2018,
									"end": 2134,
									"name": "CALLVALUE",
									"source": 0
								},
								{
									"begin": 2018,
									"end": 2134,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 2018,
									"end": 2134,
									"name": "ISZERO",
									"source": 0
								},
								{
									"begin": 2018,
									"end": 2134,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 2018,
									"end": 2134,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": 2018,
									"end": 2134,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 2018,
									"end": 2134,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 2018,
									"end": 2134,
									"name": "REVERT",
									"source": 0
								},
								{
									"begin": 2018,
									"end": 2134,
									"name": "tag",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 2018,
									"end": 2134,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 2018,
									"end": 2134,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 2018,
									"end": 2134,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 2018,
									"end": 2134,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 2018,
									"end": 2134,
									"name": "PUSHSIZE",
									"source": 0
								},
								{
									"begin": 2018,
									"end": 2134,
									"name": "CODESIZE",
									"source": 0
								},
								{
									"begin": 2018,
									"end": 2134,
									"name": "SUB",
									"source": 0
								},
								{
									"begin": 2018,
									"end": 2134,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 2018,
									"end": 2134,
									"name": "PUSHSIZE",
									"source": 0
								},
								{
									"begin": 2018,
									"end": 2134,
									"name": "DUP4",
									"source": 0
								},
								{
									"begin": 2018,
									"end": 2134,
									"name": "CODECOPY",
									"source": 0
								},
								{
									"begin": 2018,
									"end": 2134,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 2018,
									"end": 2134,
									"name": "ADD",
									"source": 0
								},
								{
									"begin": 2018,
									"end": 2134,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 2018,
									"end": 2134,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 2018,
									"end": 2134,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 2018,
									"end": 2134,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 2018,
									"end": 2134,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "2"
								},
								{
									"begin": 2018,
									"end": 2134,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 2018,
									"end": 2134,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "3"
								},
								{
									"begin": 2018,
									"end": 2134,
									"name": "JUMP",
									"source": 0,
									"value": "[in]"
								},
								{
									"begin": 2018,
									"end": 2134,
									"name": "tag",
									"source": 0,
									"value": "2"
								},
								{
									"begin": 2018,
									"end": 2134,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 2085,
									"end": 2098,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 2085,
									"end": 2098,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 2085,
									"end": 2098,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "6"
								},
								{
									"begin": 2085,
									"end": 2098,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 2085,
									"end": 2090,
									"name": "PUSH",
									"source": 0,
									"value": "3"
								},
								{
									"begin": 2085,
									"end": 2090,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 2085,
									"end": 2098,
									"name": "PUSH",
									"source": 0,
									"value": "20"
								},
								{
									"begin": 2085,
									"end": 2098,
									"name": "DUP6",
									"source": 0
								},
								{
									"begin": 2085,
									"end": 2098,
									"name": "ADD",
									"source": 0
								},
								{
									"begin": 2085,
									"end": 2098,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 2085,
									"end": 2098,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "7"
								},
								{
									"begin": 2085,
									"end": 2098,
									"name": "JUMP",
									"source": 0,
									"value": "[in]"
								},
								{
									"begin": 2085,
									"end": 2098,
									"name": "tag",
									"source": 0,
									"value": "6"
								},
								{
									"begin": 2085,
									"end": 2098,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 2109,
									"end": 2126,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 2109,
									"end": 2126,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 2109,
									"end": 2126,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "8"
								},
								{
									"begin": 2109,
									"end": 2126,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 2109,
									"end": 2116,
									"name": "PUSH",
									"source": 0,
									"value": "4"
								},
								{
									"begin": 2109,
									"end": 2116,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 2109,
									"end": 2126,
									"name": "PUSH",
									"source": 0,
									"value": "20"
								},
								{
									"begin": 2109,
									"end": 2126,
									"name": "DUP5",
									"source": 0
								},
								{
									"begin": 2109,
									"end": 2126,
									"name": "ADD",
									"source": 0
								},
								{
									"begin": 2109,
									"end": 2126,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 2109,
									"end": 2126,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "7"
								},
								{
									"begin": 2109,
									"end": 2126,
									"name": "JUMP",
									"source": 0,
									"value": "[in]"
								},
								{
									"begin": 2109,
									"end": 2126,
									"name": "tag",
									"source": 0,
									"value": "8"
								},
								{
									"begin": 2109,
									"end": 2126,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 2109,
									"end": 2126,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 2018,
									"end": 2134,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 2018,
									"end": 2134,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "21"
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "JUMP",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "tag",
									"source": 0,
									"value": "7"
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "SLOAD",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "10"
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "11"
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "JUMP",
									"source": 0,
									"value": "[in]"
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "tag",
									"source": 0,
									"value": "10"
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "PUSH",
									"source": 0,
									"value": "20"
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "KECCAK256",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "PUSH",
									"source": 0,
									"value": "1F"
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "ADD",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "PUSH",
									"source": 0,
									"value": "20"
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "DIV",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "ADD",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "SWAP3",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "13"
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "DUP6",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "SSTORE",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "16"
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "JUMP",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "tag",
									"source": 0,
									"value": "13"
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "PUSH",
									"source": 0,
									"value": "1F"
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "LT",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "14"
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "PUSH",
									"source": 0,
									"value": "FF"
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "NOT",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "DUP4",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "ADD",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "OR",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "DUP6",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "SSTORE",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "16"
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "JUMP",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "tag",
									"source": 0,
									"value": "14"
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "ADD",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "PUSH",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "ADD",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "DUP6",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "SSTORE",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "ISZERO",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "16"
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "ADD",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "tag",
									"source": 0,
									"value": "15"
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "GT",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "ISZERO",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "16"
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "SSTORE",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "PUSH",
									"source": 0,
									"value": "20"
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "ADD",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "PUSH",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "ADD",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "15"
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "JUMP",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "tag",
									"source": 0,
									"value": "16"
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "17"
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "SWAP3",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "18"
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "JUMP",
									"source": 0,
									"value": "[in]"
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "tag",
									"source": 0,
									"value": "17"
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "JUMP",
									"source": 0,
									"value": "[out]"
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "tag",
									"source": 0,
									"value": "18"
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "tag",
									"source": 0,
									"value": "19"
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "GT",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "ISZERO",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "17"
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "SSTORE",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "PUSH",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "ADD",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "19"
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "JUMP",
									"source": 0
								},
								{
									"begin": 14,
									"end": 923,
									"name": "tag",
									"source": 10,
									"value": "22"
								},
								{
									"begin": 14,
									"end": 923,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 68,
									"end": 73,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 121,
									"end": 124,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 114,
									"end": 118,
									"name": "PUSH",
									"source": 10,
									"value": "1F"
								},
								{
									"begin": 106,
									"end": 112,
									"name": "DUP4",
									"source": 10
								},
								{
									"begin": 102,
									"end": 119,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 98,
									"end": 125,
									"name": "SLT",
									"source": 10
								},
								{
									"begin": 88,
									"end": 90,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "24"
								},
								{
									"begin": 88,
									"end": 90,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": 143,
									"end": 148,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 136,
									"end": 141,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 129,
									"end": 149,
									"name": "REVERT",
									"source": 10
								},
								{
									"begin": 88,
									"end": 90,
									"name": "tag",
									"source": 10,
									"value": "24"
								},
								{
									"begin": 88,
									"end": 90,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 170,
									"end": 183,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 170,
									"end": 183,
									"name": "MLOAD",
									"source": 10
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "40"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 232,
									"end": 242,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 232,
									"end": 242,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 232,
									"end": 242,
									"name": "GT",
									"source": 10
								},
								{
									"begin": 229,
									"end": 231,
									"name": "ISZERO",
									"source": 10
								},
								{
									"begin": 229,
									"end": 231,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "26"
								},
								{
									"begin": 229,
									"end": 231,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": 245,
									"end": 263,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "26"
								},
								{
									"begin": 245,
									"end": 263,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "27"
								},
								{
									"begin": 245,
									"end": 263,
									"name": "JUMP",
									"source": 10,
									"value": "[in]"
								},
								{
									"begin": 245,
									"end": 263,
									"name": "tag",
									"source": 10,
									"value": "26"
								},
								{
									"begin": 245,
									"end": 263,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 320,
									"end": 322,
									"name": "PUSH",
									"source": 10,
									"value": "40"
								},
								{
									"begin": 314,
									"end": 323,
									"name": "MLOAD",
									"source": 10
								},
								{
									"begin": 288,
									"end": 290,
									"name": "PUSH",
									"source": 10,
									"value": "1F"
								},
								{
									"begin": 374,
									"end": 387,
									"name": "DUP4",
									"source": 10
								},
								{
									"begin": 374,
									"end": 387,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1F"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 370,
									"end": 392,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 370,
									"end": 392,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 370,
									"end": 392,
									"name": "AND",
									"source": 10
								},
								{
									"begin": 394,
									"end": 396,
									"name": "PUSH",
									"source": 10,
									"value": "3F"
								},
								{
									"begin": 366,
									"end": 397,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 362,
									"end": 402,
									"name": "AND",
									"source": 10
								},
								{
									"begin": 350,
									"end": 403,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 350,
									"end": 403,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 350,
									"end": 403,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 418,
									"end": 436,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 418,
									"end": 436,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 418,
									"end": 436,
									"name": "GT",
									"source": 10
								},
								{
									"begin": 438,
									"end": 460,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 438,
									"end": 460,
									"name": "DUP4",
									"source": 10
								},
								{
									"begin": 438,
									"end": 460,
									"name": "LT",
									"source": 10
								},
								{
									"begin": 415,
									"end": 461,
									"name": "OR",
									"source": 10
								},
								{
									"begin": 412,
									"end": 414,
									"name": "ISZERO",
									"source": 10
								},
								{
									"begin": 412,
									"end": 414,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "29"
								},
								{
									"begin": 412,
									"end": 414,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": 464,
									"end": 482,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "29"
								},
								{
									"begin": 464,
									"end": 482,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "27"
								},
								{
									"begin": 464,
									"end": 482,
									"name": "JUMP",
									"source": 10,
									"value": "[in]"
								},
								{
									"begin": 464,
									"end": 482,
									"name": "tag",
									"source": 10,
									"value": "29"
								},
								{
									"begin": 464,
									"end": 482,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 504,
									"end": 514,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 500,
									"end": 502,
									"name": "PUSH",
									"source": 10,
									"value": "40"
								},
								{
									"begin": 493,
									"end": 515,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 539,
									"end": 541,
									"name": "DUP4",
									"source": 10
								},
								{
									"begin": 531,
									"end": 537,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 524,
									"end": 542,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 561,
									"end": 565,
									"name": "PUSH",
									"source": 10,
									"value": "20"
								},
								{
									"begin": 551,
									"end": 565,
									"name": "SWAP3",
									"source": 10
								},
								{
									"begin": 551,
									"end": 565,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 606,
									"end": 609,
									"name": "DUP7",
									"source": 10
								},
								{
									"begin": 601,
									"end": 603,
									"name": "DUP4",
									"source": 10
								},
								{
									"begin": 596,
									"end": 598,
									"name": "DUP6",
									"source": 10
								},
								{
									"begin": 588,
									"end": 594,
									"name": "DUP9",
									"source": 10
								},
								{
									"begin": 584,
									"end": 599,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 580,
									"end": 604,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 577,
									"end": 610,
									"name": "GT",
									"source": 10
								},
								{
									"begin": 574,
									"end": 576,
									"name": "ISZERO",
									"source": 10
								},
								{
									"begin": 574,
									"end": 576,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "30"
								},
								{
									"begin": 574,
									"end": 576,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": 627,
									"end": 632,
									"name": "DUP5",
									"source": 10
								},
								{
									"begin": 620,
									"end": 625,
									"name": "DUP6",
									"source": 10
								},
								{
									"begin": 613,
									"end": 633,
									"name": "REVERT",
									"source": 10
								},
								{
									"begin": 574,
									"end": 576,
									"name": "tag",
									"source": 10,
									"value": "30"
								},
								{
									"begin": 574,
									"end": 576,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 653,
									"end": 658,
									"name": "DUP5",
									"source": 10
								},
								{
									"begin": 644,
									"end": 658,
									"name": "SWAP2",
									"source": 10
								},
								{
									"begin": 644,
									"end": 658,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 667,
									"end": 800,
									"name": "tag",
									"source": 10,
									"value": "31"
								},
								{
									"begin": 667,
									"end": 800,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 681,
									"end": 683,
									"name": "DUP4",
									"source": 10
								},
								{
									"begin": 678,
									"end": 679,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 675,
									"end": 684,
									"name": "LT",
									"source": 10
								},
								{
									"begin": 667,
									"end": 800,
									"name": "ISZERO",
									"source": 10
								},
								{
									"begin": 667,
									"end": 800,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "33"
								},
								{
									"begin": 667,
									"end": 800,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": 769,
									"end": 783,
									"name": "DUP6",
									"source": 10
								},
								{
									"begin": 769,
									"end": 783,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 769,
									"end": 783,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 765,
									"end": 788,
									"name": "DUP4",
									"source": 10
								},
								{
									"begin": 765,
									"end": 788,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 759,
									"end": 789,
									"name": "MLOAD",
									"source": 10
								},
								{
									"begin": 738,
									"end": 752,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 738,
									"end": 752,
									"name": "DUP4",
									"source": 10
								},
								{
									"begin": 738,
									"end": 752,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 734,
									"end": 757,
									"name": "DUP5",
									"source": 10
								},
								{
									"begin": 734,
									"end": 757,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 727,
									"end": 790,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 692,
									"end": 702,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 692,
									"end": 702,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 692,
									"end": 702,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 692,
									"end": 702,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 667,
									"end": 800,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "31"
								},
								{
									"begin": 667,
									"end": 800,
									"name": "JUMP",
									"source": 10
								},
								{
									"begin": 667,
									"end": 800,
									"name": "tag",
									"source": 10,
									"value": "33"
								},
								{
									"begin": 667,
									"end": 800,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 818,
									"end": 820,
									"name": "DUP4",
									"source": 10
								},
								{
									"begin": 815,
									"end": 816,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 812,
									"end": 821,
									"name": "GT",
									"source": 10
								},
								{
									"begin": 809,
									"end": 811,
									"name": "ISZERO",
									"source": 10
								},
								{
									"begin": 809,
									"end": 811,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "34"
								},
								{
									"begin": 809,
									"end": 811,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": 877,
									"end": 882,
									"name": "DUP5",
									"source": 10
								},
								{
									"begin": 872,
									"end": 874,
									"name": "DUP4",
									"source": 10
								},
								{
									"begin": 867,
									"end": 869,
									"name": "DUP6",
									"source": 10
								},
								{
									"begin": 859,
									"end": 865,
									"name": "DUP4",
									"source": 10
								},
								{
									"begin": 855,
									"end": 870,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 851,
									"end": 875,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 844,
									"end": 883,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 809,
									"end": 811,
									"name": "tag",
									"source": 10,
									"value": "34"
								},
								{
									"begin": 809,
									"end": 811,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 911,
									"end": 917,
									"name": "SWAP7",
									"source": 10
								},
								{
									"begin": 78,
									"end": 923,
									"name": "SWAP6",
									"source": 10
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 78,
									"end": 923,
									"name": "JUMP",
									"source": 10,
									"value": "[out]"
								},
								{
									"begin": 928,
									"end": 1520,
									"name": "tag",
									"source": 10,
									"value": "3"
								},
								{
									"begin": 928,
									"end": 1520,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 1027,
									"end": 1033,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 1035,
									"end": 1041,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 1088,
									"end": 1090,
									"name": "PUSH",
									"source": 10,
									"value": "40"
								},
								{
									"begin": 1076,
									"end": 1085,
									"name": "DUP4",
									"source": 10
								},
								{
									"begin": 1067,
									"end": 1074,
									"name": "DUP6",
									"source": 10
								},
								{
									"begin": 1063,
									"end": 1086,
									"name": "SUB",
									"source": 10
								},
								{
									"begin": 1059,
									"end": 1091,
									"name": "SLT",
									"source": 10
								},
								{
									"begin": 1056,
									"end": 1058,
									"name": "ISZERO",
									"source": 10
								},
								{
									"begin": 1056,
									"end": 1058,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "36"
								},
								{
									"begin": 1056,
									"end": 1058,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": 1109,
									"end": 1115,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 1101,
									"end": 1107,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 1094,
									"end": 1116,
									"name": "REVERT",
									"source": 10
								},
								{
									"begin": 1056,
									"end": 1058,
									"name": "tag",
									"source": 10,
									"value": "36"
								},
								{
									"begin": 1056,
									"end": 1058,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 1141,
									"end": 1157,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 1141,
									"end": 1157,
									"name": "MLOAD",
									"source": 10
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "40"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 1206,
									"end": 1220,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 1206,
									"end": 1220,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 1206,
									"end": 1220,
									"name": "GT",
									"source": 10
								},
								{
									"begin": 1203,
									"end": 1205,
									"name": "ISZERO",
									"source": 10
								},
								{
									"begin": 1203,
									"end": 1205,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "37"
								},
								{
									"begin": 1203,
									"end": 1205,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": 1238,
									"end": 1244,
									"name": "DUP4",
									"source": 10
								},
								{
									"begin": 1230,
									"end": 1236,
									"name": "DUP5",
									"source": 10
								},
								{
									"begin": 1223,
									"end": 1245,
									"name": "REVERT",
									"source": 10
								},
								{
									"begin": 1203,
									"end": 1205,
									"name": "tag",
									"source": 10,
									"value": "37"
								},
								{
									"begin": 1203,
									"end": 1205,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 1266,
									"end": 1327,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "38"
								},
								{
									"begin": 1319,
									"end": 1326,
									"name": "DUP7",
									"source": 10
								},
								{
									"begin": 1310,
									"end": 1316,
									"name": "DUP4",
									"source": 10
								},
								{
									"begin": 1299,
									"end": 1308,
									"name": "DUP8",
									"source": 10
								},
								{
									"begin": 1295,
									"end": 1317,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 1266,
									"end": 1327,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "22"
								},
								{
									"begin": 1266,
									"end": 1327,
									"name": "JUMP",
									"source": 10,
									"value": "[in]"
								},
								{
									"begin": 1266,
									"end": 1327,
									"name": "tag",
									"source": 10,
									"value": "38"
								},
								{
									"begin": 1266,
									"end": 1327,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 1256,
									"end": 1327,
									"name": "SWAP4",
									"source": 10
								},
								{
									"begin": 1256,
									"end": 1327,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 1373,
									"end": 1375,
									"name": "PUSH",
									"source": 10,
									"value": "20"
								},
								{
									"begin": 1362,
									"end": 1371,
									"name": "DUP6",
									"source": 10
								},
								{
									"begin": 1358,
									"end": 1376,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 1352,
									"end": 1377,
									"name": "MLOAD",
									"source": 10
								},
								{
									"begin": 1336,
									"end": 1377,
									"name": "SWAP2",
									"source": 10
								},
								{
									"begin": 1336,
									"end": 1377,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 1402,
									"end": 1404,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 1392,
									"end": 1400,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 1389,
									"end": 1405,
									"name": "GT",
									"source": 10
								},
								{
									"begin": 1386,
									"end": 1388,
									"name": "ISZERO",
									"source": 10
								},
								{
									"begin": 1386,
									"end": 1388,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "39"
								},
								{
									"begin": 1386,
									"end": 1388,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": 1423,
									"end": 1429,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 1415,
									"end": 1421,
									"name": "DUP4",
									"source": 10
								},
								{
									"begin": 1408,
									"end": 1430,
									"name": "REVERT",
									"source": 10
								},
								{
									"begin": 1386,
									"end": 1388,
									"name": "tag",
									"source": 10,
									"value": "39"
								},
								{
									"begin": 1386,
									"end": 1388,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 1386,
									"end": 1388,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 1451,
									"end": 1514,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "40"
								},
								{
									"begin": 1506,
									"end": 1513,
									"name": "DUP6",
									"source": 10
								},
								{
									"begin": 1495,
									"end": 1503,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 1484,
									"end": 1493,
									"name": "DUP7",
									"source": 10
								},
								{
									"begin": 1480,
									"end": 1504,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 1451,
									"end": 1514,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "22"
								},
								{
									"begin": 1451,
									"end": 1514,
									"name": "JUMP",
									"source": 10,
									"value": "[in]"
								},
								{
									"begin": 1451,
									"end": 1514,
									"name": "tag",
									"source": 10,
									"value": "40"
								},
								{
									"begin": 1451,
									"end": 1514,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 1441,
									"end": 1514,
									"name": "SWAP2",
									"source": 10
								},
								{
									"begin": 1441,
									"end": 1514,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 1441,
									"end": 1514,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 1046,
									"end": 1520,
									"name": "SWAP3",
									"source": 10
								},
								{
									"begin": 1046,
									"end": 1520,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 1046,
									"end": 1520,
									"name": "SWAP3",
									"source": 10
								},
								{
									"begin": 1046,
									"end": 1520,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 1046,
									"end": 1520,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 1046,
									"end": 1520,
									"name": "JUMP",
									"source": 10,
									"value": "[out]"
								},
								{
									"begin": 1525,
									"end": 1905,
									"name": "tag",
									"source": 10,
									"value": "11"
								},
								{
									"begin": 1525,
									"end": 1905,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 1604,
									"end": 1605,
									"name": "PUSH",
									"source": 10,
									"value": "1"
								},
								{
									"begin": 1600,
									"end": 1612,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 1600,
									"end": 1612,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 1600,
									"end": 1612,
									"name": "SHR",
									"source": 10
								},
								{
									"begin": 1600,
									"end": 1612,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 1647,
									"end": 1659,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 1647,
									"end": 1659,
									"name": "AND",
									"source": 10
								},
								{
									"begin": 1647,
									"end": 1659,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 1668,
									"end": 1670,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "42"
								},
								{
									"begin": 1668,
									"end": 1670,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": 1722,
									"end": 1726,
									"name": "PUSH",
									"source": 10,
									"value": "7F"
								},
								{
									"begin": 1714,
									"end": 1720,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 1710,
									"end": 1727,
									"name": "AND",
									"source": 10
								},
								{
									"begin": 1700,
									"end": 1727,
									"name": "SWAP2",
									"source": 10
								},
								{
									"begin": 1700,
									"end": 1727,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 1668,
									"end": 1670,
									"name": "tag",
									"source": 10,
									"value": "42"
								},
								{
									"begin": 1668,
									"end": 1670,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 1775,
									"end": 1777,
									"name": "PUSH",
									"source": 10,
									"value": "20"
								},
								{
									"begin": 1767,
									"end": 1773,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 1764,
									"end": 1778,
									"name": "LT",
									"source": 10
								},
								{
									"begin": 1744,
									"end": 1762,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 1741,
									"end": 1779,
									"name": "EQ",
									"source": 10
								},
								{
									"begin": 1738,
									"end": 1740,
									"name": "ISZERO",
									"source": 10
								},
								{
									"begin": 1738,
									"end": 1740,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "43"
								},
								{
									"begin": 1738,
									"end": 1740,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": 1821,
									"end": 1831,
									"name": "PUSH",
									"source": 10,
									"value": "4E487B71"
								},
								{
									"begin": 1816,
									"end": 1819,
									"name": "PUSH",
									"source": 10,
									"value": "E0"
								},
								{
									"begin": 1812,
									"end": 1832,
									"name": "SHL",
									"source": 10
								},
								{
									"begin": 1809,
									"end": 1810,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 1802,
									"end": 1833,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 1856,
									"end": 1860,
									"name": "PUSH",
									"source": 10,
									"value": "22"
								},
								{
									"begin": 1853,
									"end": 1854,
									"name": "PUSH",
									"source": 10,
									"value": "4"
								},
								{
									"begin": 1846,
									"end": 1861,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 1884,
									"end": 1888,
									"name": "PUSH",
									"source": 10,
									"value": "24"
								},
								{
									"begin": 1881,
									"end": 1882,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 1874,
									"end": 1889,
									"name": "REVERT",
									"source": 10
								},
								{
									"begin": 1738,
									"end": 1740,
									"name": "tag",
									"source": 10,
									"value": "43"
								},
								{
									"begin": 1738,
									"end": 1740,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 1738,
									"end": 1740,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 1580,
									"end": 1905,
									"name": "SWAP2",
									"source": 10
								},
								{
									"begin": 1580,
									"end": 1905,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 1580,
									"end": 1905,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 1580,
									"end": 1905,
									"name": "JUMP",
									"source": 10,
									"value": "[out]"
								},
								{
									"begin": 1910,
									"end": 2037,
									"name": "tag",
									"source": 10,
									"value": "27"
								},
								{
									"begin": 1910,
									"end": 2037,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 1971,
									"end": 1981,
									"name": "PUSH",
									"source": 10,
									"value": "4E487B71"
								},
								{
									"begin": 1966,
									"end": 1969,
									"name": "PUSH",
									"source": 10,
									"value": "E0"
								},
								{
									"begin": 1962,
									"end": 1982,
									"name": "SHL",
									"source": 10
								},
								{
									"begin": 1959,
									"end": 1960,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 1952,
									"end": 1983,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 2002,
									"end": 2006,
									"name": "PUSH",
									"source": 10,
									"value": "41"
								},
								{
									"begin": 1999,
									"end": 2000,
									"name": "PUSH",
									"source": 10,
									"value": "4"
								},
								{
									"begin": 1992,
									"end": 2007,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 2026,
									"end": 2030,
									"name": "PUSH",
									"source": 10,
									"value": "24"
								},
								{
									"begin": 2023,
									"end": 2024,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 2016,
									"end": 2031,
									"name": "REVERT",
									"source": 10
								},
								{
									"begin": 1942,
									"end": 2037,
									"name": "tag",
									"source": 10,
									"value": "21"
								},
								{
									"begin": 1942,
									"end": 2037,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "PUSH #[$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "PUSH [$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "CODECOPY",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "RETURN",
									"source": 0
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220c92c03cd519d545ecfd82912cd8ce8d5c8a8b337db27724fc62cc5e62f66d5be64736f6c63430008040033",
									".code": [
										{
											"begin": 1424,
											"end": 12997,
											"name": "PUSH",
											"source": 0,
											"value": "80"
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "CALLVALUE",
											"source": 0
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "tag",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "CALLDATALOAD",
											"source": 0
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "PUSH",
											"source": 0,
											"value": "E0"
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "SHR",
											"source": 0
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "PUSH",
											"source": 0,
											"value": "39509351"
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "GT",
											"source": 0
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "14"
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "PUSH",
											"source": 0,
											"value": "39509351"
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "8"
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "PUSH",
											"source": 0,
											"value": "70A08231"
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "9"
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "PUSH",
											"source": 0,
											"value": "95D89B41"
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "10"
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "PUSH",
											"source": 0,
											"value": "A457C2D7"
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "11"
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "PUSH",
											"source": 0,
											"value": "A9059CBB"
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "12"
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "PUSH",
											"source": 0,
											"value": "DD62ED3E"
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "13"
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "tag",
											"source": 0,
											"value": "14"
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "PUSH",
											"source": 0,
											"value": "6FDDE03"
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "3"
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "PUSH",
											"source": 0,
											"value": "95EA7B3"
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "PUSH",
											"source": 0,
											"value": "18160DDD"
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "5"
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "PUSH",
											"source": 0,
											"value": "23B872DD"
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "6"
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "PUSH",
											"source": 0,
											"value": "313CE567"
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "7"
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "tag",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 2204,
											"end": 2304,
											"name": "tag",
											"source": 0,
											"value": "3"
										},
										{
											"begin": 2204,
											"end": 2304,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2204,
											"end": 2304,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "15"
										},
										{
											"begin": 2204,
											"end": 2304,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "16"
										},
										{
											"begin": 2204,
											"end": 2304,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2204,
											"end": 2304,
											"name": "tag",
											"source": 0,
											"value": "15"
										},
										{
											"begin": 2204,
											"end": 2304,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2204,
											"end": 2304,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2204,
											"end": 2304,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2204,
											"end": 2304,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "17"
										},
										{
											"begin": 2204,
											"end": 2304,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2204,
											"end": 2304,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2204,
											"end": 2304,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "18"
										},
										{
											"begin": 2204,
											"end": 2304,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2204,
											"end": 2304,
											"name": "tag",
											"source": 0,
											"value": "17"
										},
										{
											"begin": 2204,
											"end": 2304,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2204,
											"end": 2304,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2204,
											"end": 2304,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2204,
											"end": 2304,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2204,
											"end": 2304,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2204,
											"end": 2304,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 2204,
											"end": 2304,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2204,
											"end": 2304,
											"name": "RETURN",
											"source": 0
										},
										{
											"begin": 4557,
											"end": 4758,
											"name": "tag",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 4557,
											"end": 4758,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4557,
											"end": 4758,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "19"
										},
										{
											"begin": 4557,
											"end": 4758,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 4557,
											"end": 4758,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 4557,
											"end": 4758,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 4557,
											"end": 4758,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "21"
										},
										{
											"begin": 4557,
											"end": 4758,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 4557,
											"end": 4758,
											"name": "tag",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 4557,
											"end": 4758,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4557,
											"end": 4758,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "22"
										},
										{
											"begin": 4557,
											"end": 4758,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 4557,
											"end": 4758,
											"name": "tag",
											"source": 0,
											"value": "19"
										},
										{
											"begin": 4557,
											"end": 4758,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4557,
											"end": 4758,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 4557,
											"end": 4758,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1445,
											"end": 1459,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1445,
											"end": 1459,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 1438,
											"end": 1460,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 1420,
											"end": 1461,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1420,
											"end": 1461,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 1408,
											"end": 1410,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 1393,
											"end": 1411,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 4557,
											"end": 4758,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "17"
										},
										{
											"begin": 1375,
											"end": 1467,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 3326,
											"end": 3434,
											"name": "tag",
											"source": 0,
											"value": "5"
										},
										{
											"begin": 3326,
											"end": 3434,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3414,
											"end": 3426,
											"name": "PUSH",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 3414,
											"end": 3426,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 3326,
											"end": 3434,
											"name": "tag",
											"source": 0,
											"value": "25"
										},
										{
											"begin": 3326,
											"end": 3434,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3326,
											"end": 3434,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 3326,
											"end": 3434,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 5015,
											"end": 5040,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 5015,
											"end": 5040,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 5015,
											"end": 5040,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 5003,
											"end": 5005,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 4988,
											"end": 5006,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 3326,
											"end": 3434,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "17"
										},
										{
											"begin": 4970,
											"end": 5046,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 5338,
											"end": 5633,
											"name": "tag",
											"source": 0,
											"value": "6"
										},
										{
											"begin": 5338,
											"end": 5633,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5338,
											"end": 5633,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "19"
										},
										{
											"begin": 5338,
											"end": 5633,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "30"
										},
										{
											"begin": 5338,
											"end": 5633,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 5338,
											"end": 5633,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 5338,
											"end": 5633,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "31"
										},
										{
											"begin": 5338,
											"end": 5633,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 5338,
											"end": 5633,
											"name": "tag",
											"source": 0,
											"value": "30"
										},
										{
											"begin": 5338,
											"end": 5633,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5338,
											"end": 5633,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "32"
										},
										{
											"begin": 5338,
											"end": 5633,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 3166,
											"end": 3261,
											"name": "tag",
											"source": 0,
											"value": "7"
										},
										{
											"begin": 3166,
											"end": 3261,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3251,
											"end": 3253,
											"name": "PUSH",
											"source": 0,
											"value": "12"
										},
										{
											"begin": 3166,
											"end": 3261,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "25"
										},
										{
											"begin": 3166,
											"end": 3261,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 6042,
											"end": 6280,
											"name": "tag",
											"source": 0,
											"value": "8"
										},
										{
											"begin": 6042,
											"end": 6280,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 6042,
											"end": 6280,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "19"
										},
										{
											"begin": 6042,
											"end": 6280,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "38"
										},
										{
											"begin": 6042,
											"end": 6280,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 6042,
											"end": 6280,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 6042,
											"end": 6280,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "21"
										},
										{
											"begin": 6042,
											"end": 6280,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 6042,
											"end": 6280,
											"name": "tag",
											"source": 0,
											"value": "38"
										},
										{
											"begin": 6042,
											"end": 6280,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 6042,
											"end": 6280,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "39"
										},
										{
											"begin": 6042,
											"end": 6280,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 3497,
											"end": 3624,
											"name": "tag",
											"source": 0,
											"value": "9"
										},
										{
											"begin": 3497,
											"end": 3624,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3497,
											"end": 3624,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "25"
										},
										{
											"begin": 3497,
											"end": 3624,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "42"
										},
										{
											"begin": 3497,
											"end": 3624,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 3497,
											"end": 3624,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 3497,
											"end": 3624,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "43"
										},
										{
											"begin": 3497,
											"end": 3624,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 3497,
											"end": 3624,
											"name": "tag",
											"source": 0,
											"value": "42"
										},
										{
											"begin": 3497,
											"end": 3624,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3598,
											"end": 3616,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 3571,
											"end": 3578,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 3598,
											"end": 3616,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3598,
											"end": 3616,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 3598,
											"end": 3616,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 3598,
											"end": 3616,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 3598,
											"end": 3616,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 3598,
											"end": 3616,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3598,
											"end": 3616,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 3598,
											"end": 3616,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 3598,
											"end": 3616,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3598,
											"end": 3616,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 3598,
											"end": 3616,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 3598,
											"end": 3616,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3497,
											"end": 3624,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 2423,
											"end": 2527,
											"name": "tag",
											"source": 0,
											"value": "10"
										},
										{
											"begin": 2423,
											"end": 2527,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2423,
											"end": 2527,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "15"
										},
										{
											"begin": 2423,
											"end": 2527,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "47"
										},
										{
											"begin": 2423,
											"end": 2527,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 6783,
											"end": 7219,
											"name": "tag",
											"source": 0,
											"value": "11"
										},
										{
											"begin": 6783,
											"end": 7219,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 6783,
											"end": 7219,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "19"
										},
										{
											"begin": 6783,
											"end": 7219,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "50"
										},
										{
											"begin": 6783,
											"end": 7219,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 6783,
											"end": 7219,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 6783,
											"end": 7219,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "21"
										},
										{
											"begin": 6783,
											"end": 7219,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 6783,
											"end": 7219,
											"name": "tag",
											"source": 0,
											"value": "50"
										},
										{
											"begin": 6783,
											"end": 7219,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 6783,
											"end": 7219,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "51"
										},
										{
											"begin": 6783,
											"end": 7219,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 3830,
											"end": 4023,
											"name": "tag",
											"source": 0,
											"value": "12"
										},
										{
											"begin": 3830,
											"end": 4023,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3830,
											"end": 4023,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "19"
										},
										{
											"begin": 3830,
											"end": 4023,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "54"
										},
										{
											"begin": 3830,
											"end": 4023,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 3830,
											"end": 4023,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 3830,
											"end": 4023,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "21"
										},
										{
											"begin": 3830,
											"end": 4023,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 3830,
											"end": 4023,
											"name": "tag",
											"source": 0,
											"value": "54"
										},
										{
											"begin": 3830,
											"end": 4023,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3830,
											"end": 4023,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "55"
										},
										{
											"begin": 3830,
											"end": 4023,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 4086,
											"end": 4237,
											"name": "tag",
											"source": 0,
											"value": "13"
										},
										{
											"begin": 4086,
											"end": 4237,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4086,
											"end": 4237,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "25"
										},
										{
											"begin": 4086,
											"end": 4237,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "58"
										},
										{
											"begin": 4086,
											"end": 4237,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 4086,
											"end": 4237,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 4086,
											"end": 4237,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "59"
										},
										{
											"begin": 4086,
											"end": 4237,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 4086,
											"end": 4237,
											"name": "tag",
											"source": 0,
											"value": "58"
										},
										{
											"begin": 4086,
											"end": 4237,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4086,
											"end": 4237,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "60"
										},
										{
											"begin": 4086,
											"end": 4237,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2204,
											"end": 2304,
											"name": "tag",
											"source": 0,
											"value": "16"
										},
										{
											"begin": 2204,
											"end": 2304,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2258,
											"end": 2271,
											"name": "PUSH",
											"source": 0,
											"value": "60"
										},
										{
											"begin": 2291,
											"end": 2296,
											"name": "PUSH",
											"source": 0,
											"value": "3"
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "63"
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "64"
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "tag",
											"source": 0,
											"value": "63"
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "PUSH",
											"source": 0,
											"value": "1F"
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "65"
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "64"
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "tag",
											"source": 0,
											"value": "65"
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "66"
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "PUSH",
											"source": 0,
											"value": "1F"
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "67"
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "66"
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "tag",
											"source": 0,
											"value": "67"
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "tag",
											"source": 0,
											"value": "68"
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "GT",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "68"
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "PUSH",
											"source": 0,
											"value": "1F"
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "tag",
											"source": 0,
											"value": "66"
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2204,
											"end": 2304,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2204,
											"end": 2304,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 4557,
											"end": 4758,
											"name": "tag",
											"source": 0,
											"value": "22"
										},
										{
											"begin": 4557,
											"end": 4758,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4640,
											"end": 4644,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 736,
											"end": 746,
											"name": "CALLER",
											"source": 4
										},
										{
											"begin": 4696,
											"end": 4728,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "72"
										},
										{
											"begin": 736,
											"end": 746,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 4712,
											"end": 4719,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 4721,
											"end": 4727,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 4696,
											"end": 4704,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "73"
										},
										{
											"begin": 4696,
											"end": 4728,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 4696,
											"end": 4728,
											"name": "tag",
											"source": 0,
											"value": "72"
										},
										{
											"begin": 4696,
											"end": 4728,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4746,
											"end": 4750,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 4746,
											"end": 4750,
											"name": "SWAP4",
											"source": 0
										},
										{
											"begin": 4557,
											"end": 4758,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4557,
											"end": 4758,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 5338,
											"end": 5633,
											"name": "tag",
											"source": 0,
											"value": "32"
										},
										{
											"begin": 5338,
											"end": 5633,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5469,
											"end": 5473,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 736,
											"end": 746,
											"name": "CALLER",
											"source": 4
										},
										{
											"begin": 5527,
											"end": 5565,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "77"
										},
										{
											"begin": 5543,
											"end": 5547,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 736,
											"end": 746,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 5558,
											"end": 5564,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 5527,
											"end": 5542,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "78"
										},
										{
											"begin": 5527,
											"end": 5565,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 5527,
											"end": 5565,
											"name": "tag",
											"source": 0,
											"value": "77"
										},
										{
											"begin": 5527,
											"end": 5565,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5576,
											"end": 5603,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "79"
										},
										{
											"begin": 5586,
											"end": 5590,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 5592,
											"end": 5594,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 5596,
											"end": 5602,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 5576,
											"end": 5585,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "80"
										},
										{
											"begin": 5576,
											"end": 5603,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 5576,
											"end": 5603,
											"name": "tag",
											"source": 0,
											"value": "79"
										},
										{
											"begin": 5576,
											"end": 5603,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5621,
											"end": 5625,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 5621,
											"end": 5625,
											"name": "SWAP5",
											"source": 0
										},
										{
											"begin": 5338,
											"end": 5633,
											"name": "SWAP4",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5338,
											"end": 5633,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 6042,
											"end": 6280,
											"name": "tag",
											"source": 0,
											"value": "39"
										},
										{
											"begin": 6042,
											"end": 6280,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 6130,
											"end": 6134,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 736,
											"end": 746,
											"name": "CALLER",
											"source": 4
										},
										{
											"begin": 6186,
											"end": 6250,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "72"
										},
										{
											"begin": 736,
											"end": 746,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 6202,
											"end": 6209,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 6239,
											"end": 6249,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 6211,
											"end": 6236,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "85"
										},
										{
											"begin": 736,
											"end": 746,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 6202,
											"end": 6209,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 6211,
											"end": 6220,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "60"
										},
										{
											"begin": 6211,
											"end": 6236,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 6211,
											"end": 6236,
											"name": "tag",
											"source": 0,
											"value": "85"
										},
										{
											"begin": 6211,
											"end": 6236,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 6211,
											"end": 6249,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "86"
										},
										{
											"begin": 6211,
											"end": 6249,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 6211,
											"end": 6249,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 6211,
											"end": 6249,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "87"
										},
										{
											"begin": 6211,
											"end": 6249,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 6211,
											"end": 6249,
											"name": "tag",
											"source": 0,
											"value": "86"
										},
										{
											"begin": 6211,
											"end": 6249,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 6186,
											"end": 6194,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "73"
										},
										{
											"begin": 6186,
											"end": 6250,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2423,
											"end": 2527,
											"name": "tag",
											"source": 0,
											"value": "47"
										},
										{
											"begin": 2423,
											"end": 2527,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2479,
											"end": 2492,
											"name": "PUSH",
											"source": 0,
											"value": "60"
										},
										{
											"begin": 2512,
											"end": 2519,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 2505,
											"end": 2519,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2505,
											"end": 2519,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 2505,
											"end": 2519,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "63"
										},
										{
											"begin": 2505,
											"end": 2519,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2505,
											"end": 2519,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "64"
										},
										{
											"begin": 2505,
											"end": 2519,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 6783,
											"end": 7219,
											"name": "tag",
											"source": 0,
											"value": "51"
										},
										{
											"begin": 6783,
											"end": 7219,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 6876,
											"end": 6880,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 736,
											"end": 746,
											"name": "CALLER",
											"source": 4
										},
										{
											"begin": 6876,
											"end": 6880,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 6959,
											"end": 6984,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "97"
										},
										{
											"begin": 736,
											"end": 746,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 6976,
											"end": 6983,
											"name": "DUP7",
											"source": 0
										},
										{
											"begin": 6959,
											"end": 6968,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "60"
										},
										{
											"begin": 6959,
											"end": 6984,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 6959,
											"end": 6984,
											"name": "tag",
											"source": 0,
											"value": "97"
										},
										{
											"begin": 6959,
											"end": 6984,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 6932,
											"end": 6984,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 6932,
											"end": 6984,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 7023,
											"end": 7038,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 7003,
											"end": 7019,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 7003,
											"end": 7038,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 7003,
											"end": 7038,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 6995,
											"end": 7080,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "98"
										},
										{
											"begin": 6995,
											"end": 7080,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 6995,
											"end": 7080,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 6995,
											"end": 7080,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 6995,
											"end": 7080,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 6995,
											"end": 7080,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 4665,
											"end": 4667,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 6995,
											"end": 7080,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 6995,
											"end": 7080,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 6995,
											"end": 7080,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 4647,
											"end": 4668,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 4704,
											"end": 4706,
											"name": "PUSH",
											"source": 10,
											"value": "25"
										},
										{
											"begin": 4684,
											"end": 4702,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 4684,
											"end": 4702,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 4684,
											"end": 4702,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 4677,
											"end": 4707,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 4743,
											"end": 4777,
											"name": "PUSH",
											"source": 10,
											"value": "45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77"
										},
										{
											"begin": 4723,
											"end": 4741,
											"name": "PUSH",
											"source": 10,
											"value": "44"
										},
										{
											"begin": 4723,
											"end": 4741,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 4723,
											"end": 4741,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 4716,
											"end": 4778,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "207A65726F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4794,
											"end": 4812,
											"name": "PUSH",
											"source": 10,
											"value": "64"
										},
										{
											"begin": 4794,
											"end": 4812,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 4794,
											"end": 4812,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 4787,
											"end": 4822,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 4839,
											"end": 4858,
											"name": "PUSH",
											"source": 10,
											"value": "84"
										},
										{
											"begin": 4839,
											"end": 4858,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 6995,
											"end": 7080,
											"name": "tag",
											"source": 0,
											"value": "99"
										},
										{
											"begin": 6995,
											"end": 7080,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 6995,
											"end": 7080,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 6995,
											"end": 7080,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 6995,
											"end": 7080,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 6995,
											"end": 7080,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 6995,
											"end": 7080,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 6995,
											"end": 7080,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 6995,
											"end": 7080,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 6995,
											"end": 7080,
											"name": "tag",
											"source": 0,
											"value": "98"
										},
										{
											"begin": 6995,
											"end": 7080,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 7116,
											"end": 7176,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "79"
										},
										{
											"begin": 7125,
											"end": 7130,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 7132,
											"end": 7139,
											"name": "DUP7",
											"source": 0
										},
										{
											"begin": 7160,
											"end": 7175,
											"name": "DUP7",
											"source": 0
										},
										{
											"begin": 7141,
											"end": 7157,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 7141,
											"end": 7175,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 7116,
											"end": 7124,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "73"
										},
										{
											"begin": 7116,
											"end": 7176,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 3830,
											"end": 4023,
											"name": "tag",
											"source": 0,
											"value": "55"
										},
										{
											"begin": 3830,
											"end": 4023,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3909,
											"end": 3913,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 736,
											"end": 746,
											"name": "CALLER",
											"source": 4
										},
										{
											"begin": 3965,
											"end": 3993,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "72"
										},
										{
											"begin": 736,
											"end": 746,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 3982,
											"end": 3984,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 3986,
											"end": 3992,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 3965,
											"end": 3974,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "80"
										},
										{
											"begin": 3965,
											"end": 3993,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 4086,
											"end": 4237,
											"name": "tag",
											"source": 0,
											"value": "60"
										},
										{
											"begin": 4086,
											"end": 4237,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4202,
											"end": 4220,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 4202,
											"end": 4220,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 4202,
											"end": 4220,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 4175,
											"end": 4182,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 4202,
											"end": 4220,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4202,
											"end": 4220,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 4202,
											"end": 4220,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 4202,
											"end": 4213,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 4202,
											"end": 4220,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 4202,
											"end": 4220,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4202,
											"end": 4220,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 4202,
											"end": 4220,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 4202,
											"end": 4220,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 4202,
											"end": 4220,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 4202,
											"end": 4220,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 4202,
											"end": 4220,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 4202,
											"end": 4229,
											"name": "SWAP4",
											"source": 0
										},
										{
											"begin": 4202,
											"end": 4229,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4202,
											"end": 4229,
											"name": "SWAP5",
											"source": 0
										},
										{
											"begin": 4202,
											"end": 4229,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 4202,
											"end": 4229,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 4202,
											"end": 4229,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 4202,
											"end": 4229,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 4202,
											"end": 4229,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4202,
											"end": 4229,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 4202,
											"end": 4229,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 4202,
											"end": 4229,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 4202,
											"end": 4229,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 4202,
											"end": 4229,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4086,
											"end": 4237,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 10417,
											"end": 10797,
											"name": "tag",
											"source": 0,
											"value": "73"
										},
										{
											"begin": 10417,
											"end": 10797,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 10553,
											"end": 10572,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 10553,
											"end": 10572,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 10545,
											"end": 10613,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "108"
										},
										{
											"begin": 10545,
											"end": 10613,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 10545,
											"end": 10613,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 10545,
											"end": 10613,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 10545,
											"end": 10613,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 10545,
											"end": 10613,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 4260,
											"end": 4262,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 10545,
											"end": 10613,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 10545,
											"end": 10613,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 10545,
											"end": 10613,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 4242,
											"end": 4263,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 4299,
											"end": 4301,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 4279,
											"end": 4297,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 4279,
											"end": 4297,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 4279,
											"end": 4297,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 4272,
											"end": 4302,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 4338,
											"end": 4372,
											"name": "PUSH",
											"source": 10,
											"value": "45524332303A20617070726F76652066726F6D20746865207A65726F20616464"
										},
										{
											"begin": 4318,
											"end": 4336,
											"name": "PUSH",
											"source": 10,
											"value": "44"
										},
										{
											"begin": 4318,
											"end": 4336,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 4318,
											"end": 4336,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 4311,
											"end": 4373,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "72657373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4389,
											"end": 4407,
											"name": "PUSH",
											"source": 10,
											"value": "64"
										},
										{
											"begin": 4389,
											"end": 4407,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 4389,
											"end": 4407,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 4382,
											"end": 4416,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 4433,
											"end": 4452,
											"name": "PUSH",
											"source": 10,
											"value": "84"
										},
										{
											"begin": 4433,
											"end": 4452,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 10545,
											"end": 10613,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "99"
										},
										{
											"begin": 4232,
											"end": 4458,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 10545,
											"end": 10613,
											"name": "tag",
											"source": 0,
											"value": "108"
										},
										{
											"begin": 10545,
											"end": 10613,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 10632,
											"end": 10653,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 10632,
											"end": 10653,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 10624,
											"end": 10692,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "111"
										},
										{
											"begin": 10624,
											"end": 10692,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 10624,
											"end": 10692,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 10624,
											"end": 10692,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 10624,
											"end": 10692,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 10624,
											"end": 10692,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2686,
											"end": 2688,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 10624,
											"end": 10692,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 10624,
											"end": 10692,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 10624,
											"end": 10692,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2668,
											"end": 2689,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 2725,
											"end": 2727,
											"name": "PUSH",
											"source": 10,
											"value": "22"
										},
										{
											"begin": 2705,
											"end": 2723,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 2705,
											"end": 2723,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 2705,
											"end": 2723,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 2698,
											"end": 2728,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 2764,
											"end": 2798,
											"name": "PUSH",
											"source": 10,
											"value": "45524332303A20617070726F766520746F20746865207A65726F206164647265"
										},
										{
											"begin": 2744,
											"end": 2762,
											"name": "PUSH",
											"source": 10,
											"value": "44"
										},
										{
											"begin": 2744,
											"end": 2762,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 2744,
											"end": 2762,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 2737,
											"end": 2799,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "7373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "F0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2815,
											"end": 2833,
											"name": "PUSH",
											"source": 10,
											"value": "64"
										},
										{
											"begin": 2815,
											"end": 2833,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 2815,
											"end": 2833,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 2808,
											"end": 2840,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 2857,
											"end": 2876,
											"name": "PUSH",
											"source": 10,
											"value": "84"
										},
										{
											"begin": 2857,
											"end": 2876,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 10624,
											"end": 10692,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "99"
										},
										{
											"begin": 2658,
											"end": 2882,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 10624,
											"end": 10692,
											"name": "tag",
											"source": 0,
											"value": "111"
										},
										{
											"begin": 10624,
											"end": 10692,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 10705,
											"end": 10723,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 10705,
											"end": 10723,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 10705,
											"end": 10723,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 10705,
											"end": 10723,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 10705,
											"end": 10723,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 10705,
											"end": 10723,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 10705,
											"end": 10723,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 10705,
											"end": 10716,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 10705,
											"end": 10723,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 10705,
											"end": 10723,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 10705,
											"end": 10723,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 10705,
											"end": 10723,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 10705,
											"end": 10723,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 10705,
											"end": 10723,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 10705,
											"end": 10723,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 10705,
											"end": 10723,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 10705,
											"end": 10732,
											"name": "SWAP5",
											"source": 0
										},
										{
											"begin": 10705,
											"end": 10732,
											"name": "DUP8",
											"source": 0
										},
										{
											"begin": 10705,
											"end": 10732,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 10705,
											"end": 10732,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 10705,
											"end": 10732,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 10705,
											"end": 10732,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 10705,
											"end": 10732,
											"name": "SWAP5",
											"source": 0
										},
										{
											"begin": 10705,
											"end": 10732,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 10705,
											"end": 10732,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 10705,
											"end": 10732,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 10705,
											"end": 10732,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 10705,
											"end": 10732,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 10705,
											"end": 10732,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 10705,
											"end": 10741,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 10705,
											"end": 10741,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 10705,
											"end": 10741,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 10757,
											"end": 10789,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 10757,
											"end": 10789,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 5015,
											"end": 5040,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 5015,
											"end": 5040,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 5015,
											"end": 5040,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 10757,
											"end": 10789,
											"name": "PUSH",
											"source": 0,
											"value": "8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925"
										},
										{
											"begin": 10757,
											"end": 10789,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 4988,
											"end": 5006,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 10757,
											"end": 10789,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 10757,
											"end": 10789,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 10757,
											"end": 10789,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 10757,
											"end": 10789,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 10757,
											"end": 10789,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 10757,
											"end": 10789,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 10757,
											"end": 10789,
											"name": "LOG3",
											"source": 0
										},
										{
											"begin": 10417,
											"end": 10797,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 10417,
											"end": 10797,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 10417,
											"end": 10797,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 10417,
											"end": 10797,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 11088,
											"end": 11541,
											"name": "tag",
											"source": 0,
											"value": "78"
										},
										{
											"begin": 11088,
											"end": 11541,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 11223,
											"end": 11247,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 11250,
											"end": 11275,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "116"
										},
										{
											"begin": 11260,
											"end": 11265,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 11267,
											"end": 11274,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 11250,
											"end": 11259,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "60"
										},
										{
											"begin": 11250,
											"end": 11275,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 11250,
											"end": 11275,
											"name": "tag",
											"source": 0,
											"value": "116"
										},
										{
											"begin": 11250,
											"end": 11275,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 11223,
											"end": 11275,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 11223,
											"end": 11275,
											"name": "POP",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 11290,
											"end": 11306,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 11290,
											"end": 11327,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 11286,
											"end": 11534,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "121"
										},
										{
											"begin": 11286,
											"end": 11534,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 11372,
											"end": 11378,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 11352,
											"end": 11368,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 11352,
											"end": 11378,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 11352,
											"end": 11378,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 11344,
											"end": 11412,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "118"
										},
										{
											"begin": 11344,
											"end": 11412,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 11344,
											"end": 11412,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 11344,
											"end": 11412,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 11344,
											"end": 11412,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 11344,
											"end": 11412,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 3089,
											"end": 3091,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 11344,
											"end": 11412,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 11344,
											"end": 11412,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 11344,
											"end": 11412,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 3071,
											"end": 3092,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 3128,
											"end": 3130,
											"name": "PUSH",
											"source": 10,
											"value": "1D"
										},
										{
											"begin": 3108,
											"end": 3126,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 3108,
											"end": 3126,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 3108,
											"end": 3126,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 3101,
											"end": 3131,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 3167,
											"end": 3198,
											"name": "PUSH",
											"source": 10,
											"value": "45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000"
										},
										{
											"begin": 3147,
											"end": 3165,
											"name": "PUSH",
											"source": 10,
											"value": "44"
										},
										{
											"begin": 3147,
											"end": 3165,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 3147,
											"end": 3165,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 3140,
											"end": 3199,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 3216,
											"end": 3234,
											"name": "PUSH",
											"source": 10,
											"value": "64"
										},
										{
											"begin": 3216,
											"end": 3234,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 11344,
											"end": 11412,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "99"
										},
										{
											"begin": 3061,
											"end": 3240,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 11344,
											"end": 11412,
											"name": "tag",
											"source": 0,
											"value": "118"
										},
										{
											"begin": 11344,
											"end": 11412,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 11456,
											"end": 11507,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "121"
										},
										{
											"begin": 11465,
											"end": 11470,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 11472,
											"end": 11479,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 11500,
											"end": 11506,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 11481,
											"end": 11497,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 11481,
											"end": 11506,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 11456,
											"end": 11464,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "73"
										},
										{
											"begin": 11456,
											"end": 11507,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 11456,
											"end": 11507,
											"name": "tag",
											"source": 0,
											"value": "121"
										},
										{
											"begin": 11456,
											"end": 11507,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 11088,
											"end": 11541,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 11088,
											"end": 11541,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 11088,
											"end": 11541,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 11088,
											"end": 11541,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 11088,
											"end": 11541,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 7698,
											"end": 8369,
											"name": "tag",
											"source": 0,
											"value": "80"
										},
										{
											"begin": 7698,
											"end": 8369,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7829,
											"end": 7847,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 7829,
											"end": 7847,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 7821,
											"end": 7889,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "123"
										},
										{
											"begin": 7821,
											"end": 7889,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 7821,
											"end": 7889,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 7821,
											"end": 7889,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7821,
											"end": 7889,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 7821,
											"end": 7889,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 3854,
											"end": 3856,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 7821,
											"end": 7889,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 7821,
											"end": 7889,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 7821,
											"end": 7889,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 3836,
											"end": 3857,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 3893,
											"end": 3895,
											"name": "PUSH",
											"source": 10,
											"value": "25"
										},
										{
											"begin": 3873,
											"end": 3891,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 3873,
											"end": 3891,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 3873,
											"end": 3891,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 3866,
											"end": 3896,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 3932,
											"end": 3966,
											"name": "PUSH",
											"source": 10,
											"value": "45524332303A207472616E736665722066726F6D20746865207A65726F206164"
										},
										{
											"begin": 3912,
											"end": 3930,
											"name": "PUSH",
											"source": 10,
											"value": "44"
										},
										{
											"begin": 3912,
											"end": 3930,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 3912,
											"end": 3930,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 3905,
											"end": 3967,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "6472657373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3983,
											"end": 4001,
											"name": "PUSH",
											"source": 10,
											"value": "64"
										},
										{
											"begin": 3983,
											"end": 4001,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 3983,
											"end": 4001,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 3976,
											"end": 4011,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 4028,
											"end": 4047,
											"name": "PUSH",
											"source": 10,
											"value": "84"
										},
										{
											"begin": 4028,
											"end": 4047,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 7821,
											"end": 7889,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "99"
										},
										{
											"begin": 3826,
											"end": 4053,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 7821,
											"end": 7889,
											"name": "tag",
											"source": 0,
											"value": "123"
										},
										{
											"begin": 7821,
											"end": 7889,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7908,
											"end": 7924,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 7908,
											"end": 7924,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 7900,
											"end": 7964,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "126"
										},
										{
											"begin": 7900,
											"end": 7964,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 7900,
											"end": 7964,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 7900,
											"end": 7964,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7900,
											"end": 7964,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 7900,
											"end": 7964,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2282,
											"end": 2284,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 7900,
											"end": 7964,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 7900,
											"end": 7964,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 7900,
											"end": 7964,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2264,
											"end": 2285,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 2321,
											"end": 2323,
											"name": "PUSH",
											"source": 10,
											"value": "23"
										},
										{
											"begin": 2301,
											"end": 2319,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 2301,
											"end": 2319,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 2301,
											"end": 2319,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 2294,
											"end": 2324,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 2360,
											"end": 2394,
											"name": "PUSH",
											"source": 10,
											"value": "45524332303A207472616E7366657220746F20746865207A65726F2061646472"
										},
										{
											"begin": 2340,
											"end": 2358,
											"name": "PUSH",
											"source": 10,
											"value": "44"
										},
										{
											"begin": 2340,
											"end": 2358,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 2340,
											"end": 2358,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 2333,
											"end": 2395,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "657373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2411,
											"end": 2429,
											"name": "PUSH",
											"source": 10,
											"value": "64"
										},
										{
											"begin": 2411,
											"end": 2429,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 2411,
											"end": 2429,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 2404,
											"end": 2437,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 2454,
											"end": 2473,
											"name": "PUSH",
											"source": 10,
											"value": "84"
										},
										{
											"begin": 2454,
											"end": 2473,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 7900,
											"end": 7964,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "99"
										},
										{
											"begin": 2254,
											"end": 2479,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 7900,
											"end": 7964,
											"name": "tag",
											"source": 0,
											"value": "126"
										},
										{
											"begin": 7900,
											"end": 7964,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8050,
											"end": 8065,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 8050,
											"end": 8065,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 8028,
											"end": 8047,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 8050,
											"end": 8065,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 8050,
											"end": 8065,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 8050,
											"end": 8065,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 8050,
											"end": 8065,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 8050,
											"end": 8065,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 8050,
											"end": 8065,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 8050,
											"end": 8065,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 8050,
											"end": 8065,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 8050,
											"end": 8065,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 8050,
											"end": 8065,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 8050,
											"end": 8065,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 8084,
											"end": 8105,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 8084,
											"end": 8105,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 8084,
											"end": 8105,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 8084,
											"end": 8105,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 8076,
											"end": 8148,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "131"
										},
										{
											"begin": 8076,
											"end": 8148,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 8076,
											"end": 8148,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 8076,
											"end": 8148,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 8076,
											"end": 8148,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 8076,
											"end": 8148,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 3447,
											"end": 3449,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 8076,
											"end": 8148,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 8076,
											"end": 8148,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 8076,
											"end": 8148,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 3429,
											"end": 3450,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 3486,
											"end": 3488,
											"name": "PUSH",
											"source": 10,
											"value": "26"
										},
										{
											"begin": 3466,
											"end": 3484,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 3466,
											"end": 3484,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 3466,
											"end": 3484,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 3459,
											"end": 3489,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 3525,
											"end": 3559,
											"name": "PUSH",
											"source": 10,
											"value": "45524332303A207472616E7366657220616D6F756E7420657863656564732062"
										},
										{
											"begin": 3505,
											"end": 3523,
											"name": "PUSH",
											"source": 10,
											"value": "44"
										},
										{
											"begin": 3505,
											"end": 3523,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 3505,
											"end": 3523,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 3498,
											"end": 3560,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "616C616E6365"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3576,
											"end": 3594,
											"name": "PUSH",
											"source": 10,
											"value": "64"
										},
										{
											"begin": 3576,
											"end": 3594,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 3576,
											"end": 3594,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 3569,
											"end": 3605,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 3622,
											"end": 3641,
											"name": "PUSH",
											"source": 10,
											"value": "84"
										},
										{
											"begin": 3622,
											"end": 3641,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 8076,
											"end": 8148,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "99"
										},
										{
											"begin": 3419,
											"end": 3647,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 8076,
											"end": 8148,
											"name": "tag",
											"source": 0,
											"value": "131"
										},
										{
											"begin": 8076,
											"end": 8148,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8184,
											"end": 8199,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 8184,
											"end": 8199,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 8184,
											"end": 8199,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 8184,
											"end": 8193,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 8184,
											"end": 8199,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 8184,
											"end": 8199,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 8184,
											"end": 8199,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 8184,
											"end": 8199,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 8184,
											"end": 8199,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 8184,
											"end": 8199,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 8184,
											"end": 8199,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 8184,
											"end": 8199,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 8184,
											"end": 8199,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 8184,
											"end": 8199,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 8184,
											"end": 8199,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 8202,
											"end": 8222,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 8202,
											"end": 8222,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 8202,
											"end": 8222,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 8184,
											"end": 8222,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 8184,
											"end": 8222,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 8244,
											"end": 8257,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 8244,
											"end": 8257,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 8244,
											"end": 8257,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 8244,
											"end": 8257,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 8244,
											"end": 8257,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 8244,
											"end": 8257,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 8244,
											"end": 8257,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 8244,
											"end": 8257,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 8244,
											"end": 8267,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 8244,
											"end": 8267,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 8216,
											"end": 8222,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 8216,
											"end": 8222,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 8184,
											"end": 8193,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 8244,
											"end": 8267,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "134"
										},
										{
											"begin": 8244,
											"end": 8267,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 8216,
											"end": 8222,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 8216,
											"end": 8222,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 8244,
											"end": 8267,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "87"
										},
										{
											"begin": 8244,
											"end": 8267,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 8244,
											"end": 8267,
											"name": "tag",
											"source": 0,
											"value": "134"
										},
										{
											"begin": 8244,
											"end": 8267,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 8244,
											"end": 8267,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 8244,
											"end": 8267,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 8244,
											"end": 8267,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 8244,
											"end": 8267,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 8244,
											"end": 8267,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 8244,
											"end": 8267,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 8244,
											"end": 8267,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 8300,
											"end": 8302,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8285,
											"end": 8311,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 8294,
											"end": 8298,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8285,
											"end": 8311,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 8285,
											"end": 8311,
											"name": "PUSH",
											"source": 0,
											"value": "DDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF"
										},
										{
											"begin": 8304,
											"end": 8310,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 8285,
											"end": 8311,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 8285,
											"end": 8311,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 8285,
											"end": 8311,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "135"
										},
										{
											"begin": 8285,
											"end": 8311,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 5015,
											"end": 5040,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 5015,
											"end": 5040,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 5003,
											"end": 5005,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 4988,
											"end": 5006,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 4988,
											"end": 5006,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 4970,
											"end": 5046,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 8285,
											"end": 8311,
											"name": "tag",
											"source": 0,
											"value": "135"
										},
										{
											"begin": 8285,
											"end": 8311,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 8285,
											"end": 8311,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 8285,
											"end": 8311,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 8285,
											"end": 8311,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 8285,
											"end": 8311,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 8285,
											"end": 8311,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 8285,
											"end": 8311,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 8285,
											"end": 8311,
											"name": "LOG3",
											"source": 0
										},
										{
											"begin": 8324,
											"end": 8361,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "121"
										},
										{
											"begin": 12141,
											"end": 12266,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 14,
											"end": 187,
											"name": "tag",
											"source": 10,
											"value": "141"
										},
										{
											"begin": 14,
											"end": 187,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 82,
											"end": 102,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 82,
											"end": 102,
											"name": "CALLDATALOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 131,
											"end": 162,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 131,
											"end": 162,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 121,
											"end": 163,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 121,
											"end": 163,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 111,
											"end": 113,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "143"
										},
										{
											"begin": 111,
											"end": 113,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 177,
											"end": 178,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 174,
											"end": 175,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 167,
											"end": 179,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 111,
											"end": 113,
											"name": "tag",
											"source": 10,
											"value": "143"
										},
										{
											"begin": 111,
											"end": 113,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 63,
											"end": 187,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 63,
											"end": 187,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 63,
											"end": 187,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 63,
											"end": 187,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 192,
											"end": 388,
											"name": "tag",
											"source": 10,
											"value": "43"
										},
										{
											"begin": 192,
											"end": 388,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 251,
											"end": 257,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 304,
											"end": 306,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 292,
											"end": 301,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 283,
											"end": 290,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 279,
											"end": 302,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 275,
											"end": 307,
											"name": "SLT",
											"source": 10
										},
										{
											"begin": 272,
											"end": 274,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 272,
											"end": 274,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "145"
										},
										{
											"begin": 272,
											"end": 274,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 325,
											"end": 331,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 317,
											"end": 323,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 310,
											"end": 332,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 272,
											"end": 274,
											"name": "tag",
											"source": 10,
											"value": "145"
										},
										{
											"begin": 272,
											"end": 274,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 353,
											"end": 382,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "146"
										},
										{
											"begin": 372,
											"end": 381,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 353,
											"end": 382,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "141"
										},
										{
											"begin": 353,
											"end": 382,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 353,
											"end": 382,
											"name": "tag",
											"source": 10,
											"value": "146"
										},
										{
											"begin": 353,
											"end": 382,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 343,
											"end": 382,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 262,
											"end": 388,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 262,
											"end": 388,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 393,
											"end": 663,
											"name": "tag",
											"source": 10,
											"value": "59"
										},
										{
											"begin": 393,
											"end": 663,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 461,
											"end": 467,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 469,
											"end": 475,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 522,
											"end": 524,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 510,
											"end": 519,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 501,
											"end": 508,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 497,
											"end": 520,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 493,
											"end": 525,
											"name": "SLT",
											"source": 10
										},
										{
											"begin": 490,
											"end": 492,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 490,
											"end": 492,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "148"
										},
										{
											"begin": 490,
											"end": 492,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 543,
											"end": 549,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 535,
											"end": 541,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 528,
											"end": 550,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 490,
											"end": 492,
											"name": "tag",
											"source": 10,
											"value": "148"
										},
										{
											"begin": 490,
											"end": 492,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 571,
											"end": 600,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "149"
										},
										{
											"begin": 590,
											"end": 599,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 571,
											"end": 600,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "141"
										},
										{
											"begin": 571,
											"end": 600,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 571,
											"end": 600,
											"name": "tag",
											"source": 10,
											"value": "149"
										},
										{
											"begin": 571,
											"end": 600,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 561,
											"end": 600,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 561,
											"end": 600,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 619,
											"end": 657,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "150"
										},
										{
											"begin": 653,
											"end": 655,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 642,
											"end": 651,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 638,
											"end": 656,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 619,
											"end": 657,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "141"
										},
										{
											"begin": 619,
											"end": 657,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 619,
											"end": 657,
											"name": "tag",
											"source": 10,
											"value": "150"
										},
										{
											"begin": 619,
											"end": 657,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 609,
											"end": 657,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 609,
											"end": 657,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 480,
											"end": 663,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 480,
											"end": 663,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 480,
											"end": 663,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 480,
											"end": 663,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 480,
											"end": 663,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 480,
											"end": 663,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 668,
											"end": 1006,
											"name": "tag",
											"source": 10,
											"value": "31"
										},
										{
											"begin": 668,
											"end": 1006,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 745,
											"end": 751,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 753,
											"end": 759,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 761,
											"end": 767,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 814,
											"end": 816,
											"name": "PUSH",
											"source": 10,
											"value": "60"
										},
										{
											"begin": 802,
											"end": 811,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 793,
											"end": 800,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 789,
											"end": 812,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 785,
											"end": 817,
											"name": "SLT",
											"source": 10
										},
										{
											"begin": 782,
											"end": 784,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 782,
											"end": 784,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "152"
										},
										{
											"begin": 782,
											"end": 784,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 835,
											"end": 841,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 827,
											"end": 833,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 820,
											"end": 842,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 782,
											"end": 784,
											"name": "tag",
											"source": 10,
											"value": "152"
										},
										{
											"begin": 782,
											"end": 784,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 863,
											"end": 892,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "153"
										},
										{
											"begin": 882,
											"end": 891,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 863,
											"end": 892,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "141"
										},
										{
											"begin": 863,
											"end": 892,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 863,
											"end": 892,
											"name": "tag",
											"source": 10,
											"value": "153"
										},
										{
											"begin": 863,
											"end": 892,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 853,
											"end": 892,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 853,
											"end": 892,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 911,
											"end": 949,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "154"
										},
										{
											"begin": 945,
											"end": 947,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 934,
											"end": 943,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 930,
											"end": 948,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 911,
											"end": 949,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "141"
										},
										{
											"begin": 911,
											"end": 949,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 911,
											"end": 949,
											"name": "tag",
											"source": 10,
											"value": "154"
										},
										{
											"begin": 911,
											"end": 949,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 901,
											"end": 949,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 901,
											"end": 949,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 996,
											"end": 998,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 985,
											"end": 994,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 981,
											"end": 999,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 968,
											"end": 1000,
											"name": "CALLDATALOAD",
											"source": 10
										},
										{
											"begin": 958,
											"end": 1000,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 958,
											"end": 1000,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 772,
											"end": 1006,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 772,
											"end": 1006,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 772,
											"end": 1006,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 772,
											"end": 1006,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 772,
											"end": 1006,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 772,
											"end": 1006,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 1011,
											"end": 1275,
											"name": "tag",
											"source": 10,
											"value": "21"
										},
										{
											"begin": 1011,
											"end": 1275,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1079,
											"end": 1085,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1087,
											"end": 1093,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1140,
											"end": 1142,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 1128,
											"end": 1137,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 1119,
											"end": 1126,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 1115,
											"end": 1138,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 1111,
											"end": 1143,
											"name": "SLT",
											"source": 10
										},
										{
											"begin": 1108,
											"end": 1110,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 1108,
											"end": 1110,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "156"
										},
										{
											"begin": 1108,
											"end": 1110,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 1161,
											"end": 1167,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1153,
											"end": 1159,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 1146,
											"end": 1168,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 1108,
											"end": 1110,
											"name": "tag",
											"source": 10,
											"value": "156"
										},
										{
											"begin": 1108,
											"end": 1110,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1189,
											"end": 1218,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "157"
										},
										{
											"begin": 1208,
											"end": 1217,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 1189,
											"end": 1218,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "141"
										},
										{
											"begin": 1189,
											"end": 1218,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 1189,
											"end": 1218,
											"name": "tag",
											"source": 10,
											"value": "157"
										},
										{
											"begin": 1189,
											"end": 1218,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1179,
											"end": 1218,
											"name": "SWAP5",
											"source": 10
										},
										{
											"begin": 1265,
											"end": 1267,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 1250,
											"end": 1268,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 1250,
											"end": 1268,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1250,
											"end": 1268,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 1250,
											"end": 1268,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1237,
											"end": 1269,
											"name": "CALLDATALOAD",
											"source": 10
										},
										{
											"begin": 1237,
											"end": 1269,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1098,
											"end": 1275,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 1472,
											"end": 2075,
											"name": "tag",
											"source": 10,
											"value": "18"
										},
										{
											"begin": 1472,
											"end": 2075,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1584,
											"end": 1588,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1613,
											"end": 1615,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 1642,
											"end": 1644,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1631,
											"end": 1640,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 1624,
											"end": 1645,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 1674,
											"end": 1680,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 1668,
											"end": 1681,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 1717,
											"end": 1723,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1712,
											"end": 1714,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 1701,
											"end": 1710,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 1697,
											"end": 1715,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1690,
											"end": 1724,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 1742,
											"end": 1746,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 1755,
											"end": 1895,
											"name": "tag",
											"source": 10,
											"value": "160"
										},
										{
											"begin": 1755,
											"end": 1895,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1769,
											"end": 1775,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1766,
											"end": 1767,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1763,
											"end": 1776,
											"name": "LT",
											"source": 10
										},
										{
											"begin": 1755,
											"end": 1895,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 1755,
											"end": 1895,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "162"
										},
										{
											"begin": 1755,
											"end": 1895,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 1864,
											"end": 1878,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 1864,
											"end": 1878,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1864,
											"end": 1878,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1860,
											"end": 1883,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 1860,
											"end": 1883,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1854,
											"end": 1884,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 1830,
											"end": 1847,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 1830,
											"end": 1847,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 1830,
											"end": 1847,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1849,
											"end": 1851,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 1826,
											"end": 1852,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1819,
											"end": 1885,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 1784,
											"end": 1794,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 1784,
											"end": 1794,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1755,
											"end": 1895,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "160"
										},
										{
											"begin": 1755,
											"end": 1895,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 1755,
											"end": 1895,
											"name": "tag",
											"source": 10,
											"value": "162"
										},
										{
											"begin": 1755,
											"end": 1895,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1913,
											"end": 1919,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1910,
											"end": 1911,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1907,
											"end": 1920,
											"name": "GT",
											"source": 10
										},
										{
											"begin": 1904,
											"end": 1906,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 1904,
											"end": 1906,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "163"
										},
										{
											"begin": 1904,
											"end": 1906,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 1983,
											"end": 1987,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 1978,
											"end": 1980,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 1969,
											"end": 1975,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 1958,
											"end": 1967,
											"name": "DUP8",
											"source": 10
										},
										{
											"begin": 1954,
											"end": 1976,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1950,
											"end": 1981,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1943,
											"end": 1988,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 1904,
											"end": 1906,
											"name": "tag",
											"source": 10,
											"value": "163"
										},
										{
											"begin": 1904,
											"end": 1906,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2059,
											"end": 2061,
											"name": "PUSH",
											"source": 10,
											"value": "1F"
										},
										{
											"begin": 2038,
											"end": 2053,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 2034,
											"end": 2063,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 2019,
											"end": 2064,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 2019,
											"end": 2064,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 2019,
											"end": 2064,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 2019,
											"end": 2064,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 2066,
											"end": 2068,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 2015,
											"end": 2069,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 2015,
											"end": 2069,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 1593,
											"end": 2075,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1593,
											"end": 2075,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 5051,
											"end": 5280,
											"name": "tag",
											"source": 10,
											"value": "87"
										},
										{
											"begin": 5051,
											"end": 5280,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 5091,
											"end": 5094,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 5122,
											"end": 5123,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 5118,
											"end": 5124,
											"name": "NOT",
											"source": 10
										},
										{
											"begin": 5115,
											"end": 5116,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 5112,
											"end": 5125,
											"name": "GT",
											"source": 10
										},
										{
											"begin": 5109,
											"end": 5111,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 5109,
											"end": 5111,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "173"
										},
										{
											"begin": 5109,
											"end": 5111,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "4E487B71"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5148,
											"end": 5181,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 5148,
											"end": 5181,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 5204,
											"end": 5208,
											"name": "PUSH",
											"source": 10,
											"value": "11"
										},
										{
											"begin": 5201,
											"end": 5202,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 5194,
											"end": 5209,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 5234,
											"end": 5238,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 5155,
											"end": 5158,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 5222,
											"end": 5239,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 5109,
											"end": 5111,
											"name": "tag",
											"source": 10,
											"value": "173"
										},
										{
											"begin": 5109,
											"end": 5111,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5265,
											"end": 5274,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 5265,
											"end": 5274,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 5099,
											"end": 5280,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 5285,
											"end": 5665,
											"name": "tag",
											"source": 10,
											"value": "64"
										},
										{
											"begin": 5285,
											"end": 5665,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 5364,
											"end": 5365,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 5360,
											"end": 5372,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 5360,
											"end": 5372,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 5360,
											"end": 5372,
											"name": "SHR",
											"source": 10
										},
										{
											"begin": 5360,
											"end": 5372,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 5407,
											"end": 5419,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 5407,
											"end": 5419,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 5407,
											"end": 5419,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 5428,
											"end": 5430,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "175"
										},
										{
											"begin": 5428,
											"end": 5430,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 5482,
											"end": 5486,
											"name": "PUSH",
											"source": 10,
											"value": "7F"
										},
										{
											"begin": 5474,
											"end": 5480,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 5470,
											"end": 5487,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 5460,
											"end": 5487,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 5460,
											"end": 5487,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 5428,
											"end": 5430,
											"name": "tag",
											"source": 10,
											"value": "175"
										},
										{
											"begin": 5428,
											"end": 5430,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 5535,
											"end": 5537,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 5527,
											"end": 5533,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 5524,
											"end": 5538,
											"name": "LT",
											"source": 10
										},
										{
											"begin": 5504,
											"end": 5522,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 5501,
											"end": 5539,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 5498,
											"end": 5500,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 5498,
											"end": 5500,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "176"
										},
										{
											"begin": 5498,
											"end": 5500,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 5581,
											"end": 5591,
											"name": "PUSH",
											"source": 10,
											"value": "4E487B71"
										},
										{
											"begin": 5576,
											"end": 5579,
											"name": "PUSH",
											"source": 10,
											"value": "E0"
										},
										{
											"begin": 5572,
											"end": 5592,
											"name": "SHL",
											"source": 10
										},
										{
											"begin": 5569,
											"end": 5570,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 5562,
											"end": 5593,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 5616,
											"end": 5620,
											"name": "PUSH",
											"source": 10,
											"value": "22"
										},
										{
											"begin": 5613,
											"end": 5614,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 5606,
											"end": 5621,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 5644,
											"end": 5648,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 5641,
											"end": 5642,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 5634,
											"end": 5649,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 5498,
											"end": 5500,
											"name": "tag",
											"source": 10,
											"value": "176"
										},
										{
											"begin": 5498,
											"end": 5500,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 5498,
											"end": 5500,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 5340,
											"end": 5665,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 5340,
											"end": 5665,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 5340,
											"end": 5665,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 5340,
											"end": 5665,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										}
									]
								}
							}
						},
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"decimals()": "313ce567",
							"decreaseAllowance(address,uint256)": "a457c2d7",
							"increaseAllowance(address,uint256)": "39509351",
							"name()": "06fdde03",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC20} interface. z This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. For a generic mechanism see {ERC20PresetMinterPauser}. TIP: For a detailed writeup see our guide https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. We have followed general OpenZeppelin Contracts guidelines: functions revert instead returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC20 applications. Additionally, an {Approval} event is emitted on calls to {transferFrom}. This allows applications to reconstruct the allowance for all accounts just by listening to said events. Other implementations of the EIP may not emit these events, as it isn't required by the specification. Finally, the non-standard {decreaseAllowance} and {increaseAllowance} functions have been added to mitigate the well-known issues around setting allowances. See {IERC20-approve}.\",\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"constructor\":{\"details\":\"Sets the values for {name} and {symbol}. The default value of {decimals} is 18. To select a different value for {decimals} you should overload it. All two of these values are immutable: they can only be set once during construction.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"ERC20/ERC20.sol\":\"ERC20\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"ERC20/ERC20.sol\":{\"keccak256\":\"0x06de64a6e4f0f98aaf7bc91b3826b714e7ce7827a08da3031f8f2f91c14c5687\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://79cb85a1ebbc907f8b80a26cfce98cd61eb1dfc5dbed47f2cc5f6e7a3e87d2db\",\"dweb:/ipfs/QmWzRXkG6oFwtNiGz98zduSDVYhnTKkCE5YMTVE15fBFse\"]},\"ERC20/IERC20.sol\":{\"keccak256\":\"0x62e7e272bf9d2c10b294645ea698d7fc41dadc18146ac88e9b9cc18514faacc1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e09024b0f1ddb94bdc13008d4c221747b1a6f1e07b0ca599d8d213925982af34\",\"dweb:/ipfs/QmcL6X4KCFc45tk5xSEgBDFUrsKap8G74aJtti5sUYzYCL\"]},\"ERC20/IERC20Metadata.sol\":{\"keccak256\":\"0x2095e6b6cd9fc67a55c1dce6c4a4282036fef487baf848e399adc2f571f6c47b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bbdbc5c7af217e674e7c45ab729cf3ffe1c2756c4438e5818f39f30266b836e2\",\"dweb:/ipfs/QmPkmQQ6bAVYGRKR1KMqRhU1kPL49aFc5zqCLmJZEMsavE\"]},\"Utils/Context.sol\":{\"keccak256\":\"0x81d5fc973a522c8909d60be6a201869d46aa47b030b8813f60616404628c2b94\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9755b505799e622d964a843a8ed1fd60fedffca230178e5cb95ae9280df4dcd2\",\"dweb:/ipfs/QmRkhUYUUgRZ2QYJjmtQct2ubyYwS3bdUMhbuFYM12VfYn\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 15,
								"contract": "ERC20/ERC20.sol:ERC20",
								"label": "_balances",
								"offset": 0,
								"slot": "0",
								"type": "t_mapping(t_address,t_uint256)"
							},
							{
								"astId": 21,
								"contract": "ERC20/ERC20.sol:ERC20",
								"label": "_allowances",
								"offset": 0,
								"slot": "1",
								"type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
							},
							{
								"astId": 23,
								"contract": "ERC20/ERC20.sol:ERC20",
								"label": "_totalSupply",
								"offset": 0,
								"slot": "2",
								"type": "t_uint256"
							},
							{
								"astId": 25,
								"contract": "ERC20/ERC20.sol:ERC20",
								"label": "_name",
								"offset": 0,
								"slot": "3",
								"type": "t_string_storage"
							},
							{
								"astId": 27,
								"contract": "ERC20/ERC20.sol:ERC20",
								"label": "_symbol",
								"offset": 0,
								"slot": "4",
								"type": "t_string_storage"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_mapping(t_address,t_mapping(t_address,t_uint256))": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => mapping(address => uint256))",
								"numberOfBytes": "32",
								"value": "t_mapping(t_address,t_uint256)"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_string_storage": {
								"encoding": "bytes",
								"label": "string",
								"numberOfBytes": "32"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"ERC20/IERC20.sol": {
				"IERC20": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC20 standard as defined in the EIP.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the amount of tokens owned by `account`."
							},
							"totalSupply()": {
								"details": "Returns the amount of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"ERC20/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"ERC20/IERC20.sol\":{\"keccak256\":\"0x62e7e272bf9d2c10b294645ea698d7fc41dadc18146ac88e9b9cc18514faacc1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e09024b0f1ddb94bdc13008d4c221747b1a6f1e07b0ca599d8d213925982af34\",\"dweb:/ipfs/QmcL6X4KCFc45tk5xSEgBDFUrsKap8G74aJtti5sUYzYCL\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"ERC20/IERC20Metadata.sol": {
				"IERC20Metadata": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface for the optional metadata functions from the ERC20 standard. _Available since v4.1._",
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the amount of tokens owned by `account`."
							},
							"decimals()": {
								"details": "Returns the decimals places of the token."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"symbol()": {
								"details": "Returns the symbol of the token."
							},
							"totalSupply()": {
								"details": "Returns the amount of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"decimals()": "313ce567",
							"name()": "06fdde03",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for the optional metadata functions from the ERC20 standard. _Available since v4.1._\",\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"decimals()\":{\"details\":\"Returns the decimals places of the token.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"ERC20/IERC20Metadata.sol\":\"IERC20Metadata\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"ERC20/IERC20.sol\":{\"keccak256\":\"0x62e7e272bf9d2c10b294645ea698d7fc41dadc18146ac88e9b9cc18514faacc1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e09024b0f1ddb94bdc13008d4c221747b1a6f1e07b0ca599d8d213925982af34\",\"dweb:/ipfs/QmcL6X4KCFc45tk5xSEgBDFUrsKap8G74aJtti5sUYzYCL\"]},\"ERC20/IERC20Metadata.sol\":{\"keccak256\":\"0x2095e6b6cd9fc67a55c1dce6c4a4282036fef487baf848e399adc2f571f6c47b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bbdbc5c7af217e674e7c45ab729cf3ffe1c2756c4438e5818f39f30266b836e2\",\"dweb:/ipfs/QmPkmQQ6bAVYGRKR1KMqRhU1kPL49aFc5zqCLmJZEMsavE\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"Ethereum/Presale.sol": {
				"Presale": {
					"abi": [
						{
							"inputs": [],
							"stateMutability": "payable",
							"type": "constructor"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "WETH",
							"outputs": [
								{
									"internalType": "contract IERC20",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "backToken",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"name": "buyerInfo",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "baseDeposit",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "tokenOwner",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "lastWithDraw",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "totalTokenWithDraw",
									"type": "uint256"
								},
								{
									"internalType": "bool",
									"name": "isRefund",
									"type": "bool"
								},
								{
									"internalType": "bool",
									"name": "isClaim",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "checkAdminAddress",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "_amount",
									"type": "uint256"
								}
							],
							"name": "deposit",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "feeAnyone",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_address",
									"type": "address"
								}
							],
							"name": "getBalance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address payable",
									"name": "_presaleOwner",
									"type": "address"
								},
								{
									"internalType": "contract ERC20",
									"name": "_saleToken",
									"type": "address"
								},
								{
									"internalType": "contract ERC20",
									"name": "_baseTOken",
									"type": "address"
								},
								{
									"internalType": "uint256[7]",
									"name": "datas",
									"type": "uint256[7]"
								}
							],
							"name": "initialSaleInfor",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "presaleStatus",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "totalBaseCollected",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "totalTokenSold",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "totalTokenWithDraw",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "totalBaseWithDraw",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "numByer",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "totalFee",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "saleInfor",
							"outputs": [
								{
									"internalType": "address payable",
									"name": "presaleOwner",
									"type": "address"
								},
								{
									"internalType": "contract ERC20",
									"name": "saleToken",
									"type": "address"
								},
								{
									"internalType": "contract ERC20",
									"name": "baseToken",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenPrice",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "startSale",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "endSale",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "minSpendPerBuyer",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "maxSpendPerBuyer",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "refundFee",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "claimFee",
									"type": "uint256"
								},
								{
									"internalType": "bool",
									"name": "saleIsBaseToken",
									"type": "bool"
								},
								{
									"internalType": "uint256",
									"name": "amountTokenForSale",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "status",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalFee",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferETH",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"name": "userFee",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"Ethereum/Presale.sol\":338:5763  contract Presale is ReentrancyGuard, Ownable{\r... */\n  mstore(0x40, 0x80)\n    /* \"Utils/ReentrancyGuard.sol\":1734:1735  1 */\n  0x01\n    /* \"Utils/ReentrancyGuard.sol\":1845:1852  _status */\n  0x00\n    /* \"Utils/ReentrancyGuard.sol\":1845:1867  _status = _NOT_ENTERED */\n  sstore\n    /* \"Utils/Ownable.sol\":942:974  _transferOwnership(_msgSender()) */\n  tag_6\n    /* \"Utils/Context.sol\":736:746  msg.sender */\n  caller\n    /* \"Utils/Ownable.sol\":942:960  _transferOwnership */\n  tag_9\n    /* \"Utils/Ownable.sol\":942:974  _transferOwnership(_msgSender()) */\n  jump\t// in\ntag_6:\n    /* \"Ethereum/Presale.sol\":1933:1937  WETH */\n  0x17\n    /* \"Ethereum/Presale.sol\":1933:1989  WETH = ERC20(0xc778417E063141139Fce010982780140Aa0cD5Ab) */\n  dup1\n  sload\n    /* \"Ethereum/Presale.sol\":1946:1988  0xc778417E063141139Fce010982780140Aa0cD5Ab */\n  0xc778417e063141139fce010982780140aa0cd5ab\n  not(sub(shl(0xa0, 0x01), 0x01))\n    /* \"Ethereum/Presale.sol\":1933:1989  WETH = ERC20(0xc778417E063141139Fce010982780140Aa0cD5Ab) */\n  swap1\n  swap2\n  and\n  or\n  swap1\n  sstore\n    /* \"Ethereum/Presale.sol\":2000:2054  admins.add(0x6Ccb41eedA5a073076F3E7dC1614C185b5fA41eD) */\n  tag_11\n    /* \"Ethereum/Presale.sol\":2000:2006  admins */\n  0x19\n    /* \"Ethereum/Presale.sol\":2011:2053  0x6Ccb41eedA5a073076F3E7dC1614C185b5fA41eD */\n  0x6ccb41eeda5a073076f3e7dc1614c185b5fa41ed\n    /* \"Ethereum/Presale.sol\":2000:2010  admins.add */\n  tag_12\n  0x20\n  swap1\n  dup2\n  shl\n  tag_0_98\n  or\n    /* \"Ethereum/Presale.sol\":2000:2054  admins.add(0x6Ccb41eedA5a073076F3E7dC1614C185b5fA41eD) */\n  swap1\n  shr\n  jump\t// in\ntag_11:\n  pop\n    /* \"Ethereum/Presale.sol\":2065:2119  admins.add(0x4f0B12bBF40Fc182559822A5b1dB6D34dbC3E016) */\n  tag_13\n    /* \"Ethereum/Presale.sol\":2076:2118  0x4f0B12bBF40Fc182559822A5b1dB6D34dbC3E016 */\n  0x4f0b12bbf40fc182559822a5b1db6d34dbc3e016\n    /* \"Ethereum/Presale.sol\":2065:2071  admins */\n  0x19\n    /* \"Ethereum/Presale.sol\":2065:2075  admins.add */\n  or(tag_0_98, shl(0x20, tag_12))\n  swap1\n    /* \"Ethereum/Presale.sol\":2065:2119  admins.add(0x4f0B12bBF40Fc182559822A5b1dB6D34dbC3E016) */\n  swap2\n  swap1\n  0x20\n  shr\n  jump\t// in\ntag_13:\n  pop\n    /* \"Ethereum/Presale.sol\":2142:2144  20 */\n  0x14\n    /* \"Ethereum/Presale.sol\":2130:2139  feeAnyone */\n  0x18\n    /* \"Ethereum/Presale.sol\":2130:2144  feeAnyone = 20 */\n  sstore\n    /* \"Ethereum/Presale.sol\":338:5763  contract Presale is ReentrancyGuard, Ownable{\r... */\n  jump(tag_14)\n    /* \"Utils/Ownable.sol\":2333:2524  function _transferOwnership(address newOwner) internal virtual {\r... */\ntag_9:\n    /* \"Utils/Ownable.sol\":2426:2432  _owner */\n  0x01\n  dup1\n  sload\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"Utils/Ownable.sol\":2443:2460  _owner = newOwner */\n  dup4\n  dup2\n  and\n  not(sub(shl(0xa0, 0x01), 0x01))\n  dup4\n  and\n  dup2\n  or\n  swap1\n  swap4\n  sstore\n    /* \"Utils/Ownable.sol\":2476:2516  OwnershipTransferred(oldOwner, newOwner) */\n  mload(0x40)\n    /* \"Utils/Ownable.sol\":2426:2432  _owner */\n  swap2\n  and\n  swap2\n    /* \"Utils/Ownable.sol\":2443:2460  _owner = newOwner */\n  swap1\n    /* \"Utils/Ownable.sol\":2426:2432  _owner */\n  dup3\n  swap1\n    /* \"Utils/Ownable.sol\":2476:2516  OwnershipTransferred(oldOwner, newOwner) */\n  0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\n  swap1\n    /* \"Utils/Ownable.sol\":2407:2423  address oldOwner */\n  0x00\n  swap1\n    /* \"Utils/Ownable.sol\":2476:2516  OwnershipTransferred(oldOwner, newOwner) */\n  log3\n    /* \"Utils/Ownable.sol\":2333:2524  function _transferOwnership(address newOwner) internal virtual {\r... */\n  pop\n  pop\n  jump\t// out\n    /* \"Utils/EnumerableSet.sol\":8259:8411  function add(AddressSet storage set, address value) internal returns (bool) {\r... */\ntag_12:\n    /* \"Utils/EnumerableSet.sol\":8329:8333  bool */\n  0x00\n    /* \"Utils/EnumerableSet.sol\":8353:8403  _add(set._inner, bytes32(uint256(uint160(value)))) */\n  tag_18\n    /* \"Utils/EnumerableSet.sol\":8358:8361  set */\n  dup4\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"Utils/EnumerableSet.sol\":8378:8401  uint256(uint160(value)) */\n  dup5\n  and\n    /* \"Utils/EnumerableSet.sol\":8353:8357  _add */\n  tag_19\n    /* \"Utils/EnumerableSet.sol\":8353:8403  _add(set._inner, bytes32(uint256(uint160(value)))) */\n  jump\t// in\ntag_18:\n    /* \"Utils/EnumerableSet.sol\":8346:8403  return _add(set._inner, bytes32(uint256(uint160(value)))) */\n  swap1\n  pop\n    /* \"Utils/EnumerableSet.sol\":8259:8411  function add(AddressSet storage set, address value) internal returns (bool) {\r... */\ntag_17:\n  swap3\n  swap2\n  pop\n  pop\n  jump\t// out\n    /* \"Utils/EnumerableSet.sol\":2174:2588  function _add(Set storage set, bytes32 value) private returns (bool) {\r... */\ntag_19:\n    /* \"Utils/EnumerableSet.sol\":2237:2241  bool */\n  0x00\n    /* \"Utils/EnumerableSet.sol\":4367:4386  set._indexes[value] */\n  dup2\n  dup2\n  mstore\n    /* \"Utils/EnumerableSet.sol\":4367:4379  set._indexes */\n  0x01\n  dup4\n  add\n    /* \"Utils/EnumerableSet.sol\":4367:4386  set._indexes[value] */\n  0x20\n  mstore\n  0x40\n  dup2\n  keccak256\n  sload\n    /* \"Utils/EnumerableSet.sol\":2254:2581  if (!_contains(set, value)) {\r... */\n  tag_23\n  jumpi\n  pop\n    /* \"Utils/EnumerableSet.sol\":2297:2320  set._values.push(value) */\n  dup2\n  sload\n  0x01\n  dup2\n  dup2\n  add\n  dup5\n  sstore\n    /* \"Utils/EnumerableSet.sol\":2297:2308  set._values */\n  0x00\n    /* \"Utils/EnumerableSet.sol\":2297:2320  set._values.push(value) */\n  dup5\n  dup2\n  mstore\n  0x20\n  dup1\n  dup3\n  keccak256\n  swap1\n  swap4\n  add\n  dup5\n  swap1\n  sstore\n    /* \"Utils/EnumerableSet.sol\":2480:2498  set._values.length */\n  dup5\n  sload\n    /* \"Utils/EnumerableSet.sol\":2458:2477  set._indexes[value] */\n  dup5\n  dup3\n  mstore\n    /* \"Utils/EnumerableSet.sol\":2458:2470  set._indexes */\n  dup3\n  dup7\n  add\n    /* \"Utils/EnumerableSet.sol\":2458:2477  set._indexes[value] */\n  swap1\n  swap4\n  mstore\n  0x40\n  swap1\n  keccak256\n    /* \"Utils/EnumerableSet.sol\":2458:2498  set._indexes[value] = set._values.length */\n  swap2\n  swap1\n  swap2\n  sstore\n    /* \"Utils/EnumerableSet.sol\":2513:2524  return true */\n  jump(tag_17)\n    /* \"Utils/EnumerableSet.sol\":2254:2581  if (!_contains(set, value)) {\r... */\ntag_23:\n  pop\n    /* \"Utils/EnumerableSet.sol\":2564:2569  false */\n  0x00\n    /* \"Utils/EnumerableSet.sol\":2557:2569  return false */\n  jump(tag_17)\n    /* \"Ethereum/Presale.sol\":338:5763  contract Presale is ReentrancyGuard, Ownable{\r... */\ntag_14:\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"Ethereum/Presale.sol\":338:5763  contract Presale is ReentrancyGuard, Ownable{\r... */\n      mstore(0x40, 0x80)\n      jumpi(tag_1, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x861faf5f\n      gt\n      tag_19\n      jumpi\n      dup1\n      0xb6b55f25\n      gt\n      tag_20\n      jumpi\n      dup1\n      0xb6b55f25\n      eq\n      tag_14\n      jumpi\n      dup1\n      0xcad5b0f7\n      eq\n      tag_15\n      jumpi\n      dup1\n      0xe2d3f423\n      eq\n      tag_16\n      jumpi\n      dup1\n      0xf2fde38b\n      eq\n      tag_17\n      jumpi\n      dup1\n      0xf8b2cb4f\n      eq\n      tag_18\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_20:\n      dup1\n      0x861faf5f\n      eq\n      tag_10\n      jumpi\n      dup1\n      0x8da5cb5b\n      eq\n      tag_11\n      jumpi\n      dup1\n      0xacfb2355\n      eq\n      tag_12\n      jumpi\n      dup1\n      0xad5c4648\n      eq\n      tag_13\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_19:\n      dup1\n      0x4329db46\n      gt\n      tag_21\n      jumpi\n      dup1\n      0x4329db46\n      eq\n      tag_6\n      jumpi\n      dup1\n      0x56c5f349\n      eq\n      tag_7\n      jumpi\n      dup1\n      0x61e17655\n      eq\n      tag_8\n      jumpi\n      dup1\n      0x715018a6\n      eq\n      tag_9\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_21:\n      dup1\n      0x18856a2f\n      eq\n      tag_2\n      jumpi\n      dup1\n      0x1df4ccfc\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x200d2ed2\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x3b5ef2ad\n      eq\n      tag_5\n      jumpi\n    tag_1:\n      0x00\n      dup1\n      revert\n        /* \"Ethereum/Presale.sol\":1492:1518  SaleInfor public saleInfor */\n    tag_2:\n      callvalue\n      dup1\n      iszero\n      tag_22\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_22:\n      pop\n      sload(0x0b)\n      sload(0x0c)\n      sload(0x0d)\n      sload(0x0e)\n      sload(0x0f)\n      sload(0x10)\n      sload(0x11)\n      sload(0x12)\n      sload(0x13)\n      sload(0x14)\n      sload(0x15)\n      sload(0x16)\n      tag_23\n      swap12\n      sub(shl(0xa0, 0x01), 0x01)\n      swap1\n      dup2\n      and\n      swap12\n      dup2\n      and\n      swap11\n      and\n      swap9\n      swap8\n      swap7\n      swap6\n      swap5\n      swap4\n      swap3\n      swap2\n      0xff\n      and\n      swap1\n      dup13\n      jump\n    tag_23:\n      0x40\n      dup1\n      mload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":3465:3480   */\n      swap14\n      dup15\n      and\n        /* \"#utility.yul\":3447:3481   */\n      dup2\n      mstore\n        /* \"#utility.yul\":3517:3532   */\n      swap12\n      dup14\n      and\n        /* \"#utility.yul\":3512:3514   */\n      0x20\n        /* \"#utility.yul\":3497:3515   */\n      dup14\n      add\n        /* \"#utility.yul\":3490:3533   */\n      mstore\n        /* \"#utility.yul\":3569:3584   */\n      swap10\n      swap1\n      swap12\n      and\n        /* \"#utility.yul\":3549:3567   */\n      swap9\n      dup11\n      add\n        /* \"#utility.yul\":3542:3585   */\n      swap9\n      swap1\n      swap9\n      mstore\n        /* \"#utility.yul\":3616:3618   */\n      0x60\n        /* \"#utility.yul\":3601:3619   */\n      dup10\n      add\n        /* \"#utility.yul\":3594:3628   */\n      swap7\n      swap1\n      swap7\n      mstore\n        /* \"#utility.yul\":3659:3662   */\n      0x80\n        /* \"#utility.yul\":3644:3663   */\n      dup9\n      add\n        /* \"#utility.yul\":3637:3672   */\n      swap5\n      swap1\n      swap5\n      mstore\n        /* \"#utility.yul\":3427:3430   */\n      0xa0\n        /* \"#utility.yul\":3688:3707   */\n      dup8\n      add\n        /* \"#utility.yul\":3681:3716   */\n      swap3\n      swap1\n      swap3\n      mstore\n        /* \"#utility.yul\":3747:3750   */\n      0xc0\n        /* \"#utility.yul\":3732:3751   */\n      dup7\n      add\n        /* \"#utility.yul\":3725:3760   */\n      mstore\n        /* \"#utility.yul\":3791:3794   */\n      0xe0\n        /* \"#utility.yul\":3776:3795   */\n      dup6\n      add\n        /* \"#utility.yul\":3769:3804   */\n      mstore\n        /* \"#utility.yul\":3835:3838   */\n      0x0100\n        /* \"#utility.yul\":3820:3839   */\n      dup5\n      add\n        /* \"#utility.yul\":3813:3848   */\n      mstore\n        /* \"#utility.yul\":3879:3882   */\n      0x0120\n        /* \"#utility.yul\":3864:3883   */\n      dup4\n      add\n        /* \"#utility.yul\":3857:3892   */\n      mstore\n        /* \"#utility.yul\":3936:3951   */\n      iszero\n        /* \"#utility.yul\":3929:3952   */\n      iszero\n        /* \"#utility.yul\":3923:3926   */\n      0x0140\n        /* \"#utility.yul\":3908:3927   */\n      dup3\n      add\n        /* \"#utility.yul\":3901:3953   */\n      mstore\n        /* \"#utility.yul\":3984:3987   */\n      0x0160\n        /* \"#utility.yul\":3969:3988   */\n      dup2\n      add\n        /* \"#utility.yul\":3962:3998   */\n      swap2\n      swap1\n      swap2\n      mstore\n        /* \"#utility.yul\":3396:3399   */\n      0x0180\n        /* \"#utility.yul\":3381:3400   */\n      add\n        /* \"Ethereum/Presale.sol\":1492:1518  SaleInfor public saleInfor */\n    tag_25:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"Ethereum/Presale.sol\":1628:1651  uint256 public totalFee */\n    tag_3:\n      callvalue\n      dup1\n      iszero\n      tag_27\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_27:\n      pop\n      tag_28\n      sload(0x1b)\n      dup2\n      jump\n    tag_28:\n      mload(0x40)\n        /* \"#utility.yul\":7853:7878   */\n      swap1\n      dup2\n      mstore\n        /* \"#utility.yul\":7841:7843   */\n      0x20\n        /* \"#utility.yul\":7826:7844   */\n      add\n        /* \"Ethereum/Presale.sol\":1628:1651  uint256 public totalFee */\n      tag_25\n        /* \"#utility.yul\":7808:7884   */\n      jump\n        /* \"Ethereum/Presale.sol\":3061:3398  function status() public view returns(uint256) {\r... */\n    tag_4:\n      callvalue\n      dup1\n      iszero\n      tag_32\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_32:\n      pop\n      tag_28\n      tag_34\n      jump\t// in\n        /* \"Ethereum/Presale.sol\":1550:1574  uint256 public feeAnyone */\n    tag_5:\n      callvalue\n      dup1\n      iszero\n      tag_36\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_36:\n      pop\n      tag_28\n      sload(0x18)\n      dup2\n      jump\n        /* \"Ethereum/Presale.sol\":5637:5758  function transferETH(uint256 amount) external payable {\r... */\n    tag_6:\n      tag_40\n      tag_41\n      calldatasize\n      0x04\n      tag_42\n      jump\t// in\n    tag_41:\n      tag_43\n      jump\t// in\n    tag_40:\n      stop\n        /* \"Ethereum/Presale.sol\":1402:1444  mapping(address => uint256) public userFee */\n    tag_7:\n      callvalue\n      dup1\n      iszero\n      tag_44\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_44:\n      pop\n      tag_28\n      tag_46\n      calldatasize\n      0x04\n      tag_47\n      jump\t// in\n    tag_46:\n      mstore(0x20, 0x03)\n      0x00\n      swap1\n      dup2\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n      dup2\n      jump\n        /* \"Ethereum/Presale.sol\":2160:3052  function initialSaleInfor(\r... */\n    tag_8:\n      callvalue\n      dup1\n      iszero\n      tag_50\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_50:\n      pop\n      tag_40\n      tag_52\n      calldatasize\n      0x04\n      tag_53\n      jump\t// in\n    tag_52:\n      tag_54\n      jump\t// in\n        /* \"Utils/Ownable.sol\":1714:1817  function renounceOwnership() public virtual onlyOwner {\r... */\n    tag_9:\n      callvalue\n      dup1\n      iszero\n      tag_55\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_55:\n      pop\n      tag_40\n      tag_57\n      jump\t// in\n        /* \"Ethereum/Presale.sol\":5521:5629  function backToken() external payable {\r... */\n    tag_10:\n      tag_40\n      tag_59\n      jump\t// in\n        /* \"Utils/Ownable.sol\":1063:1150  function owner() public view virtual returns (address) {\r... */\n    tag_11:\n      callvalue\n      dup1\n      iszero\n      tag_60\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_60:\n      pop\n        /* \"Utils/Ownable.sol\":1136:1142  _owner */\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x01))\n        /* \"Utils/Ownable.sol\":1063:1150  function owner() public view virtual returns (address) {\r... */\n    tag_61:\n      mload(0x40)\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":2872:2904   */\n      swap1\n      swap2\n      and\n        /* \"#utility.yul\":2854:2905   */\n      dup2\n      mstore\n        /* \"#utility.yul\":2842:2844   */\n      0x20\n        /* \"#utility.yul\":2827:2845   */\n      add\n        /* \"Utils/Ownable.sol\":1063:1150  function owner() public view virtual returns (address) {\r... */\n      tag_25\n        /* \"#utility.yul\":2809:2911   */\n      jump\n        /* \"Ethereum/Presale.sol\":1451:1485  PresaleStatus public presaleStatus */\n    tag_12:\n      callvalue\n      dup1\n      iszero\n      tag_65\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_65:\n      pop\n      sload(0x04)\n      sload(0x05)\n      sload(0x06)\n      sload(0x07)\n      sload(0x08)\n      sload(0x09)\n      tag_66\n      swap6\n      swap5\n      swap4\n      swap3\n      swap2\n      swap1\n      dup7\n      jump\n    tag_66:\n      0x40\n      dup1\n      mload\n        /* \"#utility.yul\":8736:8761   */\n      swap7\n      dup8\n      mstore\n        /* \"#utility.yul\":8792:8794   */\n      0x20\n        /* \"#utility.yul\":8777:8795   */\n      dup8\n      add\n        /* \"#utility.yul\":8770:8804   */\n      swap6\n      swap1\n      swap6\n      mstore\n        /* \"#utility.yul\":8820:8838   */\n      swap4\n      dup6\n      add\n        /* \"#utility.yul\":8813:8847   */\n      swap3\n      swap1\n      swap3\n      mstore\n        /* \"#utility.yul\":8878:8880   */\n      0x60\n        /* \"#utility.yul\":8863:8881   */\n      dup5\n      add\n        /* \"#utility.yul\":8856:8890   */\n      mstore\n        /* \"#utility.yul\":8921:8924   */\n      0x80\n        /* \"#utility.yul\":8906:8925   */\n      dup4\n      add\n        /* \"#utility.yul\":8899:8934   */\n      mstore\n        /* \"#utility.yul\":8965:8968   */\n      0xa0\n        /* \"#utility.yul\":8950:8969   */\n      dup3\n      add\n        /* \"#utility.yul\":8943:8978   */\n      mstore\n        /* \"#utility.yul\":8723:8726   */\n      0xc0\n        /* \"#utility.yul\":8708:8727   */\n      add\n        /* \"Ethereum/Presale.sol\":1451:1485  PresaleStatus public presaleStatus */\n      tag_25\n        /* \"#utility.yul\":8690:8984   */\n      jump\n        /* \"Ethereum/Presale.sol\":1525:1543  IERC20 public WETH */\n    tag_13:\n      callvalue\n      dup1\n      iszero\n      tag_70\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_70:\n      pop\n      sload(0x17)\n      tag_61\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      dup2\n      jump\n        /* \"Ethereum/Presale.sol\":3525:5391  function deposit(uint256 _amount) external payable nonReentrant {\r... */\n    tag_14:\n      tag_40\n      tag_76\n      calldatasize\n      0x04\n      tag_42\n      jump\t// in\n    tag_76:\n      tag_77\n      jump\t// in\n        /* \"Ethereum/Presale.sol\":3407:3517  function checkAdminAddress() public view returns(bool) {\r... */\n    tag_15:\n      callvalue\n      dup1\n      iszero\n      tag_78\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_78:\n      pop\n      tag_79\n      tag_80\n      jump\t// in\n    tag_79:\n      mload(0x40)\n        /* \"#utility.yul\":4554:4568   */\n      swap1\n      iszero\n        /* \"#utility.yul\":4547:4569   */\n      iszero\n        /* \"#utility.yul\":4529:4570   */\n      dup2\n      mstore\n        /* \"#utility.yul\":4517:4519   */\n      0x20\n        /* \"#utility.yul\":4502:4520   */\n      add\n        /* \"Ethereum/Presale.sol\":3407:3517  function checkAdminAddress() public view returns(bool) {\r... */\n      tag_25\n        /* \"#utility.yul\":4484:4576   */\n      jump\n        /* \"Ethereum/Presale.sol\":1349:1395  mapping(address => BuyerInfo) public buyerInfo */\n    tag_16:\n      callvalue\n      dup1\n      iszero\n      tag_83\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_83:\n      pop\n      tag_84\n      tag_85\n      calldatasize\n      0x04\n      tag_47\n      jump\t// in\n    tag_85:\n      0x02\n      0x20\n      dup2\n      swap1\n      mstore\n      0x00\n      swap2\n      dup3\n      mstore\n      0x40\n      swap1\n      swap2\n      keccak256\n      dup1\n      sload\n      0x01\n      dup3\n      add\n      sload\n      swap3\n      dup3\n      add\n      sload\n      0x03\n      dup4\n      add\n      sload\n      0x04\n      swap1\n      swap4\n      add\n      sload\n      swap2\n      swap4\n      swap3\n      swap1\n      swap2\n      0xff\n      dup1\n      dup3\n      and\n      swap2\n      0x0100\n      swap1\n      div\n      and\n      dup7\n      jump\n    tag_84:\n      0x40\n      dup1\n      mload\n        /* \"#utility.yul\":8164:8189   */\n      swap7\n      dup8\n      mstore\n        /* \"#utility.yul\":8220:8222   */\n      0x20\n        /* \"#utility.yul\":8205:8223   */\n      dup8\n      add\n        /* \"#utility.yul\":8198:8232   */\n      swap6\n      swap1\n      swap6\n      mstore\n        /* \"#utility.yul\":8248:8266   */\n      swap4\n      dup6\n      add\n        /* \"#utility.yul\":8241:8275   */\n      swap3\n      swap1\n      swap3\n      mstore\n        /* \"#utility.yul\":8306:8308   */\n      0x60\n        /* \"#utility.yul\":8291:8309   */\n      dup5\n      add\n        /* \"#utility.yul\":8284:8318   */\n      mstore\n        /* \"#utility.yul\":8362:8376   */\n      iszero\n        /* \"#utility.yul\":8355:8377   */\n      iszero\n        /* \"#utility.yul\":8349:8352   */\n      0x80\n        /* \"#utility.yul\":8334:8353   */\n      dup4\n      add\n        /* \"#utility.yul\":8327:8378   */\n      mstore\n        /* \"#utility.yul\":8422:8436   */\n      iszero\n        /* \"#utility.yul\":8415:8437   */\n      iszero\n        /* \"#utility.yul\":8409:8412   */\n      0xa0\n        /* \"#utility.yul\":8394:8413   */\n      dup3\n      add\n        /* \"#utility.yul\":8387:8438   */\n      mstore\n        /* \"#utility.yul\":8151:8154   */\n      0xc0\n        /* \"#utility.yul\":8136:8155   */\n      add\n        /* \"Ethereum/Presale.sol\":1349:1395  mapping(address => BuyerInfo) public buyerInfo */\n      tag_25\n        /* \"#utility.yul\":8118:8444   */\n      jump\n        /* \"Utils/Ownable.sol\":1972:2173  function transferOwnership(address newOwner) public virtual onlyOwner {\r... */\n    tag_17:\n      callvalue\n      dup1\n      iszero\n      tag_89\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_89:\n      pop\n      tag_40\n      tag_91\n      calldatasize\n      0x04\n      tag_47\n      jump\t// in\n    tag_91:\n      tag_92\n      jump\t// in\n        /* \"Ethereum/Presale.sol\":5399:5510  function getBalance(address _address) external view returns(uint256) {\r... */\n    tag_18:\n      callvalue\n      dup1\n      iszero\n      tag_93\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_93:\n      pop\n      tag_28\n      tag_95\n      calldatasize\n      0x04\n      tag_47\n      jump\t// in\n    tag_95:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"Ethereum/Presale.sol\":5486:5502  _address.balance */\n      and\n      balance\n      swap1\n        /* \"Ethereum/Presale.sol\":5399:5510  function getBalance(address _address) external view returns(uint256) {\r... */\n      jump\n        /* \"Ethereum/Presale.sol\":3061:3398  function status() public view returns(uint256) {\r... */\n    tag_34:\n        /* \"Ethereum/Presale.sol\":3140:3159  saleInfor.startSale */\n      sload(0x0f)\n        /* \"Ethereum/Presale.sol\":3099:3106  uint256 */\n      0x00\n      swap1\n        /* \"Ethereum/Presale.sol\":3122:3137  block.timestamp */\n      timestamp\n        /* \"Ethereum/Presale.sol\":3122:3159  block.timestamp < saleInfor.startSale */\n      lt\n        /* \"Ethereum/Presale.sol\":3119:3391  if(block.timestamp < saleInfor.startSale) {\r... */\n      iszero\n      tag_100\n      jumpi\n      pop\n        /* \"Ethereum/Presale.sol\":3183:3184  0 */\n      0x00\n      swap1\n        /* \"Ethereum/Presale.sol\":3061:3398  function status() public view returns(uint256) {\r... */\n      jump\t// out\n        /* \"Ethereum/Presale.sol\":3119:3391  if(block.timestamp < saleInfor.startSale) {\r... */\n    tag_100:\n        /* \"Ethereum/Presale.sol\":3250:3267  saleInfor.endSale */\n      sload(0x10)\n        /* \"Ethereum/Presale.sol\":3232:3247  block.timestamp */\n      timestamp\n        /* \"Ethereum/Presale.sol\":3232:3267  block.timestamp > saleInfor.endSale */\n      gt\n        /* \"Ethereum/Presale.sol\":3229:3380  if(block.timestamp > saleInfor.endSale) {\r... */\n      iszero\n      tag_102\n      jumpi\n      pop\n        /* \"Ethereum/Presale.sol\":3295:3296  2 */\n      0x02\n      swap1\n        /* \"Ethereum/Presale.sol\":3061:3398  function status() public view returns(uint256) {\r... */\n      jump\t// out\n        /* \"Ethereum/Presale.sol\":3229:3380  if(block.timestamp > saleInfor.endSale) {\r... */\n    tag_102:\n      pop\n        /* \"Ethereum/Presale.sol\":3353:3354  1 */\n      0x01\n      swap1\n        /* \"Ethereum/Presale.sol\":3061:3398  function status() public view returns(uint256) {\r... */\n      jump\t// out\n        /* \"Ethereum/Presale.sol\":5637:5758  function transferETH(uint256 amount) external payable {\r... */\n    tag_43:\n        /* \"Ethereum/Presale.sol\":5710:5720  msg.sender */\n      caller\n        /* \"Ethereum/Presale.sol\":5702:5750  payable(msg.sender).transfer(msg.value - amount) */\n      0x08fc\n        /* \"Ethereum/Presale.sol\":5731:5749  msg.value - amount */\n      tag_105\n        /* \"Ethereum/Presale.sol\":5743:5749  amount */\n      dup4\n        /* \"Ethereum/Presale.sol\":5731:5740  msg.value */\n      callvalue\n        /* \"Ethereum/Presale.sol\":5731:5749  msg.value - amount */\n      tag_106\n      jump\t// in\n    tag_105:\n        /* \"Ethereum/Presale.sol\":5702:5750  payable(msg.sender).transfer(msg.value - amount) */\n      mload(0x40)\n      dup2\n      iszero\n      swap1\n      swap3\n      mul\n      swap2\n      0x00\n      dup2\n      dup2\n      dup2\n      dup6\n      dup9\n      dup9\n      call\n      swap4\n      pop\n      pop\n      pop\n      pop\n      iszero\n      dup1\n      iszero\n      tag_108\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_108:\n      pop\n        /* \"Ethereum/Presale.sol\":5637:5758  function transferETH(uint256 amount) external payable {\r... */\n      pop\n      jump\t// out\n        /* \"Ethereum/Presale.sol\":2160:3052  function initialSaleInfor(\r... */\n    tag_54:\n        /* \"Ethereum/Presale.sol\":2341:2350  saleInfor */\n      0x0b\n        /* \"Ethereum/Presale.sol\":2341:2379  saleInfor.presaleOwner = _presaleOwner */\n      dup1\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n      dup1\n      dup8\n      and\n      not(sub(shl(0xa0, 0x01), 0x01))\n      swap3\n      dup4\n      and\n      or\n      swap1\n      swap3\n      sstore\n        /* \"Ethereum/Presale.sol\":2390:2409  saleInfor.saleToken */\n      0x0c\n        /* \"Ethereum/Presale.sol\":2390:2422  saleInfor.saleToken = _saleToken */\n      dup1\n      sload\n      dup7\n      dup5\n      and\n      swap1\n      dup4\n      and\n      dup2\n      or\n      swap1\n      swap2\n      sstore\n        /* \"Ethereum/Presale.sol\":2433:2452  saleInfor.baseToken */\n      0x0d\n        /* \"Ethereum/Presale.sol\":2433:2465  saleInfor.baseToken = _baseTOken */\n      dup1\n      sload\n      swap4\n      dup7\n      and\n      swap4\n      swap1\n      swap3\n      and\n      swap3\n      swap1\n      swap3\n      or\n      swap1\n      sstore\n        /* \"Ethereum/Presale.sol\":2523:2560  ERC20(saleInfor.saleToken).decimals() */\n      0x40\n      dup1\n      mload\n      shl(0xe0, 0x313ce567)\n      dup2\n      mstore\n      swap1\n      mload\n        /* \"Ethereum/Presale.sol\":2523:2558  ERC20(saleInfor.saleToken).decimals */\n      0x313ce567\n      swap2\n        /* \"Ethereum/Presale.sol\":2523:2560  ERC20(saleInfor.saleToken).decimals() */\n      0x04\n      dup1\n      dup3\n      add\n      swap3\n      0x20\n      swap3\n      swap1\n      swap2\n      swap1\n      dup3\n      swap1\n      sub\n      add\n      dup2\n        /* \"Ethereum/Presale.sol\":2390:2422  saleInfor.saleToken = _saleToken */\n      dup7\n        /* \"Ethereum/Presale.sol\":2523:2560  ERC20(saleInfor.saleToken).decimals() */\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_110\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_110:\n      pop\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_112\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_112:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_113\n      swap2\n      swap1\n      tag_114\n      jump\t// in\n    tag_113:\n        /* \"Ethereum/Presale.sol\":2510:2561  10** uint256(ERC20(saleInfor.saleToken).decimals()) */\n      tag_115\n      swap1\n        /* \"Ethereum/Presale.sol\":2510:2512  10 */\n      0x0a\n        /* \"Ethereum/Presale.sol\":2510:2561  10** uint256(ERC20(saleInfor.saleToken).decimals()) */\n      tag_116\n      jump\t// in\n    tag_115:\n        /* \"Ethereum/Presale.sol\":2499:2507  datas[0] */\n      dup2\n      mload\n        /* \"Ethereum/Presale.sol\":2499:2561  datas[0] * 10** uint256(ERC20(saleInfor.saleToken).decimals()) */\n      tag_118\n      swap2\n      swap1\n      tag_119\n      jump\t// in\n    tag_118:\n        /* \"Ethereum/Presale.sol\":2476:2496  saleInfor.tokenPrice */\n      0x0e\n        /* \"Ethereum/Presale.sol\":2476:2561  saleInfor.tokenPrice = datas[0] * 10** uint256(ERC20(saleInfor.saleToken).decimals()) */\n      sstore\n        /* \"Ethereum/Presale.sol\":2594:2602  datas[1] */\n      0x20\n      dup1\n      dup3\n      add\n      mload\n        /* \"Ethereum/Presale.sol\":2572:2591  saleInfor.startSale */\n      0x0f\n        /* \"Ethereum/Presale.sol\":2572:2602  saleInfor.startSale = datas[1] */\n      sstore\n        /* \"Ethereum/Presale.sol\":2633:2641  datas[2] */\n      0x40\n      dup1\n      dup4\n      add\n      mload\n        /* \"Ethereum/Presale.sol\":2613:2630  saleInfor.endSale */\n      0x10\n        /* \"Ethereum/Presale.sol\":2613:2641  saleInfor.endSale = datas[2] */\n      sstore\n        /* \"Ethereum/Presale.sol\":2681:2689  datas[3] */\n      0x60\n      dup4\n      add\n      mload\n        /* \"Ethereum/Presale.sol\":2652:2678  saleInfor.minSpendPerBuyer */\n      0x11\n        /* \"Ethereum/Presale.sol\":2652:2689  saleInfor.minSpendPerBuyer = datas[3] */\n      sstore\n        /* \"Ethereum/Presale.sol\":2759:2778  saleInfor.baseToken */\n      sload(0x0d)\n        /* \"Ethereum/Presale.sol\":2753:2790  ERC20(saleInfor.baseToken).decimals() */\n      dup2\n      mload\n      shl(0xe0, 0x313ce567)\n      dup2\n      mstore\n      swap2\n      mload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"Ethereum/Presale.sol\":2759:2778  saleInfor.baseToken */\n      swap1\n      swap2\n      and\n      swap3\n        /* \"Ethereum/Presale.sol\":2753:2788  ERC20(saleInfor.baseToken).decimals */\n      0x313ce567\n      swap3\n        /* \"Ethereum/Presale.sol\":2753:2790  ERC20(saleInfor.baseToken).decimals() */\n      0x04\n      dup1\n      dup3\n      add\n      swap4\n      swap2\n      dup3\n      swap1\n      sub\n      add\n      dup2\n        /* \"Ethereum/Presale.sol\":2759:2778  saleInfor.baseToken */\n      dup7\n        /* \"Ethereum/Presale.sol\":2753:2790  ERC20(saleInfor.baseToken).decimals() */\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_123\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_123:\n      pop\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_125\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_125:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_126\n      swap2\n      swap1\n      tag_114\n      jump\t// in\n    tag_126:\n        /* \"Ethereum/Presale.sol\":2740:2791  10** uint256(ERC20(saleInfor.baseToken).decimals()) */\n      tag_127\n      swap1\n        /* \"Ethereum/Presale.sol\":2740:2742  10 */\n      0x0a\n        /* \"Ethereum/Presale.sol\":2740:2791  10** uint256(ERC20(saleInfor.baseToken).decimals()) */\n      tag_116\n      jump\t// in\n    tag_127:\n        /* \"Ethereum/Presale.sol\":2729:2737  datas[4] */\n      0x80\n      dup3\n      add\n      mload\n        /* \"Ethereum/Presale.sol\":2729:2791  datas[4] * 10** uint256(ERC20(saleInfor.baseToken).decimals()) */\n      tag_129\n      swap2\n      swap1\n      tag_119\n      jump\t// in\n    tag_129:\n        /* \"Ethereum/Presale.sol\":2700:2726  saleInfor.maxSpendPerBuyer */\n      0x12\n        /* \"Ethereum/Presale.sol\":2700:2791  saleInfor.maxSpendPerBuyer = datas[4] * 10** uint256(ERC20(saleInfor.baseToken).decimals()) */\n      sstore\n        /* \"Ethereum/Presale.sol\":2824:2832  datas[5] */\n      0xa0\n      dup2\n      add\n      mload\n        /* \"Ethereum/Presale.sol\":2802:2821  saleInfor.refundFee */\n      0x13\n        /* \"Ethereum/Presale.sol\":2802:2832  saleInfor.refundFee = datas[5] */\n      sstore\n        /* \"Ethereum/Presale.sol\":2864:2872  datas[6] */\n      0xc0\n      dup2\n      add\n      mload\n        /* \"Ethereum/Presale.sol\":2843:2861  saleInfor.claimFee */\n      0x14\n        /* \"Ethereum/Presale.sol\":2843:2872  saleInfor.claimFee = datas[6] */\n      sstore\n        /* \"Ethereum/Presale.sol\":2936:2955  saleInfor.baseToken */\n      sload(0x0d)\n        /* \"Ethereum/Presale.sol\":2919:2923  WETH */\n      sload(0x17)\n        /* \"Ethereum/Presale.sol\":2883:2908  saleInfor.saleIsBaseToken */\n      0x15\n        /* \"Ethereum/Presale.sol\":2883:2956  saleInfor.saleIsBaseToken = address(WETH) == address(saleInfor.baseToken) */\n      dup1\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"Ethereum/Presale.sol\":2936:2955  saleInfor.baseToken */\n      swap4\n      dup5\n      and\n        /* \"Ethereum/Presale.sol\":2919:2923  WETH */\n      swap4\n      swap1\n      swap3\n      and\n        /* \"Ethereum/Presale.sol\":2911:2956  address(WETH) == address(saleInfor.baseToken) */\n      swap3\n      swap1\n      swap3\n      eq\n      not(0xff)\n        /* \"Ethereum/Presale.sol\":2883:2956  saleInfor.saleIsBaseToken = address(WETH) == address(saleInfor.baseToken) */\n      swap1\n      swap2\n      and\n      or\n      swap1\n      sstore\n        /* \"Ethereum/Presale.sol\":3023:3043  saleInfor.tokenPrice */\n      sload(0x0e)\n        /* \"Ethereum/Presale.sol\":2998:3044  saleInfor.tokenPrice.mul(saleInfor.tokenPrice) */\n      tag_132\n      swap1\n        /* \"Ethereum/Presale.sol\":3023:3043  saleInfor.tokenPrice */\n      dup1\n        /* \"Ethereum/Presale.sol\":2998:3022  saleInfor.tokenPrice.mul */\n      tag_133\n        /* \"Ethereum/Presale.sol\":2998:3044  saleInfor.tokenPrice.mul(saleInfor.tokenPrice) */\n      jump\t// in\n    tag_132:\n        /* \"Ethereum/Presale.sol\":2967:2995  saleInfor.amountTokenForSale */\n      0x16\n        /* \"Ethereum/Presale.sol\":2967:3044  saleInfor.amountTokenForSale = saleInfor.tokenPrice.mul(saleInfor.tokenPrice) */\n      sstore\n      pop\n      pop\n      pop\n      pop\n        /* \"Ethereum/Presale.sol\":2160:3052  function initialSaleInfor(\r... */\n      jump\t// out\n        /* \"Utils/Ownable.sol\":1714:1817  function renounceOwnership() public virtual onlyOwner {\r... */\n    tag_57:\n        /* \"Utils/Ownable.sol\":1136:1142  _owner */\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x01))\n        /* \"Utils/Context.sol\":736:746  msg.sender */\n      caller\n        /* \"Utils/Ownable.sol\":1283:1306  owner() == _msgSender() */\n      eq\n        /* \"Utils/Ownable.sol\":1275:1343  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_138\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":6783:6785   */\n      0x20\n        /* \"Utils/Ownable.sol\":1275:1343  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":6765:6786   */\n      dup2\n      swap1\n      mstore\n        /* \"#utility.yul\":6802:6820   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":6795:6825   */\n      mstore\n        /* \"#utility.yul\":6861:6895   */\n      0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572\n        /* \"#utility.yul\":6841:6859   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":6834:6896   */\n      mstore\n        /* \"#utility.yul\":6913:6931   */\n      0x64\n      add\n        /* \"Utils/Ownable.sol\":1275:1343  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n    tag_139:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_138:\n        /* \"Utils/Ownable.sol\":1779:1809  _transferOwnership(address(0)) */\n      tag_142\n        /* \"Utils/Ownable.sol\":1806:1807  0 */\n      0x00\n        /* \"Utils/Ownable.sol\":1779:1797  _transferOwnership */\n      tag_143\n        /* \"Utils/Ownable.sol\":1779:1809  _transferOwnership(address(0)) */\n      jump\t// in\n    tag_142:\n        /* \"Utils/Ownable.sol\":1714:1817  function renounceOwnership() public virtual onlyOwner {\r... */\n      jump\t// out\n        /* \"Ethereum/Presale.sol\":5521:5629  function backToken() external payable {\r... */\n    tag_59:\n        /* \"Ethereum/Presale.sol\":5570:5621  payable(msg.sender).transfer(address(this).balance) */\n      mload(0x40)\n        /* \"Ethereum/Presale.sol\":5578:5588  msg.sender */\n      caller\n      swap1\n        /* \"Ethereum/Presale.sol\":5599:5620  address(this).balance */\n      selfbalance\n        /* \"Ethereum/Presale.sol\":5570:5621  payable(msg.sender).transfer(address(this).balance) */\n      dup1\n      iszero\n      0x08fc\n      mul\n      swap2\n      0x00\n      dup2\n      dup2\n      dup2\n        /* \"Ethereum/Presale.sol\":5599:5620  address(this).balance */\n      dup6\n        /* \"Ethereum/Presale.sol\":5578:5588  msg.sender */\n      dup9\n        /* \"Ethereum/Presale.sol\":5570:5621  payable(msg.sender).transfer(address(this).balance) */\n      dup9\n      call\n      swap4\n      pop\n      pop\n      pop\n      pop\n      iszero\n      dup1\n      iszero\n      tag_146\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_146:\n      pop\n        /* \"Ethereum/Presale.sol\":5521:5629  function backToken() external payable {\r... */\n      jump\t// out\n        /* \"Ethereum/Presale.sol\":3525:5391  function deposit(uint256 _amount) external payable nonReentrant {\r... */\n    tag_77:\n        /* \"Utils/ReentrancyGuard.sol\":1778:1779  2 */\n      0x02\n        /* \"Utils/ReentrancyGuard.sol\":2376:2383  _status */\n      sload(0x00)\n        /* \"Utils/ReentrancyGuard.sol\":2376:2395  _status != _ENTERED */\n      eq\n      iszero\n        /* \"Utils/ReentrancyGuard.sol\":2368:2431  require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\") */\n      tag_149\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":7549:7551   */\n      0x20\n        /* \"Utils/ReentrancyGuard.sol\":2368:2431  require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":7531:7552   */\n      mstore\n        /* \"#utility.yul\":7588:7590   */\n      0x1f\n        /* \"#utility.yul\":7568:7586   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":7561:7591   */\n      mstore\n        /* \"#utility.yul\":7627:7660   */\n      0x5265656e7472616e637947756172643a207265656e7472616e742063616c6c00\n        /* \"#utility.yul\":7607:7625   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":7600:7661   */\n      mstore\n        /* \"#utility.yul\":7678:7696   */\n      0x64\n      add\n        /* \"Utils/ReentrancyGuard.sol\":2368:2431  require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\") */\n      tag_139\n        /* \"#utility.yul\":7521:7702   */\n      jump\n        /* \"Utils/ReentrancyGuard.sol\":2368:2431  require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\") */\n    tag_149:\n        /* \"Utils/ReentrancyGuard.sol\":1778:1779  2 */\n      0x02\n        /* \"Utils/ReentrancyGuard.sol\":2509:2516  _status */\n      0x00\n        /* \"Utils/ReentrancyGuard.sol\":2509:2527  _status = _ENTERED */\n      sstore\n        /* \"Ethereum/Presale.sol\":3608:3616  status() */\n      tag_153\n        /* \"Ethereum/Presale.sol\":3608:3614  status */\n      tag_34\n        /* \"Ethereum/Presale.sol\":3608:3616  status() */\n      jump\t// in\n    tag_153:\n        /* \"Ethereum/Presale.sol\":3620:3621  1 */\n      0x01\n        /* \"Ethereum/Presale.sol\":3608:3621  status() == 1 */\n      eq\n        /* \"Ethereum/Presale.sol\":3600:3636  require(status() == 1, \"Not active\") */\n      tag_154\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":5755:5757   */\n      0x20\n        /* \"Ethereum/Presale.sol\":3600:3636  require(status() == 1, \"Not active\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":5737:5758   */\n      mstore\n        /* \"#utility.yul\":5794:5796   */\n      0x0a\n        /* \"#utility.yul\":5774:5792   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":5767:5797   */\n      mstore\n      shl(0xb0, 0x4e6f7420616374697665)\n        /* \"#utility.yul\":5813:5831   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":5806:5846   */\n      mstore\n        /* \"#utility.yul\":5863:5881   */\n      0x64\n      add\n        /* \"Ethereum/Presale.sol\":3600:3636  require(status() == 1, \"Not active\") */\n      tag_139\n        /* \"#utility.yul\":5727:5887   */\n      jump\n        /* \"Ethereum/Presale.sol\":3600:3636  require(status() == 1, \"Not active\") */\n    tag_154:\n        /* \"Ethereum/Presale.sol\":3693:3703  msg.sender */\n      caller\n        /* \"Ethereum/Presale.sol\":3657:3680  BuyerInfo storage buyer */\n      0x00\n        /* \"Ethereum/Presale.sol\":3683:3704  buyerInfo[msg.sender] */\n      swap1\n      dup2\n      mstore\n        /* \"Ethereum/Presale.sol\":3683:3692  buyerInfo */\n      0x02\n        /* \"Ethereum/Presale.sol\":3683:3704  buyerInfo[msg.sender] */\n      0x20\n      mstore\n      0x40\n      dup2\n      keccak256\n        /* \"Ethereum/Presale.sol\":3889:3915  saleInfor.minSpendPerBuyer */\n      sload(0x11)\n        /* \"Ethereum/Presale.sol\":3683:3704  buyerInfo[msg.sender] */\n      swap1\n      swap2\n        /* \"Ethereum/Presale.sol\":3735:3742  _amount */\n      dup4\n      swap2\n      dup3\n      swap2\n        /* \"Ethereum/Presale.sol\":3657:3680  BuyerInfo storage buyer */\n      swap1\n        /* \"Ethereum/Presale.sol\":3848:3852  1000 */\n      0x03e8\n      swap1\n        /* \"Ethereum/Presale.sol\":3871:3915  real_amount_in >= saleInfor.minSpendPerBuyer */\n      dup4\n      lt\n      iszero\n        /* \"Ethereum/Presale.sol\":3863:3964  require(real_amount_in >= saleInfor.minSpendPerBuyer, \r... */\n      tag_157\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":6094:6096   */\n      0x20\n        /* \"Ethereum/Presale.sol\":3863:3964  require(real_amount_in >= saleInfor.minSpendPerBuyer, \r... */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":6076:6097   */\n      mstore\n        /* \"#utility.yul\":6133:6135   */\n      0x10\n        /* \"#utility.yul\":6113:6131   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":6106:6136   */\n      mstore\n      shl(0x80, 0x4e6f7420656e6f7567682076616c7565)\n        /* \"#utility.yul\":6152:6170   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":6145:6191   */\n      mstore\n        /* \"#utility.yul\":6208:6226   */\n      0x64\n      add\n        /* \"Ethereum/Presale.sol\":3863:3964  require(real_amount_in >= saleInfor.minSpendPerBuyer, \r... */\n      tag_139\n        /* \"#utility.yul\":6066:6232   */\n      jump\n        /* \"Ethereum/Presale.sol\":3863:3964  require(real_amount_in >= saleInfor.minSpendPerBuyer, \r... */\n    tag_157:\n        /* \"Ethereum/Presale.sol\":4001:4027  saleInfor.maxSpendPerBuyer */\n      sload(0x12)\n        /* \"Ethereum/Presale.sol\":3983:4027  real_amount_in <= saleInfor.maxSpendPerBuyer */\n      dup4\n      gt\n      iszero\n        /* \"Ethereum/Presale.sol\":3975:4074  require(real_amount_in <= saleInfor.maxSpendPerBuyer, \r... */\n      tag_160\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":5412:5414   */\n      0x20\n        /* \"Ethereum/Presale.sol\":3975:4074  require(real_amount_in <= saleInfor.maxSpendPerBuyer, \r... */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":5394:5415   */\n      mstore\n        /* \"#utility.yul\":5451:5453   */\n      0x0e\n        /* \"#utility.yul\":5431:5449   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":5424:5454   */\n      mstore\n      shl(0x90, 0x4f766572666c6f772076616c7565)\n        /* \"#utility.yul\":5470:5488   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":5463:5507   */\n      mstore\n        /* \"#utility.yul\":5524:5542   */\n      0x64\n      add\n        /* \"Ethereum/Presale.sol\":3975:4074  require(real_amount_in <= saleInfor.maxSpendPerBuyer, \r... */\n      tag_139\n        /* \"#utility.yul\":5384:5548   */\n      jump\n        /* \"Ethereum/Presale.sol\":3975:4074  require(real_amount_in <= saleInfor.maxSpendPerBuyer, \r... */\n    tag_160:\n        /* \"Ethereum/Presale.sol\":4089:4108  checkAdminAddress() */\n      tag_163\n        /* \"Ethereum/Presale.sol\":4089:4106  checkAdminAddress */\n      tag_80\n        /* \"Ethereum/Presale.sol\":4089:4108  checkAdminAddress() */\n      jump\t// in\n    tag_163:\n        /* \"Ethereum/Presale.sol\":4085:4351  if(!checkAdminAddress()) {\r... */\n      tag_164\n      jumpi\n        /* \"Ethereum/Presale.sol\":4142:4275  ((fullPercenFee.sub(feeAnyone))\r... */\n      tag_165\n        /* \"Ethereum/Presale.sol\":4261:4274  fullPercenFee */\n      dup2\n        /* \"Ethereum/Presale.sol\":4143:4224  (fullPercenFee.sub(feeAnyone))\r... */\n      tag_166\n        /* \"Ethereum/Presale.sol\":4209:4223  real_amount_in */\n      dup6\n        /* \"Ethereum/Presale.sol\":4144:4172  fullPercenFee.sub(feeAnyone) */\n      tag_167\n        /* \"Ethereum/Presale.sol\":4162:4171  feeAnyone */\n      sload(0x18)\n        /* \"Ethereum/Presale.sol\":4144:4157  fullPercenFee */\n      dup7\n        /* \"Ethereum/Presale.sol\":4144:4161  fullPercenFee.sub */\n      tag_168\n      swap1\n        /* \"Ethereum/Presale.sol\":4144:4172  fullPercenFee.sub(feeAnyone) */\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_167:\n        /* \"Ethereum/Presale.sol\":4143:4208  (fullPercenFee.sub(feeAnyone))\r... */\n      swap1\n      tag_133\n        /* \"Ethereum/Presale.sol\":4143:4224  (fullPercenFee.sub(feeAnyone))\r... */\n      jump\t// in\n    tag_166:\n        /* \"Ethereum/Presale.sol\":4142:4260  ((fullPercenFee.sub(feeAnyone))\r... */\n      swap1\n      tag_169\n        /* \"Ethereum/Presale.sol\":4142:4275  ((fullPercenFee.sub(feeAnyone))\r... */\n      jump\t// in\n    tag_165:\n        /* \"Ethereum/Presale.sol\":4125:4275  real_amount_in = ((fullPercenFee.sub(feeAnyone))\r... */\n      swap3\n      pop\n        /* \"Ethereum/Presale.sol\":4296:4322  amount_in - real_amount_in */\n      tag_170\n        /* \"Ethereum/Presale.sol\":4125:4275  real_amount_in = ((fullPercenFee.sub(feeAnyone))\r... */\n      dup4\n        /* \"Ethereum/Presale.sol\":4296:4305  amount_in */\n      dup6\n        /* \"Ethereum/Presale.sol\":4296:4322  amount_in - real_amount_in */\n      tag_106\n      jump\t// in\n    tag_170:\n        /* \"Ethereum/Presale.sol\":4290:4322  fee = amount_in - real_amount_in */\n      swap2\n      pop\n        /* \"Ethereum/Presale.sol\":4085:4351  if(!checkAdminAddress()) {\r... */\n    tag_164:\n        /* \"Ethereum/Presale.sol\":4410:4423  presaleStatus */\n      0x04\n        /* \"Ethereum/Presale.sol\":4410:4442  presaleStatus.totalBaseCollected */\n      sload\n        /* \"Ethereum/Presale.sol\":4381:4407  saleInfor.maxSpendPerBuyer */\n      sload(0x12)\n        /* \"Ethereum/Presale.sol\":4361:4378  uint256 remaining */\n      0x00\n      swap2\n        /* \"Ethereum/Presale.sol\":4381:4442  saleInfor.maxSpendPerBuyer - presaleStatus.totalBaseCollected */\n      tag_171\n      swap2\n      tag_106\n      jump\t// in\n    tag_171:\n        /* \"Ethereum/Presale.sol\":4361:4442  uint256 remaining = saleInfor.maxSpendPerBuyer - presaleStatus.totalBaseCollected */\n      swap1\n      pop\n        /* \"Ethereum/Presale.sol\":4473:4474  0 */\n      0x00\n        /* \"Ethereum/Presale.sol\":4461:4470  remaining */\n      dup2\n        /* \"Ethereum/Presale.sol\":4461:4474  remaining > 0 */\n      gt\n        /* \"Ethereum/Presale.sol\":4453:4494  require(remaining > 0, \"Sale is Success\") */\n      tag_172\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":6439:6441   */\n      0x20\n        /* \"Ethereum/Presale.sol\":4453:4494  require(remaining > 0, \"Sale is Success\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":6421:6442   */\n      mstore\n        /* \"#utility.yul\":6478:6480   */\n      0x0f\n        /* \"#utility.yul\":6458:6476   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":6451:6481   */\n      mstore\n      shl(0x88, 0x53616c652069732053756363657373)\n        /* \"#utility.yul\":6497:6515   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":6490:6535   */\n      mstore\n        /* \"#utility.yul\":6552:6570   */\n      0x64\n      add\n        /* \"Ethereum/Presale.sol\":4453:4494  require(remaining > 0, \"Sale is Success\") */\n      tag_139\n        /* \"#utility.yul\":6411:6576   */\n      jump\n        /* \"Ethereum/Presale.sol\":4453:4494  require(remaining > 0, \"Sale is Success\") */\n    tag_172:\n        /* \"Ethereum/Presale.sol\":4505:4522  uint256 tokenSold */\n      0x00\n        /* \"Ethereum/Presale.sol\":4526:4684  real_amount_in.\r... */\n      tag_175\n        /* \"Ethereum/Presale.sol\":4651:4660  saleInfor */\n      0x0b\n        /* \"Ethereum/Presale.sol\":4651:4670  saleInfor.baseToken */\n      0x02\n      add\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"Ethereum/Presale.sol\":4645:4680  ERC20(saleInfor.baseToken).decimals */\n      and\n      0x313ce567\n        /* \"Ethereum/Presale.sol\":4645:4682  ERC20(saleInfor.baseToken).decimals() */\n      mload(0x40)\n      dup2\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup7\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_176\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_176:\n      pop\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_178\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_178:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_179\n      swap2\n      swap1\n      tag_114\n      jump\t// in\n    tag_179:\n        /* \"Ethereum/Presale.sol\":4631:4683  10 ** uint256(ERC20(saleInfor.baseToken).decimals()) */\n      tag_180\n      swap1\n        /* \"Ethereum/Presale.sol\":4631:4633  10 */\n      0x0a\n        /* \"Ethereum/Presale.sol\":4631:4683  10 ** uint256(ERC20(saleInfor.baseToken).decimals()) */\n      tag_116\n      jump\t// in\n    tag_180:\n        /* \"Ethereum/Presale.sol\":4575:4595  saleInfor.tokenPrice */\n      sload(0x0e)\n        /* \"Ethereum/Presale.sol\":4526:4596  real_amount_in.\r... */\n      tag_166\n      swap1\n        /* \"Ethereum/Presale.sol\":4526:4540  real_amount_in */\n      dup9\n      swap1\n        /* \"Ethereum/Presale.sol\":4526:4574  real_amount_in.\r... */\n      tag_133\n        /* \"Ethereum/Presale.sol\":4526:4596  real_amount_in.\r... */\n      jump\t// in\n        /* \"Ethereum/Presale.sol\":4526:4684  real_amount_in.\r... */\n    tag_175:\n        /* \"Ethereum/Presale.sol\":4505:4685  uint256 tokenSold = (real_amount_in.\r... */\n      swap1\n      pop\n        /* \"Ethereum/Presale.sol\":4717:4726  amount_in */\n      dup6\n        /* \"Ethereum/Presale.sol\":4696:4701  buyer */\n      dup8\n        /* \"Ethereum/Presale.sol\":4696:4713  buyer.baseDeposit */\n      0x00\n      add\n      0x00\n        /* \"Ethereum/Presale.sol\":4696:4726  buyer.baseDeposit += amount_in */\n      dup3\n      dup3\n      sload\n      tag_182\n      swap2\n      swap1\n      tag_183\n      jump\t// in\n    tag_182:\n      swap3\n      pop\n      pop\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"Ethereum/Presale.sol\":4757:4766  tokenSold */\n      dup1\n        /* \"Ethereum/Presale.sol\":4737:4742  buyer */\n      dup8\n        /* \"Ethereum/Presale.sol\":4737:4753  buyer.tokenOwner */\n      0x01\n      add\n      0x00\n        /* \"Ethereum/Presale.sol\":4737:4766  buyer.tokenOwner += tokenSold */\n      dup3\n      dup3\n      sload\n      tag_184\n      swap2\n      swap1\n      tag_183\n      jump\t// in\n    tag_184:\n      swap1\n      swap2\n      sstore\n      pop\n      pop\n        /* \"Ethereum/Presale.sol\":4777:4790  presaleStatus */\n      0x04\n        /* \"Ethereum/Presale.sol\":4777:4827  presaleStatus.totalBaseCollected += real_amount_in */\n      dup1\n      sload\n        /* \"Ethereum/Presale.sol\":4813:4827  real_amount_in */\n      dup7\n      swap2\n        /* \"Ethereum/Presale.sol\":4777:4790  presaleStatus */\n      swap1\n        /* \"Ethereum/Presale.sol\":4777:4809  presaleStatus.totalBaseCollected */\n      0x00\n      swap1\n        /* \"Ethereum/Presale.sol\":4777:4827  presaleStatus.totalBaseCollected += real_amount_in */\n      tag_185\n      swap1\n        /* \"Ethereum/Presale.sol\":4813:4827  real_amount_in */\n      dup5\n      swap1\n        /* \"Ethereum/Presale.sol\":4777:4827  presaleStatus.totalBaseCollected += real_amount_in */\n      tag_183\n      jump\t// in\n    tag_185:\n      swap1\n      swap2\n      sstore\n      pop\n      pop\n        /* \"Ethereum/Presale.sol\":4838:4866  presaleStatus.totalTokenSold */\n      0x05\n        /* \"Ethereum/Presale.sol\":4838:4879  presaleStatus.totalTokenSold += tokenSold */\n      dup1\n      sload\n        /* \"Ethereum/Presale.sol\":4870:4879  tokenSold */\n      dup3\n      swap2\n        /* \"Ethereum/Presale.sol\":4838:4866  presaleStatus.totalTokenSold */\n      swap1\n      0x00\n      swap1\n        /* \"Ethereum/Presale.sol\":4838:4879  presaleStatus.totalTokenSold += tokenSold */\n      tag_186\n      swap1\n        /* \"Ethereum/Presale.sol\":4870:4879  tokenSold */\n      dup5\n      swap1\n        /* \"Ethereum/Presale.sol\":4838:4879  presaleStatus.totalTokenSold += tokenSold */\n      tag_183\n      jump\t// in\n    tag_186:\n      swap1\n      swap2\n      sstore\n      pop\n      pop\n        /* \"Ethereum/Presale.sol\":4898:4908  msg.sender */\n      caller\n        /* \"Ethereum/Presale.sol\":4890:4909  userFee[msg.sender] */\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"Ethereum/Presale.sol\":4890:4897  userFee */\n      0x03\n        /* \"Ethereum/Presale.sol\":4890:4909  userFee[msg.sender] */\n      0x20\n      mstore\n      0x40\n      dup2\n      keccak256\n        /* \"Ethereum/Presale.sol\":4890:4916  userFee[msg.sender] += fee */\n      dup1\n      sload\n        /* \"Ethereum/Presale.sol\":4913:4916  fee */\n      dup7\n      swap3\n        /* \"Ethereum/Presale.sol\":4890:4909  userFee[msg.sender] */\n      swap1\n        /* \"Ethereum/Presale.sol\":4890:4916  userFee[msg.sender] += fee */\n      tag_187\n      swap1\n        /* \"Ethereum/Presale.sol\":4913:4916  fee */\n      dup5\n      swap1\n        /* \"Ethereum/Presale.sol\":4890:4916  userFee[msg.sender] += fee */\n      tag_183\n      jump\t// in\n    tag_187:\n      swap3\n      pop\n      pop\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"Ethereum/Presale.sol\":4939:4942  fee */\n      dup4\n        /* \"Ethereum/Presale.sol\":4927:4935  totalFee */\n      0x1b\n      0x00\n        /* \"Ethereum/Presale.sol\":4927:4942  totalFee += fee */\n      dup3\n      dup3\n      sload\n      tag_188\n      swap2\n      swap1\n      tag_183\n      jump\t// in\n    tag_188:\n      swap1\n      swap2\n      sstore\n      pop\n      pop\n        /* \"Ethereum/Presale.sol\":4958:4983  saleInfor.saleIsBaseToken */\n      and(0xff, sload(0x15))\n        /* \"Ethereum/Presale.sol\":4958:5019  saleInfor.saleIsBaseToken && real_amount_in + fee < msg.value */\n      dup1\n      iszero\n      tag_189\n      jumpi\n      pop\n        /* \"Ethereum/Presale.sol\":5010:5019  msg.value */\n      callvalue\n        /* \"Ethereum/Presale.sol\":4987:5007  real_amount_in + fee */\n      tag_190\n        /* \"Ethereum/Presale.sol\":5004:5007  fee */\n      dup6\n        /* \"Ethereum/Presale.sol\":4987:5001  real_amount_in */\n      dup8\n        /* \"Ethereum/Presale.sol\":4987:5007  real_amount_in + fee */\n      tag_183\n      jump\t// in\n    tag_190:\n        /* \"Ethereum/Presale.sol\":4987:5019  real_amount_in + fee < msg.value */\n      lt\n        /* \"Ethereum/Presale.sol\":4958:5019  saleInfor.saleIsBaseToken && real_amount_in + fee < msg.value */\n    tag_189:\n        /* \"Ethereum/Presale.sol\":4955:5110  if(saleInfor.saleIsBaseToken && real_amount_in + fee < msg.value) {\r... */\n      iszero\n      tag_191\n      jumpi\n        /* \"Ethereum/Presale.sol\":5044:5054  msg.sender */\n      caller\n        /* \"Ethereum/Presale.sol\":5036:5098  payable(msg.sender).transfer(msg.value - real_amount_in - fee) */\n      0x08fc\n        /* \"Ethereum/Presale.sol\":5094:5097  fee */\n      dup6\n        /* \"Ethereum/Presale.sol\":5065:5091  msg.value - real_amount_in */\n      tag_192\n        /* \"Ethereum/Presale.sol\":5077:5091  real_amount_in */\n      dup9\n        /* \"Ethereum/Presale.sol\":5065:5074  msg.value */\n      callvalue\n        /* \"Ethereum/Presale.sol\":5065:5091  msg.value - real_amount_in */\n      tag_106\n      jump\t// in\n    tag_192:\n        /* \"Ethereum/Presale.sol\":5065:5097  msg.value - real_amount_in - fee */\n      tag_193\n      swap2\n      swap1\n      tag_106\n      jump\t// in\n    tag_193:\n        /* \"Ethereum/Presale.sol\":5036:5098  payable(msg.sender).transfer(msg.value - real_amount_in - fee) */\n      mload(0x40)\n      dup2\n      iszero\n      swap1\n      swap3\n      mul\n      swap2\n      0x00\n      dup2\n      dup2\n      dup2\n      dup6\n      dup9\n      dup9\n      call\n      swap4\n      pop\n      pop\n      pop\n      pop\n      iszero\n      dup1\n      iszero\n      tag_195\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_195:\n      pop\n        /* \"Ethereum/Presale.sol\":4955:5110  if(saleInfor.saleIsBaseToken && real_amount_in + fee < msg.value) {\r... */\n    tag_191:\n        /* \"Ethereum/Presale.sol\":5125:5150  saleInfor.saleIsBaseToken */\n      and(0xff, sload(0x15))\n        /* \"Ethereum/Presale.sol\":5121:5372  if(!saleInfor.saleIsBaseToken) {\r... */\n      tag_197\n      jumpi\n        /* \"Ethereum/Presale.sol\":5225:5244  saleInfor.baseToken */\n      sload(0x0d)\n        /* \"Ethereum/Presale.sol\":5167:5360  TransferHelper.safeTransferFrom(\r... */\n      tag_197\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"Ethereum/Presale.sol\":5225:5244  saleInfor.baseToken */\n      and\n        /* \"Ethereum/Presale.sol\":5264:5274  msg.sender */\n      caller\n        /* \"Ethereum/Presale.sol\":5301:5305  this */\n      address\n        /* \"Ethereum/Presale.sol\":5325:5345  real_amount_in + fee */\n      tag_198\n        /* \"Ethereum/Presale.sol\":5342:5345  fee */\n      dup9\n        /* \"Ethereum/Presale.sol\":5325:5339  real_amount_in */\n      dup11\n        /* \"Ethereum/Presale.sol\":5325:5345  real_amount_in + fee */\n      tag_183\n      jump\t// in\n    tag_198:\n        /* \"Ethereum/Presale.sol\":5167:5198  TransferHelper.safeTransferFrom */\n      tag_199\n        /* \"Ethereum/Presale.sol\":5167:5360  TransferHelper.safeTransferFrom(\r... */\n      jump\t// in\n    tag_197:\n      pop\n      pop\n        /* \"Utils/ReentrancyGuard.sol\":1734:1735  1 */\n      0x01\n        /* \"Utils/ReentrancyGuard.sol\":2688:2695  _status */\n      0x00\n        /* \"Utils/ReentrancyGuard.sol\":2688:2710  _status = _NOT_ENTERED */\n      sstore\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n        /* \"Ethereum/Presale.sol\":3525:5391  function deposit(uint256 _amount) external payable nonReentrant {\r... */\n      jump\t// out\n        /* \"Ethereum/Presale.sol\":3407:3517  function checkAdminAddress() public view returns(bool) {\r... */\n    tag_80:\n        /* \"Ethereum/Presale.sol\":3456:3460  bool */\n      0x00\n        /* \"Ethereum/Presale.sol\":3480:3509  admins.contains(_msgSender()) */\n      tag_201\n        /* \"Ethereum/Presale.sol\":3480:3486  admins */\n      0x19\n        /* \"Utils/Context.sol\":736:746  msg.sender */\n      caller\n        /* \"Ethereum/Presale.sol\":3480:3495  admins.contains */\n      tag_203\n        /* \"Ethereum/Presale.sol\":3480:3509  admins.contains(_msgSender()) */\n      jump\t// in\n    tag_201:\n        /* \"Ethereum/Presale.sol\":3473:3509  return admins.contains(_msgSender()) */\n      swap1\n      pop\n        /* \"Ethereum/Presale.sol\":3407:3517  function checkAdminAddress() public view returns(bool) {\r... */\n      swap1\n      jump\t// out\n        /* \"Utils/Ownable.sol\":1972:2173  function transferOwnership(address newOwner) public virtual onlyOwner {\r... */\n    tag_92:\n        /* \"Utils/Ownable.sol\":1136:1142  _owner */\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x01))\n        /* \"Utils/Context.sol\":736:746  msg.sender */\n      caller\n        /* \"Utils/Ownable.sol\":1283:1306  owner() == _msgSender() */\n      eq\n        /* \"Utils/Ownable.sol\":1275:1343  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_207\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":6783:6785   */\n      0x20\n        /* \"Utils/Ownable.sol\":1275:1343  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":6765:6786   */\n      dup2\n      swap1\n      mstore\n        /* \"#utility.yul\":6802:6820   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":6795:6825   */\n      mstore\n        /* \"#utility.yul\":6861:6895   */\n      0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572\n        /* \"#utility.yul\":6841:6859   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":6834:6896   */\n      mstore\n        /* \"#utility.yul\":6913:6931   */\n      0x64\n      add\n        /* \"Utils/Ownable.sol\":1275:1343  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_139\n        /* \"#utility.yul\":6755:6937   */\n      jump\n        /* \"Utils/Ownable.sol\":1275:1343  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n    tag_207:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"Utils/Ownable.sol\":2061:2083  newOwner != address(0) */\n      dup2\n      and\n        /* \"Utils/Ownable.sol\":2053:2126  require(newOwner != address(0), \"Ownable: new owner is the zero address\") */\n      tag_210\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":5005:5007   */\n      0x20\n        /* \"Utils/Ownable.sol\":2053:2126  require(newOwner != address(0), \"Ownable: new owner is the zero address\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":4987:5008   */\n      mstore\n        /* \"#utility.yul\":5044:5046   */\n      0x26\n        /* \"#utility.yul\":5024:5042   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":5017:5047   */\n      mstore\n        /* \"#utility.yul\":5083:5117   */\n      0x4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061\n        /* \"#utility.yul\":5063:5081   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":5056:5118   */\n      mstore\n      shl(0xd0, 0x646472657373)\n        /* \"#utility.yul\":5134:5152   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":5127:5163   */\n      mstore\n        /* \"#utility.yul\":5180:5199   */\n      0x84\n      add\n        /* \"Utils/Ownable.sol\":2053:2126  require(newOwner != address(0), \"Ownable: new owner is the zero address\") */\n      tag_139\n        /* \"#utility.yul\":4977:5205   */\n      jump\n        /* \"Utils/Ownable.sol\":2053:2126  require(newOwner != address(0), \"Ownable: new owner is the zero address\") */\n    tag_210:\n        /* \"Utils/Ownable.sol\":2137:2165  _transferOwnership(newOwner) */\n      tag_146\n        /* \"Utils/Ownable.sol\":2156:2164  newOwner */\n      dup2\n        /* \"Utils/Ownable.sol\":2137:2155  _transferOwnership */\n      tag_143\n        /* \"Utils/Ownable.sol\":2137:2165  _transferOwnership(newOwner) */\n      jump\t// in\n        /* \"Utils/EnumerableSet.sol\":8259:8411  function add(AddressSet storage set, address value) internal returns (bool) {\r... */\n    tag_98:\n        /* \"Utils/EnumerableSet.sol\":8329:8333  bool */\n      0x00\n        /* \"Utils/EnumerableSet.sol\":8353:8403  _add(set._inner, bytes32(uint256(uint160(value)))) */\n      tag_216\n        /* \"Utils/EnumerableSet.sol\":8358:8361  set */\n      dup4\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"Utils/EnumerableSet.sol\":8378:8401  uint256(uint160(value)) */\n      dup5\n      and\n        /* \"Utils/EnumerableSet.sol\":8353:8357  _add */\n      tag_217\n        /* \"Utils/EnumerableSet.sol\":8353:8403  _add(set._inner, bytes32(uint256(uint160(value)))) */\n      jump\t// in\n    tag_216:\n        /* \"Utils/EnumerableSet.sol\":8346:8403  return _add(set._inner, bytes32(uint256(uint160(value)))) */\n      swap1\n      pop\n        /* \"Utils/EnumerableSet.sol\":8259:8411  function add(AddressSet storage set, address value) internal returns (bool) {\r... */\n    tag_215:\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"Utils/SafeMath.sol\":3585:3683  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r... */\n    tag_133:\n        /* \"Utils/SafeMath.sol\":3643:3650  uint256 */\n      0x00\n        /* \"Utils/SafeMath.sol\":3670:3675  a * b */\n      tag_216\n        /* \"Utils/SafeMath.sol\":3674:3675  b */\n      dup3\n        /* \"Utils/SafeMath.sol\":3670:3671  a */\n      dup5\n        /* \"Utils/SafeMath.sol\":3670:3675  a * b */\n      tag_119\n      jump\t// in\n        /* \"Utils/Ownable.sol\":2333:2524  function _transferOwnership(address newOwner) internal virtual {\r... */\n    tag_143:\n        /* \"Utils/Ownable.sol\":2426:2432  _owner */\n      0x01\n      dup1\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"Utils/Ownable.sol\":2443:2460  _owner = newOwner */\n      dup4\n      dup2\n      and\n      not(sub(shl(0xa0, 0x01), 0x01))\n      dup4\n      and\n      dup2\n      or\n      swap1\n      swap4\n      sstore\n        /* \"Utils/Ownable.sol\":2476:2516  OwnershipTransferred(oldOwner, newOwner) */\n      mload(0x40)\n        /* \"Utils/Ownable.sol\":2426:2432  _owner */\n      swap2\n      and\n      swap2\n        /* \"Utils/Ownable.sol\":2443:2460  _owner = newOwner */\n      swap1\n        /* \"Utils/Ownable.sol\":2426:2432  _owner */\n      dup3\n      swap1\n        /* \"Utils/Ownable.sol\":2476:2516  OwnershipTransferred(oldOwner, newOwner) */\n      0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\n      swap1\n        /* \"Utils/Ownable.sol\":2407:2423  address oldOwner */\n      0x00\n      swap1\n        /* \"Utils/Ownable.sol\":2476:2516  OwnershipTransferred(oldOwner, newOwner) */\n      log3\n        /* \"Utils/Ownable.sol\":2333:2524  function _transferOwnership(address newOwner) internal virtual {\r... */\n      pop\n      pop\n      jump\t// out\n        /* \"Utils/SafeMath.sol\":3228:3326  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r... */\n    tag_168:\n        /* \"Utils/SafeMath.sol\":3286:3293  uint256 */\n      0x00\n        /* \"Utils/SafeMath.sol\":3313:3318  a - b */\n      tag_216\n        /* \"Utils/SafeMath.sol\":3317:3318  b */\n      dup3\n        /* \"Utils/SafeMath.sol\":3313:3314  a */\n      dup5\n        /* \"Utils/SafeMath.sol\":3313:3318  a - b */\n      tag_106\n      jump\t// in\n        /* \"Utils/SafeMath.sol\":3984:4082  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r... */\n    tag_169:\n        /* \"Utils/SafeMath.sol\":4042:4049  uint256 */\n      0x00\n        /* \"Utils/SafeMath.sol\":4069:4074  a / b */\n      tag_216\n        /* \"Utils/SafeMath.sol\":4073:4074  b */\n      dup3\n        /* \"Utils/SafeMath.sol\":4069:4070  a */\n      dup5\n        /* \"Utils/SafeMath.sol\":4069:4074  a / b */\n      tag_226\n      jump\t// in\n        /* \"Utils/TransferHelper.sol\":1112:1542  function safeTransferFrom(\r... */\n    tag_199:\n        /* \"Utils/TransferHelper.sol\":1318:1369  abi.encodeWithSelector(0x23b872dd, from, to, value) */\n      0x40\n      dup1\n      mload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":4267:4282   */\n      dup6\n      dup2\n      and\n        /* \"Utils/TransferHelper.sol\":1318:1369  abi.encodeWithSelector(0x23b872dd, from, to, value) */\n      0x24\n      dup4\n      add\n        /* \"#utility.yul\":4249:4283   */\n      mstore\n        /* \"#utility.yul\":4319:4334   */\n      dup5\n      dup2\n      and\n        /* \"#utility.yul\":4299:4317   */\n      0x44\n      dup4\n      add\n        /* \"#utility.yul\":4292:4335   */\n      mstore\n        /* \"#utility.yul\":4351:4369   */\n      0x64\n      dup1\n      dup4\n      add\n        /* \"#utility.yul\":4344:4378   */\n      dup6\n      swap1\n      mstore\n        /* \"Utils/TransferHelper.sol\":1318:1369  abi.encodeWithSelector(0x23b872dd, from, to, value) */\n      dup4\n      mload\n      dup1\n      dup5\n      sub\n      swap1\n      swap2\n      add\n      dup2\n      mstore\n        /* \"#utility.yul\":4184:4202   */\n      0x84\n      swap1\n      swap3\n      add\n        /* \"Utils/TransferHelper.sol\":1318:1369  abi.encodeWithSelector(0x23b872dd, from, to, value) */\n      dup4\n      mstore\n      0x20\n      dup3\n      add\n      dup1\n      mload\n      sub(shl(0xe0, 0x01), 0x01)\n      and\n      shl(0xe0, 0x23b872dd)\n      or\n      swap1\n      mstore\n        /* \"Utils/TransferHelper.sol\":1293:1380  token.call(\r... */\n      swap2\n      mload\n      0x00\n      swap3\n      dup4\n      swap3\n        /* \"Utils/TransferHelper.sol\":1293:1303  token.call */\n      swap1\n      dup9\n      and\n      swap2\n        /* \"Utils/TransferHelper.sol\":1293:1380  token.call(\r... */\n      tag_230\n      swap2\n        /* \"Utils/TransferHelper.sol\":1318:1369  abi.encodeWithSelector(0x23b872dd, from, to, value) */\n      swap1\n        /* \"Utils/TransferHelper.sol\":1293:1380  token.call(\r... */\n      tag_231\n      jump\t// in\n    tag_230:\n      0x00\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup7\n      gas\n      call\n      swap2\n      pop\n      pop\n      returndatasize\n      dup1\n      0x00\n      dup2\n      eq\n      tag_234\n      jumpi\n      mload(0x40)\n      swap2\n      pop\n      and(add(returndatasize, 0x3f), not(0x1f))\n      dup3\n      add\n      0x40\n      mstore\n      returndatasize\n      dup3\n      mstore\n      returndatasize\n      0x00\n      0x20\n      dup5\n      add\n      returndatacopy\n      jump(tag_233)\n    tag_234:\n      0x60\n      swap2\n      pop\n    tag_233:\n      pop\n        /* \"Utils/TransferHelper.sol\":1257:1380  (bool success, bytes memory data) = token.call(\r... */\n      swap2\n      pop\n      swap2\n      pop\n        /* \"Utils/TransferHelper.sol\":1413:1420  success */\n      dup2\n        /* \"Utils/TransferHelper.sol\":1413:1470  success && (data.length == 0 || abi.decode(data, (bool))) */\n      dup1\n      iszero\n      tag_237\n      jumpi\n      pop\n        /* \"Utils/TransferHelper.sol\":1425:1436  data.length */\n      dup1\n      mload\n        /* \"Utils/TransferHelper.sol\":1425:1441  data.length == 0 */\n      iszero\n      dup1\n        /* \"Utils/TransferHelper.sol\":1425:1469  data.length == 0 || abi.decode(data, (bool)) */\n      tag_237\n      jumpi\n      pop\n        /* \"Utils/TransferHelper.sol\":1456:1460  data */\n      dup1\n        /* \"Utils/TransferHelper.sol\":1445:1469  abi.decode(data, (bool)) */\n      dup1\n      0x20\n      add\n      swap1\n      mload\n      dup2\n      add\n      swap1\n      tag_237\n      swap2\n      swap1\n      tag_238\n      jump\t// in\n    tag_237:\n        /* \"Utils/TransferHelper.sol\":1391:1534  require(\r... */\n      tag_239\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":7144:7146   */\n      0x20\n        /* \"Utils/TransferHelper.sol\":1391:1534  require(\r... */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":7126:7147   */\n      mstore\n        /* \"#utility.yul\":7183:7185   */\n      0x24\n        /* \"#utility.yul\":7163:7181   */\n      dup1\n      dup3\n      add\n        /* \"#utility.yul\":7156:7186   */\n      mstore\n        /* \"#utility.yul\":7222:7256   */\n      0x5472616e7366657248656c7065723a205452414e534645525f46524f4d5f4641\n        /* \"#utility.yul\":7202:7220   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":7195:7257   */\n      mstore\n      shl(0xe2, 0x12531151)\n        /* \"#utility.yul\":7273:7291   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":7266:7300   */\n      mstore\n        /* \"#utility.yul\":7317:7336   */\n      0x84\n      add\n        /* \"Utils/TransferHelper.sol\":1391:1534  require(\r... */\n      tag_139\n        /* \"#utility.yul\":7116:7342   */\n      jump\n        /* \"Utils/TransferHelper.sol\":1391:1534  require(\r... */\n    tag_239:\n        /* \"Utils/TransferHelper.sol\":1112:1542  function safeTransferFrom(\r... */\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"Utils/EnumerableSet.sol\":8831:8998  function contains(AddressSet storage set, address value) internal view returns (bool) {\r... */\n    tag_203:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"Utils/EnumerableSet.sol\":8965:8988  uint256(uint160(value)) */\n      dup2\n      and\n        /* \"Utils/EnumerableSet.sol\":8911:8915  bool */\n      0x00\n        /* \"Utils/EnumerableSet.sol\":4367:4386  set._indexes[value] */\n      swap1\n      dup2\n      mstore\n        /* \"Utils/EnumerableSet.sol\":4367:4379  set._indexes */\n      0x01\n      dup4\n      add\n        /* \"Utils/EnumerableSet.sol\":4367:4386  set._indexes[value] */\n      0x20\n      mstore\n      0x40\n      dup2\n      keccak256\n      sload\n        /* \"Utils/EnumerableSet.sol\":4367:4391  set._indexes[value] != 0 */\n      iszero\n      iszero\n        /* \"Utils/EnumerableSet.sol\":8935:8990  _contains(set._inner, bytes32(uint256(uint160(value)))) */\n      tag_216\n        /* \"Utils/EnumerableSet.sol\":4270:4399  function _contains(Set storage set, bytes32 value) private view returns (bool) {\r... */\n      jump\n        /* \"Utils/EnumerableSet.sol\":2174:2588  function _add(Set storage set, bytes32 value) private returns (bool) {\r... */\n    tag_217:\n        /* \"Utils/EnumerableSet.sol\":2237:2241  bool */\n      0x00\n        /* \"Utils/EnumerableSet.sol\":4367:4386  set._indexes[value] */\n      dup2\n      dup2\n      mstore\n        /* \"Utils/EnumerableSet.sol\":4367:4379  set._indexes */\n      0x01\n      dup4\n      add\n        /* \"Utils/EnumerableSet.sol\":4367:4386  set._indexes[value] */\n      0x20\n      mstore\n      0x40\n      dup2\n      keccak256\n      sload\n        /* \"Utils/EnumerableSet.sol\":2254:2581  if (!_contains(set, value)) {\r... */\n      tag_247\n      jumpi\n      pop\n        /* \"Utils/EnumerableSet.sol\":2297:2320  set._values.push(value) */\n      dup2\n      sload\n      0x01\n      dup2\n      dup2\n      add\n      dup5\n      sstore\n        /* \"Utils/EnumerableSet.sol\":2297:2308  set._values */\n      0x00\n        /* \"Utils/EnumerableSet.sol\":2297:2320  set._values.push(value) */\n      dup5\n      dup2\n      mstore\n      0x20\n      dup1\n      dup3\n      keccak256\n      swap1\n      swap4\n      add\n      dup5\n      swap1\n      sstore\n        /* \"Utils/EnumerableSet.sol\":2480:2498  set._values.length */\n      dup5\n      sload\n        /* \"Utils/EnumerableSet.sol\":2458:2477  set._indexes[value] */\n      dup5\n      dup3\n      mstore\n        /* \"Utils/EnumerableSet.sol\":2458:2470  set._indexes */\n      dup3\n      dup7\n      add\n        /* \"Utils/EnumerableSet.sol\":2458:2477  set._indexes[value] */\n      swap1\n      swap4\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"Utils/EnumerableSet.sol\":2458:2498  set._indexes[value] = set._values.length */\n      swap2\n      swap1\n      swap2\n      sstore\n        /* \"Utils/EnumerableSet.sol\":2513:2524  return true */\n      jump(tag_215)\n        /* \"Utils/EnumerableSet.sol\":2254:2581  if (!_contains(set, value)) {\r... */\n    tag_247:\n      pop\n        /* \"Utils/EnumerableSet.sol\":2564:2569  false */\n      0x00\n        /* \"Utils/EnumerableSet.sol\":2557:2569  return false */\n      jump(tag_215)\n        /* \"#utility.yul\":14:271   */\n    tag_47:\n        /* \"#utility.yul\":73:79   */\n      0x00\n        /* \"#utility.yul\":126:128   */\n      0x20\n        /* \"#utility.yul\":114:123   */\n      dup3\n        /* \"#utility.yul\":105:112   */\n      dup5\n        /* \"#utility.yul\":101:124   */\n      sub\n        /* \"#utility.yul\":97:129   */\n      slt\n        /* \"#utility.yul\":94:96   */\n      iszero\n      tag_253\n      jumpi\n        /* \"#utility.yul\":147:153   */\n      dup1\n        /* \"#utility.yul\":139:145   */\n      dup2\n        /* \"#utility.yul\":132:154   */\n      revert\n        /* \"#utility.yul\":94:96   */\n    tag_253:\n        /* \"#utility.yul\":191:200   */\n      dup2\n        /* \"#utility.yul\":178:201   */\n      calldataload\n        /* \"#utility.yul\":210:241   */\n      tag_254\n        /* \"#utility.yul\":235:240   */\n      dup2\n        /* \"#utility.yul\":210:241   */\n      tag_255\n      jump\t// in\n    tag_254:\n        /* \"#utility.yul\":260:265   */\n      swap4\n        /* \"#utility.yul\":84:271   */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":276:1572   */\n    tag_53:\n        /* \"#utility.yul\":419:425   */\n      0x00\n        /* \"#utility.yul\":427:433   */\n      dup1\n        /* \"#utility.yul\":435:441   */\n      0x00\n        /* \"#utility.yul\":443:449   */\n      dup1\n        /* \"#utility.yul\":474:477   */\n      0x0140\n        /* \"#utility.yul\":518:520   */\n      dup1\n        /* \"#utility.yul\":506:515   */\n      dup7\n        /* \"#utility.yul\":497:504   */\n      dup9\n        /* \"#utility.yul\":493:516   */\n      sub\n        /* \"#utility.yul\":489:521   */\n      slt\n        /* \"#utility.yul\":486:488   */\n      iszero\n      tag_257\n      jumpi\n        /* \"#utility.yul\":539:545   */\n      dup4\n        /* \"#utility.yul\":531:537   */\n      dup5\n        /* \"#utility.yul\":524:546   */\n      revert\n        /* \"#utility.yul\":486:488   */\n    tag_257:\n        /* \"#utility.yul\":583:592   */\n      dup6\n        /* \"#utility.yul\":570:593   */\n      calldataload\n        /* \"#utility.yul\":602:633   */\n      tag_258\n        /* \"#utility.yul\":627:632   */\n      dup2\n        /* \"#utility.yul\":602:633   */\n      tag_255\n      jump\t// in\n    tag_258:\n        /* \"#utility.yul\":652:657   */\n      swap5\n      pop\n        /* \"#utility.yul\":676:678   */\n      0x20\n        /* \"#utility.yul\":715:733   */\n      dup7\n      dup2\n      add\n        /* \"#utility.yul\":702:734   */\n      calldataload\n        /* \"#utility.yul\":743:776   */\n      tag_259\n        /* \"#utility.yul\":702:734   */\n      dup2\n        /* \"#utility.yul\":743:776   */\n      tag_255\n      jump\t// in\n    tag_259:\n        /* \"#utility.yul\":795:802   */\n      swap5\n      pop\n        /* \"#utility.yul\":854:856   */\n      0x40\n        /* \"#utility.yul\":839:857   */\n      dup8\n      add\n        /* \"#utility.yul\":826:858   */\n      calldataload\n        /* \"#utility.yul\":867:900   */\n      tag_260\n        /* \"#utility.yul\":826:858   */\n      dup2\n        /* \"#utility.yul\":867:900   */\n      tag_255\n      jump\t// in\n    tag_260:\n        /* \"#utility.yul\":919:926   */\n      swap4\n      pop\n        /* \"#utility.yul\":964:967   */\n      0x7f\n        /* \"#utility.yul\":949:968   */\n      dup8\n      add\n        /* \"#utility.yul\":945:978   */\n      dup9\n      sgt\n        /* \"#utility.yul\":935:937   */\n      tag_261\n      jumpi\n        /* \"#utility.yul\":997:1003   */\n      dup3\n        /* \"#utility.yul\":989:995   */\n      dup4\n        /* \"#utility.yul\":982:1004   */\n      revert\n        /* \"#utility.yul\":935:937   */\n    tag_261:\n        /* \"#utility.yul\":1035:1037   */\n      0x40\n        /* \"#utility.yul\":1029:1038   */\n      mload\n        /* \"#utility.yul\":1077:1080   */\n      0xe0\n        /* \"#utility.yul\":1069:1075   */\n      dup2\n        /* \"#utility.yul\":1065:1081   */\n      add\n        /* \"#utility.yul\":1147:1153   */\n      dup2\n        /* \"#utility.yul\":1135:1145   */\n      dup2\n        /* \"#utility.yul\":1132:1154   */\n      lt\n        /* \"#utility.yul\":1111:1129   */\n      0xffffffffffffffff\n        /* \"#utility.yul\":1099:1109   */\n      dup3\n        /* \"#utility.yul\":1096:1130   */\n      gt\n        /* \"#utility.yul\":1093:1155   */\n      or\n        /* \"#utility.yul\":1090:1092   */\n      iszero\n      tag_263\n      jumpi\n        /* \"#utility.yul\":1158:1176   */\n      tag_263\n      tag_264\n      jump\t// in\n    tag_263:\n        /* \"#utility.yul\":1194:1196   */\n      0x40\n        /* \"#utility.yul\":1187:1209   */\n      mstore\n        /* \"#utility.yul\":1229:1235   */\n      dup1\n        /* \"#utility.yul\":1270:1272   */\n      0x60\n        /* \"#utility.yul\":1255:1273   */\n      dup10\n      add\n        /* \"#utility.yul\":1288:1306   */\n      dup5\n      dup11\n      add\n        /* \"#utility.yul\":1285:1316   */\n      dup12\n      lt\n        /* \"#utility.yul\":1282:1284   */\n      iszero\n      tag_265\n      jumpi\n        /* \"#utility.yul\":1334:1340   */\n      dup6\n        /* \"#utility.yul\":1326:1332   */\n      dup7\n        /* \"#utility.yul\":1319:1341   */\n      revert\n        /* \"#utility.yul\":1282:1284   */\n    tag_265:\n        /* \"#utility.yul\":1361:1367   */\n      dup6\n        /* \"#utility.yul\":1352:1367   */\n      swap5\n      pop\n        /* \"#utility.yul\":1376:1541   */\n    tag_266:\n        /* \"#utility.yul\":1390:1394   */\n      0x07\n        /* \"#utility.yul\":1387:1388   */\n      dup6\n        /* \"#utility.yul\":1384:1395   */\n      lt\n        /* \"#utility.yul\":1376:1541   */\n      iszero\n      tag_268\n      jumpi\n        /* \"#utility.yul\":1449:1466   */\n      dup1\n      calldataload\n        /* \"#utility.yul\":1437:1467   */\n      dup3\n      mstore\n        /* \"#utility.yul\":1410:1411   */\n      0x01\n        /* \"#utility.yul\":1403:1412   */\n      swap5\n      swap1\n      swap5\n      add\n      swap4\n        /* \"#utility.yul\":1487:1499   */\n      swap1\n      dup4\n      add\n      swap1\n        /* \"#utility.yul\":1519:1531   */\n      dup4\n      add\n        /* \"#utility.yul\":1376:1541   */\n      jump(tag_266)\n    tag_268:\n        /* \"#utility.yul\":1380:1383   */\n      pop\n      pop\n        /* \"#utility.yul\":1560:1566   */\n      dup1\n        /* \"#utility.yul\":1550:1566   */\n      swap4\n      pop\n      pop\n      pop\n      pop\n        /* \"#utility.yul\":454:1572   */\n      swap3\n      swap6\n      swap2\n      swap5\n      pop\n      swap3\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1577:1874   */\n    tag_238:\n        /* \"#utility.yul\":1644:1650   */\n      0x00\n        /* \"#utility.yul\":1697:1699   */\n      0x20\n        /* \"#utility.yul\":1685:1694   */\n      dup3\n        /* \"#utility.yul\":1676:1683   */\n      dup5\n        /* \"#utility.yul\":1672:1695   */\n      sub\n        /* \"#utility.yul\":1668:1700   */\n      slt\n        /* \"#utility.yul\":1665:1667   */\n      iszero\n      tag_270\n      jumpi\n        /* \"#utility.yul\":1718:1724   */\n      dup1\n        /* \"#utility.yul\":1710:1716   */\n      dup2\n        /* \"#utility.yul\":1703:1725   */\n      revert\n        /* \"#utility.yul\":1665:1667   */\n    tag_270:\n        /* \"#utility.yul\":1755:1764   */\n      dup2\n        /* \"#utility.yul\":1749:1765   */\n      mload\n        /* \"#utility.yul\":1808:1813   */\n      dup1\n        /* \"#utility.yul\":1801:1814   */\n      iszero\n        /* \"#utility.yul\":1794:1815   */\n      iszero\n        /* \"#utility.yul\":1787:1792   */\n      dup2\n        /* \"#utility.yul\":1784:1816   */\n      eq\n        /* \"#utility.yul\":1774:1776   */\n      tag_254\n      jumpi\n        /* \"#utility.yul\":1835:1841   */\n      dup2\n        /* \"#utility.yul\":1827:1833   */\n      dup3\n        /* \"#utility.yul\":1820:1842   */\n      revert\n        /* \"#utility.yul\":1879:2069   */\n    tag_42:\n        /* \"#utility.yul\":1938:1944   */\n      0x00\n        /* \"#utility.yul\":1991:1993   */\n      0x20\n        /* \"#utility.yul\":1979:1988   */\n      dup3\n        /* \"#utility.yul\":1970:1977   */\n      dup5\n        /* \"#utility.yul\":1966:1989   */\n      sub\n        /* \"#utility.yul\":1962:1994   */\n      slt\n        /* \"#utility.yul\":1959:1961   */\n      iszero\n      tag_273\n      jumpi\n        /* \"#utility.yul\":2012:2018   */\n      dup1\n        /* \"#utility.yul\":2004:2010   */\n      dup2\n        /* \"#utility.yul\":1997:2019   */\n      revert\n        /* \"#utility.yul\":1959:1961   */\n    tag_273:\n      pop\n        /* \"#utility.yul\":2040:2063   */\n      calldataload\n      swap2\n        /* \"#utility.yul\":1949:2069   */\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2074:2268   */\n    tag_114:\n        /* \"#utility.yul\":2144:2150   */\n      0x00\n        /* \"#utility.yul\":2197:2199   */\n      0x20\n        /* \"#utility.yul\":2185:2194   */\n      dup3\n        /* \"#utility.yul\":2176:2183   */\n      dup5\n        /* \"#utility.yul\":2172:2195   */\n      sub\n        /* \"#utility.yul\":2168:2200   */\n      slt\n        /* \"#utility.yul\":2165:2167   */\n      iszero\n      tag_275\n      jumpi\n        /* \"#utility.yul\":2218:2224   */\n      dup1\n        /* \"#utility.yul\":2210:2216   */\n      dup2\n        /* \"#utility.yul\":2203:2225   */\n      revert\n        /* \"#utility.yul\":2165:2167   */\n    tag_275:\n      pop\n        /* \"#utility.yul\":2246:2262   */\n      mload\n      swap2\n        /* \"#utility.yul\":2155:2268   */\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2273:2703   */\n    tag_231:\n        /* \"#utility.yul\":2402:2405   */\n      0x00\n        /* \"#utility.yul\":2440:2446   */\n      dup3\n        /* \"#utility.yul\":2434:2447   */\n      mload\n        /* \"#utility.yul\":2465:2468   */\n      dup2\n        /* \"#utility.yul\":2477:2606   */\n    tag_277:\n        /* \"#utility.yul\":2491:2497   */\n      dup2\n        /* \"#utility.yul\":2488:2489   */\n      dup2\n        /* \"#utility.yul\":2485:2498   */\n      lt\n        /* \"#utility.yul\":2477:2606   */\n      iszero\n      tag_279\n      jumpi\n        /* \"#utility.yul\":2589:2593   */\n      0x20\n        /* \"#utility.yul\":2573:2587   */\n      dup2\n      dup7\n      add\n        /* \"#utility.yul\":2569:2594   */\n      dup2\n      add\n        /* \"#utility.yul\":2563:2595   */\n      mload\n        /* \"#utility.yul\":2550:2561   */\n      dup6\n      dup4\n      add\n        /* \"#utility.yul\":2543:2596   */\n      mstore\n        /* \"#utility.yul\":2506:2518   */\n      add\n        /* \"#utility.yul\":2477:2606   */\n      jump(tag_277)\n    tag_279:\n        /* \"#utility.yul\":2624:2630   */\n      dup2\n        /* \"#utility.yul\":2621:2622   */\n      dup2\n        /* \"#utility.yul\":2618:2631   */\n      gt\n        /* \"#utility.yul\":2615:2617   */\n      iszero\n      tag_280\n      jumpi\n        /* \"#utility.yul\":2659:2662   */\n      dup3\n        /* \"#utility.yul\":2650:2656   */\n      dup3\n        /* \"#utility.yul\":2645:2648   */\n      dup6\n        /* \"#utility.yul\":2641:2657   */\n      add\n        /* \"#utility.yul\":2634:2663   */\n      mstore\n        /* \"#utility.yul\":2615:2617   */\n    tag_280:\n      pop\n        /* \"#utility.yul\":2681:2697   */\n      swap2\n      swap1\n      swap2\n      add\n      swap3\n        /* \"#utility.yul\":2410:2703   */\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":8989:9117   */\n    tag_183:\n        /* \"#utility.yul\":9029:9032   */\n      0x00\n        /* \"#utility.yul\":9060:9061   */\n      dup3\n        /* \"#utility.yul\":9056:9062   */\n      not\n        /* \"#utility.yul\":9053:9054   */\n      dup3\n        /* \"#utility.yul\":9050:9063   */\n      gt\n        /* \"#utility.yul\":9047:9049   */\n      iszero\n      tag_299\n      jumpi\n        /* \"#utility.yul\":9066:9084   */\n      tag_299\n      tag_300\n      jump\t// in\n    tag_299:\n      pop\n        /* \"#utility.yul\":9102:9111   */\n      add\n      swap1\n        /* \"#utility.yul\":9037:9117   */\n      jump\t// out\n        /* \"#utility.yul\":9122:9339   */\n    tag_226:\n        /* \"#utility.yul\":9162:9163   */\n      0x00\n        /* \"#utility.yul\":9188:9189   */\n      dup3\n        /* \"#utility.yul\":9178:9180   */\n      tag_302\n      jumpi\n      shl(0xe0, 0x4e487b71)\n        /* \"#utility.yul\":9213:9244   */\n      dup2\n      mstore\n        /* \"#utility.yul\":9267:9271   */\n      0x12\n        /* \"#utility.yul\":9264:9265   */\n      0x04\n        /* \"#utility.yul\":9257:9272   */\n      mstore\n        /* \"#utility.yul\":9295:9299   */\n      0x24\n        /* \"#utility.yul\":9220:9221   */\n      dup2\n        /* \"#utility.yul\":9285:9300   */\n      revert\n        /* \"#utility.yul\":9178:9180   */\n    tag_302:\n      pop\n        /* \"#utility.yul\":9324:9333   */\n      div\n      swap1\n        /* \"#utility.yul\":9168:9339   */\n      jump\t// out\n        /* \"#utility.yul\":9344:9766   */\n    tag_303:\n        /* \"#utility.yul\":9433:9434   */\n      0x01\n        /* \"#utility.yul\":9476:9481   */\n      dup2\n        /* \"#utility.yul\":9433:9434   */\n      dup2\n        /* \"#utility.yul\":9490:9760   */\n    tag_305:\n        /* \"#utility.yul\":9511:9518   */\n      dup1\n        /* \"#utility.yul\":9501:9509   */\n      dup6\n        /* \"#utility.yul\":9498:9519   */\n      gt\n        /* \"#utility.yul\":9490:9760   */\n      iszero\n      tag_307\n      jumpi\n        /* \"#utility.yul\":9570:9574   */\n      dup2\n        /* \"#utility.yul\":9566:9567   */\n      0x00\n        /* \"#utility.yul\":9562:9568   */\n      not\n        /* \"#utility.yul\":9558:9575   */\n      div\n        /* \"#utility.yul\":9552:9556   */\n      dup3\n        /* \"#utility.yul\":9549:9576   */\n      gt\n        /* \"#utility.yul\":9546:9548   */\n      iszero\n      tag_309\n      jumpi\n        /* \"#utility.yul\":9579:9597   */\n      tag_309\n      tag_300\n      jump\t// in\n    tag_309:\n        /* \"#utility.yul\":9629:9636   */\n      dup1\n        /* \"#utility.yul\":9619:9627   */\n      dup6\n        /* \"#utility.yul\":9615:9637   */\n      and\n        /* \"#utility.yul\":9612:9614   */\n      iszero\n      tag_310\n      jumpi\n        /* \"#utility.yul\":9649:9665   */\n      swap2\n      dup2\n      mul\n      swap2\n        /* \"#utility.yul\":9612:9614   */\n    tag_310:\n        /* \"#utility.yul\":9728:9750   */\n      swap4\n      dup5\n      shr\n      swap4\n        /* \"#utility.yul\":9688:9703   */\n      swap1\n      dup1\n      mul\n      swap1\n        /* \"#utility.yul\":9490:9760   */\n      jump(tag_305)\n    tag_307:\n        /* \"#utility.yul\":9494:9497   */\n      pop\n        /* \"#utility.yul\":9408:9766   */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":9771:9902   */\n    tag_116:\n        /* \"#utility.yul\":9831:9836   */\n      0x00\n        /* \"#utility.yul\":9860:9896   */\n      tag_216\n        /* \"#utility.yul\":9887:9895   */\n      dup4\n        /* \"#utility.yul\":9881:9885   */\n      dup4\n        /* \"#utility.yul\":9956:9961   */\n      0x00\n        /* \"#utility.yul\":9986:9994   */\n      dup3\n        /* \"#utility.yul\":9976:9978   */\n      tag_315\n      jumpi\n      pop\n        /* \"#utility.yul\":10027:10028   */\n      0x01\n        /* \"#utility.yul\":10041:10046   */\n      jump(tag_215)\n        /* \"#utility.yul\":9976:9978   */\n    tag_315:\n        /* \"#utility.yul\":10075:10079   */\n      dup2\n        /* \"#utility.yul\":10065:10067   */\n      tag_316\n      jumpi\n      pop\n        /* \"#utility.yul\":10112:10113   */\n      0x00\n        /* \"#utility.yul\":10126:10131   */\n      jump(tag_215)\n        /* \"#utility.yul\":10065:10067   */\n    tag_316:\n        /* \"#utility.yul\":10157:10161   */\n      dup2\n        /* \"#utility.yul\":10175:10176   */\n      0x01\n        /* \"#utility.yul\":10170:10229   */\n      dup2\n      eq\n      tag_318\n      jumpi\n        /* \"#utility.yul\":10243:10244   */\n      0x02\n        /* \"#utility.yul\":10238:10368   */\n      dup2\n      eq\n      tag_319\n      jumpi\n        /* \"#utility.yul\":10150:10368   */\n      jump(tag_317)\n        /* \"#utility.yul\":10170:10229   */\n    tag_318:\n        /* \"#utility.yul\":10200:10201   */\n      0x01\n        /* \"#utility.yul\":10191:10201   */\n      swap2\n      pop\n        /* \"#utility.yul\":10214:10219   */\n      pop\n      jump(tag_215)\n        /* \"#utility.yul\":10238:10368   */\n    tag_319:\n        /* \"#utility.yul\":10275:10278   */\n      0xff\n        /* \"#utility.yul\":10265:10273   */\n      dup5\n        /* \"#utility.yul\":10262:10279   */\n      gt\n        /* \"#utility.yul\":10259:10261   */\n      iszero\n      tag_321\n      jumpi\n        /* \"#utility.yul\":10282:10300   */\n      tag_321\n      tag_300\n      jump\t// in\n    tag_321:\n      pop\n      pop\n        /* \"#utility.yul\":10338:10339   */\n      0x01\n        /* \"#utility.yul\":10324:10340   */\n      dup3\n      shl\n        /* \"#utility.yul\":10353:10358   */\n      jump(tag_215)\n        /* \"#utility.yul\":10150:10368   */\n    tag_317:\n      pop\n        /* \"#utility.yul\":10452:10454   */\n      0x20\n        /* \"#utility.yul\":10442:10450   */\n      dup4\n        /* \"#utility.yul\":10439:10455   */\n      lt\n        /* \"#utility.yul\":10433:10436   */\n      0x0133\n        /* \"#utility.yul\":10427:10431   */\n      dup4\n        /* \"#utility.yul\":10424:10437   */\n      lt\n        /* \"#utility.yul\":10420:10456   */\n      and\n        /* \"#utility.yul\":10414:10416   */\n      0x4e\n        /* \"#utility.yul\":10404:10412   */\n      dup5\n        /* \"#utility.yul\":10401:10417   */\n      lt\n        /* \"#utility.yul\":10396:10398   */\n      0x0b\n        /* \"#utility.yul\":10390:10394   */\n      dup5\n        /* \"#utility.yul\":10387:10399   */\n      lt\n        /* \"#utility.yul\":10383:10418   */\n      and\n        /* \"#utility.yul\":10380:10457   */\n      or\n        /* \"#utility.yul\":10377:10379   */\n      iszero\n      tag_322\n      jumpi\n      pop\n        /* \"#utility.yul\":10489:10508   */\n      dup2\n      dup2\n      exp\n        /* \"#utility.yul\":10521:10526   */\n      jump(tag_215)\n        /* \"#utility.yul\":10377:10379   */\n    tag_322:\n        /* \"#utility.yul\":10568:10602   */\n      tag_323\n        /* \"#utility.yul\":10593:10601   */\n      dup4\n        /* \"#utility.yul\":10587:10591   */\n      dup4\n        /* \"#utility.yul\":10568:10602   */\n      tag_303\n      jump\t// in\n    tag_323:\n        /* \"#utility.yul\":10638:10644   */\n      dup1\n        /* \"#utility.yul\":10634:10635   */\n      0x00\n        /* \"#utility.yul\":10630:10636   */\n      not\n        /* \"#utility.yul\":10626:10645   */\n      div\n        /* \"#utility.yul\":10617:10624   */\n      dup3\n        /* \"#utility.yul\":10614:10646   */\n      gt\n        /* \"#utility.yul\":10611:10613   */\n      iszero\n      tag_325\n      jumpi\n        /* \"#utility.yul\":10649:10667   */\n      tag_325\n      tag_300\n      jump\t// in\n    tag_325:\n        /* \"#utility.yul\":10687:10707   */\n      mul\n      swap4\n        /* \"#utility.yul\":9966:10713   */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":10718:10886   */\n    tag_119:\n        /* \"#utility.yul\":10758:10765   */\n      0x00\n        /* \"#utility.yul\":10824:10825   */\n      dup2\n        /* \"#utility.yul\":10820:10821   */\n      0x00\n        /* \"#utility.yul\":10816:10822   */\n      not\n        /* \"#utility.yul\":10812:10826   */\n      div\n        /* \"#utility.yul\":10809:10810   */\n      dup4\n        /* \"#utility.yul\":10806:10827   */\n      gt\n        /* \"#utility.yul\":10801:10802   */\n      dup3\n        /* \"#utility.yul\":10794:10803   */\n      iszero\n        /* \"#utility.yul\":10787:10804   */\n      iszero\n        /* \"#utility.yul\":10783:10828   */\n      and\n        /* \"#utility.yul\":10780:10782   */\n      iszero\n      tag_328\n      jumpi\n        /* \"#utility.yul\":10831:10849   */\n      tag_328\n      tag_300\n      jump\t// in\n    tag_328:\n      pop\n        /* \"#utility.yul\":10871:10880   */\n      mul\n      swap1\n        /* \"#utility.yul\":10770:10886   */\n      jump\t// out\n        /* \"#utility.yul\":10891:11016   */\n    tag_106:\n        /* \"#utility.yul\":10931:10935   */\n      0x00\n        /* \"#utility.yul\":10959:10960   */\n      dup3\n        /* \"#utility.yul\":10956:10957   */\n      dup3\n        /* \"#utility.yul\":10953:10961   */\n      lt\n        /* \"#utility.yul\":10950:10952   */\n      iszero\n      tag_331\n      jumpi\n        /* \"#utility.yul\":10964:10982   */\n      tag_331\n      tag_300\n      jump\t// in\n    tag_331:\n      pop\n        /* \"#utility.yul\":11001:11010   */\n      sub\n      swap1\n        /* \"#utility.yul\":10940:11016   */\n      jump\t// out\n        /* \"#utility.yul\":11021:11148   */\n    tag_300:\n        /* \"#utility.yul\":11082:11092   */\n      0x4e487b71\n        /* \"#utility.yul\":11077:11080   */\n      0xe0\n        /* \"#utility.yul\":11073:11093   */\n      shl\n        /* \"#utility.yul\":11070:11071   */\n      0x00\n        /* \"#utility.yul\":11063:11094   */\n      mstore\n        /* \"#utility.yul\":11113:11117   */\n      0x11\n        /* \"#utility.yul\":11110:11111   */\n      0x04\n        /* \"#utility.yul\":11103:11118   */\n      mstore\n        /* \"#utility.yul\":11137:11141   */\n      0x24\n        /* \"#utility.yul\":11134:11135   */\n      0x00\n        /* \"#utility.yul\":11127:11142   */\n      revert\n        /* \"#utility.yul\":11153:11280   */\n    tag_264:\n        /* \"#utility.yul\":11214:11224   */\n      0x4e487b71\n        /* \"#utility.yul\":11209:11212   */\n      0xe0\n        /* \"#utility.yul\":11205:11225   */\n      shl\n        /* \"#utility.yul\":11202:11203   */\n      0x00\n        /* \"#utility.yul\":11195:11226   */\n      mstore\n        /* \"#utility.yul\":11245:11249   */\n      0x41\n        /* \"#utility.yul\":11242:11243   */\n      0x04\n        /* \"#utility.yul\":11235:11250   */\n      mstore\n        /* \"#utility.yul\":11269:11273   */\n      0x24\n        /* \"#utility.yul\":11266:11267   */\n      0x00\n        /* \"#utility.yul\":11259:11274   */\n      revert\n        /* \"#utility.yul\":11285:11416   */\n    tag_255:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":11360:11391   */\n      dup2\n      and\n        /* \"#utility.yul\":11350:11392   */\n      dup2\n      eq\n        /* \"#utility.yul\":11340:11342   */\n      tag_146\n      jumpi\n        /* \"#utility.yul\":11406:11407   */\n      0x00\n        /* \"#utility.yul\":11403:11404   */\n      dup1\n        /* \"#utility.yul\":11396:11408   */\n      revert\n\n    auxdata: 0xa2646970667358221220be2de8ea34aec43de128df4709520dae3450277f762b890ed197638bd2eb236c64736f6c63430008040033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "608060405260016000556100123361009c565b6017805473c778417e063141139fce010982780140aa0cd5ab6001600160a01b03199091161790556100646019736ccb41eeda5a073076f3e7dc1614c185b5fa41ed6100ee602090811b610ba017901c565b50610091734f0b12bbf40fc182559822a5b1db6d34dbc3e01660196100ee60201b610ba01790919060201c565b50601460185561015b565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000610103836001600160a01b03841661010c565b90505b92915050565b600081815260018301602052604081205461015357508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610106565b506000610106565b611111806200016b6000396000f3fe6080604052600436106100fe5760003560e01c8063861faf5f11610095578063b6b55f2511610064578063b6b55f2514610340578063cad5b0f714610353578063e2d3f42314610378578063f2fde38b146103ff578063f8b2cb4f1461041f57600080fd5b8063861faf5f1461028e5780638da5cb5b14610296578063acfb2355146102c8578063ad5c46481461032057600080fd5b80634329db46116100d15780634329db461461021757806356c5f3491461022c57806361e1765514610259578063715018a61461027957600080fd5b806318856a2f146101035780631df4ccfc146101c8578063200d2ed2146101ec5780633b5ef2ad14610201575b600080fd5b34801561010f57600080fd5b50600b54600c54600d54600e54600f546010546011546012546013546014546015546016546101579b6001600160a01b039081169b81169a16989796959493929160ff16908c565b604080516001600160a01b039d8e1681529b8d1660208d015299909b16988a01989098526060890196909652608088019490945260a087019290925260c086015260e08501526101008401526101208301521515610140820152610160810191909152610180015b60405180910390f35b3480156101d457600080fd5b506101de601b5481565b6040519081526020016101bf565b3480156101f857600080fd5b506101de610447565b34801561020d57600080fd5b506101de60185481565b61022a610225366004610ed8565b610470565b005b34801561023857600080fd5b506101de610247366004610dd5565b60036020526000908152604090205481565b34801561026557600080fd5b5061022a610274366004610df8565b6104aa565b34801561028557600080fd5b5061022a61066a565b61022a6106d5565b3480156102a257600080fd5b506001546001600160a01b03165b6040516001600160a01b0390911681526020016101bf565b3480156102d457600080fd5b506004546005546006546007546008546009546102f395949392919086565b604080519687526020870195909552938501929092526060840152608083015260a082015260c0016101bf565b34801561032c57600080fd5b506017546102b0906001600160a01b031681565b61022a61034e366004610ed8565b610704565b34801561035f57600080fd5b50610368610ac6565b60405190151581526020016101bf565b34801561038457600080fd5b506103ce610393366004610dd5565b600260208190526000918252604090912080546001820154928201546003830154600490930154919392909160ff8082169161010090041686565b60408051968752602087019590955293850192909252606084015215156080830152151560a082015260c0016101bf565b34801561040b57600080fd5b5061022a61041a366004610dd5565b610ad8565b34801561042b57600080fd5b506101de61043a366004610dd5565b6001600160a01b03163190565b600f5460009042101561045a5750600090565b60105442111561046a5750600290565b50600190565b336108fc61047e8334611083565b6040518115909202916000818181858888f193505050501580156104a6573d6000803e3d6000fd5b5050565b600b80546001600160a01b038087166001600160a01b031992831617909255600c80548684169083168117909155600d8054938616939092169290921790556040805163313ce56760e01b8152905163313ce56791600480820192602092909190829003018186803b15801561051f57600080fd5b505afa158015610533573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105579190610ef0565b61056290600a610fbc565b815161056e9190611064565b600e55602080820151600f556040808301516010556060830151601155600d54815163313ce56760e01b815291516001600160a01b039091169263313ce5679260048082019391829003018186803b1580156105c957600080fd5b505afa1580156105dd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106019190610ef0565b61060c90600a610fbc565b608082015161061b9190611064565b60125560a081015160135560c0810151601455600d54601754601580546001600160a01b03938416939092169290921460ff19909116179055600e546106619080610bbe565b60165550505050565b6001546001600160a01b031633146106c95760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b6106d36000610bca565b565b60405133904780156108fc02916000818181858888f19350505050158015610701573d6000803e3d6000fd5b50565b600260005414156107575760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016106c0565b6002600055610764610447565b6001146107a05760405162461bcd60e51b815260206004820152600a6024820152694e6f742061637469766560b01b60448201526064016106c0565b336000908152600260205260408120601154909183918291906103e8908310156107ff5760405162461bcd60e51b815260206004820152601060248201526f4e6f7420656e6f7567682076616c756560801b60448201526064016106c0565b6012548311156108425760405162461bcd60e51b815260206004820152600e60248201526d4f766572666c6f772076616c756560901b60448201526064016106c0565b61084a610ac6565b61088657610877816108718561086b60185486610c1c90919063ffffffff16565b90610bbe565b90610c28565b92506108838385611083565b91505b60045460125460009161089891611083565b9050600081116108dc5760405162461bcd60e51b815260206004820152600f60248201526e53616c65206973205375636365737360881b60448201526064016106c0565b6000610983600b60020160009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561093257600080fd5b505afa158015610946573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061096a9190610ef0565b61097590600a610fbc565b600e54610871908890610bbe565b9050858760000160008282546109999190610f41565b92505081905550808760010160008282546109b49190610f41565b9091555050600480548691906000906109ce908490610f41565b9091555050600580548291906000906109e8908490610f41565b90915550503360009081526003602052604081208054869290610a0c908490610f41565b9250508190555083601b6000828254610a259190610f41565b909155505060155460ff168015610a44575034610a428587610f41565b105b15610a8c57336108fc85610a588834611083565b610a629190611083565b6040518115909202916000818181858888f19350505050158015610a8a573d6000803e3d6000fd5b505b60155460ff16610ab757600d54610ab7906001600160a01b03163330610ab2888a610f41565b610c34565b50506001600055505050505050565b6000610ad3601933610d64565b905090565b6001546001600160a01b03163314610b325760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016106c0565b6001600160a01b038116610b975760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016106c0565b61070181610bca565b6000610bb5836001600160a01b038416610d86565b90505b92915050565b6000610bb58284611064565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000610bb58284611083565b6000610bb58284610f59565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180516001600160e01b03166323b872dd60e01b1790529151600092839290881691610c989190610f08565b6000604051808303816000865af19150503d8060008114610cd5576040519150601f19603f3d011682016040523d82523d6000602084013e610cda565b606091505b5091509150818015610d04575080511580610d04575080806020019051810190610d049190610eb8565b610d5c5760405162461bcd60e51b8152602060048201526024808201527f5472616e7366657248656c7065723a205452414e534645525f46524f4d5f46416044820152631253115160e21b60648201526084016106c0565b505050505050565b6001600160a01b03811660009081526001830160205260408120541515610bb5565b6000818152600183016020526040812054610dcd57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610bb8565b506000610bb8565b600060208284031215610de6578081fd5b8135610df1816110c6565b9392505050565b600080600080610140808688031215610e0f578384fd5b8535610e1a816110c6565b9450602086810135610e2b816110c6565b94506040870135610e3b816110c6565b9350607f87018813610e4b578283fd5b60405160e0810181811067ffffffffffffffff82111715610e6e57610e6e6110b0565b6040528060608901848a018b1015610e84578586fd5b8594505b6007851015610ea7578035825260019490940193908301908301610e88565b505080935050505092959194509250565b600060208284031215610ec9578081fd5b81518015158114610df1578182fd5b600060208284031215610ee9578081fd5b5035919050565b600060208284031215610f01578081fd5b5051919050565b60008251815b81811015610f285760208186018101518583015201610f0e565b81811115610f365782828501525b509190910192915050565b60008219821115610f5457610f5461109a565b500190565b600082610f7457634e487b7160e01b81526012600452602481fd5b500490565b600181815b80851115610fb4578160001904821115610f9a57610f9a61109a565b80851615610fa757918102915b93841c9390800290610f7e565b509250929050565b6000610bb58383600082610fd257506001610bb8565b81610fdf57506000610bb8565b8160018114610ff55760028114610fff5761101b565b6001915050610bb8565b60ff8411156110105761101061109a565b50506001821b610bb8565b5060208310610133831016604e8410600b841016171561103e575081810a610bb8565b6110488383610f79565b806000190482111561105c5761105c61109a565b029392505050565b600081600019048311821515161561107e5761107e61109a565b500290565b6000828210156110955761109561109a565b500390565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461070157600080fdfea2646970667358221220be2de8ea34aec43de128df4709520dae3450277f762b890ed197638bd2eb236c64736f6c63430008040033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x1 PUSH1 0x0 SSTORE PUSH2 0x12 CALLER PUSH2 0x9C JUMP JUMPDEST PUSH1 0x17 DUP1 SLOAD PUSH20 0xC778417E063141139FCE010982780140AA0CD5AB PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP1 SWAP2 AND OR SWAP1 SSTORE PUSH2 0x64 PUSH1 0x19 PUSH20 0x6CCB41EEDA5A073076F3E7DC1614C185B5FA41ED PUSH2 0xEE PUSH1 0x20 SWAP1 DUP2 SHL PUSH2 0xBA0 OR SWAP1 SHR JUMP JUMPDEST POP PUSH2 0x91 PUSH20 0x4F0B12BBF40FC182559822A5B1DB6D34DBC3E016 PUSH1 0x19 PUSH2 0xEE PUSH1 0x20 SHL PUSH2 0xBA0 OR SWAP1 SWAP2 SWAP1 PUSH1 0x20 SHR JUMP JUMPDEST POP PUSH1 0x14 PUSH1 0x18 SSTORE PUSH2 0x15B JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x103 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x10C JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 DUP4 ADD PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH2 0x153 JUMPI POP DUP2 SLOAD PUSH1 0x1 DUP2 DUP2 ADD DUP5 SSTORE PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 KECCAK256 SWAP1 SWAP4 ADD DUP5 SWAP1 SSTORE DUP5 SLOAD DUP5 DUP3 MSTORE DUP3 DUP7 ADD SWAP1 SWAP4 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP2 SWAP1 SWAP2 SSTORE PUSH2 0x106 JUMP JUMPDEST POP PUSH1 0x0 PUSH2 0x106 JUMP JUMPDEST PUSH2 0x1111 DUP1 PUSH3 0x16B PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0xFE JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x861FAF5F GT PUSH2 0x95 JUMPI DUP1 PUSH4 0xB6B55F25 GT PUSH2 0x64 JUMPI DUP1 PUSH4 0xB6B55F25 EQ PUSH2 0x340 JUMPI DUP1 PUSH4 0xCAD5B0F7 EQ PUSH2 0x353 JUMPI DUP1 PUSH4 0xE2D3F423 EQ PUSH2 0x378 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x3FF JUMPI DUP1 PUSH4 0xF8B2CB4F EQ PUSH2 0x41F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x861FAF5F EQ PUSH2 0x28E JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x296 JUMPI DUP1 PUSH4 0xACFB2355 EQ PUSH2 0x2C8 JUMPI DUP1 PUSH4 0xAD5C4648 EQ PUSH2 0x320 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x4329DB46 GT PUSH2 0xD1 JUMPI DUP1 PUSH4 0x4329DB46 EQ PUSH2 0x217 JUMPI DUP1 PUSH4 0x56C5F349 EQ PUSH2 0x22C JUMPI DUP1 PUSH4 0x61E17655 EQ PUSH2 0x259 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x279 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x18856A2F EQ PUSH2 0x103 JUMPI DUP1 PUSH4 0x1DF4CCFC EQ PUSH2 0x1C8 JUMPI DUP1 PUSH4 0x200D2ED2 EQ PUSH2 0x1EC JUMPI DUP1 PUSH4 0x3B5EF2AD EQ PUSH2 0x201 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x10F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0xB SLOAD PUSH1 0xC SLOAD PUSH1 0xD SLOAD PUSH1 0xE SLOAD PUSH1 0xF SLOAD PUSH1 0x10 SLOAD PUSH1 0x11 SLOAD PUSH1 0x12 SLOAD PUSH1 0x13 SLOAD PUSH1 0x14 SLOAD PUSH1 0x15 SLOAD PUSH1 0x16 SLOAD PUSH2 0x157 SWAP12 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP12 DUP2 AND SWAP11 AND SWAP9 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 PUSH1 0xFF AND SWAP1 DUP13 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP14 DUP15 AND DUP2 MSTORE SWAP12 DUP14 AND PUSH1 0x20 DUP14 ADD MSTORE SWAP10 SWAP1 SWAP12 AND SWAP9 DUP11 ADD SWAP9 SWAP1 SWAP9 MSTORE PUSH1 0x60 DUP10 ADD SWAP7 SWAP1 SWAP7 MSTORE PUSH1 0x80 DUP9 ADD SWAP5 SWAP1 SWAP5 MSTORE PUSH1 0xA0 DUP8 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0xC0 DUP7 ADD MSTORE PUSH1 0xE0 DUP6 ADD MSTORE PUSH2 0x100 DUP5 ADD MSTORE PUSH2 0x120 DUP4 ADD MSTORE ISZERO ISZERO PUSH2 0x140 DUP3 ADD MSTORE PUSH2 0x160 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH2 0x180 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1D4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1DE PUSH1 0x1B SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1BF JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1F8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1DE PUSH2 0x447 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x20D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1DE PUSH1 0x18 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x22A PUSH2 0x225 CALLDATASIZE PUSH1 0x4 PUSH2 0xED8 JUMP JUMPDEST PUSH2 0x470 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x238 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1DE PUSH2 0x247 CALLDATASIZE PUSH1 0x4 PUSH2 0xDD5 JUMP JUMPDEST PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x265 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x22A PUSH2 0x274 CALLDATASIZE PUSH1 0x4 PUSH2 0xDF8 JUMP JUMPDEST PUSH2 0x4AA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x285 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x22A PUSH2 0x66A JUMP JUMPDEST PUSH2 0x22A PUSH2 0x6D5 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2A2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1BF JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2D4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 SLOAD PUSH1 0x5 SLOAD PUSH1 0x6 SLOAD PUSH1 0x7 SLOAD PUSH1 0x8 SLOAD PUSH1 0x9 SLOAD PUSH2 0x2F3 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 DUP7 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP7 DUP8 MSTORE PUSH1 0x20 DUP8 ADD SWAP6 SWAP1 SWAP6 MSTORE SWAP4 DUP6 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 ADD PUSH2 0x1BF JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x32C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x17 SLOAD PUSH2 0x2B0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 0x22A PUSH2 0x34E CALLDATASIZE PUSH1 0x4 PUSH2 0xED8 JUMP JUMPDEST PUSH2 0x704 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x35F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x368 PUSH2 0xAC6 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1BF JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x384 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3CE PUSH2 0x393 CALLDATASIZE PUSH1 0x4 PUSH2 0xDD5 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD SWAP3 DUP3 ADD SLOAD PUSH1 0x3 DUP4 ADD SLOAD PUSH1 0x4 SWAP1 SWAP4 ADD SLOAD SWAP2 SWAP4 SWAP3 SWAP1 SWAP2 PUSH1 0xFF DUP1 DUP3 AND SWAP2 PUSH2 0x100 SWAP1 DIV AND DUP7 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP7 DUP8 MSTORE PUSH1 0x20 DUP8 ADD SWAP6 SWAP1 SWAP6 MSTORE SWAP4 DUP6 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x60 DUP5 ADD MSTORE ISZERO ISZERO PUSH1 0x80 DUP4 ADD MSTORE ISZERO ISZERO PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 ADD PUSH2 0x1BF JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x40B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x22A PUSH2 0x41A CALLDATASIZE PUSH1 0x4 PUSH2 0xDD5 JUMP JUMPDEST PUSH2 0xAD8 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x42B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1DE PUSH2 0x43A CALLDATASIZE PUSH1 0x4 PUSH2 0xDD5 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND BALANCE SWAP1 JUMP JUMPDEST PUSH1 0xF SLOAD PUSH1 0x0 SWAP1 TIMESTAMP LT ISZERO PUSH2 0x45A JUMPI POP PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH1 0x10 SLOAD TIMESTAMP GT ISZERO PUSH2 0x46A JUMPI POP PUSH1 0x2 SWAP1 JUMP JUMPDEST POP PUSH1 0x1 SWAP1 JUMP JUMPDEST CALLER PUSH2 0x8FC PUSH2 0x47E DUP4 CALLVALUE PUSH2 0x1083 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 ISZERO SWAP1 SWAP3 MUL SWAP2 PUSH1 0x0 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x4A6 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP JUMP JUMPDEST PUSH1 0xB DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP8 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP3 DUP4 AND OR SWAP1 SWAP3 SSTORE PUSH1 0xC DUP1 SLOAD DUP7 DUP5 AND SWAP1 DUP4 AND DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 0xD DUP1 SLOAD SWAP4 DUP7 AND SWAP4 SWAP1 SWAP3 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SSTORE PUSH1 0x40 DUP1 MLOAD PUSH4 0x313CE567 PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 MLOAD PUSH4 0x313CE567 SWAP2 PUSH1 0x4 DUP1 DUP3 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x51F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x533 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x557 SWAP2 SWAP1 PUSH2 0xEF0 JUMP JUMPDEST PUSH2 0x562 SWAP1 PUSH1 0xA PUSH2 0xFBC JUMP JUMPDEST DUP2 MLOAD PUSH2 0x56E SWAP2 SWAP1 PUSH2 0x1064 JUMP JUMPDEST PUSH1 0xE SSTORE PUSH1 0x20 DUP1 DUP3 ADD MLOAD PUSH1 0xF SSTORE PUSH1 0x40 DUP1 DUP4 ADD MLOAD PUSH1 0x10 SSTORE PUSH1 0x60 DUP4 ADD MLOAD PUSH1 0x11 SSTORE PUSH1 0xD SLOAD DUP2 MLOAD PUSH4 0x313CE567 PUSH1 0xE0 SHL DUP2 MSTORE SWAP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP3 PUSH4 0x313CE567 SWAP3 PUSH1 0x4 DUP1 DUP3 ADD SWAP4 SWAP2 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5C9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x5DD JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x601 SWAP2 SWAP1 PUSH2 0xEF0 JUMP JUMPDEST PUSH2 0x60C SWAP1 PUSH1 0xA PUSH2 0xFBC JUMP JUMPDEST PUSH1 0x80 DUP3 ADD MLOAD PUSH2 0x61B SWAP2 SWAP1 PUSH2 0x1064 JUMP JUMPDEST PUSH1 0x12 SSTORE PUSH1 0xA0 DUP2 ADD MLOAD PUSH1 0x13 SSTORE PUSH1 0xC0 DUP2 ADD MLOAD PUSH1 0x14 SSTORE PUSH1 0xD SLOAD PUSH1 0x17 SLOAD PUSH1 0x15 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND SWAP4 SWAP1 SWAP3 AND SWAP3 SWAP1 SWAP3 EQ PUSH1 0xFF NOT SWAP1 SWAP2 AND OR SWAP1 SSTORE PUSH1 0xE SLOAD PUSH2 0x661 SWAP1 DUP1 PUSH2 0xBBE JUMP JUMPDEST PUSH1 0x16 SSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x6C9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x6D3 PUSH1 0x0 PUSH2 0xBCA JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x40 MLOAD CALLER SWAP1 SELFBALANCE DUP1 ISZERO PUSH2 0x8FC MUL SWAP2 PUSH1 0x0 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x701 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SLOAD EQ ISZERO PUSH2 0x757 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6C0 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SSTORE PUSH2 0x764 PUSH2 0x447 JUMP JUMPDEST PUSH1 0x1 EQ PUSH2 0x7A0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xA PUSH1 0x24 DUP3 ADD MSTORE PUSH10 0x4E6F7420616374697665 PUSH1 0xB0 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6C0 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x11 SLOAD SWAP1 SWAP2 DUP4 SWAP2 DUP3 SWAP2 SWAP1 PUSH2 0x3E8 SWAP1 DUP4 LT ISZERO PUSH2 0x7FF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x10 PUSH1 0x24 DUP3 ADD MSTORE PUSH16 0x4E6F7420656E6F7567682076616C7565 PUSH1 0x80 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6C0 JUMP JUMPDEST PUSH1 0x12 SLOAD DUP4 GT ISZERO PUSH2 0x842 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xE PUSH1 0x24 DUP3 ADD MSTORE PUSH14 0x4F766572666C6F772076616C7565 PUSH1 0x90 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6C0 JUMP JUMPDEST PUSH2 0x84A PUSH2 0xAC6 JUMP JUMPDEST PUSH2 0x886 JUMPI PUSH2 0x877 DUP2 PUSH2 0x871 DUP6 PUSH2 0x86B PUSH1 0x18 SLOAD DUP7 PUSH2 0xC1C SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 PUSH2 0xBBE JUMP JUMPDEST SWAP1 PUSH2 0xC28 JUMP JUMPDEST SWAP3 POP PUSH2 0x883 DUP4 DUP6 PUSH2 0x1083 JUMP JUMPDEST SWAP2 POP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0x12 SLOAD PUSH1 0x0 SWAP2 PUSH2 0x898 SWAP2 PUSH2 0x1083 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 GT PUSH2 0x8DC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xF PUSH1 0x24 DUP3 ADD MSTORE PUSH15 0x53616C652069732053756363657373 PUSH1 0x88 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6C0 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x983 PUSH1 0xB PUSH1 0x2 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x313CE567 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x932 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x946 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x96A SWAP2 SWAP1 PUSH2 0xEF0 JUMP JUMPDEST PUSH2 0x975 SWAP1 PUSH1 0xA PUSH2 0xFBC JUMP JUMPDEST PUSH1 0xE SLOAD PUSH2 0x871 SWAP1 DUP9 SWAP1 PUSH2 0xBBE JUMP JUMPDEST SWAP1 POP DUP6 DUP8 PUSH1 0x0 ADD PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x999 SWAP2 SWAP1 PUSH2 0xF41 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP1 DUP8 PUSH1 0x1 ADD PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x9B4 SWAP2 SWAP1 PUSH2 0xF41 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x4 DUP1 SLOAD DUP7 SWAP2 SWAP1 PUSH1 0x0 SWAP1 PUSH2 0x9CE SWAP1 DUP5 SWAP1 PUSH2 0xF41 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x5 DUP1 SLOAD DUP3 SWAP2 SWAP1 PUSH1 0x0 SWAP1 PUSH2 0x9E8 SWAP1 DUP5 SWAP1 PUSH2 0xF41 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD DUP7 SWAP3 SWAP1 PUSH2 0xA0C SWAP1 DUP5 SWAP1 PUSH2 0xF41 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP4 PUSH1 0x1B PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0xA25 SWAP2 SWAP1 PUSH2 0xF41 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x15 SLOAD PUSH1 0xFF AND DUP1 ISZERO PUSH2 0xA44 JUMPI POP CALLVALUE PUSH2 0xA42 DUP6 DUP8 PUSH2 0xF41 JUMP JUMPDEST LT JUMPDEST ISZERO PUSH2 0xA8C JUMPI CALLER PUSH2 0x8FC DUP6 PUSH2 0xA58 DUP9 CALLVALUE PUSH2 0x1083 JUMP JUMPDEST PUSH2 0xA62 SWAP2 SWAP1 PUSH2 0x1083 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 ISZERO SWAP1 SWAP3 MUL SWAP2 PUSH1 0x0 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0xA8A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP JUMPDEST PUSH1 0x15 SLOAD PUSH1 0xFF AND PUSH2 0xAB7 JUMPI PUSH1 0xD SLOAD PUSH2 0xAB7 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER ADDRESS PUSH2 0xAB2 DUP9 DUP11 PUSH2 0xF41 JUMP JUMPDEST PUSH2 0xC34 JUMP JUMPDEST POP POP PUSH1 0x1 PUSH1 0x0 SSTORE POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xAD3 PUSH1 0x19 CALLER PUSH2 0xD64 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xB32 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6C0 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0xB97 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6C0 JUMP JUMPDEST PUSH2 0x701 DUP2 PUSH2 0xBCA JUMP JUMPDEST PUSH1 0x0 PUSH2 0xBB5 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0xD86 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xBB5 DUP3 DUP5 PUSH2 0x1064 JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xBB5 DUP3 DUP5 PUSH2 0x1083 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xBB5 DUP3 DUP5 PUSH2 0xF59 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND PUSH1 0x24 DUP4 ADD MSTORE DUP5 DUP2 AND PUSH1 0x44 DUP4 ADD MSTORE PUSH1 0x64 DUP1 DUP4 ADD DUP6 SWAP1 MSTORE DUP4 MLOAD DUP1 DUP5 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x84 SWAP1 SWAP3 ADD DUP4 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH4 0x23B872DD PUSH1 0xE0 SHL OR SWAP1 MSTORE SWAP2 MLOAD PUSH1 0x0 SWAP3 DUP4 SWAP3 SWAP1 DUP9 AND SWAP2 PUSH2 0xC98 SWAP2 SWAP1 PUSH2 0xF08 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0xCD5 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xCDA JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0xD04 JUMPI POP DUP1 MLOAD ISZERO DUP1 PUSH2 0xD04 JUMPI POP DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0xD04 SWAP2 SWAP1 PUSH2 0xEB8 JUMP JUMPDEST PUSH2 0xD5C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x5472616E7366657248656C7065723A205452414E534645525F46524F4D5F4641 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x12531151 PUSH1 0xE2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6C0 JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 DUP4 ADD PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD ISZERO ISZERO PUSH2 0xBB5 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 DUP4 ADD PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH2 0xDCD JUMPI POP DUP2 SLOAD PUSH1 0x1 DUP2 DUP2 ADD DUP5 SSTORE PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 KECCAK256 SWAP1 SWAP4 ADD DUP5 SWAP1 SSTORE DUP5 SLOAD DUP5 DUP3 MSTORE DUP3 DUP7 ADD SWAP1 SWAP4 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP2 SWAP1 SWAP2 SSTORE PUSH2 0xBB8 JUMP JUMPDEST POP PUSH1 0x0 PUSH2 0xBB8 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xDE6 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0xDF1 DUP2 PUSH2 0x10C6 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH2 0x140 DUP1 DUP7 DUP9 SUB SLT ISZERO PUSH2 0xE0F JUMPI DUP4 DUP5 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH2 0xE1A DUP2 PUSH2 0x10C6 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 DUP2 ADD CALLDATALOAD PUSH2 0xE2B DUP2 PUSH2 0x10C6 JUMP JUMPDEST SWAP5 POP PUSH1 0x40 DUP8 ADD CALLDATALOAD PUSH2 0xE3B DUP2 PUSH2 0x10C6 JUMP JUMPDEST SWAP4 POP PUSH1 0x7F DUP8 ADD DUP9 SGT PUSH2 0xE4B JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0xE0 DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0xE6E JUMPI PUSH2 0xE6E PUSH2 0x10B0 JUMP JUMPDEST PUSH1 0x40 MSTORE DUP1 PUSH1 0x60 DUP10 ADD DUP5 DUP11 ADD DUP12 LT ISZERO PUSH2 0xE84 JUMPI DUP6 DUP7 REVERT JUMPDEST DUP6 SWAP5 POP JUMPDEST PUSH1 0x7 DUP6 LT ISZERO PUSH2 0xEA7 JUMPI DUP1 CALLDATALOAD DUP3 MSTORE PUSH1 0x1 SWAP5 SWAP1 SWAP5 ADD SWAP4 SWAP1 DUP4 ADD SWAP1 DUP4 ADD PUSH2 0xE88 JUMP JUMPDEST POP POP DUP1 SWAP4 POP POP POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xEC9 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0xDF1 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xEE9 JUMPI DUP1 DUP2 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xF01 JUMPI DUP1 DUP2 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD DUP2 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xF28 JUMPI PUSH1 0x20 DUP2 DUP7 ADD DUP2 ADD MLOAD DUP6 DUP4 ADD MSTORE ADD PUSH2 0xF0E JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0xF36 JUMPI DUP3 DUP3 DUP6 ADD MSTORE JUMPDEST POP SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0xF54 JUMPI PUSH2 0xF54 PUSH2 0x109A JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0xF74 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 DUP2 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 JUMPDEST DUP1 DUP6 GT ISZERO PUSH2 0xFB4 JUMPI DUP2 PUSH1 0x0 NOT DIV DUP3 GT ISZERO PUSH2 0xF9A JUMPI PUSH2 0xF9A PUSH2 0x109A JUMP JUMPDEST DUP1 DUP6 AND ISZERO PUSH2 0xFA7 JUMPI SWAP2 DUP2 MUL SWAP2 JUMPDEST SWAP4 DUP5 SHR SWAP4 SWAP1 DUP1 MUL SWAP1 PUSH2 0xF7E JUMP JUMPDEST POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xBB5 DUP4 DUP4 PUSH1 0x0 DUP3 PUSH2 0xFD2 JUMPI POP PUSH1 0x1 PUSH2 0xBB8 JUMP JUMPDEST DUP2 PUSH2 0xFDF JUMPI POP PUSH1 0x0 PUSH2 0xBB8 JUMP JUMPDEST DUP2 PUSH1 0x1 DUP2 EQ PUSH2 0xFF5 JUMPI PUSH1 0x2 DUP2 EQ PUSH2 0xFFF JUMPI PUSH2 0x101B JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP PUSH2 0xBB8 JUMP JUMPDEST PUSH1 0xFF DUP5 GT ISZERO PUSH2 0x1010 JUMPI PUSH2 0x1010 PUSH2 0x109A JUMP JUMPDEST POP POP PUSH1 0x1 DUP3 SHL PUSH2 0xBB8 JUMP JUMPDEST POP PUSH1 0x20 DUP4 LT PUSH2 0x133 DUP4 LT AND PUSH1 0x4E DUP5 LT PUSH1 0xB DUP5 LT AND OR ISZERO PUSH2 0x103E JUMPI POP DUP2 DUP2 EXP PUSH2 0xBB8 JUMP JUMPDEST PUSH2 0x1048 DUP4 DUP4 PUSH2 0xF79 JUMP JUMPDEST DUP1 PUSH1 0x0 NOT DIV DUP3 GT ISZERO PUSH2 0x105C JUMPI PUSH2 0x105C PUSH2 0x109A JUMP JUMPDEST MUL SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x107E JUMPI PUSH2 0x107E PUSH2 0x109A JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0x1095 JUMPI PUSH2 0x1095 PUSH2 0x109A JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x701 JUMPI PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xBE 0x2D 0xE8 0xEA CALLVALUE 0xAE 0xC4 RETURNDATASIZE 0xE1 0x28 0xDF SELFBALANCE MULMOD MSTORE 0xD 0xAE CALLVALUE POP 0x27 PUSH32 0x762B890ED197638BD2EB236C64736F6C63430008040033000000000000000000 ",
							"sourceMap": "338:5425:3:-:0;;;1734:1:7;1845:7;:22;942:32:6;736:10:4;942:18:6;:32::i;:::-;1933:4:3;:56;;1946:42;-1:-1:-1;;;;;;1933:56:3;;;;;;2000:54;:6;2011:42;2000:10;;;;;;;:54;;:::i;:::-;;2065;2076:42;2065:6;:10;;;;;;:54;;;;:::i;:::-;-1:-1:-1;2142:2:3;2130:9;:14;338:5425;;2333:191:6;2426:6;;;-1:-1:-1;;;;;2443:17:6;;;-1:-1:-1;;;;;;2443:17:6;;;;;;;2476:40;;2426:6;;;2443:17;2426:6;;2476:40;;2407:16;;2476:40;2333:191;;:::o;8259:152:5:-;8329:4;8353:50;8358:3;-1:-1:-1;;;;;8378:23:5;;8353:4;:50::i;:::-;8346:57;;8259:152;;;;;:::o;2174:414::-;2237:4;4367:19;;;:12;;;:19;;;;;;2254:327;;-1:-1:-1;2297:23:5;;;;;;;;:11;:23;;;;;;;;;;;;;2480:18;;2458:19;;;:12;;;:19;;;;;;:40;;;;2513:11;;2254:327;-1:-1:-1;2564:5:5;2557:12;;338:5425:3;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:11418:10",
										"statements": [
											{
												"nodeType": "YulBlock",
												"src": "6:3:10",
												"statements": []
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "84:187:10",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "130:26:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "139:6:10"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "147:6:10"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "132:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "132:22:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "132:22:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "105:7:10"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "114:9:10"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "101:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "101:23:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "126:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "97:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "97:32:10"
															},
															"nodeType": "YulIf",
															"src": "94:2:10"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "165:36:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "191:9:10"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "178:12:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "178:23:10"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "169:5:10",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "235:5:10"
																	}
																],
																"functionName": {
																	"name": "validator_revert_address",
																	"nodeType": "YulIdentifier",
																	"src": "210:24:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "210:31:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "210:31:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "250:15:10",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "260:5:10"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "250:6:10"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "50:9:10",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "61:7:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "73:6:10",
														"type": ""
													}
												],
												"src": "14:257:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "454:1118:10",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "464:13:10",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "474:3:10",
																"type": "",
																"value": "320"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "468:2:10",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "522:26:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value1",
																					"nodeType": "YulIdentifier",
																					"src": "531:6:10"
																				},
																				{
																					"name": "value1",
																					"nodeType": "YulIdentifier",
																					"src": "539:6:10"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "524:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "524:22:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "524:22:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "497:7:10"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "506:9:10"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "493:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "493:23:10"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "518:2:10"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "489:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "489:32:10"
															},
															"nodeType": "YulIf",
															"src": "486:2:10"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "557:36:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "583:9:10"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "570:12:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "570:23:10"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "561:5:10",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "627:5:10"
																	}
																],
																"functionName": {
																	"name": "validator_revert_address",
																	"nodeType": "YulIdentifier",
																	"src": "602:24:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "602:31:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "602:31:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "642:15:10",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "652:5:10"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "642:6:10"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "666:12:10",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "676:2:10",
																"type": "",
																"value": "32"
															},
															"variables": [
																{
																	"name": "_2",
																	"nodeType": "YulTypedName",
																	"src": "670:2:10",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "687:47:10",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "719:9:10"
																			},
																			{
																				"name": "_2",
																				"nodeType": "YulIdentifier",
																				"src": "730:2:10"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "715:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "715:18:10"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "702:12:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "702:32:10"
															},
															"variables": [
																{
																	"name": "value_1",
																	"nodeType": "YulTypedName",
																	"src": "691:7:10",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value_1",
																		"nodeType": "YulIdentifier",
																		"src": "768:7:10"
																	}
																],
																"functionName": {
																	"name": "validator_revert_address",
																	"nodeType": "YulIdentifier",
																	"src": "743:24:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "743:33:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "743:33:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "785:17:10",
															"value": {
																"name": "value_1",
																"nodeType": "YulIdentifier",
																"src": "795:7:10"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "785:6:10"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "811:47:10",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "843:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "854:2:10",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "839:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "839:18:10"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "826:12:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "826:32:10"
															},
															"variables": [
																{
																	"name": "value_2",
																	"nodeType": "YulTypedName",
																	"src": "815:7:10",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value_2",
																		"nodeType": "YulIdentifier",
																		"src": "892:7:10"
																	}
																],
																"functionName": {
																	"name": "validator_revert_address",
																	"nodeType": "YulIdentifier",
																	"src": "867:24:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "867:33:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "867:33:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "909:17:10",
															"value": {
																"name": "value_2",
																"nodeType": "YulIdentifier",
																"src": "919:7:10"
															},
															"variableNames": [
																{
																	"name": "value2",
																	"nodeType": "YulIdentifier",
																	"src": "909:6:10"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "980:26:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value3",
																					"nodeType": "YulIdentifier",
																					"src": "989:6:10"
																				},
																				{
																					"name": "value3",
																					"nodeType": "YulIdentifier",
																					"src": "997:6:10"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "982:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "982:22:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "982:22:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "953:9:10"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "964:3:10",
																						"type": "",
																						"value": "127"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "949:3:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "949:19:10"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "970:7:10"
																			}
																		],
																		"functionName": {
																			"name": "slt",
																			"nodeType": "YulIdentifier",
																			"src": "945:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "945:33:10"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "938:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "938:41:10"
															},
															"nodeType": "YulIf",
															"src": "935:2:10"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1015:23:10",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1035:2:10",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "1029:5:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1029:9:10"
															},
															"variables": [
																{
																	"name": "memPtr",
																	"nodeType": "YulTypedName",
																	"src": "1019:6:10",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1047:34:10",
															"value": {
																"arguments": [
																	{
																		"name": "memPtr",
																		"nodeType": "YulIdentifier",
																		"src": "1069:6:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1077:3:10",
																		"type": "",
																		"value": "224"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1065:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1065:16:10"
															},
															"variables": [
																{
																	"name": "newFreePtr",
																	"nodeType": "YulTypedName",
																	"src": "1051:10:10",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1156:22:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x41",
																				"nodeType": "YulIdentifier",
																				"src": "1158:16:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1158:18:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1158:18:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "newFreePtr",
																				"nodeType": "YulIdentifier",
																				"src": "1099:10:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1111:18:10",
																				"type": "",
																				"value": "0xffffffffffffffff"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "1096:2:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1096:34:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "newFreePtr",
																				"nodeType": "YulIdentifier",
																				"src": "1135:10:10"
																			},
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "1147:6:10"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nodeType": "YulIdentifier",
																			"src": "1132:2:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1132:22:10"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "1093:2:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1093:62:10"
															},
															"nodeType": "YulIf",
															"src": "1090:2:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1194:2:10",
																		"type": "",
																		"value": "64"
																	},
																	{
																		"name": "newFreePtr",
																		"nodeType": "YulIdentifier",
																		"src": "1198:10:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1187:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1187:22:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1187:22:10"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1218:17:10",
															"value": {
																"name": "memPtr",
																"nodeType": "YulIdentifier",
																"src": "1229:6:10"
															},
															"variables": [
																{
																	"name": "dst",
																	"nodeType": "YulTypedName",
																	"src": "1222:3:10",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1244:29:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1259:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1270:2:10",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1255:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1255:18:10"
															},
															"variables": [
																{
																	"name": "src",
																	"nodeType": "YulTypedName",
																	"src": "1248:3:10",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1317:26:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value3",
																					"nodeType": "YulIdentifier",
																					"src": "1326:6:10"
																				},
																				{
																					"name": "value3",
																					"nodeType": "YulIdentifier",
																					"src": "1334:6:10"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1319:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1319:22:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1319:22:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1292:9:10"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "1303:2:10"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1288:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1288:18:10"
																	},
																	{
																		"name": "dataEnd",
																		"nodeType": "YulIdentifier",
																		"src": "1308:7:10"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "1285:2:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1285:31:10"
															},
															"nodeType": "YulIf",
															"src": "1282:2:10"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1352:15:10",
															"value": {
																"name": "value3",
																"nodeType": "YulIdentifier",
																"src": "1361:6:10"
															},
															"variables": [
																{
																	"name": "i",
																	"nodeType": "YulTypedName",
																	"src": "1356:1:10",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1423:118:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "dst",
																					"nodeType": "YulIdentifier",
																					"src": "1444:3:10"
																				},
																				{
																					"arguments": [
																						{
																							"name": "src",
																							"nodeType": "YulIdentifier",
																							"src": "1462:3:10"
																						}
																					],
																					"functionName": {
																						"name": "calldataload",
																						"nodeType": "YulIdentifier",
																						"src": "1449:12:10"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "1449:17:10"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "1437:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1437:30:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1437:30:10"
																	},
																	{
																		"nodeType": "YulAssignment",
																		"src": "1480:19:10",
																		"value": {
																			"arguments": [
																				{
																					"name": "dst",
																					"nodeType": "YulIdentifier",
																					"src": "1491:3:10"
																				},
																				{
																					"name": "_2",
																					"nodeType": "YulIdentifier",
																					"src": "1496:2:10"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "1487:3:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1487:12:10"
																		},
																		"variableNames": [
																			{
																				"name": "dst",
																				"nodeType": "YulIdentifier",
																				"src": "1480:3:10"
																			}
																		]
																	},
																	{
																		"nodeType": "YulAssignment",
																		"src": "1512:19:10",
																		"value": {
																			"arguments": [
																				{
																					"name": "src",
																					"nodeType": "YulIdentifier",
																					"src": "1523:3:10"
																				},
																				{
																					"name": "_2",
																					"nodeType": "YulIdentifier",
																					"src": "1528:2:10"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "1519:3:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1519:12:10"
																		},
																		"variableNames": [
																			{
																				"name": "src",
																				"nodeType": "YulIdentifier",
																				"src": "1512:3:10"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "1387:1:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1390:4:10",
																		"type": "",
																		"value": "0x07"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "1384:2:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1384:11:10"
															},
															"nodeType": "YulForLoop",
															"post": {
																"nodeType": "YulBlock",
																"src": "1396:18:10",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "1398:14:10",
																		"value": {
																			"arguments": [
																				{
																					"name": "i",
																					"nodeType": "YulIdentifier",
																					"src": "1407:1:10"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1410:1:10",
																					"type": "",
																					"value": "1"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "1403:3:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1403:9:10"
																		},
																		"variableNames": [
																			{
																				"name": "i",
																				"nodeType": "YulIdentifier",
																				"src": "1398:1:10"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nodeType": "YulBlock",
																"src": "1380:3:10",
																"statements": []
															},
															"src": "1376:165:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1550:16:10",
															"value": {
																"name": "memPtr",
																"nodeType": "YulIdentifier",
																"src": "1560:6:10"
															},
															"variableNames": [
																{
																	"name": "value3",
																	"nodeType": "YulIdentifier",
																	"src": "1550:6:10"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address_payablet_contract$_ERC20_$585t_contract$_ERC20_$585t_array$_t_uint256_$7_memory_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "396:9:10",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "407:7:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "419:6:10",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "427:6:10",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "435:6:10",
														"type": ""
													},
													{
														"name": "value3",
														"nodeType": "YulTypedName",
														"src": "443:6:10",
														"type": ""
													}
												],
												"src": "276:1296:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1655:219:10",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1701:26:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "1710:6:10"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "1718:6:10"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1703:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1703:22:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1703:22:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1676:7:10"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1685:9:10"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1672:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1672:23:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1697:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1668:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1668:32:10"
															},
															"nodeType": "YulIf",
															"src": "1665:2:10"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1736:29:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1755:9:10"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "1749:5:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1749:16:10"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "1740:5:10",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1818:26:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "1827:6:10"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "1835:6:10"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1820:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1820:22:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1820:22:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "1787:5:10"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"name": "value",
																								"nodeType": "YulIdentifier",
																								"src": "1808:5:10"
																							}
																						],
																						"functionName": {
																							"name": "iszero",
																							"nodeType": "YulIdentifier",
																							"src": "1801:6:10"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "1801:13:10"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "1794:6:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1794:21:10"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "1784:2:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1784:32:10"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "1777:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1777:40:10"
															},
															"nodeType": "YulIf",
															"src": "1774:2:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1853:15:10",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "1863:5:10"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "1853:6:10"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_bool_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1621:9:10",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1632:7:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1644:6:10",
														"type": ""
													}
												],
												"src": "1577:297:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1949:120:10",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1995:26:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "2004:6:10"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "2012:6:10"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1997:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1997:22:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1997:22:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1970:7:10"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1979:9:10"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1966:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1966:23:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1991:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1962:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1962:32:10"
															},
															"nodeType": "YulIf",
															"src": "1959:2:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2030:33:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2053:9:10"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "2040:12:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2040:23:10"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "2030:6:10"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1915:9:10",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1926:7:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1938:6:10",
														"type": ""
													}
												],
												"src": "1879:190:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2155:113:10",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2201:26:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "2210:6:10"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "2218:6:10"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2203:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2203:22:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2203:22:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2176:7:10"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2185:9:10"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "2172:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2172:23:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2197:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "2168:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2168:32:10"
															},
															"nodeType": "YulIf",
															"src": "2165:2:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2236:26:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2252:9:10"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "2246:5:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2246:16:10"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "2236:6:10"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2121:9:10",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "2132:7:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2144:6:10",
														"type": ""
													}
												],
												"src": "2074:194:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2410:293:10",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "2420:27:10",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "2440:6:10"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "2434:5:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2434:13:10"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "2424:6:10",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "2456:12:10",
															"value": {
																"name": "end",
																"nodeType": "YulIdentifier",
																"src": "2465:3:10"
															},
															"variables": [
																{
																	"name": "i",
																	"nodeType": "YulTypedName",
																	"src": "2460:1:10",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2529:77:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "pos",
																							"nodeType": "YulIdentifier",
																							"src": "2554:3:10"
																						},
																						{
																							"name": "i",
																							"nodeType": "YulIdentifier",
																							"src": "2559:1:10"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "2550:3:10"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "2550:11:10"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"arguments": [
																										{
																											"name": "value0",
																											"nodeType": "YulIdentifier",
																											"src": "2577:6:10"
																										},
																										{
																											"name": "i",
																											"nodeType": "YulIdentifier",
																											"src": "2585:1:10"
																										}
																									],
																									"functionName": {
																										"name": "add",
																										"nodeType": "YulIdentifier",
																										"src": "2573:3:10"
																									},
																									"nodeType": "YulFunctionCall",
																									"src": "2573:14:10"
																								},
																								{
																									"kind": "number",
																									"nodeType": "YulLiteral",
																									"src": "2589:4:10",
																									"type": "",
																									"value": "0x20"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "2569:3:10"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "2569:25:10"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nodeType": "YulIdentifier",
																						"src": "2563:5:10"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "2563:32:10"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "2543:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2543:53:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2543:53:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "2488:1:10"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "2491:6:10"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "2485:2:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2485:13:10"
															},
															"nodeType": "YulForLoop",
															"post": {
																"nodeType": "YulBlock",
																"src": "2499:21:10",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "2501:17:10",
																		"value": {
																			"arguments": [
																				{
																					"name": "i",
																					"nodeType": "YulIdentifier",
																					"src": "2510:1:10"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2513:4:10",
																					"type": "",
																					"value": "0x20"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "2506:3:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2506:12:10"
																		},
																		"variableNames": [
																			{
																				"name": "i",
																				"nodeType": "YulIdentifier",
																				"src": "2501:1:10"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nodeType": "YulBlock",
																"src": "2481:3:10",
																"statements": []
															},
															"src": "2477:129:10"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2632:33:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "pos",
																							"nodeType": "YulIdentifier",
																							"src": "2645:3:10"
																						},
																						{
																							"name": "length",
																							"nodeType": "YulIdentifier",
																							"src": "2650:6:10"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "2641:3:10"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "2641:16:10"
																				},
																				{
																					"name": "end",
																					"nodeType": "YulIdentifier",
																					"src": "2659:3:10"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "2634:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2634:29:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2634:29:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "2621:1:10"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "2624:6:10"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "2618:2:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2618:13:10"
															},
															"nodeType": "YulIf",
															"src": "2615:2:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2674:23:10",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "2685:3:10"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "2690:6:10"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2681:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2681:16:10"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "2674:3:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "2386:3:10",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2391:6:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "2402:3:10",
														"type": ""
													}
												],
												"src": "2273:430:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2809:102:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2819:26:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2831:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2842:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2827:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2827:18:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "2819:4:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2861:9:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "2876:6:10"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "2892:3:10",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "2897:1:10",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nodeType": "YulIdentifier",
																							"src": "2888:3:10"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "2888:11:10"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "2901:1:10",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nodeType": "YulIdentifier",
																					"src": "2884:3:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2884:19:10"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "2872:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2872:32:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2854:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2854:51:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2854:51:10"
														}
													]
												},
												"name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2778:9:10",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2789:6:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "2800:4:10",
														"type": ""
													}
												],
												"src": "2708:203:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3363:641:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3373:27:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3385:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3396:3:10",
																		"type": "",
																		"value": "384"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3381:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3381:19:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "3373:4:10"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "3409:29:10",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3427:3:10",
																				"type": "",
																				"value": "160"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3432:1:10",
																				"type": "",
																				"value": "1"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "3423:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3423:11:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3436:1:10",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "3419:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3419:19:10"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "3413:2:10",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3454:9:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "3469:6:10"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "3477:2:10"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "3465:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3465:15:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3447:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3447:34:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3447:34:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3501:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3512:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3497:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3497:18:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value1",
																				"nodeType": "YulIdentifier",
																				"src": "3521:6:10"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "3529:2:10"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "3517:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3517:15:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3490:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3490:43:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3490:43:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3553:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3564:2:10",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3549:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3549:18:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value2",
																				"nodeType": "YulIdentifier",
																				"src": "3573:6:10"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "3581:2:10"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "3569:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3569:15:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3542:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3542:43:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3542:43:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3605:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3616:2:10",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3601:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3601:18:10"
																	},
																	{
																		"name": "value3",
																		"nodeType": "YulIdentifier",
																		"src": "3621:6:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3594:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3594:34:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3594:34:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3648:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3659:3:10",
																				"type": "",
																				"value": "128"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3644:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3644:19:10"
																	},
																	{
																		"name": "value4",
																		"nodeType": "YulIdentifier",
																		"src": "3665:6:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3637:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3637:35:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3637:35:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3692:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3703:3:10",
																				"type": "",
																				"value": "160"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3688:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3688:19:10"
																	},
																	{
																		"name": "value5",
																		"nodeType": "YulIdentifier",
																		"src": "3709:6:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3681:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3681:35:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3681:35:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3736:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3747:3:10",
																				"type": "",
																				"value": "192"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3732:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3732:19:10"
																	},
																	{
																		"name": "value6",
																		"nodeType": "YulIdentifier",
																		"src": "3753:6:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3725:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3725:35:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3725:35:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3780:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3791:3:10",
																				"type": "",
																				"value": "224"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3776:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3776:19:10"
																	},
																	{
																		"name": "value7",
																		"nodeType": "YulIdentifier",
																		"src": "3797:6:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3769:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3769:35:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3769:35:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3824:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3835:3:10",
																				"type": "",
																				"value": "256"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3820:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3820:19:10"
																	},
																	{
																		"name": "value8",
																		"nodeType": "YulIdentifier",
																		"src": "3841:6:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3813:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3813:35:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3813:35:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3868:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3879:3:10",
																				"type": "",
																				"value": "288"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3864:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3864:19:10"
																	},
																	{
																		"name": "value9",
																		"nodeType": "YulIdentifier",
																		"src": "3885:6:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3857:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3857:35:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3857:35:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3912:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3923:3:10",
																				"type": "",
																				"value": "320"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3908:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3908:19:10"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value10",
																						"nodeType": "YulIdentifier",
																						"src": "3943:7:10"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "3936:6:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3936:15:10"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "3929:6:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3929:23:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3901:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3901:52:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3901:52:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3973:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3984:3:10",
																				"type": "",
																				"value": "352"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3969:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3969:19:10"
																	},
																	{
																		"name": "value11",
																		"nodeType": "YulIdentifier",
																		"src": "3990:7:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3962:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3962:36:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3962:36:10"
														}
													]
												},
												"name": "abi_encode_tuple_t_address_payable_t_contract$_ERC20_$585_t_contract$_ERC20_$585_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256_t_bool_t_uint256__to_t_address_payable_t_address_t_address_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256_t_bool_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3242:9:10",
														"type": ""
													},
													{
														"name": "value11",
														"nodeType": "YulTypedName",
														"src": "3253:7:10",
														"type": ""
													},
													{
														"name": "value10",
														"nodeType": "YulTypedName",
														"src": "3262:7:10",
														"type": ""
													},
													{
														"name": "value9",
														"nodeType": "YulTypedName",
														"src": "3271:6:10",
														"type": ""
													},
													{
														"name": "value8",
														"nodeType": "YulTypedName",
														"src": "3279:6:10",
														"type": ""
													},
													{
														"name": "value7",
														"nodeType": "YulTypedName",
														"src": "3287:6:10",
														"type": ""
													},
													{
														"name": "value6",
														"nodeType": "YulTypedName",
														"src": "3295:6:10",
														"type": ""
													},
													{
														"name": "value5",
														"nodeType": "YulTypedName",
														"src": "3303:6:10",
														"type": ""
													},
													{
														"name": "value4",
														"nodeType": "YulTypedName",
														"src": "3311:6:10",
														"type": ""
													},
													{
														"name": "value3",
														"nodeType": "YulTypedName",
														"src": "3319:6:10",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "3327:6:10",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "3335:6:10",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "3343:6:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "3354:4:10",
														"type": ""
													}
												],
												"src": "2916:1088:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4166:218:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "4176:26:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4188:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4199:2:10",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4184:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4184:18:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "4176:4:10"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "4211:29:10",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4229:3:10",
																				"type": "",
																				"value": "160"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4234:1:10",
																				"type": "",
																				"value": "1"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "4225:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4225:11:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4238:1:10",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "4221:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4221:19:10"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "4215:2:10",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4256:9:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "4271:6:10"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "4279:2:10"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "4267:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4267:15:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4249:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4249:34:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4249:34:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4303:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4314:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4299:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4299:18:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value1",
																				"nodeType": "YulIdentifier",
																				"src": "4323:6:10"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "4331:2:10"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "4319:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4319:15:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4292:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4292:43:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4292:43:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4355:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4366:2:10",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4351:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4351:18:10"
																	},
																	{
																		"name": "value2",
																		"nodeType": "YulIdentifier",
																		"src": "4371:6:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4344:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4344:34:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4344:34:10"
														}
													]
												},
												"name": "abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4119:9:10",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "4130:6:10",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "4138:6:10",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "4146:6:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "4157:4:10",
														"type": ""
													}
												],
												"src": "4009:375:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4484:92:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "4494:26:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4506:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4517:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4502:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4502:18:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "4494:4:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4536:9:10"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value0",
																						"nodeType": "YulIdentifier",
																						"src": "4561:6:10"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "4554:6:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4554:14:10"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "4547:6:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4547:22:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4529:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4529:41:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4529:41:10"
														}
													]
												},
												"name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4453:9:10",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "4464:6:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "4475:4:10",
														"type": ""
													}
												],
												"src": "4389:187:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4696:102:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "4706:26:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4718:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4729:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4714:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4714:18:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "4706:4:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4748:9:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "4763:6:10"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "4779:3:10",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "4784:1:10",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nodeType": "YulIdentifier",
																							"src": "4775:3:10"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "4775:11:10"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "4788:1:10",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nodeType": "YulIdentifier",
																					"src": "4771:3:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4771:19:10"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "4759:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4759:32:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4741:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4741:51:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4741:51:10"
														}
													]
												},
												"name": "abi_encode_tuple_t_contract$_IERC20_$663__to_t_address__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4665:9:10",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "4676:6:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "4687:4:10",
														"type": ""
													}
												],
												"src": "4581:217:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4977:228:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4994:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5005:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4987:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4987:21:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4987:21:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5028:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5039:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5024:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5024:18:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5044:2:10",
																		"type": "",
																		"value": "38"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5017:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "5017:30:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5017:30:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5067:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5078:2:10",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5063:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5063:18:10"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "5083:34:10",
																		"type": "",
																		"value": "Ownable: new owner is the zero a"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5056:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "5056:62:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5056:62:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5138:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5149:2:10",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5134:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5134:18:10"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "5154:8:10",
																		"type": "",
																		"value": "ddress"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5127:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "5127:36:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5127:36:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "5172:27:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5184:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5195:3:10",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5180:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "5180:19:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "5172:4:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4954:9:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "4968:4:10",
														"type": ""
													}
												],
												"src": "4803:402:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5384:164:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5401:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5412:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5394:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "5394:21:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5394:21:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5435:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5446:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5431:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5431:18:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5451:2:10",
																		"type": "",
																		"value": "14"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5424:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "5424:30:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5424:30:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5474:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5485:2:10",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5470:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5470:18:10"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "5490:16:10",
																		"type": "",
																		"value": "Overflow value"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5463:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "5463:44:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5463:44:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "5516:26:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5528:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5539:2:10",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5524:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "5524:18:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "5516:4:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_48cc793e3ea877d6bf034b11f4c6d0d583dd24a0f1374daf495701b65f42f81c__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5361:9:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "5375:4:10",
														"type": ""
													}
												],
												"src": "5210:338:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5727:160:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5744:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5755:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5737:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "5737:21:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5737:21:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5778:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5789:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5774:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5774:18:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5794:2:10",
																		"type": "",
																		"value": "10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5767:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "5767:30:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5767:30:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5817:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5828:2:10",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5813:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5813:18:10"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "5833:12:10",
																		"type": "",
																		"value": "Not active"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5806:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "5806:40:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5806:40:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "5855:26:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5867:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5878:2:10",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5863:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "5863:18:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "5855:4:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_4f4071cacb98a73fb0fb3325a9a9a07b87a20a90340fd79a56fa9441c16f3367__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5704:9:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "5718:4:10",
														"type": ""
													}
												],
												"src": "5553:334:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6066:166:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6083:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6094:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6076:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "6076:21:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6076:21:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6117:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6128:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6113:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6113:18:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6133:2:10",
																		"type": "",
																		"value": "16"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6106:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "6106:30:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6106:30:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6156:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6167:2:10",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6152:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6152:18:10"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "6172:18:10",
																		"type": "",
																		"value": "Not enough value"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6145:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "6145:46:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6145:46:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "6200:26:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6212:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6223:2:10",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "6208:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "6208:18:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "6200:4:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_8254a19c2218e87bd65e7d451e5bbd6df57ba9f73035118b8f47be7b5659ddde__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "6043:9:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "6057:4:10",
														"type": ""
													}
												],
												"src": "5892:340:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6411:165:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6428:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6439:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6421:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "6421:21:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6421:21:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6462:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6473:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6458:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6458:18:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6478:2:10",
																		"type": "",
																		"value": "15"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6451:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "6451:30:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6451:30:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6501:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6512:2:10",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6497:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6497:18:10"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "6517:17:10",
																		"type": "",
																		"value": "Sale is Success"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6490:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "6490:45:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6490:45:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "6544:26:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6556:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6567:2:10",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "6552:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "6552:18:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "6544:4:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_84b07dbc51081d888dba4f335791aa8e296b316efa01a63a80a60cc8dbf32b14__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "6388:9:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "6402:4:10",
														"type": ""
													}
												],
												"src": "6237:339:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6755:182:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6772:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6783:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6765:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "6765:21:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6765:21:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6806:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6817:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6802:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6802:18:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6822:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6795:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "6795:30:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6795:30:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6845:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6856:2:10",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6841:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6841:18:10"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "6861:34:10",
																		"type": "",
																		"value": "Ownable: caller is not the owner"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6834:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "6834:62:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6834:62:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "6905:26:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6917:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6928:2:10",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "6913:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "6913:18:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "6905:4:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "6732:9:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "6746:4:10",
														"type": ""
													}
												],
												"src": "6581:356:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7116:226:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7133:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7144:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7126:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "7126:21:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7126:21:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7167:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7178:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7163:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7163:18:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7183:2:10",
																		"type": "",
																		"value": "36"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7156:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "7156:30:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7156:30:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7206:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7217:2:10",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7202:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7202:18:10"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "7222:34:10",
																		"type": "",
																		"value": "TransferHelper: TRANSFER_FROM_FA"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7195:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "7195:62:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7195:62:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7277:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7288:2:10",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7273:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7273:18:10"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "7293:6:10",
																		"type": "",
																		"value": "ILED"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7266:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "7266:34:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7266:34:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "7309:27:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7321:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7332:3:10",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "7317:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "7317:19:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "7309:4:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_eb2904bf3c0c9ae693b53eb0188a703c388998a9c405b7965ca678cef9a51d18__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "7093:9:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "7107:4:10",
														"type": ""
													}
												],
												"src": "6942:400:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7521:181:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7538:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7549:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7531:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "7531:21:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7531:21:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7572:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7583:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7568:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7568:18:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7588:2:10",
																		"type": "",
																		"value": "31"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7561:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "7561:30:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7561:30:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7611:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7622:2:10",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7607:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7607:18:10"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "7627:33:10",
																		"type": "",
																		"value": "ReentrancyGuard: reentrant call"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7600:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "7600:61:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7600:61:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "7670:26:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7682:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7693:2:10",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "7678:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "7678:18:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "7670:4:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "7498:9:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "7512:4:10",
														"type": ""
													}
												],
												"src": "7347:355:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7808:76:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "7818:26:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7830:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7841:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "7826:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "7826:18:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "7818:4:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7860:9:10"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "7871:6:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7853:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "7853:25:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7853:25:10"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "7777:9:10",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "7788:6:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "7799:4:10",
														"type": ""
													}
												],
												"src": "7707:177:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8118:326:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "8128:27:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "8140:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8151:3:10",
																		"type": "",
																		"value": "192"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "8136:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "8136:19:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "8128:4:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "8171:9:10"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "8182:6:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8164:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "8164:25:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8164:25:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8209:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8220:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8205:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8205:18:10"
																	},
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "8225:6:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8198:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "8198:34:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8198:34:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8252:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8263:2:10",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8248:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8248:18:10"
																	},
																	{
																		"name": "value2",
																		"nodeType": "YulIdentifier",
																		"src": "8268:6:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8241:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "8241:34:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8241:34:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8295:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8306:2:10",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8291:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8291:18:10"
																	},
																	{
																		"name": "value3",
																		"nodeType": "YulIdentifier",
																		"src": "8311:6:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8284:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "8284:34:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8284:34:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8338:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8349:3:10",
																				"type": "",
																				"value": "128"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8334:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8334:19:10"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value4",
																						"nodeType": "YulIdentifier",
																						"src": "8369:6:10"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "8362:6:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "8362:14:10"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "8355:6:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8355:22:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8327:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "8327:51:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8327:51:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8398:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8409:3:10",
																				"type": "",
																				"value": "160"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8394:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8394:19:10"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value5",
																						"nodeType": "YulIdentifier",
																						"src": "8429:6:10"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "8422:6:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "8422:14:10"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "8415:6:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8415:22:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8387:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "8387:51:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8387:51:10"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256_t_uint256_t_uint256_t_uint256_t_bool_t_bool__to_t_uint256_t_uint256_t_uint256_t_uint256_t_bool_t_bool__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "8047:9:10",
														"type": ""
													},
													{
														"name": "value5",
														"nodeType": "YulTypedName",
														"src": "8058:6:10",
														"type": ""
													},
													{
														"name": "value4",
														"nodeType": "YulTypedName",
														"src": "8066:6:10",
														"type": ""
													},
													{
														"name": "value3",
														"nodeType": "YulTypedName",
														"src": "8074:6:10",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "8082:6:10",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "8090:6:10",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "8098:6:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "8109:4:10",
														"type": ""
													}
												],
												"src": "7889:555:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8690:294:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "8700:27:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "8712:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8723:3:10",
																		"type": "",
																		"value": "192"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "8708:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "8708:19:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "8700:4:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "8743:9:10"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "8754:6:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8736:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "8736:25:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8736:25:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8781:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8792:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8777:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8777:18:10"
																	},
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "8797:6:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8770:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "8770:34:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8770:34:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8824:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8835:2:10",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8820:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8820:18:10"
																	},
																	{
																		"name": "value2",
																		"nodeType": "YulIdentifier",
																		"src": "8840:6:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8813:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "8813:34:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8813:34:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8867:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8878:2:10",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8863:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8863:18:10"
																	},
																	{
																		"name": "value3",
																		"nodeType": "YulIdentifier",
																		"src": "8883:6:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8856:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "8856:34:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8856:34:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8910:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8921:3:10",
																				"type": "",
																				"value": "128"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8906:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8906:19:10"
																	},
																	{
																		"name": "value4",
																		"nodeType": "YulIdentifier",
																		"src": "8927:6:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8899:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "8899:35:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8899:35:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8954:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8965:3:10",
																				"type": "",
																				"value": "160"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8950:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8950:19:10"
																	},
																	{
																		"name": "value5",
																		"nodeType": "YulIdentifier",
																		"src": "8971:6:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8943:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "8943:35:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8943:35:10"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "8619:9:10",
														"type": ""
													},
													{
														"name": "value5",
														"nodeType": "YulTypedName",
														"src": "8630:6:10",
														"type": ""
													},
													{
														"name": "value4",
														"nodeType": "YulTypedName",
														"src": "8638:6:10",
														"type": ""
													},
													{
														"name": "value3",
														"nodeType": "YulTypedName",
														"src": "8646:6:10",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "8654:6:10",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "8662:6:10",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "8670:6:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "8681:4:10",
														"type": ""
													}
												],
												"src": "8449:535:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9037:80:10",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "9064:22:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "9066:16:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "9066:18:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "9066:18:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "9053:1:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "y",
																				"nodeType": "YulIdentifier",
																				"src": "9060:1:10"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nodeType": "YulIdentifier",
																			"src": "9056:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9056:6:10"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "9050:2:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "9050:13:10"
															},
															"nodeType": "YulIf",
															"src": "9047:2:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "9095:16:10",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "9106:1:10"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "9109:1:10"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "9102:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "9102:9:10"
															},
															"variableNames": [
																{
																	"name": "sum",
																	"nodeType": "YulIdentifier",
																	"src": "9095:3:10"
																}
															]
														}
													]
												},
												"name": "checked_add_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "9020:1:10",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "9023:1:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "sum",
														"nodeType": "YulTypedName",
														"src": "9029:3:10",
														"type": ""
													}
												],
												"src": "8989:128:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9168:171:10",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "9199:111:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "r",
																					"nodeType": "YulIdentifier",
																					"src": "9220:1:10"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "9227:3:10",
																							"type": "",
																							"value": "224"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "9232:10:10",
																							"type": "",
																							"value": "0x4e487b71"
																						}
																					],
																					"functionName": {
																						"name": "shl",
																						"nodeType": "YulIdentifier",
																						"src": "9223:3:10"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "9223:20:10"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "9213:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "9213:31:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "9213:31:10"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "9264:1:10",
																					"type": "",
																					"value": "4"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "9267:4:10",
																					"type": "",
																					"value": "0x12"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "9257:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "9257:15:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "9257:15:10"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "r",
																					"nodeType": "YulIdentifier",
																					"src": "9292:1:10"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "9295:4:10",
																					"type": "",
																					"value": "0x24"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "9285:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "9285:15:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "9285:15:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "9188:1:10"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "9181:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "9181:9:10"
															},
															"nodeType": "YulIf",
															"src": "9178:2:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "9319:14:10",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "9328:1:10"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "9331:1:10"
																	}
																],
																"functionName": {
																	"name": "div",
																	"nodeType": "YulIdentifier",
																	"src": "9324:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "9324:9:10"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "9319:1:10"
																}
															]
														}
													]
												},
												"name": "checked_div_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "9153:1:10",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "9156:1:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "r",
														"nodeType": "YulTypedName",
														"src": "9162:1:10",
														"type": ""
													}
												],
												"src": "9122:217:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9408:358:10",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "9418:16:10",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "9433:1:10",
																"type": "",
																"value": "1"
															},
															"variables": [
																{
																	"name": "power_1",
																	"nodeType": "YulTypedName",
																	"src": "9422:7:10",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "9443:16:10",
															"value": {
																"name": "power_1",
																"nodeType": "YulIdentifier",
																"src": "9452:7:10"
															},
															"variableNames": [
																{
																	"name": "power",
																	"nodeType": "YulIdentifier",
																	"src": "9443:5:10"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "9468:13:10",
															"value": {
																"name": "_base",
																"nodeType": "YulIdentifier",
																"src": "9476:5:10"
															},
															"variableNames": [
																{
																	"name": "base",
																	"nodeType": "YulIdentifier",
																	"src": "9468:4:10"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "9532:228:10",
																"statements": [
																	{
																		"body": {
																			"nodeType": "YulBlock",
																			"src": "9577:22:10",
																			"statements": [
																				{
																					"expression": {
																						"arguments": [],
																						"functionName": {
																							"name": "panic_error_0x11",
																							"nodeType": "YulIdentifier",
																							"src": "9579:16:10"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "9579:18:10"
																					},
																					"nodeType": "YulExpressionStatement",
																					"src": "9579:18:10"
																				}
																			]
																		},
																		"condition": {
																			"arguments": [
																				{
																					"name": "base",
																					"nodeType": "YulIdentifier",
																					"src": "9552:4:10"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"kind": "number",
																									"nodeType": "YulLiteral",
																									"src": "9566:1:10",
																									"type": "",
																									"value": "0"
																								}
																							],
																							"functionName": {
																								"name": "not",
																								"nodeType": "YulIdentifier",
																								"src": "9562:3:10"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "9562:6:10"
																						},
																						{
																							"name": "base",
																							"nodeType": "YulIdentifier",
																							"src": "9570:4:10"
																						}
																					],
																					"functionName": {
																						"name": "div",
																						"nodeType": "YulIdentifier",
																						"src": "9558:3:10"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "9558:17:10"
																				}
																			],
																			"functionName": {
																				"name": "gt",
																				"nodeType": "YulIdentifier",
																				"src": "9549:2:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "9549:27:10"
																		},
																		"nodeType": "YulIf",
																		"src": "9546:2:10"
																	},
																	{
																		"body": {
																			"nodeType": "YulBlock",
																			"src": "9638:29:10",
																			"statements": [
																				{
																					"nodeType": "YulAssignment",
																					"src": "9640:25:10",
																					"value": {
																						"arguments": [
																							{
																								"name": "power",
																								"nodeType": "YulIdentifier",
																								"src": "9653:5:10"
																							},
																							{
																								"name": "base",
																								"nodeType": "YulIdentifier",
																								"src": "9660:4:10"
																							}
																						],
																						"functionName": {
																							"name": "mul",
																							"nodeType": "YulIdentifier",
																							"src": "9649:3:10"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "9649:16:10"
																					},
																					"variableNames": [
																						{
																							"name": "power",
																							"nodeType": "YulIdentifier",
																							"src": "9640:5:10"
																						}
																					]
																				}
																			]
																		},
																		"condition": {
																			"arguments": [
																				{
																					"name": "exponent",
																					"nodeType": "YulIdentifier",
																					"src": "9619:8:10"
																				},
																				{
																					"name": "power_1",
																					"nodeType": "YulIdentifier",
																					"src": "9629:7:10"
																				}
																			],
																			"functionName": {
																				"name": "and",
																				"nodeType": "YulIdentifier",
																				"src": "9615:3:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "9615:22:10"
																		},
																		"nodeType": "YulIf",
																		"src": "9612:2:10"
																	},
																	{
																		"nodeType": "YulAssignment",
																		"src": "9680:23:10",
																		"value": {
																			"arguments": [
																				{
																					"name": "base",
																					"nodeType": "YulIdentifier",
																					"src": "9692:4:10"
																				},
																				{
																					"name": "base",
																					"nodeType": "YulIdentifier",
																					"src": "9698:4:10"
																				}
																			],
																			"functionName": {
																				"name": "mul",
																				"nodeType": "YulIdentifier",
																				"src": "9688:3:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "9688:15:10"
																		},
																		"variableNames": [
																			{
																				"name": "base",
																				"nodeType": "YulIdentifier",
																				"src": "9680:4:10"
																			}
																		]
																	},
																	{
																		"nodeType": "YulAssignment",
																		"src": "9716:34:10",
																		"value": {
																			"arguments": [
																				{
																					"name": "power_1",
																					"nodeType": "YulIdentifier",
																					"src": "9732:7:10"
																				},
																				{
																					"name": "exponent",
																					"nodeType": "YulIdentifier",
																					"src": "9741:8:10"
																				}
																			],
																			"functionName": {
																				"name": "shr",
																				"nodeType": "YulIdentifier",
																				"src": "9728:3:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "9728:22:10"
																		},
																		"variableNames": [
																			{
																				"name": "exponent",
																				"nodeType": "YulIdentifier",
																				"src": "9716:8:10"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "exponent",
																		"nodeType": "YulIdentifier",
																		"src": "9501:8:10"
																	},
																	{
																		"name": "power_1",
																		"nodeType": "YulIdentifier",
																		"src": "9511:7:10"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "9498:2:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "9498:21:10"
															},
															"nodeType": "YulForLoop",
															"post": {
																"nodeType": "YulBlock",
																"src": "9520:3:10",
																"statements": []
															},
															"pre": {
																"nodeType": "YulBlock",
																"src": "9494:3:10",
																"statements": []
															},
															"src": "9490:270:10"
														}
													]
												},
												"name": "checked_exp_helper",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "_base",
														"nodeType": "YulTypedName",
														"src": "9372:5:10",
														"type": ""
													},
													{
														"name": "exponent",
														"nodeType": "YulTypedName",
														"src": "9379:8:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "power",
														"nodeType": "YulTypedName",
														"src": "9392:5:10",
														"type": ""
													},
													{
														"name": "base",
														"nodeType": "YulTypedName",
														"src": "9399:4:10",
														"type": ""
													}
												],
												"src": "9344:422:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9841:61:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "9851:45:10",
															"value": {
																"arguments": [
																	{
																		"name": "base",
																		"nodeType": "YulIdentifier",
																		"src": "9881:4:10"
																	},
																	{
																		"name": "exponent",
																		"nodeType": "YulIdentifier",
																		"src": "9887:8:10"
																	}
																],
																"functionName": {
																	"name": "checked_exp_unsigned",
																	"nodeType": "YulIdentifier",
																	"src": "9860:20:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "9860:36:10"
															},
															"variableNames": [
																{
																	"name": "power",
																	"nodeType": "YulIdentifier",
																	"src": "9851:5:10"
																}
															]
														}
													]
												},
												"name": "checked_exp_t_uint256_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "base",
														"nodeType": "YulTypedName",
														"src": "9812:4:10",
														"type": ""
													},
													{
														"name": "exponent",
														"nodeType": "YulTypedName",
														"src": "9818:8:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "power",
														"nodeType": "YulTypedName",
														"src": "9831:5:10",
														"type": ""
													}
												],
												"src": "9771:131:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9966:747:10",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "10004:52:10",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "10018:10:10",
																		"value": {
																			"kind": "number",
																			"nodeType": "YulLiteral",
																			"src": "10027:1:10",
																			"type": "",
																			"value": "1"
																		},
																		"variableNames": [
																			{
																				"name": "power",
																				"nodeType": "YulIdentifier",
																				"src": "10018:5:10"
																			}
																		]
																	},
																	{
																		"nodeType": "YulLeave",
																		"src": "10041:5:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "exponent",
																		"nodeType": "YulIdentifier",
																		"src": "9986:8:10"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "9979:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "9979:16:10"
															},
															"nodeType": "YulIf",
															"src": "9976:2:10"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "10089:52:10",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "10103:10:10",
																		"value": {
																			"kind": "number",
																			"nodeType": "YulLiteral",
																			"src": "10112:1:10",
																			"type": "",
																			"value": "0"
																		},
																		"variableNames": [
																			{
																				"name": "power",
																				"nodeType": "YulIdentifier",
																				"src": "10103:5:10"
																			}
																		]
																	},
																	{
																		"nodeType": "YulLeave",
																		"src": "10126:5:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "base",
																		"nodeType": "YulIdentifier",
																		"src": "10075:4:10"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "10068:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "10068:12:10"
															},
															"nodeType": "YulIf",
															"src": "10065:2:10"
														},
														{
															"cases": [
																{
																	"body": {
																		"nodeType": "YulBlock",
																		"src": "10177:52:10",
																		"statements": [
																			{
																				"nodeType": "YulAssignment",
																				"src": "10191:10:10",
																				"value": {
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "10200:1:10",
																					"type": "",
																					"value": "1"
																				},
																				"variableNames": [
																					{
																						"name": "power",
																						"nodeType": "YulIdentifier",
																						"src": "10191:5:10"
																					}
																				]
																			},
																			{
																				"nodeType": "YulLeave",
																				"src": "10214:5:10"
																			}
																		]
																	},
																	"nodeType": "YulCase",
																	"src": "10170:59:10",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10175:1:10",
																		"type": "",
																		"value": "1"
																	}
																},
																{
																	"body": {
																		"nodeType": "YulBlock",
																		"src": "10245:123:10",
																		"statements": [
																			{
																				"body": {
																					"nodeType": "YulBlock",
																					"src": "10280:22:10",
																					"statements": [
																						{
																							"expression": {
																								"arguments": [],
																								"functionName": {
																									"name": "panic_error_0x11",
																									"nodeType": "YulIdentifier",
																									"src": "10282:16:10"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "10282:18:10"
																							},
																							"nodeType": "YulExpressionStatement",
																							"src": "10282:18:10"
																						}
																					]
																				},
																				"condition": {
																					"arguments": [
																						{
																							"name": "exponent",
																							"nodeType": "YulIdentifier",
																							"src": "10265:8:10"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "10275:3:10",
																							"type": "",
																							"value": "255"
																						}
																					],
																					"functionName": {
																						"name": "gt",
																						"nodeType": "YulIdentifier",
																						"src": "10262:2:10"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "10262:17:10"
																				},
																				"nodeType": "YulIf",
																				"src": "10259:2:10"
																			},
																			{
																				"nodeType": "YulAssignment",
																				"src": "10315:25:10",
																				"value": {
																					"arguments": [
																						{
																							"name": "exponent",
																							"nodeType": "YulIdentifier",
																							"src": "10328:8:10"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "10338:1:10",
																							"type": "",
																							"value": "1"
																						}
																					],
																					"functionName": {
																						"name": "shl",
																						"nodeType": "YulIdentifier",
																						"src": "10324:3:10"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "10324:16:10"
																				},
																				"variableNames": [
																					{
																						"name": "power",
																						"nodeType": "YulIdentifier",
																						"src": "10315:5:10"
																					}
																				]
																			},
																			{
																				"nodeType": "YulLeave",
																				"src": "10353:5:10"
																			}
																		]
																	},
																	"nodeType": "YulCase",
																	"src": "10238:130:10",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10243:1:10",
																		"type": "",
																		"value": "2"
																	}
																}
															],
															"expression": {
																"name": "base",
																"nodeType": "YulIdentifier",
																"src": "10157:4:10"
															},
															"nodeType": "YulSwitch",
															"src": "10150:218:10"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "10466:70:10",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "10480:28:10",
																		"value": {
																			"arguments": [
																				{
																					"name": "base",
																					"nodeType": "YulIdentifier",
																					"src": "10493:4:10"
																				},
																				{
																					"name": "exponent",
																					"nodeType": "YulIdentifier",
																					"src": "10499:8:10"
																				}
																			],
																			"functionName": {
																				"name": "exp",
																				"nodeType": "YulIdentifier",
																				"src": "10489:3:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "10489:19:10"
																		},
																		"variableNames": [
																			{
																				"name": "power",
																				"nodeType": "YulIdentifier",
																				"src": "10480:5:10"
																			}
																		]
																	},
																	{
																		"nodeType": "YulLeave",
																		"src": "10521:5:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "base",
																						"nodeType": "YulIdentifier",
																						"src": "10390:4:10"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "10396:2:10",
																						"type": "",
																						"value": "11"
																					}
																				],
																				"functionName": {
																					"name": "lt",
																					"nodeType": "YulIdentifier",
																					"src": "10387:2:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "10387:12:10"
																			},
																			{
																				"arguments": [
																					{
																						"name": "exponent",
																						"nodeType": "YulIdentifier",
																						"src": "10404:8:10"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "10414:2:10",
																						"type": "",
																						"value": "78"
																					}
																				],
																				"functionName": {
																					"name": "lt",
																					"nodeType": "YulIdentifier",
																					"src": "10401:2:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "10401:16:10"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "10383:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10383:35:10"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "base",
																						"nodeType": "YulIdentifier",
																						"src": "10427:4:10"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "10433:3:10",
																						"type": "",
																						"value": "307"
																					}
																				],
																				"functionName": {
																					"name": "lt",
																					"nodeType": "YulIdentifier",
																					"src": "10424:2:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "10424:13:10"
																			},
																			{
																				"arguments": [
																					{
																						"name": "exponent",
																						"nodeType": "YulIdentifier",
																						"src": "10442:8:10"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "10452:2:10",
																						"type": "",
																						"value": "32"
																					}
																				],
																				"functionName": {
																					"name": "lt",
																					"nodeType": "YulIdentifier",
																					"src": "10439:2:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "10439:16:10"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "10420:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10420:36:10"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "10380:2:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "10380:77:10"
															},
															"nodeType": "YulIf",
															"src": "10377:2:10"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "10545:57:10",
															"value": {
																"arguments": [
																	{
																		"name": "base",
																		"nodeType": "YulIdentifier",
																		"src": "10587:4:10"
																	},
																	{
																		"name": "exponent",
																		"nodeType": "YulIdentifier",
																		"src": "10593:8:10"
																	}
																],
																"functionName": {
																	"name": "checked_exp_helper",
																	"nodeType": "YulIdentifier",
																	"src": "10568:18:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "10568:34:10"
															},
															"variables": [
																{
																	"name": "power_1",
																	"nodeType": "YulTypedName",
																	"src": "10549:7:10",
																	"type": ""
																},
																{
																	"name": "base_1",
																	"nodeType": "YulTypedName",
																	"src": "10558:6:10",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "10647:22:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "10649:16:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "10649:18:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "10649:18:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "power_1",
																		"nodeType": "YulIdentifier",
																		"src": "10617:7:10"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "10634:1:10",
																						"type": "",
																						"value": "0"
																					}
																				],
																				"functionName": {
																					"name": "not",
																					"nodeType": "YulIdentifier",
																					"src": "10630:3:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "10630:6:10"
																			},
																			{
																				"name": "base_1",
																				"nodeType": "YulIdentifier",
																				"src": "10638:6:10"
																			}
																		],
																		"functionName": {
																			"name": "div",
																			"nodeType": "YulIdentifier",
																			"src": "10626:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10626:19:10"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "10614:2:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "10614:32:10"
															},
															"nodeType": "YulIf",
															"src": "10611:2:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "10678:29:10",
															"value": {
																"arguments": [
																	{
																		"name": "power_1",
																		"nodeType": "YulIdentifier",
																		"src": "10691:7:10"
																	},
																	{
																		"name": "base_1",
																		"nodeType": "YulIdentifier",
																		"src": "10700:6:10"
																	}
																],
																"functionName": {
																	"name": "mul",
																	"nodeType": "YulIdentifier",
																	"src": "10687:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "10687:20:10"
															},
															"variableNames": [
																{
																	"name": "power",
																	"nodeType": "YulIdentifier",
																	"src": "10678:5:10"
																}
															]
														}
													]
												},
												"name": "checked_exp_unsigned",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "base",
														"nodeType": "YulTypedName",
														"src": "9937:4:10",
														"type": ""
													},
													{
														"name": "exponent",
														"nodeType": "YulTypedName",
														"src": "9943:8:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "power",
														"nodeType": "YulTypedName",
														"src": "9956:5:10",
														"type": ""
													}
												],
												"src": "9907:806:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10770:116:10",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "10829:22:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "10831:16:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "10831:18:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "10831:18:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "x",
																						"nodeType": "YulIdentifier",
																						"src": "10801:1:10"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "10794:6:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "10794:9:10"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "10787:6:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10787:17:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "y",
																				"nodeType": "YulIdentifier",
																				"src": "10809:1:10"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "10820:1:10",
																								"type": "",
																								"value": "0"
																							}
																						],
																						"functionName": {
																							"name": "not",
																							"nodeType": "YulIdentifier",
																							"src": "10816:3:10"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "10816:6:10"
																					},
																					{
																						"name": "x",
																						"nodeType": "YulIdentifier",
																						"src": "10824:1:10"
																					}
																				],
																				"functionName": {
																					"name": "div",
																					"nodeType": "YulIdentifier",
																					"src": "10812:3:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "10812:14:10"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "10806:2:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10806:21:10"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "10783:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "10783:45:10"
															},
															"nodeType": "YulIf",
															"src": "10780:2:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "10860:20:10",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "10875:1:10"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "10878:1:10"
																	}
																],
																"functionName": {
																	"name": "mul",
																	"nodeType": "YulIdentifier",
																	"src": "10871:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "10871:9:10"
															},
															"variableNames": [
																{
																	"name": "product",
																	"nodeType": "YulIdentifier",
																	"src": "10860:7:10"
																}
															]
														}
													]
												},
												"name": "checked_mul_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "10749:1:10",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "10752:1:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "product",
														"nodeType": "YulTypedName",
														"src": "10758:7:10",
														"type": ""
													}
												],
												"src": "10718:168:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10940:76:10",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "10962:22:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "10964:16:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "10964:18:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "10964:18:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "10956:1:10"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "10959:1:10"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "10953:2:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "10953:8:10"
															},
															"nodeType": "YulIf",
															"src": "10950:2:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "10993:17:10",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "11005:1:10"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "11008:1:10"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "11001:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "11001:9:10"
															},
															"variableNames": [
																{
																	"name": "diff",
																	"nodeType": "YulIdentifier",
																	"src": "10993:4:10"
																}
															]
														}
													]
												},
												"name": "checked_sub_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "10922:1:10",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "10925:1:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "diff",
														"nodeType": "YulTypedName",
														"src": "10931:4:10",
														"type": ""
													}
												],
												"src": "10891:125:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11053:95:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11070:1:10",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11077:3:10",
																				"type": "",
																				"value": "224"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11082:10:10",
																				"type": "",
																				"value": "0x4e487b71"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "11073:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11073:20:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11063:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "11063:31:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11063:31:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11110:1:10",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11113:4:10",
																		"type": "",
																		"value": "0x11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11103:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "11103:15:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11103:15:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11134:1:10",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11137:4:10",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "11127:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "11127:15:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11127:15:10"
														}
													]
												},
												"name": "panic_error_0x11",
												"nodeType": "YulFunctionDefinition",
												"src": "11021:127:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11185:95:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11202:1:10",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11209:3:10",
																				"type": "",
																				"value": "224"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11214:10:10",
																				"type": "",
																				"value": "0x4e487b71"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "11205:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11205:20:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11195:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "11195:31:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11195:31:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11242:1:10",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11245:4:10",
																		"type": "",
																		"value": "0x41"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11235:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "11235:15:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11235:15:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11266:1:10",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11269:4:10",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "11259:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "11259:15:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11259:15:10"
														}
													]
												},
												"name": "panic_error_0x41",
												"nodeType": "YulFunctionDefinition",
												"src": "11153:127:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11330:86:10",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "11394:16:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "11403:1:10",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "11406:1:10",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "11396:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "11396:12:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "11396:12:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "11353:5:10"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "11364:5:10"
																					},
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "11379:3:10",
																										"type": "",
																										"value": "160"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "11384:1:10",
																										"type": "",
																										"value": "1"
																									}
																								],
																								"functionName": {
																									"name": "shl",
																									"nodeType": "YulIdentifier",
																									"src": "11375:3:10"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "11375:11:10"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "11388:1:10",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "sub",
																							"nodeType": "YulIdentifier",
																							"src": "11371:3:10"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "11371:19:10"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "11360:3:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "11360:31:10"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "11350:2:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11350:42:10"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "11343:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "11343:50:10"
															},
															"nodeType": "YulIf",
															"src": "11340:2:10"
														}
													]
												},
												"name": "validator_revert_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "11319:5:10",
														"type": ""
													}
												],
												"src": "11285:131:10"
											}
										]
									},
									"contents": "{\n    { }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function abi_decode_tuple_t_address_payablet_contract$_ERC20_$585t_contract$_ERC20_$585t_array$_t_uint256_$7_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        let _1 := 320\n        if slt(sub(dataEnd, headStart), _1) { revert(value1, value1) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let _2 := 32\n        let value_1 := calldataload(add(headStart, _2))\n        validator_revert_address(value_1)\n        value1 := value_1\n        let value_2 := calldataload(add(headStart, 64))\n        validator_revert_address(value_2)\n        value2 := value_2\n        if iszero(slt(add(headStart, 127), dataEnd)) { revert(value3, value3) }\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, 224)\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        let dst := memPtr\n        let src := add(headStart, 96)\n        if gt(add(headStart, _1), dataEnd) { revert(value3, value3) }\n        let i := value3\n        for { } lt(i, 0x07) { i := add(i, 1) }\n        {\n            mstore(dst, calldataload(src))\n            dst := add(dst, _2)\n            src := add(src, _2)\n        }\n        value3 := memPtr\n    }\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        let value := mload(headStart)\n        if iszero(eq(value, iszero(iszero(value)))) { revert(value0, value0) }\n        value0 := value\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        value0 := mload(headStart)\n    }\n    function abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        let length := mload(value0)\n        let i := end\n        for { } lt(i, length) { i := add(i, 0x20) }\n        {\n            mstore(add(pos, i), mload(add(add(value0, i), 0x20)))\n        }\n        if gt(i, length) { mstore(add(pos, length), end) }\n        end := add(pos, length)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_address_payable_t_contract$_ERC20_$585_t_contract$_ERC20_$585_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256_t_bool_t_uint256__to_t_address_payable_t_address_t_address_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256_t_bool_t_uint256__fromStack_reversed(headStart, value11, value10, value9, value8, value7, value6, value5, value4, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 384)\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), and(value2, _1))\n        mstore(add(headStart, 96), value3)\n        mstore(add(headStart, 128), value4)\n        mstore(add(headStart, 160), value5)\n        mstore(add(headStart, 192), value6)\n        mstore(add(headStart, 224), value7)\n        mstore(add(headStart, 256), value8)\n        mstore(add(headStart, 288), value9)\n        mstore(add(headStart, 320), iszero(iszero(value10)))\n        mstore(add(headStart, 352), value11)\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_encode_tuple_t_contract$_IERC20_$663__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"Ownable: new owner is the zero a\")\n        mstore(add(headStart, 96), \"ddress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_48cc793e3ea877d6bf034b11f4c6d0d583dd24a0f1374daf495701b65f42f81c__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 14)\n        mstore(add(headStart, 64), \"Overflow value\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_4f4071cacb98a73fb0fb3325a9a9a07b87a20a90340fd79a56fa9441c16f3367__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 10)\n        mstore(add(headStart, 64), \"Not active\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_8254a19c2218e87bd65e7d451e5bbd6df57ba9f73035118b8f47be7b5659ddde__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 16)\n        mstore(add(headStart, 64), \"Not enough value\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_84b07dbc51081d888dba4f335791aa8e296b316efa01a63a80a60cc8dbf32b14__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 15)\n        mstore(add(headStart, 64), \"Sale is Success\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 32)\n        mstore(add(headStart, 64), \"Ownable: caller is not the owner\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_eb2904bf3c0c9ae693b53eb0188a703c388998a9c405b7965ca678cef9a51d18__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 36)\n        mstore(add(headStart, 64), \"TransferHelper: TRANSFER_FROM_FA\")\n        mstore(add(headStart, 96), \"ILED\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 31)\n        mstore(add(headStart, 64), \"ReentrancyGuard: reentrant call\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_t_uint256_t_uint256_t_uint256_t_uint256_t_bool_t_bool__to_t_uint256_t_uint256_t_uint256_t_uint256_t_bool_t_bool__fromStack_reversed(headStart, value5, value4, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 192)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n        mstore(add(headStart, 128), iszero(iszero(value4)))\n        mstore(add(headStart, 160), iszero(iszero(value5)))\n    }\n    function abi_encode_tuple_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256__fromStack_reversed(headStart, value5, value4, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 192)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n        mstore(add(headStart, 128), value4)\n        mstore(add(headStart, 160), value5)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        if gt(x, not(y)) { panic_error_0x11() }\n        sum := add(x, y)\n    }\n    function checked_div_t_uint256(x, y) -> r\n    {\n        if iszero(y)\n        {\n            mstore(r, shl(224, 0x4e487b71))\n            mstore(4, 0x12)\n            revert(r, 0x24)\n        }\n        r := div(x, y)\n    }\n    function checked_exp_helper(_base, exponent) -> power, base\n    {\n        let power_1 := 1\n        power := power_1\n        base := _base\n        for { } gt(exponent, power_1) { }\n        {\n            if gt(base, div(not(0), base)) { panic_error_0x11() }\n            if and(exponent, power_1) { power := mul(power, base) }\n            base := mul(base, base)\n            exponent := shr(power_1, exponent)\n        }\n    }\n    function checked_exp_t_uint256_t_uint256(base, exponent) -> power\n    {\n        power := checked_exp_unsigned(base, exponent)\n    }\n    function checked_exp_unsigned(base, exponent) -> power\n    {\n        if iszero(exponent)\n        {\n            power := 1\n            leave\n        }\n        if iszero(base)\n        {\n            power := 0\n            leave\n        }\n        switch base\n        case 1 {\n            power := 1\n            leave\n        }\n        case 2 {\n            if gt(exponent, 255) { panic_error_0x11() }\n            power := shl(exponent, 1)\n            leave\n        }\n        if or(and(lt(base, 11), lt(exponent, 78)), and(lt(base, 307), lt(exponent, 32)))\n        {\n            power := exp(base, exponent)\n            leave\n        }\n        let power_1, base_1 := checked_exp_helper(base, exponent)\n        if gt(power_1, div(not(0), base_1)) { panic_error_0x11() }\n        power := mul(power_1, base_1)\n    }\n    function checked_mul_t_uint256(x, y) -> product\n    {\n        if and(iszero(iszero(x)), gt(y, div(not(0), x))) { panic_error_0x11() }\n        product := mul(x, y)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        if lt(x, y) { panic_error_0x11() }\n        diff := sub(x, y)\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function validator_revert_address(value)\n    {\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n}",
									"id": 10,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "6080604052600436106100fe5760003560e01c8063861faf5f11610095578063b6b55f2511610064578063b6b55f2514610340578063cad5b0f714610353578063e2d3f42314610378578063f2fde38b146103ff578063f8b2cb4f1461041f57600080fd5b8063861faf5f1461028e5780638da5cb5b14610296578063acfb2355146102c8578063ad5c46481461032057600080fd5b80634329db46116100d15780634329db461461021757806356c5f3491461022c57806361e1765514610259578063715018a61461027957600080fd5b806318856a2f146101035780631df4ccfc146101c8578063200d2ed2146101ec5780633b5ef2ad14610201575b600080fd5b34801561010f57600080fd5b50600b54600c54600d54600e54600f546010546011546012546013546014546015546016546101579b6001600160a01b039081169b81169a16989796959493929160ff16908c565b604080516001600160a01b039d8e1681529b8d1660208d015299909b16988a01989098526060890196909652608088019490945260a087019290925260c086015260e08501526101008401526101208301521515610140820152610160810191909152610180015b60405180910390f35b3480156101d457600080fd5b506101de601b5481565b6040519081526020016101bf565b3480156101f857600080fd5b506101de610447565b34801561020d57600080fd5b506101de60185481565b61022a610225366004610ed8565b610470565b005b34801561023857600080fd5b506101de610247366004610dd5565b60036020526000908152604090205481565b34801561026557600080fd5b5061022a610274366004610df8565b6104aa565b34801561028557600080fd5b5061022a61066a565b61022a6106d5565b3480156102a257600080fd5b506001546001600160a01b03165b6040516001600160a01b0390911681526020016101bf565b3480156102d457600080fd5b506004546005546006546007546008546009546102f395949392919086565b604080519687526020870195909552938501929092526060840152608083015260a082015260c0016101bf565b34801561032c57600080fd5b506017546102b0906001600160a01b031681565b61022a61034e366004610ed8565b610704565b34801561035f57600080fd5b50610368610ac6565b60405190151581526020016101bf565b34801561038457600080fd5b506103ce610393366004610dd5565b600260208190526000918252604090912080546001820154928201546003830154600490930154919392909160ff8082169161010090041686565b60408051968752602087019590955293850192909252606084015215156080830152151560a082015260c0016101bf565b34801561040b57600080fd5b5061022a61041a366004610dd5565b610ad8565b34801561042b57600080fd5b506101de61043a366004610dd5565b6001600160a01b03163190565b600f5460009042101561045a5750600090565b60105442111561046a5750600290565b50600190565b336108fc61047e8334611083565b6040518115909202916000818181858888f193505050501580156104a6573d6000803e3d6000fd5b5050565b600b80546001600160a01b038087166001600160a01b031992831617909255600c80548684169083168117909155600d8054938616939092169290921790556040805163313ce56760e01b8152905163313ce56791600480820192602092909190829003018186803b15801561051f57600080fd5b505afa158015610533573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105579190610ef0565b61056290600a610fbc565b815161056e9190611064565b600e55602080820151600f556040808301516010556060830151601155600d54815163313ce56760e01b815291516001600160a01b039091169263313ce5679260048082019391829003018186803b1580156105c957600080fd5b505afa1580156105dd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106019190610ef0565b61060c90600a610fbc565b608082015161061b9190611064565b60125560a081015160135560c0810151601455600d54601754601580546001600160a01b03938416939092169290921460ff19909116179055600e546106619080610bbe565b60165550505050565b6001546001600160a01b031633146106c95760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b6106d36000610bca565b565b60405133904780156108fc02916000818181858888f19350505050158015610701573d6000803e3d6000fd5b50565b600260005414156107575760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016106c0565b6002600055610764610447565b6001146107a05760405162461bcd60e51b815260206004820152600a6024820152694e6f742061637469766560b01b60448201526064016106c0565b336000908152600260205260408120601154909183918291906103e8908310156107ff5760405162461bcd60e51b815260206004820152601060248201526f4e6f7420656e6f7567682076616c756560801b60448201526064016106c0565b6012548311156108425760405162461bcd60e51b815260206004820152600e60248201526d4f766572666c6f772076616c756560901b60448201526064016106c0565b61084a610ac6565b61088657610877816108718561086b60185486610c1c90919063ffffffff16565b90610bbe565b90610c28565b92506108838385611083565b91505b60045460125460009161089891611083565b9050600081116108dc5760405162461bcd60e51b815260206004820152600f60248201526e53616c65206973205375636365737360881b60448201526064016106c0565b6000610983600b60020160009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561093257600080fd5b505afa158015610946573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061096a9190610ef0565b61097590600a610fbc565b600e54610871908890610bbe565b9050858760000160008282546109999190610f41565b92505081905550808760010160008282546109b49190610f41565b9091555050600480548691906000906109ce908490610f41565b9091555050600580548291906000906109e8908490610f41565b90915550503360009081526003602052604081208054869290610a0c908490610f41565b9250508190555083601b6000828254610a259190610f41565b909155505060155460ff168015610a44575034610a428587610f41565b105b15610a8c57336108fc85610a588834611083565b610a629190611083565b6040518115909202916000818181858888f19350505050158015610a8a573d6000803e3d6000fd5b505b60155460ff16610ab757600d54610ab7906001600160a01b03163330610ab2888a610f41565b610c34565b50506001600055505050505050565b6000610ad3601933610d64565b905090565b6001546001600160a01b03163314610b325760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016106c0565b6001600160a01b038116610b975760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016106c0565b61070181610bca565b6000610bb5836001600160a01b038416610d86565b90505b92915050565b6000610bb58284611064565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000610bb58284611083565b6000610bb58284610f59565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180516001600160e01b03166323b872dd60e01b1790529151600092839290881691610c989190610f08565b6000604051808303816000865af19150503d8060008114610cd5576040519150601f19603f3d011682016040523d82523d6000602084013e610cda565b606091505b5091509150818015610d04575080511580610d04575080806020019051810190610d049190610eb8565b610d5c5760405162461bcd60e51b8152602060048201526024808201527f5472616e7366657248656c7065723a205452414e534645525f46524f4d5f46416044820152631253115160e21b60648201526084016106c0565b505050505050565b6001600160a01b03811660009081526001830160205260408120541515610bb5565b6000818152600183016020526040812054610dcd57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610bb8565b506000610bb8565b600060208284031215610de6578081fd5b8135610df1816110c6565b9392505050565b600080600080610140808688031215610e0f578384fd5b8535610e1a816110c6565b9450602086810135610e2b816110c6565b94506040870135610e3b816110c6565b9350607f87018813610e4b578283fd5b60405160e0810181811067ffffffffffffffff82111715610e6e57610e6e6110b0565b6040528060608901848a018b1015610e84578586fd5b8594505b6007851015610ea7578035825260019490940193908301908301610e88565b505080935050505092959194509250565b600060208284031215610ec9578081fd5b81518015158114610df1578182fd5b600060208284031215610ee9578081fd5b5035919050565b600060208284031215610f01578081fd5b5051919050565b60008251815b81811015610f285760208186018101518583015201610f0e565b81811115610f365782828501525b509190910192915050565b60008219821115610f5457610f5461109a565b500190565b600082610f7457634e487b7160e01b81526012600452602481fd5b500490565b600181815b80851115610fb4578160001904821115610f9a57610f9a61109a565b80851615610fa757918102915b93841c9390800290610f7e565b509250929050565b6000610bb58383600082610fd257506001610bb8565b81610fdf57506000610bb8565b8160018114610ff55760028114610fff5761101b565b6001915050610bb8565b60ff8411156110105761101061109a565b50506001821b610bb8565b5060208310610133831016604e8410600b841016171561103e575081810a610bb8565b6110488383610f79565b806000190482111561105c5761105c61109a565b029392505050565b600081600019048311821515161561107e5761107e61109a565b500290565b6000828210156110955761109561109a565b500390565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461070157600080fdfea2646970667358221220be2de8ea34aec43de128df4709520dae3450277f762b890ed197638bd2eb236c64736f6c63430008040033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0xFE JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x861FAF5F GT PUSH2 0x95 JUMPI DUP1 PUSH4 0xB6B55F25 GT PUSH2 0x64 JUMPI DUP1 PUSH4 0xB6B55F25 EQ PUSH2 0x340 JUMPI DUP1 PUSH4 0xCAD5B0F7 EQ PUSH2 0x353 JUMPI DUP1 PUSH4 0xE2D3F423 EQ PUSH2 0x378 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x3FF JUMPI DUP1 PUSH4 0xF8B2CB4F EQ PUSH2 0x41F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x861FAF5F EQ PUSH2 0x28E JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x296 JUMPI DUP1 PUSH4 0xACFB2355 EQ PUSH2 0x2C8 JUMPI DUP1 PUSH4 0xAD5C4648 EQ PUSH2 0x320 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x4329DB46 GT PUSH2 0xD1 JUMPI DUP1 PUSH4 0x4329DB46 EQ PUSH2 0x217 JUMPI DUP1 PUSH4 0x56C5F349 EQ PUSH2 0x22C JUMPI DUP1 PUSH4 0x61E17655 EQ PUSH2 0x259 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x279 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x18856A2F EQ PUSH2 0x103 JUMPI DUP1 PUSH4 0x1DF4CCFC EQ PUSH2 0x1C8 JUMPI DUP1 PUSH4 0x200D2ED2 EQ PUSH2 0x1EC JUMPI DUP1 PUSH4 0x3B5EF2AD EQ PUSH2 0x201 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x10F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0xB SLOAD PUSH1 0xC SLOAD PUSH1 0xD SLOAD PUSH1 0xE SLOAD PUSH1 0xF SLOAD PUSH1 0x10 SLOAD PUSH1 0x11 SLOAD PUSH1 0x12 SLOAD PUSH1 0x13 SLOAD PUSH1 0x14 SLOAD PUSH1 0x15 SLOAD PUSH1 0x16 SLOAD PUSH2 0x157 SWAP12 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP12 DUP2 AND SWAP11 AND SWAP9 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 PUSH1 0xFF AND SWAP1 DUP13 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP14 DUP15 AND DUP2 MSTORE SWAP12 DUP14 AND PUSH1 0x20 DUP14 ADD MSTORE SWAP10 SWAP1 SWAP12 AND SWAP9 DUP11 ADD SWAP9 SWAP1 SWAP9 MSTORE PUSH1 0x60 DUP10 ADD SWAP7 SWAP1 SWAP7 MSTORE PUSH1 0x80 DUP9 ADD SWAP5 SWAP1 SWAP5 MSTORE PUSH1 0xA0 DUP8 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0xC0 DUP7 ADD MSTORE PUSH1 0xE0 DUP6 ADD MSTORE PUSH2 0x100 DUP5 ADD MSTORE PUSH2 0x120 DUP4 ADD MSTORE ISZERO ISZERO PUSH2 0x140 DUP3 ADD MSTORE PUSH2 0x160 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH2 0x180 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1D4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1DE PUSH1 0x1B SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1BF JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1F8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1DE PUSH2 0x447 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x20D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1DE PUSH1 0x18 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x22A PUSH2 0x225 CALLDATASIZE PUSH1 0x4 PUSH2 0xED8 JUMP JUMPDEST PUSH2 0x470 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x238 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1DE PUSH2 0x247 CALLDATASIZE PUSH1 0x4 PUSH2 0xDD5 JUMP JUMPDEST PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x265 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x22A PUSH2 0x274 CALLDATASIZE PUSH1 0x4 PUSH2 0xDF8 JUMP JUMPDEST PUSH2 0x4AA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x285 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x22A PUSH2 0x66A JUMP JUMPDEST PUSH2 0x22A PUSH2 0x6D5 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2A2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1BF JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2D4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 SLOAD PUSH1 0x5 SLOAD PUSH1 0x6 SLOAD PUSH1 0x7 SLOAD PUSH1 0x8 SLOAD PUSH1 0x9 SLOAD PUSH2 0x2F3 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 DUP7 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP7 DUP8 MSTORE PUSH1 0x20 DUP8 ADD SWAP6 SWAP1 SWAP6 MSTORE SWAP4 DUP6 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 ADD PUSH2 0x1BF JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x32C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x17 SLOAD PUSH2 0x2B0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 0x22A PUSH2 0x34E CALLDATASIZE PUSH1 0x4 PUSH2 0xED8 JUMP JUMPDEST PUSH2 0x704 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x35F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x368 PUSH2 0xAC6 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1BF JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x384 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3CE PUSH2 0x393 CALLDATASIZE PUSH1 0x4 PUSH2 0xDD5 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD SWAP3 DUP3 ADD SLOAD PUSH1 0x3 DUP4 ADD SLOAD PUSH1 0x4 SWAP1 SWAP4 ADD SLOAD SWAP2 SWAP4 SWAP3 SWAP1 SWAP2 PUSH1 0xFF DUP1 DUP3 AND SWAP2 PUSH2 0x100 SWAP1 DIV AND DUP7 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP7 DUP8 MSTORE PUSH1 0x20 DUP8 ADD SWAP6 SWAP1 SWAP6 MSTORE SWAP4 DUP6 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x60 DUP5 ADD MSTORE ISZERO ISZERO PUSH1 0x80 DUP4 ADD MSTORE ISZERO ISZERO PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 ADD PUSH2 0x1BF JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x40B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x22A PUSH2 0x41A CALLDATASIZE PUSH1 0x4 PUSH2 0xDD5 JUMP JUMPDEST PUSH2 0xAD8 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x42B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1DE PUSH2 0x43A CALLDATASIZE PUSH1 0x4 PUSH2 0xDD5 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND BALANCE SWAP1 JUMP JUMPDEST PUSH1 0xF SLOAD PUSH1 0x0 SWAP1 TIMESTAMP LT ISZERO PUSH2 0x45A JUMPI POP PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH1 0x10 SLOAD TIMESTAMP GT ISZERO PUSH2 0x46A JUMPI POP PUSH1 0x2 SWAP1 JUMP JUMPDEST POP PUSH1 0x1 SWAP1 JUMP JUMPDEST CALLER PUSH2 0x8FC PUSH2 0x47E DUP4 CALLVALUE PUSH2 0x1083 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 ISZERO SWAP1 SWAP3 MUL SWAP2 PUSH1 0x0 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x4A6 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP JUMP JUMPDEST PUSH1 0xB DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP8 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP3 DUP4 AND OR SWAP1 SWAP3 SSTORE PUSH1 0xC DUP1 SLOAD DUP7 DUP5 AND SWAP1 DUP4 AND DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 0xD DUP1 SLOAD SWAP4 DUP7 AND SWAP4 SWAP1 SWAP3 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SSTORE PUSH1 0x40 DUP1 MLOAD PUSH4 0x313CE567 PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 MLOAD PUSH4 0x313CE567 SWAP2 PUSH1 0x4 DUP1 DUP3 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x51F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x533 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x557 SWAP2 SWAP1 PUSH2 0xEF0 JUMP JUMPDEST PUSH2 0x562 SWAP1 PUSH1 0xA PUSH2 0xFBC JUMP JUMPDEST DUP2 MLOAD PUSH2 0x56E SWAP2 SWAP1 PUSH2 0x1064 JUMP JUMPDEST PUSH1 0xE SSTORE PUSH1 0x20 DUP1 DUP3 ADD MLOAD PUSH1 0xF SSTORE PUSH1 0x40 DUP1 DUP4 ADD MLOAD PUSH1 0x10 SSTORE PUSH1 0x60 DUP4 ADD MLOAD PUSH1 0x11 SSTORE PUSH1 0xD SLOAD DUP2 MLOAD PUSH4 0x313CE567 PUSH1 0xE0 SHL DUP2 MSTORE SWAP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP3 PUSH4 0x313CE567 SWAP3 PUSH1 0x4 DUP1 DUP3 ADD SWAP4 SWAP2 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5C9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x5DD JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x601 SWAP2 SWAP1 PUSH2 0xEF0 JUMP JUMPDEST PUSH2 0x60C SWAP1 PUSH1 0xA PUSH2 0xFBC JUMP JUMPDEST PUSH1 0x80 DUP3 ADD MLOAD PUSH2 0x61B SWAP2 SWAP1 PUSH2 0x1064 JUMP JUMPDEST PUSH1 0x12 SSTORE PUSH1 0xA0 DUP2 ADD MLOAD PUSH1 0x13 SSTORE PUSH1 0xC0 DUP2 ADD MLOAD PUSH1 0x14 SSTORE PUSH1 0xD SLOAD PUSH1 0x17 SLOAD PUSH1 0x15 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND SWAP4 SWAP1 SWAP3 AND SWAP3 SWAP1 SWAP3 EQ PUSH1 0xFF NOT SWAP1 SWAP2 AND OR SWAP1 SSTORE PUSH1 0xE SLOAD PUSH2 0x661 SWAP1 DUP1 PUSH2 0xBBE JUMP JUMPDEST PUSH1 0x16 SSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x6C9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x6D3 PUSH1 0x0 PUSH2 0xBCA JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x40 MLOAD CALLER SWAP1 SELFBALANCE DUP1 ISZERO PUSH2 0x8FC MUL SWAP2 PUSH1 0x0 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x701 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SLOAD EQ ISZERO PUSH2 0x757 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6C0 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SSTORE PUSH2 0x764 PUSH2 0x447 JUMP JUMPDEST PUSH1 0x1 EQ PUSH2 0x7A0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xA PUSH1 0x24 DUP3 ADD MSTORE PUSH10 0x4E6F7420616374697665 PUSH1 0xB0 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6C0 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x11 SLOAD SWAP1 SWAP2 DUP4 SWAP2 DUP3 SWAP2 SWAP1 PUSH2 0x3E8 SWAP1 DUP4 LT ISZERO PUSH2 0x7FF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x10 PUSH1 0x24 DUP3 ADD MSTORE PUSH16 0x4E6F7420656E6F7567682076616C7565 PUSH1 0x80 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6C0 JUMP JUMPDEST PUSH1 0x12 SLOAD DUP4 GT ISZERO PUSH2 0x842 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xE PUSH1 0x24 DUP3 ADD MSTORE PUSH14 0x4F766572666C6F772076616C7565 PUSH1 0x90 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6C0 JUMP JUMPDEST PUSH2 0x84A PUSH2 0xAC6 JUMP JUMPDEST PUSH2 0x886 JUMPI PUSH2 0x877 DUP2 PUSH2 0x871 DUP6 PUSH2 0x86B PUSH1 0x18 SLOAD DUP7 PUSH2 0xC1C SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 PUSH2 0xBBE JUMP JUMPDEST SWAP1 PUSH2 0xC28 JUMP JUMPDEST SWAP3 POP PUSH2 0x883 DUP4 DUP6 PUSH2 0x1083 JUMP JUMPDEST SWAP2 POP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0x12 SLOAD PUSH1 0x0 SWAP2 PUSH2 0x898 SWAP2 PUSH2 0x1083 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 GT PUSH2 0x8DC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xF PUSH1 0x24 DUP3 ADD MSTORE PUSH15 0x53616C652069732053756363657373 PUSH1 0x88 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6C0 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x983 PUSH1 0xB PUSH1 0x2 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x313CE567 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x932 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x946 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x96A SWAP2 SWAP1 PUSH2 0xEF0 JUMP JUMPDEST PUSH2 0x975 SWAP1 PUSH1 0xA PUSH2 0xFBC JUMP JUMPDEST PUSH1 0xE SLOAD PUSH2 0x871 SWAP1 DUP9 SWAP1 PUSH2 0xBBE JUMP JUMPDEST SWAP1 POP DUP6 DUP8 PUSH1 0x0 ADD PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x999 SWAP2 SWAP1 PUSH2 0xF41 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP1 DUP8 PUSH1 0x1 ADD PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x9B4 SWAP2 SWAP1 PUSH2 0xF41 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x4 DUP1 SLOAD DUP7 SWAP2 SWAP1 PUSH1 0x0 SWAP1 PUSH2 0x9CE SWAP1 DUP5 SWAP1 PUSH2 0xF41 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x5 DUP1 SLOAD DUP3 SWAP2 SWAP1 PUSH1 0x0 SWAP1 PUSH2 0x9E8 SWAP1 DUP5 SWAP1 PUSH2 0xF41 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD DUP7 SWAP3 SWAP1 PUSH2 0xA0C SWAP1 DUP5 SWAP1 PUSH2 0xF41 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP4 PUSH1 0x1B PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0xA25 SWAP2 SWAP1 PUSH2 0xF41 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x15 SLOAD PUSH1 0xFF AND DUP1 ISZERO PUSH2 0xA44 JUMPI POP CALLVALUE PUSH2 0xA42 DUP6 DUP8 PUSH2 0xF41 JUMP JUMPDEST LT JUMPDEST ISZERO PUSH2 0xA8C JUMPI CALLER PUSH2 0x8FC DUP6 PUSH2 0xA58 DUP9 CALLVALUE PUSH2 0x1083 JUMP JUMPDEST PUSH2 0xA62 SWAP2 SWAP1 PUSH2 0x1083 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 ISZERO SWAP1 SWAP3 MUL SWAP2 PUSH1 0x0 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0xA8A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP JUMPDEST PUSH1 0x15 SLOAD PUSH1 0xFF AND PUSH2 0xAB7 JUMPI PUSH1 0xD SLOAD PUSH2 0xAB7 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER ADDRESS PUSH2 0xAB2 DUP9 DUP11 PUSH2 0xF41 JUMP JUMPDEST PUSH2 0xC34 JUMP JUMPDEST POP POP PUSH1 0x1 PUSH1 0x0 SSTORE POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xAD3 PUSH1 0x19 CALLER PUSH2 0xD64 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xB32 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6C0 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0xB97 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6C0 JUMP JUMPDEST PUSH2 0x701 DUP2 PUSH2 0xBCA JUMP JUMPDEST PUSH1 0x0 PUSH2 0xBB5 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0xD86 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xBB5 DUP3 DUP5 PUSH2 0x1064 JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xBB5 DUP3 DUP5 PUSH2 0x1083 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xBB5 DUP3 DUP5 PUSH2 0xF59 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND PUSH1 0x24 DUP4 ADD MSTORE DUP5 DUP2 AND PUSH1 0x44 DUP4 ADD MSTORE PUSH1 0x64 DUP1 DUP4 ADD DUP6 SWAP1 MSTORE DUP4 MLOAD DUP1 DUP5 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x84 SWAP1 SWAP3 ADD DUP4 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH4 0x23B872DD PUSH1 0xE0 SHL OR SWAP1 MSTORE SWAP2 MLOAD PUSH1 0x0 SWAP3 DUP4 SWAP3 SWAP1 DUP9 AND SWAP2 PUSH2 0xC98 SWAP2 SWAP1 PUSH2 0xF08 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0xCD5 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xCDA JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0xD04 JUMPI POP DUP1 MLOAD ISZERO DUP1 PUSH2 0xD04 JUMPI POP DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0xD04 SWAP2 SWAP1 PUSH2 0xEB8 JUMP JUMPDEST PUSH2 0xD5C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x5472616E7366657248656C7065723A205452414E534645525F46524F4D5F4641 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x12531151 PUSH1 0xE2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6C0 JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 DUP4 ADD PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD ISZERO ISZERO PUSH2 0xBB5 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 DUP4 ADD PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH2 0xDCD JUMPI POP DUP2 SLOAD PUSH1 0x1 DUP2 DUP2 ADD DUP5 SSTORE PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 KECCAK256 SWAP1 SWAP4 ADD DUP5 SWAP1 SSTORE DUP5 SLOAD DUP5 DUP3 MSTORE DUP3 DUP7 ADD SWAP1 SWAP4 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP2 SWAP1 SWAP2 SSTORE PUSH2 0xBB8 JUMP JUMPDEST POP PUSH1 0x0 PUSH2 0xBB8 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xDE6 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0xDF1 DUP2 PUSH2 0x10C6 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH2 0x140 DUP1 DUP7 DUP9 SUB SLT ISZERO PUSH2 0xE0F JUMPI DUP4 DUP5 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH2 0xE1A DUP2 PUSH2 0x10C6 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 DUP2 ADD CALLDATALOAD PUSH2 0xE2B DUP2 PUSH2 0x10C6 JUMP JUMPDEST SWAP5 POP PUSH1 0x40 DUP8 ADD CALLDATALOAD PUSH2 0xE3B DUP2 PUSH2 0x10C6 JUMP JUMPDEST SWAP4 POP PUSH1 0x7F DUP8 ADD DUP9 SGT PUSH2 0xE4B JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0xE0 DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0xE6E JUMPI PUSH2 0xE6E PUSH2 0x10B0 JUMP JUMPDEST PUSH1 0x40 MSTORE DUP1 PUSH1 0x60 DUP10 ADD DUP5 DUP11 ADD DUP12 LT ISZERO PUSH2 0xE84 JUMPI DUP6 DUP7 REVERT JUMPDEST DUP6 SWAP5 POP JUMPDEST PUSH1 0x7 DUP6 LT ISZERO PUSH2 0xEA7 JUMPI DUP1 CALLDATALOAD DUP3 MSTORE PUSH1 0x1 SWAP5 SWAP1 SWAP5 ADD SWAP4 SWAP1 DUP4 ADD SWAP1 DUP4 ADD PUSH2 0xE88 JUMP JUMPDEST POP POP DUP1 SWAP4 POP POP POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xEC9 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0xDF1 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xEE9 JUMPI DUP1 DUP2 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xF01 JUMPI DUP1 DUP2 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD DUP2 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xF28 JUMPI PUSH1 0x20 DUP2 DUP7 ADD DUP2 ADD MLOAD DUP6 DUP4 ADD MSTORE ADD PUSH2 0xF0E JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0xF36 JUMPI DUP3 DUP3 DUP6 ADD MSTORE JUMPDEST POP SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0xF54 JUMPI PUSH2 0xF54 PUSH2 0x109A JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0xF74 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 DUP2 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 JUMPDEST DUP1 DUP6 GT ISZERO PUSH2 0xFB4 JUMPI DUP2 PUSH1 0x0 NOT DIV DUP3 GT ISZERO PUSH2 0xF9A JUMPI PUSH2 0xF9A PUSH2 0x109A JUMP JUMPDEST DUP1 DUP6 AND ISZERO PUSH2 0xFA7 JUMPI SWAP2 DUP2 MUL SWAP2 JUMPDEST SWAP4 DUP5 SHR SWAP4 SWAP1 DUP1 MUL SWAP1 PUSH2 0xF7E JUMP JUMPDEST POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xBB5 DUP4 DUP4 PUSH1 0x0 DUP3 PUSH2 0xFD2 JUMPI POP PUSH1 0x1 PUSH2 0xBB8 JUMP JUMPDEST DUP2 PUSH2 0xFDF JUMPI POP PUSH1 0x0 PUSH2 0xBB8 JUMP JUMPDEST DUP2 PUSH1 0x1 DUP2 EQ PUSH2 0xFF5 JUMPI PUSH1 0x2 DUP2 EQ PUSH2 0xFFF JUMPI PUSH2 0x101B JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP PUSH2 0xBB8 JUMP JUMPDEST PUSH1 0xFF DUP5 GT ISZERO PUSH2 0x1010 JUMPI PUSH2 0x1010 PUSH2 0x109A JUMP JUMPDEST POP POP PUSH1 0x1 DUP3 SHL PUSH2 0xBB8 JUMP JUMPDEST POP PUSH1 0x20 DUP4 LT PUSH2 0x133 DUP4 LT AND PUSH1 0x4E DUP5 LT PUSH1 0xB DUP5 LT AND OR ISZERO PUSH2 0x103E JUMPI POP DUP2 DUP2 EXP PUSH2 0xBB8 JUMP JUMPDEST PUSH2 0x1048 DUP4 DUP4 PUSH2 0xF79 JUMP JUMPDEST DUP1 PUSH1 0x0 NOT DIV DUP3 GT ISZERO PUSH2 0x105C JUMPI PUSH2 0x105C PUSH2 0x109A JUMP JUMPDEST MUL SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x107E JUMPI PUSH2 0x107E PUSH2 0x109A JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0x1095 JUMPI PUSH2 0x1095 PUSH2 0x109A JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x701 JUMPI PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xBE 0x2D 0xE8 0xEA CALLVALUE 0xAE 0xC4 RETURNDATASIZE 0xE1 0x28 0xDF SELFBALANCE MULMOD MSTORE 0xD 0xAE CALLVALUE POP 0x27 PUSH32 0x762B890ED197638BD2EB236C64736F6C63430008040033000000000000000000 ",
							"sourceMap": "338:5425:3:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1492:26;;;;;;;;;;-1:-1:-1;1492:26:3;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1492:26:3;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;3465:15:10;;;3447:34;;3517:15;;;3512:2;3497:18;;3490:43;3569:15;;;;3549:18;;;3542:43;;;;3616:2;3601:18;;3594:34;;;;3659:3;3644:19;;3637:35;;;;3427:3;3688:19;;3681:35;;;;3747:3;3732:19;;3725:35;3791:3;3776:19;;3769:35;3835:3;3820:19;;3813:35;3879:3;3864:19;;3857:35;3936:15;3929:23;3923:3;3908:19;;3901:52;3984:3;3969:19;;3962:36;;;;3396:3;3381:19;1492:26:3;;;;;;;;1628:23;;;;;;;;;;;;;;;;;;;7853:25:10;;;7841:2;7826:18;1628:23:3;7808:76:10;3061:337:3;;;;;;;;;;;;;:::i;1550:24::-;;;;;;;;;;;;;;;;5637:121;;;;;;:::i;:::-;;:::i;:::-;;1402:42;;;;;;;;;;-1:-1:-1;1402:42:3;;;;;:::i;:::-;;;;;;;;;;;;;;2160:892;;;;;;;;;;-1:-1:-1;2160:892:3;;;;;:::i;:::-;;:::i;1714:103:6:-;;;;;;;;;;;;;:::i;5521:108:3:-;;;:::i;1063:87:6:-;;;;;;;;;;-1:-1:-1;1136:6:6;;-1:-1:-1;;;;;1136:6:6;1063:87;;;-1:-1:-1;;;;;2872:32:10;;;2854:51;;2842:2;2827:18;1063:87:6;2809:102:10;1451:34:3;;;;;;;;;;-1:-1:-1;1451:34:3;;;;;;;;;;;;;;;;;;;;;;;;;8736:25:10;;;8792:2;8777:18;;8770:34;;;;8820:18;;;8813:34;;;;8878:2;8863:18;;8856:34;8921:3;8906:19;;8899:35;8965:3;8950:19;;8943:35;8723:3;8708:19;1451:34:3;8690:294:10;1525:18:3;;;;;;;;;;-1:-1:-1;1525:18:3;;;;-1:-1:-1;;;;;1525:18:3;;;3525:1866;;;;;;:::i;:::-;;:::i;3407:110::-;;;;;;;;;;;;;:::i;:::-;;;4554:14:10;;4547:22;4529:41;;4517:2;4502:18;3407:110:3;4484:92:10;1349:46:3;;;;;;;;;;-1:-1:-1;1349:46:3;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8164:25:10;;;8220:2;8205:18;;8198:34;;;;8248:18;;;8241:34;;;;8306:2;8291:18;;8284:34;8362:14;8355:22;8349:3;8334:19;;8327:51;8422:14;8415:22;8409:3;8394:19;;8387:51;8151:3;8136:19;1349:46:3;8118:326:10;1972:201:6;;;;;;;;;;-1:-1:-1;1972:201:6;;;;;:::i;:::-;;:::i;5399:111:3:-;;;;;;;;;;-1:-1:-1;5399:111:3;;;;;:::i;:::-;-1:-1:-1;;;;;5486:16:3;;;5399:111;3061:337;3140:19;;3099:7;;3122:15;:37;3119:272;;;-1:-1:-1;3183:1:3;;3061:337::o;3119:272::-;3250:17;;3232:15;:35;3229:151;;;-1:-1:-1;3295:1:3;;3061:337::o;3229:151::-;-1:-1:-1;3353:1:3;;3061:337::o;5637:121::-;5710:10;5702:48;5731:18;5743:6;5731:9;:18;:::i;:::-;5702:48;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5637:121;:::o;2160:892::-;2341:9;:38;;-1:-1:-1;;;;;2341:38:3;;;-1:-1:-1;;;;;;2341:38:3;;;;;;;2390:19;:32;;;;;;;;;;;;;2433:19;:32;;;;;;;;;;;;;;;2523:37;;;-1:-1:-1;;;2523:37:3;;;;:35;;:37;;;;;;;;;;;;;;;2390:32;2523:37;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2510:51;;:2;:51;:::i;:::-;2499:8;;:62;;;;:::i;:::-;2476:20;:85;2594:8;;;;;2572:19;:30;2633:8;;;;;2613:17;:28;2681:8;;;;2652:26;:37;2759:19;;2753:37;;-1:-1:-1;;;2753:37:3;;;;-1:-1:-1;;;;;2759:19:3;;;;2753:35;;:37;;;;;;;;;;;2759:19;2753:37;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2740:51;;:2;:51;:::i;:::-;2729:8;;;;:62;;;;:::i;:::-;2700:26;:91;2824:8;;;;2802:19;:30;2864:8;;;;2843:18;:29;2936:19;;2919:4;;2883:25;:73;;-1:-1:-1;;;;;2936:19:3;;;2919:4;;;;2911:45;;;;-1:-1:-1;;2883:73:3;;;;;;3023:20;;2998:46;;3023:20;2998:24;:46::i;:::-;2967:28;:77;-1:-1:-1;;;;2160:892:3:o;1714:103:6:-;1136:6;;-1:-1:-1;;;;;1136:6:6;736:10:4;1283:23:6;1275:68;;;;-1:-1:-1;;;1275:68:6;;6783:2:10;1275:68:6;;;6765:21:10;;;6802:18;;;6795:30;6861:34;6841:18;;;6834:62;6913:18;;1275:68:6;;;;;;;;;1779:30:::1;1806:1;1779:18;:30::i;:::-;1714:103::o:0;5521:108:3:-;5570:51;;5578:10;;5599:21;5570:51;;;;;;;;;5599:21;5578:10;5570:51;;;;;;;;;;;;;;;;;;;;;5521:108::o;3525:1866::-;1778:1:7;2376:7;;:19;;2368:63;;;;-1:-1:-1;;;2368:63:7;;7549:2:10;2368:63:7;;;7531:21:10;7588:2;7568:18;;;7561:30;7627:33;7607:18;;;7600:61;7678:18;;2368:63:7;7521:181:10;2368:63:7;1778:1;2509:7;:18;3608:8:3::1;:6;:8::i;:::-;3620:1;3608:13;3600:36;;;::::0;-1:-1:-1;;;3600:36:3;;5755:2:10;3600:36:3::1;::::0;::::1;5737:21:10::0;5794:2;5774:18;;;5767:30;-1:-1:-1;;;5813:18:10;;;5806:40;5863:18;;3600:36:3::1;5727:160:10::0;3600:36:3::1;3693:10;3657:23;3683:21:::0;;;:9:::1;:21;::::0;;;;3889:26;;3683:21;;3735:7;;;;3657:23;3848:4:::1;::::0;3871:44;::::1;;3863:101;;;::::0;-1:-1:-1;;;3863:101:3;;6094:2:10;3863:101:3::1;::::0;::::1;6076:21:10::0;6133:2;6113:18;;;6106:30;-1:-1:-1;;;6152:18:10;;;6145:46;6208:18;;3863:101:3::1;6066:166:10::0;3863:101:3::1;4001:26:::0;;3983:44;::::1;;3975:99;;;::::0;-1:-1:-1;;;3975:99:3;;5412:2:10;3975:99:3::1;::::0;::::1;5394:21:10::0;5451:2;5431:18;;;5424:30;-1:-1:-1;;;5470:18:10;;;5463:44;5524:18;;3975:99:3::1;5384:164:10::0;3975:99:3::1;4089:19;:17;:19::i;:::-;4085:266;;4142:133;4261:13;4143:81;4209:14;4144:28;4162:9;;4144:13;:17;;:28;;;;:::i;:::-;4143:65:::0;::::1;:81::i;:::-;4142:118:::0;::::1;:133::i;:::-;4125:150:::0;-1:-1:-1;4296:26:3::1;4125:150:::0;4296:9;:26:::1;:::i;:::-;4290:32;;4085:266;4410:13;:32:::0;4381:26;;4361:17:::1;::::0;4381:61:::1;::::0;::::1;:::i;:::-;4361:81;;4473:1;4461:9;:13;4453:41;;;::::0;-1:-1:-1;;;4453:41:3;;6439:2:10;4453:41:3::1;::::0;::::1;6421:21:10::0;6478:2;6458:18;;;6451:30;-1:-1:-1;;;6497:18:10;;;6490:45;6552:18;;4453:41:3::1;6411:165:10::0;4453:41:3::1;4505:17;4526:158;4651:9;:19;;;;;;;;;;-1:-1:-1::0;;;;;4651:19:3::1;-1:-1:-1::0;;;;;4645:35:3::1;;:37;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4631:52;::::0;:2:::1;:52;:::i;:::-;4575:20:::0;;4526:70:::1;::::0;:14;;:48:::1;:70::i;:158::-;4505:180;;4717:9;4696:5;:17;;;:30;;;;;;;:::i;:::-;;;;;;;;4757:9;4737:5;:16;;;:29;;;;;;;:::i;:::-;::::0;;;-1:-1:-1;;4777:13:3::1;:50:::0;;4813:14;;4777:13;:32:::1;::::0;:50:::1;::::0;4813:14;;4777:50:::1;:::i;:::-;::::0;;;-1:-1:-1;;4838:28:3;:41;;4870:9;;4838:28;::::1;::::0;:41:::1;::::0;4870:9;;4838:41:::1;:::i;:::-;::::0;;;-1:-1:-1;;4898:10:3::1;4890:19;::::0;;;:7:::1;:19;::::0;;;;:26;;4913:3;;4890:19;:26:::1;::::0;4913:3;;4890:26:::1;:::i;:::-;;;;;;;;4939:3;4927:8;;:15;;;;;;;:::i;:::-;::::0;;;-1:-1:-1;;4958:25:3;;::::1;;:61:::0;::::1;;;-1:-1:-1::0;5010:9:3::1;4987:20;5004:3:::0;4987:14;:20:::1;:::i;:::-;:32;4958:61;4955:155;;;5044:10;5036:62;5094:3:::0;5065:26:::1;5077:14:::0;5065:9:::1;:26;:::i;:::-;:32;;;;:::i;:::-;5036:62;::::0;;::::1;::::0;;::::1;::::0;::::1;::::0;;;;;;::::1;;;;;;;;;;;;;::::0;::::1;;;;;;4955:155;5125:25:::0;;::::1;;5121:251;;5225:19:::0;;5167:193:::1;::::0;-1:-1:-1;;;;;5225:19:3::1;5264:10;5301:4;5325:20;5342:3:::0;5325:14;:20:::1;:::i;:::-;5167:31;:193::i;:::-;-1:-1:-1::0;;1734:1:7;2688:7;:22;-1:-1:-1;;;;;;3525:1866:3:o;3407:110::-;3456:4;3480:29;:6;736:10:4;3480:15:3;:29::i;:::-;3473:36;;3407:110;:::o;1972:201:6:-;1136:6;;-1:-1:-1;;;;;1136:6:6;736:10:4;1283:23:6;1275:68;;;;-1:-1:-1;;;1275:68:6;;6783:2:10;1275:68:6;;;6765:21:10;;;6802:18;;;6795:30;6861:34;6841:18;;;6834:62;6913:18;;1275:68:6;6755:182:10;1275:68:6;-1:-1:-1;;;;;2061:22:6;::::1;2053:73;;;::::0;-1:-1:-1;;;2053:73:6;;5005:2:10;2053:73:6::1;::::0;::::1;4987:21:10::0;5044:2;5024:18;;;5017:30;5083:34;5063:18;;;5056:62;-1:-1:-1;;;5134:18:10;;;5127:36;5180:19;;2053:73:6::1;4977:228:10::0;2053:73:6::1;2137:28;2156:8;2137:18;:28::i;8259:152:5:-:0;8329:4;8353:50;8358:3;-1:-1:-1;;;;;8378:23:5;;8353:4;:50::i;:::-;8346:57;;8259:152;;;;;:::o;3585:98:8:-;3643:7;3670:5;3674:1;3670;:5;:::i;2333:191:6:-;2426:6;;;-1:-1:-1;;;;;2443:17:6;;;-1:-1:-1;;;;;;2443:17:6;;;;;;;2476:40;;2426:6;;;2443:17;2426:6;;2476:40;;2407:16;;2476:40;2333:191;;:::o;3228:98:8:-;3286:7;3313:5;3317:1;3313;:5;:::i;3984:98::-;4042:7;4069:5;4073:1;4069;:5;:::i;1112:430:9:-;1318:51;;;-1:-1:-1;;;;;4267:15:10;;;1318:51:9;;;4249:34:10;4319:15;;;4299:18;;;4292:43;4351:18;;;;4344:34;;;1318:51:9;;;;;;;;;;4184:18:10;;;;1318:51:9;;;;;;;-1:-1:-1;;;;;1318:51:9;-1:-1:-1;;;1318:51:9;;;1293:87;;-1:-1:-1;;;;1293:10:9;;;;:87;;1318:51;1293:87;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1257:123;;;;1413:7;:57;;;;-1:-1:-1;1425:11:9;;:16;;:44;;;1456:4;1445:24;;;;;;;;;;;;:::i;:::-;1391:143;;;;-1:-1:-1;;;1391:143:9;;7144:2:10;1391:143:9;;;7126:21:10;7183:2;7163:18;;;7156:30;7222:34;7202:18;;;7195:62;-1:-1:-1;;;7273:18:10;;;7266:34;7317:19;;1391:143:9;7116:226:10;1391:143:9;1112:430;;;;;;:::o;8831:167:5:-;-1:-1:-1;;;;;8965:23:5;;8911:4;4367:19;;;:12;;;:19;;;;;;:24;;8935:55;4270:129;2174:414;2237:4;4367:19;;;:12;;;:19;;;;;;2254:327;;-1:-1:-1;2297:23:5;;;;;;;;:11;:23;;;;;;;;;;;;;2480:18;;2458:19;;;:12;;;:19;;;;;;:40;;;;2513:11;;2254:327;-1:-1:-1;2564:5:5;2557:12;;14:257:10;73:6;126:2;114:9;105:7;101:23;97:32;94:2;;;147:6;139;132:22;94:2;191:9;178:23;210:31;235:5;210:31;:::i;:::-;260:5;84:187;-1:-1:-1;;;84:187:10:o;276:1296::-;419:6;427;435;443;474:3;518:2;506:9;497:7;493:23;489:32;486:2;;;539:6;531;524:22;486:2;583:9;570:23;602:31;627:5;602:31;:::i;:::-;652:5;-1:-1:-1;676:2:10;715:18;;;702:32;743:33;702:32;743:33;:::i;:::-;795:7;-1:-1:-1;854:2:10;839:18;;826:32;867:33;826:32;867:33;:::i;:::-;919:7;-1:-1:-1;964:3:10;949:19;;945:33;-1:-1:-1;935:2:10;;997:6;989;982:22;935:2;1035;1029:9;1077:3;1069:6;1065:16;1147:6;1135:10;1132:22;1111:18;1099:10;1096:34;1093:62;1090:2;;;1158:18;;:::i;:::-;1194:2;1187:22;1229:6;1270:2;1255:18;;1288;;;1285:31;-1:-1:-1;1282:2:10;;;1334:6;1326;1319:22;1282:2;1361:6;1352:15;;1376:165;1390:4;1387:1;1384:11;1376:165;;;1449:17;;1437:30;;1410:1;1403:9;;;;;1487:12;;;;1519;;1376:165;;;1380:3;;1560:6;1550:16;;;;;454:1118;;;;;;;:::o;1577:297::-;1644:6;1697:2;1685:9;1676:7;1672:23;1668:32;1665:2;;;1718:6;1710;1703:22;1665:2;1755:9;1749:16;1808:5;1801:13;1794:21;1787:5;1784:32;1774:2;;1835:6;1827;1820:22;1879:190;1938:6;1991:2;1979:9;1970:7;1966:23;1962:32;1959:2;;;2012:6;2004;1997:22;1959:2;-1:-1:-1;2040:23:10;;1949:120;-1:-1:-1;1949:120:10:o;2074:194::-;2144:6;2197:2;2185:9;2176:7;2172:23;2168:32;2165:2;;;2218:6;2210;2203:22;2165:2;-1:-1:-1;2246:16:10;;2155:113;-1:-1:-1;2155:113:10:o;2273:430::-;2402:3;2440:6;2434:13;2465:3;2477:129;2491:6;2488:1;2485:13;2477:129;;;2589:4;2573:14;;;2569:25;;2563:32;2550:11;;;2543:53;2506:12;2477:129;;;2624:6;2621:1;2618:13;2615:2;;;2659:3;2650:6;2645:3;2641:16;2634:29;2615:2;-1:-1:-1;2681:16:10;;;;;2410:293;-1:-1:-1;;2410:293:10:o;8989:128::-;9029:3;9060:1;9056:6;9053:1;9050:13;9047:2;;;9066:18;;:::i;:::-;-1:-1:-1;9102:9:10;;9037:80::o;9122:217::-;9162:1;9188;9178:2;;-1:-1:-1;;;9213:31:10;;9267:4;9264:1;9257:15;9295:4;9220:1;9285:15;9178:2;-1:-1:-1;9324:9:10;;9168:171::o;9344:422::-;9433:1;9476:5;9433:1;9490:270;9511:7;9501:8;9498:21;9490:270;;;9570:4;9566:1;9562:6;9558:17;9552:4;9549:27;9546:2;;;9579:18;;:::i;:::-;9629:7;9619:8;9615:22;9612:2;;;9649:16;;;;9612:2;9728:22;;;;9688:15;;;;9490:270;;;9494:3;9408:358;;;;;:::o;9771:131::-;9831:5;9860:36;9887:8;9881:4;9956:5;9986:8;9976:2;;-1:-1:-1;10027:1:10;10041:5;;9976:2;10075:4;10065:2;;-1:-1:-1;10112:1:10;10126:5;;10065:2;10157:4;10175:1;10170:59;;;;10243:1;10238:130;;;;10150:218;;10170:59;10200:1;10191:10;;10214:5;;;10238:130;10275:3;10265:8;10262:17;10259:2;;;10282:18;;:::i;:::-;-1:-1:-1;;10338:1:10;10324:16;;10353:5;;10150:218;;10452:2;10442:8;10439:16;10433:3;10427:4;10424:13;10420:36;10414:2;10404:8;10401:16;10396:2;10390:4;10387:12;10383:35;10380:77;10377:2;;;-1:-1:-1;10489:19:10;;;10521:5;;10377:2;10568:34;10593:8;10587:4;10568:34;:::i;:::-;10638:6;10634:1;10630:6;10626:19;10617:7;10614:32;10611:2;;;10649:18;;:::i;:::-;10687:20;;9966:747;-1:-1:-1;;;9966:747:10:o;10718:168::-;10758:7;10824:1;10820;10816:6;10812:14;10809:1;10806:21;10801:1;10794:9;10787:17;10783:45;10780:2;;;10831:18;;:::i;:::-;-1:-1:-1;10871:9:10;;10770:116::o;10891:125::-;10931:4;10959:1;10956;10953:8;10950:2;;;10964:18;;:::i;:::-;-1:-1:-1;11001:9:10;;10940:76::o;11021:127::-;11082:10;11077:3;11073:20;11070:1;11063:31;11113:4;11110:1;11103:15;11137:4;11134:1;11127:15;11153:127;11214:10;11209:3;11205:20;11202:1;11195:31;11245:4;11242:1;11235:15;11269:4;11266:1;11259:15;11285:131;-1:-1:-1;;;;;11360:31:10;;11350:42;;11340:2;;11406:1;11403;11396:12"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "873800",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"external": {
								"WETH()": "1126",
								"backToken()": "infinite",
								"buyerInfo(address)": "4682",
								"checkAdminAddress()": "1221",
								"deposit(uint256)": "infinite",
								"feeAnyone()": "1085",
								"getBalance(address)": "1172",
								"initialSaleInfor(address,address,address,uint256[7])": "infinite",
								"owner()": "1065",
								"presaleStatus()": "5191",
								"renounceOwnership()": "23506",
								"saleInfor()": "10177",
								"status()": "1933",
								"totalFee()": "1041",
								"transferETH(uint256)": "infinite",
								"transferOwnership(address)": "infinite",
								"userFee(address)": "1258"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 338,
									"end": 5763,
									"name": "PUSH",
									"source": 3,
									"value": "80"
								},
								{
									"begin": 338,
									"end": 5763,
									"name": "PUSH",
									"source": 3,
									"value": "40"
								},
								{
									"begin": 338,
									"end": 5763,
									"name": "MSTORE",
									"source": 3
								},
								{
									"begin": 1734,
									"end": 1735,
									"name": "PUSH",
									"source": 7,
									"value": "1"
								},
								{
									"begin": 1845,
									"end": 1852,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 1845,
									"end": 1867,
									"name": "SSTORE",
									"source": 7
								},
								{
									"begin": 942,
									"end": 974,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "6"
								},
								{
									"begin": 736,
									"end": 746,
									"name": "CALLER",
									"source": 4
								},
								{
									"begin": 942,
									"end": 960,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "9"
								},
								{
									"begin": 942,
									"end": 974,
									"name": "JUMP",
									"source": 6,
									"value": "[in]"
								},
								{
									"begin": 942,
									"end": 974,
									"name": "tag",
									"source": 6,
									"value": "6"
								},
								{
									"begin": 942,
									"end": 974,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 1933,
									"end": 1937,
									"name": "PUSH",
									"source": 3,
									"value": "17"
								},
								{
									"begin": 1933,
									"end": 1989,
									"name": "DUP1",
									"source": 3
								},
								{
									"begin": 1933,
									"end": 1989,
									"name": "SLOAD",
									"source": 3
								},
								{
									"begin": 1946,
									"end": 1988,
									"name": "PUSH",
									"source": 3,
									"value": "C778417E063141139FCE010982780140AA0CD5AB"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 1933,
									"end": 1989,
									"name": "SWAP1",
									"source": 3
								},
								{
									"begin": 1933,
									"end": 1989,
									"name": "SWAP2",
									"source": 3
								},
								{
									"begin": 1933,
									"end": 1989,
									"name": "AND",
									"source": 3
								},
								{
									"begin": 1933,
									"end": 1989,
									"name": "OR",
									"source": 3
								},
								{
									"begin": 1933,
									"end": 1989,
									"name": "SWAP1",
									"source": 3
								},
								{
									"begin": 1933,
									"end": 1989,
									"name": "SSTORE",
									"source": 3
								},
								{
									"begin": 2000,
									"end": 2054,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "11"
								},
								{
									"begin": 2000,
									"end": 2006,
									"name": "PUSH",
									"source": 3,
									"value": "19"
								},
								{
									"begin": 2011,
									"end": 2053,
									"name": "PUSH",
									"source": 3,
									"value": "6CCB41EEDA5A073076F3E7DC1614C185B5FA41ED"
								},
								{
									"begin": 2000,
									"end": 2010,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "12"
								},
								{
									"begin": 2000,
									"end": 2010,
									"name": "PUSH",
									"source": 3,
									"value": "20"
								},
								{
									"begin": 2000,
									"end": 2010,
									"name": "SWAP1",
									"source": 3
								},
								{
									"begin": 2000,
									"end": 2010,
									"name": "DUP2",
									"source": 3
								},
								{
									"begin": 2000,
									"end": 2010,
									"name": "SHL",
									"source": 3
								},
								{
									"begin": 2000,
									"end": 2010,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "18446744073709551714"
								},
								{
									"begin": 2000,
									"end": 2010,
									"name": "OR",
									"source": 3
								},
								{
									"begin": 2000,
									"end": 2054,
									"name": "SWAP1",
									"source": 3
								},
								{
									"begin": 2000,
									"end": 2054,
									"name": "SHR",
									"source": 3
								},
								{
									"begin": 2000,
									"end": 2054,
									"name": "JUMP",
									"source": 3,
									"value": "[in]"
								},
								{
									"begin": 2000,
									"end": 2054,
									"name": "tag",
									"source": 3,
									"value": "11"
								},
								{
									"begin": 2000,
									"end": 2054,
									"name": "JUMPDEST",
									"source": 3
								},
								{
									"begin": 2000,
									"end": 2054,
									"name": "POP",
									"source": 3
								},
								{
									"begin": 2065,
									"end": 2119,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "13"
								},
								{
									"begin": 2076,
									"end": 2118,
									"name": "PUSH",
									"source": 3,
									"value": "4F0B12BBF40FC182559822A5B1DB6D34DBC3E016"
								},
								{
									"begin": 2065,
									"end": 2071,
									"name": "PUSH",
									"source": 3,
									"value": "19"
								},
								{
									"begin": 2065,
									"end": 2075,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "12"
								},
								{
									"begin": 2065,
									"end": 2075,
									"name": "PUSH",
									"source": 3,
									"value": "20"
								},
								{
									"begin": 2065,
									"end": 2075,
									"name": "SHL",
									"source": 3
								},
								{
									"begin": 2065,
									"end": 2075,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "18446744073709551714"
								},
								{
									"begin": 2065,
									"end": 2075,
									"name": "OR",
									"source": 3
								},
								{
									"begin": 2065,
									"end": 2075,
									"name": "SWAP1",
									"source": 3
								},
								{
									"begin": 2065,
									"end": 2119,
									"name": "SWAP2",
									"source": 3
								},
								{
									"begin": 2065,
									"end": 2119,
									"name": "SWAP1",
									"source": 3
								},
								{
									"begin": 2065,
									"end": 2119,
									"name": "PUSH",
									"source": 3,
									"value": "20"
								},
								{
									"begin": 2065,
									"end": 2119,
									"name": "SHR",
									"source": 3
								},
								{
									"begin": 2065,
									"end": 2119,
									"name": "JUMP",
									"source": 3,
									"value": "[in]"
								},
								{
									"begin": 2065,
									"end": 2119,
									"name": "tag",
									"source": 3,
									"value": "13"
								},
								{
									"begin": 2065,
									"end": 2119,
									"name": "JUMPDEST",
									"source": 3
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 2142,
									"end": 2144,
									"name": "PUSH",
									"source": 3,
									"value": "14"
								},
								{
									"begin": 2130,
									"end": 2139,
									"name": "PUSH",
									"source": 3,
									"value": "18"
								},
								{
									"begin": 2130,
									"end": 2144,
									"name": "SSTORE",
									"source": 3
								},
								{
									"begin": 338,
									"end": 5763,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "14"
								},
								{
									"begin": 338,
									"end": 5763,
									"name": "JUMP",
									"source": 3
								},
								{
									"begin": 2333,
									"end": 2524,
									"name": "tag",
									"source": 6,
									"value": "9"
								},
								{
									"begin": 2333,
									"end": 2524,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 2426,
									"end": 2432,
									"name": "PUSH",
									"source": 6,
									"value": "1"
								},
								{
									"begin": 2426,
									"end": 2432,
									"name": "DUP1",
									"source": 6
								},
								{
									"begin": 2426,
									"end": 2432,
									"name": "SLOAD",
									"source": 6
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 2443,
									"end": 2460,
									"name": "DUP4",
									"source": 6
								},
								{
									"begin": 2443,
									"end": 2460,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 2443,
									"end": 2460,
									"name": "AND",
									"source": 6
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 2443,
									"end": 2460,
									"name": "DUP4",
									"source": 6
								},
								{
									"begin": 2443,
									"end": 2460,
									"name": "AND",
									"source": 6
								},
								{
									"begin": 2443,
									"end": 2460,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 2443,
									"end": 2460,
									"name": "OR",
									"source": 6
								},
								{
									"begin": 2443,
									"end": 2460,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 2443,
									"end": 2460,
									"name": "SWAP4",
									"source": 6
								},
								{
									"begin": 2443,
									"end": 2460,
									"name": "SSTORE",
									"source": 6
								},
								{
									"begin": 2476,
									"end": 2516,
									"name": "PUSH",
									"source": 6,
									"value": "40"
								},
								{
									"begin": 2476,
									"end": 2516,
									"name": "MLOAD",
									"source": 6
								},
								{
									"begin": 2426,
									"end": 2432,
									"name": "SWAP2",
									"source": 6
								},
								{
									"begin": 2426,
									"end": 2432,
									"name": "AND",
									"source": 6
								},
								{
									"begin": 2426,
									"end": 2432,
									"name": "SWAP2",
									"source": 6
								},
								{
									"begin": 2443,
									"end": 2460,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 2426,
									"end": 2432,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 2426,
									"end": 2432,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 2476,
									"end": 2516,
									"name": "PUSH",
									"source": 6,
									"value": "8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
								},
								{
									"begin": 2476,
									"end": 2516,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 2407,
									"end": 2423,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 2407,
									"end": 2423,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 2476,
									"end": 2516,
									"name": "LOG3",
									"source": 6
								},
								{
									"begin": 2333,
									"end": 2524,
									"name": "POP",
									"source": 6
								},
								{
									"begin": 2333,
									"end": 2524,
									"name": "POP",
									"source": 6
								},
								{
									"begin": 2333,
									"end": 2524,
									"name": "JUMP",
									"source": 6,
									"value": "[out]"
								},
								{
									"begin": 8259,
									"end": 8411,
									"name": "tag",
									"source": 5,
									"value": "12"
								},
								{
									"begin": 8259,
									"end": 8411,
									"name": "JUMPDEST",
									"source": 5
								},
								{
									"begin": 8329,
									"end": 8333,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 8353,
									"end": 8403,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "18"
								},
								{
									"begin": 8358,
									"end": 8361,
									"name": "DUP4",
									"source": 5
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 8378,
									"end": 8401,
									"name": "DUP5",
									"source": 5
								},
								{
									"begin": 8378,
									"end": 8401,
									"name": "AND",
									"source": 5
								},
								{
									"begin": 8353,
									"end": 8357,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "19"
								},
								{
									"begin": 8353,
									"end": 8403,
									"name": "JUMP",
									"source": 5,
									"value": "[in]"
								},
								{
									"begin": 8353,
									"end": 8403,
									"name": "tag",
									"source": 5,
									"value": "18"
								},
								{
									"begin": 8353,
									"end": 8403,
									"name": "JUMPDEST",
									"source": 5
								},
								{
									"begin": 8346,
									"end": 8403,
									"name": "SWAP1",
									"source": 5
								},
								{
									"begin": 8346,
									"end": 8403,
									"name": "POP",
									"source": 5
								},
								{
									"begin": 8259,
									"end": 8411,
									"name": "tag",
									"source": 5,
									"value": "17"
								},
								{
									"begin": 8259,
									"end": 8411,
									"name": "JUMPDEST",
									"source": 5
								},
								{
									"begin": 8259,
									"end": 8411,
									"name": "SWAP3",
									"source": 5
								},
								{
									"begin": 8259,
									"end": 8411,
									"name": "SWAP2",
									"source": 5
								},
								{
									"begin": 8259,
									"end": 8411,
									"name": "POP",
									"source": 5
								},
								{
									"begin": 8259,
									"end": 8411,
									"name": "POP",
									"source": 5
								},
								{
									"begin": 8259,
									"end": 8411,
									"name": "JUMP",
									"source": 5,
									"value": "[out]"
								},
								{
									"begin": 2174,
									"end": 2588,
									"name": "tag",
									"source": 5,
									"value": "19"
								},
								{
									"begin": 2174,
									"end": 2588,
									"name": "JUMPDEST",
									"source": 5
								},
								{
									"begin": 2237,
									"end": 2241,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 4367,
									"end": 4386,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 4367,
									"end": 4386,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 4367,
									"end": 4386,
									"name": "MSTORE",
									"source": 5
								},
								{
									"begin": 4367,
									"end": 4379,
									"name": "PUSH",
									"source": 5,
									"value": "1"
								},
								{
									"begin": 4367,
									"end": 4379,
									"name": "DUP4",
									"source": 5
								},
								{
									"begin": 4367,
									"end": 4379,
									"name": "ADD",
									"source": 5
								},
								{
									"begin": 4367,
									"end": 4386,
									"name": "PUSH",
									"source": 5,
									"value": "20"
								},
								{
									"begin": 4367,
									"end": 4386,
									"name": "MSTORE",
									"source": 5
								},
								{
									"begin": 4367,
									"end": 4386,
									"name": "PUSH",
									"source": 5,
									"value": "40"
								},
								{
									"begin": 4367,
									"end": 4386,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 4367,
									"end": 4386,
									"name": "KECCAK256",
									"source": 5
								},
								{
									"begin": 4367,
									"end": 4386,
									"name": "SLOAD",
									"source": 5
								},
								{
									"begin": 2254,
									"end": 2581,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "23"
								},
								{
									"begin": 2254,
									"end": 2581,
									"name": "JUMPI",
									"source": 5
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 2297,
									"end": 2320,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 2297,
									"end": 2320,
									"name": "SLOAD",
									"source": 5
								},
								{
									"begin": 2297,
									"end": 2320,
									"name": "PUSH",
									"source": 5,
									"value": "1"
								},
								{
									"begin": 2297,
									"end": 2320,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 2297,
									"end": 2320,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 2297,
									"end": 2320,
									"name": "ADD",
									"source": 5
								},
								{
									"begin": 2297,
									"end": 2320,
									"name": "DUP5",
									"source": 5
								},
								{
									"begin": 2297,
									"end": 2320,
									"name": "SSTORE",
									"source": 5
								},
								{
									"begin": 2297,
									"end": 2308,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 2297,
									"end": 2320,
									"name": "DUP5",
									"source": 5
								},
								{
									"begin": 2297,
									"end": 2320,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 2297,
									"end": 2320,
									"name": "MSTORE",
									"source": 5
								},
								{
									"begin": 2297,
									"end": 2320,
									"name": "PUSH",
									"source": 5,
									"value": "20"
								},
								{
									"begin": 2297,
									"end": 2320,
									"name": "DUP1",
									"source": 5
								},
								{
									"begin": 2297,
									"end": 2320,
									"name": "DUP3",
									"source": 5
								},
								{
									"begin": 2297,
									"end": 2320,
									"name": "KECCAK256",
									"source": 5
								},
								{
									"begin": 2297,
									"end": 2320,
									"name": "SWAP1",
									"source": 5
								},
								{
									"begin": 2297,
									"end": 2320,
									"name": "SWAP4",
									"source": 5
								},
								{
									"begin": 2297,
									"end": 2320,
									"name": "ADD",
									"source": 5
								},
								{
									"begin": 2297,
									"end": 2320,
									"name": "DUP5",
									"source": 5
								},
								{
									"begin": 2297,
									"end": 2320,
									"name": "SWAP1",
									"source": 5
								},
								{
									"begin": 2297,
									"end": 2320,
									"name": "SSTORE",
									"source": 5
								},
								{
									"begin": 2480,
									"end": 2498,
									"name": "DUP5",
									"source": 5
								},
								{
									"begin": 2480,
									"end": 2498,
									"name": "SLOAD",
									"source": 5
								},
								{
									"begin": 2458,
									"end": 2477,
									"name": "DUP5",
									"source": 5
								},
								{
									"begin": 2458,
									"end": 2477,
									"name": "DUP3",
									"source": 5
								},
								{
									"begin": 2458,
									"end": 2477,
									"name": "MSTORE",
									"source": 5
								},
								{
									"begin": 2458,
									"end": 2470,
									"name": "DUP3",
									"source": 5
								},
								{
									"begin": 2458,
									"end": 2470,
									"name": "DUP7",
									"source": 5
								},
								{
									"begin": 2458,
									"end": 2470,
									"name": "ADD",
									"source": 5
								},
								{
									"begin": 2458,
									"end": 2477,
									"name": "SWAP1",
									"source": 5
								},
								{
									"begin": 2458,
									"end": 2477,
									"name": "SWAP4",
									"source": 5
								},
								{
									"begin": 2458,
									"end": 2477,
									"name": "MSTORE",
									"source": 5
								},
								{
									"begin": 2458,
									"end": 2477,
									"name": "PUSH",
									"source": 5,
									"value": "40"
								},
								{
									"begin": 2458,
									"end": 2477,
									"name": "SWAP1",
									"source": 5
								},
								{
									"begin": 2458,
									"end": 2477,
									"name": "KECCAK256",
									"source": 5
								},
								{
									"begin": 2458,
									"end": 2498,
									"name": "SWAP2",
									"source": 5
								},
								{
									"begin": 2458,
									"end": 2498,
									"name": "SWAP1",
									"source": 5
								},
								{
									"begin": 2458,
									"end": 2498,
									"name": "SWAP2",
									"source": 5
								},
								{
									"begin": 2458,
									"end": 2498,
									"name": "SSTORE",
									"source": 5
								},
								{
									"begin": 2513,
									"end": 2524,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "17"
								},
								{
									"begin": 2513,
									"end": 2524,
									"name": "JUMP",
									"source": 5
								},
								{
									"begin": 2254,
									"end": 2581,
									"name": "tag",
									"source": 5,
									"value": "23"
								},
								{
									"begin": 2254,
									"end": 2581,
									"name": "JUMPDEST",
									"source": 5
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 2564,
									"end": 2569,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 2557,
									"end": 2569,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "17"
								},
								{
									"begin": 2557,
									"end": 2569,
									"name": "JUMP",
									"source": 5
								},
								{
									"begin": 338,
									"end": 5763,
									"name": "tag",
									"source": 3,
									"value": "14"
								},
								{
									"begin": 338,
									"end": 5763,
									"name": "JUMPDEST",
									"source": 3
								},
								{
									"begin": 338,
									"end": 5763,
									"name": "PUSH #[$]",
									"source": 3,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 338,
									"end": 5763,
									"name": "DUP1",
									"source": 3
								},
								{
									"begin": 338,
									"end": 5763,
									"name": "PUSH [$]",
									"source": 3,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 338,
									"end": 5763,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 338,
									"end": 5763,
									"name": "CODECOPY",
									"source": 3
								},
								{
									"begin": 338,
									"end": 5763,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 338,
									"end": 5763,
									"name": "RETURN",
									"source": 3
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220be2de8ea34aec43de128df4709520dae3450277f762b890ed197638bd2eb236c64736f6c63430008040033",
									".code": [
										{
											"begin": 338,
											"end": 5763,
											"name": "PUSH",
											"source": 3,
											"value": "80"
										},
										{
											"begin": 338,
											"end": 5763,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 338,
											"end": 5763,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 338,
											"end": 5763,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 338,
											"end": 5763,
											"name": "CALLDATASIZE",
											"source": 3
										},
										{
											"begin": 338,
											"end": 5763,
											"name": "LT",
											"source": 3
										},
										{
											"begin": 338,
											"end": 5763,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "1"
										},
										{
											"begin": 338,
											"end": 5763,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 338,
											"end": 5763,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 338,
											"end": 5763,
											"name": "CALLDATALOAD",
											"source": 3
										},
										{
											"begin": 338,
											"end": 5763,
											"name": "PUSH",
											"source": 3,
											"value": "E0"
										},
										{
											"begin": 338,
											"end": 5763,
											"name": "SHR",
											"source": 3
										},
										{
											"begin": 338,
											"end": 5763,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 338,
											"end": 5763,
											"name": "PUSH",
											"source": 3,
											"value": "861FAF5F"
										},
										{
											"begin": 338,
											"end": 5763,
											"name": "GT",
											"source": 3
										},
										{
											"begin": 338,
											"end": 5763,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "19"
										},
										{
											"begin": 338,
											"end": 5763,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 338,
											"end": 5763,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 338,
											"end": 5763,
											"name": "PUSH",
											"source": 3,
											"value": "B6B55F25"
										},
										{
											"begin": 338,
											"end": 5763,
											"name": "GT",
											"source": 3
										},
										{
											"begin": 338,
											"end": 5763,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 338,
											"end": 5763,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 338,
											"end": 5763,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 338,
											"end": 5763,
											"name": "PUSH",
											"source": 3,
											"value": "B6B55F25"
										},
										{
											"begin": 338,
											"end": 5763,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 338,
											"end": 5763,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "14"
										},
										{
											"begin": 338,
											"end": 5763,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 338,
											"end": 5763,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 338,
											"end": 5763,
											"name": "PUSH",
											"source": 3,
											"value": "CAD5B0F7"
										},
										{
											"begin": 338,
											"end": 5763,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 338,
											"end": 5763,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "15"
										},
										{
											"begin": 338,
											"end": 5763,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 338,
											"end": 5763,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 338,
											"end": 5763,
											"name": "PUSH",
											"source": 3,
											"value": "E2D3F423"
										},
										{
											"begin": 338,
											"end": 5763,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 338,
											"end": 5763,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "16"
										},
										{
											"begin": 338,
											"end": 5763,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 338,
											"end": 5763,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 338,
											"end": 5763,
											"name": "PUSH",
											"source": 3,
											"value": "F2FDE38B"
										},
										{
											"begin": 338,
											"end": 5763,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 338,
											"end": 5763,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "17"
										},
										{
											"begin": 338,
											"end": 5763,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 338,
											"end": 5763,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 338,
											"end": 5763,
											"name": "PUSH",
											"source": 3,
											"value": "F8B2CB4F"
										},
										{
											"begin": 338,
											"end": 5763,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 338,
											"end": 5763,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "18"
										},
										{
											"begin": 338,
											"end": 5763,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 338,
											"end": 5763,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 338,
											"end": 5763,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 338,
											"end": 5763,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 338,
											"end": 5763,
											"name": "tag",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 338,
											"end": 5763,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 338,
											"end": 5763,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 338,
											"end": 5763,
											"name": "PUSH",
											"source": 3,
											"value": "861FAF5F"
										},
										{
											"begin": 338,
											"end": 5763,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 338,
											"end": 5763,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "10"
										},
										{
											"begin": 338,
											"end": 5763,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 338,
											"end": 5763,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 338,
											"end": 5763,
											"name": "PUSH",
											"source": 3,
											"value": "8DA5CB5B"
										},
										{
											"begin": 338,
											"end": 5763,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 338,
											"end": 5763,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "11"
										},
										{
											"begin": 338,
											"end": 5763,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 338,
											"end": 5763,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 338,
											"end": 5763,
											"name": "PUSH",
											"source": 3,
											"value": "ACFB2355"
										},
										{
											"begin": 338,
											"end": 5763,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 338,
											"end": 5763,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "12"
										},
										{
											"begin": 338,
											"end": 5763,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 338,
											"end": 5763,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 338,
											"end": 5763,
											"name": "PUSH",
											"source": 3,
											"value": "AD5C4648"
										},
										{
											"begin": 338,
											"end": 5763,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 338,
											"end": 5763,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "13"
										},
										{
											"begin": 338,
											"end": 5763,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 338,
											"end": 5763,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 338,
											"end": 5763,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 338,
											"end": 5763,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 338,
											"end": 5763,
											"name": "tag",
											"source": 3,
											"value": "19"
										},
										{
											"begin": 338,
											"end": 5763,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 338,
											"end": 5763,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 338,
											"end": 5763,
											"name": "PUSH",
											"source": 3,
											"value": "4329DB46"
										},
										{
											"begin": 338,
											"end": 5763,
											"name": "GT",
											"source": 3
										},
										{
											"begin": 338,
											"end": 5763,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "21"
										},
										{
											"begin": 338,
											"end": 5763,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 338,
											"end": 5763,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 338,
											"end": 5763,
											"name": "PUSH",
											"source": 3,
											"value": "4329DB46"
										},
										{
											"begin": 338,
											"end": 5763,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 338,
											"end": 5763,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "6"
										},
										{
											"begin": 338,
											"end": 5763,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 338,
											"end": 5763,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 338,
											"end": 5763,
											"name": "PUSH",
											"source": 3,
											"value": "56C5F349"
										},
										{
											"begin": 338,
											"end": 5763,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 338,
											"end": 5763,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "7"
										},
										{
											"begin": 338,
											"end": 5763,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 338,
											"end": 5763,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 338,
											"end": 5763,
											"name": "PUSH",
											"source": 3,
											"value": "61E17655"
										},
										{
											"begin": 338,
											"end": 5763,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 338,
											"end": 5763,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "8"
										},
										{
											"begin": 338,
											"end": 5763,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 338,
											"end": 5763,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 338,
											"end": 5763,
											"name": "PUSH",
											"source": 3,
											"value": "715018A6"
										},
										{
											"begin": 338,
											"end": 5763,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 338,
											"end": 5763,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "9"
										},
										{
											"begin": 338,
											"end": 5763,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 338,
											"end": 5763,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 338,
											"end": 5763,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 338,
											"end": 5763,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 338,
											"end": 5763,
											"name": "tag",
											"source": 3,
											"value": "21"
										},
										{
											"begin": 338,
											"end": 5763,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 338,
											"end": 5763,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 338,
											"end": 5763,
											"name": "PUSH",
											"source": 3,
											"value": "18856A2F"
										},
										{
											"begin": 338,
											"end": 5763,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 338,
											"end": 5763,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "2"
										},
										{
											"begin": 338,
											"end": 5763,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 338,
											"end": 5763,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 338,
											"end": 5763,
											"name": "PUSH",
											"source": 3,
											"value": "1DF4CCFC"
										},
										{
											"begin": 338,
											"end": 5763,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 338,
											"end": 5763,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "3"
										},
										{
											"begin": 338,
											"end": 5763,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 338,
											"end": 5763,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 338,
											"end": 5763,
											"name": "PUSH",
											"source": 3,
											"value": "200D2ED2"
										},
										{
											"begin": 338,
											"end": 5763,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 338,
											"end": 5763,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 338,
											"end": 5763,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 338,
											"end": 5763,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 338,
											"end": 5763,
											"name": "PUSH",
											"source": 3,
											"value": "3B5EF2AD"
										},
										{
											"begin": 338,
											"end": 5763,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 338,
											"end": 5763,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "5"
										},
										{
											"begin": 338,
											"end": 5763,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 338,
											"end": 5763,
											"name": "tag",
											"source": 3,
											"value": "1"
										},
										{
											"begin": 338,
											"end": 5763,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 338,
											"end": 5763,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 338,
											"end": 5763,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 338,
											"end": 5763,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 1492,
											"end": 1518,
											"name": "tag",
											"source": 3,
											"value": "2"
										},
										{
											"begin": 1492,
											"end": 1518,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1492,
											"end": 1518,
											"name": "CALLVALUE",
											"source": 3
										},
										{
											"begin": 1492,
											"end": 1518,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1492,
											"end": 1518,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 1492,
											"end": 1518,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "22"
										},
										{
											"begin": 1492,
											"end": 1518,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 1492,
											"end": 1518,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 1492,
											"end": 1518,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1492,
											"end": 1518,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 1492,
											"end": 1518,
											"name": "tag",
											"source": 3,
											"value": "22"
										},
										{
											"begin": 1492,
											"end": 1518,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1492,
											"end": 1518,
											"name": "PUSH",
											"source": 3,
											"value": "B"
										},
										{
											"begin": 1492,
											"end": 1518,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 1492,
											"end": 1518,
											"name": "PUSH",
											"source": 3,
											"value": "C"
										},
										{
											"begin": 1492,
											"end": 1518,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 1492,
											"end": 1518,
											"name": "PUSH",
											"source": 3,
											"value": "D"
										},
										{
											"begin": 1492,
											"end": 1518,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 1492,
											"end": 1518,
											"name": "PUSH",
											"source": 3,
											"value": "E"
										},
										{
											"begin": 1492,
											"end": 1518,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 1492,
											"end": 1518,
											"name": "PUSH",
											"source": 3,
											"value": "F"
										},
										{
											"begin": 1492,
											"end": 1518,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 1492,
											"end": 1518,
											"name": "PUSH",
											"source": 3,
											"value": "10"
										},
										{
											"begin": 1492,
											"end": 1518,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 1492,
											"end": 1518,
											"name": "PUSH",
											"source": 3,
											"value": "11"
										},
										{
											"begin": 1492,
											"end": 1518,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 1492,
											"end": 1518,
											"name": "PUSH",
											"source": 3,
											"value": "12"
										},
										{
											"begin": 1492,
											"end": 1518,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 1492,
											"end": 1518,
											"name": "PUSH",
											"source": 3,
											"value": "13"
										},
										{
											"begin": 1492,
											"end": 1518,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 1492,
											"end": 1518,
											"name": "PUSH",
											"source": 3,
											"value": "14"
										},
										{
											"begin": 1492,
											"end": 1518,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 1492,
											"end": 1518,
											"name": "PUSH",
											"source": 3,
											"value": "15"
										},
										{
											"begin": 1492,
											"end": 1518,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 1492,
											"end": 1518,
											"name": "PUSH",
											"source": 3,
											"value": "16"
										},
										{
											"begin": 1492,
											"end": 1518,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 1492,
											"end": 1518,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "23"
										},
										{
											"begin": 1492,
											"end": 1518,
											"name": "SWAP12",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1492,
											"end": 1518,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1492,
											"end": 1518,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1492,
											"end": 1518,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 1492,
											"end": 1518,
											"name": "SWAP12",
											"source": 3
										},
										{
											"begin": 1492,
											"end": 1518,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1492,
											"end": 1518,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 1492,
											"end": 1518,
											"name": "SWAP11",
											"source": 3
										},
										{
											"begin": 1492,
											"end": 1518,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 1492,
											"end": 1518,
											"name": "SWAP9",
											"source": 3
										},
										{
											"begin": 1492,
											"end": 1518,
											"name": "SWAP8",
											"source": 3
										},
										{
											"begin": 1492,
											"end": 1518,
											"name": "SWAP7",
											"source": 3
										},
										{
											"begin": 1492,
											"end": 1518,
											"name": "SWAP6",
											"source": 3
										},
										{
											"begin": 1492,
											"end": 1518,
											"name": "SWAP5",
											"source": 3
										},
										{
											"begin": 1492,
											"end": 1518,
											"name": "SWAP4",
											"source": 3
										},
										{
											"begin": 1492,
											"end": 1518,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 1492,
											"end": 1518,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 1492,
											"end": 1518,
											"name": "PUSH",
											"source": 3,
											"value": "FF"
										},
										{
											"begin": 1492,
											"end": 1518,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 1492,
											"end": 1518,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1492,
											"end": 1518,
											"name": "DUP13",
											"source": 3
										},
										{
											"begin": 1492,
											"end": 1518,
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 1492,
											"end": 1518,
											"name": "tag",
											"source": 3,
											"value": "23"
										},
										{
											"begin": 1492,
											"end": 1518,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1492,
											"end": 1518,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 1492,
											"end": 1518,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1492,
											"end": 1518,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3465,
											"end": 3480,
											"name": "SWAP14",
											"source": 10
										},
										{
											"begin": 3465,
											"end": 3480,
											"name": "DUP15",
											"source": 10
										},
										{
											"begin": 3465,
											"end": 3480,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 3447,
											"end": 3481,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 3447,
											"end": 3481,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 3517,
											"end": 3532,
											"name": "SWAP12",
											"source": 10
										},
										{
											"begin": 3517,
											"end": 3532,
											"name": "DUP14",
											"source": 10
										},
										{
											"begin": 3517,
											"end": 3532,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 3512,
											"end": 3514,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 3497,
											"end": 3515,
											"name": "DUP14",
											"source": 10
										},
										{
											"begin": 3497,
											"end": 3515,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 3490,
											"end": 3533,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 3569,
											"end": 3584,
											"name": "SWAP10",
											"source": 10
										},
										{
											"begin": 3569,
											"end": 3584,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 3569,
											"end": 3584,
											"name": "SWAP12",
											"source": 10
										},
										{
											"begin": 3569,
											"end": 3584,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 3549,
											"end": 3567,
											"name": "SWAP9",
											"source": 10
										},
										{
											"begin": 3549,
											"end": 3567,
											"name": "DUP11",
											"source": 10
										},
										{
											"begin": 3549,
											"end": 3567,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 3542,
											"end": 3585,
											"name": "SWAP9",
											"source": 10
										},
										{
											"begin": 3542,
											"end": 3585,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 3542,
											"end": 3585,
											"name": "SWAP9",
											"source": 10
										},
										{
											"begin": 3542,
											"end": 3585,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 3616,
											"end": 3618,
											"name": "PUSH",
											"source": 10,
											"value": "60"
										},
										{
											"begin": 3601,
											"end": 3619,
											"name": "DUP10",
											"source": 10
										},
										{
											"begin": 3601,
											"end": 3619,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 3594,
											"end": 3628,
											"name": "SWAP7",
											"source": 10
										},
										{
											"begin": 3594,
											"end": 3628,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 3594,
											"end": 3628,
											"name": "SWAP7",
											"source": 10
										},
										{
											"begin": 3594,
											"end": 3628,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 3659,
											"end": 3662,
											"name": "PUSH",
											"source": 10,
											"value": "80"
										},
										{
											"begin": 3644,
											"end": 3663,
											"name": "DUP9",
											"source": 10
										},
										{
											"begin": 3644,
											"end": 3663,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 3637,
											"end": 3672,
											"name": "SWAP5",
											"source": 10
										},
										{
											"begin": 3637,
											"end": 3672,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 3637,
											"end": 3672,
											"name": "SWAP5",
											"source": 10
										},
										{
											"begin": 3637,
											"end": 3672,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 3427,
											"end": 3430,
											"name": "PUSH",
											"source": 10,
											"value": "A0"
										},
										{
											"begin": 3688,
											"end": 3707,
											"name": "DUP8",
											"source": 10
										},
										{
											"begin": 3688,
											"end": 3707,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 3681,
											"end": 3716,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 3681,
											"end": 3716,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 3681,
											"end": 3716,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 3681,
											"end": 3716,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 3747,
											"end": 3750,
											"name": "PUSH",
											"source": 10,
											"value": "C0"
										},
										{
											"begin": 3732,
											"end": 3751,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 3732,
											"end": 3751,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 3725,
											"end": 3760,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 3791,
											"end": 3794,
											"name": "PUSH",
											"source": 10,
											"value": "E0"
										},
										{
											"begin": 3776,
											"end": 3795,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 3776,
											"end": 3795,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 3769,
											"end": 3804,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 3835,
											"end": 3838,
											"name": "PUSH",
											"source": 10,
											"value": "100"
										},
										{
											"begin": 3820,
											"end": 3839,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 3820,
											"end": 3839,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 3813,
											"end": 3848,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 3879,
											"end": 3882,
											"name": "PUSH",
											"source": 10,
											"value": "120"
										},
										{
											"begin": 3864,
											"end": 3883,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 3864,
											"end": 3883,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 3857,
											"end": 3892,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 3936,
											"end": 3951,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 3929,
											"end": 3952,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 3923,
											"end": 3926,
											"name": "PUSH",
											"source": 10,
											"value": "140"
										},
										{
											"begin": 3908,
											"end": 3927,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 3908,
											"end": 3927,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 3901,
											"end": 3953,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 3984,
											"end": 3987,
											"name": "PUSH",
											"source": 10,
											"value": "160"
										},
										{
											"begin": 3969,
											"end": 3988,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 3969,
											"end": 3988,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 3962,
											"end": 3998,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 3962,
											"end": 3998,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 3962,
											"end": 3998,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 3962,
											"end": 3998,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 3396,
											"end": 3399,
											"name": "PUSH",
											"source": 10,
											"value": "180"
										},
										{
											"begin": 3381,
											"end": 3400,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1492,
											"end": 1518,
											"name": "tag",
											"source": 3,
											"value": "25"
										},
										{
											"begin": 1492,
											"end": 1518,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1492,
											"end": 1518,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 1492,
											"end": 1518,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 1492,
											"end": 1518,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1492,
											"end": 1518,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 1492,
											"end": 1518,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 1492,
											"end": 1518,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1492,
											"end": 1518,
											"name": "RETURN",
											"source": 3
										},
										{
											"begin": 1628,
											"end": 1651,
											"name": "tag",
											"source": 3,
											"value": "3"
										},
										{
											"begin": 1628,
											"end": 1651,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1628,
											"end": 1651,
											"name": "CALLVALUE",
											"source": 3
										},
										{
											"begin": 1628,
											"end": 1651,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1628,
											"end": 1651,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 1628,
											"end": 1651,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "27"
										},
										{
											"begin": 1628,
											"end": 1651,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 1628,
											"end": 1651,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 1628,
											"end": 1651,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1628,
											"end": 1651,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 1628,
											"end": 1651,
											"name": "tag",
											"source": 3,
											"value": "27"
										},
										{
											"begin": 1628,
											"end": 1651,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1628,
											"end": 1651,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 1628,
											"end": 1651,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "28"
										},
										{
											"begin": 1628,
											"end": 1651,
											"name": "PUSH",
											"source": 3,
											"value": "1B"
										},
										{
											"begin": 1628,
											"end": 1651,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 1628,
											"end": 1651,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1628,
											"end": 1651,
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 1628,
											"end": 1651,
											"name": "tag",
											"source": 3,
											"value": "28"
										},
										{
											"begin": 1628,
											"end": 1651,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1628,
											"end": 1651,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 1628,
											"end": 1651,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 7853,
											"end": 7878,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 7853,
											"end": 7878,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 7853,
											"end": 7878,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 7841,
											"end": 7843,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 7826,
											"end": 7844,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1628,
											"end": 1651,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "25"
										},
										{
											"begin": 7808,
											"end": 7884,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 3061,
											"end": 3398,
											"name": "tag",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 3061,
											"end": 3398,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3061,
											"end": 3398,
											"name": "CALLVALUE",
											"source": 3
										},
										{
											"begin": 3061,
											"end": 3398,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 3061,
											"end": 3398,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 3061,
											"end": 3398,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "32"
										},
										{
											"begin": 3061,
											"end": 3398,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 3061,
											"end": 3398,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 3061,
											"end": 3398,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 3061,
											"end": 3398,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 3061,
											"end": 3398,
											"name": "tag",
											"source": 3,
											"value": "32"
										},
										{
											"begin": 3061,
											"end": 3398,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3061,
											"end": 3398,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 3061,
											"end": 3398,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "28"
										},
										{
											"begin": 3061,
											"end": 3398,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "34"
										},
										{
											"begin": 3061,
											"end": 3398,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 1550,
											"end": 1574,
											"name": "tag",
											"source": 3,
											"value": "5"
										},
										{
											"begin": 1550,
											"end": 1574,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1550,
											"end": 1574,
											"name": "CALLVALUE",
											"source": 3
										},
										{
											"begin": 1550,
											"end": 1574,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1550,
											"end": 1574,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 1550,
											"end": 1574,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "36"
										},
										{
											"begin": 1550,
											"end": 1574,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 1550,
											"end": 1574,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 1550,
											"end": 1574,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1550,
											"end": 1574,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 1550,
											"end": 1574,
											"name": "tag",
											"source": 3,
											"value": "36"
										},
										{
											"begin": 1550,
											"end": 1574,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1550,
											"end": 1574,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 1550,
											"end": 1574,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "28"
										},
										{
											"begin": 1550,
											"end": 1574,
											"name": "PUSH",
											"source": 3,
											"value": "18"
										},
										{
											"begin": 1550,
											"end": 1574,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 1550,
											"end": 1574,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1550,
											"end": 1574,
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 5637,
											"end": 5758,
											"name": "tag",
											"source": 3,
											"value": "6"
										},
										{
											"begin": 5637,
											"end": 5758,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 5637,
											"end": 5758,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 5637,
											"end": 5758,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "41"
										},
										{
											"begin": 5637,
											"end": 5758,
											"name": "CALLDATASIZE",
											"source": 3
										},
										{
											"begin": 5637,
											"end": 5758,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 5637,
											"end": 5758,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "42"
										},
										{
											"begin": 5637,
											"end": 5758,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 5637,
											"end": 5758,
											"name": "tag",
											"source": 3,
											"value": "41"
										},
										{
											"begin": 5637,
											"end": 5758,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 5637,
											"end": 5758,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "43"
										},
										{
											"begin": 5637,
											"end": 5758,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 5637,
											"end": 5758,
											"name": "tag",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 5637,
											"end": 5758,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 5637,
											"end": 5758,
											"name": "STOP",
											"source": 3
										},
										{
											"begin": 1402,
											"end": 1444,
											"name": "tag",
											"source": 3,
											"value": "7"
										},
										{
											"begin": 1402,
											"end": 1444,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1402,
											"end": 1444,
											"name": "CALLVALUE",
											"source": 3
										},
										{
											"begin": 1402,
											"end": 1444,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1402,
											"end": 1444,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 1402,
											"end": 1444,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "44"
										},
										{
											"begin": 1402,
											"end": 1444,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 1402,
											"end": 1444,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 1402,
											"end": 1444,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1402,
											"end": 1444,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 1402,
											"end": 1444,
											"name": "tag",
											"source": 3,
											"value": "44"
										},
										{
											"begin": 1402,
											"end": 1444,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1402,
											"end": 1444,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "28"
										},
										{
											"begin": 1402,
											"end": 1444,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "46"
										},
										{
											"begin": 1402,
											"end": 1444,
											"name": "CALLDATASIZE",
											"source": 3
										},
										{
											"begin": 1402,
											"end": 1444,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 1402,
											"end": 1444,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "47"
										},
										{
											"begin": 1402,
											"end": 1444,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 1402,
											"end": 1444,
											"name": "tag",
											"source": 3,
											"value": "46"
										},
										{
											"begin": 1402,
											"end": 1444,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1402,
											"end": 1444,
											"name": "PUSH",
											"source": 3,
											"value": "3"
										},
										{
											"begin": 1402,
											"end": 1444,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 1402,
											"end": 1444,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 1402,
											"end": 1444,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 1402,
											"end": 1444,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1402,
											"end": 1444,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1402,
											"end": 1444,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 1402,
											"end": 1444,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 1402,
											"end": 1444,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1402,
											"end": 1444,
											"name": "KECCAK256",
											"source": 3
										},
										{
											"begin": 1402,
											"end": 1444,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 1402,
											"end": 1444,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1402,
											"end": 1444,
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 2160,
											"end": 3052,
											"name": "tag",
											"source": 3,
											"value": "8"
										},
										{
											"begin": 2160,
											"end": 3052,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2160,
											"end": 3052,
											"name": "CALLVALUE",
											"source": 3
										},
										{
											"begin": 2160,
											"end": 3052,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2160,
											"end": 3052,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 2160,
											"end": 3052,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "50"
										},
										{
											"begin": 2160,
											"end": 3052,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 2160,
											"end": 3052,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 2160,
											"end": 3052,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2160,
											"end": 3052,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 2160,
											"end": 3052,
											"name": "tag",
											"source": 3,
											"value": "50"
										},
										{
											"begin": 2160,
											"end": 3052,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2160,
											"end": 3052,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 2160,
											"end": 3052,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "52"
										},
										{
											"begin": 2160,
											"end": 3052,
											"name": "CALLDATASIZE",
											"source": 3
										},
										{
											"begin": 2160,
											"end": 3052,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 2160,
											"end": 3052,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "53"
										},
										{
											"begin": 2160,
											"end": 3052,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 2160,
											"end": 3052,
											"name": "tag",
											"source": 3,
											"value": "52"
										},
										{
											"begin": 2160,
											"end": 3052,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2160,
											"end": 3052,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "54"
										},
										{
											"begin": 2160,
											"end": 3052,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 1714,
											"end": 1817,
											"name": "tag",
											"source": 6,
											"value": "9"
										},
										{
											"begin": 1714,
											"end": 1817,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1714,
											"end": 1817,
											"name": "CALLVALUE",
											"source": 6
										},
										{
											"begin": 1714,
											"end": 1817,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1714,
											"end": 1817,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 1714,
											"end": 1817,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "55"
										},
										{
											"begin": 1714,
											"end": 1817,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 1714,
											"end": 1817,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 1714,
											"end": 1817,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1714,
											"end": 1817,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 1714,
											"end": 1817,
											"name": "tag",
											"source": 6,
											"value": "55"
										},
										{
											"begin": 1714,
											"end": 1817,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1714,
											"end": 1817,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1714,
											"end": 1817,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 1714,
											"end": 1817,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "57"
										},
										{
											"begin": 1714,
											"end": 1817,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 5521,
											"end": 5629,
											"name": "tag",
											"source": 3,
											"value": "10"
										},
										{
											"begin": 5521,
											"end": 5629,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 5521,
											"end": 5629,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 5521,
											"end": 5629,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "59"
										},
										{
											"begin": 5521,
											"end": 5629,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 1063,
											"end": 1150,
											"name": "tag",
											"source": 6,
											"value": "11"
										},
										{
											"begin": 1063,
											"end": 1150,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1063,
											"end": 1150,
											"name": "CALLVALUE",
											"source": 6
										},
										{
											"begin": 1063,
											"end": 1150,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1063,
											"end": 1150,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 1063,
											"end": 1150,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "60"
										},
										{
											"begin": 1063,
											"end": 1150,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 1063,
											"end": 1150,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 1063,
											"end": 1150,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1063,
											"end": 1150,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 1063,
											"end": 1150,
											"name": "tag",
											"source": 6,
											"value": "60"
										},
										{
											"begin": 1063,
											"end": 1150,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1136,
											"end": 1142,
											"name": "PUSH",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 1136,
											"end": 1142,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1136,
											"end": 1142,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 1063,
											"end": 1150,
											"name": "tag",
											"source": 6,
											"value": "61"
										},
										{
											"begin": 1063,
											"end": 1150,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1063,
											"end": 1150,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 1063,
											"end": 1150,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2872,
											"end": 2904,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 2872,
											"end": 2904,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 2872,
											"end": 2904,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 2854,
											"end": 2905,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 2854,
											"end": 2905,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 2842,
											"end": 2844,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 2827,
											"end": 2845,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1063,
											"end": 1150,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "25"
										},
										{
											"begin": 2809,
											"end": 2911,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 1451,
											"end": 1485,
											"name": "tag",
											"source": 3,
											"value": "12"
										},
										{
											"begin": 1451,
											"end": 1485,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1451,
											"end": 1485,
											"name": "CALLVALUE",
											"source": 3
										},
										{
											"begin": 1451,
											"end": 1485,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1451,
											"end": 1485,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 1451,
											"end": 1485,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "65"
										},
										{
											"begin": 1451,
											"end": 1485,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 1451,
											"end": 1485,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 1451,
											"end": 1485,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1451,
											"end": 1485,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 1451,
											"end": 1485,
											"name": "tag",
											"source": 3,
											"value": "65"
										},
										{
											"begin": 1451,
											"end": 1485,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1451,
											"end": 1485,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 1451,
											"end": 1485,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 1451,
											"end": 1485,
											"name": "PUSH",
											"source": 3,
											"value": "5"
										},
										{
											"begin": 1451,
											"end": 1485,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 1451,
											"end": 1485,
											"name": "PUSH",
											"source": 3,
											"value": "6"
										},
										{
											"begin": 1451,
											"end": 1485,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 1451,
											"end": 1485,
											"name": "PUSH",
											"source": 3,
											"value": "7"
										},
										{
											"begin": 1451,
											"end": 1485,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 1451,
											"end": 1485,
											"name": "PUSH",
											"source": 3,
											"value": "8"
										},
										{
											"begin": 1451,
											"end": 1485,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 1451,
											"end": 1485,
											"name": "PUSH",
											"source": 3,
											"value": "9"
										},
										{
											"begin": 1451,
											"end": 1485,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 1451,
											"end": 1485,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "66"
										},
										{
											"begin": 1451,
											"end": 1485,
											"name": "SWAP6",
											"source": 3
										},
										{
											"begin": 1451,
											"end": 1485,
											"name": "SWAP5",
											"source": 3
										},
										{
											"begin": 1451,
											"end": 1485,
											"name": "SWAP4",
											"source": 3
										},
										{
											"begin": 1451,
											"end": 1485,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 1451,
											"end": 1485,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 1451,
											"end": 1485,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1451,
											"end": 1485,
											"name": "DUP7",
											"source": 3
										},
										{
											"begin": 1451,
											"end": 1485,
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 1451,
											"end": 1485,
											"name": "tag",
											"source": 3,
											"value": "66"
										},
										{
											"begin": 1451,
											"end": 1485,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1451,
											"end": 1485,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 1451,
											"end": 1485,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1451,
											"end": 1485,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 8736,
											"end": 8761,
											"name": "SWAP7",
											"source": 10
										},
										{
											"begin": 8736,
											"end": 8761,
											"name": "DUP8",
											"source": 10
										},
										{
											"begin": 8736,
											"end": 8761,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 8792,
											"end": 8794,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 8777,
											"end": 8795,
											"name": "DUP8",
											"source": 10
										},
										{
											"begin": 8777,
											"end": 8795,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 8770,
											"end": 8804,
											"name": "SWAP6",
											"source": 10
										},
										{
											"begin": 8770,
											"end": 8804,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 8770,
											"end": 8804,
											"name": "SWAP6",
											"source": 10
										},
										{
											"begin": 8770,
											"end": 8804,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 8820,
											"end": 8838,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 8820,
											"end": 8838,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 8820,
											"end": 8838,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 8813,
											"end": 8847,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 8813,
											"end": 8847,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 8813,
											"end": 8847,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 8813,
											"end": 8847,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 8878,
											"end": 8880,
											"name": "PUSH",
											"source": 10,
											"value": "60"
										},
										{
											"begin": 8863,
											"end": 8881,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 8863,
											"end": 8881,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 8856,
											"end": 8890,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 8921,
											"end": 8924,
											"name": "PUSH",
											"source": 10,
											"value": "80"
										},
										{
											"begin": 8906,
											"end": 8925,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 8906,
											"end": 8925,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 8899,
											"end": 8934,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 8965,
											"end": 8968,
											"name": "PUSH",
											"source": 10,
											"value": "A0"
										},
										{
											"begin": 8950,
											"end": 8969,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 8950,
											"end": 8969,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 8943,
											"end": 8978,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 8723,
											"end": 8726,
											"name": "PUSH",
											"source": 10,
											"value": "C0"
										},
										{
											"begin": 8708,
											"end": 8727,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1451,
											"end": 1485,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "25"
										},
										{
											"begin": 8690,
											"end": 8984,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 1525,
											"end": 1543,
											"name": "tag",
											"source": 3,
											"value": "13"
										},
										{
											"begin": 1525,
											"end": 1543,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1525,
											"end": 1543,
											"name": "CALLVALUE",
											"source": 3
										},
										{
											"begin": 1525,
											"end": 1543,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1525,
											"end": 1543,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 1525,
											"end": 1543,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "70"
										},
										{
											"begin": 1525,
											"end": 1543,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 1525,
											"end": 1543,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 1525,
											"end": 1543,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1525,
											"end": 1543,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 1525,
											"end": 1543,
											"name": "tag",
											"source": 3,
											"value": "70"
										},
										{
											"begin": 1525,
											"end": 1543,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1525,
											"end": 1543,
											"name": "PUSH",
											"source": 3,
											"value": "17"
										},
										{
											"begin": 1525,
											"end": 1543,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 1525,
											"end": 1543,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "61"
										},
										{
											"begin": 1525,
											"end": 1543,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1525,
											"end": 1543,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 1525,
											"end": 1543,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1525,
											"end": 1543,
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 3525,
											"end": 5391,
											"name": "tag",
											"source": 3,
											"value": "14"
										},
										{
											"begin": 3525,
											"end": 5391,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3525,
											"end": 5391,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 3525,
											"end": 5391,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "76"
										},
										{
											"begin": 3525,
											"end": 5391,
											"name": "CALLDATASIZE",
											"source": 3
										},
										{
											"begin": 3525,
											"end": 5391,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 3525,
											"end": 5391,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "42"
										},
										{
											"begin": 3525,
											"end": 5391,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 3525,
											"end": 5391,
											"name": "tag",
											"source": 3,
											"value": "76"
										},
										{
											"begin": 3525,
											"end": 5391,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3525,
											"end": 5391,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "77"
										},
										{
											"begin": 3525,
											"end": 5391,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 3407,
											"end": 3517,
											"name": "tag",
											"source": 3,
											"value": "15"
										},
										{
											"begin": 3407,
											"end": 3517,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3407,
											"end": 3517,
											"name": "CALLVALUE",
											"source": 3
										},
										{
											"begin": 3407,
											"end": 3517,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 3407,
											"end": 3517,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 3407,
											"end": 3517,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "78"
										},
										{
											"begin": 3407,
											"end": 3517,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 3407,
											"end": 3517,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 3407,
											"end": 3517,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 3407,
											"end": 3517,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 3407,
											"end": 3517,
											"name": "tag",
											"source": 3,
											"value": "78"
										},
										{
											"begin": 3407,
											"end": 3517,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3407,
											"end": 3517,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 3407,
											"end": 3517,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "79"
										},
										{
											"begin": 3407,
											"end": 3517,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "80"
										},
										{
											"begin": 3407,
											"end": 3517,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 3407,
											"end": 3517,
											"name": "tag",
											"source": 3,
											"value": "79"
										},
										{
											"begin": 3407,
											"end": 3517,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3407,
											"end": 3517,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 3407,
											"end": 3517,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 4554,
											"end": 4568,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 4554,
											"end": 4568,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 4547,
											"end": 4569,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 4529,
											"end": 4570,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 4529,
											"end": 4570,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 4517,
											"end": 4519,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 4502,
											"end": 4520,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 3407,
											"end": 3517,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "25"
										},
										{
											"begin": 4484,
											"end": 4576,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 1349,
											"end": 1395,
											"name": "tag",
											"source": 3,
											"value": "16"
										},
										{
											"begin": 1349,
											"end": 1395,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1349,
											"end": 1395,
											"name": "CALLVALUE",
											"source": 3
										},
										{
											"begin": 1349,
											"end": 1395,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1349,
											"end": 1395,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 1349,
											"end": 1395,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "83"
										},
										{
											"begin": 1349,
											"end": 1395,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 1349,
											"end": 1395,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 1349,
											"end": 1395,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1349,
											"end": 1395,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 1349,
											"end": 1395,
											"name": "tag",
											"source": 3,
											"value": "83"
										},
										{
											"begin": 1349,
											"end": 1395,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1349,
											"end": 1395,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "84"
										},
										{
											"begin": 1349,
											"end": 1395,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "85"
										},
										{
											"begin": 1349,
											"end": 1395,
											"name": "CALLDATASIZE",
											"source": 3
										},
										{
											"begin": 1349,
											"end": 1395,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 1349,
											"end": 1395,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "47"
										},
										{
											"begin": 1349,
											"end": 1395,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 1349,
											"end": 1395,
											"name": "tag",
											"source": 3,
											"value": "85"
										},
										{
											"begin": 1349,
											"end": 1395,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1349,
											"end": 1395,
											"name": "PUSH",
											"source": 3,
											"value": "2"
										},
										{
											"begin": 1349,
											"end": 1395,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 1349,
											"end": 1395,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1349,
											"end": 1395,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1349,
											"end": 1395,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 1349,
											"end": 1395,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 1349,
											"end": 1395,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 1349,
											"end": 1395,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 1349,
											"end": 1395,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 1349,
											"end": 1395,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 1349,
											"end": 1395,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1349,
											"end": 1395,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 1349,
											"end": 1395,
											"name": "KECCAK256",
											"source": 3
										},
										{
											"begin": 1349,
											"end": 1395,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1349,
											"end": 1395,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 1349,
											"end": 1395,
											"name": "PUSH",
											"source": 3,
											"value": "1"
										},
										{
											"begin": 1349,
											"end": 1395,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 1349,
											"end": 1395,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 1349,
											"end": 1395,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 1349,
											"end": 1395,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 1349,
											"end": 1395,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 1349,
											"end": 1395,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 1349,
											"end": 1395,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 1349,
											"end": 1395,
											"name": "PUSH",
											"source": 3,
											"value": "3"
										},
										{
											"begin": 1349,
											"end": 1395,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 1349,
											"end": 1395,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 1349,
											"end": 1395,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 1349,
											"end": 1395,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 1349,
											"end": 1395,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1349,
											"end": 1395,
											"name": "SWAP4",
											"source": 3
										},
										{
											"begin": 1349,
											"end": 1395,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 1349,
											"end": 1395,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 1349,
											"end": 1395,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 1349,
											"end": 1395,
											"name": "SWAP4",
											"source": 3
										},
										{
											"begin": 1349,
											"end": 1395,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 1349,
											"end": 1395,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1349,
											"end": 1395,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 1349,
											"end": 1395,
											"name": "PUSH",
											"source": 3,
											"value": "FF"
										},
										{
											"begin": 1349,
											"end": 1395,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1349,
											"end": 1395,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 1349,
											"end": 1395,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 1349,
											"end": 1395,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 1349,
											"end": 1395,
											"name": "PUSH",
											"source": 3,
											"value": "100"
										},
										{
											"begin": 1349,
											"end": 1395,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1349,
											"end": 1395,
											"name": "DIV",
											"source": 3
										},
										{
											"begin": 1349,
											"end": 1395,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 1349,
											"end": 1395,
											"name": "DUP7",
											"source": 3
										},
										{
											"begin": 1349,
											"end": 1395,
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 1349,
											"end": 1395,
											"name": "tag",
											"source": 3,
											"value": "84"
										},
										{
											"begin": 1349,
											"end": 1395,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1349,
											"end": 1395,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 1349,
											"end": 1395,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1349,
											"end": 1395,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 8164,
											"end": 8189,
											"name": "SWAP7",
											"source": 10
										},
										{
											"begin": 8164,
											"end": 8189,
											"name": "DUP8",
											"source": 10
										},
										{
											"begin": 8164,
											"end": 8189,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 8220,
											"end": 8222,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 8205,
											"end": 8223,
											"name": "DUP8",
											"source": 10
										},
										{
											"begin": 8205,
											"end": 8223,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 8198,
											"end": 8232,
											"name": "SWAP6",
											"source": 10
										},
										{
											"begin": 8198,
											"end": 8232,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 8198,
											"end": 8232,
											"name": "SWAP6",
											"source": 10
										},
										{
											"begin": 8198,
											"end": 8232,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 8248,
											"end": 8266,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 8248,
											"end": 8266,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 8248,
											"end": 8266,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 8241,
											"end": 8275,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 8241,
											"end": 8275,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 8241,
											"end": 8275,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 8241,
											"end": 8275,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 8306,
											"end": 8308,
											"name": "PUSH",
											"source": 10,
											"value": "60"
										},
										{
											"begin": 8291,
											"end": 8309,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 8291,
											"end": 8309,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 8284,
											"end": 8318,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 8362,
											"end": 8376,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 8355,
											"end": 8377,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 8349,
											"end": 8352,
											"name": "PUSH",
											"source": 10,
											"value": "80"
										},
										{
											"begin": 8334,
											"end": 8353,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 8334,
											"end": 8353,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 8327,
											"end": 8378,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 8422,
											"end": 8436,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 8415,
											"end": 8437,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 8409,
											"end": 8412,
											"name": "PUSH",
											"source": 10,
											"value": "A0"
										},
										{
											"begin": 8394,
											"end": 8413,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 8394,
											"end": 8413,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 8387,
											"end": 8438,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 8151,
											"end": 8154,
											"name": "PUSH",
											"source": 10,
											"value": "C0"
										},
										{
											"begin": 8136,
											"end": 8155,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1349,
											"end": 1395,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "25"
										},
										{
											"begin": 8118,
											"end": 8444,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 1972,
											"end": 2173,
											"name": "tag",
											"source": 6,
											"value": "17"
										},
										{
											"begin": 1972,
											"end": 2173,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1972,
											"end": 2173,
											"name": "CALLVALUE",
											"source": 6
										},
										{
											"begin": 1972,
											"end": 2173,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1972,
											"end": 2173,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 1972,
											"end": 2173,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "89"
										},
										{
											"begin": 1972,
											"end": 2173,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 1972,
											"end": 2173,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 1972,
											"end": 2173,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1972,
											"end": 2173,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 1972,
											"end": 2173,
											"name": "tag",
											"source": 6,
											"value": "89"
										},
										{
											"begin": 1972,
											"end": 2173,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1972,
											"end": 2173,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 1972,
											"end": 2173,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "91"
										},
										{
											"begin": 1972,
											"end": 2173,
											"name": "CALLDATASIZE",
											"source": 6
										},
										{
											"begin": 1972,
											"end": 2173,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 1972,
											"end": 2173,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "47"
										},
										{
											"begin": 1972,
											"end": 2173,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 1972,
											"end": 2173,
											"name": "tag",
											"source": 6,
											"value": "91"
										},
										{
											"begin": 1972,
											"end": 2173,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1972,
											"end": 2173,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "92"
										},
										{
											"begin": 1972,
											"end": 2173,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 5399,
											"end": 5510,
											"name": "tag",
											"source": 3,
											"value": "18"
										},
										{
											"begin": 5399,
											"end": 5510,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 5399,
											"end": 5510,
											"name": "CALLVALUE",
											"source": 3
										},
										{
											"begin": 5399,
											"end": 5510,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 5399,
											"end": 5510,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 5399,
											"end": 5510,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "93"
										},
										{
											"begin": 5399,
											"end": 5510,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 5399,
											"end": 5510,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 5399,
											"end": 5510,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 5399,
											"end": 5510,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 5399,
											"end": 5510,
											"name": "tag",
											"source": 3,
											"value": "93"
										},
										{
											"begin": 5399,
											"end": 5510,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5399,
											"end": 5510,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "28"
										},
										{
											"begin": 5399,
											"end": 5510,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "95"
										},
										{
											"begin": 5399,
											"end": 5510,
											"name": "CALLDATASIZE",
											"source": 3
										},
										{
											"begin": 5399,
											"end": 5510,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 5399,
											"end": 5510,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "47"
										},
										{
											"begin": 5399,
											"end": 5510,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 5399,
											"end": 5510,
											"name": "tag",
											"source": 3,
											"value": "95"
										},
										{
											"begin": 5399,
											"end": 5510,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5486,
											"end": 5502,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 5486,
											"end": 5502,
											"name": "BALANCE",
											"source": 3
										},
										{
											"begin": 5486,
											"end": 5502,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 5399,
											"end": 5510,
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 3061,
											"end": 3398,
											"name": "tag",
											"source": 3,
											"value": "34"
										},
										{
											"begin": 3061,
											"end": 3398,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3140,
											"end": 3159,
											"name": "PUSH",
											"source": 3,
											"value": "F"
										},
										{
											"begin": 3140,
											"end": 3159,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 3099,
											"end": 3106,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 3099,
											"end": 3106,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3122,
											"end": 3137,
											"name": "TIMESTAMP",
											"source": 3
										},
										{
											"begin": 3122,
											"end": 3159,
											"name": "LT",
											"source": 3
										},
										{
											"begin": 3119,
											"end": 3391,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 3119,
											"end": 3391,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "100"
										},
										{
											"begin": 3119,
											"end": 3391,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3183,
											"end": 3184,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 3183,
											"end": 3184,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3061,
											"end": 3398,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										},
										{
											"begin": 3119,
											"end": 3391,
											"name": "tag",
											"source": 3,
											"value": "100"
										},
										{
											"begin": 3119,
											"end": 3391,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3250,
											"end": 3267,
											"name": "PUSH",
											"source": 3,
											"value": "10"
										},
										{
											"begin": 3250,
											"end": 3267,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 3232,
											"end": 3247,
											"name": "TIMESTAMP",
											"source": 3
										},
										{
											"begin": 3232,
											"end": 3267,
											"name": "GT",
											"source": 3
										},
										{
											"begin": 3229,
											"end": 3380,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 3229,
											"end": 3380,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "102"
										},
										{
											"begin": 3229,
											"end": 3380,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3295,
											"end": 3296,
											"name": "PUSH",
											"source": 3,
											"value": "2"
										},
										{
											"begin": 3295,
											"end": 3296,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3061,
											"end": 3398,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										},
										{
											"begin": 3229,
											"end": 3380,
											"name": "tag",
											"source": 3,
											"value": "102"
										},
										{
											"begin": 3229,
											"end": 3380,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3353,
											"end": 3354,
											"name": "PUSH",
											"source": 3,
											"value": "1"
										},
										{
											"begin": 3353,
											"end": 3354,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3061,
											"end": 3398,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										},
										{
											"begin": 5637,
											"end": 5758,
											"name": "tag",
											"source": 3,
											"value": "43"
										},
										{
											"begin": 5637,
											"end": 5758,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 5710,
											"end": 5720,
											"name": "CALLER",
											"source": 3
										},
										{
											"begin": 5702,
											"end": 5750,
											"name": "PUSH",
											"source": 3,
											"value": "8FC"
										},
										{
											"begin": 5731,
											"end": 5749,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "105"
										},
										{
											"begin": 5743,
											"end": 5749,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 5731,
											"end": 5740,
											"name": "CALLVALUE",
											"source": 3
										},
										{
											"begin": 5731,
											"end": 5749,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "106"
										},
										{
											"begin": 5731,
											"end": 5749,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 5731,
											"end": 5749,
											"name": "tag",
											"source": 3,
											"value": "105"
										},
										{
											"begin": 5731,
											"end": 5749,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 5702,
											"end": 5750,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 5702,
											"end": 5750,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 5702,
											"end": 5750,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 5702,
											"end": 5750,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 5702,
											"end": 5750,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 5702,
											"end": 5750,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 5702,
											"end": 5750,
											"name": "MUL",
											"source": 3
										},
										{
											"begin": 5702,
											"end": 5750,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 5702,
											"end": 5750,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 5702,
											"end": 5750,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 5702,
											"end": 5750,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 5702,
											"end": 5750,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 5702,
											"end": 5750,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 5702,
											"end": 5750,
											"name": "DUP9",
											"source": 3
										},
										{
											"begin": 5702,
											"end": 5750,
											"name": "DUP9",
											"source": 3
										},
										{
											"begin": 5702,
											"end": 5750,
											"name": "CALL",
											"source": 3
										},
										{
											"begin": 5702,
											"end": 5750,
											"name": "SWAP4",
											"source": 3
										},
										{
											"begin": 5702,
											"end": 5750,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 5702,
											"end": 5750,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 5702,
											"end": 5750,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 5702,
											"end": 5750,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 5702,
											"end": 5750,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 5702,
											"end": 5750,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 5702,
											"end": 5750,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 5702,
											"end": 5750,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "108"
										},
										{
											"begin": 5702,
											"end": 5750,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 5702,
											"end": 5750,
											"name": "RETURNDATASIZE",
											"source": 3
										},
										{
											"begin": 5702,
											"end": 5750,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 5702,
											"end": 5750,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 5702,
											"end": 5750,
											"name": "RETURNDATACOPY",
											"source": 3
										},
										{
											"begin": 5702,
											"end": 5750,
											"name": "RETURNDATASIZE",
											"source": 3
										},
										{
											"begin": 5702,
											"end": 5750,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 5702,
											"end": 5750,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 5702,
											"end": 5750,
											"name": "tag",
											"source": 3,
											"value": "108"
										},
										{
											"begin": 5702,
											"end": 5750,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 5702,
											"end": 5750,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 5637,
											"end": 5758,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 5637,
											"end": 5758,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										},
										{
											"begin": 2160,
											"end": 3052,
											"name": "tag",
											"source": 3,
											"value": "54"
										},
										{
											"begin": 2160,
											"end": 3052,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2341,
											"end": 2350,
											"name": "PUSH",
											"source": 3,
											"value": "B"
										},
										{
											"begin": 2341,
											"end": 2379,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2341,
											"end": 2379,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2341,
											"end": 2379,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2341,
											"end": 2379,
											"name": "DUP8",
											"source": 3
										},
										{
											"begin": 2341,
											"end": 2379,
											"name": "AND",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 2341,
											"end": 2379,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 2341,
											"end": 2379,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 2341,
											"end": 2379,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 2341,
											"end": 2379,
											"name": "OR",
											"source": 3
										},
										{
											"begin": 2341,
											"end": 2379,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2341,
											"end": 2379,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 2341,
											"end": 2379,
											"name": "SSTORE",
											"source": 3
										},
										{
											"begin": 2390,
											"end": 2409,
											"name": "PUSH",
											"source": 3,
											"value": "C"
										},
										{
											"begin": 2390,
											"end": 2422,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2390,
											"end": 2422,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 2390,
											"end": 2422,
											"name": "DUP7",
											"source": 3
										},
										{
											"begin": 2390,
											"end": 2422,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 2390,
											"end": 2422,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 2390,
											"end": 2422,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2390,
											"end": 2422,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 2390,
											"end": 2422,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 2390,
											"end": 2422,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 2390,
											"end": 2422,
											"name": "OR",
											"source": 3
										},
										{
											"begin": 2390,
											"end": 2422,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2390,
											"end": 2422,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 2390,
											"end": 2422,
											"name": "SSTORE",
											"source": 3
										},
										{
											"begin": 2433,
											"end": 2452,
											"name": "PUSH",
											"source": 3,
											"value": "D"
										},
										{
											"begin": 2433,
											"end": 2465,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2433,
											"end": 2465,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 2433,
											"end": 2465,
											"name": "SWAP4",
											"source": 3
										},
										{
											"begin": 2433,
											"end": 2465,
											"name": "DUP7",
											"source": 3
										},
										{
											"begin": 2433,
											"end": 2465,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 2433,
											"end": 2465,
											"name": "SWAP4",
											"source": 3
										},
										{
											"begin": 2433,
											"end": 2465,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2433,
											"end": 2465,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 2433,
											"end": 2465,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 2433,
											"end": 2465,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 2433,
											"end": 2465,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2433,
											"end": 2465,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 2433,
											"end": 2465,
											"name": "OR",
											"source": 3
										},
										{
											"begin": 2433,
											"end": 2465,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2433,
											"end": 2465,
											"name": "SSTORE",
											"source": 3
										},
										{
											"begin": 2523,
											"end": 2560,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 2523,
											"end": 2560,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2523,
											"end": 2560,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "313CE567"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2523,
											"end": 2560,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 2523,
											"end": 2560,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 2523,
											"end": 2560,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2523,
											"end": 2560,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 2523,
											"end": 2558,
											"name": "PUSH",
											"source": 3,
											"value": "313CE567"
										},
										{
											"begin": 2523,
											"end": 2558,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 2523,
											"end": 2560,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 2523,
											"end": 2560,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2523,
											"end": 2560,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 2523,
											"end": 2560,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2523,
											"end": 2560,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 2523,
											"end": 2560,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 2523,
											"end": 2560,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 2523,
											"end": 2560,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2523,
											"end": 2560,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 2523,
											"end": 2560,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2523,
											"end": 2560,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 2523,
											"end": 2560,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2523,
											"end": 2560,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 2523,
											"end": 2560,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2523,
											"end": 2560,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 2390,
											"end": 2422,
											"name": "DUP7",
											"source": 3
										},
										{
											"begin": 2523,
											"end": 2560,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2523,
											"end": 2560,
											"name": "EXTCODESIZE",
											"source": 3
										},
										{
											"begin": 2523,
											"end": 2560,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 2523,
											"end": 2560,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2523,
											"end": 2560,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 2523,
											"end": 2560,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "110"
										},
										{
											"begin": 2523,
											"end": 2560,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 2523,
											"end": 2560,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 2523,
											"end": 2560,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2523,
											"end": 2560,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 2523,
											"end": 2560,
											"name": "tag",
											"source": 3,
											"value": "110"
										},
										{
											"begin": 2523,
											"end": 2560,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2523,
											"end": 2560,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2523,
											"end": 2560,
											"name": "GAS",
											"source": 3
										},
										{
											"begin": 2523,
											"end": 2560,
											"name": "STATICCALL",
											"source": 3
										},
										{
											"begin": 2523,
											"end": 2560,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 2523,
											"end": 2560,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2523,
											"end": 2560,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 2523,
											"end": 2560,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "112"
										},
										{
											"begin": 2523,
											"end": 2560,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 2523,
											"end": 2560,
											"name": "RETURNDATASIZE",
											"source": 3
										},
										{
											"begin": 2523,
											"end": 2560,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 2523,
											"end": 2560,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2523,
											"end": 2560,
											"name": "RETURNDATACOPY",
											"source": 3
										},
										{
											"begin": 2523,
											"end": 2560,
											"name": "RETURNDATASIZE",
											"source": 3
										},
										{
											"begin": 2523,
											"end": 2560,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 2523,
											"end": 2560,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 2523,
											"end": 2560,
											"name": "tag",
											"source": 3,
											"value": "112"
										},
										{
											"begin": 2523,
											"end": 2560,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2523,
											"end": 2560,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2523,
											"end": 2560,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2523,
											"end": 2560,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2523,
											"end": 2560,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2523,
											"end": 2560,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 2523,
											"end": 2560,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 2523,
											"end": 2560,
											"name": "RETURNDATASIZE",
											"source": 3
										},
										{
											"begin": 2523,
											"end": 2560,
											"name": "PUSH",
											"source": 3,
											"value": "1F"
										},
										{
											"begin": 2523,
											"end": 2560,
											"name": "NOT",
											"source": 3
										},
										{
											"begin": 2523,
											"end": 2560,
											"name": "PUSH",
											"source": 3,
											"value": "1F"
										},
										{
											"begin": 2523,
											"end": 2560,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 2523,
											"end": 2560,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2523,
											"end": 2560,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 2523,
											"end": 2560,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 2523,
											"end": 2560,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2523,
											"end": 2560,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2523,
											"end": 2560,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 2523,
											"end": 2560,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 2523,
											"end": 2560,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2523,
											"end": 2560,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 2523,
											"end": 2560,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2523,
											"end": 2560,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2523,
											"end": 2560,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "113"
										},
										{
											"begin": 2523,
											"end": 2560,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 2523,
											"end": 2560,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2523,
											"end": 2560,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "114"
										},
										{
											"begin": 2523,
											"end": 2560,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 2523,
											"end": 2560,
											"name": "tag",
											"source": 3,
											"value": "113"
										},
										{
											"begin": 2523,
											"end": 2560,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2510,
											"end": 2561,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "115"
										},
										{
											"begin": 2510,
											"end": 2561,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2510,
											"end": 2512,
											"name": "PUSH",
											"source": 3,
											"value": "A"
										},
										{
											"begin": 2510,
											"end": 2561,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "116"
										},
										{
											"begin": 2510,
											"end": 2561,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 2510,
											"end": 2561,
											"name": "tag",
											"source": 3,
											"value": "115"
										},
										{
											"begin": 2510,
											"end": 2561,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2499,
											"end": 2507,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 2499,
											"end": 2507,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 2499,
											"end": 2561,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "118"
										},
										{
											"begin": 2499,
											"end": 2561,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 2499,
											"end": 2561,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2499,
											"end": 2561,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "119"
										},
										{
											"begin": 2499,
											"end": 2561,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 2499,
											"end": 2561,
											"name": "tag",
											"source": 3,
											"value": "118"
										},
										{
											"begin": 2499,
											"end": 2561,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2476,
											"end": 2496,
											"name": "PUSH",
											"source": 3,
											"value": "E"
										},
										{
											"begin": 2476,
											"end": 2561,
											"name": "SSTORE",
											"source": 3
										},
										{
											"begin": 2594,
											"end": 2602,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 2594,
											"end": 2602,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2594,
											"end": 2602,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 2594,
											"end": 2602,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2594,
											"end": 2602,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 2572,
											"end": 2591,
											"name": "PUSH",
											"source": 3,
											"value": "F"
										},
										{
											"begin": 2572,
											"end": 2602,
											"name": "SSTORE",
											"source": 3
										},
										{
											"begin": 2633,
											"end": 2641,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 2633,
											"end": 2641,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2633,
											"end": 2641,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 2633,
											"end": 2641,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2633,
											"end": 2641,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 2613,
											"end": 2630,
											"name": "PUSH",
											"source": 3,
											"value": "10"
										},
										{
											"begin": 2613,
											"end": 2641,
											"name": "SSTORE",
											"source": 3
										},
										{
											"begin": 2681,
											"end": 2689,
											"name": "PUSH",
											"source": 3,
											"value": "60"
										},
										{
											"begin": 2681,
											"end": 2689,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 2681,
											"end": 2689,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2681,
											"end": 2689,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 2652,
											"end": 2678,
											"name": "PUSH",
											"source": 3,
											"value": "11"
										},
										{
											"begin": 2652,
											"end": 2689,
											"name": "SSTORE",
											"source": 3
										},
										{
											"begin": 2759,
											"end": 2778,
											"name": "PUSH",
											"source": 3,
											"value": "D"
										},
										{
											"begin": 2759,
											"end": 2778,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 2753,
											"end": 2790,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 2753,
											"end": 2790,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "313CE567"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2753,
											"end": 2790,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 2753,
											"end": 2790,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 2753,
											"end": 2790,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 2753,
											"end": 2790,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2759,
											"end": 2778,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2759,
											"end": 2778,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 2759,
											"end": 2778,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 2759,
											"end": 2778,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 2753,
											"end": 2788,
											"name": "PUSH",
											"source": 3,
											"value": "313CE567"
										},
										{
											"begin": 2753,
											"end": 2788,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 2753,
											"end": 2790,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 2753,
											"end": 2790,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2753,
											"end": 2790,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 2753,
											"end": 2790,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2753,
											"end": 2790,
											"name": "SWAP4",
											"source": 3
										},
										{
											"begin": 2753,
											"end": 2790,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 2753,
											"end": 2790,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 2753,
											"end": 2790,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2753,
											"end": 2790,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 2753,
											"end": 2790,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2753,
											"end": 2790,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 2759,
											"end": 2778,
											"name": "DUP7",
											"source": 3
										},
										{
											"begin": 2753,
											"end": 2790,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2753,
											"end": 2790,
											"name": "EXTCODESIZE",
											"source": 3
										},
										{
											"begin": 2753,
											"end": 2790,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 2753,
											"end": 2790,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2753,
											"end": 2790,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 2753,
											"end": 2790,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "123"
										},
										{
											"begin": 2753,
											"end": 2790,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 2753,
											"end": 2790,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 2753,
											"end": 2790,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2753,
											"end": 2790,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 2753,
											"end": 2790,
											"name": "tag",
											"source": 3,
											"value": "123"
										},
										{
											"begin": 2753,
											"end": 2790,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2753,
											"end": 2790,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2753,
											"end": 2790,
											"name": "GAS",
											"source": 3
										},
										{
											"begin": 2753,
											"end": 2790,
											"name": "STATICCALL",
											"source": 3
										},
										{
											"begin": 2753,
											"end": 2790,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 2753,
											"end": 2790,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2753,
											"end": 2790,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 2753,
											"end": 2790,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "125"
										},
										{
											"begin": 2753,
											"end": 2790,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 2753,
											"end": 2790,
											"name": "RETURNDATASIZE",
											"source": 3
										},
										{
											"begin": 2753,
											"end": 2790,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 2753,
											"end": 2790,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2753,
											"end": 2790,
											"name": "RETURNDATACOPY",
											"source": 3
										},
										{
											"begin": 2753,
											"end": 2790,
											"name": "RETURNDATASIZE",
											"source": 3
										},
										{
											"begin": 2753,
											"end": 2790,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 2753,
											"end": 2790,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 2753,
											"end": 2790,
											"name": "tag",
											"source": 3,
											"value": "125"
										},
										{
											"begin": 2753,
											"end": 2790,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2753,
											"end": 2790,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2753,
											"end": 2790,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2753,
											"end": 2790,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2753,
											"end": 2790,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2753,
											"end": 2790,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 2753,
											"end": 2790,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 2753,
											"end": 2790,
											"name": "RETURNDATASIZE",
											"source": 3
										},
										{
											"begin": 2753,
											"end": 2790,
											"name": "PUSH",
											"source": 3,
											"value": "1F"
										},
										{
											"begin": 2753,
											"end": 2790,
											"name": "NOT",
											"source": 3
										},
										{
											"begin": 2753,
											"end": 2790,
											"name": "PUSH",
											"source": 3,
											"value": "1F"
										},
										{
											"begin": 2753,
											"end": 2790,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 2753,
											"end": 2790,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2753,
											"end": 2790,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 2753,
											"end": 2790,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 2753,
											"end": 2790,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2753,
											"end": 2790,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2753,
											"end": 2790,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 2753,
											"end": 2790,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 2753,
											"end": 2790,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2753,
											"end": 2790,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 2753,
											"end": 2790,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2753,
											"end": 2790,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2753,
											"end": 2790,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "126"
										},
										{
											"begin": 2753,
											"end": 2790,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 2753,
											"end": 2790,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2753,
											"end": 2790,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "114"
										},
										{
											"begin": 2753,
											"end": 2790,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 2753,
											"end": 2790,
											"name": "tag",
											"source": 3,
											"value": "126"
										},
										{
											"begin": 2753,
											"end": 2790,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2740,
											"end": 2791,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "127"
										},
										{
											"begin": 2740,
											"end": 2791,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2740,
											"end": 2742,
											"name": "PUSH",
											"source": 3,
											"value": "A"
										},
										{
											"begin": 2740,
											"end": 2791,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "116"
										},
										{
											"begin": 2740,
											"end": 2791,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 2740,
											"end": 2791,
											"name": "tag",
											"source": 3,
											"value": "127"
										},
										{
											"begin": 2740,
											"end": 2791,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2729,
											"end": 2737,
											"name": "PUSH",
											"source": 3,
											"value": "80"
										},
										{
											"begin": 2729,
											"end": 2737,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 2729,
											"end": 2737,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2729,
											"end": 2737,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 2729,
											"end": 2791,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "129"
										},
										{
											"begin": 2729,
											"end": 2791,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 2729,
											"end": 2791,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2729,
											"end": 2791,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "119"
										},
										{
											"begin": 2729,
											"end": 2791,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 2729,
											"end": 2791,
											"name": "tag",
											"source": 3,
											"value": "129"
										},
										{
											"begin": 2729,
											"end": 2791,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2700,
											"end": 2726,
											"name": "PUSH",
											"source": 3,
											"value": "12"
										},
										{
											"begin": 2700,
											"end": 2791,
											"name": "SSTORE",
											"source": 3
										},
										{
											"begin": 2824,
											"end": 2832,
											"name": "PUSH",
											"source": 3,
											"value": "A0"
										},
										{
											"begin": 2824,
											"end": 2832,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 2824,
											"end": 2832,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2824,
											"end": 2832,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 2802,
											"end": 2821,
											"name": "PUSH",
											"source": 3,
											"value": "13"
										},
										{
											"begin": 2802,
											"end": 2832,
											"name": "SSTORE",
											"source": 3
										},
										{
											"begin": 2864,
											"end": 2872,
											"name": "PUSH",
											"source": 3,
											"value": "C0"
										},
										{
											"begin": 2864,
											"end": 2872,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 2864,
											"end": 2872,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2864,
											"end": 2872,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 2843,
											"end": 2861,
											"name": "PUSH",
											"source": 3,
											"value": "14"
										},
										{
											"begin": 2843,
											"end": 2872,
											"name": "SSTORE",
											"source": 3
										},
										{
											"begin": 2936,
											"end": 2955,
											"name": "PUSH",
											"source": 3,
											"value": "D"
										},
										{
											"begin": 2936,
											"end": 2955,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 2919,
											"end": 2923,
											"name": "PUSH",
											"source": 3,
											"value": "17"
										},
										{
											"begin": 2919,
											"end": 2923,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 2883,
											"end": 2908,
											"name": "PUSH",
											"source": 3,
											"value": "15"
										},
										{
											"begin": 2883,
											"end": 2956,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2883,
											"end": 2956,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2936,
											"end": 2955,
											"name": "SWAP4",
											"source": 3
										},
										{
											"begin": 2936,
											"end": 2955,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 2936,
											"end": 2955,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 2919,
											"end": 2923,
											"name": "SWAP4",
											"source": 3
										},
										{
											"begin": 2919,
											"end": 2923,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2919,
											"end": 2923,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 2919,
											"end": 2923,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 2911,
											"end": 2956,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 2911,
											"end": 2956,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2911,
											"end": 2956,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 2911,
											"end": 2956,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 2883,
											"end": 2956,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2883,
											"end": 2956,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 2883,
											"end": 2956,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 2883,
											"end": 2956,
											"name": "OR",
											"source": 3
										},
										{
											"begin": 2883,
											"end": 2956,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2883,
											"end": 2956,
											"name": "SSTORE",
											"source": 3
										},
										{
											"begin": 3023,
											"end": 3043,
											"name": "PUSH",
											"source": 3,
											"value": "E"
										},
										{
											"begin": 3023,
											"end": 3043,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 2998,
											"end": 3044,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "132"
										},
										{
											"begin": 2998,
											"end": 3044,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3023,
											"end": 3043,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2998,
											"end": 3022,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "133"
										},
										{
											"begin": 2998,
											"end": 3044,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 2998,
											"end": 3044,
											"name": "tag",
											"source": 3,
											"value": "132"
										},
										{
											"begin": 2998,
											"end": 3044,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2967,
											"end": 2995,
											"name": "PUSH",
											"source": 3,
											"value": "16"
										},
										{
											"begin": 2967,
											"end": 3044,
											"name": "SSTORE",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2160,
											"end": 3052,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										},
										{
											"begin": 1714,
											"end": 1817,
											"name": "tag",
											"source": 6,
											"value": "57"
										},
										{
											"begin": 1714,
											"end": 1817,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1136,
											"end": 1142,
											"name": "PUSH",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 1136,
											"end": 1142,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1136,
											"end": 1142,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 736,
											"end": 746,
											"name": "CALLER",
											"source": 4
										},
										{
											"begin": 1283,
											"end": 1306,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 1275,
											"end": 1343,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "138"
										},
										{
											"begin": 1275,
											"end": 1343,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 1275,
											"end": 1343,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 1275,
											"end": 1343,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1275,
											"end": 1343,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1275,
											"end": 1343,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 6783,
											"end": 6785,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 1275,
											"end": 1343,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 1275,
											"end": 1343,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 1275,
											"end": 1343,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 6765,
											"end": 6786,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 6765,
											"end": 6786,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 6765,
											"end": 6786,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 6802,
											"end": 6820,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 6802,
											"end": 6820,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 6802,
											"end": 6820,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 6795,
											"end": 6825,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 6861,
											"end": 6895,
											"name": "PUSH",
											"source": 10,
											"value": "4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572"
										},
										{
											"begin": 6841,
											"end": 6859,
											"name": "PUSH",
											"source": 10,
											"value": "44"
										},
										{
											"begin": 6841,
											"end": 6859,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 6841,
											"end": 6859,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 6834,
											"end": 6896,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 6913,
											"end": 6931,
											"name": "PUSH",
											"source": 10,
											"value": "64"
										},
										{
											"begin": 6913,
											"end": 6931,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1275,
											"end": 1343,
											"name": "tag",
											"source": 6,
											"value": "139"
										},
										{
											"begin": 1275,
											"end": 1343,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1275,
											"end": 1343,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 1275,
											"end": 1343,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 1275,
											"end": 1343,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1275,
											"end": 1343,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 1275,
											"end": 1343,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 1275,
											"end": 1343,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1275,
											"end": 1343,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 1275,
											"end": 1343,
											"name": "tag",
											"source": 6,
											"value": "138"
										},
										{
											"begin": 1275,
											"end": 1343,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1779,
											"end": 1809,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "142"
										},
										{
											"begin": 1806,
											"end": 1807,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 1779,
											"end": 1797,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "143"
										},
										{
											"begin": 1779,
											"end": 1809,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 1779,
											"end": 1809,
											"name": "tag",
											"source": 6,
											"value": "142"
										},
										{
											"begin": 1779,
											"end": 1809,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1714,
											"end": 1817,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 5521,
											"end": 5629,
											"name": "tag",
											"source": 3,
											"value": "59"
										},
										{
											"begin": 5521,
											"end": 5629,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 5570,
											"end": 5621,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 5570,
											"end": 5621,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 5578,
											"end": 5588,
											"name": "CALLER",
											"source": 3
										},
										{
											"begin": 5578,
											"end": 5588,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 5599,
											"end": 5620,
											"name": "SELFBALANCE",
											"source": 3
										},
										{
											"begin": 5570,
											"end": 5621,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 5570,
											"end": 5621,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 5570,
											"end": 5621,
											"name": "PUSH",
											"source": 3,
											"value": "8FC"
										},
										{
											"begin": 5570,
											"end": 5621,
											"name": "MUL",
											"source": 3
										},
										{
											"begin": 5570,
											"end": 5621,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 5570,
											"end": 5621,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 5570,
											"end": 5621,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 5570,
											"end": 5621,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 5570,
											"end": 5621,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 5599,
											"end": 5620,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 5578,
											"end": 5588,
											"name": "DUP9",
											"source": 3
										},
										{
											"begin": 5570,
											"end": 5621,
											"name": "DUP9",
											"source": 3
										},
										{
											"begin": 5570,
											"end": 5621,
											"name": "CALL",
											"source": 3
										},
										{
											"begin": 5570,
											"end": 5621,
											"name": "SWAP4",
											"source": 3
										},
										{
											"begin": 5570,
											"end": 5621,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 5570,
											"end": 5621,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 5570,
											"end": 5621,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 5570,
											"end": 5621,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 5570,
											"end": 5621,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 5570,
											"end": 5621,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 5570,
											"end": 5621,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 5570,
											"end": 5621,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "146"
										},
										{
											"begin": 5570,
											"end": 5621,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 5570,
											"end": 5621,
											"name": "RETURNDATASIZE",
											"source": 3
										},
										{
											"begin": 5570,
											"end": 5621,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 5570,
											"end": 5621,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 5570,
											"end": 5621,
											"name": "RETURNDATACOPY",
											"source": 3
										},
										{
											"begin": 5570,
											"end": 5621,
											"name": "RETURNDATASIZE",
											"source": 3
										},
										{
											"begin": 5570,
											"end": 5621,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 5570,
											"end": 5621,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 5570,
											"end": 5621,
											"name": "tag",
											"source": 3,
											"value": "146"
										},
										{
											"begin": 5570,
											"end": 5621,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 5570,
											"end": 5621,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 5521,
											"end": 5629,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										},
										{
											"begin": 3525,
											"end": 5391,
											"name": "tag",
											"source": 3,
											"value": "77"
										},
										{
											"begin": 3525,
											"end": 5391,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1778,
											"end": 1779,
											"name": "PUSH",
											"source": 7,
											"value": "2"
										},
										{
											"begin": 2376,
											"end": 2383,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 2376,
											"end": 2383,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 2376,
											"end": 2395,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 2376,
											"end": 2395,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 2368,
											"end": 2431,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "149"
										},
										{
											"begin": 2368,
											"end": 2431,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 2368,
											"end": 2431,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 2368,
											"end": 2431,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2368,
											"end": 2431,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 2368,
											"end": 2431,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 7549,
											"end": 7551,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 2368,
											"end": 2431,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 2368,
											"end": 2431,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 2368,
											"end": 2431,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 7531,
											"end": 7552,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 7588,
											"end": 7590,
											"name": "PUSH",
											"source": 10,
											"value": "1F"
										},
										{
											"begin": 7568,
											"end": 7586,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 7568,
											"end": 7586,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 7568,
											"end": 7586,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 7561,
											"end": 7591,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 7627,
											"end": 7660,
											"name": "PUSH",
											"source": 10,
											"value": "5265656E7472616E637947756172643A207265656E7472616E742063616C6C00"
										},
										{
											"begin": 7607,
											"end": 7625,
											"name": "PUSH",
											"source": 10,
											"value": "44"
										},
										{
											"begin": 7607,
											"end": 7625,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 7607,
											"end": 7625,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 7600,
											"end": 7661,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 7678,
											"end": 7696,
											"name": "PUSH",
											"source": 10,
											"value": "64"
										},
										{
											"begin": 7678,
											"end": 7696,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 2368,
											"end": 2431,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "139"
										},
										{
											"begin": 7521,
											"end": 7702,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 2368,
											"end": 2431,
											"name": "tag",
											"source": 7,
											"value": "149"
										},
										{
											"begin": 2368,
											"end": 2431,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1778,
											"end": 1779,
											"name": "PUSH",
											"source": 7,
											"value": "2"
										},
										{
											"begin": 2509,
											"end": 2516,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 2509,
											"end": 2527,
											"name": "SSTORE",
											"source": 7
										},
										{
											"begin": 3608,
											"end": 3616,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "153"
										},
										{
											"begin": 3608,
											"end": 3614,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "34"
										},
										{
											"begin": 3608,
											"end": 3616,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 3608,
											"end": 3616,
											"name": "tag",
											"source": 3,
											"value": "153"
										},
										{
											"begin": 3608,
											"end": 3616,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3620,
											"end": 3621,
											"name": "PUSH",
											"source": 3,
											"value": "1"
										},
										{
											"begin": 3608,
											"end": 3621,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 3600,
											"end": 3636,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "154"
										},
										{
											"begin": 3600,
											"end": 3636,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 3600,
											"end": 3636,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 3600,
											"end": 3636,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3600,
											"end": 3636,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 3600,
											"end": 3636,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 5755,
											"end": 5757,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 3600,
											"end": 3636,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 3600,
											"end": 3636,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 3600,
											"end": 3636,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 5737,
											"end": 5758,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 5794,
											"end": 5796,
											"name": "PUSH",
											"source": 10,
											"value": "A"
										},
										{
											"begin": 5774,
											"end": 5792,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 5774,
											"end": 5792,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 5774,
											"end": 5792,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 5767,
											"end": 5797,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "4E6F7420616374697665"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "B0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5813,
											"end": 5831,
											"name": "PUSH",
											"source": 10,
											"value": "44"
										},
										{
											"begin": 5813,
											"end": 5831,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 5813,
											"end": 5831,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 5806,
											"end": 5846,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 5863,
											"end": 5881,
											"name": "PUSH",
											"source": 10,
											"value": "64"
										},
										{
											"begin": 5863,
											"end": 5881,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 3600,
											"end": 3636,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "139"
										},
										{
											"begin": 5727,
											"end": 5887,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 3600,
											"end": 3636,
											"name": "tag",
											"source": 3,
											"value": "154"
										},
										{
											"begin": 3600,
											"end": 3636,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3693,
											"end": 3703,
											"name": "CALLER",
											"source": 3
										},
										{
											"begin": 3657,
											"end": 3680,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 3683,
											"end": 3704,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3683,
											"end": 3704,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 3683,
											"end": 3704,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 3683,
											"end": 3692,
											"name": "PUSH",
											"source": 3,
											"value": "2"
										},
										{
											"begin": 3683,
											"end": 3704,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 3683,
											"end": 3704,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 3683,
											"end": 3704,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 3683,
											"end": 3704,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 3683,
											"end": 3704,
											"name": "KECCAK256",
											"source": 3
										},
										{
											"begin": 3889,
											"end": 3915,
											"name": "PUSH",
											"source": 3,
											"value": "11"
										},
										{
											"begin": 3889,
											"end": 3915,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 3683,
											"end": 3704,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3683,
											"end": 3704,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 3735,
											"end": 3742,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 3735,
											"end": 3742,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 3735,
											"end": 3742,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 3735,
											"end": 3742,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 3657,
											"end": 3680,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3848,
											"end": 3852,
											"name": "PUSH",
											"source": 3,
											"value": "3E8"
										},
										{
											"begin": 3848,
											"end": 3852,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3871,
											"end": 3915,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 3871,
											"end": 3915,
											"name": "LT",
											"source": 3
										},
										{
											"begin": 3871,
											"end": 3915,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 3863,
											"end": 3964,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "157"
										},
										{
											"begin": 3863,
											"end": 3964,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 3863,
											"end": 3964,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 3863,
											"end": 3964,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3863,
											"end": 3964,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 3863,
											"end": 3964,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 6094,
											"end": 6096,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 3863,
											"end": 3964,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 3863,
											"end": 3964,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 3863,
											"end": 3964,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 6076,
											"end": 6097,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 6133,
											"end": 6135,
											"name": "PUSH",
											"source": 10,
											"value": "10"
										},
										{
											"begin": 6113,
											"end": 6131,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 6113,
											"end": 6131,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 6113,
											"end": 6131,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 6106,
											"end": 6136,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "4E6F7420656E6F7567682076616C7565"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "80"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 6152,
											"end": 6170,
											"name": "PUSH",
											"source": 10,
											"value": "44"
										},
										{
											"begin": 6152,
											"end": 6170,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 6152,
											"end": 6170,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 6145,
											"end": 6191,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 6208,
											"end": 6226,
											"name": "PUSH",
											"source": 10,
											"value": "64"
										},
										{
											"begin": 6208,
											"end": 6226,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 3863,
											"end": 3964,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "139"
										},
										{
											"begin": 6066,
											"end": 6232,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 3863,
											"end": 3964,
											"name": "tag",
											"source": 3,
											"value": "157"
										},
										{
											"begin": 3863,
											"end": 3964,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4001,
											"end": 4027,
											"name": "PUSH",
											"source": 3,
											"value": "12"
										},
										{
											"begin": 4001,
											"end": 4027,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 3983,
											"end": 4027,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 3983,
											"end": 4027,
											"name": "GT",
											"source": 3
										},
										{
											"begin": 3983,
											"end": 4027,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 3975,
											"end": 4074,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "160"
										},
										{
											"begin": 3975,
											"end": 4074,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 3975,
											"end": 4074,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 3975,
											"end": 4074,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3975,
											"end": 4074,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 3975,
											"end": 4074,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 5412,
											"end": 5414,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 3975,
											"end": 4074,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 3975,
											"end": 4074,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 3975,
											"end": 4074,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 5394,
											"end": 5415,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 5451,
											"end": 5453,
											"name": "PUSH",
											"source": 10,
											"value": "E"
										},
										{
											"begin": 5431,
											"end": 5449,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 5431,
											"end": 5449,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 5431,
											"end": 5449,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 5424,
											"end": 5454,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "4F766572666C6F772076616C7565"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "90"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5470,
											"end": 5488,
											"name": "PUSH",
											"source": 10,
											"value": "44"
										},
										{
											"begin": 5470,
											"end": 5488,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 5470,
											"end": 5488,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 5463,
											"end": 5507,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 5524,
											"end": 5542,
											"name": "PUSH",
											"source": 10,
											"value": "64"
										},
										{
											"begin": 5524,
											"end": 5542,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 3975,
											"end": 4074,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "139"
										},
										{
											"begin": 5384,
											"end": 5548,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 3975,
											"end": 4074,
											"name": "tag",
											"source": 3,
											"value": "160"
										},
										{
											"begin": 3975,
											"end": 4074,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4089,
											"end": 4108,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "163"
										},
										{
											"begin": 4089,
											"end": 4106,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "80"
										},
										{
											"begin": 4089,
											"end": 4108,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 4089,
											"end": 4108,
											"name": "tag",
											"source": 3,
											"value": "163"
										},
										{
											"begin": 4089,
											"end": 4108,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4085,
											"end": 4351,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "164"
										},
										{
											"begin": 4085,
											"end": 4351,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 4142,
											"end": 4275,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "165"
										},
										{
											"begin": 4261,
											"end": 4274,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 4143,
											"end": 4224,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "166"
										},
										{
											"begin": 4209,
											"end": 4223,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 4144,
											"end": 4172,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "167"
										},
										{
											"begin": 4162,
											"end": 4171,
											"name": "PUSH",
											"source": 3,
											"value": "18"
										},
										{
											"begin": 4162,
											"end": 4171,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 4144,
											"end": 4157,
											"name": "DUP7",
											"source": 3
										},
										{
											"begin": 4144,
											"end": 4161,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "168"
										},
										{
											"begin": 4144,
											"end": 4161,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4144,
											"end": 4172,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 4144,
											"end": 4172,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4144,
											"end": 4172,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFF"
										},
										{
											"begin": 4144,
											"end": 4172,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 4144,
											"end": 4172,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 4144,
											"end": 4172,
											"name": "tag",
											"source": 3,
											"value": "167"
										},
										{
											"begin": 4144,
											"end": 4172,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4143,
											"end": 4208,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4143,
											"end": 4208,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "133"
										},
										{
											"begin": 4143,
											"end": 4224,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 4143,
											"end": 4224,
											"name": "tag",
											"source": 3,
											"value": "166"
										},
										{
											"begin": 4143,
											"end": 4224,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4142,
											"end": 4260,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4142,
											"end": 4260,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "169"
										},
										{
											"begin": 4142,
											"end": 4275,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 4142,
											"end": 4275,
											"name": "tag",
											"source": 3,
											"value": "165"
										},
										{
											"begin": 4142,
											"end": 4275,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4125,
											"end": 4275,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4296,
											"end": 4322,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "170"
										},
										{
											"begin": 4125,
											"end": 4275,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 4296,
											"end": 4305,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 4296,
											"end": 4322,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "106"
										},
										{
											"begin": 4296,
											"end": 4322,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 4296,
											"end": 4322,
											"name": "tag",
											"source": 3,
											"value": "170"
										},
										{
											"begin": 4296,
											"end": 4322,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4290,
											"end": 4322,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 4290,
											"end": 4322,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 4085,
											"end": 4351,
											"name": "tag",
											"source": 3,
											"value": "164"
										},
										{
											"begin": 4085,
											"end": 4351,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4410,
											"end": 4423,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 4410,
											"end": 4442,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 4381,
											"end": 4407,
											"name": "PUSH",
											"source": 3,
											"value": "12"
										},
										{
											"begin": 4381,
											"end": 4407,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 4361,
											"end": 4378,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 4361,
											"end": 4378,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 4381,
											"end": 4442,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "171"
										},
										{
											"begin": 4381,
											"end": 4442,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 4381,
											"end": 4442,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "106"
										},
										{
											"begin": 4381,
											"end": 4442,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 4381,
											"end": 4442,
											"name": "tag",
											"source": 3,
											"value": "171"
										},
										{
											"begin": 4381,
											"end": 4442,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4361,
											"end": 4442,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4361,
											"end": 4442,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 4473,
											"end": 4474,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 4461,
											"end": 4470,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 4461,
											"end": 4474,
											"name": "GT",
											"source": 3
										},
										{
											"begin": 4453,
											"end": 4494,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "172"
										},
										{
											"begin": 4453,
											"end": 4494,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 4453,
											"end": 4494,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 4453,
											"end": 4494,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4453,
											"end": 4494,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 4453,
											"end": 4494,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 6439,
											"end": 6441,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 4453,
											"end": 4494,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 4453,
											"end": 4494,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 4453,
											"end": 4494,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 6421,
											"end": 6442,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 6478,
											"end": 6480,
											"name": "PUSH",
											"source": 10,
											"value": "F"
										},
										{
											"begin": 6458,
											"end": 6476,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 6458,
											"end": 6476,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 6458,
											"end": 6476,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 6451,
											"end": 6481,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "53616C652069732053756363657373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "88"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 6497,
											"end": 6515,
											"name": "PUSH",
											"source": 10,
											"value": "44"
										},
										{
											"begin": 6497,
											"end": 6515,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 6497,
											"end": 6515,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 6490,
											"end": 6535,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 6552,
											"end": 6570,
											"name": "PUSH",
											"source": 10,
											"value": "64"
										},
										{
											"begin": 6552,
											"end": 6570,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 4453,
											"end": 4494,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "139"
										},
										{
											"begin": 6411,
											"end": 6576,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 4453,
											"end": 4494,
											"name": "tag",
											"source": 3,
											"value": "172"
										},
										{
											"begin": 4453,
											"end": 4494,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4505,
											"end": 4522,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 4526,
											"end": 4684,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "175"
										},
										{
											"begin": 4651,
											"end": 4660,
											"name": "PUSH",
											"source": 3,
											"value": "B"
										},
										{
											"begin": 4651,
											"end": 4670,
											"name": "PUSH",
											"source": 3,
											"value": "2"
										},
										{
											"begin": 4651,
											"end": 4670,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 4651,
											"end": 4670,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 4651,
											"end": 4670,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4651,
											"end": 4670,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 4651,
											"end": 4670,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4651,
											"end": 4670,
											"name": "PUSH",
											"source": 3,
											"value": "100"
										},
										{
											"begin": 4651,
											"end": 4670,
											"name": "EXP",
											"source": 3
										},
										{
											"begin": 4651,
											"end": 4670,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4651,
											"end": 4670,
											"name": "DIV",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4651,
											"end": 4670,
											"name": "AND",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4645,
											"end": 4680,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 4645,
											"end": 4680,
											"name": "PUSH",
											"source": 3,
											"value": "313CE567"
										},
										{
											"begin": 4645,
											"end": 4682,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 4645,
											"end": 4682,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 4645,
											"end": 4682,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 4645,
											"end": 4682,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFF"
										},
										{
											"begin": 4645,
											"end": 4682,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 4645,
											"end": 4682,
											"name": "PUSH",
											"source": 3,
											"value": "E0"
										},
										{
											"begin": 4645,
											"end": 4682,
											"name": "SHL",
											"source": 3
										},
										{
											"begin": 4645,
											"end": 4682,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 4645,
											"end": 4682,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 4645,
											"end": 4682,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 4645,
											"end": 4682,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 4645,
											"end": 4682,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 4645,
											"end": 4682,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 4645,
											"end": 4682,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 4645,
											"end": 4682,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 4645,
											"end": 4682,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 4645,
											"end": 4682,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 4645,
											"end": 4682,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 4645,
											"end": 4682,
											"name": "DUP7",
											"source": 3
										},
										{
											"begin": 4645,
											"end": 4682,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 4645,
											"end": 4682,
											"name": "EXTCODESIZE",
											"source": 3
										},
										{
											"begin": 4645,
											"end": 4682,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 4645,
											"end": 4682,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 4645,
											"end": 4682,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 4645,
											"end": 4682,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "176"
										},
										{
											"begin": 4645,
											"end": 4682,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 4645,
											"end": 4682,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 4645,
											"end": 4682,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 4645,
											"end": 4682,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 4645,
											"end": 4682,
											"name": "tag",
											"source": 3,
											"value": "176"
										},
										{
											"begin": 4645,
											"end": 4682,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4645,
											"end": 4682,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 4645,
											"end": 4682,
											"name": "GAS",
											"source": 3
										},
										{
											"begin": 4645,
											"end": 4682,
											"name": "STATICCALL",
											"source": 3
										},
										{
											"begin": 4645,
											"end": 4682,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 4645,
											"end": 4682,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 4645,
											"end": 4682,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 4645,
											"end": 4682,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "178"
										},
										{
											"begin": 4645,
											"end": 4682,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 4645,
											"end": 4682,
											"name": "RETURNDATASIZE",
											"source": 3
										},
										{
											"begin": 4645,
											"end": 4682,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 4645,
											"end": 4682,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 4645,
											"end": 4682,
											"name": "RETURNDATACOPY",
											"source": 3
										},
										{
											"begin": 4645,
											"end": 4682,
											"name": "RETURNDATASIZE",
											"source": 3
										},
										{
											"begin": 4645,
											"end": 4682,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 4645,
											"end": 4682,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 4645,
											"end": 4682,
											"name": "tag",
											"source": 3,
											"value": "178"
										},
										{
											"begin": 4645,
											"end": 4682,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4645,
											"end": 4682,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 4645,
											"end": 4682,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 4645,
											"end": 4682,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 4645,
											"end": 4682,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 4645,
											"end": 4682,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 4645,
											"end": 4682,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 4645,
											"end": 4682,
											"name": "RETURNDATASIZE",
											"source": 3
										},
										{
											"begin": 4645,
											"end": 4682,
											"name": "PUSH",
											"source": 3,
											"value": "1F"
										},
										{
											"begin": 4645,
											"end": 4682,
											"name": "NOT",
											"source": 3
										},
										{
											"begin": 4645,
											"end": 4682,
											"name": "PUSH",
											"source": 3,
											"value": "1F"
										},
										{
											"begin": 4645,
											"end": 4682,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 4645,
											"end": 4682,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 4645,
											"end": 4682,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 4645,
											"end": 4682,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 4645,
											"end": 4682,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 4645,
											"end": 4682,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 4645,
											"end": 4682,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 4645,
											"end": 4682,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 4645,
											"end": 4682,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 4645,
											"end": 4682,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 4645,
											"end": 4682,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 4645,
											"end": 4682,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4645,
											"end": 4682,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "179"
										},
										{
											"begin": 4645,
											"end": 4682,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 4645,
											"end": 4682,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4645,
											"end": 4682,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "114"
										},
										{
											"begin": 4645,
											"end": 4682,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 4645,
											"end": 4682,
											"name": "tag",
											"source": 3,
											"value": "179"
										},
										{
											"begin": 4645,
											"end": 4682,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4631,
											"end": 4683,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "180"
										},
										{
											"begin": 4631,
											"end": 4683,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4631,
											"end": 4633,
											"name": "PUSH",
											"source": 3,
											"value": "A"
										},
										{
											"begin": 4631,
											"end": 4683,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "116"
										},
										{
											"begin": 4631,
											"end": 4683,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 4631,
											"end": 4683,
											"name": "tag",
											"source": 3,
											"value": "180"
										},
										{
											"begin": 4631,
											"end": 4683,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4575,
											"end": 4595,
											"name": "PUSH",
											"source": 3,
											"value": "E"
										},
										{
											"begin": 4575,
											"end": 4595,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 4526,
											"end": 4596,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "166"
										},
										{
											"begin": 4526,
											"end": 4596,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4526,
											"end": 4540,
											"name": "DUP9",
											"source": 3
										},
										{
											"begin": 4526,
											"end": 4540,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4526,
											"end": 4574,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "133"
										},
										{
											"begin": 4526,
											"end": 4596,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 4526,
											"end": 4684,
											"name": "tag",
											"source": 3,
											"value": "175"
										},
										{
											"begin": 4526,
											"end": 4684,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4505,
											"end": 4685,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4505,
											"end": 4685,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 4717,
											"end": 4726,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 4696,
											"end": 4701,
											"name": "DUP8",
											"source": 3
										},
										{
											"begin": 4696,
											"end": 4713,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 4696,
											"end": 4713,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 4696,
											"end": 4713,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 4696,
											"end": 4726,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 4696,
											"end": 4726,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 4696,
											"end": 4726,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 4696,
											"end": 4726,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "182"
										},
										{
											"begin": 4696,
											"end": 4726,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 4696,
											"end": 4726,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4696,
											"end": 4726,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "183"
										},
										{
											"begin": 4696,
											"end": 4726,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 4696,
											"end": 4726,
											"name": "tag",
											"source": 3,
											"value": "182"
										},
										{
											"begin": 4696,
											"end": 4726,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4696,
											"end": 4726,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 4696,
											"end": 4726,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 4696,
											"end": 4726,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 4696,
											"end": 4726,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 4696,
											"end": 4726,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4696,
											"end": 4726,
											"name": "SSTORE",
											"source": 3
										},
										{
											"begin": 4696,
											"end": 4726,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 4757,
											"end": 4766,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 4737,
											"end": 4742,
											"name": "DUP8",
											"source": 3
										},
										{
											"begin": 4737,
											"end": 4753,
											"name": "PUSH",
											"source": 3,
											"value": "1"
										},
										{
											"begin": 4737,
											"end": 4753,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 4737,
											"end": 4753,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 4737,
											"end": 4766,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 4737,
											"end": 4766,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 4737,
											"end": 4766,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 4737,
											"end": 4766,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "184"
										},
										{
											"begin": 4737,
											"end": 4766,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 4737,
											"end": 4766,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4737,
											"end": 4766,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "183"
										},
										{
											"begin": 4737,
											"end": 4766,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 4737,
											"end": 4766,
											"name": "tag",
											"source": 3,
											"value": "184"
										},
										{
											"begin": 4737,
											"end": 4766,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4737,
											"end": 4766,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4737,
											"end": 4766,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 4737,
											"end": 4766,
											"name": "SSTORE",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4777,
											"end": 4790,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 4777,
											"end": 4827,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 4777,
											"end": 4827,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 4813,
											"end": 4827,
											"name": "DUP7",
											"source": 3
										},
										{
											"begin": 4813,
											"end": 4827,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 4777,
											"end": 4790,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4777,
											"end": 4809,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 4777,
											"end": 4809,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4777,
											"end": 4827,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "185"
										},
										{
											"begin": 4777,
											"end": 4827,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4813,
											"end": 4827,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 4813,
											"end": 4827,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4777,
											"end": 4827,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "183"
										},
										{
											"begin": 4777,
											"end": 4827,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 4777,
											"end": 4827,
											"name": "tag",
											"source": 3,
											"value": "185"
										},
										{
											"begin": 4777,
											"end": 4827,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4777,
											"end": 4827,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4777,
											"end": 4827,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 4777,
											"end": 4827,
											"name": "SSTORE",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4838,
											"end": 4866,
											"name": "PUSH",
											"source": 3,
											"value": "5"
										},
										{
											"begin": 4838,
											"end": 4879,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 4838,
											"end": 4879,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 4870,
											"end": 4879,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 4870,
											"end": 4879,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 4838,
											"end": 4866,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4838,
											"end": 4866,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 4838,
											"end": 4866,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4838,
											"end": 4879,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "186"
										},
										{
											"begin": 4838,
											"end": 4879,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4870,
											"end": 4879,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 4870,
											"end": 4879,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4838,
											"end": 4879,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "183"
										},
										{
											"begin": 4838,
											"end": 4879,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 4838,
											"end": 4879,
											"name": "tag",
											"source": 3,
											"value": "186"
										},
										{
											"begin": 4838,
											"end": 4879,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4838,
											"end": 4879,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4838,
											"end": 4879,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 4838,
											"end": 4879,
											"name": "SSTORE",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4898,
											"end": 4908,
											"name": "CALLER",
											"source": 3
										},
										{
											"begin": 4890,
											"end": 4909,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 4890,
											"end": 4909,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4890,
											"end": 4909,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 4890,
											"end": 4909,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 4890,
											"end": 4897,
											"name": "PUSH",
											"source": 3,
											"value": "3"
										},
										{
											"begin": 4890,
											"end": 4909,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 4890,
											"end": 4909,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 4890,
											"end": 4909,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 4890,
											"end": 4909,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 4890,
											"end": 4909,
											"name": "KECCAK256",
											"source": 3
										},
										{
											"begin": 4890,
											"end": 4916,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 4890,
											"end": 4916,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 4913,
											"end": 4916,
											"name": "DUP7",
											"source": 3
										},
										{
											"begin": 4913,
											"end": 4916,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 4890,
											"end": 4909,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4890,
											"end": 4916,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "187"
										},
										{
											"begin": 4890,
											"end": 4916,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4913,
											"end": 4916,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 4913,
											"end": 4916,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4890,
											"end": 4916,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "183"
										},
										{
											"begin": 4890,
											"end": 4916,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 4890,
											"end": 4916,
											"name": "tag",
											"source": 3,
											"value": "187"
										},
										{
											"begin": 4890,
											"end": 4916,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4890,
											"end": 4916,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 4890,
											"end": 4916,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 4890,
											"end": 4916,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 4890,
											"end": 4916,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 4890,
											"end": 4916,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4890,
											"end": 4916,
											"name": "SSTORE",
											"source": 3
										},
										{
											"begin": 4890,
											"end": 4916,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 4939,
											"end": 4942,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 4927,
											"end": 4935,
											"name": "PUSH",
											"source": 3,
											"value": "1B"
										},
										{
											"begin": 4927,
											"end": 4935,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 4927,
											"end": 4942,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 4927,
											"end": 4942,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 4927,
											"end": 4942,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 4927,
											"end": 4942,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "188"
										},
										{
											"begin": 4927,
											"end": 4942,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 4927,
											"end": 4942,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4927,
											"end": 4942,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "183"
										},
										{
											"begin": 4927,
											"end": 4942,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 4927,
											"end": 4942,
											"name": "tag",
											"source": 3,
											"value": "188"
										},
										{
											"begin": 4927,
											"end": 4942,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4927,
											"end": 4942,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4927,
											"end": 4942,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 4927,
											"end": 4942,
											"name": "SSTORE",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4958,
											"end": 4983,
											"name": "PUSH",
											"source": 3,
											"value": "15"
										},
										{
											"begin": 4958,
											"end": 4983,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 4958,
											"end": 4983,
											"name": "PUSH",
											"source": 3,
											"value": "FF"
										},
										{
											"begin": 4958,
											"end": 4983,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 4958,
											"end": 5019,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 4958,
											"end": 5019,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 4958,
											"end": 5019,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "189"
										},
										{
											"begin": 4958,
											"end": 5019,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5010,
											"end": 5019,
											"name": "CALLVALUE",
											"source": 3
										},
										{
											"begin": 4987,
											"end": 5007,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "190"
										},
										{
											"begin": 5004,
											"end": 5007,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 4987,
											"end": 5001,
											"name": "DUP8",
											"source": 3
										},
										{
											"begin": 4987,
											"end": 5007,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "183"
										},
										{
											"begin": 4987,
											"end": 5007,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 4987,
											"end": 5007,
											"name": "tag",
											"source": 3,
											"value": "190"
										},
										{
											"begin": 4987,
											"end": 5007,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4987,
											"end": 5019,
											"name": "LT",
											"source": 3
										},
										{
											"begin": 4958,
											"end": 5019,
											"name": "tag",
											"source": 3,
											"value": "189"
										},
										{
											"begin": 4958,
											"end": 5019,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4955,
											"end": 5110,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 4955,
											"end": 5110,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "191"
										},
										{
											"begin": 4955,
											"end": 5110,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 5044,
											"end": 5054,
											"name": "CALLER",
											"source": 3
										},
										{
											"begin": 5036,
											"end": 5098,
											"name": "PUSH",
											"source": 3,
											"value": "8FC"
										},
										{
											"begin": 5094,
											"end": 5097,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 5065,
											"end": 5091,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "192"
										},
										{
											"begin": 5077,
											"end": 5091,
											"name": "DUP9",
											"source": 3
										},
										{
											"begin": 5065,
											"end": 5074,
											"name": "CALLVALUE",
											"source": 3
										},
										{
											"begin": 5065,
											"end": 5091,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "106"
										},
										{
											"begin": 5065,
											"end": 5091,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 5065,
											"end": 5091,
											"name": "tag",
											"source": 3,
											"value": "192"
										},
										{
											"begin": 5065,
											"end": 5091,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 5065,
											"end": 5097,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "193"
										},
										{
											"begin": 5065,
											"end": 5097,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 5065,
											"end": 5097,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 5065,
											"end": 5097,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "106"
										},
										{
											"begin": 5065,
											"end": 5097,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 5065,
											"end": 5097,
											"name": "tag",
											"source": 3,
											"value": "193"
										},
										{
											"begin": 5065,
											"end": 5097,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 5036,
											"end": 5098,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 5036,
											"end": 5098,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 5036,
											"end": 5098,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 5036,
											"end": 5098,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 5036,
											"end": 5098,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 5036,
											"end": 5098,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 5036,
											"end": 5098,
											"name": "MUL",
											"source": 3
										},
										{
											"begin": 5036,
											"end": 5098,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 5036,
											"end": 5098,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 5036,
											"end": 5098,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 5036,
											"end": 5098,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 5036,
											"end": 5098,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 5036,
											"end": 5098,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 5036,
											"end": 5098,
											"name": "DUP9",
											"source": 3
										},
										{
											"begin": 5036,
											"end": 5098,
											"name": "DUP9",
											"source": 3
										},
										{
											"begin": 5036,
											"end": 5098,
											"name": "CALL",
											"source": 3
										},
										{
											"begin": 5036,
											"end": 5098,
											"name": "SWAP4",
											"source": 3
										},
										{
											"begin": 5036,
											"end": 5098,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 5036,
											"end": 5098,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 5036,
											"end": 5098,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 5036,
											"end": 5098,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 5036,
											"end": 5098,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 5036,
											"end": 5098,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 5036,
											"end": 5098,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 5036,
											"end": 5098,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "195"
										},
										{
											"begin": 5036,
											"end": 5098,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 5036,
											"end": 5098,
											"name": "RETURNDATASIZE",
											"source": 3
										},
										{
											"begin": 5036,
											"end": 5098,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 5036,
											"end": 5098,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 5036,
											"end": 5098,
											"name": "RETURNDATACOPY",
											"source": 3
										},
										{
											"begin": 5036,
											"end": 5098,
											"name": "RETURNDATASIZE",
											"source": 3
										},
										{
											"begin": 5036,
											"end": 5098,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 5036,
											"end": 5098,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 5036,
											"end": 5098,
											"name": "tag",
											"source": 3,
											"value": "195"
										},
										{
											"begin": 5036,
											"end": 5098,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 5036,
											"end": 5098,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 4955,
											"end": 5110,
											"name": "tag",
											"source": 3,
											"value": "191"
										},
										{
											"begin": 4955,
											"end": 5110,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 5125,
											"end": 5150,
											"name": "PUSH",
											"source": 3,
											"value": "15"
										},
										{
											"begin": 5125,
											"end": 5150,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 5125,
											"end": 5150,
											"name": "PUSH",
											"source": 3,
											"value": "FF"
										},
										{
											"begin": 5125,
											"end": 5150,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 5121,
											"end": 5372,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "197"
										},
										{
											"begin": 5121,
											"end": 5372,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 5225,
											"end": 5244,
											"name": "PUSH",
											"source": 3,
											"value": "D"
										},
										{
											"begin": 5225,
											"end": 5244,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 5167,
											"end": 5360,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "197"
										},
										{
											"begin": 5167,
											"end": 5360,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5225,
											"end": 5244,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 5264,
											"end": 5274,
											"name": "CALLER",
											"source": 3
										},
										{
											"begin": 5301,
											"end": 5305,
											"name": "ADDRESS",
											"source": 3
										},
										{
											"begin": 5325,
											"end": 5345,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "198"
										},
										{
											"begin": 5342,
											"end": 5345,
											"name": "DUP9",
											"source": 3
										},
										{
											"begin": 5325,
											"end": 5339,
											"name": "DUP11",
											"source": 3
										},
										{
											"begin": 5325,
											"end": 5345,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "183"
										},
										{
											"begin": 5325,
											"end": 5345,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 5325,
											"end": 5345,
											"name": "tag",
											"source": 3,
											"value": "198"
										},
										{
											"begin": 5325,
											"end": 5345,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 5167,
											"end": 5198,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "199"
										},
										{
											"begin": 5167,
											"end": 5360,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 5167,
											"end": 5360,
											"name": "tag",
											"source": 3,
											"value": "197"
										},
										{
											"begin": 5167,
											"end": 5360,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1734,
											"end": 1735,
											"name": "PUSH",
											"source": 7,
											"value": "1"
										},
										{
											"begin": 2688,
											"end": 2695,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 2688,
											"end": 2710,
											"name": "SSTORE",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3525,
											"end": 5391,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										},
										{
											"begin": 3407,
											"end": 3517,
											"name": "tag",
											"source": 3,
											"value": "80"
										},
										{
											"begin": 3407,
											"end": 3517,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3456,
											"end": 3460,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 3480,
											"end": 3509,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "201"
										},
										{
											"begin": 3480,
											"end": 3486,
											"name": "PUSH",
											"source": 3,
											"value": "19"
										},
										{
											"begin": 736,
											"end": 746,
											"name": "CALLER",
											"source": 4
										},
										{
											"begin": 3480,
											"end": 3495,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "203"
										},
										{
											"begin": 3480,
											"end": 3509,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 3480,
											"end": 3509,
											"name": "tag",
											"source": 3,
											"value": "201"
										},
										{
											"begin": 3480,
											"end": 3509,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3473,
											"end": 3509,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3473,
											"end": 3509,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 3407,
											"end": 3517,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3407,
											"end": 3517,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										},
										{
											"begin": 1972,
											"end": 2173,
											"name": "tag",
											"source": 6,
											"value": "92"
										},
										{
											"begin": 1972,
											"end": 2173,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1136,
											"end": 1142,
											"name": "PUSH",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 1136,
											"end": 1142,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1136,
											"end": 1142,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 736,
											"end": 746,
											"name": "CALLER",
											"source": 4
										},
										{
											"begin": 1283,
											"end": 1306,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 1275,
											"end": 1343,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "207"
										},
										{
											"begin": 1275,
											"end": 1343,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 1275,
											"end": 1343,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 1275,
											"end": 1343,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1275,
											"end": 1343,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1275,
											"end": 1343,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 6783,
											"end": 6785,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 1275,
											"end": 1343,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 1275,
											"end": 1343,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 1275,
											"end": 1343,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 6765,
											"end": 6786,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 6765,
											"end": 6786,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 6765,
											"end": 6786,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 6802,
											"end": 6820,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 6802,
											"end": 6820,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 6802,
											"end": 6820,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 6795,
											"end": 6825,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 6861,
											"end": 6895,
											"name": "PUSH",
											"source": 10,
											"value": "4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572"
										},
										{
											"begin": 6841,
											"end": 6859,
											"name": "PUSH",
											"source": 10,
											"value": "44"
										},
										{
											"begin": 6841,
											"end": 6859,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 6841,
											"end": 6859,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 6834,
											"end": 6896,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 6913,
											"end": 6931,
											"name": "PUSH",
											"source": 10,
											"value": "64"
										},
										{
											"begin": 6913,
											"end": 6931,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1275,
											"end": 1343,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "139"
										},
										{
											"begin": 6755,
											"end": 6937,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 1275,
											"end": 1343,
											"name": "tag",
											"source": 6,
											"value": "207"
										},
										{
											"begin": 1275,
											"end": 1343,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2061,
											"end": 2083,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 2061,
											"end": 2083,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 2053,
											"end": 2126,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "210"
										},
										{
											"begin": 2053,
											"end": 2126,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 2053,
											"end": 2126,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 2053,
											"end": 2126,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2053,
											"end": 2126,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 2053,
											"end": 2126,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 5005,
											"end": 5007,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 2053,
											"end": 2126,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 2053,
											"end": 2126,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 2053,
											"end": 2126,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 4987,
											"end": 5008,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 5044,
											"end": 5046,
											"name": "PUSH",
											"source": 10,
											"value": "26"
										},
										{
											"begin": 5024,
											"end": 5042,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 5024,
											"end": 5042,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 5024,
											"end": 5042,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 5017,
											"end": 5047,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 5083,
											"end": 5117,
											"name": "PUSH",
											"source": 10,
											"value": "4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061"
										},
										{
											"begin": 5063,
											"end": 5081,
											"name": "PUSH",
											"source": 10,
											"value": "44"
										},
										{
											"begin": 5063,
											"end": 5081,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 5063,
											"end": 5081,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 5056,
											"end": 5118,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "646472657373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5134,
											"end": 5152,
											"name": "PUSH",
											"source": 10,
											"value": "64"
										},
										{
											"begin": 5134,
											"end": 5152,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 5134,
											"end": 5152,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 5127,
											"end": 5163,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 5180,
											"end": 5199,
											"name": "PUSH",
											"source": 10,
											"value": "84"
										},
										{
											"begin": 5180,
											"end": 5199,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 2053,
											"end": 2126,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "139"
										},
										{
											"begin": 4977,
											"end": 5205,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 2053,
											"end": 2126,
											"name": "tag",
											"source": 6,
											"value": "210"
										},
										{
											"begin": 2053,
											"end": 2126,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2137,
											"end": 2165,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "146"
										},
										{
											"begin": 2156,
											"end": 2164,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 2137,
											"end": 2155,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "143"
										},
										{
											"begin": 2137,
											"end": 2165,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 8259,
											"end": 8411,
											"name": "tag",
											"source": 5,
											"value": "98"
										},
										{
											"begin": 8259,
											"end": 8411,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 8329,
											"end": 8333,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 8353,
											"end": 8403,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "216"
										},
										{
											"begin": 8358,
											"end": 8361,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8378,
											"end": 8401,
											"name": "DUP5",
											"source": 5
										},
										{
											"begin": 8378,
											"end": 8401,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 8353,
											"end": 8357,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "217"
										},
										{
											"begin": 8353,
											"end": 8403,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 8353,
											"end": 8403,
											"name": "tag",
											"source": 5,
											"value": "216"
										},
										{
											"begin": 8353,
											"end": 8403,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 8346,
											"end": 8403,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 8346,
											"end": 8403,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 8259,
											"end": 8411,
											"name": "tag",
											"source": 5,
											"value": "215"
										},
										{
											"begin": 8259,
											"end": 8411,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 8259,
											"end": 8411,
											"name": "SWAP3",
											"source": 5
										},
										{
											"begin": 8259,
											"end": 8411,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 8259,
											"end": 8411,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 8259,
											"end": 8411,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 8259,
											"end": 8411,
											"name": "JUMP",
											"source": 5,
											"value": "[out]"
										},
										{
											"begin": 3585,
											"end": 3683,
											"name": "tag",
											"source": 8,
											"value": "133"
										},
										{
											"begin": 3585,
											"end": 3683,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3643,
											"end": 3650,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 3670,
											"end": 3675,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "216"
										},
										{
											"begin": 3674,
											"end": 3675,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 3670,
											"end": 3671,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 3670,
											"end": 3675,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "119"
										},
										{
											"begin": 3670,
											"end": 3675,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 2333,
											"end": 2524,
											"name": "tag",
											"source": 6,
											"value": "143"
										},
										{
											"begin": 2333,
											"end": 2524,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2426,
											"end": 2432,
											"name": "PUSH",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 2426,
											"end": 2432,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 2426,
											"end": 2432,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2443,
											"end": 2460,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 2443,
											"end": 2460,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 2443,
											"end": 2460,
											"name": "AND",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 2443,
											"end": 2460,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 2443,
											"end": 2460,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 2443,
											"end": 2460,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 2443,
											"end": 2460,
											"name": "OR",
											"source": 6
										},
										{
											"begin": 2443,
											"end": 2460,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2443,
											"end": 2460,
											"name": "SWAP4",
											"source": 6
										},
										{
											"begin": 2443,
											"end": 2460,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 2476,
											"end": 2516,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 2476,
											"end": 2516,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 2426,
											"end": 2432,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 2426,
											"end": 2432,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 2426,
											"end": 2432,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 2443,
											"end": 2460,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2426,
											"end": 2432,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 2426,
											"end": 2432,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2476,
											"end": 2516,
											"name": "PUSH",
											"source": 6,
											"value": "8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
										},
										{
											"begin": 2476,
											"end": 2516,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2407,
											"end": 2423,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 2407,
											"end": 2423,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2476,
											"end": 2516,
											"name": "LOG3",
											"source": 6
										},
										{
											"begin": 2333,
											"end": 2524,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 2333,
											"end": 2524,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 2333,
											"end": 2524,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 3228,
											"end": 3326,
											"name": "tag",
											"source": 8,
											"value": "168"
										},
										{
											"begin": 3228,
											"end": 3326,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3286,
											"end": 3293,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 3313,
											"end": 3318,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "216"
										},
										{
											"begin": 3317,
											"end": 3318,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 3313,
											"end": 3314,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 3313,
											"end": 3318,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "106"
										},
										{
											"begin": 3313,
											"end": 3318,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 3984,
											"end": 4082,
											"name": "tag",
											"source": 8,
											"value": "169"
										},
										{
											"begin": 3984,
											"end": 4082,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 4042,
											"end": 4049,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 4069,
											"end": 4074,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "216"
										},
										{
											"begin": 4073,
											"end": 4074,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 4069,
											"end": 4070,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 4069,
											"end": 4074,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "226"
										},
										{
											"begin": 4069,
											"end": 4074,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 1112,
											"end": 1542,
											"name": "tag",
											"source": 9,
											"value": "199"
										},
										{
											"begin": 1112,
											"end": 1542,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1318,
											"end": 1369,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 1318,
											"end": 1369,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 1318,
											"end": 1369,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4267,
											"end": 4282,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 4267,
											"end": 4282,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 4267,
											"end": 4282,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 1318,
											"end": 1369,
											"name": "PUSH",
											"source": 9,
											"value": "24"
										},
										{
											"begin": 1318,
											"end": 1369,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 1318,
											"end": 1369,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 4249,
											"end": 4283,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 4319,
											"end": 4334,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 4319,
											"end": 4334,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 4319,
											"end": 4334,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 4299,
											"end": 4317,
											"name": "PUSH",
											"source": 10,
											"value": "44"
										},
										{
											"begin": 4299,
											"end": 4317,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 4299,
											"end": 4317,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 4292,
											"end": 4335,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 4351,
											"end": 4369,
											"name": "PUSH",
											"source": 10,
											"value": "64"
										},
										{
											"begin": 4351,
											"end": 4369,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 4351,
											"end": 4369,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 4351,
											"end": 4369,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 4344,
											"end": 4378,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 4344,
											"end": 4378,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 4344,
											"end": 4378,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 1318,
											"end": 1369,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 1318,
											"end": 1369,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 1318,
											"end": 1369,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 1318,
											"end": 1369,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 1318,
											"end": 1369,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 1318,
											"end": 1369,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1318,
											"end": 1369,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 1318,
											"end": 1369,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 1318,
											"end": 1369,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 1318,
											"end": 1369,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 4184,
											"end": 4202,
											"name": "PUSH",
											"source": 10,
											"value": "84"
										},
										{
											"begin": 4184,
											"end": 4202,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 4184,
											"end": 4202,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 4184,
											"end": 4202,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1318,
											"end": 1369,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 1318,
											"end": 1369,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 1318,
											"end": 1369,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 1318,
											"end": 1369,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 1318,
											"end": 1369,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 1318,
											"end": 1369,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 1318,
											"end": 1369,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1318,
											"end": 1369,
											"name": "AND",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "23B872DD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1318,
											"end": 1369,
											"name": "OR",
											"source": 9
										},
										{
											"begin": 1318,
											"end": 1369,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1318,
											"end": 1369,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 1293,
											"end": 1380,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 1293,
											"end": 1380,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP4",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP3",
											"source": -1
										},
										{
											"begin": 1293,
											"end": 1303,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1293,
											"end": 1303,
											"name": "DUP9",
											"source": 9
										},
										{
											"begin": 1293,
											"end": 1303,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 1293,
											"end": 1303,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 1293,
											"end": 1380,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "230"
										},
										{
											"begin": 1293,
											"end": 1380,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 1318,
											"end": 1369,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1293,
											"end": 1380,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "231"
										},
										{
											"begin": 1293,
											"end": 1380,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 1293,
											"end": 1380,
											"name": "tag",
											"source": 9,
											"value": "230"
										},
										{
											"begin": 1293,
											"end": 1380,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1293,
											"end": 1380,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 1293,
											"end": 1380,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 1293,
											"end": 1380,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 1293,
											"end": 1380,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 1293,
											"end": 1380,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 1293,
											"end": 1380,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 1293,
											"end": 1380,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 1293,
											"end": 1380,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 1293,
											"end": 1380,
											"name": "DUP7",
											"source": 9
										},
										{
											"begin": 1293,
											"end": 1380,
											"name": "GAS",
											"source": 9
										},
										{
											"begin": 1293,
											"end": 1380,
											"name": "CALL",
											"source": 9
										},
										{
											"begin": 1293,
											"end": 1380,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 1293,
											"end": 1380,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1293,
											"end": 1380,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1293,
											"end": 1380,
											"name": "RETURNDATASIZE",
											"source": 9
										},
										{
											"begin": 1293,
											"end": 1380,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 1293,
											"end": 1380,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 1293,
											"end": 1380,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 1293,
											"end": 1380,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 1293,
											"end": 1380,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "234"
										},
										{
											"begin": 1293,
											"end": 1380,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 1293,
											"end": 1380,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 1293,
											"end": 1380,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 1293,
											"end": 1380,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 1293,
											"end": 1380,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1293,
											"end": 1380,
											"name": "PUSH",
											"source": 9,
											"value": "1F"
										},
										{
											"begin": 1293,
											"end": 1380,
											"name": "NOT",
											"source": 9
										},
										{
											"begin": 1293,
											"end": 1380,
											"name": "PUSH",
											"source": 9,
											"value": "3F"
										},
										{
											"begin": 1293,
											"end": 1380,
											"name": "RETURNDATASIZE",
											"source": 9
										},
										{
											"begin": 1293,
											"end": 1380,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 1293,
											"end": 1380,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 1293,
											"end": 1380,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 1293,
											"end": 1380,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 1293,
											"end": 1380,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 1293,
											"end": 1380,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 1293,
											"end": 1380,
											"name": "RETURNDATASIZE",
											"source": 9
										},
										{
											"begin": 1293,
											"end": 1380,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 1293,
											"end": 1380,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 1293,
											"end": 1380,
											"name": "RETURNDATASIZE",
											"source": 9
										},
										{
											"begin": 1293,
											"end": 1380,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 1293,
											"end": 1380,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 1293,
											"end": 1380,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 1293,
											"end": 1380,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 1293,
											"end": 1380,
											"name": "RETURNDATACOPY",
											"source": 9
										},
										{
											"begin": 1293,
											"end": 1380,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "233"
										},
										{
											"begin": 1293,
											"end": 1380,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 1293,
											"end": 1380,
											"name": "tag",
											"source": 9,
											"value": "234"
										},
										{
											"begin": 1293,
											"end": 1380,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1293,
											"end": 1380,
											"name": "PUSH",
											"source": 9,
											"value": "60"
										},
										{
											"begin": 1293,
											"end": 1380,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 1293,
											"end": 1380,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1293,
											"end": 1380,
											"name": "tag",
											"source": 9,
											"value": "233"
										},
										{
											"begin": 1293,
											"end": 1380,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1293,
											"end": 1380,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1257,
											"end": 1380,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 1257,
											"end": 1380,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1257,
											"end": 1380,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 1257,
											"end": 1380,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1413,
											"end": 1420,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 1413,
											"end": 1470,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 1413,
											"end": 1470,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 1413,
											"end": 1470,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "237"
										},
										{
											"begin": 1413,
											"end": 1470,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1425,
											"end": 1436,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 1425,
											"end": 1436,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 1425,
											"end": 1441,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 1425,
											"end": 1441,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 1425,
											"end": 1469,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "237"
										},
										{
											"begin": 1425,
											"end": 1469,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 1425,
											"end": 1469,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1456,
											"end": 1460,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 1445,
											"end": 1469,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 1445,
											"end": 1469,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 1445,
											"end": 1469,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 1445,
											"end": 1469,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1445,
											"end": 1469,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 1445,
											"end": 1469,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 1445,
											"end": 1469,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 1445,
											"end": 1469,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1445,
											"end": 1469,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "237"
										},
										{
											"begin": 1445,
											"end": 1469,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 1445,
											"end": 1469,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1445,
											"end": 1469,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "238"
										},
										{
											"begin": 1445,
											"end": 1469,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 1445,
											"end": 1469,
											"name": "tag",
											"source": 9,
											"value": "237"
										},
										{
											"begin": 1445,
											"end": 1469,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1391,
											"end": 1534,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "239"
										},
										{
											"begin": 1391,
											"end": 1534,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 1391,
											"end": 1534,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 1391,
											"end": 1534,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1391,
											"end": 1534,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 1391,
											"end": 1534,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 7144,
											"end": 7146,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 1391,
											"end": 1534,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 1391,
											"end": 1534,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 1391,
											"end": 1534,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 7126,
											"end": 7147,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 7183,
											"end": 7185,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 7163,
											"end": 7181,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 7163,
											"end": 7181,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 7163,
											"end": 7181,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 7156,
											"end": 7186,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 7222,
											"end": 7256,
											"name": "PUSH",
											"source": 10,
											"value": "5472616E7366657248656C7065723A205452414E534645525F46524F4D5F4641"
										},
										{
											"begin": 7202,
											"end": 7220,
											"name": "PUSH",
											"source": 10,
											"value": "44"
										},
										{
											"begin": 7202,
											"end": 7220,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 7202,
											"end": 7220,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 7195,
											"end": 7257,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "12531151"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7273,
											"end": 7291,
											"name": "PUSH",
											"source": 10,
											"value": "64"
										},
										{
											"begin": 7273,
											"end": 7291,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 7273,
											"end": 7291,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 7266,
											"end": 7300,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 7317,
											"end": 7336,
											"name": "PUSH",
											"source": 10,
											"value": "84"
										},
										{
											"begin": 7317,
											"end": 7336,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1391,
											"end": 1534,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "139"
										},
										{
											"begin": 7116,
											"end": 7342,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 1391,
											"end": 1534,
											"name": "tag",
											"source": 9,
											"value": "239"
										},
										{
											"begin": 1391,
											"end": 1534,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1112,
											"end": 1542,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1112,
											"end": 1542,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1112,
											"end": 1542,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1112,
											"end": 1542,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1112,
											"end": 1542,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1112,
											"end": 1542,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1112,
											"end": 1542,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 8831,
											"end": 8998,
											"name": "tag",
											"source": 5,
											"value": "203"
										},
										{
											"begin": 8831,
											"end": 8998,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8965,
											"end": 8988,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 8965,
											"end": 8988,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 8911,
											"end": 8915,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 4367,
											"end": 4386,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 4367,
											"end": 4386,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 4367,
											"end": 4386,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 4367,
											"end": 4379,
											"name": "PUSH",
											"source": 5,
											"value": "1"
										},
										{
											"begin": 4367,
											"end": 4379,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 4367,
											"end": 4379,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 4367,
											"end": 4386,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 4367,
											"end": 4386,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 4367,
											"end": 4386,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 4367,
											"end": 4386,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 4367,
											"end": 4386,
											"name": "KECCAK256",
											"source": 5
										},
										{
											"begin": 4367,
											"end": 4386,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 4367,
											"end": 4391,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 4367,
											"end": 4391,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 8935,
											"end": 8990,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "216"
										},
										{
											"begin": 4270,
											"end": 4399,
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 2174,
											"end": 2588,
											"name": "tag",
											"source": 5,
											"value": "217"
										},
										{
											"begin": 2174,
											"end": 2588,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 2237,
											"end": 2241,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 4367,
											"end": 4386,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 4367,
											"end": 4386,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 4367,
											"end": 4386,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 4367,
											"end": 4379,
											"name": "PUSH",
											"source": 5,
											"value": "1"
										},
										{
											"begin": 4367,
											"end": 4379,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 4367,
											"end": 4379,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 4367,
											"end": 4386,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 4367,
											"end": 4386,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 4367,
											"end": 4386,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 4367,
											"end": 4386,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 4367,
											"end": 4386,
											"name": "KECCAK256",
											"source": 5
										},
										{
											"begin": 4367,
											"end": 4386,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 2254,
											"end": 2581,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "247"
										},
										{
											"begin": 2254,
											"end": 2581,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2297,
											"end": 2320,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 2297,
											"end": 2320,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 2297,
											"end": 2320,
											"name": "PUSH",
											"source": 5,
											"value": "1"
										},
										{
											"begin": 2297,
											"end": 2320,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 2297,
											"end": 2320,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 2297,
											"end": 2320,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 2297,
											"end": 2320,
											"name": "DUP5",
											"source": 5
										},
										{
											"begin": 2297,
											"end": 2320,
											"name": "SSTORE",
											"source": 5
										},
										{
											"begin": 2297,
											"end": 2308,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 2297,
											"end": 2320,
											"name": "DUP5",
											"source": 5
										},
										{
											"begin": 2297,
											"end": 2320,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 2297,
											"end": 2320,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 2297,
											"end": 2320,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 2297,
											"end": 2320,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 2297,
											"end": 2320,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 2297,
											"end": 2320,
											"name": "KECCAK256",
											"source": 5
										},
										{
											"begin": 2297,
											"end": 2320,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2297,
											"end": 2320,
											"name": "SWAP4",
											"source": 5
										},
										{
											"begin": 2297,
											"end": 2320,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 2297,
											"end": 2320,
											"name": "DUP5",
											"source": 5
										},
										{
											"begin": 2297,
											"end": 2320,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2297,
											"end": 2320,
											"name": "SSTORE",
											"source": 5
										},
										{
											"begin": 2480,
											"end": 2498,
											"name": "DUP5",
											"source": 5
										},
										{
											"begin": 2480,
											"end": 2498,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 2458,
											"end": 2477,
											"name": "DUP5",
											"source": 5
										},
										{
											"begin": 2458,
											"end": 2477,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 2458,
											"end": 2477,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 2458,
											"end": 2470,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 2458,
											"end": 2470,
											"name": "DUP7",
											"source": 5
										},
										{
											"begin": 2458,
											"end": 2470,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 2458,
											"end": 2477,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2458,
											"end": 2477,
											"name": "SWAP4",
											"source": 5
										},
										{
											"begin": 2458,
											"end": 2477,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 2458,
											"end": 2477,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 2458,
											"end": 2477,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2458,
											"end": 2477,
											"name": "KECCAK256",
											"source": 5
										},
										{
											"begin": 2458,
											"end": 2498,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 2458,
											"end": 2498,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2458,
											"end": 2498,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 2458,
											"end": 2498,
											"name": "SSTORE",
											"source": 5
										},
										{
											"begin": 2513,
											"end": 2524,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "215"
										},
										{
											"begin": 2513,
											"end": 2524,
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 2254,
											"end": 2581,
											"name": "tag",
											"source": 5,
											"value": "247"
										},
										{
											"begin": 2254,
											"end": 2581,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2564,
											"end": 2569,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 2557,
											"end": 2569,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "215"
										},
										{
											"begin": 2557,
											"end": 2569,
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 14,
											"end": 271,
											"name": "tag",
											"source": 10,
											"value": "47"
										},
										{
											"begin": 14,
											"end": 271,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 73,
											"end": 79,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 126,
											"end": 128,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 114,
											"end": 123,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 105,
											"end": 112,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 101,
											"end": 124,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 97,
											"end": 129,
											"name": "SLT",
											"source": 10
										},
										{
											"begin": 94,
											"end": 96,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 94,
											"end": 96,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "253"
										},
										{
											"begin": 94,
											"end": 96,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 147,
											"end": 153,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 139,
											"end": 145,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 132,
											"end": 154,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 94,
											"end": 96,
											"name": "tag",
											"source": 10,
											"value": "253"
										},
										{
											"begin": 94,
											"end": 96,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 191,
											"end": 200,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 178,
											"end": 201,
											"name": "CALLDATALOAD",
											"source": 10
										},
										{
											"begin": 210,
											"end": 241,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "254"
										},
										{
											"begin": 235,
											"end": 240,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 210,
											"end": 241,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "255"
										},
										{
											"begin": 210,
											"end": 241,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 210,
											"end": 241,
											"name": "tag",
											"source": 10,
											"value": "254"
										},
										{
											"begin": 210,
											"end": 241,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 260,
											"end": 265,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 84,
											"end": 271,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 84,
											"end": 271,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 276,
											"end": 1572,
											"name": "tag",
											"source": 10,
											"value": "53"
										},
										{
											"begin": 276,
											"end": 1572,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 419,
											"end": 425,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 427,
											"end": 433,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 435,
											"end": 441,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 443,
											"end": 449,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 474,
											"end": 477,
											"name": "PUSH",
											"source": 10,
											"value": "140"
										},
										{
											"begin": 518,
											"end": 520,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 506,
											"end": 515,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 497,
											"end": 504,
											"name": "DUP9",
											"source": 10
										},
										{
											"begin": 493,
											"end": 516,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 489,
											"end": 521,
											"name": "SLT",
											"source": 10
										},
										{
											"begin": 486,
											"end": 488,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 486,
											"end": 488,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "257"
										},
										{
											"begin": 486,
											"end": 488,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 539,
											"end": 545,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 531,
											"end": 537,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 524,
											"end": 546,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 486,
											"end": 488,
											"name": "tag",
											"source": 10,
											"value": "257"
										},
										{
											"begin": 486,
											"end": 488,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 583,
											"end": 592,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 570,
											"end": 593,
											"name": "CALLDATALOAD",
											"source": 10
										},
										{
											"begin": 602,
											"end": 633,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "258"
										},
										{
											"begin": 627,
											"end": 632,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 602,
											"end": 633,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "255"
										},
										{
											"begin": 602,
											"end": 633,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 602,
											"end": 633,
											"name": "tag",
											"source": 10,
											"value": "258"
										},
										{
											"begin": 602,
											"end": 633,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 652,
											"end": 657,
											"name": "SWAP5",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 676,
											"end": 678,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 715,
											"end": 733,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 715,
											"end": 733,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 715,
											"end": 733,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 702,
											"end": 734,
											"name": "CALLDATALOAD",
											"source": 10
										},
										{
											"begin": 743,
											"end": 776,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "259"
										},
										{
											"begin": 702,
											"end": 734,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 743,
											"end": 776,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "255"
										},
										{
											"begin": 743,
											"end": 776,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 743,
											"end": 776,
											"name": "tag",
											"source": 10,
											"value": "259"
										},
										{
											"begin": 743,
											"end": 776,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 795,
											"end": 802,
											"name": "SWAP5",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 854,
											"end": 856,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 839,
											"end": 857,
											"name": "DUP8",
											"source": 10
										},
										{
											"begin": 839,
											"end": 857,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 826,
											"end": 858,
											"name": "CALLDATALOAD",
											"source": 10
										},
										{
											"begin": 867,
											"end": 900,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "260"
										},
										{
											"begin": 826,
											"end": 858,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 867,
											"end": 900,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "255"
										},
										{
											"begin": 867,
											"end": 900,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 867,
											"end": 900,
											"name": "tag",
											"source": 10,
											"value": "260"
										},
										{
											"begin": 867,
											"end": 900,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 919,
											"end": 926,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 964,
											"end": 967,
											"name": "PUSH",
											"source": 10,
											"value": "7F"
										},
										{
											"begin": 949,
											"end": 968,
											"name": "DUP8",
											"source": 10
										},
										{
											"begin": 949,
											"end": 968,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 945,
											"end": 978,
											"name": "DUP9",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SGT",
											"source": -1
										},
										{
											"begin": 935,
											"end": 937,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "261"
										},
										{
											"begin": 935,
											"end": 937,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 997,
											"end": 1003,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 989,
											"end": 995,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 982,
											"end": 1004,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 935,
											"end": 937,
											"name": "tag",
											"source": 10,
											"value": "261"
										},
										{
											"begin": 935,
											"end": 937,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1035,
											"end": 1037,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 1029,
											"end": 1038,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 1077,
											"end": 1080,
											"name": "PUSH",
											"source": 10,
											"value": "E0"
										},
										{
											"begin": 1069,
											"end": 1075,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1065,
											"end": 1081,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1147,
											"end": 1153,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1135,
											"end": 1145,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1132,
											"end": 1154,
											"name": "LT",
											"source": 10
										},
										{
											"begin": 1111,
											"end": 1129,
											"name": "PUSH",
											"source": 10,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1099,
											"end": 1109,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 1096,
											"end": 1130,
											"name": "GT",
											"source": 10
										},
										{
											"begin": 1093,
											"end": 1155,
											"name": "OR",
											"source": 10
										},
										{
											"begin": 1090,
											"end": 1092,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 1090,
											"end": 1092,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "263"
										},
										{
											"begin": 1090,
											"end": 1092,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 1158,
											"end": 1176,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "263"
										},
										{
											"begin": 1158,
											"end": 1176,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "264"
										},
										{
											"begin": 1158,
											"end": 1176,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 1158,
											"end": 1176,
											"name": "tag",
											"source": 10,
											"value": "263"
										},
										{
											"begin": 1158,
											"end": 1176,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1194,
											"end": 1196,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 1187,
											"end": 1209,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 1229,
											"end": 1235,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1270,
											"end": 1272,
											"name": "PUSH",
											"source": 10,
											"value": "60"
										},
										{
											"begin": 1255,
											"end": 1273,
											"name": "DUP10",
											"source": 10
										},
										{
											"begin": 1255,
											"end": 1273,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1288,
											"end": 1306,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 1288,
											"end": 1306,
											"name": "DUP11",
											"source": 10
										},
										{
											"begin": 1288,
											"end": 1306,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1285,
											"end": 1316,
											"name": "DUP12",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "LT",
											"source": -1
										},
										{
											"begin": 1282,
											"end": 1284,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 1282,
											"end": 1284,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "265"
										},
										{
											"begin": 1282,
											"end": 1284,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 1334,
											"end": 1340,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 1326,
											"end": 1332,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 1319,
											"end": 1341,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 1282,
											"end": 1284,
											"name": "tag",
											"source": 10,
											"value": "265"
										},
										{
											"begin": 1282,
											"end": 1284,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1361,
											"end": 1367,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 1352,
											"end": 1367,
											"name": "SWAP5",
											"source": 10
										},
										{
											"begin": 1352,
											"end": 1367,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1376,
											"end": 1541,
											"name": "tag",
											"source": 10,
											"value": "266"
										},
										{
											"begin": 1376,
											"end": 1541,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1390,
											"end": 1394,
											"name": "PUSH",
											"source": 10,
											"value": "7"
										},
										{
											"begin": 1387,
											"end": 1388,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 1384,
											"end": 1395,
											"name": "LT",
											"source": 10
										},
										{
											"begin": 1376,
											"end": 1541,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 1376,
											"end": 1541,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "268"
										},
										{
											"begin": 1376,
											"end": 1541,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 1449,
											"end": 1466,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1449,
											"end": 1466,
											"name": "CALLDATALOAD",
											"source": 10
										},
										{
											"begin": 1437,
											"end": 1467,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 1437,
											"end": 1467,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 1410,
											"end": 1411,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 1403,
											"end": 1412,
											"name": "SWAP5",
											"source": 10
										},
										{
											"begin": 1403,
											"end": 1412,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1403,
											"end": 1412,
											"name": "SWAP5",
											"source": 10
										},
										{
											"begin": 1403,
											"end": 1412,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1403,
											"end": 1412,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 1487,
											"end": 1499,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1487,
											"end": 1499,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 1487,
											"end": 1499,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1487,
											"end": 1499,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1519,
											"end": 1531,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 1519,
											"end": 1531,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1376,
											"end": 1541,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "266"
										},
										{
											"begin": 1376,
											"end": 1541,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 1376,
											"end": 1541,
											"name": "tag",
											"source": 10,
											"value": "268"
										},
										{
											"begin": 1376,
											"end": 1541,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1380,
											"end": 1383,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1380,
											"end": 1383,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1560,
											"end": 1566,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1550,
											"end": 1566,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 1550,
											"end": 1566,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1550,
											"end": 1566,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1550,
											"end": 1566,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1550,
											"end": 1566,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 454,
											"end": 1572,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 454,
											"end": 1572,
											"name": "SWAP6",
											"source": 10
										},
										{
											"begin": 454,
											"end": 1572,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 454,
											"end": 1572,
											"name": "SWAP5",
											"source": 10
										},
										{
											"begin": 454,
											"end": 1572,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 454,
											"end": 1572,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 454,
											"end": 1572,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 454,
											"end": 1572,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 1577,
											"end": 1874,
											"name": "tag",
											"source": 10,
											"value": "238"
										},
										{
											"begin": 1577,
											"end": 1874,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1644,
											"end": 1650,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1697,
											"end": 1699,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 1685,
											"end": 1694,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 1676,
											"end": 1683,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 1672,
											"end": 1695,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 1668,
											"end": 1700,
											"name": "SLT",
											"source": 10
										},
										{
											"begin": 1665,
											"end": 1667,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 1665,
											"end": 1667,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "270"
										},
										{
											"begin": 1665,
											"end": 1667,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 1718,
											"end": 1724,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1710,
											"end": 1716,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1703,
											"end": 1725,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 1665,
											"end": 1667,
											"name": "tag",
											"source": 10,
											"value": "270"
										},
										{
											"begin": 1665,
											"end": 1667,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1755,
											"end": 1764,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1749,
											"end": 1765,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 1808,
											"end": 1813,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1801,
											"end": 1814,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 1794,
											"end": 1815,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 1787,
											"end": 1792,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1784,
											"end": 1816,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 1774,
											"end": 1776,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "254"
										},
										{
											"begin": 1774,
											"end": 1776,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 1835,
											"end": 1841,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1827,
											"end": 1833,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 1820,
											"end": 1842,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 1879,
											"end": 2069,
											"name": "tag",
											"source": 10,
											"value": "42"
										},
										{
											"begin": 1879,
											"end": 2069,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1938,
											"end": 1944,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1991,
											"end": 1993,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 1979,
											"end": 1988,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 1970,
											"end": 1977,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 1966,
											"end": 1989,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 1962,
											"end": 1994,
											"name": "SLT",
											"source": 10
										},
										{
											"begin": 1959,
											"end": 1961,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 1959,
											"end": 1961,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "273"
										},
										{
											"begin": 1959,
											"end": 1961,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 2012,
											"end": 2018,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 2004,
											"end": 2010,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1997,
											"end": 2019,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 1959,
											"end": 1961,
											"name": "tag",
											"source": 10,
											"value": "273"
										},
										{
											"begin": 1959,
											"end": 1961,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2040,
											"end": 2063,
											"name": "CALLDATALOAD",
											"source": 10
										},
										{
											"begin": 2040,
											"end": 2063,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 1949,
											"end": 2069,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1949,
											"end": 2069,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 2074,
											"end": 2268,
											"name": "tag",
											"source": 10,
											"value": "114"
										},
										{
											"begin": 2074,
											"end": 2268,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2144,
											"end": 2150,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 2197,
											"end": 2199,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 2185,
											"end": 2194,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 2176,
											"end": 2183,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 2172,
											"end": 2195,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 2168,
											"end": 2200,
											"name": "SLT",
											"source": 10
										},
										{
											"begin": 2165,
											"end": 2167,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 2165,
											"end": 2167,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "275"
										},
										{
											"begin": 2165,
											"end": 2167,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 2218,
											"end": 2224,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 2210,
											"end": 2216,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 2203,
											"end": 2225,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 2165,
											"end": 2167,
											"name": "tag",
											"source": 10,
											"value": "275"
										},
										{
											"begin": 2165,
											"end": 2167,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2246,
											"end": 2262,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 2246,
											"end": 2262,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 2155,
											"end": 2268,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2155,
											"end": 2268,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 2273,
											"end": 2703,
											"name": "tag",
											"source": 10,
											"value": "231"
										},
										{
											"begin": 2273,
											"end": 2703,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2402,
											"end": 2405,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 2440,
											"end": 2446,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 2434,
											"end": 2447,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 2465,
											"end": 2468,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 2477,
											"end": 2606,
											"name": "tag",
											"source": 10,
											"value": "277"
										},
										{
											"begin": 2477,
											"end": 2606,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2491,
											"end": 2497,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 2488,
											"end": 2489,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 2485,
											"end": 2498,
											"name": "LT",
											"source": 10
										},
										{
											"begin": 2477,
											"end": 2606,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 2477,
											"end": 2606,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "279"
										},
										{
											"begin": 2477,
											"end": 2606,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 2589,
											"end": 2593,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 2573,
											"end": 2587,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 2573,
											"end": 2587,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 2573,
											"end": 2587,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 2569,
											"end": 2594,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 2569,
											"end": 2594,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 2563,
											"end": 2595,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 2550,
											"end": 2561,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 2550,
											"end": 2561,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 2550,
											"end": 2561,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 2543,
											"end": 2596,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 2506,
											"end": 2518,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 2477,
											"end": 2606,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "277"
										},
										{
											"begin": 2477,
											"end": 2606,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 2477,
											"end": 2606,
											"name": "tag",
											"source": 10,
											"value": "279"
										},
										{
											"begin": 2477,
											"end": 2606,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2624,
											"end": 2630,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 2621,
											"end": 2622,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 2618,
											"end": 2631,
											"name": "GT",
											"source": 10
										},
										{
											"begin": 2615,
											"end": 2617,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 2615,
											"end": 2617,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "280"
										},
										{
											"begin": 2615,
											"end": 2617,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 2659,
											"end": 2662,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 2650,
											"end": 2656,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 2645,
											"end": 2648,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 2641,
											"end": 2657,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 2634,
											"end": 2663,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 2615,
											"end": 2617,
											"name": "tag",
											"source": 10,
											"value": "280"
										},
										{
											"begin": 2615,
											"end": 2617,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2681,
											"end": 2697,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 2681,
											"end": 2697,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 2681,
											"end": 2697,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 2681,
											"end": 2697,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 2681,
											"end": 2697,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 2410,
											"end": 2703,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2410,
											"end": 2703,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 8989,
											"end": 9117,
											"name": "tag",
											"source": 10,
											"value": "183"
										},
										{
											"begin": 8989,
											"end": 9117,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 9029,
											"end": 9032,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 9060,
											"end": 9061,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 9056,
											"end": 9062,
											"name": "NOT",
											"source": 10
										},
										{
											"begin": 9053,
											"end": 9054,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 9050,
											"end": 9063,
											"name": "GT",
											"source": 10
										},
										{
											"begin": 9047,
											"end": 9049,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 9047,
											"end": 9049,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "299"
										},
										{
											"begin": 9047,
											"end": 9049,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 9066,
											"end": 9084,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "299"
										},
										{
											"begin": 9066,
											"end": 9084,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "300"
										},
										{
											"begin": 9066,
											"end": 9084,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 9066,
											"end": 9084,
											"name": "tag",
											"source": 10,
											"value": "299"
										},
										{
											"begin": 9066,
											"end": 9084,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 9102,
											"end": 9111,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 9102,
											"end": 9111,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 9037,
											"end": 9117,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 9122,
											"end": 9339,
											"name": "tag",
											"source": 10,
											"value": "226"
										},
										{
											"begin": 9122,
											"end": 9339,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 9162,
											"end": 9163,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 9188,
											"end": 9189,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 9178,
											"end": 9180,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "302"
										},
										{
											"begin": 9178,
											"end": 9180,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "4E487B71"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 9213,
											"end": 9244,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 9213,
											"end": 9244,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 9267,
											"end": 9271,
											"name": "PUSH",
											"source": 10,
											"value": "12"
										},
										{
											"begin": 9264,
											"end": 9265,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 9257,
											"end": 9272,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 9295,
											"end": 9299,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 9220,
											"end": 9221,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 9285,
											"end": 9300,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 9178,
											"end": 9180,
											"name": "tag",
											"source": 10,
											"value": "302"
										},
										{
											"begin": 9178,
											"end": 9180,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 9324,
											"end": 9333,
											"name": "DIV",
											"source": 10
										},
										{
											"begin": 9324,
											"end": 9333,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 9168,
											"end": 9339,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 9344,
											"end": 9766,
											"name": "tag",
											"source": 10,
											"value": "303"
										},
										{
											"begin": 9344,
											"end": 9766,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 9433,
											"end": 9434,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 9476,
											"end": 9481,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 9433,
											"end": 9434,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 9490,
											"end": 9760,
											"name": "tag",
											"source": 10,
											"value": "305"
										},
										{
											"begin": 9490,
											"end": 9760,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 9511,
											"end": 9518,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 9501,
											"end": 9509,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 9498,
											"end": 9519,
											"name": "GT",
											"source": 10
										},
										{
											"begin": 9490,
											"end": 9760,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 9490,
											"end": 9760,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "307"
										},
										{
											"begin": 9490,
											"end": 9760,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 9570,
											"end": 9574,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 9566,
											"end": 9567,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 9562,
											"end": 9568,
											"name": "NOT",
											"source": 10
										},
										{
											"begin": 9558,
											"end": 9575,
											"name": "DIV",
											"source": 10
										},
										{
											"begin": 9552,
											"end": 9556,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 9549,
											"end": 9576,
											"name": "GT",
											"source": 10
										},
										{
											"begin": 9546,
											"end": 9548,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 9546,
											"end": 9548,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "309"
										},
										{
											"begin": 9546,
											"end": 9548,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 9579,
											"end": 9597,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "309"
										},
										{
											"begin": 9579,
											"end": 9597,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "300"
										},
										{
											"begin": 9579,
											"end": 9597,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 9579,
											"end": 9597,
											"name": "tag",
											"source": 10,
											"value": "309"
										},
										{
											"begin": 9579,
											"end": 9597,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 9629,
											"end": 9636,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 9619,
											"end": 9627,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 9615,
											"end": 9637,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 9612,
											"end": 9614,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 9612,
											"end": 9614,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "310"
										},
										{
											"begin": 9612,
											"end": 9614,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 9649,
											"end": 9665,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 9649,
											"end": 9665,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 9649,
											"end": 9665,
											"name": "MUL",
											"source": 10
										},
										{
											"begin": 9649,
											"end": 9665,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 9612,
											"end": 9614,
											"name": "tag",
											"source": 10,
											"value": "310"
										},
										{
											"begin": 9612,
											"end": 9614,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 9728,
											"end": 9750,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 9728,
											"end": 9750,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 9728,
											"end": 9750,
											"name": "SHR",
											"source": 10
										},
										{
											"begin": 9728,
											"end": 9750,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 9688,
											"end": 9703,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 9688,
											"end": 9703,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 9688,
											"end": 9703,
											"name": "MUL",
											"source": 10
										},
										{
											"begin": 9688,
											"end": 9703,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 9490,
											"end": 9760,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "305"
										},
										{
											"begin": 9490,
											"end": 9760,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 9490,
											"end": 9760,
											"name": "tag",
											"source": 10,
											"value": "307"
										},
										{
											"begin": 9490,
											"end": 9760,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 9494,
											"end": 9497,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 9408,
											"end": 9766,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 9408,
											"end": 9766,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 9408,
											"end": 9766,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 9408,
											"end": 9766,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 9408,
											"end": 9766,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 9408,
											"end": 9766,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 9771,
											"end": 9902,
											"name": "tag",
											"source": 10,
											"value": "116"
										},
										{
											"begin": 9771,
											"end": 9902,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 9831,
											"end": 9836,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 9860,
											"end": 9896,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "216"
										},
										{
											"begin": 9887,
											"end": 9895,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 9881,
											"end": 9885,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 9956,
											"end": 9961,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 9986,
											"end": 9994,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 9976,
											"end": 9978,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "315"
										},
										{
											"begin": 9976,
											"end": 9978,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 10027,
											"end": 10028,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 10041,
											"end": 10046,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "215"
										},
										{
											"begin": 10041,
											"end": 10046,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 9976,
											"end": 9978,
											"name": "tag",
											"source": 10,
											"value": "315"
										},
										{
											"begin": 9976,
											"end": 9978,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 10075,
											"end": 10079,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 10065,
											"end": 10067,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "316"
										},
										{
											"begin": 10065,
											"end": 10067,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 10112,
											"end": 10113,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 10126,
											"end": 10131,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "215"
										},
										{
											"begin": 10126,
											"end": 10131,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 10065,
											"end": 10067,
											"name": "tag",
											"source": 10,
											"value": "316"
										},
										{
											"begin": 10065,
											"end": 10067,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 10157,
											"end": 10161,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 10175,
											"end": 10176,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 10170,
											"end": 10229,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 10170,
											"end": 10229,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 10170,
											"end": 10229,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "318"
										},
										{
											"begin": 10170,
											"end": 10229,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 10243,
											"end": 10244,
											"name": "PUSH",
											"source": 10,
											"value": "2"
										},
										{
											"begin": 10238,
											"end": 10368,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 10238,
											"end": 10368,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 10238,
											"end": 10368,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "319"
										},
										{
											"begin": 10238,
											"end": 10368,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 10150,
											"end": 10368,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "317"
										},
										{
											"begin": 10150,
											"end": 10368,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 10170,
											"end": 10229,
											"name": "tag",
											"source": 10,
											"value": "318"
										},
										{
											"begin": 10170,
											"end": 10229,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 10200,
											"end": 10201,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 10191,
											"end": 10201,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 10191,
											"end": 10201,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 10214,
											"end": 10219,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 10214,
											"end": 10219,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "215"
										},
										{
											"begin": 10214,
											"end": 10219,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 10238,
											"end": 10368,
											"name": "tag",
											"source": 10,
											"value": "319"
										},
										{
											"begin": 10238,
											"end": 10368,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 10275,
											"end": 10278,
											"name": "PUSH",
											"source": 10,
											"value": "FF"
										},
										{
											"begin": 10265,
											"end": 10273,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 10262,
											"end": 10279,
											"name": "GT",
											"source": 10
										},
										{
											"begin": 10259,
											"end": 10261,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 10259,
											"end": 10261,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "321"
										},
										{
											"begin": 10259,
											"end": 10261,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 10282,
											"end": 10300,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "321"
										},
										{
											"begin": 10282,
											"end": 10300,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "300"
										},
										{
											"begin": 10282,
											"end": 10300,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 10282,
											"end": 10300,
											"name": "tag",
											"source": 10,
											"value": "321"
										},
										{
											"begin": 10282,
											"end": 10300,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 10338,
											"end": 10339,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 10324,
											"end": 10340,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 10324,
											"end": 10340,
											"name": "SHL",
											"source": 10
										},
										{
											"begin": 10353,
											"end": 10358,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "215"
										},
										{
											"begin": 10353,
											"end": 10358,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 10150,
											"end": 10368,
											"name": "tag",
											"source": 10,
											"value": "317"
										},
										{
											"begin": 10150,
											"end": 10368,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 10150,
											"end": 10368,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 10452,
											"end": 10454,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 10442,
											"end": 10450,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 10439,
											"end": 10455,
											"name": "LT",
											"source": 10
										},
										{
											"begin": 10433,
											"end": 10436,
											"name": "PUSH",
											"source": 10,
											"value": "133"
										},
										{
											"begin": 10427,
											"end": 10431,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 10424,
											"end": 10437,
											"name": "LT",
											"source": 10
										},
										{
											"begin": 10420,
											"end": 10456,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 10414,
											"end": 10416,
											"name": "PUSH",
											"source": 10,
											"value": "4E"
										},
										{
											"begin": 10404,
											"end": 10412,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 10401,
											"end": 10417,
											"name": "LT",
											"source": 10
										},
										{
											"begin": 10396,
											"end": 10398,
											"name": "PUSH",
											"source": 10,
											"value": "B"
										},
										{
											"begin": 10390,
											"end": 10394,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 10387,
											"end": 10399,
											"name": "LT",
											"source": 10
										},
										{
											"begin": 10383,
											"end": 10418,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 10380,
											"end": 10457,
											"name": "OR",
											"source": 10
										},
										{
											"begin": 10377,
											"end": 10379,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 10377,
											"end": 10379,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "322"
										},
										{
											"begin": 10377,
											"end": 10379,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 10489,
											"end": 10508,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 10489,
											"end": 10508,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 10489,
											"end": 10508,
											"name": "EXP",
											"source": 10
										},
										{
											"begin": 10521,
											"end": 10526,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "215"
										},
										{
											"begin": 10521,
											"end": 10526,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 10377,
											"end": 10379,
											"name": "tag",
											"source": 10,
											"value": "322"
										},
										{
											"begin": 10377,
											"end": 10379,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 10568,
											"end": 10602,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "323"
										},
										{
											"begin": 10593,
											"end": 10601,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 10587,
											"end": 10591,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 10568,
											"end": 10602,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "303"
										},
										{
											"begin": 10568,
											"end": 10602,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 10568,
											"end": 10602,
											"name": "tag",
											"source": 10,
											"value": "323"
										},
										{
											"begin": 10568,
											"end": 10602,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 10638,
											"end": 10644,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 10634,
											"end": 10635,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 10630,
											"end": 10636,
											"name": "NOT",
											"source": 10
										},
										{
											"begin": 10626,
											"end": 10645,
											"name": "DIV",
											"source": 10
										},
										{
											"begin": 10617,
											"end": 10624,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 10614,
											"end": 10646,
											"name": "GT",
											"source": 10
										},
										{
											"begin": 10611,
											"end": 10613,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 10611,
											"end": 10613,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "325"
										},
										{
											"begin": 10611,
											"end": 10613,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 10649,
											"end": 10667,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "325"
										},
										{
											"begin": 10649,
											"end": 10667,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "300"
										},
										{
											"begin": 10649,
											"end": 10667,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 10649,
											"end": 10667,
											"name": "tag",
											"source": 10,
											"value": "325"
										},
										{
											"begin": 10649,
											"end": 10667,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 10687,
											"end": 10707,
											"name": "MUL",
											"source": 10
										},
										{
											"begin": 10687,
											"end": 10707,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 9966,
											"end": 10713,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 9966,
											"end": 10713,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 10718,
											"end": 10886,
											"name": "tag",
											"source": 10,
											"value": "119"
										},
										{
											"begin": 10718,
											"end": 10886,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 10758,
											"end": 10765,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 10824,
											"end": 10825,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 10820,
											"end": 10821,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 10816,
											"end": 10822,
											"name": "NOT",
											"source": 10
										},
										{
											"begin": 10812,
											"end": 10826,
											"name": "DIV",
											"source": 10
										},
										{
											"begin": 10809,
											"end": 10810,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 10806,
											"end": 10827,
											"name": "GT",
											"source": 10
										},
										{
											"begin": 10801,
											"end": 10802,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 10794,
											"end": 10803,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 10787,
											"end": 10804,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 10783,
											"end": 10828,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 10780,
											"end": 10782,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 10780,
											"end": 10782,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "328"
										},
										{
											"begin": 10780,
											"end": 10782,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 10831,
											"end": 10849,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "328"
										},
										{
											"begin": 10831,
											"end": 10849,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "300"
										},
										{
											"begin": 10831,
											"end": 10849,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 10831,
											"end": 10849,
											"name": "tag",
											"source": 10,
											"value": "328"
										},
										{
											"begin": 10831,
											"end": 10849,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 10871,
											"end": 10880,
											"name": "MUL",
											"source": 10
										},
										{
											"begin": 10871,
											"end": 10880,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 10770,
											"end": 10886,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 10891,
											"end": 11016,
											"name": "tag",
											"source": 10,
											"value": "106"
										},
										{
											"begin": 10891,
											"end": 11016,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 10931,
											"end": 10935,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 10959,
											"end": 10960,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 10956,
											"end": 10957,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 10953,
											"end": 10961,
											"name": "LT",
											"source": 10
										},
										{
											"begin": 10950,
											"end": 10952,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 10950,
											"end": 10952,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "331"
										},
										{
											"begin": 10950,
											"end": 10952,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 10964,
											"end": 10982,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "331"
										},
										{
											"begin": 10964,
											"end": 10982,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "300"
										},
										{
											"begin": 10964,
											"end": 10982,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 10964,
											"end": 10982,
											"name": "tag",
											"source": 10,
											"value": "331"
										},
										{
											"begin": 10964,
											"end": 10982,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 11001,
											"end": 11010,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 11001,
											"end": 11010,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 10940,
											"end": 11016,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 11021,
											"end": 11148,
											"name": "tag",
											"source": 10,
											"value": "300"
										},
										{
											"begin": 11021,
											"end": 11148,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 11082,
											"end": 11092,
											"name": "PUSH",
											"source": 10,
											"value": "4E487B71"
										},
										{
											"begin": 11077,
											"end": 11080,
											"name": "PUSH",
											"source": 10,
											"value": "E0"
										},
										{
											"begin": 11073,
											"end": 11093,
											"name": "SHL",
											"source": 10
										},
										{
											"begin": 11070,
											"end": 11071,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 11063,
											"end": 11094,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 11113,
											"end": 11117,
											"name": "PUSH",
											"source": 10,
											"value": "11"
										},
										{
											"begin": 11110,
											"end": 11111,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 11103,
											"end": 11118,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 11137,
											"end": 11141,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 11134,
											"end": 11135,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 11127,
											"end": 11142,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 11153,
											"end": 11280,
											"name": "tag",
											"source": 10,
											"value": "264"
										},
										{
											"begin": 11153,
											"end": 11280,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 11214,
											"end": 11224,
											"name": "PUSH",
											"source": 10,
											"value": "4E487B71"
										},
										{
											"begin": 11209,
											"end": 11212,
											"name": "PUSH",
											"source": 10,
											"value": "E0"
										},
										{
											"begin": 11205,
											"end": 11225,
											"name": "SHL",
											"source": 10
										},
										{
											"begin": 11202,
											"end": 11203,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 11195,
											"end": 11226,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 11245,
											"end": 11249,
											"name": "PUSH",
											"source": 10,
											"value": "41"
										},
										{
											"begin": 11242,
											"end": 11243,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 11235,
											"end": 11250,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 11269,
											"end": 11273,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 11266,
											"end": 11267,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 11259,
											"end": 11274,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 11285,
											"end": 11416,
											"name": "tag",
											"source": 10,
											"value": "255"
										},
										{
											"begin": 11285,
											"end": 11416,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 11360,
											"end": 11391,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 11360,
											"end": 11391,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 11350,
											"end": 11392,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 11350,
											"end": 11392,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 11340,
											"end": 11342,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "146"
										},
										{
											"begin": 11340,
											"end": 11342,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 11406,
											"end": 11407,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 11403,
											"end": 11404,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 11396,
											"end": 11408,
											"name": "REVERT",
											"source": 10
										}
									]
								}
							}
						},
						"methodIdentifiers": {
							"WETH()": "ad5c4648",
							"backToken()": "861faf5f",
							"buyerInfo(address)": "e2d3f423",
							"checkAdminAddress()": "cad5b0f7",
							"deposit(uint256)": "b6b55f25",
							"feeAnyone()": "3b5ef2ad",
							"getBalance(address)": "f8b2cb4f",
							"initialSaleInfor(address,address,address,uint256[7])": "61e17655",
							"owner()": "8da5cb5b",
							"presaleStatus()": "acfb2355",
							"renounceOwnership()": "715018a6",
							"saleInfor()": "18856a2f",
							"status()": "200d2ed2",
							"totalFee()": "1df4ccfc",
							"transferETH(uint256)": "4329db46",
							"transferOwnership(address)": "f2fde38b",
							"userFee(address)": "56c5f349"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"backToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"buyerInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"baseDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenOwner\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastWithDraw\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalTokenWithDraw\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isRefund\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isClaim\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkAdminAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeAnyone\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_presaleOwner\",\"type\":\"address\"},{\"internalType\":\"contract ERC20\",\"name\":\"_saleToken\",\"type\":\"address\"},{\"internalType\":\"contract ERC20\",\"name\":\"_baseTOken\",\"type\":\"address\"},{\"internalType\":\"uint256[7]\",\"name\":\"datas\",\"type\":\"uint256[7]\"}],\"name\":\"initialSaleInfor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleStatus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalBaseCollected\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalTokenSold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalTokenWithDraw\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBaseWithDraw\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numByer\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saleInfor\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"presaleOwner\",\"type\":\"address\"},{\"internalType\":\"contract ERC20\",\"name\":\"saleToken\",\"type\":\"address\"},{\"internalType\":\"contract ERC20\",\"name\":\"baseToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startSale\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endSale\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minSpendPerBuyer\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSpendPerBuyer\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"refundFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimFee\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"saleIsBaseToken\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amountTokenForSale\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"status\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"Ethereum/Presale.sol\":\"Presale\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"ERC20/ERC20.sol\":{\"keccak256\":\"0x06de64a6e4f0f98aaf7bc91b3826b714e7ce7827a08da3031f8f2f91c14c5687\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://79cb85a1ebbc907f8b80a26cfce98cd61eb1dfc5dbed47f2cc5f6e7a3e87d2db\",\"dweb:/ipfs/QmWzRXkG6oFwtNiGz98zduSDVYhnTKkCE5YMTVE15fBFse\"]},\"ERC20/IERC20.sol\":{\"keccak256\":\"0x62e7e272bf9d2c10b294645ea698d7fc41dadc18146ac88e9b9cc18514faacc1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e09024b0f1ddb94bdc13008d4c221747b1a6f1e07b0ca599d8d213925982af34\",\"dweb:/ipfs/QmcL6X4KCFc45tk5xSEgBDFUrsKap8G74aJtti5sUYzYCL\"]},\"ERC20/IERC20Metadata.sol\":{\"keccak256\":\"0x2095e6b6cd9fc67a55c1dce6c4a4282036fef487baf848e399adc2f571f6c47b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bbdbc5c7af217e674e7c45ab729cf3ffe1c2756c4438e5818f39f30266b836e2\",\"dweb:/ipfs/QmPkmQQ6bAVYGRKR1KMqRhU1kPL49aFc5zqCLmJZEMsavE\"]},\"Ethereum/Presale.sol\":{\"keccak256\":\"0xd47567b35bb0c6cc8b22d74b1ec77adc6eb0cd5ef4298114d37a1ac67f1bd8c4\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c1bd3f25e6cac08a3e932fb94db802ea23be3128a995700a01f8f4750dbb20ba\",\"dweb:/ipfs/QmV12BsSWb9Vp3Ue4gRy2YySa17G61Pm75Fr8N2oT1uou5\"]},\"Utils/Context.sol\":{\"keccak256\":\"0x81d5fc973a522c8909d60be6a201869d46aa47b030b8813f60616404628c2b94\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9755b505799e622d964a843a8ed1fd60fedffca230178e5cb95ae9280df4dcd2\",\"dweb:/ipfs/QmRkhUYUUgRZ2QYJjmtQct2ubyYwS3bdUMhbuFYM12VfYn\"]},\"Utils/EnumerableSet.sol\":{\"keccak256\":\"0x8adfeb5c886c6a727bdeac6db8e78f418e09f16f7c941c7111125b59ec2fd838\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://632e2346228015ce98183a0f0658057a9f2ae8b8d25b639eb9303e8e0ea34957\",\"dweb:/ipfs/QmPY3nbe3JhMsgyHJTtXRkLTioW997Bvizt23mPNKKGSgu\"]},\"Utils/Ownable.sol\":{\"keccak256\":\"0x5eeb86897007c578f301464fceac720c7330486c54ae85c0c09068b46197cfb9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://edefd9ff4f087a3016763a687eaae449c0e8f6dcda9d86032a49de900f129050\",\"dweb:/ipfs/Qmc4adiPdGKgEJLxqgd8JuKkwrNBNtB78kkGinnnuUnyJN\"]},\"Utils/ReentrancyGuard.sol\":{\"keccak256\":\"0x5531a4a8604939470e38d88dbb16a35c38cf17a3d66393fe9c73b5da561615df\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d0fd4ce017408e0e7cda8bb02298443533e2fbb261878df176374bee5c3e4adf\",\"dweb:/ipfs/QmPhT3sFavHxyWopC7f1Ukzw1TDmmkzr5te24Btuvunpz1\"]},\"Utils/SafeMath.sol\":{\"keccak256\":\"0xdc9b51d94a1db880c1f2e722af561c28c41100eea201b1ae5e77eb7c4250e389\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0b69f7fb378dcfd4aff8ba0547a575485d2d4bb567381e3bf8c593b63272ffc0\",\"dweb:/ipfs/QmaEo28ZDAnpDvpQRRt7Qc8bF5QgJAnTEE4TxYnJS8YmnN\"]},\"Utils/TransferHelper.sol\":{\"keccak256\":\"0x7ab3ec832cb3fa01c85928f2aa6535f00adda76d891cb087e75ba493b6027d7f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ffc0f1cefbdb42cb111d8e76e27e788cd2ed8b846d3b8f19d0935beedffca891\",\"dweb:/ipfs/QmbRJm5q9Xqv9Py9aqkGqiKMfkHzdXvnidCLFH66oXY3Zk\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 2007,
								"contract": "Ethereum/Presale.sol:Presale",
								"label": "_status",
								"offset": 0,
								"slot": "0",
								"type": "t_uint256"
							},
							{
								"astId": 1899,
								"contract": "Ethereum/Presale.sol:Presale",
								"label": "_owner",
								"offset": 0,
								"slot": "1",
								"type": "t_address"
							},
							{
								"astId": 768,
								"contract": "Ethereum/Presale.sol:Presale",
								"label": "buyerInfo",
								"offset": 0,
								"slot": "2",
								"type": "t_mapping(t_address,t_struct(BuyerInfo)747_storage)"
							},
							{
								"astId": 772,
								"contract": "Ethereum/Presale.sol:Presale",
								"label": "userFee",
								"offset": 0,
								"slot": "3",
								"type": "t_mapping(t_address,t_uint256)"
							},
							{
								"astId": 775,
								"contract": "Ethereum/Presale.sol:Presale",
								"label": "presaleStatus",
								"offset": 0,
								"slot": "4",
								"type": "t_struct(PresaleStatus)763_storage"
							},
							{
								"astId": 778,
								"contract": "Ethereum/Presale.sol:Presale",
								"label": "saleInfor",
								"offset": 0,
								"slot": "11",
								"type": "t_struct(SaleInfor)734_storage"
							},
							{
								"astId": 781,
								"contract": "Ethereum/Presale.sol:Presale",
								"label": "WETH",
								"offset": 0,
								"slot": "23",
								"type": "t_contract(IERC20)663"
							},
							{
								"astId": 783,
								"contract": "Ethereum/Presale.sol:Presale",
								"label": "feeAnyone",
								"offset": 0,
								"slot": "24",
								"type": "t_uint256"
							},
							{
								"astId": 786,
								"contract": "Ethereum/Presale.sol:Presale",
								"label": "admins",
								"offset": 0,
								"slot": "25",
								"type": "t_struct(AddressSet)1604_storage"
							},
							{
								"astId": 788,
								"contract": "Ethereum/Presale.sol:Presale",
								"label": "totalFee",
								"offset": 0,
								"slot": "27",
								"type": "t_uint256"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_address_payable": {
								"encoding": "inplace",
								"label": "address payable",
								"numberOfBytes": "20"
							},
							"t_array(t_address)dyn_storage": {
								"base": "t_address",
								"encoding": "dynamic_array",
								"label": "address[]",
								"numberOfBytes": "32"
							},
							"t_array(t_bytes32)dyn_storage": {
								"base": "t_bytes32",
								"encoding": "dynamic_array",
								"label": "bytes32[]",
								"numberOfBytes": "32"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_bytes32": {
								"encoding": "inplace",
								"label": "bytes32",
								"numberOfBytes": "32"
							},
							"t_contract(ERC20)585": {
								"encoding": "inplace",
								"label": "contract ERC20",
								"numberOfBytes": "20"
							},
							"t_contract(IERC20)663": {
								"encoding": "inplace",
								"label": "contract IERC20",
								"numberOfBytes": "20"
							},
							"t_mapping(t_address,t_struct(BuyerInfo)747_storage)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => struct Presale.BuyerInfo)",
								"numberOfBytes": "32",
								"value": "t_struct(BuyerInfo)747_storage"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_mapping(t_bytes32,t_uint256)": {
								"encoding": "mapping",
								"key": "t_bytes32",
								"label": "mapping(bytes32 => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_struct(AddressSet)1604_storage": {
								"encoding": "inplace",
								"label": "struct EnumerableSet.AddressSet",
								"members": [
									{
										"astId": 1603,
										"contract": "Ethereum/Presale.sol:Presale",
										"label": "_inner",
										"offset": 0,
										"slot": "0",
										"type": "t_struct(Set)1303_storage"
									}
								],
								"numberOfBytes": "64"
							},
							"t_struct(BuyerInfo)747_storage": {
								"encoding": "inplace",
								"label": "struct Presale.BuyerInfo",
								"members": [
									{
										"astId": 736,
										"contract": "Ethereum/Presale.sol:Presale",
										"label": "baseDeposit",
										"offset": 0,
										"slot": "0",
										"type": "t_uint256"
									},
									{
										"astId": 738,
										"contract": "Ethereum/Presale.sol:Presale",
										"label": "tokenOwner",
										"offset": 0,
										"slot": "1",
										"type": "t_uint256"
									},
									{
										"astId": 740,
										"contract": "Ethereum/Presale.sol:Presale",
										"label": "lastWithDraw",
										"offset": 0,
										"slot": "2",
										"type": "t_uint256"
									},
									{
										"astId": 742,
										"contract": "Ethereum/Presale.sol:Presale",
										"label": "totalTokenWithDraw",
										"offset": 0,
										"slot": "3",
										"type": "t_uint256"
									},
									{
										"astId": 744,
										"contract": "Ethereum/Presale.sol:Presale",
										"label": "isRefund",
										"offset": 0,
										"slot": "4",
										"type": "t_bool"
									},
									{
										"astId": 746,
										"contract": "Ethereum/Presale.sol:Presale",
										"label": "isClaim",
										"offset": 1,
										"slot": "4",
										"type": "t_bool"
									}
								],
								"numberOfBytes": "160"
							},
							"t_struct(PresaleStatus)763_storage": {
								"encoding": "inplace",
								"label": "struct Presale.PresaleStatus",
								"members": [
									{
										"astId": 749,
										"contract": "Ethereum/Presale.sol:Presale",
										"label": "totalBaseCollected",
										"offset": 0,
										"slot": "0",
										"type": "t_uint256"
									},
									{
										"astId": 751,
										"contract": "Ethereum/Presale.sol:Presale",
										"label": "totalTokenSold",
										"offset": 0,
										"slot": "1",
										"type": "t_uint256"
									},
									{
										"astId": 753,
										"contract": "Ethereum/Presale.sol:Presale",
										"label": "totalTokenWithDraw",
										"offset": 0,
										"slot": "2",
										"type": "t_uint256"
									},
									{
										"astId": 755,
										"contract": "Ethereum/Presale.sol:Presale",
										"label": "totalBaseWithDraw",
										"offset": 0,
										"slot": "3",
										"type": "t_uint256"
									},
									{
										"astId": 757,
										"contract": "Ethereum/Presale.sol:Presale",
										"label": "numByer",
										"offset": 0,
										"slot": "4",
										"type": "t_uint256"
									},
									{
										"astId": 759,
										"contract": "Ethereum/Presale.sol:Presale",
										"label": "totalFee",
										"offset": 0,
										"slot": "5",
										"type": "t_uint256"
									},
									{
										"astId": 762,
										"contract": "Ethereum/Presale.sol:Presale",
										"label": "admin",
										"offset": 0,
										"slot": "6",
										"type": "t_array(t_address)dyn_storage"
									}
								],
								"numberOfBytes": "224"
							},
							"t_struct(SaleInfor)734_storage": {
								"encoding": "inplace",
								"label": "struct Presale.SaleInfor",
								"members": [
									{
										"astId": 709,
										"contract": "Ethereum/Presale.sol:Presale",
										"label": "presaleOwner",
										"offset": 0,
										"slot": "0",
										"type": "t_address_payable"
									},
									{
										"astId": 712,
										"contract": "Ethereum/Presale.sol:Presale",
										"label": "saleToken",
										"offset": 0,
										"slot": "1",
										"type": "t_contract(ERC20)585"
									},
									{
										"astId": 715,
										"contract": "Ethereum/Presale.sol:Presale",
										"label": "baseToken",
										"offset": 0,
										"slot": "2",
										"type": "t_contract(ERC20)585"
									},
									{
										"astId": 717,
										"contract": "Ethereum/Presale.sol:Presale",
										"label": "tokenPrice",
										"offset": 0,
										"slot": "3",
										"type": "t_uint256"
									},
									{
										"astId": 719,
										"contract": "Ethereum/Presale.sol:Presale",
										"label": "startSale",
										"offset": 0,
										"slot": "4",
										"type": "t_uint256"
									},
									{
										"astId": 721,
										"contract": "Ethereum/Presale.sol:Presale",
										"label": "endSale",
										"offset": 0,
										"slot": "5",
										"type": "t_uint256"
									},
									{
										"astId": 723,
										"contract": "Ethereum/Presale.sol:Presale",
										"label": "minSpendPerBuyer",
										"offset": 0,
										"slot": "6",
										"type": "t_uint256"
									},
									{
										"astId": 725,
										"contract": "Ethereum/Presale.sol:Presale",
										"label": "maxSpendPerBuyer",
										"offset": 0,
										"slot": "7",
										"type": "t_uint256"
									},
									{
										"astId": 727,
										"contract": "Ethereum/Presale.sol:Presale",
										"label": "refundFee",
										"offset": 0,
										"slot": "8",
										"type": "t_uint256"
									},
									{
										"astId": 729,
										"contract": "Ethereum/Presale.sol:Presale",
										"label": "claimFee",
										"offset": 0,
										"slot": "9",
										"type": "t_uint256"
									},
									{
										"astId": 731,
										"contract": "Ethereum/Presale.sol:Presale",
										"label": "saleIsBaseToken",
										"offset": 0,
										"slot": "10",
										"type": "t_bool"
									},
									{
										"astId": 733,
										"contract": "Ethereum/Presale.sol:Presale",
										"label": "amountTokenForSale",
										"offset": 0,
										"slot": "11",
										"type": "t_uint256"
									}
								],
								"numberOfBytes": "384"
							},
							"t_struct(Set)1303_storage": {
								"encoding": "inplace",
								"label": "struct EnumerableSet.Set",
								"members": [
									{
										"astId": 1298,
										"contract": "Ethereum/Presale.sol:Presale",
										"label": "_values",
										"offset": 0,
										"slot": "0",
										"type": "t_array(t_bytes32)dyn_storage"
									},
									{
										"astId": 1302,
										"contract": "Ethereum/Presale.sol:Presale",
										"label": "_indexes",
										"offset": 0,
										"slot": "1",
										"type": "t_mapping(t_bytes32,t_uint256)"
									}
								],
								"numberOfBytes": "64"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"Utils/Context.sol": {
				"Context": {
					"abi": [],
					"devdoc": {
						"details": "Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"Utils/Context.sol\":\"Context\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"Utils/Context.sol\":{\"keccak256\":\"0x81d5fc973a522c8909d60be6a201869d46aa47b030b8813f60616404628c2b94\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9755b505799e622d964a843a8ed1fd60fedffca230178e5cb95ae9280df4dcd2\",\"dweb:/ipfs/QmRkhUYUUgRZ2QYJjmtQct2ubyYwS3bdUMhbuFYM12VfYn\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"Utils/EnumerableSet.sol": {
				"EnumerableSet": {
					"abi": [],
					"devdoc": {
						"details": "Library for managing https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive types. Sets have the following properties: - Elements are added, removed, and checked for existence in constant time (O(1)). - Elements are enumerated in O(n). No guarantees are made on the ordering. ``` contract Example {     // Add the library methods     using EnumerableSet for EnumerableSet.AddressSet;     // Declare a set state variable     EnumerableSet.AddressSet private mySet; } ``` As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`) and `uint256` (`UintSet`) are supported. [WARNING] ====  Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable.  See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.  In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet. ====",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"Utils/EnumerableSet.sol\":1265:13048  library EnumerableSet {\r... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"Utils/EnumerableSet.sol\":1265:13048  library EnumerableSet {\r... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220e53c495bbcb95b26375932641aebc5c4c0c184b4691d7201b38f69c15214bdc164736f6c63430008040033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220e53c495bbcb95b26375932641aebc5c4c0c184b4691d7201b38f69c15214bdc164736f6c63430008040033",
							"opcodes": "PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE5 EXTCODECOPY 0x49 JUMPDEST 0xBC 0xB9 JUMPDEST 0x26 CALLDATACOPY MSIZE ORIGIN PUSH5 0x1AEBC5C4C0 0xC1 DUP5 0xB4 PUSH10 0x1D7201B38F69C15214BD 0xC1 PUSH5 0x736F6C6343 STOP ADDMOD DIV STOP CALLER ",
							"sourceMap": "1265:11783:5:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;1265:11783:5;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220e53c495bbcb95b26375932641aebc5c4c0c184b4691d7201b38f69c15214bdc164736f6c63430008040033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE5 EXTCODECOPY 0x49 JUMPDEST 0xBC 0xB9 JUMPDEST 0x26 CALLDATACOPY MSIZE ORIGIN PUSH5 0x1AEBC5C4C0 0xC1 DUP5 0xB4 PUSH10 0x1D7201B38F69C15214BD 0xC1 PUSH5 0x736F6C6343 STOP ADDMOD DIV STOP CALLER ",
							"sourceMap": "1265:11783:5:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "103",
								"totalCost": "17303"
							},
							"internal": {
								"_add(struct EnumerableSet.Set storage pointer,bytes32)": "infinite",
								"_at(struct EnumerableSet.Set storage pointer,uint256)": "infinite",
								"_contains(struct EnumerableSet.Set storage pointer,bytes32)": "infinite",
								"_length(struct EnumerableSet.Set storage pointer)": "infinite",
								"_remove(struct EnumerableSet.Set storage pointer,bytes32)": "infinite",
								"_values(struct EnumerableSet.Set storage pointer)": "infinite",
								"add(struct EnumerableSet.AddressSet storage pointer,address)": "infinite",
								"add(struct EnumerableSet.Bytes32Set storage pointer,bytes32)": "infinite",
								"add(struct EnumerableSet.UintSet storage pointer,uint256)": "infinite",
								"at(struct EnumerableSet.AddressSet storage pointer,uint256)": "infinite",
								"at(struct EnumerableSet.Bytes32Set storage pointer,uint256)": "infinite",
								"at(struct EnumerableSet.UintSet storage pointer,uint256)": "infinite",
								"contains(struct EnumerableSet.AddressSet storage pointer,address)": "infinite",
								"contains(struct EnumerableSet.Bytes32Set storage pointer,bytes32)": "infinite",
								"contains(struct EnumerableSet.UintSet storage pointer,uint256)": "infinite",
								"length(struct EnumerableSet.AddressSet storage pointer)": "infinite",
								"length(struct EnumerableSet.Bytes32Set storage pointer)": "infinite",
								"length(struct EnumerableSet.UintSet storage pointer)": "infinite",
								"remove(struct EnumerableSet.AddressSet storage pointer,address)": "infinite",
								"remove(struct EnumerableSet.Bytes32Set storage pointer,bytes32)": "infinite",
								"remove(struct EnumerableSet.UintSet storage pointer,uint256)": "infinite",
								"values(struct EnumerableSet.AddressSet storage pointer)": "infinite",
								"values(struct EnumerableSet.Bytes32Set storage pointer)": "infinite",
								"values(struct EnumerableSet.UintSet storage pointer)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 1265,
									"end": 13048,
									"name": "PUSH #[$]",
									"source": 5,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1265,
									"end": 13048,
									"name": "PUSH [$]",
									"source": 5,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1265,
									"end": 13048,
									"name": "PUSH",
									"source": 5,
									"value": "B"
								},
								{
									"begin": 1265,
									"end": 13048,
									"name": "DUP3",
									"source": 5
								},
								{
									"begin": 1265,
									"end": 13048,
									"name": "DUP3",
									"source": 5
								},
								{
									"begin": 1265,
									"end": 13048,
									"name": "DUP3",
									"source": 5
								},
								{
									"begin": 1265,
									"end": 13048,
									"name": "CODECOPY",
									"source": 5
								},
								{
									"begin": 1265,
									"end": 13048,
									"name": "DUP1",
									"source": 5
								},
								{
									"begin": 1265,
									"end": 13048,
									"name": "MLOAD",
									"source": 5
								},
								{
									"begin": 1265,
									"end": 13048,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 1265,
									"end": 13048,
									"name": "BYTE",
									"source": 5
								},
								{
									"begin": 1265,
									"end": 13048,
									"name": "PUSH",
									"source": 5,
									"value": "73"
								},
								{
									"begin": 1265,
									"end": 13048,
									"name": "EQ",
									"source": 5
								},
								{
									"begin": 1265,
									"end": 13048,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "1"
								},
								{
									"begin": 1265,
									"end": 13048,
									"name": "JUMPI",
									"source": 5
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 1265,
									"end": 13048,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 1265,
									"end": 13048,
									"name": "MSTORE",
									"source": 5
								},
								{
									"begin": 1265,
									"end": 13048,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 1265,
									"end": 13048,
									"name": "PUSH",
									"source": 5,
									"value": "4"
								},
								{
									"begin": 1265,
									"end": 13048,
									"name": "MSTORE",
									"source": 5
								},
								{
									"begin": 1265,
									"end": 13048,
									"name": "PUSH",
									"source": 5,
									"value": "24"
								},
								{
									"begin": 1265,
									"end": 13048,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 1265,
									"end": 13048,
									"name": "REVERT",
									"source": 5
								},
								{
									"begin": 1265,
									"end": 13048,
									"name": "tag",
									"source": 5,
									"value": "1"
								},
								{
									"begin": 1265,
									"end": 13048,
									"name": "JUMPDEST",
									"source": 5
								},
								{
									"begin": 1265,
									"end": 13048,
									"name": "ADDRESS",
									"source": 5
								},
								{
									"begin": 1265,
									"end": 13048,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 1265,
									"end": 13048,
									"name": "MSTORE",
									"source": 5
								},
								{
									"begin": 1265,
									"end": 13048,
									"name": "PUSH",
									"source": 5,
									"value": "73"
								},
								{
									"begin": 1265,
									"end": 13048,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 1265,
									"end": 13048,
									"name": "MSTORE8",
									"source": 5
								},
								{
									"begin": 1265,
									"end": 13048,
									"name": "DUP3",
									"source": 5
								},
								{
									"begin": 1265,
									"end": 13048,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 1265,
									"end": 13048,
									"name": "RETURN",
									"source": 5
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220e53c495bbcb95b26375932641aebc5c4c0c184b4691d7201b38f69c15214bdc164736f6c63430008040033",
									".code": [
										{
											"begin": 1265,
											"end": 13048,
											"name": "PUSHDEPLOYADDRESS",
											"source": 5
										},
										{
											"begin": 1265,
											"end": 13048,
											"name": "ADDRESS",
											"source": 5
										},
										{
											"begin": 1265,
											"end": 13048,
											"name": "EQ",
											"source": 5
										},
										{
											"begin": 1265,
											"end": 13048,
											"name": "PUSH",
											"source": 5,
											"value": "80"
										},
										{
											"begin": 1265,
											"end": 13048,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 1265,
											"end": 13048,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 1265,
											"end": 13048,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 1265,
											"end": 13048,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 1265,
											"end": 13048,
											"name": "REVERT",
											"source": 5
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Library for managing https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive types. Sets have the following properties: - Elements are added, removed, and checked for existence in constant time (O(1)). - Elements are enumerated in O(n). No guarantees are made on the ordering. ``` contract Example {     // Add the library methods     using EnumerableSet for EnumerableSet.AddressSet;     // Declare a set state variable     EnumerableSet.AddressSet private mySet; } ``` As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`) and `uint256` (`UintSet`) are supported. [WARNING] ====  Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable.  See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.  In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet. ====\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"Utils/EnumerableSet.sol\":\"EnumerableSet\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"Utils/EnumerableSet.sol\":{\"keccak256\":\"0x8adfeb5c886c6a727bdeac6db8e78f418e09f16f7c941c7111125b59ec2fd838\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://632e2346228015ce98183a0f0658057a9f2ae8b8d25b639eb9303e8e0ea34957\",\"dweb:/ipfs/QmPY3nbe3JhMsgyHJTtXRkLTioW997Bvizt23mPNKKGSgu\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"Utils/Ownable.sol": {
				"Ownable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.",
						"kind": "dev",
						"methods": {
							"constructor": {
								"details": "Initializes the contract setting the deployer as the initial owner."
							},
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"owner()": "8da5cb5b",
							"renounceOwnership()": "715018a6",
							"transferOwnership(address)": "f2fde38b"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the contract setting the deployer as the initial owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"Utils/Ownable.sol\":\"Ownable\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"Utils/Context.sol\":{\"keccak256\":\"0x81d5fc973a522c8909d60be6a201869d46aa47b030b8813f60616404628c2b94\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9755b505799e622d964a843a8ed1fd60fedffca230178e5cb95ae9280df4dcd2\",\"dweb:/ipfs/QmRkhUYUUgRZ2QYJjmtQct2ubyYwS3bdUMhbuFYM12VfYn\"]},\"Utils/Ownable.sol\":{\"keccak256\":\"0x5eeb86897007c578f301464fceac720c7330486c54ae85c0c09068b46197cfb9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://edefd9ff4f087a3016763a687eaae449c0e8f6dcda9d86032a49de900f129050\",\"dweb:/ipfs/Qmc4adiPdGKgEJLxqgd8JuKkwrNBNtB78kkGinnnuUnyJN\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 1899,
								"contract": "Utils/Ownable.sol:Ownable",
								"label": "_owner",
								"offset": 0,
								"slot": "0",
								"type": "t_address"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"Utils/ReentrancyGuard.sol": {
				"ReentrancyGuard": {
					"abi": [],
					"devdoc": {
						"details": "Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"Utils/ReentrancyGuard.sol\":\"ReentrancyGuard\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"Utils/ReentrancyGuard.sol\":{\"keccak256\":\"0x5531a4a8604939470e38d88dbb16a35c38cf17a3d66393fe9c73b5da561615df\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d0fd4ce017408e0e7cda8bb02298443533e2fbb261878df176374bee5c3e4adf\",\"dweb:/ipfs/QmPhT3sFavHxyWopC7f1Ukzw1TDmmkzr5te24Btuvunpz1\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 2007,
								"contract": "Utils/ReentrancyGuard.sol:ReentrancyGuard",
								"label": "_status",
								"offset": 0,
								"slot": "0",
								"type": "t_uint256"
							}
						],
						"types": {
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"Utils/SafeMath.sol": {
				"SafeMath": {
					"abi": [],
					"devdoc": {
						"details": "Wrappers over Solidity's arithmetic operations. NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler now has built in overflow checking.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"Utils/SafeMath.sol\":497:7008  library SafeMath {\r... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"Utils/SafeMath.sol\":497:7008  library SafeMath {\r... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220a0b337010d3b45e2490a749575289c7fd3966b6186b0a19be6d68cb1c67b6dd064736f6c63430008040033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220a0b337010d3b45e2490a749575289c7fd3966b6186b0a19be6d68cb1c67b6dd064736f6c63430008040033",
							"opcodes": "PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 LOG0 0xB3 CALLDATACOPY ADD 0xD EXTCODESIZE GASLIMIT 0xE2 0x49 EXP PUSH21 0x9575289C7FD3966B6186B0A19BE6D68CB1C67B6DD0 PUSH5 0x736F6C6343 STOP ADDMOD DIV STOP CALLER ",
							"sourceMap": "497:6511:8:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;497:6511:8;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220a0b337010d3b45e2490a749575289c7fd3966b6186b0a19be6d68cb1c67b6dd064736f6c63430008040033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 LOG0 0xB3 CALLDATACOPY ADD 0xD EXTCODESIZE GASLIMIT 0xE2 0x49 EXP PUSH21 0x9575289C7FD3966B6186B0A19BE6D68CB1C67B6DD0 PUSH5 0x736F6C6343 STOP ADDMOD DIV STOP CALLER ",
							"sourceMap": "497:6511:8:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "103",
								"totalCost": "17303"
							},
							"internal": {
								"add(uint256,uint256)": "infinite",
								"div(uint256,uint256)": "infinite",
								"div(uint256,uint256,string memory)": "infinite",
								"mod(uint256,uint256)": "infinite",
								"mod(uint256,uint256,string memory)": "infinite",
								"mul(uint256,uint256)": "infinite",
								"sub(uint256,uint256)": "infinite",
								"sub(uint256,uint256,string memory)": "infinite",
								"tryAdd(uint256,uint256)": "infinite",
								"tryDiv(uint256,uint256)": "infinite",
								"tryMod(uint256,uint256)": "infinite",
								"tryMul(uint256,uint256)": "infinite",
								"trySub(uint256,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 497,
									"end": 7008,
									"name": "PUSH #[$]",
									"source": 8,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 497,
									"end": 7008,
									"name": "PUSH [$]",
									"source": 8,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 497,
									"end": 7008,
									"name": "PUSH",
									"source": 8,
									"value": "B"
								},
								{
									"begin": 497,
									"end": 7008,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 497,
									"end": 7008,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 497,
									"end": 7008,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 497,
									"end": 7008,
									"name": "CODECOPY",
									"source": 8
								},
								{
									"begin": 497,
									"end": 7008,
									"name": "DUP1",
									"source": 8
								},
								{
									"begin": 497,
									"end": 7008,
									"name": "MLOAD",
									"source": 8
								},
								{
									"begin": 497,
									"end": 7008,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 497,
									"end": 7008,
									"name": "BYTE",
									"source": 8
								},
								{
									"begin": 497,
									"end": 7008,
									"name": "PUSH",
									"source": 8,
									"value": "73"
								},
								{
									"begin": 497,
									"end": 7008,
									"name": "EQ",
									"source": 8
								},
								{
									"begin": 497,
									"end": 7008,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "1"
								},
								{
									"begin": 497,
									"end": 7008,
									"name": "JUMPI",
									"source": 8
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 497,
									"end": 7008,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 497,
									"end": 7008,
									"name": "MSTORE",
									"source": 8
								},
								{
									"begin": 497,
									"end": 7008,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 497,
									"end": 7008,
									"name": "PUSH",
									"source": 8,
									"value": "4"
								},
								{
									"begin": 497,
									"end": 7008,
									"name": "MSTORE",
									"source": 8
								},
								{
									"begin": 497,
									"end": 7008,
									"name": "PUSH",
									"source": 8,
									"value": "24"
								},
								{
									"begin": 497,
									"end": 7008,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 497,
									"end": 7008,
									"name": "REVERT",
									"source": 8
								},
								{
									"begin": 497,
									"end": 7008,
									"name": "tag",
									"source": 8,
									"value": "1"
								},
								{
									"begin": 497,
									"end": 7008,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 497,
									"end": 7008,
									"name": "ADDRESS",
									"source": 8
								},
								{
									"begin": 497,
									"end": 7008,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 497,
									"end": 7008,
									"name": "MSTORE",
									"source": 8
								},
								{
									"begin": 497,
									"end": 7008,
									"name": "PUSH",
									"source": 8,
									"value": "73"
								},
								{
									"begin": 497,
									"end": 7008,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 497,
									"end": 7008,
									"name": "MSTORE8",
									"source": 8
								},
								{
									"begin": 497,
									"end": 7008,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 497,
									"end": 7008,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 497,
									"end": 7008,
									"name": "RETURN",
									"source": 8
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220a0b337010d3b45e2490a749575289c7fd3966b6186b0a19be6d68cb1c67b6dd064736f6c63430008040033",
									".code": [
										{
											"begin": 497,
											"end": 7008,
											"name": "PUSHDEPLOYADDRESS",
											"source": 8
										},
										{
											"begin": 497,
											"end": 7008,
											"name": "ADDRESS",
											"source": 8
										},
										{
											"begin": 497,
											"end": 7008,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 497,
											"end": 7008,
											"name": "PUSH",
											"source": 8,
											"value": "80"
										},
										{
											"begin": 497,
											"end": 7008,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 497,
											"end": 7008,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 497,
											"end": 7008,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 497,
											"end": 7008,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 497,
											"end": 7008,
											"name": "REVERT",
											"source": 8
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Wrappers over Solidity's arithmetic operations. NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler now has built in overflow checking.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"Utils/SafeMath.sol\":\"SafeMath\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"Utils/SafeMath.sol\":{\"keccak256\":\"0xdc9b51d94a1db880c1f2e722af561c28c41100eea201b1ae5e77eb7c4250e389\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0b69f7fb378dcfd4aff8ba0547a575485d2d4bb567381e3bf8c593b63272ffc0\",\"dweb:/ipfs/QmaEo28ZDAnpDvpQRRt7Qc8bF5QgJAnTEE4TxYnJS8YmnN\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"Utils/TransferHelper.sol": {
				"TransferHelper": {
					"abi": [],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"Utils/TransferHelper.sol\":244:2136  library TransferHelper {\r... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"Utils/TransferHelper.sol\":244:2136  library TransferHelper {\r... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220fc2dcae6a05713213a1bab948a2cccec934b4b9050961801211140207d87ec0264736f6c63430008040033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220fc2dcae6a05713213a1bab948a2cccec934b4b9050961801211140207d87ec0264736f6c63430008040033",
							"opcodes": "PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xFC 0x2D 0xCA 0xE6 LOG0 JUMPI SGT 0x21 GASPRICE SHL 0xAB SWAP5 DUP11 0x2C 0xCC 0xEC SWAP4 0x4B 0x4B SWAP1 POP SWAP7 XOR ADD 0x21 GT BLOCKHASH KECCAK256 PUSH30 0x87EC0264736F6C6343000804003300000000000000000000000000000000 ",
							"sourceMap": "244:1892:9:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;244:1892:9;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220fc2dcae6a05713213a1bab948a2cccec934b4b9050961801211140207d87ec0264736f6c63430008040033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xFC 0x2D 0xCA 0xE6 LOG0 JUMPI SGT 0x21 GASPRICE SHL 0xAB SWAP5 DUP11 0x2C 0xCC 0xEC SWAP4 0x4B 0x4B SWAP1 POP SWAP7 XOR ADD 0x21 GT BLOCKHASH KECCAK256 PUSH30 0x87EC0264736F6C6343000804003300000000000000000000000000000000 ",
							"sourceMap": "244:1892:9:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "103",
								"totalCost": "17303"
							},
							"internal": {
								"safeApprove(address,address,uint256)": "infinite",
								"safeTransferBaseToken(address,address payable,uint256,bool)": "infinite",
								"safeTransferFrom(address,address,address,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 244,
									"end": 2136,
									"name": "PUSH #[$]",
									"source": 9,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 244,
									"end": 2136,
									"name": "PUSH [$]",
									"source": 9,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 244,
									"end": 2136,
									"name": "PUSH",
									"source": 9,
									"value": "B"
								},
								{
									"begin": 244,
									"end": 2136,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 244,
									"end": 2136,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 244,
									"end": 2136,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 244,
									"end": 2136,
									"name": "CODECOPY",
									"source": 9
								},
								{
									"begin": 244,
									"end": 2136,
									"name": "DUP1",
									"source": 9
								},
								{
									"begin": 244,
									"end": 2136,
									"name": "MLOAD",
									"source": 9
								},
								{
									"begin": 244,
									"end": 2136,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 244,
									"end": 2136,
									"name": "BYTE",
									"source": 9
								},
								{
									"begin": 244,
									"end": 2136,
									"name": "PUSH",
									"source": 9,
									"value": "73"
								},
								{
									"begin": 244,
									"end": 2136,
									"name": "EQ",
									"source": 9
								},
								{
									"begin": 244,
									"end": 2136,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "1"
								},
								{
									"begin": 244,
									"end": 2136,
									"name": "JUMPI",
									"source": 9
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 244,
									"end": 2136,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 244,
									"end": 2136,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 244,
									"end": 2136,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 244,
									"end": 2136,
									"name": "PUSH",
									"source": 9,
									"value": "4"
								},
								{
									"begin": 244,
									"end": 2136,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 244,
									"end": 2136,
									"name": "PUSH",
									"source": 9,
									"value": "24"
								},
								{
									"begin": 244,
									"end": 2136,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 244,
									"end": 2136,
									"name": "REVERT",
									"source": 9
								},
								{
									"begin": 244,
									"end": 2136,
									"name": "tag",
									"source": 9,
									"value": "1"
								},
								{
									"begin": 244,
									"end": 2136,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 244,
									"end": 2136,
									"name": "ADDRESS",
									"source": 9
								},
								{
									"begin": 244,
									"end": 2136,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 244,
									"end": 2136,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 244,
									"end": 2136,
									"name": "PUSH",
									"source": 9,
									"value": "73"
								},
								{
									"begin": 244,
									"end": 2136,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 244,
									"end": 2136,
									"name": "MSTORE8",
									"source": 9
								},
								{
									"begin": 244,
									"end": 2136,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 244,
									"end": 2136,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 244,
									"end": 2136,
									"name": "RETURN",
									"source": 9
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220fc2dcae6a05713213a1bab948a2cccec934b4b9050961801211140207d87ec0264736f6c63430008040033",
									".code": [
										{
											"begin": 244,
											"end": 2136,
											"name": "PUSHDEPLOYADDRESS",
											"source": 9
										},
										{
											"begin": 244,
											"end": 2136,
											"name": "ADDRESS",
											"source": 9
										},
										{
											"begin": 244,
											"end": 2136,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 244,
											"end": 2136,
											"name": "PUSH",
											"source": 9,
											"value": "80"
										},
										{
											"begin": 244,
											"end": 2136,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 244,
											"end": 2136,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 244,
											"end": 2136,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 244,
											"end": 2136,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 244,
											"end": 2136,
											"name": "REVERT",
											"source": 9
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"helper methods for interacting with ERC20 tokens that do not consistently return true/false with the addition of a transfer function to send eth or an erc20 token\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"Utils/TransferHelper.sol\":\"TransferHelper\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"Utils/TransferHelper.sol\":{\"keccak256\":\"0x7ab3ec832cb3fa01c85928f2aa6535f00adda76d891cb087e75ba493b6027d7f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ffc0f1cefbdb42cb111d8e76e27e788cd2ed8b846d3b8f19d0935beedffca891\",\"dweb:/ipfs/QmbRJm5q9Xqv9Py9aqkGqiKMfkHzdXvnidCLFH66oXY3Zk\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"notice": "helper methods for interacting with ERC20 tokens that do not consistently return true/false with the addition of a transfer function to send eth or an erc20 token",
						"version": 1
					}
				}
			}
		},
		"sources": {
			"ERC20/ERC20.sol": {
				"ast": {
					"absolutePath": "ERC20/ERC20.sol",
					"exportedSymbols": {
						"Context": [
							1292
						],
						"ERC20": [
							585
						],
						"IERC20": [
							663
						],
						"IERC20Metadata": [
							688
						]
					},
					"id": 586,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "108:23:0"
						},
						{
							"absolutePath": "ERC20/IERC20.sol",
							"file": "./IERC20.sol",
							"id": 2,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 586,
							"sourceUnit": 664,
							"src": "135:22:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "ERC20/IERC20Metadata.sol",
							"file": "./IERC20Metadata.sol",
							"id": 3,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 586,
							"sourceUnit": 689,
							"src": "159:30:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "Utils/Context.sol",
							"file": "../Utils/Context.sol",
							"id": 4,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 586,
							"sourceUnit": 1293,
							"src": "191:30:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 6,
										"name": "Context",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1292,
										"src": "1442:7:0"
									},
									"id": 7,
									"nodeType": "InheritanceSpecifier",
									"src": "1442:7:0"
								},
								{
									"baseName": {
										"id": 8,
										"name": "IERC20",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 663,
										"src": "1451:6:0"
									},
									"id": 9,
									"nodeType": "InheritanceSpecifier",
									"src": "1451:6:0"
								},
								{
									"baseName": {
										"id": 10,
										"name": "IERC20Metadata",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 688,
										"src": "1459:14:0"
									},
									"id": 11,
									"nodeType": "InheritanceSpecifier",
									"src": "1459:14:0"
								}
							],
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 5,
								"nodeType": "StructuredDocumentation",
								"src": "225:1197:0",
								"text": " @dev Implementation of the {IERC20} interface.\nz\n This implementation is agnostic to the way tokens are created. This means\n that a supply mechanism has to be added in a derived contract using {_mint}.\n For a generic mechanism see {ERC20PresetMinterPauser}.\n TIP: For a detailed writeup see our guide\n https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n to implement supply mechanisms].\n We have followed general OpenZeppelin Contracts guidelines: functions revert\n instead returning `false` on failure. This behavior is nonetheless\n conventional and does not conflict with the expectations of ERC20\n applications.\n Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n This allows applications to reconstruct the allowance for all accounts just\n by listening to said events. Other implementations of the EIP may not emit\n these events, as it isn't required by the specification.\n Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n functions have been added to mitigate the well-known issues around setting\n allowances. See {IERC20-approve}."
							},
							"fullyImplemented": true,
							"id": 585,
							"linearizedBaseContracts": [
								585,
								688,
								663,
								1292
							],
							"name": "ERC20",
							"nameLocation": "1433:5:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 15,
									"mutability": "mutable",
									"name": "_balances",
									"nameLocation": "1517:9:0",
									"nodeType": "VariableDeclaration",
									"scope": 585,
									"src": "1481:45:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
										"typeString": "mapping(address => uint256)"
									},
									"typeName": {
										"id": 14,
										"keyType": {
											"id": 12,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1489:7:0",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "1481:27:0",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
											"typeString": "mapping(address => uint256)"
										},
										"valueType": {
											"id": 13,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "1500:7:0",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 21,
									"mutability": "mutable",
									"name": "_allowances",
									"nameLocation": "1591:11:0",
									"nodeType": "VariableDeclaration",
									"scope": 585,
									"src": "1535:67:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
										"typeString": "mapping(address => mapping(address => uint256))"
									},
									"typeName": {
										"id": 20,
										"keyType": {
											"id": 16,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1543:7:0",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "1535:47:0",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
											"typeString": "mapping(address => mapping(address => uint256))"
										},
										"valueType": {
											"id": 19,
											"keyType": {
												"id": 17,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "1562:7:0",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"nodeType": "Mapping",
											"src": "1554:27:0",
											"typeDescriptions": {
												"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
												"typeString": "mapping(address => uint256)"
											},
											"valueType": {
												"id": 18,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1573:7:0",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											}
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 23,
									"mutability": "mutable",
									"name": "_totalSupply",
									"nameLocation": "1627:12:0",
									"nodeType": "VariableDeclaration",
									"scope": 585,
									"src": "1611:28:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 22,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1611:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 25,
									"mutability": "mutable",
									"name": "_name",
									"nameLocation": "1663:5:0",
									"nodeType": "VariableDeclaration",
									"scope": 585,
									"src": "1648:20:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_string_storage",
										"typeString": "string"
									},
									"typeName": {
										"id": 24,
										"name": "string",
										"nodeType": "ElementaryTypeName",
										"src": "1648:6:0",
										"typeDescriptions": {
											"typeIdentifier": "t_string_storage_ptr",
											"typeString": "string"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 27,
									"mutability": "mutable",
									"name": "_symbol",
									"nameLocation": "1690:7:0",
									"nodeType": "VariableDeclaration",
									"scope": 585,
									"src": "1675:22:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_string_storage",
										"typeString": "string"
									},
									"typeName": {
										"id": 26,
										"name": "string",
										"nodeType": "ElementaryTypeName",
										"src": "1675:6:0",
										"typeDescriptions": {
											"typeIdentifier": "t_string_storage_ptr",
											"typeString": "string"
										}
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 43,
										"nodeType": "Block",
										"src": "2074:60:0",
										"statements": [
											{
												"expression": {
													"id": 37,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 35,
														"name": "_name",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 25,
														"src": "2085:5:0",
														"typeDescriptions": {
															"typeIdentifier": "t_string_storage",
															"typeString": "string storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 36,
														"name": "name_",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 30,
														"src": "2093:5:0",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string memory"
														}
													},
													"src": "2085:13:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"id": 38,
												"nodeType": "ExpressionStatement",
												"src": "2085:13:0"
											},
											{
												"expression": {
													"id": 41,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 39,
														"name": "_symbol",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 27,
														"src": "2109:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_string_storage",
															"typeString": "string storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 40,
														"name": "symbol_",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 32,
														"src": "2119:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string memory"
														}
													},
													"src": "2109:17:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"id": 42,
												"nodeType": "ExpressionStatement",
												"src": "2109:17:0"
											}
										]
									},
									"documentation": {
										"id": 28,
										"nodeType": "StructuredDocumentation",
										"src": "1706:306:0",
										"text": " @dev Sets the values for {name} and {symbol}.\n The default value of {decimals} is 18. To select a different value for\n {decimals} you should overload it.\n All two of these values are immutable: they can only be set once during\n construction."
									},
									"id": 44,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 33,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 30,
												"mutability": "mutable",
												"name": "name_",
												"nameLocation": "2044:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 44,
												"src": "2030:19:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 29,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2030:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 32,
												"mutability": "mutable",
												"name": "symbol_",
												"nameLocation": "2065:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 44,
												"src": "2051:21:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 31,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2051:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2029:44:0"
									},
									"returnParameters": {
										"id": 34,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2074:0:0"
									},
									"scope": 585,
									"src": "2018:116:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										675
									],
									"body": {
										"id": 53,
										"nodeType": "Block",
										"src": "2273:31:0",
										"statements": [
											{
												"expression": {
													"id": 51,
													"name": "_name",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 25,
													"src": "2291:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"functionReturnParameters": 50,
												"id": 52,
												"nodeType": "Return",
												"src": "2284:12:0"
											}
										]
									},
									"documentation": {
										"id": 45,
										"nodeType": "StructuredDocumentation",
										"src": "2142:56:0",
										"text": " @dev Returns the name of the token."
									},
									"functionSelector": "06fdde03",
									"id": 54,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "name",
									"nameLocation": "2213:4:0",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 47,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "2240:8:0"
									},
									"parameters": {
										"id": 46,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2217:2:0"
									},
									"returnParameters": {
										"id": 50,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 49,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 54,
												"src": "2258:13:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 48,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2258:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2257:15:0"
									},
									"scope": 585,
									"src": "2204:100:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										681
									],
									"body": {
										"id": 63,
										"nodeType": "Block",
										"src": "2494:33:0",
										"statements": [
											{
												"expression": {
													"id": 61,
													"name": "_symbol",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 27,
													"src": "2512:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"functionReturnParameters": 60,
												"id": 62,
												"nodeType": "Return",
												"src": "2505:14:0"
											}
										]
									},
									"documentation": {
										"id": 55,
										"nodeType": "StructuredDocumentation",
										"src": "2312:105:0",
										"text": " @dev Returns the symbol of the token, usually a shorter version of the\n name."
									},
									"functionSelector": "95d89b41",
									"id": 64,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "symbol",
									"nameLocation": "2432:6:0",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 57,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "2461:8:0"
									},
									"parameters": {
										"id": 56,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2438:2:0"
									},
									"returnParameters": {
										"id": 60,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 59,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 64,
												"src": "2479:13:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 58,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2479:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2478:15:0"
									},
									"scope": 585,
									"src": "2423:104:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										687
									],
									"body": {
										"id": 73,
										"nodeType": "Block",
										"src": "3233:28:0",
										"statements": [
											{
												"expression": {
													"hexValue": "3138",
													"id": 71,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "3251:2:0",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_18_by_1",
														"typeString": "int_const 18"
													},
													"value": "18"
												},
												"functionReturnParameters": 70,
												"id": 72,
												"nodeType": "Return",
												"src": "3244:9:0"
											}
										]
									},
									"documentation": {
										"id": 65,
										"nodeType": "StructuredDocumentation",
										"src": "2535:625:0",
										"text": " @dev Returns the number of decimals used to get its user representation.\n For example, if `decimals` equals `2`, a balance of `505` tokens should\n be displayed to a user as `5.05` (`505 / 10 ** 2`).\n Tokens usually opt for a value of 18, imitating the relationship between\n Ether and Wei. This is the value {ERC20} uses, unless this function is\n overridden;\n NOTE: This information is only used for _display_ purposes: it in\n no way affects any of the arithmetic of the contract, including\n {IERC20-balanceOf} and {IERC20-transfer}."
									},
									"functionSelector": "313ce567",
									"id": 74,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "decimals",
									"nameLocation": "3175:8:0",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 67,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "3206:8:0"
									},
									"parameters": {
										"id": 66,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3183:2:0"
									},
									"returnParameters": {
										"id": 70,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 69,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 74,
												"src": "3224:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 68,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3224:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3223:9:0"
									},
									"scope": 585,
									"src": "3166:95:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										612
									],
									"body": {
										"id": 83,
										"nodeType": "Block",
										"src": "3396:38:0",
										"statements": [
											{
												"expression": {
													"id": 81,
													"name": "_totalSupply",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 23,
													"src": "3414:12:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 80,
												"id": 82,
												"nodeType": "Return",
												"src": "3407:19:0"
											}
										]
									},
									"documentation": {
										"id": 75,
										"nodeType": "StructuredDocumentation",
										"src": "3269:51:0",
										"text": " @dev See {IERC20-totalSupply}."
									},
									"functionSelector": "18160ddd",
									"id": 84,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "3335:11:0",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 77,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "3369:8:0"
									},
									"parameters": {
										"id": 76,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3346:2:0"
									},
									"returnParameters": {
										"id": 80,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 79,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 84,
												"src": "3387:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 78,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3387:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3386:9:0"
									},
									"scope": 585,
									"src": "3326:108:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										620
									],
									"body": {
										"id": 97,
										"nodeType": "Block",
										"src": "3580:44:0",
										"statements": [
											{
												"expression": {
													"baseExpression": {
														"id": 93,
														"name": "_balances",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 15,
														"src": "3598:9:0",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 95,
													"indexExpression": {
														"id": 94,
														"name": "account",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 87,
														"src": "3608:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "3598:18:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 92,
												"id": 96,
												"nodeType": "Return",
												"src": "3591:25:0"
											}
										]
									},
									"documentation": {
										"id": 85,
										"nodeType": "StructuredDocumentation",
										"src": "3442:49:0",
										"text": " @dev See {IERC20-balanceOf}."
									},
									"functionSelector": "70a08231",
									"id": 98,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "3506:9:0",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 89,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "3553:8:0"
									},
									"parameters": {
										"id": 88,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 87,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "3524:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 98,
												"src": "3516:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 86,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3516:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3515:17:0"
									},
									"returnParameters": {
										"id": 92,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 91,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 98,
												"src": "3571:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 90,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3571:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3570:9:0"
									},
									"scope": 585,
									"src": "3497:127:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										630
									],
									"body": {
										"id": 122,
										"nodeType": "Block",
										"src": "3915:108:0",
										"statements": [
											{
												"assignments": [
													110
												],
												"declarations": [
													{
														"constant": false,
														"id": 110,
														"mutability": "mutable",
														"name": "owner",
														"nameLocation": "3934:5:0",
														"nodeType": "VariableDeclaration",
														"scope": 122,
														"src": "3926:13:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 109,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "3926:7:0",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 113,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 111,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1282,
														"src": "3942:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 112,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3942:12:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3926:28:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 115,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 110,
															"src": "3975:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 116,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 101,
															"src": "3982:2:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 117,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 103,
															"src": "3986:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 114,
														"name": "_transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 346,
														"src": "3965:9:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 118,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3965:28:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 119,
												"nodeType": "ExpressionStatement",
												"src": "3965:28:0"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 120,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "4011:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 108,
												"id": 121,
												"nodeType": "Return",
												"src": "4004:11:0"
											}
										]
									},
									"documentation": {
										"id": 99,
										"nodeType": "StructuredDocumentation",
										"src": "3632:192:0",
										"text": " @dev See {IERC20-transfer}.\n Requirements:\n - `to` cannot be the zero address.\n - the caller must have a balance of at least `amount`."
									},
									"functionSelector": "a9059cbb",
									"id": 123,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nameLocation": "3839:8:0",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 105,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "3891:8:0"
									},
									"parameters": {
										"id": 104,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 101,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "3856:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 123,
												"src": "3848:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 100,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3848:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 103,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "3868:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 123,
												"src": "3860:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 102,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3860:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3847:28:0"
									},
									"returnParameters": {
										"id": 108,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 107,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 123,
												"src": "3909:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 106,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "3909:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3908:6:0"
									},
									"scope": 585,
									"src": "3830:193:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										640
									],
									"body": {
										"id": 140,
										"nodeType": "Block",
										"src": "4184:53:0",
										"statements": [
											{
												"expression": {
													"baseExpression": {
														"baseExpression": {
															"id": 134,
															"name": "_allowances",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 21,
															"src": "4202:11:0",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
																"typeString": "mapping(address => mapping(address => uint256))"
															}
														},
														"id": 136,
														"indexExpression": {
															"id": 135,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 126,
															"src": "4214:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "4202:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 138,
													"indexExpression": {
														"id": 137,
														"name": "spender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 128,
														"src": "4221:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "4202:27:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 133,
												"id": 139,
												"nodeType": "Return",
												"src": "4195:34:0"
											}
										]
									},
									"documentation": {
										"id": 124,
										"nodeType": "StructuredDocumentation",
										"src": "4031:49:0",
										"text": " @dev See {IERC20-allowance}."
									},
									"functionSelector": "dd62ed3e",
									"id": 141,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nameLocation": "4095:9:0",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 130,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "4157:8:0"
									},
									"parameters": {
										"id": 129,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 126,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "4113:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 141,
												"src": "4105:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 125,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4105:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 128,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "4128:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 141,
												"src": "4120:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 127,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4120:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4104:32:0"
									},
									"returnParameters": {
										"id": 133,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 132,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 141,
												"src": "4175:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 131,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4175:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4174:9:0"
									},
									"scope": 585,
									"src": "4086:151:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										650
									],
									"body": {
										"id": 165,
										"nodeType": "Block",
										"src": "4646:112:0",
										"statements": [
											{
												"assignments": [
													153
												],
												"declarations": [
													{
														"constant": false,
														"id": 153,
														"mutability": "mutable",
														"name": "owner",
														"nameLocation": "4665:5:0",
														"nodeType": "VariableDeclaration",
														"scope": 165,
														"src": "4657:13:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 152,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "4657:7:0",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 156,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 154,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1282,
														"src": "4673:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 155,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4673:12:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4657:28:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 158,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 153,
															"src": "4705:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 159,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 144,
															"src": "4712:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 160,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 146,
															"src": "4721:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 157,
														"name": "_approve",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 519,
														"src": "4696:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 161,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4696:32:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 162,
												"nodeType": "ExpressionStatement",
												"src": "4696:32:0"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 163,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "4746:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 151,
												"id": 164,
												"nodeType": "Return",
												"src": "4739:11:0"
											}
										]
									},
									"documentation": {
										"id": 142,
										"nodeType": "StructuredDocumentation",
										"src": "4245:306:0",
										"text": " @dev See {IERC20-approve}.\n NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n `transferFrom`. This is semantically equivalent to an infinite approval.\n Requirements:\n - `spender` cannot be the zero address."
									},
									"functionSelector": "095ea7b3",
									"id": 166,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "4566:7:0",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 148,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "4622:8:0"
									},
									"parameters": {
										"id": 147,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 144,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "4582:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 166,
												"src": "4574:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 143,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4574:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 146,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "4599:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 166,
												"src": "4591:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 145,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4591:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4573:33:0"
									},
									"returnParameters": {
										"id": 151,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 150,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 166,
												"src": "4640:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 149,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4640:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4639:6:0"
									},
									"scope": 585,
									"src": "4557:201:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										662
									],
									"body": {
										"id": 198,
										"nodeType": "Block",
										"src": "5475:158:0",
										"statements": [
											{
												"assignments": [
													180
												],
												"declarations": [
													{
														"constant": false,
														"id": 180,
														"mutability": "mutable",
														"name": "spender",
														"nameLocation": "5494:7:0",
														"nodeType": "VariableDeclaration",
														"scope": 198,
														"src": "5486:15:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 179,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "5486:7:0",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 183,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 181,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1282,
														"src": "5504:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 182,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5504:12:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5486:30:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 185,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 169,
															"src": "5543:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 186,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 180,
															"src": "5549:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 187,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 173,
															"src": "5558:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 184,
														"name": "_spendAllowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 562,
														"src": "5527:15:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 188,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5527:38:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 189,
												"nodeType": "ExpressionStatement",
												"src": "5527:38:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 191,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 169,
															"src": "5586:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 192,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 171,
															"src": "5592:2:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 193,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 173,
															"src": "5596:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 190,
														"name": "_transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 346,
														"src": "5576:9:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 194,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5576:27:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 195,
												"nodeType": "ExpressionStatement",
												"src": "5576:27:0"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 196,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "5621:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 178,
												"id": 197,
												"nodeType": "Return",
												"src": "5614:11:0"
											}
										]
									},
									"documentation": {
										"id": 167,
										"nodeType": "StructuredDocumentation",
										"src": "4766:566:0",
										"text": " @dev See {IERC20-transferFrom}.\n Emits an {Approval} event indicating the updated allowance. This is not\n required by the EIP. See the note at the beginning of {ERC20}.\n NOTE: Does not update the allowance if the current allowance\n is the maximum `uint256`.\n Requirements:\n - `from` and `to` cannot be the zero address.\n - `from` must have a balance of at least `amount`.\n - the caller must have allowance for ``from``'s tokens of at least\n `amount`."
									},
									"functionSelector": "23b872dd",
									"id": 199,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "5347:12:0",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 175,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "5451:8:0"
									},
									"parameters": {
										"id": 174,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 169,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "5378:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 199,
												"src": "5370:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 168,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5370:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 171,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "5401:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 199,
												"src": "5393:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 170,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5393:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 173,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "5422:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 199,
												"src": "5414:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 172,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5414:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5359:76:0"
									},
									"returnParameters": {
										"id": 178,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 177,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 199,
												"src": "5469:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 176,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "5469:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5468:6:0"
									},
									"scope": 585,
									"src": "5338:295:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 227,
										"nodeType": "Block",
										"src": "6136:144:0",
										"statements": [
											{
												"assignments": [
													210
												],
												"declarations": [
													{
														"constant": false,
														"id": 210,
														"mutability": "mutable",
														"name": "owner",
														"nameLocation": "6155:5:0",
														"nodeType": "VariableDeclaration",
														"scope": 227,
														"src": "6147:13:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 209,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "6147:7:0",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 213,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 211,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1282,
														"src": "6163:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 212,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6163:12:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6147:28:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 215,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 210,
															"src": "6195:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 216,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 202,
															"src": "6202:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 222,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [
																	{
																		"id": 218,
																		"name": "owner",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 210,
																		"src": "6221:5:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 219,
																		"name": "spender",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 202,
																		"src": "6228:7:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 217,
																	"name": "allowance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 141,
																	"src": "6211:9:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$returns$_t_uint256_$",
																		"typeString": "function (address,address) view returns (uint256)"
																	}
																},
																"id": 220,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "6211:25:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"id": 221,
																"name": "addedValue",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 204,
																"src": "6239:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "6211:38:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 214,
														"name": "_approve",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 519,
														"src": "6186:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 223,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6186:64:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 224,
												"nodeType": "ExpressionStatement",
												"src": "6186:64:0"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 225,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "6268:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 208,
												"id": 226,
												"nodeType": "Return",
												"src": "6261:11:0"
											}
										]
									},
									"documentation": {
										"id": 200,
										"nodeType": "StructuredDocumentation",
										"src": "5641:395:0",
										"text": " @dev Atomically increases the allowance granted to `spender` by the caller.\n This is an alternative to {approve} that can be used as a mitigation for\n problems described in {IERC20-approve}.\n Emits an {Approval} event indicating the updated allowance.\n Requirements:\n - `spender` cannot be the zero address."
									},
									"functionSelector": "39509351",
									"id": 228,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "increaseAllowance",
									"nameLocation": "6051:17:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 205,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 202,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "6077:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 228,
												"src": "6069:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 201,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6069:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 204,
												"mutability": "mutable",
												"name": "addedValue",
												"nameLocation": "6094:10:0",
												"nodeType": "VariableDeclaration",
												"scope": 228,
												"src": "6086:18:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 203,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6086:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6068:37:0"
									},
									"returnParameters": {
										"id": 208,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 207,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 228,
												"src": "6130:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 206,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "6130:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6129:6:0"
									},
									"scope": 585,
									"src": "6042:238:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 268,
										"nodeType": "Block",
										"src": "6882:337:0",
										"statements": [
											{
												"assignments": [
													239
												],
												"declarations": [
													{
														"constant": false,
														"id": 239,
														"mutability": "mutable",
														"name": "owner",
														"nameLocation": "6901:5:0",
														"nodeType": "VariableDeclaration",
														"scope": 268,
														"src": "6893:13:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 238,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "6893:7:0",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 242,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 240,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1282,
														"src": "6909:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 241,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6909:12:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6893:28:0"
											},
											{
												"assignments": [
													244
												],
												"declarations": [
													{
														"constant": false,
														"id": 244,
														"mutability": "mutable",
														"name": "currentAllowance",
														"nameLocation": "6940:16:0",
														"nodeType": "VariableDeclaration",
														"scope": 268,
														"src": "6932:24:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 243,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "6932:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 249,
												"initialValue": {
													"arguments": [
														{
															"id": 246,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 239,
															"src": "6969:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 247,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 231,
															"src": "6976:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 245,
														"name": "allowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 141,
														"src": "6959:9:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address,address) view returns (uint256)"
														}
													},
													"id": 248,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6959:25:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6932:52:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 253,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 251,
																"name": "currentAllowance",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 244,
																"src": "7003:16:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 252,
																"name": "subtractedValue",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 233,
																"src": "7023:15:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7003:35:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f",
															"id": 254,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "7040:39:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8",
																"typeString": "literal_string \"ERC20: decreased allowance below zero\""
															},
															"value": "ERC20: decreased allowance below zero"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8",
																"typeString": "literal_string \"ERC20: decreased allowance below zero\""
															}
														],
														"id": 250,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "6995:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 255,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6995:85:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 256,
												"nodeType": "ExpressionStatement",
												"src": "6995:85:0"
											},
											{
												"id": 265,
												"nodeType": "UncheckedBlock",
												"src": "7091:97:0",
												"statements": [
													{
														"expression": {
															"arguments": [
																{
																	"id": 258,
																	"name": "owner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 239,
																	"src": "7125:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 259,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 231,
																	"src": "7132:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 262,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 260,
																		"name": "currentAllowance",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 244,
																		"src": "7141:16:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "-",
																	"rightExpression": {
																		"id": 261,
																		"name": "subtractedValue",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 233,
																		"src": "7160:15:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "7141:34:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 257,
																"name": "_approve",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 519,
																"src": "7116:8:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
																	"typeString": "function (address,address,uint256)"
																}
															},
															"id": 263,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "7116:60:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$__$",
																"typeString": "tuple()"
															}
														},
														"id": 264,
														"nodeType": "ExpressionStatement",
														"src": "7116:60:0"
													}
												]
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 266,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "7207:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 237,
												"id": 267,
												"nodeType": "Return",
												"src": "7200:11:0"
											}
										]
									},
									"documentation": {
										"id": 229,
										"nodeType": "StructuredDocumentation",
										"src": "6288:489:0",
										"text": " @dev Atomically decreases the allowance granted to `spender` by the caller.\n This is an alternative to {approve} that can be used as a mitigation for\n problems described in {IERC20-approve}.\n Emits an {Approval} event indicating the updated allowance.\n Requirements:\n - `spender` cannot be the zero address.\n - `spender` must have allowance for the caller of at least\n `subtractedValue`."
									},
									"functionSelector": "a457c2d7",
									"id": 269,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "decreaseAllowance",
									"nameLocation": "6792:17:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 234,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 231,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "6818:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 269,
												"src": "6810:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 230,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6810:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 233,
												"mutability": "mutable",
												"name": "subtractedValue",
												"nameLocation": "6835:15:0",
												"nodeType": "VariableDeclaration",
												"scope": 269,
												"src": "6827:23:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 232,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6827:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6809:42:0"
									},
									"returnParameters": {
										"id": 237,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 236,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 269,
												"src": "6876:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 235,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "6876:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6875:6:0"
									},
									"scope": 585,
									"src": "6783:436:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 345,
										"nodeType": "Block",
										"src": "7810:559:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 285,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 280,
																"name": "from",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 272,
																"src": "7829:4:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 283,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "7845:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 282,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "7837:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 281,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "7837:7:0",
																		"typeDescriptions": {}
																	}
																},
																"id": 284,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7837:10:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "7829:18:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a207472616e736665722066726f6d20746865207a65726f2061646472657373",
															"id": 286,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "7849:39:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea",
																"typeString": "literal_string \"ERC20: transfer from the zero address\""
															},
															"value": "ERC20: transfer from the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea",
																"typeString": "literal_string \"ERC20: transfer from the zero address\""
															}
														],
														"id": 279,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "7821:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 287,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7821:68:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 288,
												"nodeType": "ExpressionStatement",
												"src": "7821:68:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 295,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 290,
																"name": "to",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 274,
																"src": "7908:2:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 293,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "7922:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 292,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "7914:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 291,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "7914:7:0",
																		"typeDescriptions": {}
																	}
																},
																"id": 294,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7914:10:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "7908:16:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a207472616e7366657220746f20746865207a65726f2061646472657373",
															"id": 296,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "7926:37:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f",
																"typeString": "literal_string \"ERC20: transfer to the zero address\""
															},
															"value": "ERC20: transfer to the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f",
																"typeString": "literal_string \"ERC20: transfer to the zero address\""
															}
														],
														"id": 289,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "7900:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 297,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7900:64:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 298,
												"nodeType": "ExpressionStatement",
												"src": "7900:64:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 300,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 272,
															"src": "7998:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 301,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 274,
															"src": "8004:2:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 302,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 276,
															"src": "8008:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 299,
														"name": "_beforeTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 573,
														"src": "7977:20:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 303,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7977:38:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 304,
												"nodeType": "ExpressionStatement",
												"src": "7977:38:0"
											},
											{
												"assignments": [
													306
												],
												"declarations": [
													{
														"constant": false,
														"id": 306,
														"mutability": "mutable",
														"name": "fromBalance",
														"nameLocation": "8036:11:0",
														"nodeType": "VariableDeclaration",
														"scope": 345,
														"src": "8028:19:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 305,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "8028:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 310,
												"initialValue": {
													"baseExpression": {
														"id": 307,
														"name": "_balances",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 15,
														"src": "8050:9:0",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 309,
													"indexExpression": {
														"id": 308,
														"name": "from",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 272,
														"src": "8060:4:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "8050:15:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "8028:37:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 314,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 312,
																"name": "fromBalance",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 306,
																"src": "8084:11:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 313,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 276,
																"src": "8099:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "8084:21:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e6365",
															"id": 315,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "8107:40:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6",
																"typeString": "literal_string \"ERC20: transfer amount exceeds balance\""
															},
															"value": "ERC20: transfer amount exceeds balance"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6",
																"typeString": "literal_string \"ERC20: transfer amount exceeds balance\""
															}
														],
														"id": 311,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "8076:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 316,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8076:72:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 317,
												"nodeType": "ExpressionStatement",
												"src": "8076:72:0"
											},
											{
												"id": 326,
												"nodeType": "UncheckedBlock",
												"src": "8159:75:0",
												"statements": [
													{
														"expression": {
															"id": 324,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"baseExpression": {
																	"id": 318,
																	"name": "_balances",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 15,
																	"src": "8184:9:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 320,
																"indexExpression": {
																	"id": 319,
																	"name": "from",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 272,
																	"src": "8194:4:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"nodeType": "IndexAccess",
																"src": "8184:15:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 323,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 321,
																	"name": "fromBalance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 306,
																	"src": "8202:11:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"id": 322,
																	"name": "amount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 276,
																	"src": "8216:6:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "8202:20:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "8184:38:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 325,
														"nodeType": "ExpressionStatement",
														"src": "8184:38:0"
													}
												]
											},
											{
												"expression": {
													"id": 331,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 327,
															"name": "_balances",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 15,
															"src": "8244:9:0",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 329,
														"indexExpression": {
															"id": 328,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 274,
															"src": "8254:2:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "8244:13:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"id": 330,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 276,
														"src": "8261:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "8244:23:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 332,
												"nodeType": "ExpressionStatement",
												"src": "8244:23:0"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 334,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 272,
															"src": "8294:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 335,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 274,
															"src": "8300:2:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 336,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 276,
															"src": "8304:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 333,
														"name": "Transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 597,
														"src": "8285:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 337,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8285:26:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 338,
												"nodeType": "EmitStatement",
												"src": "8280:31:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 340,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 272,
															"src": "8344:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 341,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 274,
															"src": "8350:2:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 342,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 276,
															"src": "8354:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 339,
														"name": "_afterTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 584,
														"src": "8324:19:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 343,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8324:37:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 344,
												"nodeType": "ExpressionStatement",
												"src": "8324:37:0"
											}
										]
									},
									"documentation": {
										"id": 270,
										"nodeType": "StructuredDocumentation",
										"src": "7227:465:0",
										"text": " @dev Moves `amount` of tokens from `sender` to `recipient`.\n This internal function is equivalent to {transfer}, and can be used to\n e.g. implement automatic token fees, slashing mechanisms, etc.\n Emits a {Transfer} event.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `from` must have a balance of at least `amount`."
									},
									"id": 346,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_transfer",
									"nameLocation": "7707:9:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 277,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 272,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "7735:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 346,
												"src": "7727:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 271,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7727:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 274,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "7758:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 346,
												"src": "7750:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 273,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7750:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 276,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "7779:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 346,
												"src": "7771:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 275,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7771:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7716:76:0"
									},
									"returnParameters": {
										"id": 278,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7810:0:0"
									},
									"scope": 585,
									"src": "7698:671:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 401,
										"nodeType": "Block",
										"src": "8721:334:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 360,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 355,
																"name": "account",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 349,
																"src": "8740:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 358,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "8759:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 357,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "8751:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 356,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "8751:7:0",
																		"typeDescriptions": {}
																	}
																},
																"id": 359,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8751:10:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "8740:21:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a206d696e7420746f20746865207a65726f2061646472657373",
															"id": 361,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "8763:33:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e",
																"typeString": "literal_string \"ERC20: mint to the zero address\""
															},
															"value": "ERC20: mint to the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e",
																"typeString": "literal_string \"ERC20: mint to the zero address\""
															}
														],
														"id": 354,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "8732:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 362,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8732:65:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 363,
												"nodeType": "ExpressionStatement",
												"src": "8732:65:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 367,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8839:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 366,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "8831:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 365,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "8831:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 368,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8831:10:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 369,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 349,
															"src": "8843:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 370,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 351,
															"src": "8852:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 364,
														"name": "_beforeTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 573,
														"src": "8810:20:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 371,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8810:49:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 372,
												"nodeType": "ExpressionStatement",
												"src": "8810:49:0"
											},
											{
												"expression": {
													"id": 375,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 373,
														"name": "_totalSupply",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 23,
														"src": "8872:12:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"id": 374,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 351,
														"src": "8888:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "8872:22:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 376,
												"nodeType": "ExpressionStatement",
												"src": "8872:22:0"
											},
											{
												"expression": {
													"id": 381,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 377,
															"name": "_balances",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 15,
															"src": "8905:9:0",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 379,
														"indexExpression": {
															"id": 378,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 349,
															"src": "8915:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "8905:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"id": 380,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 351,
														"src": "8927:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "8905:28:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 382,
												"nodeType": "ExpressionStatement",
												"src": "8905:28:0"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 386,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8966:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 385,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "8958:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 384,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "8958:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 387,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8958:10:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 388,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 349,
															"src": "8970:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 389,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 351,
															"src": "8979:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 383,
														"name": "Transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 597,
														"src": "8949:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 390,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8949:37:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 391,
												"nodeType": "EmitStatement",
												"src": "8944:42:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 395,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9027:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 394,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "9019:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 393,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "9019:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 396,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9019:10:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 397,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 349,
															"src": "9031:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 398,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 351,
															"src": "9040:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 392,
														"name": "_afterTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 584,
														"src": "8999:19:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 399,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8999:48:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 400,
												"nodeType": "ExpressionStatement",
												"src": "8999:48:0"
											}
										]
									},
									"documentation": {
										"id": 347,
										"nodeType": "StructuredDocumentation",
										"src": "8377:273:0",
										"text": "@dev Creates `amount` tokens and assigns them to `account`, increasing\n the total supply.\n Emits a {Transfer} event with `from` set to the zero address.\n Requirements:\n - `account` cannot be the zero address."
									},
									"id": 402,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_mint",
									"nameLocation": "8665:5:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 352,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 349,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "8679:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 402,
												"src": "8671:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 348,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8671:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 351,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "8696:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 402,
												"src": "8688:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 350,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8688:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8670:33:0"
									},
									"returnParameters": {
										"id": 353,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8721:0:0"
									},
									"scope": 585,
									"src": "8656:399:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 473,
										"nodeType": "Block",
										"src": "9453:526:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 416,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 411,
																"name": "account",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 405,
																"src": "9472:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 414,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "9491:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 413,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "9483:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 412,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "9483:7:0",
																		"typeDescriptions": {}
																	}
																},
																"id": 415,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "9483:10:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "9472:21:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a206275726e2066726f6d20746865207a65726f2061646472657373",
															"id": 417,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "9495:35:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f",
																"typeString": "literal_string \"ERC20: burn from the zero address\""
															},
															"value": "ERC20: burn from the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f",
																"typeString": "literal_string \"ERC20: burn from the zero address\""
															}
														],
														"id": 410,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "9464:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 418,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9464:67:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 419,
												"nodeType": "ExpressionStatement",
												"src": "9464:67:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 421,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 405,
															"src": "9565:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 424,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9582:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 423,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "9574:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 422,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "9574:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 425,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9574:10:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 426,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 407,
															"src": "9586:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 420,
														"name": "_beforeTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 573,
														"src": "9544:20:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 427,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9544:49:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 428,
												"nodeType": "ExpressionStatement",
												"src": "9544:49:0"
											},
											{
												"assignments": [
													430
												],
												"declarations": [
													{
														"constant": false,
														"id": 430,
														"mutability": "mutable",
														"name": "accountBalance",
														"nameLocation": "9614:14:0",
														"nodeType": "VariableDeclaration",
														"scope": 473,
														"src": "9606:22:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 429,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "9606:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 434,
												"initialValue": {
													"baseExpression": {
														"id": 431,
														"name": "_balances",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 15,
														"src": "9631:9:0",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 433,
													"indexExpression": {
														"id": 432,
														"name": "account",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 405,
														"src": "9641:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "9631:18:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "9606:43:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 438,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 436,
																"name": "accountBalance",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 430,
																"src": "9668:14:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 437,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 407,
																"src": "9686:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "9668:24:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a206275726e20616d6f756e7420657863656564732062616c616e6365",
															"id": 439,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "9694:36:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd",
																"typeString": "literal_string \"ERC20: burn amount exceeds balance\""
															},
															"value": "ERC20: burn amount exceeds balance"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd",
																"typeString": "literal_string \"ERC20: burn amount exceeds balance\""
															}
														],
														"id": 435,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "9660:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 440,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9660:71:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 441,
												"nodeType": "ExpressionStatement",
												"src": "9660:71:0"
											},
											{
												"id": 450,
												"nodeType": "UncheckedBlock",
												"src": "9742:81:0",
												"statements": [
													{
														"expression": {
															"id": 448,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"baseExpression": {
																	"id": 442,
																	"name": "_balances",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 15,
																	"src": "9767:9:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 444,
																"indexExpression": {
																	"id": 443,
																	"name": "account",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 405,
																	"src": "9777:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"nodeType": "IndexAccess",
																"src": "9767:18:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 447,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 445,
																	"name": "accountBalance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 430,
																	"src": "9788:14:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"id": 446,
																	"name": "amount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 407,
																	"src": "9805:6:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "9788:23:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "9767:44:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 449,
														"nodeType": "ExpressionStatement",
														"src": "9767:44:0"
													}
												]
											},
											{
												"expression": {
													"id": 453,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 451,
														"name": "_totalSupply",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 23,
														"src": "9833:12:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "-=",
													"rightHandSide": {
														"id": 452,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 407,
														"src": "9849:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "9833:22:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 454,
												"nodeType": "ExpressionStatement",
												"src": "9833:22:0"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 456,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 405,
															"src": "9882:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 459,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9899:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 458,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "9891:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 457,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "9891:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 460,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9891:10:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 461,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 407,
															"src": "9903:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 455,
														"name": "Transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 597,
														"src": "9873:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 462,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9873:37:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 463,
												"nodeType": "EmitStatement",
												"src": "9868:42:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 465,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 405,
															"src": "9943:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 468,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9960:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 467,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "9952:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 466,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "9952:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 469,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9952:10:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 470,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 407,
															"src": "9964:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 464,
														"name": "_afterTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 584,
														"src": "9923:19:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 471,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9923:48:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 472,
												"nodeType": "ExpressionStatement",
												"src": "9923:48:0"
											}
										]
									},
									"documentation": {
										"id": 403,
										"nodeType": "StructuredDocumentation",
										"src": "9063:319:0",
										"text": " @dev Destroys `amount` tokens from `account`, reducing the\n total supply.\n Emits a {Transfer} event with `to` set to the zero address.\n Requirements:\n - `account` cannot be the zero address.\n - `account` must have at least `amount` tokens."
									},
									"id": 474,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_burn",
									"nameLocation": "9397:5:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 408,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 405,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "9411:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 474,
												"src": "9403:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 404,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9403:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 407,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "9428:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 474,
												"src": "9420:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 406,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9420:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9402:33:0"
									},
									"returnParameters": {
										"id": 409,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9453:0:0"
									},
									"scope": 585,
									"src": "9388:591:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 518,
										"nodeType": "Block",
										"src": "10534:263:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 490,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 485,
																"name": "owner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 477,
																"src": "10553:5:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 488,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "10570:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 487,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "10562:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 486,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "10562:7:0",
																		"typeDescriptions": {}
																	}
																},
																"id": 489,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "10562:10:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "10553:19:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a20617070726f76652066726f6d20746865207a65726f2061646472657373",
															"id": 491,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "10574:38:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208",
																"typeString": "literal_string \"ERC20: approve from the zero address\""
															},
															"value": "ERC20: approve from the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208",
																"typeString": "literal_string \"ERC20: approve from the zero address\""
															}
														],
														"id": 484,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "10545:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 492,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10545:68:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 493,
												"nodeType": "ExpressionStatement",
												"src": "10545:68:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 500,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 495,
																"name": "spender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 479,
																"src": "10632:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 498,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "10651:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 497,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "10643:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 496,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "10643:7:0",
																		"typeDescriptions": {}
																	}
																},
																"id": 499,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "10643:10:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "10632:21:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a20617070726f766520746f20746865207a65726f2061646472657373",
															"id": 501,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "10655:36:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029",
																"typeString": "literal_string \"ERC20: approve to the zero address\""
															},
															"value": "ERC20: approve to the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029",
																"typeString": "literal_string \"ERC20: approve to the zero address\""
															}
														],
														"id": 494,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "10624:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 502,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10624:68:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 503,
												"nodeType": "ExpressionStatement",
												"src": "10624:68:0"
											},
											{
												"expression": {
													"id": 510,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"baseExpression": {
																"id": 504,
																"name": "_allowances",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 21,
																"src": "10705:11:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
																	"typeString": "mapping(address => mapping(address => uint256))"
																}
															},
															"id": 507,
															"indexExpression": {
																"id": 505,
																"name": "owner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 477,
																"src": "10717:5:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "10705:18:0",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 508,
														"indexExpression": {
															"id": 506,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 479,
															"src": "10724:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "10705:27:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 509,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 481,
														"src": "10735:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "10705:36:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 511,
												"nodeType": "ExpressionStatement",
												"src": "10705:36:0"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 513,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 477,
															"src": "10766:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 514,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 479,
															"src": "10773:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 515,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 481,
															"src": "10782:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 512,
														"name": "Approval",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 606,
														"src": "10757:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 516,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10757:32:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 517,
												"nodeType": "EmitStatement",
												"src": "10752:37:0"
											}
										]
									},
									"documentation": {
										"id": 475,
										"nodeType": "StructuredDocumentation",
										"src": "9987:424:0",
										"text": " @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n This internal function is equivalent to `approve`, and can be used to\n e.g. set automatic allowances for certain subsystems, etc.\n Emits an {Approval} event.\n Requirements:\n - `owner` cannot be the zero address.\n - `spender` cannot be the zero address."
									},
									"id": 519,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_approve",
									"nameLocation": "10426:8:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 482,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 477,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "10453:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 519,
												"src": "10445:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 476,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10445:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 479,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "10477:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 519,
												"src": "10469:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 478,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10469:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 481,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "10503:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 519,
												"src": "10495:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 480,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10495:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10434:82:0"
									},
									"returnParameters": {
										"id": 483,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10534:0:0"
									},
									"scope": 585,
									"src": "10417:380:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 561,
										"nodeType": "Block",
										"src": "11212:329:0",
										"statements": [
											{
												"assignments": [
													530
												],
												"declarations": [
													{
														"constant": false,
														"id": 530,
														"mutability": "mutable",
														"name": "currentAllowance",
														"nameLocation": "11231:16:0",
														"nodeType": "VariableDeclaration",
														"scope": 561,
														"src": "11223:24:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 529,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "11223:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 535,
												"initialValue": {
													"arguments": [
														{
															"id": 532,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 522,
															"src": "11260:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 533,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 524,
															"src": "11267:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 531,
														"name": "allowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 141,
														"src": "11250:9:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address,address) view returns (uint256)"
														}
													},
													"id": 534,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "11250:25:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "11223:52:0"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 542,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 536,
														"name": "currentAllowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 530,
														"src": "11290:16:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"expression": {
															"arguments": [
																{
																	"id": 539,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "11315:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint256_$",
																		"typeString": "type(uint256)"
																	},
																	"typeName": {
																		"id": 538,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "11315:7:0",
																		"typeDescriptions": {}
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_type$_t_uint256_$",
																		"typeString": "type(uint256)"
																	}
																],
																"id": 537,
																"name": "type",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967269,
																"src": "11310:4:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																	"typeString": "function () pure"
																}
															},
															"id": 540,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "11310:13:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_magic_meta_type_t_uint256",
																"typeString": "type(uint256)"
															}
														},
														"id": 541,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberName": "max",
														"nodeType": "MemberAccess",
														"src": "11310:17:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "11290:37:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 560,
												"nodeType": "IfStatement",
												"src": "11286:248:0",
												"trueBody": {
													"id": 559,
													"nodeType": "Block",
													"src": "11329:205:0",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 546,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 544,
																			"name": "currentAllowance",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 530,
																			"src": "11352:16:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": ">=",
																		"rightExpression": {
																			"id": 545,
																			"name": "amount",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 526,
																			"src": "11372:6:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "11352:26:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	{
																		"hexValue": "45524332303a20696e73756666696369656e7420616c6c6f77616e6365",
																		"id": 547,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "11380:31:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe",
																			"typeString": "literal_string \"ERC20: insufficient allowance\""
																		},
																		"value": "ERC20: insufficient allowance"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		{
																			"typeIdentifier": "t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe",
																			"typeString": "literal_string \"ERC20: insufficient allowance\""
																		}
																	],
																	"id": 543,
																	"name": "require",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967278,
																		4294967278
																	],
																	"referencedDeclaration": 4294967278,
																	"src": "11344:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bool,string memory) pure"
																	}
																},
																"id": 548,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "11344:68:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 549,
															"nodeType": "ExpressionStatement",
															"src": "11344:68:0"
														},
														{
															"id": 558,
															"nodeType": "UncheckedBlock",
															"src": "11427:96:0",
															"statements": [
																{
																	"expression": {
																		"arguments": [
																			{
																				"id": 551,
																				"name": "owner",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 522,
																				"src": "11465:5:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			{
																				"id": 552,
																				"name": "spender",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 524,
																				"src": "11472:7:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			{
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 555,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 553,
																					"name": "currentAllowance",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 530,
																					"src": "11481:16:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "-",
																				"rightExpression": {
																					"id": 554,
																					"name": "amount",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 526,
																					"src": "11500:6:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "11481:25:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				},
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				},
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			],
																			"id": 550,
																			"name": "_approve",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 519,
																			"src": "11456:8:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
																				"typeString": "function (address,address,uint256)"
																			}
																		},
																		"id": 556,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "11456:51:0",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_tuple$__$",
																			"typeString": "tuple()"
																		}
																	},
																	"id": 557,
																	"nodeType": "ExpressionStatement",
																	"src": "11456:51:0"
																}
															]
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 520,
										"nodeType": "StructuredDocumentation",
										"src": "10805:277:0",
										"text": " @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n Does not update the allowance amount in case of infinite allowance.\n Revert if not enough allowance is available.\n Might emit an {Approval} event."
									},
									"id": 562,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_spendAllowance",
									"nameLocation": "11097:15:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 527,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 522,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "11131:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 562,
												"src": "11123:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 521,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "11123:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 524,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "11155:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 562,
												"src": "11147:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 523,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "11147:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 526,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "11181:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 562,
												"src": "11173:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 525,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11173:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11112:82:0"
									},
									"returnParameters": {
										"id": 528,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "11212:0:0"
									},
									"scope": 585,
									"src": "11088:453:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 572,
										"nodeType": "Block",
										"src": "12264:2:0",
										"statements": []
									},
									"documentation": {
										"id": 563,
										"nodeType": "StructuredDocumentation",
										"src": "11549:586:0",
										"text": " @dev Hook that is called before any transfer of tokens. This includes\n minting and burning.\n Calling conditions:\n - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n will be transferred to `to`.\n - when `from` is zero, `amount` tokens will be minted for `to`.\n - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n - `from` and `to` are never both zero.\n To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]."
									},
									"id": 573,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_beforeTokenTransfer",
									"nameLocation": "12150:20:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 570,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 565,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "12189:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 573,
												"src": "12181:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 564,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "12181:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 567,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "12212:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 573,
												"src": "12204:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 566,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "12204:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 569,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "12233:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 573,
												"src": "12225:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 568,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12225:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12170:76:0"
									},
									"returnParameters": {
										"id": 571,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "12264:0:0"
									},
									"scope": 585,
									"src": "12141:125:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 583,
										"nodeType": "Block",
										"src": "12992:2:0",
										"statements": []
									},
									"documentation": {
										"id": 574,
										"nodeType": "StructuredDocumentation",
										"src": "12274:590:0",
										"text": " @dev Hook that is called after any transfer of tokens. This includes\n minting and burning.\n Calling conditions:\n - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n has been transferred to `to`.\n - when `from` is zero, `amount` tokens have been minted for `to`.\n - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n - `from` and `to` are never both zero.\n To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]."
									},
									"id": 584,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_afterTokenTransfer",
									"nameLocation": "12879:19:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 581,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 576,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "12917:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 584,
												"src": "12909:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 575,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "12909:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 578,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "12940:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 584,
												"src": "12932:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 577,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "12932:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 580,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "12961:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 584,
												"src": "12953:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 579,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12953:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12898:76:0"
									},
									"returnParameters": {
										"id": 582,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "12992:0:0"
									},
									"scope": 585,
									"src": "12870:124:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 586,
							"src": "1424:11573:0",
							"usedErrors": []
						}
					],
					"src": "108:12889:0"
				},
				"id": 0
			},
			"ERC20/IERC20.sol": {
				"ast": {
					"absolutePath": "ERC20/IERC20.sol",
					"exportedSymbols": {
						"IERC20": [
							663
						]
					},
					"id": 664,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 587,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "109:23:1"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 588,
								"nodeType": "StructuredDocumentation",
								"src": "136:72:1",
								"text": " @dev Interface of the ERC20 standard as defined in the EIP."
							},
							"fullyImplemented": false,
							"id": 663,
							"linearizedBaseContracts": [
								663
							],
							"name": "IERC20",
							"nameLocation": "220:6:1",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 589,
										"nodeType": "StructuredDocumentation",
										"src": "234:163:1",
										"text": " @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."
									},
									"id": 597,
									"name": "Transfer",
									"nameLocation": "409:8:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 596,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 591,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "434:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 597,
												"src": "418:20:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 590,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "418:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 593,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "456:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 597,
												"src": "440:18:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 592,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "440:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 595,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "468:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 597,
												"src": "460:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 594,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "460:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "417:57:1"
									},
									"src": "403:72:1"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 598,
										"nodeType": "StructuredDocumentation",
										"src": "483:151:1",
										"text": " @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."
									},
									"id": 606,
									"name": "Approval",
									"nameLocation": "646:8:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 605,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 600,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "671:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 606,
												"src": "655:21:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 599,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "655:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 602,
												"indexed": true,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "694:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 606,
												"src": "678:23:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 601,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "678:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 604,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "711:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 606,
												"src": "703:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 603,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "703:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "654:63:1"
									},
									"src": "640:78:1"
								},
								{
									"documentation": {
										"id": 607,
										"nodeType": "StructuredDocumentation",
										"src": "726:68:1",
										"text": " @dev Returns the amount of tokens in existence."
									},
									"functionSelector": "18160ddd",
									"id": 612,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "809:11:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 608,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "820:2:1"
									},
									"returnParameters": {
										"id": 611,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 610,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 612,
												"src": "846:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 609,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "846:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "845:9:1"
									},
									"scope": 663,
									"src": "800:55:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 613,
										"nodeType": "StructuredDocumentation",
										"src": "863:74:1",
										"text": " @dev Returns the amount of tokens owned by `account`."
									},
									"functionSelector": "70a08231",
									"id": 620,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "952:9:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 616,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 615,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "970:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 620,
												"src": "962:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 614,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "962:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "961:17:1"
									},
									"returnParameters": {
										"id": 619,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 618,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 620,
												"src": "1002:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 617,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1002:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1001:9:1"
									},
									"scope": 663,
									"src": "943:68:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 621,
										"nodeType": "StructuredDocumentation",
										"src": "1027:208:1",
										"text": " @dev Moves `amount` tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "a9059cbb",
									"id": 630,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nameLocation": "1250:8:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 626,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 623,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1267:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 630,
												"src": "1259:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 622,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1259:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 625,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "1279:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 630,
												"src": "1271:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 624,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1271:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1258:28:1"
									},
									"returnParameters": {
										"id": 629,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 628,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 630,
												"src": "1305:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 627,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1305:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1304:6:1"
									},
									"scope": 663,
									"src": "1241:70:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 631,
										"nodeType": "StructuredDocumentation",
										"src": "1319:270:1",
										"text": " @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."
									},
									"functionSelector": "dd62ed3e",
									"id": 640,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nameLocation": "1604:9:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 636,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 633,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1622:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 640,
												"src": "1614:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 632,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1614:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 635,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1637:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 640,
												"src": "1629:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 634,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1629:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1613:32:1"
									},
									"returnParameters": {
										"id": 639,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 638,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 640,
												"src": "1669:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 637,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1669:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1668:9:1"
									},
									"scope": 663,
									"src": "1595:83:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 641,
										"nodeType": "StructuredDocumentation",
										"src": "1686:655:1",
										"text": " @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."
									},
									"functionSelector": "095ea7b3",
									"id": 650,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "2356:7:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 646,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 643,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2372:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 650,
												"src": "2364:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 642,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2364:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 645,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2389:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 650,
												"src": "2381:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 644,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2381:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2363:33:1"
									},
									"returnParameters": {
										"id": 649,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 648,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 650,
												"src": "2415:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 647,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2415:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2414:6:1"
									},
									"scope": 663,
									"src": "2347:74:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 651,
										"nodeType": "StructuredDocumentation",
										"src": "2429:295:1",
										"text": " @dev Moves `amount` tokens from `from` to `to` using the\n allowance mechanism. `amount` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "23b872dd",
									"id": 662,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "2739:12:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 658,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 653,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "2770:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 662,
												"src": "2762:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 652,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2762:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 655,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "2793:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 662,
												"src": "2785:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 654,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2785:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 657,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2814:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 662,
												"src": "2806:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 656,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2806:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2751:76:1"
									},
									"returnParameters": {
										"id": 661,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 660,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 662,
												"src": "2846:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 659,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2846:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2845:6:1"
									},
									"scope": 663,
									"src": "2730:122:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 664,
							"src": "210:2645:1",
							"usedErrors": []
						}
					],
					"src": "109:2748:1"
				},
				"id": 1
			},
			"ERC20/IERC20Metadata.sol": {
				"ast": {
					"absolutePath": "ERC20/IERC20Metadata.sol",
					"exportedSymbols": {
						"IERC20": [
							663
						],
						"IERC20Metadata": [
							688
						]
					},
					"id": 689,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 665,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "113:23:2"
						},
						{
							"absolutePath": "ERC20/IERC20.sol",
							"file": "./IERC20.sol",
							"id": 666,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 689,
							"sourceUnit": 664,
							"src": "140:22:2",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 668,
										"name": "IERC20",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 663,
										"src": "316:6:2"
									},
									"id": 669,
									"nodeType": "InheritanceSpecifier",
									"src": "316:6:2"
								}
							],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 667,
								"nodeType": "StructuredDocumentation",
								"src": "166:120:2",
								"text": " @dev Interface for the optional metadata functions from the ERC20 standard.\n _Available since v4.1._"
							},
							"fullyImplemented": false,
							"id": 688,
							"linearizedBaseContracts": [
								688,
								663
							],
							"name": "IERC20Metadata",
							"nameLocation": "298:14:2",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 670,
										"nodeType": "StructuredDocumentation",
										"src": "330:56:2",
										"text": " @dev Returns the name of the token."
									},
									"functionSelector": "06fdde03",
									"id": 675,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "name",
									"nameLocation": "401:4:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 671,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "405:2:2"
									},
									"returnParameters": {
										"id": 674,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 673,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 675,
												"src": "431:13:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 672,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "431:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "430:15:2"
									},
									"scope": 688,
									"src": "392:54:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 676,
										"nodeType": "StructuredDocumentation",
										"src": "454:58:2",
										"text": " @dev Returns the symbol of the token."
									},
									"functionSelector": "95d89b41",
									"id": 681,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "symbol",
									"nameLocation": "527:6:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 677,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "533:2:2"
									},
									"returnParameters": {
										"id": 680,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 679,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 681,
												"src": "559:13:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 678,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "559:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "558:15:2"
									},
									"scope": 688,
									"src": "518:56:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 682,
										"nodeType": "StructuredDocumentation",
										"src": "582:67:2",
										"text": " @dev Returns the decimals places of the token."
									},
									"functionSelector": "313ce567",
									"id": 687,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "decimals",
									"nameLocation": "664:8:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 683,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "672:2:2"
									},
									"returnParameters": {
										"id": 686,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 685,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 687,
												"src": "698:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 684,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "698:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "697:9:2"
									},
									"scope": 688,
									"src": "655:52:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 689,
							"src": "288:422:2",
							"usedErrors": []
						}
					],
					"src": "113:599:2"
				},
				"id": 2
			},
			"Ethereum/Presale.sol": {
				"ast": {
					"absolutePath": "Ethereum/Presale.sol",
					"exportedSymbols": {
						"Context": [
							1292
						],
						"ERC20": [
							585
						],
						"EnumerableSet": [
							1891
						],
						"IERC20": [
							663
						],
						"IERC20Metadata": [
							688
						],
						"Ownable": [
							1996
						],
						"Presale": [
							1270
						],
						"ReentrancyGuard": [
							2036
						],
						"SafeMath": [
							2348
						],
						"TransferHelper": [
							2497
						]
					},
					"id": 1271,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 690,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "93:23:3"
						},
						{
							"absolutePath": "ERC20/ERC20.sol",
							"file": "../ERC20/ERC20.sol",
							"id": 691,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1271,
							"sourceUnit": 586,
							"src": "120:28:3",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "Utils/ReentrancyGuard.sol",
							"file": "../Utils/ReentrancyGuard.sol",
							"id": 692,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1271,
							"sourceUnit": 2037,
							"src": "150:38:3",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "Utils/TransferHelper.sol",
							"file": "../Utils/TransferHelper.sol",
							"id": 693,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1271,
							"sourceUnit": 2498,
							"src": "190:37:3",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "Utils/EnumerableSet.sol",
							"file": "../Utils/EnumerableSet.sol",
							"id": 694,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1271,
							"sourceUnit": 1892,
							"src": "229:36:3",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "Utils/Ownable.sol",
							"file": "../Utils/Ownable.sol",
							"id": 695,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1271,
							"sourceUnit": 1997,
							"src": "267:30:3",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "Utils/SafeMath.sol",
							"file": "../Utils/SafeMath.sol",
							"id": 696,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1271,
							"sourceUnit": 2349,
							"src": "299:31:3",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 697,
										"name": "ReentrancyGuard",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 2036,
										"src": "358:15:3"
									},
									"id": 698,
									"nodeType": "InheritanceSpecifier",
									"src": "358:15:3"
								},
								{
									"baseName": {
										"id": 699,
										"name": "Ownable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1996,
										"src": "375:7:3"
									},
									"id": 700,
									"nodeType": "InheritanceSpecifier",
									"src": "375:7:3"
								}
							],
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 1270,
							"linearizedBaseContracts": [
								1270,
								1996,
								1292,
								2036
							],
							"name": "Presale",
							"nameLocation": "347:7:3",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"id": 704,
									"libraryName": {
										"id": 701,
										"name": "EnumerableSet",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1891,
										"src": "395:13:3"
									},
									"nodeType": "UsingForDirective",
									"src": "389:49:3",
									"typeName": {
										"id": 703,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 702,
											"name": "EnumerableSet.AddressSet",
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 1604,
											"src": "413:24:3"
										},
										"referencedDeclaration": 1604,
										"src": "413:24:3",
										"typeDescriptions": {
											"typeIdentifier": "t_struct$_AddressSet_$1604_storage_ptr",
											"typeString": "struct EnumerableSet.AddressSet"
										}
									}
								},
								{
									"id": 707,
									"libraryName": {
										"id": 705,
										"name": "SafeMath",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 2348,
										"src": "450:8:3"
									},
									"nodeType": "UsingForDirective",
									"src": "444:27:3",
									"typeName": {
										"id": 706,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "463:7:3",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									}
								},
								{
									"canonicalName": "Presale.SaleInfor",
									"id": 734,
									"members": [
										{
											"constant": false,
											"id": 709,
											"mutability": "mutable",
											"name": "presaleOwner",
											"nameLocation": "523:12:3",
											"nodeType": "VariableDeclaration",
											"scope": 734,
											"src": "507:28:3",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address_payable",
												"typeString": "address payable"
											},
											"typeName": {
												"id": 708,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "507:15:3",
												"stateMutability": "payable",
												"typeDescriptions": {
													"typeIdentifier": "t_address_payable",
													"typeString": "address payable"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 712,
											"mutability": "mutable",
											"name": "saleToken",
											"nameLocation": "552:9:3",
											"nodeType": "VariableDeclaration",
											"scope": 734,
											"src": "546:15:3",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_contract$_ERC20_$585",
												"typeString": "contract ERC20"
											},
											"typeName": {
												"id": 711,
												"nodeType": "UserDefinedTypeName",
												"pathNode": {
													"id": 710,
													"name": "ERC20",
													"nodeType": "IdentifierPath",
													"referencedDeclaration": 585,
													"src": "546:5:3"
												},
												"referencedDeclaration": 585,
												"src": "546:5:3",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ERC20_$585",
													"typeString": "contract ERC20"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 715,
											"mutability": "mutable",
											"name": "baseToken",
											"nameLocation": "578:9:3",
											"nodeType": "VariableDeclaration",
											"scope": 734,
											"src": "572:15:3",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_contract$_ERC20_$585",
												"typeString": "contract ERC20"
											},
											"typeName": {
												"id": 714,
												"nodeType": "UserDefinedTypeName",
												"pathNode": {
													"id": 713,
													"name": "ERC20",
													"nodeType": "IdentifierPath",
													"referencedDeclaration": 585,
													"src": "572:5:3"
												},
												"referencedDeclaration": 585,
												"src": "572:5:3",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ERC20_$585",
													"typeString": "contract ERC20"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 717,
											"mutability": "mutable",
											"name": "tokenPrice",
											"nameLocation": "606:10:3",
											"nodeType": "VariableDeclaration",
											"scope": 734,
											"src": "598:18:3",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 716,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "598:7:3",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 719,
											"mutability": "mutable",
											"name": "startSale",
											"nameLocation": "635:9:3",
											"nodeType": "VariableDeclaration",
											"scope": 734,
											"src": "627:17:3",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 718,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "627:7:3",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 721,
											"mutability": "mutable",
											"name": "endSale",
											"nameLocation": "663:7:3",
											"nodeType": "VariableDeclaration",
											"scope": 734,
											"src": "655:15:3",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 720,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "655:7:3",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 723,
											"mutability": "mutable",
											"name": "minSpendPerBuyer",
											"nameLocation": "689:16:3",
											"nodeType": "VariableDeclaration",
											"scope": 734,
											"src": "681:24:3",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 722,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "681:7:3",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 725,
											"mutability": "mutable",
											"name": "maxSpendPerBuyer",
											"nameLocation": "724:16:3",
											"nodeType": "VariableDeclaration",
											"scope": 734,
											"src": "716:24:3",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 724,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "716:7:3",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 727,
											"mutability": "mutable",
											"name": "refundFee",
											"nameLocation": "759:9:3",
											"nodeType": "VariableDeclaration",
											"scope": 734,
											"src": "751:17:3",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 726,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "751:7:3",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 729,
											"mutability": "mutable",
											"name": "claimFee",
											"nameLocation": "787:8:3",
											"nodeType": "VariableDeclaration",
											"scope": 734,
											"src": "779:16:3",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 728,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "779:7:3",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 731,
											"mutability": "mutable",
											"name": "saleIsBaseToken",
											"nameLocation": "811:15:3",
											"nodeType": "VariableDeclaration",
											"scope": 734,
											"src": "806:20:3",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bool",
												"typeString": "bool"
											},
											"typeName": {
												"id": 730,
												"name": "bool",
												"nodeType": "ElementaryTypeName",
												"src": "806:4:3",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 733,
											"mutability": "mutable",
											"name": "amountTokenForSale",
											"nameLocation": "845:18:3",
											"nodeType": "VariableDeclaration",
											"scope": 734,
											"src": "837:26:3",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 732,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "837:7:3",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "SaleInfor",
									"nameLocation": "486:9:3",
									"nodeType": "StructDefinition",
									"scope": 1270,
									"src": "479:392:3",
									"visibility": "public"
								},
								{
									"canonicalName": "Presale.BuyerInfo",
									"id": 747,
									"members": [
										{
											"constant": false,
											"id": 736,
											"mutability": "mutable",
											"name": "baseDeposit",
											"nameLocation": "915:11:3",
											"nodeType": "VariableDeclaration",
											"scope": 747,
											"src": "907:19:3",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 735,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "907:7:3",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 738,
											"mutability": "mutable",
											"name": "tokenOwner",
											"nameLocation": "945:10:3",
											"nodeType": "VariableDeclaration",
											"scope": 747,
											"src": "937:18:3",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 737,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "937:7:3",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 740,
											"mutability": "mutable",
											"name": "lastWithDraw",
											"nameLocation": "974:12:3",
											"nodeType": "VariableDeclaration",
											"scope": 747,
											"src": "966:20:3",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 739,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "966:7:3",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 742,
											"mutability": "mutable",
											"name": "totalTokenWithDraw",
											"nameLocation": "1005:18:3",
											"nodeType": "VariableDeclaration",
											"scope": 747,
											"src": "997:26:3",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 741,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "997:7:3",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 744,
											"mutability": "mutable",
											"name": "isRefund",
											"nameLocation": "1039:8:3",
											"nodeType": "VariableDeclaration",
											"scope": 747,
											"src": "1034:13:3",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bool",
												"typeString": "bool"
											},
											"typeName": {
												"id": 743,
												"name": "bool",
												"nodeType": "ElementaryTypeName",
												"src": "1034:4:3",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 746,
											"mutability": "mutable",
											"name": "isClaim",
											"nameLocation": "1063:7:3",
											"nodeType": "VariableDeclaration",
											"scope": 747,
											"src": "1058:12:3",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bool",
												"typeString": "bool"
											},
											"typeName": {
												"id": 745,
												"name": "bool",
												"nodeType": "ElementaryTypeName",
												"src": "1058:4:3",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "BuyerInfo",
									"nameLocation": "886:9:3",
									"nodeType": "StructDefinition",
									"scope": 1270,
									"src": "879:199:3",
									"visibility": "public"
								},
								{
									"canonicalName": "Presale.PresaleStatus",
									"id": 763,
									"members": [
										{
											"constant": false,
											"id": 749,
											"mutability": "mutable",
											"name": "totalBaseCollected",
											"nameLocation": "1126:18:3",
											"nodeType": "VariableDeclaration",
											"scope": 763,
											"src": "1118:26:3",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 748,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1118:7:3",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 751,
											"mutability": "mutable",
											"name": "totalTokenSold",
											"nameLocation": "1163:14:3",
											"nodeType": "VariableDeclaration",
											"scope": 763,
											"src": "1155:22:3",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 750,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1155:7:3",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 753,
											"mutability": "mutable",
											"name": "totalTokenWithDraw",
											"nameLocation": "1196:18:3",
											"nodeType": "VariableDeclaration",
											"scope": 763,
											"src": "1188:26:3",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 752,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1188:7:3",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 755,
											"mutability": "mutable",
											"name": "totalBaseWithDraw",
											"nameLocation": "1233:17:3",
											"nodeType": "VariableDeclaration",
											"scope": 763,
											"src": "1225:25:3",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 754,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1225:7:3",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 757,
											"mutability": "mutable",
											"name": "numByer",
											"nameLocation": "1269:7:3",
											"nodeType": "VariableDeclaration",
											"scope": 763,
											"src": "1261:15:3",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 756,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1261:7:3",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 759,
											"mutability": "mutable",
											"name": "totalFee",
											"nameLocation": "1295:8:3",
											"nodeType": "VariableDeclaration",
											"scope": 763,
											"src": "1287:16:3",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 758,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1287:7:3",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 762,
											"mutability": "mutable",
											"name": "admin",
											"nameLocation": "1324:5:3",
											"nodeType": "VariableDeclaration",
											"scope": 763,
											"src": "1314:15:3",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
												"typeString": "address[]"
											},
											"typeName": {
												"baseType": {
													"id": 760,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1314:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 761,
												"nodeType": "ArrayTypeName",
												"src": "1314:9:3",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
													"typeString": "address[]"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "PresaleStatus",
									"nameLocation": "1093:13:3",
									"nodeType": "StructDefinition",
									"scope": 1270,
									"src": "1086:251:3",
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "e2d3f423",
									"id": 768,
									"mutability": "mutable",
									"name": "buyerInfo",
									"nameLocation": "1386:9:3",
									"nodeType": "VariableDeclaration",
									"scope": 1270,
									"src": "1349:46:3",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_struct$_BuyerInfo_$747_storage_$",
										"typeString": "mapping(address => struct Presale.BuyerInfo)"
									},
									"typeName": {
										"id": 767,
										"keyType": {
											"id": 764,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1357:7:3",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "1349:29:3",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_struct$_BuyerInfo_$747_storage_$",
											"typeString": "mapping(address => struct Presale.BuyerInfo)"
										},
										"valueType": {
											"id": 766,
											"nodeType": "UserDefinedTypeName",
											"pathNode": {
												"id": 765,
												"name": "BuyerInfo",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 747,
												"src": "1368:9:3"
											},
											"referencedDeclaration": 747,
											"src": "1368:9:3",
											"typeDescriptions": {
												"typeIdentifier": "t_struct$_BuyerInfo_$747_storage_ptr",
												"typeString": "struct Presale.BuyerInfo"
											}
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "56c5f349",
									"id": 772,
									"mutability": "mutable",
									"name": "userFee",
									"nameLocation": "1437:7:3",
									"nodeType": "VariableDeclaration",
									"scope": 1270,
									"src": "1402:42:3",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
										"typeString": "mapping(address => uint256)"
									},
									"typeName": {
										"id": 771,
										"keyType": {
											"id": 769,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1410:7:3",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "1402:27:3",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
											"typeString": "mapping(address => uint256)"
										},
										"valueType": {
											"id": 770,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "1421:7:3",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "acfb2355",
									"id": 775,
									"mutability": "mutable",
									"name": "presaleStatus",
									"nameLocation": "1472:13:3",
									"nodeType": "VariableDeclaration",
									"scope": 1270,
									"src": "1451:34:3",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_struct$_PresaleStatus_$763_storage",
										"typeString": "struct Presale.PresaleStatus"
									},
									"typeName": {
										"id": 774,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 773,
											"name": "PresaleStatus",
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 763,
											"src": "1451:13:3"
										},
										"referencedDeclaration": 763,
										"src": "1451:13:3",
										"typeDescriptions": {
											"typeIdentifier": "t_struct$_PresaleStatus_$763_storage_ptr",
											"typeString": "struct Presale.PresaleStatus"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "18856a2f",
									"id": 778,
									"mutability": "mutable",
									"name": "saleInfor",
									"nameLocation": "1509:9:3",
									"nodeType": "VariableDeclaration",
									"scope": 1270,
									"src": "1492:26:3",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_struct$_SaleInfor_$734_storage",
										"typeString": "struct Presale.SaleInfor"
									},
									"typeName": {
										"id": 777,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 776,
											"name": "SaleInfor",
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 734,
											"src": "1492:9:3"
										},
										"referencedDeclaration": 734,
										"src": "1492:9:3",
										"typeDescriptions": {
											"typeIdentifier": "t_struct$_SaleInfor_$734_storage_ptr",
											"typeString": "struct Presale.SaleInfor"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "ad5c4648",
									"id": 781,
									"mutability": "mutable",
									"name": "WETH",
									"nameLocation": "1539:4:3",
									"nodeType": "VariableDeclaration",
									"scope": 1270,
									"src": "1525:18:3",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_contract$_IERC20_$663",
										"typeString": "contract IERC20"
									},
									"typeName": {
										"id": 780,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 779,
											"name": "IERC20",
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 663,
											"src": "1525:6:3"
										},
										"referencedDeclaration": 663,
										"src": "1525:6:3",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IERC20_$663",
											"typeString": "contract IERC20"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "3b5ef2ad",
									"id": 783,
									"mutability": "mutable",
									"name": "feeAnyone",
									"nameLocation": "1565:9:3",
									"nodeType": "VariableDeclaration",
									"scope": 1270,
									"src": "1550:24:3",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 782,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1550:7:3",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"id": 786,
									"mutability": "mutable",
									"name": "admins",
									"nameLocation": "1614:6:3",
									"nodeType": "VariableDeclaration",
									"scope": 1270,
									"src": "1581:39:3",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_struct$_AddressSet_$1604_storage",
										"typeString": "struct EnumerableSet.AddressSet"
									},
									"typeName": {
										"id": 785,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 784,
											"name": "EnumerableSet.AddressSet",
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 1604,
											"src": "1581:24:3"
										},
										"referencedDeclaration": 1604,
										"src": "1581:24:3",
										"typeDescriptions": {
											"typeIdentifier": "t_struct$_AddressSet_$1604_storage_ptr",
											"typeString": "struct EnumerableSet.AddressSet"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"functionSelector": "1df4ccfc",
									"id": 788,
									"mutability": "mutable",
									"name": "totalFee",
									"nameLocation": "1643:8:3",
									"nodeType": "VariableDeclaration",
									"scope": 1270,
									"src": "1628:23:3",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 787,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1628:7:3",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "public"
								},
								{
									"body": {
										"id": 800,
										"nodeType": "Block",
										"src": "1681:82:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"arguments": [],
																	"expression": {
																		"argumentTypes": [],
																		"id": 793,
																		"name": "_msgSender",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1282,
																		"src": "1716:10:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																			"typeString": "function () view returns (address)"
																		}
																	},
																	"id": 794,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "1716:12:3",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"expression": {
																	"id": 791,
																	"name": "admins",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 786,
																	"src": "1700:6:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_AddressSet_$1604_storage",
																		"typeString": "struct EnumerableSet.AddressSet storage ref"
																	}
																},
																"id": 792,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "contains",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 1685,
																"src": "1700:15:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$_t_struct$_AddressSet_$1604_storage_ptr_$_t_address_$returns$_t_bool_$bound_to$_t_struct$_AddressSet_$1604_storage_ptr_$",
																	"typeString": "function (struct EnumerableSet.AddressSet storage pointer,address) view returns (bool)"
																}
															},
															"id": 795,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1700:29:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4e6f742061646d696e",
															"id": 796,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1731:11:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_fa7e120cf98867f00c0ac28b387a73caec64b93b1889065f7b4c5e5232c0bad6",
																"typeString": "literal_string \"Not admin\""
															},
															"value": "Not admin"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_fa7e120cf98867f00c0ac28b387a73caec64b93b1889065f7b4c5e5232c0bad6",
																"typeString": "literal_string \"Not admin\""
															}
														],
														"id": 790,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1692:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 797,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1692:51:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 798,
												"nodeType": "ExpressionStatement",
												"src": "1692:51:3"
											},
											{
												"id": 799,
												"nodeType": "PlaceholderStatement",
												"src": "1754:1:3"
											}
										]
									},
									"id": 801,
									"name": "onlyAdmin",
									"nameLocation": "1669:9:3",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 789,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1678:2:3"
									},
									"src": "1660:103:3",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 813,
										"nodeType": "Block",
										"src": "1796:96:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 808,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 804,
																	"name": "_msgSender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1282,
																	"src": "1815:10:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																		"typeString": "function () view returns (address)"
																	}
																},
																"id": 805,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1815:12:3",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"expression": {
																	"id": 806,
																	"name": "saleInfor",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 778,
																	"src": "1831:9:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_SaleInfor_$734_storage",
																		"typeString": "struct Presale.SaleInfor storage ref"
																	}
																},
																"id": 807,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "presaleOwner",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 709,
																"src": "1831:22:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"src": "1815:38:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4e6f742073616c65206f776e6572",
															"id": 809,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1855:16:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_d260997bd85ce88e5fe3a090aa0509f0362655b7ef85530ca7ca41b7767ad72f",
																"typeString": "literal_string \"Not sale owner\""
															},
															"value": "Not sale owner"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_d260997bd85ce88e5fe3a090aa0509f0362655b7ef85530ca7ca41b7767ad72f",
																"typeString": "literal_string \"Not sale owner\""
															}
														],
														"id": 803,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1807:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 810,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1807:65:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 811,
												"nodeType": "ExpressionStatement",
												"src": "1807:65:3"
											},
											{
												"id": 812,
												"nodeType": "PlaceholderStatement",
												"src": "1883:1:3"
											}
										]
									},
									"id": 814,
									"name": "onlySaleOwner",
									"nameLocation": "1780:13:3",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 802,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1793:2:3"
									},
									"src": "1771:121:3",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 839,
										"nodeType": "Block",
										"src": "1922:230:3",
										"statements": [
											{
												"expression": {
													"id": 821,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 817,
														"name": "WETH",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 781,
														"src": "1933:4:3",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IERC20_$663",
															"typeString": "contract IERC20"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"hexValue": "307863373738343137453036333134313133394663653031303938323738303134304161306344354162",
																"id": 819,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1946:42:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																},
																"value": "0xc778417E063141139Fce010982780140Aa0cD5Ab"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															],
															"id": 818,
															"name": "ERC20",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 585,
															"src": "1940:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_ERC20_$585_$",
																"typeString": "type(contract ERC20)"
															}
														},
														"id": 820,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1940:49:3",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_ERC20_$585",
															"typeString": "contract ERC20"
														}
													},
													"src": "1933:56:3",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$663",
														"typeString": "contract IERC20"
													}
												},
												"id": 822,
												"nodeType": "ExpressionStatement",
												"src": "1933:56:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"hexValue": "307836436362343165656441356130373330373646334537644331363134433138356235664134316544",
															"id": 826,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2011:42:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"value": "0x6Ccb41eedA5a073076F3E7dC1614C185b5fA41eD"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"expression": {
															"id": 823,
															"name": "admins",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 786,
															"src": "2000:6:3",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_AddressSet_$1604_storage",
																"typeString": "struct EnumerableSet.AddressSet storage ref"
															}
														},
														"id": 825,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "add",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1631,
														"src": "2000:10:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_struct$_AddressSet_$1604_storage_ptr_$_t_address_$returns$_t_bool_$bound_to$_t_struct$_AddressSet_$1604_storage_ptr_$",
															"typeString": "function (struct EnumerableSet.AddressSet storage pointer,address) returns (bool)"
														}
													},
													"id": 827,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2000:54:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 828,
												"nodeType": "ExpressionStatement",
												"src": "2000:54:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"hexValue": "307834663042313262424634304663313832353539383232413562316442364433346462433345303136",
															"id": 832,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2076:42:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"value": "0x4f0B12bBF40Fc182559822A5b1dB6D34dbC3E016"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"expression": {
															"id": 829,
															"name": "admins",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 786,
															"src": "2065:6:3",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_AddressSet_$1604_storage",
																"typeString": "struct EnumerableSet.AddressSet storage ref"
															}
														},
														"id": 831,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "add",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1631,
														"src": "2065:10:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_struct$_AddressSet_$1604_storage_ptr_$_t_address_$returns$_t_bool_$bound_to$_t_struct$_AddressSet_$1604_storage_ptr_$",
															"typeString": "function (struct EnumerableSet.AddressSet storage pointer,address) returns (bool)"
														}
													},
													"id": 833,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2065:54:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 834,
												"nodeType": "ExpressionStatement",
												"src": "2065:54:3"
											},
											{
												"expression": {
													"id": 837,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 835,
														"name": "feeAnyone",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 783,
														"src": "2130:9:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "3230",
														"id": 836,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2142:2:3",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_20_by_1",
															"typeString": "int_const 20"
														},
														"value": "20"
													},
													"src": "2130:14:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 838,
												"nodeType": "ExpressionStatement",
												"src": "2130:14:3"
											}
										]
									},
									"id": 840,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 815,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1911:2:3"
									},
									"returnParameters": {
										"id": 816,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1922:0:3"
									},
									"scope": 1270,
									"src": "1900:252:3",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 979,
										"nodeType": "Block",
										"src": "2330:722:3",
										"statements": [
											{
												"expression": {
													"id": 859,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 855,
															"name": "saleInfor",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 778,
															"src": "2341:9:3",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_SaleInfor_$734_storage",
																"typeString": "struct Presale.SaleInfor storage ref"
															}
														},
														"id": 857,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "presaleOwner",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 709,
														"src": "2341:22:3",
														"typeDescriptions": {
															"typeIdentifier": "t_address_payable",
															"typeString": "address payable"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 858,
														"name": "_presaleOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 842,
														"src": "2366:13:3",
														"typeDescriptions": {
															"typeIdentifier": "t_address_payable",
															"typeString": "address payable"
														}
													},
													"src": "2341:38:3",
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"id": 860,
												"nodeType": "ExpressionStatement",
												"src": "2341:38:3"
											},
											{
												"expression": {
													"id": 865,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 861,
															"name": "saleInfor",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 778,
															"src": "2390:9:3",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_SaleInfor_$734_storage",
																"typeString": "struct Presale.SaleInfor storage ref"
															}
														},
														"id": 863,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "saleToken",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 712,
														"src": "2390:19:3",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_ERC20_$585",
															"typeString": "contract ERC20"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 864,
														"name": "_saleToken",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 845,
														"src": "2412:10:3",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_ERC20_$585",
															"typeString": "contract ERC20"
														}
													},
													"src": "2390:32:3",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ERC20_$585",
														"typeString": "contract ERC20"
													}
												},
												"id": 866,
												"nodeType": "ExpressionStatement",
												"src": "2390:32:3"
											},
											{
												"expression": {
													"id": 871,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 867,
															"name": "saleInfor",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 778,
															"src": "2433:9:3",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_SaleInfor_$734_storage",
																"typeString": "struct Presale.SaleInfor storage ref"
															}
														},
														"id": 869,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "baseToken",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 715,
														"src": "2433:19:3",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_ERC20_$585",
															"typeString": "contract ERC20"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 870,
														"name": "_baseTOken",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 848,
														"src": "2455:10:3",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_ERC20_$585",
															"typeString": "contract ERC20"
														}
													},
													"src": "2433:32:3",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ERC20_$585",
														"typeString": "contract ERC20"
													}
												},
												"id": 872,
												"nodeType": "ExpressionStatement",
												"src": "2433:32:3"
											},
											{
												"expression": {
													"id": 891,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 873,
															"name": "saleInfor",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 778,
															"src": "2476:9:3",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_SaleInfor_$734_storage",
																"typeString": "struct Presale.SaleInfor storage ref"
															}
														},
														"id": 875,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "tokenPrice",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 717,
														"src": "2476:20:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 890,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"baseExpression": {
																"id": 876,
																"name": "datas",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 852,
																"src": "2499:5:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_array$_t_uint256_$7_memory_ptr",
																	"typeString": "uint256[7] memory"
																}
															},
															"id": 878,
															"indexExpression": {
																"hexValue": "30",
																"id": 877,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2505:1:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "2499:8:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "*",
														"rightExpression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 889,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"hexValue": "3130",
																"id": 879,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2510:2:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_10_by_1",
																	"typeString": "int_const 10"
																},
																"value": "10"
															},
															"nodeType": "BinaryOperation",
															"operator": "**",
															"rightExpression": {
																"arguments": [
																	{
																		"arguments": [],
																		"expression": {
																			"argumentTypes": [],
																			"expression": {
																				"arguments": [
																					{
																						"expression": {
																							"id": 883,
																							"name": "saleInfor",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 778,
																							"src": "2529:9:3",
																							"typeDescriptions": {
																								"typeIdentifier": "t_struct$_SaleInfor_$734_storage",
																								"typeString": "struct Presale.SaleInfor storage ref"
																							}
																						},
																						"id": 884,
																						"isConstant": false,
																						"isLValue": true,
																						"isPure": false,
																						"lValueRequested": false,
																						"memberName": "saleToken",
																						"nodeType": "MemberAccess",
																						"referencedDeclaration": 712,
																						"src": "2529:19:3",
																						"typeDescriptions": {
																							"typeIdentifier": "t_contract$_ERC20_$585",
																							"typeString": "contract ERC20"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_contract$_ERC20_$585",
																							"typeString": "contract ERC20"
																						}
																					],
																					"id": 882,
																					"name": "ERC20",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 585,
																					"src": "2523:5:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_contract$_ERC20_$585_$",
																						"typeString": "type(contract ERC20)"
																					}
																				},
																				"id": 885,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "typeConversion",
																				"lValueRequested": false,
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "2523:26:3",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_contract$_ERC20_$585",
																					"typeString": "contract ERC20"
																				}
																			},
																			"id": 886,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberName": "decimals",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 74,
																			"src": "2523:35:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_external_view$__$returns$_t_uint256_$",
																				"typeString": "function () view external returns (uint256)"
																			}
																		},
																		"id": 887,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "2523:37:3",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 881,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "2515:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint256_$",
																		"typeString": "type(uint256)"
																	},
																	"typeName": {
																		"id": 880,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "2515:7:3",
																		"typeDescriptions": {}
																	}
																},
																"id": 888,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2515:46:3",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2510:51:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "2499:62:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2476:85:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 892,
												"nodeType": "ExpressionStatement",
												"src": "2476:85:3"
											},
											{
												"expression": {
													"id": 899,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 893,
															"name": "saleInfor",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 778,
															"src": "2572:9:3",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_SaleInfor_$734_storage",
																"typeString": "struct Presale.SaleInfor storage ref"
															}
														},
														"id": 895,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "startSale",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 719,
														"src": "2572:19:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"baseExpression": {
															"id": 896,
															"name": "datas",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 852,
															"src": "2594:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_uint256_$7_memory_ptr",
																"typeString": "uint256[7] memory"
															}
														},
														"id": 898,
														"indexExpression": {
															"hexValue": "31",
															"id": 897,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2600:1:3",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "2594:8:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2572:30:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 900,
												"nodeType": "ExpressionStatement",
												"src": "2572:30:3"
											},
											{
												"expression": {
													"id": 907,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 901,
															"name": "saleInfor",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 778,
															"src": "2613:9:3",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_SaleInfor_$734_storage",
																"typeString": "struct Presale.SaleInfor storage ref"
															}
														},
														"id": 903,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "endSale",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 721,
														"src": "2613:17:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"baseExpression": {
															"id": 904,
															"name": "datas",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 852,
															"src": "2633:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_uint256_$7_memory_ptr",
																"typeString": "uint256[7] memory"
															}
														},
														"id": 906,
														"indexExpression": {
															"hexValue": "32",
															"id": 905,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2639:1:3",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_2_by_1",
																"typeString": "int_const 2"
															},
															"value": "2"
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "2633:8:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2613:28:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 908,
												"nodeType": "ExpressionStatement",
												"src": "2613:28:3"
											},
											{
												"expression": {
													"id": 915,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 909,
															"name": "saleInfor",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 778,
															"src": "2652:9:3",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_SaleInfor_$734_storage",
																"typeString": "struct Presale.SaleInfor storage ref"
															}
														},
														"id": 911,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "minSpendPerBuyer",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 723,
														"src": "2652:26:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"baseExpression": {
															"id": 912,
															"name": "datas",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 852,
															"src": "2681:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_uint256_$7_memory_ptr",
																"typeString": "uint256[7] memory"
															}
														},
														"id": 914,
														"indexExpression": {
															"hexValue": "33",
															"id": 913,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2687:1:3",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_3_by_1",
																"typeString": "int_const 3"
															},
															"value": "3"
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "2681:8:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2652:37:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 916,
												"nodeType": "ExpressionStatement",
												"src": "2652:37:3"
											},
											{
												"expression": {
													"id": 935,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 917,
															"name": "saleInfor",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 778,
															"src": "2700:9:3",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_SaleInfor_$734_storage",
																"typeString": "struct Presale.SaleInfor storage ref"
															}
														},
														"id": 919,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "maxSpendPerBuyer",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 725,
														"src": "2700:26:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 934,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"baseExpression": {
																"id": 920,
																"name": "datas",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 852,
																"src": "2729:5:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_array$_t_uint256_$7_memory_ptr",
																	"typeString": "uint256[7] memory"
																}
															},
															"id": 922,
															"indexExpression": {
																"hexValue": "34",
																"id": 921,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2735:1:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_4_by_1",
																	"typeString": "int_const 4"
																},
																"value": "4"
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "2729:8:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "*",
														"rightExpression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 933,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"hexValue": "3130",
																"id": 923,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2740:2:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_10_by_1",
																	"typeString": "int_const 10"
																},
																"value": "10"
															},
															"nodeType": "BinaryOperation",
															"operator": "**",
															"rightExpression": {
																"arguments": [
																	{
																		"arguments": [],
																		"expression": {
																			"argumentTypes": [],
																			"expression": {
																				"arguments": [
																					{
																						"expression": {
																							"id": 927,
																							"name": "saleInfor",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 778,
																							"src": "2759:9:3",
																							"typeDescriptions": {
																								"typeIdentifier": "t_struct$_SaleInfor_$734_storage",
																								"typeString": "struct Presale.SaleInfor storage ref"
																							}
																						},
																						"id": 928,
																						"isConstant": false,
																						"isLValue": true,
																						"isPure": false,
																						"lValueRequested": false,
																						"memberName": "baseToken",
																						"nodeType": "MemberAccess",
																						"referencedDeclaration": 715,
																						"src": "2759:19:3",
																						"typeDescriptions": {
																							"typeIdentifier": "t_contract$_ERC20_$585",
																							"typeString": "contract ERC20"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_contract$_ERC20_$585",
																							"typeString": "contract ERC20"
																						}
																					],
																					"id": 926,
																					"name": "ERC20",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 585,
																					"src": "2753:5:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_contract$_ERC20_$585_$",
																						"typeString": "type(contract ERC20)"
																					}
																				},
																				"id": 929,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "typeConversion",
																				"lValueRequested": false,
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "2753:26:3",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_contract$_ERC20_$585",
																					"typeString": "contract ERC20"
																				}
																			},
																			"id": 930,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberName": "decimals",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 74,
																			"src": "2753:35:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_external_view$__$returns$_t_uint256_$",
																				"typeString": "function () view external returns (uint256)"
																			}
																		},
																		"id": 931,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "2753:37:3",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 925,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "2745:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint256_$",
																		"typeString": "type(uint256)"
																	},
																	"typeName": {
																		"id": 924,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "2745:7:3",
																		"typeDescriptions": {}
																	}
																},
																"id": 932,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2745:46:3",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2740:51:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "2729:62:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2700:91:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 936,
												"nodeType": "ExpressionStatement",
												"src": "2700:91:3"
											},
											{
												"expression": {
													"id": 943,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 937,
															"name": "saleInfor",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 778,
															"src": "2802:9:3",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_SaleInfor_$734_storage",
																"typeString": "struct Presale.SaleInfor storage ref"
															}
														},
														"id": 939,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "refundFee",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 727,
														"src": "2802:19:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"baseExpression": {
															"id": 940,
															"name": "datas",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 852,
															"src": "2824:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_uint256_$7_memory_ptr",
																"typeString": "uint256[7] memory"
															}
														},
														"id": 942,
														"indexExpression": {
															"hexValue": "35",
															"id": 941,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2830:1:3",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_5_by_1",
																"typeString": "int_const 5"
															},
															"value": "5"
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "2824:8:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2802:30:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 944,
												"nodeType": "ExpressionStatement",
												"src": "2802:30:3"
											},
											{
												"expression": {
													"id": 951,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 945,
															"name": "saleInfor",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 778,
															"src": "2843:9:3",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_SaleInfor_$734_storage",
																"typeString": "struct Presale.SaleInfor storage ref"
															}
														},
														"id": 947,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "claimFee",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 729,
														"src": "2843:18:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"baseExpression": {
															"id": 948,
															"name": "datas",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 852,
															"src": "2864:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_uint256_$7_memory_ptr",
																"typeString": "uint256[7] memory"
															}
														},
														"id": 950,
														"indexExpression": {
															"hexValue": "36",
															"id": 949,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2870:1:3",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_6_by_1",
																"typeString": "int_const 6"
															},
															"value": "6"
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "2864:8:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2843:29:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 952,
												"nodeType": "ExpressionStatement",
												"src": "2843:29:3"
											},
											{
												"expression": {
													"id": 966,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 953,
															"name": "saleInfor",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 778,
															"src": "2883:9:3",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_SaleInfor_$734_storage",
																"typeString": "struct Presale.SaleInfor storage ref"
															}
														},
														"id": 955,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "saleIsBaseToken",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 731,
														"src": "2883:25:3",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"commonType": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"id": 965,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"arguments": [
																{
																	"id": 958,
																	"name": "WETH",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 781,
																	"src": "2919:4:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$663",
																		"typeString": "contract IERC20"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_IERC20_$663",
																		"typeString": "contract IERC20"
																	}
																],
																"id": 957,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "2911:7:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 956,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "2911:7:3",
																	"typeDescriptions": {}
																}
															},
															"id": 959,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2911:13:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"arguments": [
																{
																	"expression": {
																		"id": 962,
																		"name": "saleInfor",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 778,
																		"src": "2936:9:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_SaleInfor_$734_storage",
																			"typeString": "struct Presale.SaleInfor storage ref"
																		}
																	},
																	"id": 963,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "baseToken",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 715,
																	"src": "2936:19:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_ERC20_$585",
																		"typeString": "contract ERC20"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_ERC20_$585",
																		"typeString": "contract ERC20"
																	}
																],
																"id": 961,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "2928:7:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 960,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "2928:7:3",
																	"typeDescriptions": {}
																}
															},
															"id": 964,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2928:28:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"src": "2911:45:3",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "2883:73:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 967,
												"nodeType": "ExpressionStatement",
												"src": "2883:73:3"
											},
											{
												"expression": {
													"id": 977,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 968,
															"name": "saleInfor",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 778,
															"src": "2967:9:3",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_SaleInfor_$734_storage",
																"typeString": "struct Presale.SaleInfor storage ref"
															}
														},
														"id": 970,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "amountTokenForSale",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 733,
														"src": "2967:28:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"expression": {
																	"id": 974,
																	"name": "saleInfor",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 778,
																	"src": "3023:9:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_SaleInfor_$734_storage",
																		"typeString": "struct Presale.SaleInfor storage ref"
																	}
																},
																"id": 975,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "tokenPrice",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 717,
																"src": "3023:20:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"expression": {
																"expression": {
																	"id": 971,
																	"name": "saleInfor",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 778,
																	"src": "2998:9:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_SaleInfor_$734_storage",
																		"typeString": "struct Presale.SaleInfor storage ref"
																	}
																},
																"id": 972,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "tokenPrice",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 717,
																"src": "2998:20:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 973,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "mul",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 2242,
															"src": "2998:24:3",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																"typeString": "function (uint256,uint256) pure returns (uint256)"
															}
														},
														"id": 976,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2998:46:3",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2967:77:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 978,
												"nodeType": "ExpressionStatement",
												"src": "2967:77:3"
											}
										]
									},
									"functionSelector": "61e17655",
									"id": 980,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "initialSaleInfor",
									"nameLocation": "2169:16:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 853,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 842,
												"mutability": "mutable",
												"name": "_presaleOwner",
												"nameLocation": "2212:13:3",
												"nodeType": "VariableDeclaration",
												"scope": 980,
												"src": "2196:29:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address_payable",
													"typeString": "address payable"
												},
												"typeName": {
													"id": 841,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2196:15:3",
													"stateMutability": "payable",
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 845,
												"mutability": "mutable",
												"name": "_saleToken",
												"nameLocation": "2242:10:3",
												"nodeType": "VariableDeclaration",
												"scope": 980,
												"src": "2236:16:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ERC20_$585",
													"typeString": "contract ERC20"
												},
												"typeName": {
													"id": 844,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 843,
														"name": "ERC20",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 585,
														"src": "2236:5:3"
													},
													"referencedDeclaration": 585,
													"src": "2236:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ERC20_$585",
														"typeString": "contract ERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 848,
												"mutability": "mutable",
												"name": "_baseTOken",
												"nameLocation": "2269:10:3",
												"nodeType": "VariableDeclaration",
												"scope": 980,
												"src": "2263:16:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ERC20_$585",
													"typeString": "contract ERC20"
												},
												"typeName": {
													"id": 847,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 846,
														"name": "ERC20",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 585,
														"src": "2263:5:3"
													},
													"referencedDeclaration": 585,
													"src": "2263:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ERC20_$585",
														"typeString": "contract ERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 852,
												"mutability": "mutable",
												"name": "datas",
												"nameLocation": "2308:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 980,
												"src": "2290:23:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$7_memory_ptr",
													"typeString": "uint256[7]"
												},
												"typeName": {
													"baseType": {
														"id": 849,
														"name": "uint256",
														"nodeType": "ElementaryTypeName",
														"src": "2290:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 851,
													"length": {
														"hexValue": "37",
														"id": 850,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2298:1:3",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_7_by_1",
															"typeString": "int_const 7"
														},
														"value": "7"
													},
													"nodeType": "ArrayTypeName",
													"src": "2290:10:3",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$7_storage_ptr",
														"typeString": "uint256[7]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2185:135:3"
									},
									"returnParameters": {
										"id": 854,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2330:0:3"
									},
									"scope": 1270,
									"src": "2160:892:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1007,
										"nodeType": "Block",
										"src": "3108:290:3",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 989,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 985,
															"name": "block",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967292,
															"src": "3122:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_block",
																"typeString": "block"
															}
														},
														"id": 986,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "timestamp",
														"nodeType": "MemberAccess",
														"src": "3122:15:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"expression": {
															"id": 987,
															"name": "saleInfor",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 778,
															"src": "3140:9:3",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_SaleInfor_$734_storage",
																"typeString": "struct Presale.SaleInfor storage ref"
															}
														},
														"id": 988,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "startSale",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 719,
														"src": "3140:19:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3122:37:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 1005,
													"nodeType": "Block",
													"src": "3214:177:3",
													"statements": [
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 997,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"expression": {
																		"id": 993,
																		"name": "block",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967292,
																		"src": "3232:5:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_block",
																			"typeString": "block"
																		}
																	},
																	"id": 994,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "timestamp",
																	"nodeType": "MemberAccess",
																	"src": "3232:15:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">",
																"rightExpression": {
																	"expression": {
																		"id": 995,
																		"name": "saleInfor",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 778,
																		"src": "3250:9:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_SaleInfor_$734_storage",
																			"typeString": "struct Presale.SaleInfor storage ref"
																		}
																	},
																	"id": 996,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "endSale",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 721,
																	"src": "3250:17:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "3232:35:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"falseBody": {
																"id": 1003,
																"nodeType": "Block",
																"src": "3327:53:3",
																"statements": [
																	{
																		"expression": {
																			"hexValue": "31",
																			"id": 1001,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "3353:1:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"functionReturnParameters": 984,
																		"id": 1002,
																		"nodeType": "Return",
																		"src": "3346:8:3"
																	}
																]
															},
															"id": 1004,
															"nodeType": "IfStatement",
															"src": "3229:151:3",
															"trueBody": {
																"id": 1000,
																"nodeType": "Block",
																"src": "3269:54:3",
																"statements": [
																	{
																		"expression": {
																			"hexValue": "32",
																			"id": 998,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "3295:1:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_2_by_1",
																				"typeString": "int_const 2"
																			},
																			"value": "2"
																		},
																		"functionReturnParameters": 984,
																		"id": 999,
																		"nodeType": "Return",
																		"src": "3288:8:3"
																	}
																]
															}
														}
													]
												},
												"id": 1006,
												"nodeType": "IfStatement",
												"src": "3119:272:3",
												"trueBody": {
													"id": 992,
													"nodeType": "Block",
													"src": "3161:49:3",
													"statements": [
														{
															"expression": {
																"hexValue": "30",
																"id": 990,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "3183:1:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"functionReturnParameters": 984,
															"id": 991,
															"nodeType": "Return",
															"src": "3176:8:3"
														}
													]
												}
											}
										]
									},
									"functionSelector": "200d2ed2",
									"id": 1008,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "status",
									"nameLocation": "3070:6:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 981,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3076:2:3"
									},
									"returnParameters": {
										"id": 984,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 983,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1008,
												"src": "3099:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 982,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3099:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3098:9:3"
									},
									"scope": 1270,
									"src": "3061:337:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1019,
										"nodeType": "Block",
										"src": "3462:55:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 1015,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1282,
																"src": "3496:10:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 1016,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3496:12:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"expression": {
															"id": 1013,
															"name": "admins",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 786,
															"src": "3480:6:3",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_AddressSet_$1604_storage",
																"typeString": "struct EnumerableSet.AddressSet storage ref"
															}
														},
														"id": 1014,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "contains",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1685,
														"src": "3480:15:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_struct$_AddressSet_$1604_storage_ptr_$_t_address_$returns$_t_bool_$bound_to$_t_struct$_AddressSet_$1604_storage_ptr_$",
															"typeString": "function (struct EnumerableSet.AddressSet storage pointer,address) view returns (bool)"
														}
													},
													"id": 1017,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3480:29:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 1012,
												"id": 1018,
												"nodeType": "Return",
												"src": "3473:36:3"
											}
										]
									},
									"functionSelector": "cad5b0f7",
									"id": 1020,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "checkAdminAddress",
									"nameLocation": "3416:17:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1009,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3433:2:3"
									},
									"returnParameters": {
										"id": 1012,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1011,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1020,
												"src": "3456:4:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1010,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "3456:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3455:6:3"
									},
									"scope": 1270,
									"src": "3407:110:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1222,
										"nodeType": "Block",
										"src": "3589:1802:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1031,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 1028,
																	"name": "status",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1008,
																	"src": "3608:6:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
																		"typeString": "function () view returns (uint256)"
																	}
																},
																"id": 1029,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3608:8:3",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "31",
																"id": 1030,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "3620:1:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1_by_1",
																	"typeString": "int_const 1"
																},
																"value": "1"
															},
															"src": "3608:13:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4e6f7420616374697665",
															"id": 1032,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3623:12:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_4f4071cacb98a73fb0fb3325a9a9a07b87a20a90340fd79a56fa9441c16f3367",
																"typeString": "literal_string \"Not active\""
															},
															"value": "Not active"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_4f4071cacb98a73fb0fb3325a9a9a07b87a20a90340fd79a56fa9441c16f3367",
																"typeString": "literal_string \"Not active\""
															}
														],
														"id": 1027,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "3600:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1033,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3600:36:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1034,
												"nodeType": "ExpressionStatement",
												"src": "3600:36:3"
											},
											{
												"assignments": [
													1037
												],
												"declarations": [
													{
														"constant": false,
														"id": 1037,
														"mutability": "mutable",
														"name": "buyer",
														"nameLocation": "3675:5:3",
														"nodeType": "VariableDeclaration",
														"scope": 1222,
														"src": "3657:23:3",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_BuyerInfo_$747_storage_ptr",
															"typeString": "struct Presale.BuyerInfo"
														},
														"typeName": {
															"id": 1036,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 1035,
																"name": "BuyerInfo",
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 747,
																"src": "3657:9:3"
															},
															"referencedDeclaration": 747,
															"src": "3657:9:3",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_BuyerInfo_$747_storage_ptr",
																"typeString": "struct Presale.BuyerInfo"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1042,
												"initialValue": {
													"baseExpression": {
														"id": 1038,
														"name": "buyerInfo",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 768,
														"src": "3683:9:3",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_struct$_BuyerInfo_$747_storage_$",
															"typeString": "mapping(address => struct Presale.BuyerInfo storage ref)"
														}
													},
													"id": 1041,
													"indexExpression": {
														"expression": {
															"id": 1039,
															"name": "msg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967281,
															"src": "3693:3:3",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_message",
																"typeString": "msg"
															}
														},
														"id": 1040,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "sender",
														"nodeType": "MemberAccess",
														"src": "3693:10:3",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "3683:21:3",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_BuyerInfo_$747_storage",
														"typeString": "struct Presale.BuyerInfo storage ref"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3657:47:3"
											},
											{
												"assignments": [
													1044
												],
												"declarations": [
													{
														"constant": false,
														"id": 1044,
														"mutability": "mutable",
														"name": "amount_in",
														"nameLocation": "3723:9:3",
														"nodeType": "VariableDeclaration",
														"scope": 1222,
														"src": "3715:17:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1043,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "3715:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1046,
												"initialValue": {
													"id": 1045,
													"name": "_amount",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1022,
													"src": "3735:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3715:27:3"
											},
											{
												"assignments": [
													1048
												],
												"declarations": [
													{
														"constant": false,
														"id": 1048,
														"mutability": "mutable",
														"name": "real_amount_in",
														"nameLocation": "3761:14:3",
														"nodeType": "VariableDeclaration",
														"scope": 1222,
														"src": "3753:22:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1047,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "3753:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1050,
												"initialValue": {
													"id": 1049,
													"name": "amount_in",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1044,
													"src": "3778:9:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3753:34:3"
											},
											{
												"assignments": [
													1052
												],
												"declarations": [
													{
														"constant": false,
														"id": 1052,
														"mutability": "mutable",
														"name": "fee",
														"nameLocation": "3806:3:3",
														"nodeType": "VariableDeclaration",
														"scope": 1222,
														"src": "3798:11:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1051,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "3798:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1054,
												"initialValue": {
													"hexValue": "30",
													"id": 1053,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "3812:1:3",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3798:15:3"
											},
											{
												"assignments": [
													1056
												],
												"declarations": [
													{
														"constant": false,
														"id": 1056,
														"mutability": "mutable",
														"name": "fullPercenFee",
														"nameLocation": "3832:13:3",
														"nodeType": "VariableDeclaration",
														"scope": 1222,
														"src": "3824:21:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1055,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "3824:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1058,
												"initialValue": {
													"hexValue": "31303030",
													"id": 1057,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "3848:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_1000_by_1",
														"typeString": "int_const 1000"
													},
													"value": "1000"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3824:28:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1063,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1060,
																"name": "real_amount_in",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1048,
																"src": "3871:14:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"expression": {
																	"id": 1061,
																	"name": "saleInfor",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 778,
																	"src": "3889:9:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_SaleInfor_$734_storage",
																		"typeString": "struct Presale.SaleInfor storage ref"
																	}
																},
																"id": 1062,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "minSpendPerBuyer",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 723,
																"src": "3889:26:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "3871:44:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4e6f7420656e6f7567682076616c7565",
															"id": 1064,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3935:18:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_8254a19c2218e87bd65e7d451e5bbd6df57ba9f73035118b8f47be7b5659ddde",
																"typeString": "literal_string \"Not enough value\""
															},
															"value": "Not enough value"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_8254a19c2218e87bd65e7d451e5bbd6df57ba9f73035118b8f47be7b5659ddde",
																"typeString": "literal_string \"Not enough value\""
															}
														],
														"id": 1059,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "3863:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1065,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3863:101:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1066,
												"nodeType": "ExpressionStatement",
												"src": "3863:101:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1071,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1068,
																"name": "real_amount_in",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1048,
																"src": "3983:14:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<=",
															"rightExpression": {
																"expression": {
																	"id": 1069,
																	"name": "saleInfor",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 778,
																	"src": "4001:9:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_SaleInfor_$734_storage",
																		"typeString": "struct Presale.SaleInfor storage ref"
																	}
																},
																"id": 1070,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "maxSpendPerBuyer",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 725,
																"src": "4001:26:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "3983:44:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4f766572666c6f772076616c7565",
															"id": 1072,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4047:16:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_48cc793e3ea877d6bf034b11f4c6d0d583dd24a0f1374daf495701b65f42f81c",
																"typeString": "literal_string \"Overflow value\""
															},
															"value": "Overflow value"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_48cc793e3ea877d6bf034b11f4c6d0d583dd24a0f1374daf495701b65f42f81c",
																"typeString": "literal_string \"Overflow value\""
															}
														],
														"id": 1067,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "3975:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1073,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3975:99:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1074,
												"nodeType": "ExpressionStatement",
												"src": "3975:99:3"
											},
											{
												"condition": {
													"id": 1077,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "!",
													"prefix": true,
													"src": "4088:20:3",
													"subExpression": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 1075,
															"name": "checkAdminAddress",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1020,
															"src": "4089:17:3",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$__$returns$_t_bool_$",
																"typeString": "function () view returns (bool)"
															}
														},
														"id": 1076,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "4089:19:3",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1100,
												"nodeType": "IfStatement",
												"src": "4085:266:3",
												"trueBody": {
													"id": 1099,
													"nodeType": "Block",
													"src": "4110:241:3",
													"statements": [
														{
															"expression": {
																"id": 1091,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 1078,
																	"name": "real_amount_in",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1048,
																	"src": "4125:14:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"arguments": [
																		{
																			"id": 1089,
																			"name": "fullPercenFee",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1056,
																			"src": "4261:13:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"expression": {
																			"components": [
																				{
																					"arguments": [
																						{
																							"id": 1085,
																							"name": "real_amount_in",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 1048,
																							"src": "4209:14:3",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						}
																					],
																					"expression": {
																						"argumentTypes": [
																							{
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						],
																						"expression": {
																							"components": [
																								{
																									"arguments": [
																										{
																											"id": 1081,
																											"name": "feeAnyone",
																											"nodeType": "Identifier",
																											"overloadedDeclarations": [],
																											"referencedDeclaration": 783,
																											"src": "4162:9:3",
																											"typeDescriptions": {
																												"typeIdentifier": "t_uint256",
																												"typeString": "uint256"
																											}
																										}
																									],
																									"expression": {
																										"argumentTypes": [
																											{
																												"typeIdentifier": "t_uint256",
																												"typeString": "uint256"
																											}
																										],
																										"expression": {
																											"id": 1079,
																											"name": "fullPercenFee",
																											"nodeType": "Identifier",
																											"overloadedDeclarations": [],
																											"referencedDeclaration": 1056,
																											"src": "4144:13:3",
																											"typeDescriptions": {
																												"typeIdentifier": "t_uint256",
																												"typeString": "uint256"
																											}
																										},
																										"id": 1080,
																										"isConstant": false,
																										"isLValue": false,
																										"isPure": false,
																										"lValueRequested": false,
																										"memberName": "sub",
																										"nodeType": "MemberAccess",
																										"referencedDeclaration": 2227,
																										"src": "4144:17:3",
																										"typeDescriptions": {
																											"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																											"typeString": "function (uint256,uint256) pure returns (uint256)"
																										}
																									},
																									"id": 1082,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": false,
																									"kind": "functionCall",
																									"lValueRequested": false,
																									"names": [],
																									"nodeType": "FunctionCall",
																									"src": "4144:28:3",
																									"tryCall": false,
																									"typeDescriptions": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									}
																								}
																							],
																							"id": 1083,
																							"isConstant": false,
																							"isInlineArray": false,
																							"isLValue": false,
																							"isPure": false,
																							"lValueRequested": false,
																							"nodeType": "TupleExpression",
																							"src": "4143:30:3",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						},
																						"id": 1084,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"memberName": "mul",
																						"nodeType": "MemberAccess",
																						"referencedDeclaration": 2242,
																						"src": "4143:65:3",
																						"typeDescriptions": {
																							"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																							"typeString": "function (uint256,uint256) pure returns (uint256)"
																						}
																					},
																					"id": 1086,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"kind": "functionCall",
																					"lValueRequested": false,
																					"names": [],
																					"nodeType": "FunctionCall",
																					"src": "4143:81:3",
																					"tryCall": false,
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"id": 1087,
																			"isConstant": false,
																			"isInlineArray": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "TupleExpression",
																			"src": "4142:83:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"id": 1088,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "div",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 2257,
																		"src": "4142:118:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																			"typeString": "function (uint256,uint256) pure returns (uint256)"
																		}
																	},
																	"id": 1090,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "4142:133:3",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "4125:150:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1092,
															"nodeType": "ExpressionStatement",
															"src": "4125:150:3"
														},
														{
															"expression": {
																"id": 1097,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 1093,
																	"name": "fee",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1052,
																	"src": "4290:3:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1096,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 1094,
																		"name": "amount_in",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1044,
																		"src": "4296:9:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "-",
																	"rightExpression": {
																		"id": 1095,
																		"name": "real_amount_in",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1048,
																		"src": "4308:14:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "4296:26:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "4290:32:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1098,
															"nodeType": "ExpressionStatement",
															"src": "4290:32:3"
														}
													]
												}
											},
											{
												"assignments": [
													1102
												],
												"declarations": [
													{
														"constant": false,
														"id": 1102,
														"mutability": "mutable",
														"name": "remaining",
														"nameLocation": "4369:9:3",
														"nodeType": "VariableDeclaration",
														"scope": 1222,
														"src": "4361:17:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1101,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "4361:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1108,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1107,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 1103,
															"name": "saleInfor",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 778,
															"src": "4381:9:3",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_SaleInfor_$734_storage",
																"typeString": "struct Presale.SaleInfor storage ref"
															}
														},
														"id": 1104,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "maxSpendPerBuyer",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 725,
														"src": "4381:26:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "-",
													"rightExpression": {
														"expression": {
															"id": 1105,
															"name": "presaleStatus",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 775,
															"src": "4410:13:3",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_PresaleStatus_$763_storage",
																"typeString": "struct Presale.PresaleStatus storage ref"
															}
														},
														"id": 1106,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "totalBaseCollected",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 749,
														"src": "4410:32:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "4381:61:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4361:81:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1112,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1110,
																"name": "remaining",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1102,
																"src": "4461:9:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 1111,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "4473:1:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "4461:13:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "53616c652069732053756363657373",
															"id": 1113,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4476:17:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_84b07dbc51081d888dba4f335791aa8e296b316efa01a63a80a60cc8dbf32b14",
																"typeString": "literal_string \"Sale is Success\""
															},
															"value": "Sale is Success"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_84b07dbc51081d888dba4f335791aa8e296b316efa01a63a80a60cc8dbf32b14",
																"typeString": "literal_string \"Sale is Success\""
															}
														],
														"id": 1109,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "4453:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1114,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4453:41:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1115,
												"nodeType": "ExpressionStatement",
												"src": "4453:41:3"
											},
											{
												"assignments": [
													1117
												],
												"declarations": [
													{
														"constant": false,
														"id": 1117,
														"mutability": "mutable",
														"name": "tokenSold",
														"nameLocation": "4513:9:3",
														"nodeType": "VariableDeclaration",
														"scope": 1222,
														"src": "4505:17:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1116,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "4505:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1137,
												"initialValue": {
													"components": [
														{
															"arguments": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1134,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"hexValue": "3130",
																		"id": 1124,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "4631:2:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_10_by_1",
																			"typeString": "int_const 10"
																		},
																		"value": "10"
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "**",
																	"rightExpression": {
																		"arguments": [
																			{
																				"arguments": [],
																				"expression": {
																					"argumentTypes": [],
																					"expression": {
																						"arguments": [
																							{
																								"expression": {
																									"id": 1128,
																									"name": "saleInfor",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 778,
																									"src": "4651:9:3",
																									"typeDescriptions": {
																										"typeIdentifier": "t_struct$_SaleInfor_$734_storage",
																										"typeString": "struct Presale.SaleInfor storage ref"
																									}
																								},
																								"id": 1129,
																								"isConstant": false,
																								"isLValue": true,
																								"isPure": false,
																								"lValueRequested": false,
																								"memberName": "baseToken",
																								"nodeType": "MemberAccess",
																								"referencedDeclaration": 715,
																								"src": "4651:19:3",
																								"typeDescriptions": {
																									"typeIdentifier": "t_contract$_ERC20_$585",
																									"typeString": "contract ERC20"
																								}
																							}
																						],
																						"expression": {
																							"argumentTypes": [
																								{
																									"typeIdentifier": "t_contract$_ERC20_$585",
																									"typeString": "contract ERC20"
																								}
																							],
																							"id": 1127,
																							"name": "ERC20",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 585,
																							"src": "4645:5:3",
																							"typeDescriptions": {
																								"typeIdentifier": "t_type$_t_contract$_ERC20_$585_$",
																								"typeString": "type(contract ERC20)"
																							}
																						},
																						"id": 1130,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"kind": "typeConversion",
																						"lValueRequested": false,
																						"names": [],
																						"nodeType": "FunctionCall",
																						"src": "4645:26:3",
																						"tryCall": false,
																						"typeDescriptions": {
																							"typeIdentifier": "t_contract$_ERC20_$585",
																							"typeString": "contract ERC20"
																						}
																					},
																					"id": 1131,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"memberName": "decimals",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 74,
																					"src": "4645:35:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_external_view$__$returns$_t_uint256_$",
																						"typeString": "function () view external returns (uint256)"
																					}
																				},
																				"id": 1132,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "4645:37:3",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			],
																			"id": 1126,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "4637:7:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_uint256_$",
																				"typeString": "type(uint256)"
																			},
																			"typeName": {
																				"id": 1125,
																				"name": "uint256",
																				"nodeType": "ElementaryTypeName",
																				"src": "4637:7:3",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 1133,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "4637:46:3",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "4631:52:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"arguments": [
																		{
																			"expression": {
																				"id": 1120,
																				"name": "saleInfor",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 778,
																				"src": "4575:9:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_struct$_SaleInfor_$734_storage",
																					"typeString": "struct Presale.SaleInfor storage ref"
																				}
																			},
																			"id": 1121,
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberName": "tokenPrice",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 717,
																			"src": "4575:20:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"expression": {
																			"id": 1118,
																			"name": "real_amount_in",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1048,
																			"src": "4526:14:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"id": 1119,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "mul",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 2242,
																		"src": "4526:48:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																			"typeString": "function (uint256,uint256) pure returns (uint256)"
																		}
																	},
																	"id": 1122,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "4526:70:3",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"id": 1123,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "div",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2257,
																"src": "4526:104:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																	"typeString": "function (uint256,uint256) pure returns (uint256)"
																}
															},
															"id": 1135,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4526:158:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"id": 1136,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "4525:160:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4505:180:3"
											},
											{
												"expression": {
													"id": 1142,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 1138,
															"name": "buyer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1037,
															"src": "4696:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_BuyerInfo_$747_storage_ptr",
																"typeString": "struct Presale.BuyerInfo storage pointer"
															}
														},
														"id": 1140,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "baseDeposit",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 736,
														"src": "4696:17:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"id": 1141,
														"name": "amount_in",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1044,
														"src": "4717:9:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "4696:30:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1143,
												"nodeType": "ExpressionStatement",
												"src": "4696:30:3"
											},
											{
												"expression": {
													"id": 1148,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 1144,
															"name": "buyer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1037,
															"src": "4737:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_BuyerInfo_$747_storage_ptr",
																"typeString": "struct Presale.BuyerInfo storage pointer"
															}
														},
														"id": 1146,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "tokenOwner",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 738,
														"src": "4737:16:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"id": 1147,
														"name": "tokenSold",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1117,
														"src": "4757:9:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "4737:29:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1149,
												"nodeType": "ExpressionStatement",
												"src": "4737:29:3"
											},
											{
												"expression": {
													"id": 1154,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 1150,
															"name": "presaleStatus",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 775,
															"src": "4777:13:3",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_PresaleStatus_$763_storage",
																"typeString": "struct Presale.PresaleStatus storage ref"
															}
														},
														"id": 1152,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "totalBaseCollected",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 749,
														"src": "4777:32:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"id": 1153,
														"name": "real_amount_in",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1048,
														"src": "4813:14:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "4777:50:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1155,
												"nodeType": "ExpressionStatement",
												"src": "4777:50:3"
											},
											{
												"expression": {
													"id": 1160,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 1156,
															"name": "presaleStatus",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 775,
															"src": "4838:13:3",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_PresaleStatus_$763_storage",
																"typeString": "struct Presale.PresaleStatus storage ref"
															}
														},
														"id": 1158,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "totalTokenSold",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 751,
														"src": "4838:28:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"id": 1159,
														"name": "tokenSold",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1117,
														"src": "4870:9:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "4838:41:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1161,
												"nodeType": "ExpressionStatement",
												"src": "4838:41:3"
											},
											{
												"expression": {
													"id": 1167,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 1162,
															"name": "userFee",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 772,
															"src": "4890:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 1165,
														"indexExpression": {
															"expression": {
																"id": 1163,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "4898:3:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1164,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "4898:10:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "4890:19:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"id": 1166,
														"name": "fee",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1052,
														"src": "4913:3:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "4890:26:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1168,
												"nodeType": "ExpressionStatement",
												"src": "4890:26:3"
											},
											{
												"expression": {
													"id": 1171,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1169,
														"name": "totalFee",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 788,
														"src": "4927:8:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"id": 1170,
														"name": "fee",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1052,
														"src": "4939:3:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "4927:15:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1172,
												"nodeType": "ExpressionStatement",
												"src": "4927:15:3"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 1181,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 1173,
															"name": "saleInfor",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 778,
															"src": "4958:9:3",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_SaleInfor_$734_storage",
																"typeString": "struct Presale.SaleInfor storage ref"
															}
														},
														"id": 1174,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "saleIsBaseToken",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 731,
														"src": "4958:25:3",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1180,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1177,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1175,
																"name": "real_amount_in",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1048,
																"src": "4987:14:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"id": 1176,
																"name": "fee",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1052,
																"src": "5004:3:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "4987:20:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "<",
														"rightExpression": {
															"expression": {
																"id": 1178,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "5010:3:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1179,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "value",
															"nodeType": "MemberAccess",
															"src": "5010:9:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "4987:32:3",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "4958:61:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1197,
												"nodeType": "IfStatement",
												"src": "4955:155:3",
												"trueBody": {
													"id": 1196,
													"nodeType": "Block",
													"src": "5021:89:3",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1193,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 1191,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"expression": {
																					"id": 1188,
																					"name": "msg",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 4294967281,
																					"src": "5065:3:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_magic_message",
																						"typeString": "msg"
																					}
																				},
																				"id": 1189,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "value",
																				"nodeType": "MemberAccess",
																				"src": "5065:9:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "-",
																			"rightExpression": {
																				"id": 1190,
																				"name": "real_amount_in",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1048,
																				"src": "5077:14:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "5065:26:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "-",
																		"rightExpression": {
																			"id": 1192,
																			"name": "fee",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1052,
																			"src": "5094:3:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "5065:32:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"arguments": [
																			{
																				"expression": {
																					"id": 1184,
																					"name": "msg",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 4294967281,
																					"src": "5044:3:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_magic_message",
																						"typeString": "msg"
																					}
																				},
																				"id": 1185,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "sender",
																				"nodeType": "MemberAccess",
																				"src": "5044:10:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			],
																			"id": 1183,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "5036:8:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_payable_$",
																				"typeString": "type(address payable)"
																			},
																			"typeName": {
																				"id": 1182,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "5036:8:3",
																				"stateMutability": "payable",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 1186,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "5036:19:3",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address_payable",
																			"typeString": "address payable"
																		}
																	},
																	"id": 1187,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "transfer",
																	"nodeType": "MemberAccess",
																	"src": "5036:28:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_transfer_nonpayable$_t_uint256_$returns$__$",
																		"typeString": "function (uint256)"
																	}
																},
																"id": 1194,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "5036:62:3",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1195,
															"nodeType": "ExpressionStatement",
															"src": "5036:62:3"
														}
													]
												}
											},
											{
												"condition": {
													"id": 1200,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "!",
													"prefix": true,
													"src": "5124:26:3",
													"subExpression": {
														"expression": {
															"id": 1198,
															"name": "saleInfor",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 778,
															"src": "5125:9:3",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_SaleInfor_$734_storage",
																"typeString": "struct Presale.SaleInfor storage ref"
															}
														},
														"id": 1199,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "saleIsBaseToken",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 731,
														"src": "5125:25:3",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1221,
												"nodeType": "IfStatement",
												"src": "5121:251:3",
												"trueBody": {
													"id": 1220,
													"nodeType": "Block",
													"src": "5152:220:3",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"expression": {
																					"id": 1206,
																					"name": "saleInfor",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 778,
																					"src": "5225:9:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_struct$_SaleInfor_$734_storage",
																						"typeString": "struct Presale.SaleInfor storage ref"
																					}
																				},
																				"id": 1207,
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "baseToken",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 715,
																				"src": "5225:19:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_contract$_ERC20_$585",
																					"typeString": "contract ERC20"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_contract$_ERC20_$585",
																					"typeString": "contract ERC20"
																				}
																			],
																			"id": 1205,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "5217:7:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 1204,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "5217:7:3",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 1208,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "5217:28:3",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"expression": {
																			"id": 1209,
																			"name": "msg",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967281,
																			"src": "5264:3:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_message",
																				"typeString": "msg"
																			}
																		},
																		"id": 1210,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "sender",
																		"nodeType": "MemberAccess",
																		"src": "5264:10:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"arguments": [
																			{
																				"id": 1213,
																				"name": "this",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4294967268,
																				"src": "5301:4:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_contract$_Presale_$1270",
																					"typeString": "contract Presale"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_contract$_Presale_$1270",
																					"typeString": "contract Presale"
																				}
																			],
																			"id": 1212,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "5293:7:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 1211,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "5293:7:3",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 1214,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "5293:13:3",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1217,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1215,
																			"name": "real_amount_in",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1048,
																			"src": "5325:14:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "+",
																		"rightExpression": {
																			"id": 1216,
																			"name": "fee",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1052,
																			"src": "5342:3:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "5325:20:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"id": 1201,
																		"name": "TransferHelper",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2497,
																		"src": "5167:14:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_contract$_TransferHelper_$2497_$",
																			"typeString": "type(library TransferHelper)"
																		}
																	},
																	"id": 1203,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "safeTransferFrom",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 2440,
																	"src": "5167:31:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_uint256_$returns$__$",
																		"typeString": "function (address,address,address,uint256)"
																	}
																},
																"id": 1218,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "5167:193:3",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1219,
															"nodeType": "ExpressionStatement",
															"src": "5167:193:3"
														}
													]
												}
											}
										]
									},
									"functionSelector": "b6b55f25",
									"id": 1223,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1025,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1024,
												"name": "nonReentrant",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 2035,
												"src": "3576:12:3"
											},
											"nodeType": "ModifierInvocation",
											"src": "3576:12:3"
										}
									],
									"name": "deposit",
									"nameLocation": "3534:7:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1023,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1022,
												"mutability": "mutable",
												"name": "_amount",
												"nameLocation": "3550:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 1223,
												"src": "3542:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1021,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3542:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3541:17:3"
									},
									"returnParameters": {
										"id": 1026,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3589:0:3"
									},
									"scope": 1270,
									"src": "3525:1866:3",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1233,
										"nodeType": "Block",
										"src": "5468:42:3",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 1230,
														"name": "_address",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1225,
														"src": "5486:8:3",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"id": 1231,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "balance",
													"nodeType": "MemberAccess",
													"src": "5486:16:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1229,
												"id": 1232,
												"nodeType": "Return",
												"src": "5479:23:3"
											}
										]
									},
									"functionSelector": "f8b2cb4f",
									"id": 1234,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getBalance",
									"nameLocation": "5408:10:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1226,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1225,
												"mutability": "mutable",
												"name": "_address",
												"nameLocation": "5427:8:3",
												"nodeType": "VariableDeclaration",
												"scope": 1234,
												"src": "5419:16:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1224,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5419:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5418:18:3"
									},
									"returnParameters": {
										"id": 1229,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1228,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1234,
												"src": "5459:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1227,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5459:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5458:9:3"
									},
									"scope": 1270,
									"src": "5399:111:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1250,
										"nodeType": "Block",
										"src": "5559:70:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 1245,
																		"name": "this",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967268,
																		"src": "5607:4:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_Presale_$1270",
																			"typeString": "contract Presale"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_Presale_$1270",
																			"typeString": "contract Presale"
																		}
																	],
																	"id": 1244,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "5599:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 1243,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "5599:7:3",
																		"typeDescriptions": {}
																	}
																},
																"id": 1246,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "5599:13:3",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 1247,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "balance",
															"nodeType": "MemberAccess",
															"src": "5599:21:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"arguments": [
																{
																	"expression": {
																		"id": 1239,
																		"name": "msg",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967281,
																		"src": "5578:3:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_message",
																			"typeString": "msg"
																		}
																	},
																	"id": 1240,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "sender",
																	"nodeType": "MemberAccess",
																	"src": "5578:10:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 1238,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "5570:8:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_payable_$",
																	"typeString": "type(address payable)"
																},
																"typeName": {
																	"id": 1237,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "5570:8:3",
																	"stateMutability": "payable",
																	"typeDescriptions": {}
																}
															},
															"id": 1241,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5570:19:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														"id": 1242,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "transfer",
														"nodeType": "MemberAccess",
														"src": "5570:28:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_transfer_nonpayable$_t_uint256_$returns$__$",
															"typeString": "function (uint256)"
														}
													},
													"id": 1248,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5570:51:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1249,
												"nodeType": "ExpressionStatement",
												"src": "5570:51:3"
											}
										]
									},
									"functionSelector": "861faf5f",
									"id": 1251,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "backToken",
									"nameLocation": "5530:9:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1235,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5539:2:3"
									},
									"returnParameters": {
										"id": 1236,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5559:0:3"
									},
									"scope": 1270,
									"src": "5521:108:3",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1268,
										"nodeType": "Block",
										"src": "5691:67:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1265,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 1262,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "5731:3:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 1263,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "value",
																"nodeType": "MemberAccess",
																"src": "5731:9:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "-",
															"rightExpression": {
																"id": 1264,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1253,
																"src": "5743:6:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5731:18:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"arguments": [
																{
																	"expression": {
																		"id": 1258,
																		"name": "msg",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967281,
																		"src": "5710:3:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_message",
																			"typeString": "msg"
																		}
																	},
																	"id": 1259,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "sender",
																	"nodeType": "MemberAccess",
																	"src": "5710:10:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 1257,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "5702:8:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_payable_$",
																	"typeString": "type(address payable)"
																},
																"typeName": {
																	"id": 1256,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "5702:8:3",
																	"stateMutability": "payable",
																	"typeDescriptions": {}
																}
															},
															"id": 1260,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5702:19:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														"id": 1261,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "transfer",
														"nodeType": "MemberAccess",
														"src": "5702:28:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_transfer_nonpayable$_t_uint256_$returns$__$",
															"typeString": "function (uint256)"
														}
													},
													"id": 1266,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5702:48:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1267,
												"nodeType": "ExpressionStatement",
												"src": "5702:48:3"
											}
										]
									},
									"functionSelector": "4329db46",
									"id": 1269,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "transferETH",
									"nameLocation": "5646:11:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1254,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1253,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "5666:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 1269,
												"src": "5658:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1252,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5658:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5657:16:3"
									},
									"returnParameters": {
										"id": 1255,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5691:0:3"
									},
									"scope": 1270,
									"src": "5637:121:3",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1271,
							"src": "338:5425:3",
							"usedErrors": []
						}
					],
					"src": "93:5670:3"
				},
				"id": 3
			},
			"Utils/Context.sol": {
				"ast": {
					"absolutePath": "Utils/Context.sol",
					"exportedSymbols": {
						"Context": [
							1292
						]
					},
					"id": 1293,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1272,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "89:23:4"
						},
						{
							"abstract": true,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 1273,
								"nodeType": "StructuredDocumentation",
								"src": "116:505:4",
								"text": " @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."
							},
							"fullyImplemented": true,
							"id": 1292,
							"linearizedBaseContracts": [
								1292
							],
							"name": "Context",
							"nameLocation": "641:7:4",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 1281,
										"nodeType": "Block",
										"src": "718:36:4",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 1278,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "736:3:4",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 1279,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "sender",
													"nodeType": "MemberAccess",
													"src": "736:10:4",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 1277,
												"id": 1280,
												"nodeType": "Return",
												"src": "729:17:4"
											}
										]
									},
									"id": 1282,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgSender",
									"nameLocation": "665:10:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1274,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "675:2:4"
									},
									"returnParameters": {
										"id": 1277,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1276,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1282,
												"src": "709:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1275,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "709:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "708:9:4"
									},
									"scope": 1292,
									"src": "656:98:4",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1290,
										"nodeType": "Block",
										"src": "829:34:4",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 1287,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "847:3:4",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 1288,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "data",
													"nodeType": "MemberAccess",
													"src": "847:8:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_calldata_ptr",
														"typeString": "bytes calldata"
													}
												},
												"functionReturnParameters": 1286,
												"id": 1289,
												"nodeType": "Return",
												"src": "840:15:4"
											}
										]
									},
									"id": 1291,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgData",
									"nameLocation": "771:8:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1283,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "779:2:4"
									},
									"returnParameters": {
										"id": 1286,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1285,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1291,
												"src": "813:14:4",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1284,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "813:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "812:16:4"
									},
									"scope": 1292,
									"src": "762:101:4",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 1293,
							"src": "623:243:4",
							"usedErrors": []
						}
					],
					"src": "89:779:4"
				},
				"id": 4
			},
			"Utils/EnumerableSet.sol": {
				"ast": {
					"absolutePath": "Utils/EnumerableSet.sol",
					"exportedSymbols": {
						"EnumerableSet": [
							1891
						]
					},
					"id": 1892,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1294,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "118:23:5"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 1295,
								"nodeType": "StructuredDocumentation",
								"src": "145:1118:5",
								"text": " @dev Library for managing\n https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n types.\n Sets have the following properties:\n - Elements are added, removed, and checked for existence in constant time\n (O(1)).\n - Elements are enumerated in O(n). No guarantees are made on the ordering.\n ```\n contract Example {\n     // Add the library methods\n     using EnumerableSet for EnumerableSet.AddressSet;\n     // Declare a set state variable\n     EnumerableSet.AddressSet private mySet;\n }\n ```\n As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n and `uint256` (`UintSet`) are supported.\n [WARNING]\n ====\n  Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable.\n  See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n  In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet.\n ===="
							},
							"fullyImplemented": true,
							"id": 1891,
							"linearizedBaseContracts": [
								1891
							],
							"name": "EnumerableSet",
							"nameLocation": "1273:13:5",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"canonicalName": "EnumerableSet.Set",
									"id": 1303,
									"members": [
										{
											"constant": false,
											"id": 1298,
											"mutability": "mutable",
											"name": "_values",
											"nameLocation": "1809:7:5",
											"nodeType": "VariableDeclaration",
											"scope": 1303,
											"src": "1799:17:5",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
												"typeString": "bytes32[]"
											},
											"typeName": {
												"baseType": {
													"id": 1296,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1799:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"id": 1297,
												"nodeType": "ArrayTypeName",
												"src": "1799:9:5",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
													"typeString": "bytes32[]"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1302,
											"mutability": "mutable",
											"name": "_indexes",
											"nameLocation": "1980:8:5",
											"nodeType": "VariableDeclaration",
											"scope": 1303,
											"src": "1952:36:5",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
												"typeString": "mapping(bytes32 => uint256)"
											},
											"typeName": {
												"id": 1301,
												"keyType": {
													"id": 1299,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1960:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"nodeType": "Mapping",
												"src": "1952:27:5",
												"typeDescriptions": {
													"typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
													"typeString": "mapping(bytes32 => uint256)"
												},
												"valueType": {
													"id": 1300,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1971:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												}
											},
											"visibility": "internal"
										}
									],
									"name": "Set",
									"nameLocation": "1750:3:5",
									"nodeType": "StructDefinition",
									"scope": 1891,
									"src": "1743:253:5",
									"visibility": "public"
								},
								{
									"body": {
										"id": 1344,
										"nodeType": "Block",
										"src": "2243:345:5",
										"statements": [
											{
												"condition": {
													"id": 1318,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "!",
													"prefix": true,
													"src": "2258:22:5",
													"subExpression": {
														"arguments": [
															{
																"id": 1315,
																"name": "set",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1307,
																"src": "2269:3:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Set_$1303_storage_ptr",
																	"typeString": "struct EnumerableSet.Set storage pointer"
																}
															},
															{
																"id": 1316,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1309,
																"src": "2274:5:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_struct$_Set_$1303_storage_ptr",
																	"typeString": "struct EnumerableSet.Set storage pointer"
																},
																{
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															],
															"id": 1314,
															"name": "_contains",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1448,
															"src": "2259:9:5",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$_t_struct$_Set_$1303_storage_ptr_$_t_bytes32_$returns$_t_bool_$",
																"typeString": "function (struct EnumerableSet.Set storage pointer,bytes32) view returns (bool)"
															}
														},
														"id": 1317,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2259:21:5",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 1342,
													"nodeType": "Block",
													"src": "2542:39:5",
													"statements": [
														{
															"expression": {
																"hexValue": "66616c7365",
																"id": 1340,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2564:5:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "false"
															},
															"functionReturnParameters": 1313,
															"id": 1341,
															"nodeType": "Return",
															"src": "2557:12:5"
														}
													]
												},
												"id": 1343,
												"nodeType": "IfStatement",
												"src": "2254:327:5",
												"trueBody": {
													"id": 1339,
													"nodeType": "Block",
													"src": "2282:254:5",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 1324,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1309,
																		"src": "2314:5:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	],
																	"expression": {
																		"expression": {
																			"id": 1319,
																			"name": "set",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1307,
																			"src": "2297:3:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_Set_$1303_storage_ptr",
																				"typeString": "struct EnumerableSet.Set storage pointer"
																			}
																		},
																		"id": 1322,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "_values",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 1298,
																		"src": "2297:11:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_bytes32_$dyn_storage",
																			"typeString": "bytes32[] storage ref"
																		}
																	},
																	"id": 1323,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "push",
																	"nodeType": "MemberAccess",
																	"src": "2297:16:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_arraypush_nonpayable$_t_array$_t_bytes32_$dyn_storage_ptr_$_t_bytes32_$returns$__$bound_to$_t_array$_t_bytes32_$dyn_storage_ptr_$",
																		"typeString": "function (bytes32[] storage pointer,bytes32)"
																	}
																},
																"id": 1325,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2297:23:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1326,
															"nodeType": "ExpressionStatement",
															"src": "2297:23:5"
														},
														{
															"expression": {
																"id": 1335,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"baseExpression": {
																		"expression": {
																			"id": 1327,
																			"name": "set",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1307,
																			"src": "2458:3:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_Set_$1303_storage_ptr",
																				"typeString": "struct EnumerableSet.Set storage pointer"
																			}
																		},
																		"id": 1330,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "_indexes",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 1302,
																		"src": "2458:12:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
																			"typeString": "mapping(bytes32 => uint256)"
																		}
																	},
																	"id": 1331,
																	"indexExpression": {
																		"id": 1329,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1309,
																		"src": "2471:5:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"nodeType": "IndexAccess",
																	"src": "2458:19:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"expression": {
																		"expression": {
																			"id": 1332,
																			"name": "set",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1307,
																			"src": "2480:3:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_Set_$1303_storage_ptr",
																				"typeString": "struct EnumerableSet.Set storage pointer"
																			}
																		},
																		"id": 1333,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "_values",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 1298,
																		"src": "2480:11:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_bytes32_$dyn_storage",
																			"typeString": "bytes32[] storage ref"
																		}
																	},
																	"id": 1334,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "length",
																	"nodeType": "MemberAccess",
																	"src": "2480:18:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "2458:40:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1336,
															"nodeType": "ExpressionStatement",
															"src": "2458:40:5"
														},
														{
															"expression": {
																"hexValue": "74727565",
																"id": 1337,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2520:4:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "true"
															},
															"functionReturnParameters": 1313,
															"id": 1338,
															"nodeType": "Return",
															"src": "2513:11:5"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1304,
										"nodeType": "StructuredDocumentation",
										"src": "2004:164:5",
										"text": " @dev Add a value to a set. O(1).\n Returns true if the value was added to the set, that is if it was not\n already present."
									},
									"id": 1345,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_add",
									"nameLocation": "2183:4:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1310,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1307,
												"mutability": "mutable",
												"name": "set",
												"nameLocation": "2200:3:5",
												"nodeType": "VariableDeclaration",
												"scope": 1345,
												"src": "2188:15:5",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Set_$1303_storage_ptr",
													"typeString": "struct EnumerableSet.Set"
												},
												"typeName": {
													"id": 1306,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1305,
														"name": "Set",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1303,
														"src": "2188:3:5"
													},
													"referencedDeclaration": 1303,
													"src": "2188:3:5",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Set_$1303_storage_ptr",
														"typeString": "struct EnumerableSet.Set"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1309,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2213:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 1345,
												"src": "2205:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1308,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2205:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2187:32:5"
									},
									"returnParameters": {
										"id": 1313,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1312,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1345,
												"src": "2237:4:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1311,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2237:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2236:6:5"
									},
									"scope": 1891,
									"src": "2174:414:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 1428,
										"nodeType": "Block",
										"src": "2836:1348:5",
										"statements": [
											{
												"assignments": [
													1357
												],
												"declarations": [
													{
														"constant": false,
														"id": 1357,
														"mutability": "mutable",
														"name": "valueIndex",
														"nameLocation": "2956:10:5",
														"nodeType": "VariableDeclaration",
														"scope": 1428,
														"src": "2948:18:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1356,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2948:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1362,
												"initialValue": {
													"baseExpression": {
														"expression": {
															"id": 1358,
															"name": "set",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1349,
															"src": "2969:3:5",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Set_$1303_storage_ptr",
																"typeString": "struct EnumerableSet.Set storage pointer"
															}
														},
														"id": 1359,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "_indexes",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1302,
														"src": "2969:12:5",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
															"typeString": "mapping(bytes32 => uint256)"
														}
													},
													"id": 1361,
													"indexExpression": {
														"id": 1360,
														"name": "value",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1351,
														"src": "2982:5:5",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "2969:19:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2948:40:5"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1365,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1363,
														"name": "valueIndex",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1357,
														"src": "3005:10:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 1364,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3019:1:5",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "3005:15:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 1426,
													"nodeType": "Block",
													"src": "4138:39:5",
													"statements": [
														{
															"expression": {
																"hexValue": "66616c7365",
																"id": 1424,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "4160:5:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "false"
															},
															"functionReturnParameters": 1355,
															"id": 1425,
															"nodeType": "Return",
															"src": "4153:12:5"
														}
													]
												},
												"id": 1427,
												"nodeType": "IfStatement",
												"src": "3001:1176:5",
												"trueBody": {
													"id": 1423,
													"nodeType": "Block",
													"src": "3022:1110:5",
													"statements": [
														{
															"assignments": [
																1367
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1367,
																	"mutability": "mutable",
																	"name": "toDeleteIndex",
																	"nameLocation": "3388:13:5",
																	"nodeType": "VariableDeclaration",
																	"scope": 1423,
																	"src": "3380:21:5",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 1366,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "3380:7:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1371,
															"initialValue": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1370,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1368,
																	"name": "valueIndex",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1357,
																	"src": "3404:10:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 1369,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "3417:1:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "3404:14:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "3380:38:5"
														},
														{
															"assignments": [
																1373
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1373,
																	"mutability": "mutable",
																	"name": "lastIndex",
																	"nameLocation": "3441:9:5",
																	"nodeType": "VariableDeclaration",
																	"scope": 1423,
																	"src": "3433:17:5",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 1372,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "3433:7:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1379,
															"initialValue": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1378,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"expression": {
																		"expression": {
																			"id": 1374,
																			"name": "set",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1349,
																			"src": "3453:3:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_Set_$1303_storage_ptr",
																				"typeString": "struct EnumerableSet.Set storage pointer"
																			}
																		},
																		"id": 1375,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "_values",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 1298,
																		"src": "3453:11:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_bytes32_$dyn_storage",
																			"typeString": "bytes32[] storage ref"
																		}
																	},
																	"id": 1376,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "length",
																	"nodeType": "MemberAccess",
																	"src": "3453:18:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 1377,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "3474:1:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "3453:22:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "3433:42:5"
														},
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1382,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1380,
																	"name": "lastIndex",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1373,
																	"src": "3496:9:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "!=",
																"rightExpression": {
																	"id": 1381,
																	"name": "toDeleteIndex",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1367,
																	"src": "3509:13:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "3496:26:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 1407,
															"nodeType": "IfStatement",
															"src": "3492:405:5",
															"trueBody": {
																"id": 1406,
																"nodeType": "Block",
																"src": "3524:373:5",
																"statements": [
																	{
																		"assignments": [
																			1384
																		],
																		"declarations": [
																			{
																				"constant": false,
																				"id": 1384,
																				"mutability": "mutable",
																				"name": "lastValue",
																				"nameLocation": "3551:9:5",
																				"nodeType": "VariableDeclaration",
																				"scope": 1406,
																				"src": "3543:17:5",
																				"stateVariable": false,
																				"storageLocation": "default",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes32",
																					"typeString": "bytes32"
																				},
																				"typeName": {
																					"id": 1383,
																					"name": "bytes32",
																					"nodeType": "ElementaryTypeName",
																					"src": "3543:7:5",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bytes32",
																						"typeString": "bytes32"
																					}
																				},
																				"visibility": "internal"
																			}
																		],
																		"id": 1389,
																		"initialValue": {
																			"baseExpression": {
																				"expression": {
																					"id": 1385,
																					"name": "set",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1349,
																					"src": "3563:3:5",
																					"typeDescriptions": {
																						"typeIdentifier": "t_struct$_Set_$1303_storage_ptr",
																						"typeString": "struct EnumerableSet.Set storage pointer"
																					}
																				},
																				"id": 1386,
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "_values",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 1298,
																				"src": "3563:11:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_array$_t_bytes32_$dyn_storage",
																					"typeString": "bytes32[] storage ref"
																				}
																			},
																			"id": 1388,
																			"indexExpression": {
																				"id": 1387,
																				"name": "lastIndex",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1373,
																				"src": "3575:9:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "IndexAccess",
																			"src": "3563:22:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		},
																		"nodeType": "VariableDeclarationStatement",
																		"src": "3543:42:5"
																	},
																	{
																		"expression": {
																			"id": 1396,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftHandSide": {
																				"baseExpression": {
																					"expression": {
																						"id": 1390,
																						"name": "set",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1349,
																						"src": "3688:3:5",
																						"typeDescriptions": {
																							"typeIdentifier": "t_struct$_Set_$1303_storage_ptr",
																							"typeString": "struct EnumerableSet.Set storage pointer"
																						}
																					},
																					"id": 1393,
																					"isConstant": false,
																					"isLValue": true,
																					"isPure": false,
																					"lValueRequested": false,
																					"memberName": "_values",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 1298,
																					"src": "3688:11:5",
																					"typeDescriptions": {
																						"typeIdentifier": "t_array$_t_bytes32_$dyn_storage",
																						"typeString": "bytes32[] storage ref"
																					}
																				},
																				"id": 1394,
																				"indexExpression": {
																					"id": 1392,
																					"name": "toDeleteIndex",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1367,
																					"src": "3700:13:5",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": true,
																				"nodeType": "IndexAccess",
																				"src": "3688:26:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes32",
																					"typeString": "bytes32"
																				}
																			},
																			"nodeType": "Assignment",
																			"operator": "=",
																			"rightHandSide": {
																				"id": 1395,
																				"name": "lastValue",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1384,
																				"src": "3717:9:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes32",
																					"typeString": "bytes32"
																				}
																			},
																			"src": "3688:38:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		},
																		"id": 1397,
																		"nodeType": "ExpressionStatement",
																		"src": "3688:38:5"
																	},
																	{
																		"expression": {
																			"id": 1404,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftHandSide": {
																				"baseExpression": {
																					"expression": {
																						"id": 1398,
																						"name": "set",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1349,
																						"src": "3802:3:5",
																						"typeDescriptions": {
																							"typeIdentifier": "t_struct$_Set_$1303_storage_ptr",
																							"typeString": "struct EnumerableSet.Set storage pointer"
																						}
																					},
																					"id": 1401,
																					"isConstant": false,
																					"isLValue": true,
																					"isPure": false,
																					"lValueRequested": false,
																					"memberName": "_indexes",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 1302,
																					"src": "3802:12:5",
																					"typeDescriptions": {
																						"typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
																						"typeString": "mapping(bytes32 => uint256)"
																					}
																				},
																				"id": 1402,
																				"indexExpression": {
																					"id": 1400,
																					"name": "lastValue",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1384,
																					"src": "3815:9:5",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bytes32",
																						"typeString": "bytes32"
																					}
																				},
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": true,
																				"nodeType": "IndexAccess",
																				"src": "3802:23:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "Assignment",
																			"operator": "=",
																			"rightHandSide": {
																				"id": 1403,
																				"name": "valueIndex",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1357,
																				"src": "3828:10:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "3802:36:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"id": 1405,
																		"nodeType": "ExpressionStatement",
																		"src": "3802:36:5"
																	}
																]
															}
														},
														{
															"expression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"expression": {
																		"expression": {
																			"id": 1408,
																			"name": "set",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1349,
																			"src": "3978:3:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_Set_$1303_storage_ptr",
																				"typeString": "struct EnumerableSet.Set storage pointer"
																			}
																		},
																		"id": 1411,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "_values",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 1298,
																		"src": "3978:11:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_bytes32_$dyn_storage",
																			"typeString": "bytes32[] storage ref"
																		}
																	},
																	"id": 1412,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "pop",
																	"nodeType": "MemberAccess",
																	"src": "3978:15:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_arraypop_nonpayable$_t_array$_t_bytes32_$dyn_storage_ptr_$returns$__$bound_to$_t_array$_t_bytes32_$dyn_storage_ptr_$",
																		"typeString": "function (bytes32[] storage pointer)"
																	}
																},
																"id": 1413,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3978:17:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1414,
															"nodeType": "ExpressionStatement",
															"src": "3978:17:5"
														},
														{
															"expression": {
																"id": 1419,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "UnaryOperation",
																"operator": "delete",
																"prefix": true,
																"src": "4066:26:5",
																"subExpression": {
																	"baseExpression": {
																		"expression": {
																			"id": 1415,
																			"name": "set",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1349,
																			"src": "4073:3:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_Set_$1303_storage_ptr",
																				"typeString": "struct EnumerableSet.Set storage pointer"
																			}
																		},
																		"id": 1416,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "_indexes",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 1302,
																		"src": "4073:12:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
																			"typeString": "mapping(bytes32 => uint256)"
																		}
																	},
																	"id": 1418,
																	"indexExpression": {
																		"id": 1417,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1351,
																		"src": "4086:5:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"nodeType": "IndexAccess",
																	"src": "4073:19:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1420,
															"nodeType": "ExpressionStatement",
															"src": "4066:26:5"
														},
														{
															"expression": {
																"hexValue": "74727565",
																"id": 1421,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "4116:4:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "true"
															},
															"functionReturnParameters": 1355,
															"id": 1422,
															"nodeType": "Return",
															"src": "4109:11:5"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1346,
										"nodeType": "StructuredDocumentation",
										"src": "2596:162:5",
										"text": " @dev Removes a value from a set. O(1).\n Returns true if the value was removed from the set, that is if it was\n present."
									},
									"id": 1429,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_remove",
									"nameLocation": "2773:7:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1352,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1349,
												"mutability": "mutable",
												"name": "set",
												"nameLocation": "2793:3:5",
												"nodeType": "VariableDeclaration",
												"scope": 1429,
												"src": "2781:15:5",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Set_$1303_storage_ptr",
													"typeString": "struct EnumerableSet.Set"
												},
												"typeName": {
													"id": 1348,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1347,
														"name": "Set",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1303,
														"src": "2781:3:5"
													},
													"referencedDeclaration": 1303,
													"src": "2781:3:5",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Set_$1303_storage_ptr",
														"typeString": "struct EnumerableSet.Set"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1351,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2806:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 1429,
												"src": "2798:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1350,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2798:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2780:32:5"
									},
									"returnParameters": {
										"id": 1355,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1354,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1429,
												"src": "2830:4:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1353,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2830:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2829:6:5"
									},
									"scope": 1891,
									"src": "2764:1420:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 1447,
										"nodeType": "Block",
										"src": "4349:50:5",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1445,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"baseExpression": {
															"expression": {
																"id": 1440,
																"name": "set",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1433,
																"src": "4367:3:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Set_$1303_storage_ptr",
																	"typeString": "struct EnumerableSet.Set storage pointer"
																}
															},
															"id": 1441,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "_indexes",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1302,
															"src": "4367:12:5",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
																"typeString": "mapping(bytes32 => uint256)"
															}
														},
														"id": 1443,
														"indexExpression": {
															"id": 1442,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1435,
															"src": "4380:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "4367:19:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 1444,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "4390:1:5",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "4367:24:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 1439,
												"id": 1446,
												"nodeType": "Return",
												"src": "4360:31:5"
											}
										]
									},
									"documentation": {
										"id": 1430,
										"nodeType": "StructuredDocumentation",
										"src": "4192:72:5",
										"text": " @dev Returns true if the value is in the set. O(1)."
									},
									"id": 1448,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_contains",
									"nameLocation": "4279:9:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1436,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1433,
												"mutability": "mutable",
												"name": "set",
												"nameLocation": "4301:3:5",
												"nodeType": "VariableDeclaration",
												"scope": 1448,
												"src": "4289:15:5",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Set_$1303_storage_ptr",
													"typeString": "struct EnumerableSet.Set"
												},
												"typeName": {
													"id": 1432,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1431,
														"name": "Set",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1303,
														"src": "4289:3:5"
													},
													"referencedDeclaration": 1303,
													"src": "4289:3:5",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Set_$1303_storage_ptr",
														"typeString": "struct EnumerableSet.Set"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1435,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "4314:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 1448,
												"src": "4306:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1434,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4306:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4288:32:5"
									},
									"returnParameters": {
										"id": 1439,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1438,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1448,
												"src": "4343:4:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1437,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4343:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4342:6:5"
									},
									"scope": 1891,
									"src": "4270:129:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 1461,
										"nodeType": "Block",
										"src": "4550:44:5",
										"statements": [
											{
												"expression": {
													"expression": {
														"expression": {
															"id": 1457,
															"name": "set",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1452,
															"src": "4568:3:5",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Set_$1303_storage_ptr",
																"typeString": "struct EnumerableSet.Set storage pointer"
															}
														},
														"id": 1458,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "_values",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1298,
														"src": "4568:11:5",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_bytes32_$dyn_storage",
															"typeString": "bytes32[] storage ref"
														}
													},
													"id": 1459,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "length",
													"nodeType": "MemberAccess",
													"src": "4568:18:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1456,
												"id": 1460,
												"nodeType": "Return",
												"src": "4561:25:5"
											}
										]
									},
									"documentation": {
										"id": 1449,
										"nodeType": "StructuredDocumentation",
										"src": "4407:72:5",
										"text": " @dev Returns the number of values on the set. O(1)."
									},
									"id": 1462,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_length",
									"nameLocation": "4494:7:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1453,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1452,
												"mutability": "mutable",
												"name": "set",
												"nameLocation": "4514:3:5",
												"nodeType": "VariableDeclaration",
												"scope": 1462,
												"src": "4502:15:5",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Set_$1303_storage_ptr",
													"typeString": "struct EnumerableSet.Set"
												},
												"typeName": {
													"id": 1451,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1450,
														"name": "Set",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1303,
														"src": "4502:3:5"
													},
													"referencedDeclaration": 1303,
													"src": "4502:3:5",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Set_$1303_storage_ptr",
														"typeString": "struct EnumerableSet.Set"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4501:17:5"
									},
									"returnParameters": {
										"id": 1456,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1455,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1462,
												"src": "4541:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1454,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4541:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4540:9:5"
									},
									"scope": 1891,
									"src": "4485:109:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 1478,
										"nodeType": "Block",
										"src": "5024:44:5",
										"statements": [
											{
												"expression": {
													"baseExpression": {
														"expression": {
															"id": 1473,
															"name": "set",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1466,
															"src": "5042:3:5",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Set_$1303_storage_ptr",
																"typeString": "struct EnumerableSet.Set storage pointer"
															}
														},
														"id": 1474,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "_values",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1298,
														"src": "5042:11:5",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_bytes32_$dyn_storage",
															"typeString": "bytes32[] storage ref"
														}
													},
													"id": 1476,
													"indexExpression": {
														"id": 1475,
														"name": "index",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1468,
														"src": "5054:5:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "5042:18:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"functionReturnParameters": 1472,
												"id": 1477,
												"nodeType": "Return",
												"src": "5035:25:5"
											}
										]
									},
									"documentation": {
										"id": 1463,
										"nodeType": "StructuredDocumentation",
										"src": "4602:340:5",
										"text": " @dev Returns the value stored at position `index` in the set. O(1).\n Note that there are no guarantees on the ordering of values inside the\n array, and it may change when more values are added or removed.\n Requirements:\n - `index` must be strictly less than {length}."
									},
									"id": 1479,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_at",
									"nameLocation": "4957:3:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1469,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1466,
												"mutability": "mutable",
												"name": "set",
												"nameLocation": "4973:3:5",
												"nodeType": "VariableDeclaration",
												"scope": 1479,
												"src": "4961:15:5",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Set_$1303_storage_ptr",
													"typeString": "struct EnumerableSet.Set"
												},
												"typeName": {
													"id": 1465,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1464,
														"name": "Set",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1303,
														"src": "4961:3:5"
													},
													"referencedDeclaration": 1303,
													"src": "4961:3:5",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Set_$1303_storage_ptr",
														"typeString": "struct EnumerableSet.Set"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1468,
												"mutability": "mutable",
												"name": "index",
												"nameLocation": "4986:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 1479,
												"src": "4978:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1467,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4978:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4960:32:5"
									},
									"returnParameters": {
										"id": 1472,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1471,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1479,
												"src": "5015:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1470,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "5015:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5014:9:5"
									},
									"scope": 1891,
									"src": "4948:120:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 1492,
										"nodeType": "Block",
										"src": "5692:37:5",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 1489,
														"name": "set",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1483,
														"src": "5710:3:5",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Set_$1303_storage_ptr",
															"typeString": "struct EnumerableSet.Set storage pointer"
														}
													},
													"id": 1490,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "_values",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 1298,
													"src": "5710:11:5",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage",
														"typeString": "bytes32[] storage ref"
													}
												},
												"functionReturnParameters": 1488,
												"id": 1491,
												"nodeType": "Return",
												"src": "5703:18:5"
											}
										]
									},
									"documentation": {
										"id": 1480,
										"nodeType": "StructuredDocumentation",
										"src": "5076:536:5",
										"text": " @dev Return the entire set in an array\n WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n this function has an unbounded cost, and using it as part of a state-changing function may render the function\n uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block."
									},
									"id": 1493,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_values",
									"nameLocation": "5627:7:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1484,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1483,
												"mutability": "mutable",
												"name": "set",
												"nameLocation": "5647:3:5",
												"nodeType": "VariableDeclaration",
												"scope": 1493,
												"src": "5635:15:5",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Set_$1303_storage_ptr",
													"typeString": "struct EnumerableSet.Set"
												},
												"typeName": {
													"id": 1482,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1481,
														"name": "Set",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1303,
														"src": "5635:3:5"
													},
													"referencedDeclaration": 1303,
													"src": "5635:3:5",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Set_$1303_storage_ptr",
														"typeString": "struct EnumerableSet.Set"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5634:17:5"
									},
									"returnParameters": {
										"id": 1488,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1487,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1493,
												"src": "5674:16:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 1485,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "5674:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 1486,
													"nodeType": "ArrayTypeName",
													"src": "5674:9:5",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5673:18:5"
									},
									"scope": 1891,
									"src": "5618:111:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "private"
								},
								{
									"canonicalName": "EnumerableSet.Bytes32Set",
									"id": 1497,
									"members": [
										{
											"constant": false,
											"id": 1496,
											"mutability": "mutable",
											"name": "_inner",
											"nameLocation": "5791:6:5",
											"nodeType": "VariableDeclaration",
											"scope": 1497,
											"src": "5787:10:5",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_struct$_Set_$1303_storage_ptr",
												"typeString": "struct EnumerableSet.Set"
											},
											"typeName": {
												"id": 1495,
												"nodeType": "UserDefinedTypeName",
												"pathNode": {
													"id": 1494,
													"name": "Set",
													"nodeType": "IdentifierPath",
													"referencedDeclaration": 1303,
													"src": "5787:3:5"
												},
												"referencedDeclaration": 1303,
												"src": "5787:3:5",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Set_$1303_storage_ptr",
													"typeString": "struct EnumerableSet.Set"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "Bytes32Set",
									"nameLocation": "5765:10:5",
									"nodeType": "StructDefinition",
									"scope": 1891,
									"src": "5758:47:5",
									"visibility": "public"
								},
								{
									"body": {
										"id": 1514,
										"nodeType": "Block",
										"src": "6059:49:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 1509,
																"name": "set",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1501,
																"src": "6082:3:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Bytes32Set_$1497_storage_ptr",
																	"typeString": "struct EnumerableSet.Bytes32Set storage pointer"
																}
															},
															"id": 1510,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "_inner",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1496,
															"src": "6082:10:5",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Set_$1303_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															}
														},
														{
															"id": 1511,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1503,
															"src": "6094:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_struct$_Set_$1303_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 1508,
														"name": "_add",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1345,
														"src": "6077:4:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_struct$_Set_$1303_storage_ptr_$_t_bytes32_$returns$_t_bool_$",
															"typeString": "function (struct EnumerableSet.Set storage pointer,bytes32) returns (bool)"
														}
													},
													"id": 1512,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6077:23:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 1507,
												"id": 1513,
												"nodeType": "Return",
												"src": "6070:30:5"
											}
										]
									},
									"documentation": {
										"id": 1498,
										"nodeType": "StructuredDocumentation",
										"src": "5813:164:5",
										"text": " @dev Add a value to a set. O(1).\n Returns true if the value was added to the set, that is if it was not\n already present."
									},
									"id": 1515,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "add",
									"nameLocation": "5992:3:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1504,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1501,
												"mutability": "mutable",
												"name": "set",
												"nameLocation": "6015:3:5",
												"nodeType": "VariableDeclaration",
												"scope": 1515,
												"src": "5996:22:5",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Bytes32Set_$1497_storage_ptr",
													"typeString": "struct EnumerableSet.Bytes32Set"
												},
												"typeName": {
													"id": 1500,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1499,
														"name": "Bytes32Set",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1497,
														"src": "5996:10:5"
													},
													"referencedDeclaration": 1497,
													"src": "5996:10:5",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Bytes32Set_$1497_storage_ptr",
														"typeString": "struct EnumerableSet.Bytes32Set"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1503,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "6028:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 1515,
												"src": "6020:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1502,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "6020:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5995:39:5"
									},
									"returnParameters": {
										"id": 1507,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1506,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1515,
												"src": "6053:4:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1505,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "6053:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6052:6:5"
									},
									"scope": 1891,
									"src": "5983:125:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1532,
										"nodeType": "Block",
										"src": "6363:52:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 1527,
																"name": "set",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1519,
																"src": "6389:3:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Bytes32Set_$1497_storage_ptr",
																	"typeString": "struct EnumerableSet.Bytes32Set storage pointer"
																}
															},
															"id": 1528,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "_inner",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1496,
															"src": "6389:10:5",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Set_$1303_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															}
														},
														{
															"id": 1529,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1521,
															"src": "6401:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_struct$_Set_$1303_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 1526,
														"name": "_remove",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1429,
														"src": "6381:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_struct$_Set_$1303_storage_ptr_$_t_bytes32_$returns$_t_bool_$",
															"typeString": "function (struct EnumerableSet.Set storage pointer,bytes32) returns (bool)"
														}
													},
													"id": 1530,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6381:26:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 1525,
												"id": 1531,
												"nodeType": "Return",
												"src": "6374:33:5"
											}
										]
									},
									"documentation": {
										"id": 1516,
										"nodeType": "StructuredDocumentation",
										"src": "6116:162:5",
										"text": " @dev Removes a value from a set. O(1).\n Returns true if the value was removed from the set, that is if it was\n present."
									},
									"id": 1533,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "remove",
									"nameLocation": "6293:6:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1522,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1519,
												"mutability": "mutable",
												"name": "set",
												"nameLocation": "6319:3:5",
												"nodeType": "VariableDeclaration",
												"scope": 1533,
												"src": "6300:22:5",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Bytes32Set_$1497_storage_ptr",
													"typeString": "struct EnumerableSet.Bytes32Set"
												},
												"typeName": {
													"id": 1518,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1517,
														"name": "Bytes32Set",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1497,
														"src": "6300:10:5"
													},
													"referencedDeclaration": 1497,
													"src": "6300:10:5",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Bytes32Set_$1497_storage_ptr",
														"typeString": "struct EnumerableSet.Bytes32Set"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1521,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "6332:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 1533,
												"src": "6324:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1520,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "6324:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6299:39:5"
									},
									"returnParameters": {
										"id": 1525,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1524,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1533,
												"src": "6357:4:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1523,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "6357:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6356:6:5"
									},
									"scope": 1891,
									"src": "6284:131:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1550,
										"nodeType": "Block",
										"src": "6587:54:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 1545,
																"name": "set",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1537,
																"src": "6615:3:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Bytes32Set_$1497_storage_ptr",
																	"typeString": "struct EnumerableSet.Bytes32Set storage pointer"
																}
															},
															"id": 1546,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "_inner",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1496,
															"src": "6615:10:5",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Set_$1303_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															}
														},
														{
															"id": 1547,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1539,
															"src": "6627:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_struct$_Set_$1303_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 1544,
														"name": "_contains",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1448,
														"src": "6605:9:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_struct$_Set_$1303_storage_ptr_$_t_bytes32_$returns$_t_bool_$",
															"typeString": "function (struct EnumerableSet.Set storage pointer,bytes32) view returns (bool)"
														}
													},
													"id": 1548,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6605:28:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 1543,
												"id": 1549,
												"nodeType": "Return",
												"src": "6598:35:5"
											}
										]
									},
									"documentation": {
										"id": 1534,
										"nodeType": "StructuredDocumentation",
										"src": "6423:72:5",
										"text": " @dev Returns true if the value is in the set. O(1)."
									},
									"id": 1551,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "contains",
									"nameLocation": "6510:8:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1540,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1537,
												"mutability": "mutable",
												"name": "set",
												"nameLocation": "6538:3:5",
												"nodeType": "VariableDeclaration",
												"scope": 1551,
												"src": "6519:22:5",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Bytes32Set_$1497_storage_ptr",
													"typeString": "struct EnumerableSet.Bytes32Set"
												},
												"typeName": {
													"id": 1536,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1535,
														"name": "Bytes32Set",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1497,
														"src": "6519:10:5"
													},
													"referencedDeclaration": 1497,
													"src": "6519:10:5",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Bytes32Set_$1497_storage_ptr",
														"typeString": "struct EnumerableSet.Bytes32Set"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1539,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "6551:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 1551,
												"src": "6543:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1538,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "6543:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6518:39:5"
									},
									"returnParameters": {
										"id": 1543,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1542,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1551,
												"src": "6581:4:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1541,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "6581:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6580:6:5"
									},
									"scope": 1891,
									"src": "6501:140:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1565,
										"nodeType": "Block",
										"src": "6799:45:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 1561,
																"name": "set",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1555,
																"src": "6825:3:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Bytes32Set_$1497_storage_ptr",
																	"typeString": "struct EnumerableSet.Bytes32Set storage pointer"
																}
															},
															"id": 1562,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "_inner",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1496,
															"src": "6825:10:5",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Set_$1303_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_struct$_Set_$1303_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															}
														],
														"id": 1560,
														"name": "_length",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1462,
														"src": "6817:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_struct$_Set_$1303_storage_ptr_$returns$_t_uint256_$",
															"typeString": "function (struct EnumerableSet.Set storage pointer) view returns (uint256)"
														}
													},
													"id": 1563,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6817:19:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1559,
												"id": 1564,
												"nodeType": "Return",
												"src": "6810:26:5"
											}
										]
									},
									"documentation": {
										"id": 1552,
										"nodeType": "StructuredDocumentation",
										"src": "6649:72:5",
										"text": " @dev Returns the number of values in the set. O(1)."
									},
									"id": 1566,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "length",
									"nameLocation": "6736:6:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1556,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1555,
												"mutability": "mutable",
												"name": "set",
												"nameLocation": "6762:3:5",
												"nodeType": "VariableDeclaration",
												"scope": 1566,
												"src": "6743:22:5",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Bytes32Set_$1497_storage_ptr",
													"typeString": "struct EnumerableSet.Bytes32Set"
												},
												"typeName": {
													"id": 1554,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1553,
														"name": "Bytes32Set",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1497,
														"src": "6743:10:5"
													},
													"referencedDeclaration": 1497,
													"src": "6743:10:5",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Bytes32Set_$1497_storage_ptr",
														"typeString": "struct EnumerableSet.Bytes32Set"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6742:24:5"
									},
									"returnParameters": {
										"id": 1559,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1558,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1566,
												"src": "6790:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1557,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6790:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6789:9:5"
									},
									"scope": 1891,
									"src": "6727:117:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1583,
										"nodeType": "Block",
										"src": "7281:48:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 1578,
																"name": "set",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1570,
																"src": "7303:3:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Bytes32Set_$1497_storage_ptr",
																	"typeString": "struct EnumerableSet.Bytes32Set storage pointer"
																}
															},
															"id": 1579,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "_inner",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1496,
															"src": "7303:10:5",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Set_$1303_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															}
														},
														{
															"id": 1580,
															"name": "index",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1572,
															"src": "7315:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_struct$_Set_$1303_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1577,
														"name": "_at",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1479,
														"src": "7299:3:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_struct$_Set_$1303_storage_ptr_$_t_uint256_$returns$_t_bytes32_$",
															"typeString": "function (struct EnumerableSet.Set storage pointer,uint256) view returns (bytes32)"
														}
													},
													"id": 1581,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7299:22:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"functionReturnParameters": 1576,
												"id": 1582,
												"nodeType": "Return",
												"src": "7292:29:5"
											}
										]
									},
									"documentation": {
										"id": 1567,
										"nodeType": "StructuredDocumentation",
										"src": "6852:340:5",
										"text": " @dev Returns the value stored at position `index` in the set. O(1).\n Note that there are no guarantees on the ordering of values inside the\n array, and it may change when more values are added or removed.\n Requirements:\n - `index` must be strictly less than {length}."
									},
									"id": 1584,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "at",
									"nameLocation": "7207:2:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1573,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1570,
												"mutability": "mutable",
												"name": "set",
												"nameLocation": "7229:3:5",
												"nodeType": "VariableDeclaration",
												"scope": 1584,
												"src": "7210:22:5",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Bytes32Set_$1497_storage_ptr",
													"typeString": "struct EnumerableSet.Bytes32Set"
												},
												"typeName": {
													"id": 1569,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1568,
														"name": "Bytes32Set",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1497,
														"src": "7210:10:5"
													},
													"referencedDeclaration": 1497,
													"src": "7210:10:5",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Bytes32Set_$1497_storage_ptr",
														"typeString": "struct EnumerableSet.Bytes32Set"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1572,
												"mutability": "mutable",
												"name": "index",
												"nameLocation": "7242:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 1584,
												"src": "7234:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1571,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7234:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7209:39:5"
									},
									"returnParameters": {
										"id": 1576,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1575,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1584,
												"src": "7272:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1574,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "7272:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7271:9:5"
									},
									"scope": 1891,
									"src": "7198:131:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1599,
										"nodeType": "Block",
										"src": "7960:45:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 1595,
																"name": "set",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1588,
																"src": "7986:3:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Bytes32Set_$1497_storage_ptr",
																	"typeString": "struct EnumerableSet.Bytes32Set storage pointer"
																}
															},
															"id": 1596,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "_inner",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1496,
															"src": "7986:10:5",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Set_$1303_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_struct$_Set_$1303_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															}
														],
														"id": 1594,
														"name": "_values",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1493,
														"src": "7978:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_struct$_Set_$1303_storage_ptr_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$",
															"typeString": "function (struct EnumerableSet.Set storage pointer) view returns (bytes32[] memory)"
														}
													},
													"id": 1597,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7978:19:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
														"typeString": "bytes32[] memory"
													}
												},
												"functionReturnParameters": 1593,
												"id": 1598,
												"nodeType": "Return",
												"src": "7971:26:5"
											}
										]
									},
									"documentation": {
										"id": 1585,
										"nodeType": "StructuredDocumentation",
										"src": "7337:536:5",
										"text": " @dev Return the entire set in an array\n WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n this function has an unbounded cost, and using it as part of a state-changing function may render the function\n uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block."
									},
									"id": 1600,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "values",
									"nameLocation": "7888:6:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1589,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1588,
												"mutability": "mutable",
												"name": "set",
												"nameLocation": "7914:3:5",
												"nodeType": "VariableDeclaration",
												"scope": 1600,
												"src": "7895:22:5",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Bytes32Set_$1497_storage_ptr",
													"typeString": "struct EnumerableSet.Bytes32Set"
												},
												"typeName": {
													"id": 1587,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1586,
														"name": "Bytes32Set",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1497,
														"src": "7895:10:5"
													},
													"referencedDeclaration": 1497,
													"src": "7895:10:5",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Bytes32Set_$1497_storage_ptr",
														"typeString": "struct EnumerableSet.Bytes32Set"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7894:24:5"
									},
									"returnParameters": {
										"id": 1593,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1592,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1600,
												"src": "7942:16:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 1590,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "7942:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 1591,
													"nodeType": "ArrayTypeName",
													"src": "7942:9:5",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7941:18:5"
									},
									"scope": 1891,
									"src": "7879:126:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"canonicalName": "EnumerableSet.AddressSet",
									"id": 1604,
									"members": [
										{
											"constant": false,
											"id": 1603,
											"mutability": "mutable",
											"name": "_inner",
											"nameLocation": "8067:6:5",
											"nodeType": "VariableDeclaration",
											"scope": 1604,
											"src": "8063:10:5",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_struct$_Set_$1303_storage_ptr",
												"typeString": "struct EnumerableSet.Set"
											},
											"typeName": {
												"id": 1602,
												"nodeType": "UserDefinedTypeName",
												"pathNode": {
													"id": 1601,
													"name": "Set",
													"nodeType": "IdentifierPath",
													"referencedDeclaration": 1303,
													"src": "8063:3:5"
												},
												"referencedDeclaration": 1303,
												"src": "8063:3:5",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Set_$1303_storage_ptr",
													"typeString": "struct EnumerableSet.Set"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "AddressSet",
									"nameLocation": "8041:10:5",
									"nodeType": "StructDefinition",
									"scope": 1891,
									"src": "8034:47:5",
									"visibility": "public"
								},
								{
									"body": {
										"id": 1630,
										"nodeType": "Block",
										"src": "8335:76:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 1616,
																"name": "set",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1608,
																"src": "8358:3:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_AddressSet_$1604_storage_ptr",
																	"typeString": "struct EnumerableSet.AddressSet storage pointer"
																}
															},
															"id": 1617,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "_inner",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1603,
															"src": "8358:10:5",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Set_$1303_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															}
														},
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"arguments": [
																				{
																					"id": 1624,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1610,
																					"src": "8394:5:5",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				],
																				"id": 1623,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "8386:7:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_uint160_$",
																					"typeString": "type(uint160)"
																				},
																				"typeName": {
																					"id": 1622,
																					"name": "uint160",
																					"nodeType": "ElementaryTypeName",
																					"src": "8386:7:5",
																					"typeDescriptions": {}
																				}
																			},
																			"id": 1625,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "typeConversion",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "8386:14:5",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint160",
																				"typeString": "uint160"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint160",
																				"typeString": "uint160"
																			}
																		],
																		"id": 1621,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "8378:7:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_uint256_$",
																			"typeString": "type(uint256)"
																		},
																		"typeName": {
																			"id": 1620,
																			"name": "uint256",
																			"nodeType": "ElementaryTypeName",
																			"src": "8378:7:5",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 1626,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "8378:23:5",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 1619,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "8370:7:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_bytes32_$",
																	"typeString": "type(bytes32)"
																},
																"typeName": {
																	"id": 1618,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "8370:7:5",
																	"typeDescriptions": {}
																}
															},
															"id": 1627,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8370:32:5",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_struct$_Set_$1303_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 1615,
														"name": "_add",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1345,
														"src": "8353:4:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_struct$_Set_$1303_storage_ptr_$_t_bytes32_$returns$_t_bool_$",
															"typeString": "function (struct EnumerableSet.Set storage pointer,bytes32) returns (bool)"
														}
													},
													"id": 1628,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8353:50:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 1614,
												"id": 1629,
												"nodeType": "Return",
												"src": "8346:57:5"
											}
										]
									},
									"documentation": {
										"id": 1605,
										"nodeType": "StructuredDocumentation",
										"src": "8089:164:5",
										"text": " @dev Add a value to a set. O(1).\n Returns true if the value was added to the set, that is if it was not\n already present."
									},
									"id": 1631,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "add",
									"nameLocation": "8268:3:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1611,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1608,
												"mutability": "mutable",
												"name": "set",
												"nameLocation": "8291:3:5",
												"nodeType": "VariableDeclaration",
												"scope": 1631,
												"src": "8272:22:5",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_AddressSet_$1604_storage_ptr",
													"typeString": "struct EnumerableSet.AddressSet"
												},
												"typeName": {
													"id": 1607,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1606,
														"name": "AddressSet",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1604,
														"src": "8272:10:5"
													},
													"referencedDeclaration": 1604,
													"src": "8272:10:5",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_AddressSet_$1604_storage_ptr",
														"typeString": "struct EnumerableSet.AddressSet"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1610,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "8304:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 1631,
												"src": "8296:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1609,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8296:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8271:39:5"
									},
									"returnParameters": {
										"id": 1614,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1613,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1631,
												"src": "8329:4:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1612,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "8329:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8328:6:5"
									},
									"scope": 1891,
									"src": "8259:152:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1657,
										"nodeType": "Block",
										"src": "8666:79:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 1643,
																"name": "set",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1635,
																"src": "8692:3:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_AddressSet_$1604_storage_ptr",
																	"typeString": "struct EnumerableSet.AddressSet storage pointer"
																}
															},
															"id": 1644,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "_inner",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1603,
															"src": "8692:10:5",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Set_$1303_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															}
														},
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"arguments": [
																				{
																					"id": 1651,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1637,
																					"src": "8728:5:5",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				],
																				"id": 1650,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "8720:7:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_uint160_$",
																					"typeString": "type(uint160)"
																				},
																				"typeName": {
																					"id": 1649,
																					"name": "uint160",
																					"nodeType": "ElementaryTypeName",
																					"src": "8720:7:5",
																					"typeDescriptions": {}
																				}
																			},
																			"id": 1652,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "typeConversion",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "8720:14:5",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint160",
																				"typeString": "uint160"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint160",
																				"typeString": "uint160"
																			}
																		],
																		"id": 1648,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "8712:7:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_uint256_$",
																			"typeString": "type(uint256)"
																		},
																		"typeName": {
																			"id": 1647,
																			"name": "uint256",
																			"nodeType": "ElementaryTypeName",
																			"src": "8712:7:5",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 1653,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "8712:23:5",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 1646,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "8704:7:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_bytes32_$",
																	"typeString": "type(bytes32)"
																},
																"typeName": {
																	"id": 1645,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "8704:7:5",
																	"typeDescriptions": {}
																}
															},
															"id": 1654,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8704:32:5",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_struct$_Set_$1303_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 1642,
														"name": "_remove",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1429,
														"src": "8684:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_struct$_Set_$1303_storage_ptr_$_t_bytes32_$returns$_t_bool_$",
															"typeString": "function (struct EnumerableSet.Set storage pointer,bytes32) returns (bool)"
														}
													},
													"id": 1655,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8684:53:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 1641,
												"id": 1656,
												"nodeType": "Return",
												"src": "8677:60:5"
											}
										]
									},
									"documentation": {
										"id": 1632,
										"nodeType": "StructuredDocumentation",
										"src": "8419:162:5",
										"text": " @dev Removes a value from a set. O(1).\n Returns true if the value was removed from the set, that is if it was\n present."
									},
									"id": 1658,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "remove",
									"nameLocation": "8596:6:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1638,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1635,
												"mutability": "mutable",
												"name": "set",
												"nameLocation": "8622:3:5",
												"nodeType": "VariableDeclaration",
												"scope": 1658,
												"src": "8603:22:5",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_AddressSet_$1604_storage_ptr",
													"typeString": "struct EnumerableSet.AddressSet"
												},
												"typeName": {
													"id": 1634,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1633,
														"name": "AddressSet",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1604,
														"src": "8603:10:5"
													},
													"referencedDeclaration": 1604,
													"src": "8603:10:5",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_AddressSet_$1604_storage_ptr",
														"typeString": "struct EnumerableSet.AddressSet"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1637,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "8635:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 1658,
												"src": "8627:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1636,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8627:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8602:39:5"
									},
									"returnParameters": {
										"id": 1641,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1640,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1658,
												"src": "8660:4:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1639,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "8660:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8659:6:5"
									},
									"scope": 1891,
									"src": "8587:158:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1684,
										"nodeType": "Block",
										"src": "8917:81:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 1670,
																"name": "set",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1662,
																"src": "8945:3:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_AddressSet_$1604_storage_ptr",
																	"typeString": "struct EnumerableSet.AddressSet storage pointer"
																}
															},
															"id": 1671,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "_inner",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1603,
															"src": "8945:10:5",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Set_$1303_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															}
														},
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"arguments": [
																				{
																					"id": 1678,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1664,
																					"src": "8981:5:5",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				],
																				"id": 1677,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "8973:7:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_uint160_$",
																					"typeString": "type(uint160)"
																				},
																				"typeName": {
																					"id": 1676,
																					"name": "uint160",
																					"nodeType": "ElementaryTypeName",
																					"src": "8973:7:5",
																					"typeDescriptions": {}
																				}
																			},
																			"id": 1679,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "typeConversion",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "8973:14:5",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint160",
																				"typeString": "uint160"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint160",
																				"typeString": "uint160"
																			}
																		],
																		"id": 1675,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "8965:7:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_uint256_$",
																			"typeString": "type(uint256)"
																		},
																		"typeName": {
																			"id": 1674,
																			"name": "uint256",
																			"nodeType": "ElementaryTypeName",
																			"src": "8965:7:5",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 1680,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "8965:23:5",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 1673,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "8957:7:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_bytes32_$",
																	"typeString": "type(bytes32)"
																},
																"typeName": {
																	"id": 1672,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "8957:7:5",
																	"typeDescriptions": {}
																}
															},
															"id": 1681,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8957:32:5",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_struct$_Set_$1303_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 1669,
														"name": "_contains",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1448,
														"src": "8935:9:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_struct$_Set_$1303_storage_ptr_$_t_bytes32_$returns$_t_bool_$",
															"typeString": "function (struct EnumerableSet.Set storage pointer,bytes32) view returns (bool)"
														}
													},
													"id": 1682,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8935:55:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 1668,
												"id": 1683,
												"nodeType": "Return",
												"src": "8928:62:5"
											}
										]
									},
									"documentation": {
										"id": 1659,
										"nodeType": "StructuredDocumentation",
										"src": "8753:72:5",
										"text": " @dev Returns true if the value is in the set. O(1)."
									},
									"id": 1685,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "contains",
									"nameLocation": "8840:8:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1665,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1662,
												"mutability": "mutable",
												"name": "set",
												"nameLocation": "8868:3:5",
												"nodeType": "VariableDeclaration",
												"scope": 1685,
												"src": "8849:22:5",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_AddressSet_$1604_storage_ptr",
													"typeString": "struct EnumerableSet.AddressSet"
												},
												"typeName": {
													"id": 1661,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1660,
														"name": "AddressSet",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1604,
														"src": "8849:10:5"
													},
													"referencedDeclaration": 1604,
													"src": "8849:10:5",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_AddressSet_$1604_storage_ptr",
														"typeString": "struct EnumerableSet.AddressSet"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1664,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "8881:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 1685,
												"src": "8873:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1663,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8873:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8848:39:5"
									},
									"returnParameters": {
										"id": 1668,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1667,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1685,
												"src": "8911:4:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1666,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "8911:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8910:6:5"
									},
									"scope": 1891,
									"src": "8831:167:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1699,
										"nodeType": "Block",
										"src": "9156:45:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 1695,
																"name": "set",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1689,
																"src": "9182:3:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_AddressSet_$1604_storage_ptr",
																	"typeString": "struct EnumerableSet.AddressSet storage pointer"
																}
															},
															"id": 1696,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "_inner",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1603,
															"src": "9182:10:5",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Set_$1303_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_struct$_Set_$1303_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															}
														],
														"id": 1694,
														"name": "_length",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1462,
														"src": "9174:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_struct$_Set_$1303_storage_ptr_$returns$_t_uint256_$",
															"typeString": "function (struct EnumerableSet.Set storage pointer) view returns (uint256)"
														}
													},
													"id": 1697,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9174:19:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1693,
												"id": 1698,
												"nodeType": "Return",
												"src": "9167:26:5"
											}
										]
									},
									"documentation": {
										"id": 1686,
										"nodeType": "StructuredDocumentation",
										"src": "9006:72:5",
										"text": " @dev Returns the number of values in the set. O(1)."
									},
									"id": 1700,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "length",
									"nameLocation": "9093:6:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1690,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1689,
												"mutability": "mutable",
												"name": "set",
												"nameLocation": "9119:3:5",
												"nodeType": "VariableDeclaration",
												"scope": 1700,
												"src": "9100:22:5",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_AddressSet_$1604_storage_ptr",
													"typeString": "struct EnumerableSet.AddressSet"
												},
												"typeName": {
													"id": 1688,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1687,
														"name": "AddressSet",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1604,
														"src": "9100:10:5"
													},
													"referencedDeclaration": 1604,
													"src": "9100:10:5",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_AddressSet_$1604_storage_ptr",
														"typeString": "struct EnumerableSet.AddressSet"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9099:24:5"
									},
									"returnParameters": {
										"id": 1693,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1692,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1700,
												"src": "9147:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1691,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9147:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9146:9:5"
									},
									"scope": 1891,
									"src": "9084:117:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1726,
										"nodeType": "Block",
										"src": "9638:75:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"arguments": [
																				{
																					"expression": {
																						"id": 1718,
																						"name": "set",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1704,
																						"src": "9684:3:5",
																						"typeDescriptions": {
																							"typeIdentifier": "t_struct$_AddressSet_$1604_storage_ptr",
																							"typeString": "struct EnumerableSet.AddressSet storage pointer"
																						}
																					},
																					"id": 1719,
																					"isConstant": false,
																					"isLValue": true,
																					"isPure": false,
																					"lValueRequested": false,
																					"memberName": "_inner",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 1603,
																					"src": "9684:10:5",
																					"typeDescriptions": {
																						"typeIdentifier": "t_struct$_Set_$1303_storage",
																						"typeString": "struct EnumerableSet.Set storage ref"
																					}
																				},
																				{
																					"id": 1720,
																					"name": "index",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1706,
																					"src": "9696:5:5",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_struct$_Set_$1303_storage",
																						"typeString": "struct EnumerableSet.Set storage ref"
																					},
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				],
																				"id": 1717,
																				"name": "_at",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1479,
																				"src": "9680:3:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_internal_view$_t_struct$_Set_$1303_storage_ptr_$_t_uint256_$returns$_t_bytes32_$",
																					"typeString": "function (struct EnumerableSet.Set storage pointer,uint256) view returns (bytes32)"
																				}
																			},
																			"id": 1721,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "9680:22:5",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		],
																		"id": 1716,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "9672:7:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_uint256_$",
																			"typeString": "type(uint256)"
																		},
																		"typeName": {
																			"id": 1715,
																			"name": "uint256",
																			"nodeType": "ElementaryTypeName",
																			"src": "9672:7:5",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 1722,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "9672:31:5",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 1714,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "9664:7:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_uint160_$",
																	"typeString": "type(uint160)"
																},
																"typeName": {
																	"id": 1713,
																	"name": "uint160",
																	"nodeType": "ElementaryTypeName",
																	"src": "9664:7:5",
																	"typeDescriptions": {}
																}
															},
															"id": 1723,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9664:40:5",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint160",
																"typeString": "uint160"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint160",
																"typeString": "uint160"
															}
														],
														"id": 1712,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "9656:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_address_$",
															"typeString": "type(address)"
														},
														"typeName": {
															"id": 1711,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "9656:7:5",
															"typeDescriptions": {}
														}
													},
													"id": 1724,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9656:49:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 1710,
												"id": 1725,
												"nodeType": "Return",
												"src": "9649:56:5"
											}
										]
									},
									"documentation": {
										"id": 1701,
										"nodeType": "StructuredDocumentation",
										"src": "9209:340:5",
										"text": " @dev Returns the value stored at position `index` in the set. O(1).\n Note that there are no guarantees on the ordering of values inside the\n array, and it may change when more values are added or removed.\n Requirements:\n - `index` must be strictly less than {length}."
									},
									"id": 1727,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "at",
									"nameLocation": "9564:2:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1707,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1704,
												"mutability": "mutable",
												"name": "set",
												"nameLocation": "9586:3:5",
												"nodeType": "VariableDeclaration",
												"scope": 1727,
												"src": "9567:22:5",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_AddressSet_$1604_storage_ptr",
													"typeString": "struct EnumerableSet.AddressSet"
												},
												"typeName": {
													"id": 1703,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1702,
														"name": "AddressSet",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1604,
														"src": "9567:10:5"
													},
													"referencedDeclaration": 1604,
													"src": "9567:10:5",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_AddressSet_$1604_storage_ptr",
														"typeString": "struct EnumerableSet.AddressSet"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1706,
												"mutability": "mutable",
												"name": "index",
												"nameLocation": "9599:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 1727,
												"src": "9591:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1705,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9591:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9566:39:5"
									},
									"returnParameters": {
										"id": 1710,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1709,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1727,
												"src": "9629:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1708,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9629:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9628:9:5"
									},
									"scope": 1891,
									"src": "9555:158:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1756,
										"nodeType": "Block",
										"src": "10344:229:5",
										"statements": [
											{
												"assignments": [
													1741
												],
												"declarations": [
													{
														"constant": false,
														"id": 1741,
														"mutability": "mutable",
														"name": "store",
														"nameLocation": "10372:5:5",
														"nodeType": "VariableDeclaration",
														"scope": 1756,
														"src": "10355:22:5",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
															"typeString": "bytes32[]"
														},
														"typeName": {
															"baseType": {
																"id": 1739,
																"name": "bytes32",
																"nodeType": "ElementaryTypeName",
																"src": "10355:7:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"id": 1740,
															"nodeType": "ArrayTypeName",
															"src": "10355:9:5",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
																"typeString": "bytes32[]"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1746,
												"initialValue": {
													"arguments": [
														{
															"expression": {
																"id": 1743,
																"name": "set",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1731,
																"src": "10388:3:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_AddressSet_$1604_storage_ptr",
																	"typeString": "struct EnumerableSet.AddressSet storage pointer"
																}
															},
															"id": 1744,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "_inner",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1603,
															"src": "10388:10:5",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Set_$1303_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_struct$_Set_$1303_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															}
														],
														"id": 1742,
														"name": "_values",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1493,
														"src": "10380:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_struct$_Set_$1303_storage_ptr_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$",
															"typeString": "function (struct EnumerableSet.Set storage pointer) view returns (bytes32[] memory)"
														}
													},
													"id": 1745,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10380:19:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
														"typeString": "bytes32[] memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "10355:44:5"
											},
											{
												"assignments": [
													1751
												],
												"declarations": [
													{
														"constant": false,
														"id": 1751,
														"mutability": "mutable",
														"name": "result",
														"nameLocation": "10427:6:5",
														"nodeType": "VariableDeclaration",
														"scope": 1756,
														"src": "10410:23:5",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
															"typeString": "address[]"
														},
														"typeName": {
															"baseType": {
																"id": 1749,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "10410:7:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 1750,
															"nodeType": "ArrayTypeName",
															"src": "10410:9:5",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
																"typeString": "address[]"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1752,
												"nodeType": "VariableDeclarationStatement",
												"src": "10410:23:5"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "10499:41:5",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "10514:15:5",
															"value": {
																"name": "store",
																"nodeType": "YulIdentifier",
																"src": "10524:5:5"
															},
															"variableNames": [
																{
																	"name": "result",
																	"nodeType": "YulIdentifier",
																	"src": "10514:6:5"
																}
															]
														}
													]
												},
												"documentation": "@solidity memory-safe-assembly",
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 1751,
														"isOffset": false,
														"isSlot": false,
														"src": "10514:6:5",
														"valueSize": 1
													},
													{
														"declaration": 1741,
														"isOffset": false,
														"isSlot": false,
														"src": "10524:5:5",
														"valueSize": 1
													}
												],
												"id": 1753,
												"nodeType": "InlineAssembly",
												"src": "10490:50:5"
											},
											{
												"expression": {
													"id": 1754,
													"name": "result",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1751,
													"src": "10559:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
														"typeString": "address[] memory"
													}
												},
												"functionReturnParameters": 1736,
												"id": 1755,
												"nodeType": "Return",
												"src": "10552:13:5"
											}
										]
									},
									"documentation": {
										"id": 1728,
										"nodeType": "StructuredDocumentation",
										"src": "9721:536:5",
										"text": " @dev Return the entire set in an array\n WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n this function has an unbounded cost, and using it as part of a state-changing function may render the function\n uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block."
									},
									"id": 1757,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "values",
									"nameLocation": "10272:6:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1732,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1731,
												"mutability": "mutable",
												"name": "set",
												"nameLocation": "10298:3:5",
												"nodeType": "VariableDeclaration",
												"scope": 1757,
												"src": "10279:22:5",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_AddressSet_$1604_storage_ptr",
													"typeString": "struct EnumerableSet.AddressSet"
												},
												"typeName": {
													"id": 1730,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1729,
														"name": "AddressSet",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1604,
														"src": "10279:10:5"
													},
													"referencedDeclaration": 1604,
													"src": "10279:10:5",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_AddressSet_$1604_storage_ptr",
														"typeString": "struct EnumerableSet.AddressSet"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10278:24:5"
									},
									"returnParameters": {
										"id": 1736,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1735,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1757,
												"src": "10326:16:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
													"typeString": "address[]"
												},
												"typeName": {
													"baseType": {
														"id": 1733,
														"name": "address",
														"nodeType": "ElementaryTypeName",
														"src": "10326:7:5",
														"stateMutability": "nonpayable",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"id": 1734,
													"nodeType": "ArrayTypeName",
													"src": "10326:9:5",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
														"typeString": "address[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10325:18:5"
									},
									"scope": 1891,
									"src": "10263:310:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"canonicalName": "EnumerableSet.UintSet",
									"id": 1761,
									"members": [
										{
											"constant": false,
											"id": 1760,
											"mutability": "mutable",
											"name": "_inner",
											"nameLocation": "10629:6:5",
											"nodeType": "VariableDeclaration",
											"scope": 1761,
											"src": "10625:10:5",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_struct$_Set_$1303_storage_ptr",
												"typeString": "struct EnumerableSet.Set"
											},
											"typeName": {
												"id": 1759,
												"nodeType": "UserDefinedTypeName",
												"pathNode": {
													"id": 1758,
													"name": "Set",
													"nodeType": "IdentifierPath",
													"referencedDeclaration": 1303,
													"src": "10625:3:5"
												},
												"referencedDeclaration": 1303,
												"src": "10625:3:5",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Set_$1303_storage_ptr",
													"typeString": "struct EnumerableSet.Set"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "UintSet",
									"nameLocation": "10606:7:5",
									"nodeType": "StructDefinition",
									"scope": 1891,
									"src": "10599:44:5",
									"visibility": "public"
								},
								{
									"body": {
										"id": 1781,
										"nodeType": "Block",
										"src": "10894:58:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 1773,
																"name": "set",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1765,
																"src": "10917:3:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_UintSet_$1761_storage_ptr",
																	"typeString": "struct EnumerableSet.UintSet storage pointer"
																}
															},
															"id": 1774,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "_inner",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1760,
															"src": "10917:10:5",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Set_$1303_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															}
														},
														{
															"arguments": [
																{
																	"id": 1777,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1767,
																	"src": "10937:5:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 1776,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "10929:7:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_bytes32_$",
																	"typeString": "type(bytes32)"
																},
																"typeName": {
																	"id": 1775,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "10929:7:5",
																	"typeDescriptions": {}
																}
															},
															"id": 1778,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "10929:14:5",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_struct$_Set_$1303_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 1772,
														"name": "_add",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1345,
														"src": "10912:4:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_struct$_Set_$1303_storage_ptr_$_t_bytes32_$returns$_t_bool_$",
															"typeString": "function (struct EnumerableSet.Set storage pointer,bytes32) returns (bool)"
														}
													},
													"id": 1779,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10912:32:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 1771,
												"id": 1780,
												"nodeType": "Return",
												"src": "10905:39:5"
											}
										]
									},
									"documentation": {
										"id": 1762,
										"nodeType": "StructuredDocumentation",
										"src": "10651:164:5",
										"text": " @dev Add a value to a set. O(1).\n Returns true if the value was added to the set, that is if it was not\n already present."
									},
									"id": 1782,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "add",
									"nameLocation": "10830:3:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1768,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1765,
												"mutability": "mutable",
												"name": "set",
												"nameLocation": "10850:3:5",
												"nodeType": "VariableDeclaration",
												"scope": 1782,
												"src": "10834:19:5",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_UintSet_$1761_storage_ptr",
													"typeString": "struct EnumerableSet.UintSet"
												},
												"typeName": {
													"id": 1764,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1763,
														"name": "UintSet",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1761,
														"src": "10834:7:5"
													},
													"referencedDeclaration": 1761,
													"src": "10834:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_UintSet_$1761_storage_ptr",
														"typeString": "struct EnumerableSet.UintSet"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1767,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "10863:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 1782,
												"src": "10855:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1766,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10855:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10833:36:5"
									},
									"returnParameters": {
										"id": 1771,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1770,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1782,
												"src": "10888:4:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1769,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "10888:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10887:6:5"
									},
									"scope": 1891,
									"src": "10821:131:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1802,
										"nodeType": "Block",
										"src": "11204:61:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 1794,
																"name": "set",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1786,
																"src": "11230:3:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_UintSet_$1761_storage_ptr",
																	"typeString": "struct EnumerableSet.UintSet storage pointer"
																}
															},
															"id": 1795,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "_inner",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1760,
															"src": "11230:10:5",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Set_$1303_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															}
														},
														{
															"arguments": [
																{
																	"id": 1798,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1788,
																	"src": "11250:5:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 1797,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "11242:7:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_bytes32_$",
																	"typeString": "type(bytes32)"
																},
																"typeName": {
																	"id": 1796,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "11242:7:5",
																	"typeDescriptions": {}
																}
															},
															"id": 1799,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "11242:14:5",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_struct$_Set_$1303_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 1793,
														"name": "_remove",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1429,
														"src": "11222:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_struct$_Set_$1303_storage_ptr_$_t_bytes32_$returns$_t_bool_$",
															"typeString": "function (struct EnumerableSet.Set storage pointer,bytes32) returns (bool)"
														}
													},
													"id": 1800,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "11222:35:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 1792,
												"id": 1801,
												"nodeType": "Return",
												"src": "11215:42:5"
											}
										]
									},
									"documentation": {
										"id": 1783,
										"nodeType": "StructuredDocumentation",
										"src": "10960:162:5",
										"text": " @dev Removes a value from a set. O(1).\n Returns true if the value was removed from the set, that is if it was\n present."
									},
									"id": 1803,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "remove",
									"nameLocation": "11137:6:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1789,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1786,
												"mutability": "mutable",
												"name": "set",
												"nameLocation": "11160:3:5",
												"nodeType": "VariableDeclaration",
												"scope": 1803,
												"src": "11144:19:5",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_UintSet_$1761_storage_ptr",
													"typeString": "struct EnumerableSet.UintSet"
												},
												"typeName": {
													"id": 1785,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1784,
														"name": "UintSet",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1761,
														"src": "11144:7:5"
													},
													"referencedDeclaration": 1761,
													"src": "11144:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_UintSet_$1761_storage_ptr",
														"typeString": "struct EnumerableSet.UintSet"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1788,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "11173:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 1803,
												"src": "11165:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1787,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11165:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11143:36:5"
									},
									"returnParameters": {
										"id": 1792,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1791,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1803,
												"src": "11198:4:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1790,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "11198:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11197:6:5"
									},
									"scope": 1891,
									"src": "11128:137:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1823,
										"nodeType": "Block",
										"src": "11434:63:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 1815,
																"name": "set",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1807,
																"src": "11462:3:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_UintSet_$1761_storage_ptr",
																	"typeString": "struct EnumerableSet.UintSet storage pointer"
																}
															},
															"id": 1816,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "_inner",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1760,
															"src": "11462:10:5",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Set_$1303_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															}
														},
														{
															"arguments": [
																{
																	"id": 1819,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1809,
																	"src": "11482:5:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 1818,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "11474:7:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_bytes32_$",
																	"typeString": "type(bytes32)"
																},
																"typeName": {
																	"id": 1817,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "11474:7:5",
																	"typeDescriptions": {}
																}
															},
															"id": 1820,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "11474:14:5",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_struct$_Set_$1303_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 1814,
														"name": "_contains",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1448,
														"src": "11452:9:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_struct$_Set_$1303_storage_ptr_$_t_bytes32_$returns$_t_bool_$",
															"typeString": "function (struct EnumerableSet.Set storage pointer,bytes32) view returns (bool)"
														}
													},
													"id": 1821,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "11452:37:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 1813,
												"id": 1822,
												"nodeType": "Return",
												"src": "11445:44:5"
											}
										]
									},
									"documentation": {
										"id": 1804,
										"nodeType": "StructuredDocumentation",
										"src": "11273:72:5",
										"text": " @dev Returns true if the value is in the set. O(1)."
									},
									"id": 1824,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "contains",
									"nameLocation": "11360:8:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1810,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1807,
												"mutability": "mutable",
												"name": "set",
												"nameLocation": "11385:3:5",
												"nodeType": "VariableDeclaration",
												"scope": 1824,
												"src": "11369:19:5",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_UintSet_$1761_storage_ptr",
													"typeString": "struct EnumerableSet.UintSet"
												},
												"typeName": {
													"id": 1806,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1805,
														"name": "UintSet",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1761,
														"src": "11369:7:5"
													},
													"referencedDeclaration": 1761,
													"src": "11369:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_UintSet_$1761_storage_ptr",
														"typeString": "struct EnumerableSet.UintSet"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1809,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "11398:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 1824,
												"src": "11390:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1808,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11390:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11368:36:5"
									},
									"returnParameters": {
										"id": 1813,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1812,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1824,
												"src": "11428:4:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1811,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "11428:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11427:6:5"
									},
									"scope": 1891,
									"src": "11351:146:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1838,
										"nodeType": "Block",
										"src": "11652:45:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 1834,
																"name": "set",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1828,
																"src": "11678:3:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_UintSet_$1761_storage_ptr",
																	"typeString": "struct EnumerableSet.UintSet storage pointer"
																}
															},
															"id": 1835,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "_inner",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1760,
															"src": "11678:10:5",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Set_$1303_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_struct$_Set_$1303_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															}
														],
														"id": 1833,
														"name": "_length",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1462,
														"src": "11670:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_struct$_Set_$1303_storage_ptr_$returns$_t_uint256_$",
															"typeString": "function (struct EnumerableSet.Set storage pointer) view returns (uint256)"
														}
													},
													"id": 1836,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "11670:19:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1832,
												"id": 1837,
												"nodeType": "Return",
												"src": "11663:26:5"
											}
										]
									},
									"documentation": {
										"id": 1825,
										"nodeType": "StructuredDocumentation",
										"src": "11505:72:5",
										"text": " @dev Returns the number of values on the set. O(1)."
									},
									"id": 1839,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "length",
									"nameLocation": "11592:6:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1829,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1828,
												"mutability": "mutable",
												"name": "set",
												"nameLocation": "11615:3:5",
												"nodeType": "VariableDeclaration",
												"scope": 1839,
												"src": "11599:19:5",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_UintSet_$1761_storage_ptr",
													"typeString": "struct EnumerableSet.UintSet"
												},
												"typeName": {
													"id": 1827,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1826,
														"name": "UintSet",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1761,
														"src": "11599:7:5"
													},
													"referencedDeclaration": 1761,
													"src": "11599:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_UintSet_$1761_storage_ptr",
														"typeString": "struct EnumerableSet.UintSet"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11598:21:5"
									},
									"returnParameters": {
										"id": 1832,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1831,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1839,
												"src": "11643:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1830,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11643:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11642:9:5"
									},
									"scope": 1891,
									"src": "11583:114:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1859,
										"nodeType": "Block",
										"src": "12131:57:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"expression": {
																		"id": 1853,
																		"name": "set",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1843,
																		"src": "12161:3:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_UintSet_$1761_storage_ptr",
																			"typeString": "struct EnumerableSet.UintSet storage pointer"
																		}
																	},
																	"id": 1854,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "_inner",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 1760,
																	"src": "12161:10:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Set_$1303_storage",
																		"typeString": "struct EnumerableSet.Set storage ref"
																	}
																},
																{
																	"id": 1855,
																	"name": "index",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1845,
																	"src": "12173:5:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_struct$_Set_$1303_storage",
																		"typeString": "struct EnumerableSet.Set storage ref"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 1852,
																"name": "_at",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1479,
																"src": "12157:3:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$_t_struct$_Set_$1303_storage_ptr_$_t_uint256_$returns$_t_bytes32_$",
																	"typeString": "function (struct EnumerableSet.Set storage pointer,uint256) view returns (bytes32)"
																}
															},
															"id": 1856,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "12157:22:5",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 1851,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "12149:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_uint256_$",
															"typeString": "type(uint256)"
														},
														"typeName": {
															"id": 1850,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "12149:7:5",
															"typeDescriptions": {}
														}
													},
													"id": 1857,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "12149:31:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1849,
												"id": 1858,
												"nodeType": "Return",
												"src": "12142:38:5"
											}
										]
									},
									"documentation": {
										"id": 1840,
										"nodeType": "StructuredDocumentation",
										"src": "11705:340:5",
										"text": " @dev Returns the value stored at position `index` in the set. O(1).\n Note that there are no guarantees on the ordering of values inside the\n array, and it may change when more values are added or removed.\n Requirements:\n - `index` must be strictly less than {length}."
									},
									"id": 1860,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "at",
									"nameLocation": "12060:2:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1846,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1843,
												"mutability": "mutable",
												"name": "set",
												"nameLocation": "12079:3:5",
												"nodeType": "VariableDeclaration",
												"scope": 1860,
												"src": "12063:19:5",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_UintSet_$1761_storage_ptr",
													"typeString": "struct EnumerableSet.UintSet"
												},
												"typeName": {
													"id": 1842,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1841,
														"name": "UintSet",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1761,
														"src": "12063:7:5"
													},
													"referencedDeclaration": 1761,
													"src": "12063:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_UintSet_$1761_storage_ptr",
														"typeString": "struct EnumerableSet.UintSet"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1845,
												"mutability": "mutable",
												"name": "index",
												"nameLocation": "12092:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 1860,
												"src": "12084:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1844,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12084:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12062:36:5"
									},
									"returnParameters": {
										"id": 1849,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1848,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1860,
												"src": "12122:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1847,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12122:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12121:9:5"
									},
									"scope": 1891,
									"src": "12051:137:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1889,
										"nodeType": "Block",
										"src": "12816:229:5",
										"statements": [
											{
												"assignments": [
													1874
												],
												"declarations": [
													{
														"constant": false,
														"id": 1874,
														"mutability": "mutable",
														"name": "store",
														"nameLocation": "12844:5:5",
														"nodeType": "VariableDeclaration",
														"scope": 1889,
														"src": "12827:22:5",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
															"typeString": "bytes32[]"
														},
														"typeName": {
															"baseType": {
																"id": 1872,
																"name": "bytes32",
																"nodeType": "ElementaryTypeName",
																"src": "12827:7:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"id": 1873,
															"nodeType": "ArrayTypeName",
															"src": "12827:9:5",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
																"typeString": "bytes32[]"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1879,
												"initialValue": {
													"arguments": [
														{
															"expression": {
																"id": 1876,
																"name": "set",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1864,
																"src": "12860:3:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_UintSet_$1761_storage_ptr",
																	"typeString": "struct EnumerableSet.UintSet storage pointer"
																}
															},
															"id": 1877,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "_inner",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1760,
															"src": "12860:10:5",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Set_$1303_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_struct$_Set_$1303_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															}
														],
														"id": 1875,
														"name": "_values",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1493,
														"src": "12852:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_struct$_Set_$1303_storage_ptr_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$",
															"typeString": "function (struct EnumerableSet.Set storage pointer) view returns (bytes32[] memory)"
														}
													},
													"id": 1878,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "12852:19:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
														"typeString": "bytes32[] memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "12827:44:5"
											},
											{
												"assignments": [
													1884
												],
												"declarations": [
													{
														"constant": false,
														"id": 1884,
														"mutability": "mutable",
														"name": "result",
														"nameLocation": "12899:6:5",
														"nodeType": "VariableDeclaration",
														"scope": 1889,
														"src": "12882:23:5",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
															"typeString": "uint256[]"
														},
														"typeName": {
															"baseType": {
																"id": 1882,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "12882:7:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1883,
															"nodeType": "ArrayTypeName",
															"src": "12882:9:5",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
																"typeString": "uint256[]"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1885,
												"nodeType": "VariableDeclarationStatement",
												"src": "12882:23:5"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "12971:41:5",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "12986:15:5",
															"value": {
																"name": "store",
																"nodeType": "YulIdentifier",
																"src": "12996:5:5"
															},
															"variableNames": [
																{
																	"name": "result",
																	"nodeType": "YulIdentifier",
																	"src": "12986:6:5"
																}
															]
														}
													]
												},
												"documentation": "@solidity memory-safe-assembly",
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 1884,
														"isOffset": false,
														"isSlot": false,
														"src": "12986:6:5",
														"valueSize": 1
													},
													{
														"declaration": 1874,
														"isOffset": false,
														"isSlot": false,
														"src": "12996:5:5",
														"valueSize": 1
													}
												],
												"id": 1886,
												"nodeType": "InlineAssembly",
												"src": "12962:50:5"
											},
											{
												"expression": {
													"id": 1887,
													"name": "result",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1884,
													"src": "13031:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
														"typeString": "uint256[] memory"
													}
												},
												"functionReturnParameters": 1869,
												"id": 1888,
												"nodeType": "Return",
												"src": "13024:13:5"
											}
										]
									},
									"documentation": {
										"id": 1861,
										"nodeType": "StructuredDocumentation",
										"src": "12196:536:5",
										"text": " @dev Return the entire set in an array\n WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n this function has an unbounded cost, and using it as part of a state-changing function may render the function\n uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block."
									},
									"id": 1890,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "values",
									"nameLocation": "12747:6:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1865,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1864,
												"mutability": "mutable",
												"name": "set",
												"nameLocation": "12770:3:5",
												"nodeType": "VariableDeclaration",
												"scope": 1890,
												"src": "12754:19:5",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_UintSet_$1761_storage_ptr",
													"typeString": "struct EnumerableSet.UintSet"
												},
												"typeName": {
													"id": 1863,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1862,
														"name": "UintSet",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1761,
														"src": "12754:7:5"
													},
													"referencedDeclaration": 1761,
													"src": "12754:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_UintSet_$1761_storage_ptr",
														"typeString": "struct EnumerableSet.UintSet"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12753:21:5"
									},
									"returnParameters": {
										"id": 1869,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1868,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1890,
												"src": "12798:16:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
													"typeString": "uint256[]"
												},
												"typeName": {
													"baseType": {
														"id": 1866,
														"name": "uint256",
														"nodeType": "ElementaryTypeName",
														"src": "12798:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1867,
													"nodeType": "ArrayTypeName",
													"src": "12798:9:5",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
														"typeString": "uint256[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12797:18:5"
									},
									"scope": 1891,
									"src": "12738:307:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 1892,
							"src": "1265:11783:5",
							"usedErrors": []
						}
					],
					"src": "118:12930:5"
				},
				"id": 5
			},
			"Utils/Ownable.sol": {
				"ast": {
					"absolutePath": "Utils/Ownable.sol",
					"exportedSymbols": {
						"Context": [
							1292
						],
						"Ownable": [
							1996
						]
					},
					"id": 1997,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1893,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "90:23:6"
						},
						{
							"absolutePath": "Utils/Context.sol",
							"file": "./Context.sol",
							"id": 1894,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1997,
							"sourceUnit": 1293,
							"src": "117:23:6",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 1896,
										"name": "Context",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1292,
										"src": "680:7:6"
									},
									"id": 1897,
									"nodeType": "InheritanceSpecifier",
									"src": "680:7:6"
								}
							],
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 1895,
								"nodeType": "StructuredDocumentation",
								"src": "144:505:6",
								"text": " @dev Contract module which provides a basic access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n By default, the owner account will be the one that deploys the contract. This\n can later be changed with {transferOwnership}.\n This module is used through inheritance. It will make available the modifier\n `onlyOwner`, which can be applied to your functions to restrict their use to\n the owner."
							},
							"fullyImplemented": true,
							"id": 1996,
							"linearizedBaseContracts": [
								1996,
								1292
							],
							"name": "Ownable",
							"nameLocation": "669:7:6",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 1899,
									"mutability": "mutable",
									"name": "_owner",
									"nameLocation": "711:6:6",
									"nodeType": "VariableDeclaration",
									"scope": 1996,
									"src": "695:22:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 1898,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "695:7:6",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "private"
								},
								{
									"anonymous": false,
									"id": 1905,
									"name": "OwnershipTransferred",
									"nameLocation": "732:20:6",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1904,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1901,
												"indexed": true,
												"mutability": "mutable",
												"name": "previousOwner",
												"nameLocation": "769:13:6",
												"nodeType": "VariableDeclaration",
												"scope": 1905,
												"src": "753:29:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1900,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "753:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1903,
												"indexed": true,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "800:8:6",
												"nodeType": "VariableDeclaration",
												"scope": 1905,
												"src": "784:24:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1902,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "784:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "752:57:6"
									},
									"src": "726:84:6"
								},
								{
									"body": {
										"id": 1914,
										"nodeType": "Block",
										"src": "931:51:6",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 1910,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1282,
																"src": "961:10:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 1911,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "961:12:6",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 1909,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1995,
														"src": "942:18:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 1912,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "942:32:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1913,
												"nodeType": "ExpressionStatement",
												"src": "942:32:6"
											}
										]
									},
									"documentation": {
										"id": 1906,
										"nodeType": "StructuredDocumentation",
										"src": "818:93:6",
										"text": " @dev Initializes the contract setting the deployer as the initial owner."
									},
									"id": 1915,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1907,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "928:2:6"
									},
									"returnParameters": {
										"id": 1908,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "931:0:6"
									},
									"scope": 1996,
									"src": "917:65:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1923,
										"nodeType": "Block",
										"src": "1118:32:6",
										"statements": [
											{
												"expression": {
													"id": 1921,
													"name": "_owner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1899,
													"src": "1136:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 1920,
												"id": 1922,
												"nodeType": "Return",
												"src": "1129:13:6"
											}
										]
									},
									"documentation": {
										"id": 1916,
										"nodeType": "StructuredDocumentation",
										"src": "990:67:6",
										"text": " @dev Returns the address of the current owner."
									},
									"functionSelector": "8da5cb5b",
									"id": 1924,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "owner",
									"nameLocation": "1072:5:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1917,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1077:2:6"
									},
									"returnParameters": {
										"id": 1920,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1919,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1924,
												"src": "1109:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1918,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1109:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1108:9:6"
									},
									"scope": 1996,
									"src": "1063:87:6",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1937,
										"nodeType": "Block",
										"src": "1264:99:6",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 1932,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 1928,
																	"name": "owner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1924,
																	"src": "1283:5:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																		"typeString": "function () view returns (address)"
																	}
																},
																"id": 1929,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1283:7:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 1930,
																	"name": "_msgSender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1282,
																	"src": "1294:10:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																		"typeString": "function () view returns (address)"
																	}
																},
																"id": 1931,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1294:12:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "1283:23:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572",
															"id": 1933,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1308:34:6",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe",
																"typeString": "literal_string \"Ownable: caller is not the owner\""
															},
															"value": "Ownable: caller is not the owner"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe",
																"typeString": "literal_string \"Ownable: caller is not the owner\""
															}
														],
														"id": 1927,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1275:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1934,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1275:68:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1935,
												"nodeType": "ExpressionStatement",
												"src": "1275:68:6"
											},
											{
												"id": 1936,
												"nodeType": "PlaceholderStatement",
												"src": "1354:1:6"
											}
										]
									},
									"documentation": {
										"id": 1925,
										"nodeType": "StructuredDocumentation",
										"src": "1158:79:6",
										"text": " @dev Throws if called by any account other than the owner."
									},
									"id": 1938,
									"name": "onlyOwner",
									"nameLocation": "1252:9:6",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 1926,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1261:2:6"
									},
									"src": "1243:120:6",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1951,
										"nodeType": "Block",
										"src": "1768:49:6",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 1947,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1806:1:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 1946,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "1798:7:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1945,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "1798:7:6",
																	"typeDescriptions": {}
																}
															},
															"id": 1948,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1798:10:6",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 1944,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1995,
														"src": "1779:18:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 1949,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1779:30:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1950,
												"nodeType": "ExpressionStatement",
												"src": "1779:30:6"
											}
										]
									},
									"documentation": {
										"id": 1939,
										"nodeType": "StructuredDocumentation",
										"src": "1371:337:6",
										"text": " @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions anymore. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby removing any functionality that is only available to the owner."
									},
									"functionSelector": "715018a6",
									"id": 1952,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1942,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1941,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 1938,
												"src": "1758:9:6"
											},
											"nodeType": "ModifierInvocation",
											"src": "1758:9:6"
										}
									],
									"name": "renounceOwnership",
									"nameLocation": "1723:17:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1940,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1740:2:6"
									},
									"returnParameters": {
										"id": 1943,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1768:0:6"
									},
									"scope": 1996,
									"src": "1714:103:6",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1974,
										"nodeType": "Block",
										"src": "2042:131:6",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 1966,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1961,
																"name": "newOwner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1955,
																"src": "2061:8:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 1964,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2081:1:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 1963,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "2073:7:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 1962,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "2073:7:6",
																		"typeDescriptions": {}
																	}
																},
																"id": 1965,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2073:10:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "2061:22:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373",
															"id": 1967,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2085:40:6",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe",
																"typeString": "literal_string \"Ownable: new owner is the zero address\""
															},
															"value": "Ownable: new owner is the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe",
																"typeString": "literal_string \"Ownable: new owner is the zero address\""
															}
														],
														"id": 1960,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2053:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1968,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2053:73:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1969,
												"nodeType": "ExpressionStatement",
												"src": "2053:73:6"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1971,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1955,
															"src": "2156:8:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 1970,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1995,
														"src": "2137:18:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 1972,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2137:28:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1973,
												"nodeType": "ExpressionStatement",
												"src": "2137:28:6"
											}
										]
									},
									"documentation": {
										"id": 1953,
										"nodeType": "StructuredDocumentation",
										"src": "1825:141:6",
										"text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."
									},
									"functionSelector": "f2fde38b",
									"id": 1975,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1958,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1957,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 1938,
												"src": "2032:9:6"
											},
											"nodeType": "ModifierInvocation",
											"src": "2032:9:6"
										}
									],
									"name": "transferOwnership",
									"nameLocation": "1981:17:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1956,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1955,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "2007:8:6",
												"nodeType": "VariableDeclaration",
												"scope": 1975,
												"src": "1999:16:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1954,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1999:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1998:18:6"
									},
									"returnParameters": {
										"id": 1959,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2042:0:6"
									},
									"scope": 1996,
									"src": "1972:201:6",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1994,
										"nodeType": "Block",
										"src": "2396:128:6",
										"statements": [
											{
												"assignments": [
													1982
												],
												"declarations": [
													{
														"constant": false,
														"id": 1982,
														"mutability": "mutable",
														"name": "oldOwner",
														"nameLocation": "2415:8:6",
														"nodeType": "VariableDeclaration",
														"scope": 1994,
														"src": "2407:16:6",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 1981,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "2407:7:6",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1984,
												"initialValue": {
													"id": 1983,
													"name": "_owner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1899,
													"src": "2426:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2407:25:6"
											},
											{
												"expression": {
													"id": 1987,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1985,
														"name": "_owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1899,
														"src": "2443:6:6",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1986,
														"name": "newOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1978,
														"src": "2452:8:6",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "2443:17:6",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 1988,
												"nodeType": "ExpressionStatement",
												"src": "2443:17:6"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 1990,
															"name": "oldOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1982,
															"src": "2497:8:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1991,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1978,
															"src": "2507:8:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 1989,
														"name": "OwnershipTransferred",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1905,
														"src": "2476:20:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
															"typeString": "function (address,address)"
														}
													},
													"id": 1992,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2476:40:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1993,
												"nodeType": "EmitStatement",
												"src": "2471:45:6"
											}
										]
									},
									"documentation": {
										"id": 1976,
										"nodeType": "StructuredDocumentation",
										"src": "2181:146:6",
										"text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Internal function without access restriction."
									},
									"id": 1995,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_transferOwnership",
									"nameLocation": "2342:18:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1979,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1978,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "2369:8:6",
												"nodeType": "VariableDeclaration",
												"scope": 1995,
												"src": "2361:16:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1977,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2361:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2360:18:6"
									},
									"returnParameters": {
										"id": 1980,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2396:0:6"
									},
									"scope": 1996,
									"src": "2333:191:6",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 1997,
							"src": "651:1876:6",
							"usedErrors": []
						}
					],
					"src": "90:2437:6"
				},
				"id": 6
			},
			"Utils/ReentrancyGuard.sol": {
				"ast": {
					"absolutePath": "Utils/ReentrancyGuard.sol",
					"exportedSymbols": {
						"ReentrancyGuard": [
							2036
						]
					},
					"id": 2037,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1998,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "100:23:7"
						},
						{
							"abstract": true,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 1999,
								"nodeType": "StructuredDocumentation",
								"src": "127:765:7",
								"text": " @dev Contract module that helps prevent reentrant calls to a function.\n Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n available, which can be applied to functions to make sure there are no nested\n (reentrant) calls to them.\n Note that because there is a single `nonReentrant` guard, functions marked as\n `nonReentrant` may not call one another. This can be worked around by making\n those functions `private`, and then adding `external` `nonReentrant` entry\n points to them.\n TIP: If you would like to learn more about reentrancy and alternative ways\n to protect against it, check out our blog post\n https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul]."
							},
							"fullyImplemented": true,
							"id": 2036,
							"linearizedBaseContracts": [
								2036
							],
							"name": "ReentrancyGuard",
							"nameLocation": "912:15:7",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": true,
									"id": 2002,
									"mutability": "constant",
									"name": "_NOT_ENTERED",
									"nameLocation": "1719:12:7",
									"nodeType": "VariableDeclaration",
									"scope": 2036,
									"src": "1694:41:7",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 2000,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1694:7:7",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "31",
										"id": 2001,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "1734:1:7",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_1_by_1",
											"typeString": "int_const 1"
										},
										"value": "1"
									},
									"visibility": "private"
								},
								{
									"constant": true,
									"id": 2005,
									"mutability": "constant",
									"name": "_ENTERED",
									"nameLocation": "1767:8:7",
									"nodeType": "VariableDeclaration",
									"scope": 2036,
									"src": "1742:37:7",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 2003,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1742:7:7",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "32",
										"id": 2004,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "1778:1:7",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_2_by_1",
											"typeString": "int_const 2"
										},
										"value": "2"
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 2007,
									"mutability": "mutable",
									"name": "_status",
									"nameLocation": "1804:7:7",
									"nodeType": "VariableDeclaration",
									"scope": 2036,
									"src": "1788:23:7",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 2006,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1788:7:7",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 2014,
										"nodeType": "Block",
										"src": "1834:41:7",
										"statements": [
											{
												"expression": {
													"id": 2012,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2010,
														"name": "_status",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2007,
														"src": "1845:7:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 2011,
														"name": "_NOT_ENTERED",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2002,
														"src": "1855:12:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1845:22:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 2013,
												"nodeType": "ExpressionStatement",
												"src": "1845:22:7"
											}
										]
									},
									"id": 2015,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2008,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1831:2:7"
									},
									"returnParameters": {
										"id": 2009,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1834:0:7"
									},
									"scope": 2036,
									"src": "1820:55:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2034,
										"nodeType": "Block",
										"src": "2285:433:7",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2021,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2019,
																"name": "_status",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2007,
																"src": "2376:7:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"id": 2020,
																"name": "_ENTERED",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2005,
																"src": "2387:8:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2376:19:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "5265656e7472616e637947756172643a207265656e7472616e742063616c6c",
															"id": 2022,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2397:33:7",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619",
																"typeString": "literal_string \"ReentrancyGuard: reentrant call\""
															},
															"value": "ReentrancyGuard: reentrant call"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619",
																"typeString": "literal_string \"ReentrancyGuard: reentrant call\""
															}
														],
														"id": 2018,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2368:7:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 2023,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2368:63:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2024,
												"nodeType": "ExpressionStatement",
												"src": "2368:63:7"
											},
											{
												"expression": {
													"id": 2027,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2025,
														"name": "_status",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2007,
														"src": "2509:7:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 2026,
														"name": "_ENTERED",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2005,
														"src": "2519:8:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2509:18:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 2028,
												"nodeType": "ExpressionStatement",
												"src": "2509:18:7"
											},
											{
												"id": 2029,
												"nodeType": "PlaceholderStatement",
												"src": "2540:1:7"
											},
											{
												"expression": {
													"id": 2032,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2030,
														"name": "_status",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2007,
														"src": "2688:7:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 2031,
														"name": "_NOT_ENTERED",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2002,
														"src": "2698:12:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2688:22:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 2033,
												"nodeType": "ExpressionStatement",
												"src": "2688:22:7"
											}
										]
									},
									"documentation": {
										"id": 2016,
										"nodeType": "StructuredDocumentation",
										"src": "1883:372:7",
										"text": " @dev Prevents a contract from calling itself, directly or indirectly.\n Calling a `nonReentrant` function from another `nonReentrant`\n function is not supported. It is possible to prevent this from happening\n by making the `nonReentrant` function external, and making it call a\n `private` function that does the actual work."
									},
									"id": 2035,
									"name": "nonReentrant",
									"nameLocation": "2270:12:7",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 2017,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2282:2:7"
									},
									"src": "2261:457:7",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 2037,
							"src": "894:1827:7",
							"usedErrors": []
						}
					],
					"src": "100:2621:7"
				},
				"id": 7
			},
			"Utils/SafeMath.sol": {
				"ast": {
					"absolutePath": "Utils/SafeMath.sol",
					"exportedSymbols": {
						"SafeMath": [
							2348
						]
					},
					"id": 2349,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2038,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "110:23:8"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 2039,
								"nodeType": "StructuredDocumentation",
								"src": "294:201:8",
								"text": " @dev Wrappers over Solidity's arithmetic operations.\n NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n now has built in overflow checking."
							},
							"fullyImplemented": true,
							"id": 2348,
							"linearizedBaseContracts": [
								2348
							],
							"name": "SafeMath",
							"nameLocation": "505:8:8",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 2070,
										"nodeType": "Block",
										"src": "738:146:8",
										"statements": [
											{
												"id": 2069,
												"nodeType": "UncheckedBlock",
												"src": "749:128:8",
												"statements": [
													{
														"assignments": [
															2052
														],
														"declarations": [
															{
																"constant": false,
																"id": 2052,
																"mutability": "mutable",
																"name": "c",
																"nameLocation": "782:1:8",
																"nodeType": "VariableDeclaration",
																"scope": 2069,
																"src": "774:9:8",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 2051,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "774:7:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2056,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2055,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2053,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2042,
																"src": "786:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"id": 2054,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2044,
																"src": "790:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "786:5:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "774:17:8"
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2059,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2057,
																"name": "c",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2052,
																"src": "810:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<",
															"rightExpression": {
																"id": 2058,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2042,
																"src": "814:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "810:5:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2064,
														"nodeType": "IfStatement",
														"src": "806:28:8",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "66616c7365",
																		"id": 2060,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "825:5:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "false"
																	},
																	{
																		"hexValue": "30",
																		"id": 2061,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "832:1:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 2062,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "824:10:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 2050,
															"id": 2063,
															"nodeType": "Return",
															"src": "817:17:8"
														}
													},
													{
														"expression": {
															"components": [
																{
																	"hexValue": "74727565",
																	"id": 2065,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "857:4:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																{
																	"id": 2066,
																	"name": "c",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2052,
																	"src": "863:1:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 2067,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "856:9:8",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
																"typeString": "tuple(bool,uint256)"
															}
														},
														"functionReturnParameters": 2050,
														"id": 2068,
														"nodeType": "Return",
														"src": "849:16:8"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2040,
										"nodeType": "StructuredDocumentation",
										"src": "521:135:8",
										"text": " @dev Returns the addition of two unsigned integers, with an overflow flag.\n _Available since v3.4._"
									},
									"id": 2071,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryAdd",
									"nameLocation": "671:6:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2045,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2042,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "686:1:8",
												"nodeType": "VariableDeclaration",
												"scope": 2071,
												"src": "678:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2041,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "678:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2044,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "697:1:8",
												"nodeType": "VariableDeclaration",
												"scope": 2071,
												"src": "689:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2043,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "689:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "677:22:8"
									},
									"returnParameters": {
										"id": 2050,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2047,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2071,
												"src": "723:4:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2046,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "723:4:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2049,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2071,
												"src": "729:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2048,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "729:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "722:15:8"
									},
									"scope": 2348,
									"src": "662:222:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2098,
										"nodeType": "Block",
										"src": "1112:118:8",
										"statements": [
											{
												"id": 2097,
												"nodeType": "UncheckedBlock",
												"src": "1123:100:8",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2085,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2083,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2076,
																"src": "1152:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"id": 2084,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2074,
																"src": "1156:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1152:5:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2090,
														"nodeType": "IfStatement",
														"src": "1148:28:8",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "66616c7365",
																		"id": 2086,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1167:5:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "false"
																	},
																	{
																		"hexValue": "30",
																		"id": 2087,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1174:1:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 2088,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1166:10:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 2082,
															"id": 2089,
															"nodeType": "Return",
															"src": "1159:17:8"
														}
													},
													{
														"expression": {
															"components": [
																{
																	"hexValue": "74727565",
																	"id": 2091,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1199:4:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2094,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2092,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2074,
																		"src": "1205:1:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "-",
																	"rightExpression": {
																		"id": 2093,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2076,
																		"src": "1209:1:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "1205:5:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 2095,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "1198:13:8",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
																"typeString": "tuple(bool,uint256)"
															}
														},
														"functionReturnParameters": 2082,
														"id": 2096,
														"nodeType": "Return",
														"src": "1191:20:8"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2072,
										"nodeType": "StructuredDocumentation",
										"src": "892:138:8",
										"text": " @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n _Available since v3.4._"
									},
									"id": 2099,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "trySub",
									"nameLocation": "1045:6:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2077,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2074,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "1060:1:8",
												"nodeType": "VariableDeclaration",
												"scope": 2099,
												"src": "1052:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2073,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1052:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2076,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "1071:1:8",
												"nodeType": "VariableDeclaration",
												"scope": 2099,
												"src": "1063:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2075,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1063:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1051:22:8"
									},
									"returnParameters": {
										"id": 2082,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2079,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2099,
												"src": "1097:4:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2078,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1097:4:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2081,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2099,
												"src": "1103:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2080,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1103:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1096:15:8"
									},
									"scope": 2348,
									"src": "1036:194:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2140,
										"nodeType": "Block",
										"src": "1461:427:8",
										"statements": [
											{
												"id": 2139,
												"nodeType": "UncheckedBlock",
												"src": "1472:409:8",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2113,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2111,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2102,
																"src": "1734:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "30",
																"id": 2112,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1739:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "1734:6:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2118,
														"nodeType": "IfStatement",
														"src": "1730:28:8",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "74727565",
																		"id": 2114,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1750:4:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "true"
																	},
																	{
																		"hexValue": "30",
																		"id": 2115,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1756:1:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 2116,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1749:9:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 2110,
															"id": 2117,
															"nodeType": "Return",
															"src": "1742:16:8"
														}
													},
													{
														"assignments": [
															2120
														],
														"declarations": [
															{
																"constant": false,
																"id": 2120,
																"mutability": "mutable",
																"name": "c",
																"nameLocation": "1781:1:8",
																"nodeType": "VariableDeclaration",
																"scope": 2139,
																"src": "1773:9:8",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 2119,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "1773:7:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2124,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2123,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2121,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2102,
																"src": "1785:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "*",
															"rightExpression": {
																"id": 2122,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2104,
																"src": "1789:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1785:5:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "1773:17:8"
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2129,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2127,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2125,
																	"name": "c",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2120,
																	"src": "1809:1:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "/",
																"rightExpression": {
																	"id": 2126,
																	"name": "a",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2102,
																	"src": "1813:1:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "1809:5:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"id": 2128,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2104,
																"src": "1818:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1809:10:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2134,
														"nodeType": "IfStatement",
														"src": "1805:33:8",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "66616c7365",
																		"id": 2130,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1829:5:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "false"
																	},
																	{
																		"hexValue": "30",
																		"id": 2131,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1836:1:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 2132,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1828:10:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 2110,
															"id": 2133,
															"nodeType": "Return",
															"src": "1821:17:8"
														}
													},
													{
														"expression": {
															"components": [
																{
																	"hexValue": "74727565",
																	"id": 2135,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1861:4:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																{
																	"id": 2136,
																	"name": "c",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2120,
																	"src": "1867:1:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 2137,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "1860:9:8",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
																"typeString": "tuple(bool,uint256)"
															}
														},
														"functionReturnParameters": 2110,
														"id": 2138,
														"nodeType": "Return",
														"src": "1853:16:8"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2100,
										"nodeType": "StructuredDocumentation",
										"src": "1238:141:8",
										"text": " @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n _Available since v3.4._"
									},
									"id": 2141,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryMul",
									"nameLocation": "1394:6:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2105,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2102,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "1409:1:8",
												"nodeType": "VariableDeclaration",
												"scope": 2141,
												"src": "1401:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2101,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1401:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2104,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "1420:1:8",
												"nodeType": "VariableDeclaration",
												"scope": 2141,
												"src": "1412:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2103,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1412:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1400:22:8"
									},
									"returnParameters": {
										"id": 2110,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2107,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2141,
												"src": "1446:4:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2106,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1446:4:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2109,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2141,
												"src": "1452:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2108,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1452:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1445:15:8"
									},
									"scope": 2348,
									"src": "1385:503:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2168,
										"nodeType": "Block",
										"src": "2120:119:8",
										"statements": [
											{
												"id": 2167,
												"nodeType": "UncheckedBlock",
												"src": "2131:101:8",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2155,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2153,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2146,
																"src": "2160:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "30",
																"id": 2154,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2165:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "2160:6:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2160,
														"nodeType": "IfStatement",
														"src": "2156:29:8",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "66616c7365",
																		"id": 2156,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2176:5:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "false"
																	},
																	{
																		"hexValue": "30",
																		"id": 2157,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2183:1:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 2158,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2175:10:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 2152,
															"id": 2159,
															"nodeType": "Return",
															"src": "2168:17:8"
														}
													},
													{
														"expression": {
															"components": [
																{
																	"hexValue": "74727565",
																	"id": 2161,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2208:4:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2164,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2162,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2144,
																		"src": "2214:1:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "/",
																	"rightExpression": {
																		"id": 2163,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2146,
																		"src": "2218:1:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "2214:5:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 2165,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "2207:13:8",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
																"typeString": "tuple(bool,uint256)"
															}
														},
														"functionReturnParameters": 2152,
														"id": 2166,
														"nodeType": "Return",
														"src": "2200:20:8"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2142,
										"nodeType": "StructuredDocumentation",
										"src": "1896:142:8",
										"text": " @dev Returns the division of two unsigned integers, with a division by zero flag.\n _Available since v3.4._"
									},
									"id": 2169,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryDiv",
									"nameLocation": "2053:6:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2147,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2144,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "2068:1:8",
												"nodeType": "VariableDeclaration",
												"scope": 2169,
												"src": "2060:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2143,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2060:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2146,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "2079:1:8",
												"nodeType": "VariableDeclaration",
												"scope": 2169,
												"src": "2071:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2145,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2071:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2059:22:8"
									},
									"returnParameters": {
										"id": 2152,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2149,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2169,
												"src": "2105:4:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2148,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2105:4:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2151,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2169,
												"src": "2111:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2150,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2111:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2104:15:8"
									},
									"scope": 2348,
									"src": "2044:195:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2196,
										"nodeType": "Block",
										"src": "2481:119:8",
										"statements": [
											{
												"id": 2195,
												"nodeType": "UncheckedBlock",
												"src": "2492:101:8",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2183,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2181,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2174,
																"src": "2521:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "30",
																"id": 2182,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2526:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "2521:6:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2188,
														"nodeType": "IfStatement",
														"src": "2517:29:8",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "66616c7365",
																		"id": 2184,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2537:5:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "false"
																	},
																	{
																		"hexValue": "30",
																		"id": 2185,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2544:1:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 2186,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2536:10:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 2180,
															"id": 2187,
															"nodeType": "Return",
															"src": "2529:17:8"
														}
													},
													{
														"expression": {
															"components": [
																{
																	"hexValue": "74727565",
																	"id": 2189,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2569:4:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2192,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2190,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2172,
																		"src": "2575:1:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "%",
																	"rightExpression": {
																		"id": 2191,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2174,
																		"src": "2579:1:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "2575:5:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 2193,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "2568:13:8",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
																"typeString": "tuple(bool,uint256)"
															}
														},
														"functionReturnParameters": 2180,
														"id": 2194,
														"nodeType": "Return",
														"src": "2561:20:8"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2170,
										"nodeType": "StructuredDocumentation",
										"src": "2247:152:8",
										"text": " @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n _Available since v3.4._"
									},
									"id": 2197,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryMod",
									"nameLocation": "2414:6:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2175,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2172,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "2429:1:8",
												"nodeType": "VariableDeclaration",
												"scope": 2197,
												"src": "2421:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2171,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2421:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2174,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "2440:1:8",
												"nodeType": "VariableDeclaration",
												"scope": 2197,
												"src": "2432:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2173,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2432:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2420:22:8"
									},
									"returnParameters": {
										"id": 2180,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2177,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2197,
												"src": "2466:4:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2176,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2466:4:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2179,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2197,
												"src": "2472:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2178,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2472:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2465:15:8"
									},
									"scope": 2348,
									"src": "2405:195:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2211,
										"nodeType": "Block",
										"src": "2914:31:8",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2209,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2207,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2200,
														"src": "2932:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"id": 2208,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2202,
														"src": "2936:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2932:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2206,
												"id": 2210,
												"nodeType": "Return",
												"src": "2925:12:8"
											}
										]
									},
									"documentation": {
										"id": 2198,
										"nodeType": "StructuredDocumentation",
										"src": "2608:233:8",
										"text": " @dev Returns the addition of two unsigned integers, reverting on\n overflow.\n Counterpart to Solidity's `+` operator.\n Requirements:\n - Addition cannot overflow."
									},
									"id": 2212,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "add",
									"nameLocation": "2856:3:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2203,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2200,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "2868:1:8",
												"nodeType": "VariableDeclaration",
												"scope": 2212,
												"src": "2860:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2199,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2860:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2202,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "2879:1:8",
												"nodeType": "VariableDeclaration",
												"scope": 2212,
												"src": "2871:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2201,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2871:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2859:22:8"
									},
									"returnParameters": {
										"id": 2206,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2205,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2212,
												"src": "2905:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2204,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2905:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2904:9:8"
									},
									"scope": 2348,
									"src": "2847:98:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2226,
										"nodeType": "Block",
										"src": "3295:31:8",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2224,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2222,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2215,
														"src": "3313:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "-",
													"rightExpression": {
														"id": 2223,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2217,
														"src": "3317:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3313:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2221,
												"id": 2225,
												"nodeType": "Return",
												"src": "3306:12:8"
											}
										]
									},
									"documentation": {
										"id": 2213,
										"nodeType": "StructuredDocumentation",
										"src": "2953:269:8",
										"text": " @dev Returns the subtraction of two unsigned integers, reverting on\n overflow (when the result is negative).\n Counterpart to Solidity's `-` operator.\n Requirements:\n - Subtraction cannot overflow."
									},
									"id": 2227,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sub",
									"nameLocation": "3237:3:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2218,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2215,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "3249:1:8",
												"nodeType": "VariableDeclaration",
												"scope": 2227,
												"src": "3241:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2214,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3241:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2217,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "3260:1:8",
												"nodeType": "VariableDeclaration",
												"scope": 2227,
												"src": "3252:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2216,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3252:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3240:22:8"
									},
									"returnParameters": {
										"id": 2221,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2220,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2227,
												"src": "3286:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2219,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3286:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3285:9:8"
									},
									"scope": 2348,
									"src": "3228:98:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2241,
										"nodeType": "Block",
										"src": "3652:31:8",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2239,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2237,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2230,
														"src": "3670:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "*",
													"rightExpression": {
														"id": 2238,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2232,
														"src": "3674:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3670:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2236,
												"id": 2240,
												"nodeType": "Return",
												"src": "3663:12:8"
											}
										]
									},
									"documentation": {
										"id": 2228,
										"nodeType": "StructuredDocumentation",
										"src": "3334:245:8",
										"text": " @dev Returns the multiplication of two unsigned integers, reverting on\n overflow.\n Counterpart to Solidity's `*` operator.\n Requirements:\n - Multiplication cannot overflow."
									},
									"id": 2242,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mul",
									"nameLocation": "3594:3:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2233,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2230,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "3606:1:8",
												"nodeType": "VariableDeclaration",
												"scope": 2242,
												"src": "3598:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2229,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3598:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2232,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "3617:1:8",
												"nodeType": "VariableDeclaration",
												"scope": 2242,
												"src": "3609:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2231,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3609:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3597:22:8"
									},
									"returnParameters": {
										"id": 2236,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2235,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2242,
												"src": "3643:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2234,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3643:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3642:9:8"
									},
									"scope": 2348,
									"src": "3585:98:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2256,
										"nodeType": "Block",
										"src": "4051:31:8",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2254,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2252,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2245,
														"src": "4069:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "/",
													"rightExpression": {
														"id": 2253,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2247,
														"src": "4073:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "4069:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2251,
												"id": 2255,
												"nodeType": "Return",
												"src": "4062:12:8"
											}
										]
									},
									"documentation": {
										"id": 2243,
										"nodeType": "StructuredDocumentation",
										"src": "3691:287:8",
										"text": " @dev Returns the integer division of two unsigned integers, reverting on\n division by zero. The result is rounded towards zero.\n Counterpart to Solidity's `/` operator.\n Requirements:\n - The divisor cannot be zero."
									},
									"id": 2257,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "div",
									"nameLocation": "3993:3:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2248,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2245,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "4005:1:8",
												"nodeType": "VariableDeclaration",
												"scope": 2257,
												"src": "3997:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2244,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3997:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2247,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "4016:1:8",
												"nodeType": "VariableDeclaration",
												"scope": 2257,
												"src": "4008:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2246,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4008:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3996:22:8"
									},
									"returnParameters": {
										"id": 2251,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2250,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2257,
												"src": "4042:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2249,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4042:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4041:9:8"
									},
									"scope": 2348,
									"src": "3984:98:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2271,
										"nodeType": "Block",
										"src": "4616:31:8",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2269,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2267,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2260,
														"src": "4634:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "%",
													"rightExpression": {
														"id": 2268,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2262,
														"src": "4638:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "4634:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2266,
												"id": 2270,
												"nodeType": "Return",
												"src": "4627:12:8"
											}
										]
									},
									"documentation": {
										"id": 2258,
										"nodeType": "StructuredDocumentation",
										"src": "4090:453:8",
										"text": " @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n reverting when dividing by zero.\n Counterpart to Solidity's `%` operator. This function uses a `revert`\n opcode (which leaves remaining gas untouched) while Solidity uses an\n invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."
									},
									"id": 2272,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mod",
									"nameLocation": "4558:3:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2263,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2260,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "4570:1:8",
												"nodeType": "VariableDeclaration",
												"scope": 2272,
												"src": "4562:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2259,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4562:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2262,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "4581:1:8",
												"nodeType": "VariableDeclaration",
												"scope": 2272,
												"src": "4573:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2261,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4573:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4561:22:8"
									},
									"returnParameters": {
										"id": 2266,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2265,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2272,
												"src": "4607:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2264,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4607:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4606:9:8"
									},
									"scope": 2348,
									"src": "4549:98:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2296,
										"nodeType": "Block",
										"src": "5255:111:8",
										"statements": [
											{
												"id": 2295,
												"nodeType": "UncheckedBlock",
												"src": "5266:93:8",
												"statements": [
													{
														"expression": {
															"arguments": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2287,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2285,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2277,
																		"src": "5299:1:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "<=",
																	"rightExpression": {
																		"id": 2286,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2275,
																		"src": "5304:1:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "5299:6:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																{
																	"id": 2288,
																	"name": "errorMessage",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2279,
																	"src": "5307:12:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	{
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																],
																"id": 2284,
																"name": "require",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	4294967278,
																	4294967278
																],
																"referencedDeclaration": 4294967278,
																"src": "5291:7:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																	"typeString": "function (bool,string memory) pure"
																}
															},
															"id": 2289,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5291:29:8",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$__$",
																"typeString": "tuple()"
															}
														},
														"id": 2290,
														"nodeType": "ExpressionStatement",
														"src": "5291:29:8"
													},
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2293,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2291,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2275,
																"src": "5342:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "-",
															"rightExpression": {
																"id": 2292,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2277,
																"src": "5346:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5342:5:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 2283,
														"id": 2294,
														"nodeType": "Return",
														"src": "5335:12:8"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2273,
										"nodeType": "StructuredDocumentation",
										"src": "4655:465:8",
										"text": " @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n overflow (when the result is negative).\n CAUTION: This function is deprecated because it requires allocating memory for the error\n message unnecessarily. For custom revert reasons use {trySub}.\n Counterpart to Solidity's `-` operator.\n Requirements:\n - Subtraction cannot overflow."
									},
									"id": 2297,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sub",
									"nameLocation": "5135:3:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2280,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2275,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "5157:1:8",
												"nodeType": "VariableDeclaration",
												"scope": 2297,
												"src": "5149:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2274,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5149:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2277,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "5177:1:8",
												"nodeType": "VariableDeclaration",
												"scope": 2297,
												"src": "5169:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2276,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5169:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2279,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "5203:12:8",
												"nodeType": "VariableDeclaration",
												"scope": 2297,
												"src": "5189:26:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 2278,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "5189:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5138:84:8"
									},
									"returnParameters": {
										"id": 2283,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2282,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2297,
												"src": "5246:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2281,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5246:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5245:9:8"
									},
									"scope": 2348,
									"src": "5126:240:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2321,
										"nodeType": "Block",
										"src": "5993:110:8",
										"statements": [
											{
												"id": 2320,
												"nodeType": "UncheckedBlock",
												"src": "6004:92:8",
												"statements": [
													{
														"expression": {
															"arguments": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2312,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2310,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2302,
																		"src": "6037:1:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": ">",
																	"rightExpression": {
																		"hexValue": "30",
																		"id": 2311,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "6041:1:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	},
																	"src": "6037:5:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																{
																	"id": 2313,
																	"name": "errorMessage",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2304,
																	"src": "6044:12:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	{
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																],
																"id": 2309,
																"name": "require",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	4294967278,
																	4294967278
																],
																"referencedDeclaration": 4294967278,
																"src": "6029:7:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																	"typeString": "function (bool,string memory) pure"
																}
															},
															"id": 2314,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "6029:28:8",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$__$",
																"typeString": "tuple()"
															}
														},
														"id": 2315,
														"nodeType": "ExpressionStatement",
														"src": "6029:28:8"
													},
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2318,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2316,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2300,
																"src": "6079:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "/",
															"rightExpression": {
																"id": 2317,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2302,
																"src": "6083:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "6079:5:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 2308,
														"id": 2319,
														"nodeType": "Return",
														"src": "6072:12:8"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2298,
										"nodeType": "StructuredDocumentation",
										"src": "5374:484:8",
										"text": " @dev Returns the integer division of two unsigned integers, reverting with custom message on\n division by zero. The result is rounded towards zero.\n Counterpart to Solidity's `/` operator. Note: this function uses a\n `revert` opcode (which leaves remaining gas untouched) while Solidity\n uses an invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."
									},
									"id": 2322,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "div",
									"nameLocation": "5873:3:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2305,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2300,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "5895:1:8",
												"nodeType": "VariableDeclaration",
												"scope": 2322,
												"src": "5887:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2299,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5887:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2302,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "5915:1:8",
												"nodeType": "VariableDeclaration",
												"scope": 2322,
												"src": "5907:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2301,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5907:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2304,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "5941:12:8",
												"nodeType": "VariableDeclaration",
												"scope": 2322,
												"src": "5927:26:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 2303,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "5927:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5876:84:8"
									},
									"returnParameters": {
										"id": 2308,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2307,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2322,
												"src": "5984:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2306,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5984:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5983:9:8"
									},
									"scope": 2348,
									"src": "5864:239:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2346,
										"nodeType": "Block",
										"src": "6895:110:8",
										"statements": [
											{
												"id": 2345,
												"nodeType": "UncheckedBlock",
												"src": "6906:92:8",
												"statements": [
													{
														"expression": {
															"arguments": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2337,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2335,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2327,
																		"src": "6939:1:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": ">",
																	"rightExpression": {
																		"hexValue": "30",
																		"id": 2336,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "6943:1:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	},
																	"src": "6939:5:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																{
																	"id": 2338,
																	"name": "errorMessage",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2329,
																	"src": "6946:12:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	{
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																],
																"id": 2334,
																"name": "require",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	4294967278,
																	4294967278
																],
																"referencedDeclaration": 4294967278,
																"src": "6931:7:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																	"typeString": "function (bool,string memory) pure"
																}
															},
															"id": 2339,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "6931:28:8",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$__$",
																"typeString": "tuple()"
															}
														},
														"id": 2340,
														"nodeType": "ExpressionStatement",
														"src": "6931:28:8"
													},
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2343,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2341,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2325,
																"src": "6981:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "%",
															"rightExpression": {
																"id": 2342,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2327,
																"src": "6985:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "6981:5:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 2333,
														"id": 2344,
														"nodeType": "Return",
														"src": "6974:12:8"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2323,
										"nodeType": "StructuredDocumentation",
										"src": "6111:649:8",
										"text": " @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n reverting with custom message when dividing by zero.\n CAUTION: This function is deprecated because it requires allocating memory for the error\n message unnecessarily. For custom revert reasons use {tryMod}.\n Counterpart to Solidity's `%` operator. This function uses a `revert`\n opcode (which leaves remaining gas untouched) while Solidity uses an\n invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."
									},
									"id": 2347,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mod",
									"nameLocation": "6775:3:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2330,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2325,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "6797:1:8",
												"nodeType": "VariableDeclaration",
												"scope": 2347,
												"src": "6789:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2324,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6789:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2327,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "6817:1:8",
												"nodeType": "VariableDeclaration",
												"scope": 2347,
												"src": "6809:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2326,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6809:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2329,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "6843:12:8",
												"nodeType": "VariableDeclaration",
												"scope": 2347,
												"src": "6829:26:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 2328,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "6829:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6778:84:8"
									},
									"returnParameters": {
										"id": 2333,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2332,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2347,
												"src": "6886:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2331,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6886:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6885:9:8"
									},
									"scope": 2348,
									"src": "6766:239:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 2349,
							"src": "497:6511:8",
							"usedErrors": []
						}
					],
					"src": "110:6898:8"
				},
				"id": 8
			},
			"Utils/TransferHelper.sol": {
				"ast": {
					"absolutePath": "Utils/TransferHelper.sol",
					"exportedSymbols": {
						"TransferHelper": [
							2497
						]
					},
					"id": 2498,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2350,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "35:23:9"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 2351,
								"nodeType": "StructuredDocumentation",
								"src": "62:180:9",
								"text": "helper methods for interacting with ERC20 tokens that do not consistently return true/false\nwith the addition of a transfer function to send eth or an erc20 token"
							},
							"fullyImplemented": true,
							"id": 2497,
							"linearizedBaseContracts": [
								2497
							],
							"name": "TransferHelper",
							"nameLocation": "252:14:9",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 2393,
										"nodeType": "Block",
										"src": "380:284:9",
										"statements": [
											{
												"assignments": [
													2361,
													2363
												],
												"declarations": [
													{
														"constant": false,
														"id": 2361,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "397:7:9",
														"nodeType": "VariableDeclaration",
														"scope": 2393,
														"src": "392:12:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 2360,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "392:4:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 2363,
														"mutability": "mutable",
														"name": "data",
														"nameLocation": "419:4:9",
														"nodeType": "VariableDeclaration",
														"scope": 2393,
														"src": "406:17:9",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 2362,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "406:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2373,
												"initialValue": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30783039356561376233",
																	"id": 2368,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "475:10:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_157198259_by_1",
																		"typeString": "int_const 157198259"
																	},
																	"value": "0x095ea7b3"
																},
																{
																	"id": 2369,
																	"name": "to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2355,
																	"src": "487:2:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 2370,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2357,
																	"src": "491:5:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_157198259_by_1",
																		"typeString": "int_const 157198259"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 2366,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "452:3:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 2367,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"src": "452:22:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 2371,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "452:45:9",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"id": 2364,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2353,
															"src": "427:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 2365,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "call",
														"nodeType": "MemberAccess",
														"src": "427:10:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 2372,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "427:81:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "391:117:9"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 2389,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2375,
																"name": "success",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2361,
																"src": "541:7:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "&&",
															"rightExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"id": 2387,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 2379,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"expression": {
																					"id": 2376,
																					"name": "data",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2363,
																					"src": "553:4:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bytes_memory_ptr",
																						"typeString": "bytes memory"
																					}
																				},
																				"id": 2377,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "length",
																				"nodeType": "MemberAccess",
																				"src": "553:11:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "==",
																			"rightExpression": {
																				"hexValue": "30",
																				"id": 2378,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "568:1:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			},
																			"src": "553:16:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "||",
																		"rightExpression": {
																			"arguments": [
																				{
																					"id": 2382,
																					"name": "data",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2363,
																					"src": "584:4:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bytes_memory_ptr",
																						"typeString": "bytes memory"
																					}
																				},
																				{
																					"components": [
																						{
																							"id": 2384,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"lValueRequested": false,
																							"nodeType": "ElementaryTypeNameExpression",
																							"src": "591:4:9",
																							"typeDescriptions": {
																								"typeIdentifier": "t_type$_t_bool_$",
																								"typeString": "type(bool)"
																							},
																							"typeName": {
																								"id": 2383,
																								"name": "bool",
																								"nodeType": "ElementaryTypeName",
																								"src": "591:4:9",
																								"typeDescriptions": {}
																							}
																						}
																					],
																					"id": 2385,
																					"isConstant": false,
																					"isInlineArray": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"nodeType": "TupleExpression",
																					"src": "590:6:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_bool_$",
																						"typeString": "type(bool)"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_bytes_memory_ptr",
																						"typeString": "bytes memory"
																					},
																					{
																						"typeIdentifier": "t_type$_t_bool_$",
																						"typeString": "type(bool)"
																					}
																				],
																				"expression": {
																					"id": 2380,
																					"name": "abi",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 4294967295,
																					"src": "573:3:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_magic_abi",
																						"typeString": "abi"
																					}
																				},
																				"id": 2381,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"memberName": "decode",
																				"nodeType": "MemberAccess",
																				"src": "573:10:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_abidecode_pure$__$returns$__$",
																					"typeString": "function () pure"
																				}
																			},
																			"id": 2386,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "573:24:9",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"src": "553:44:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	}
																],
																"id": 2388,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "552:46:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "541:57:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "5472616e7366657248656c7065723a20415050524f56455f4641494c4544",
															"id": 2390,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "613:32:9",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_3e27be550bb5367a6d8a8b2dd8b5c52ee0710d2d5b26de50062207957ab5bd00",
																"typeString": "literal_string \"TransferHelper: APPROVE_FAILED\""
															},
															"value": "TransferHelper: APPROVE_FAILED"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_3e27be550bb5367a6d8a8b2dd8b5c52ee0710d2d5b26de50062207957ab5bd00",
																"typeString": "literal_string \"TransferHelper: APPROVE_FAILED\""
															}
														],
														"id": 2374,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "519:7:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 2391,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "519:137:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2392,
												"nodeType": "ExpressionStatement",
												"src": "519:137:9"
											}
										]
									},
									"id": 2394,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeApprove",
									"nameLocation": "283:11:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2358,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2353,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "313:5:9",
												"nodeType": "VariableDeclaration",
												"scope": 2394,
												"src": "305:13:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2352,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "305:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2355,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "337:2:9",
												"nodeType": "VariableDeclaration",
												"scope": 2394,
												"src": "329:10:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2354,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "329:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2357,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "358:5:9",
												"nodeType": "VariableDeclaration",
												"scope": 2394,
												"src": "350:13:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2356,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "350:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "294:76:9"
									},
									"returnParameters": {
										"id": 2359,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "380:0:9"
									},
									"scope": 2497,
									"src": "274:390:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2439,
										"nodeType": "Block",
										"src": "1246:296:9",
										"statements": [
											{
												"assignments": [
													2406,
													2408
												],
												"declarations": [
													{
														"constant": false,
														"id": 2406,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "1263:7:9",
														"nodeType": "VariableDeclaration",
														"scope": 2439,
														"src": "1258:12:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 2405,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "1258:4:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 2408,
														"mutability": "mutable",
														"name": "data",
														"nameLocation": "1285:4:9",
														"nodeType": "VariableDeclaration",
														"scope": 2439,
														"src": "1272:17:9",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 2407,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "1272:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2419,
												"initialValue": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30783233623837326464",
																	"id": 2413,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1341:10:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_599290589_by_1",
																		"typeString": "int_const 599290589"
																	},
																	"value": "0x23b872dd"
																},
																{
																	"id": 2414,
																	"name": "from",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2398,
																	"src": "1353:4:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 2415,
																	"name": "to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2400,
																	"src": "1359:2:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 2416,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2402,
																	"src": "1363:5:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_599290589_by_1",
																		"typeString": "int_const 599290589"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 2411,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "1318:3:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 2412,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"src": "1318:22:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 2417,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1318:51:9",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"id": 2409,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2396,
															"src": "1293:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 2410,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "call",
														"nodeType": "MemberAccess",
														"src": "1293:10:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 2418,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1293:87:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1257:123:9"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 2435,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2421,
																"name": "success",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2406,
																"src": "1413:7:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "&&",
															"rightExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"id": 2433,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 2425,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"expression": {
																					"id": 2422,
																					"name": "data",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2408,
																					"src": "1425:4:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bytes_memory_ptr",
																						"typeString": "bytes memory"
																					}
																				},
																				"id": 2423,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "length",
																				"nodeType": "MemberAccess",
																				"src": "1425:11:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "==",
																			"rightExpression": {
																				"hexValue": "30",
																				"id": 2424,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "1440:1:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			},
																			"src": "1425:16:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "||",
																		"rightExpression": {
																			"arguments": [
																				{
																					"id": 2428,
																					"name": "data",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2408,
																					"src": "1456:4:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bytes_memory_ptr",
																						"typeString": "bytes memory"
																					}
																				},
																				{
																					"components": [
																						{
																							"id": 2430,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"lValueRequested": false,
																							"nodeType": "ElementaryTypeNameExpression",
																							"src": "1463:4:9",
																							"typeDescriptions": {
																								"typeIdentifier": "t_type$_t_bool_$",
																								"typeString": "type(bool)"
																							},
																							"typeName": {
																								"id": 2429,
																								"name": "bool",
																								"nodeType": "ElementaryTypeName",
																								"src": "1463:4:9",
																								"typeDescriptions": {}
																							}
																						}
																					],
																					"id": 2431,
																					"isConstant": false,
																					"isInlineArray": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"nodeType": "TupleExpression",
																					"src": "1462:6:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_bool_$",
																						"typeString": "type(bool)"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_bytes_memory_ptr",
																						"typeString": "bytes memory"
																					},
																					{
																						"typeIdentifier": "t_type$_t_bool_$",
																						"typeString": "type(bool)"
																					}
																				],
																				"expression": {
																					"id": 2426,
																					"name": "abi",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 4294967295,
																					"src": "1445:3:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_magic_abi",
																						"typeString": "abi"
																					}
																				},
																				"id": 2427,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"memberName": "decode",
																				"nodeType": "MemberAccess",
																				"src": "1445:10:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_abidecode_pure$__$returns$__$",
																					"typeString": "function () pure"
																				}
																			},
																			"id": 2432,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "1445:24:9",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"src": "1425:44:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	}
																],
																"id": 2434,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1424:46:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "1413:57:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "5472616e7366657248656c7065723a205452414e534645525f46524f4d5f4641494c4544",
															"id": 2436,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1485:38:9",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_eb2904bf3c0c9ae693b53eb0188a703c388998a9c405b7965ca678cef9a51d18",
																"typeString": "literal_string \"TransferHelper: TRANSFER_FROM_FAILED\""
															},
															"value": "TransferHelper: TRANSFER_FROM_FAILED"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_eb2904bf3c0c9ae693b53eb0188a703c388998a9c405b7965ca678cef9a51d18",
																"typeString": "literal_string \"TransferHelper: TRANSFER_FROM_FAILED\""
															}
														],
														"id": 2420,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1391:7:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 2437,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1391:143:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2438,
												"nodeType": "ExpressionStatement",
												"src": "1391:143:9"
											}
										]
									},
									"id": 2440,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferFrom",
									"nameLocation": "1121:16:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2403,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2396,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "1156:5:9",
												"nodeType": "VariableDeclaration",
												"scope": 2440,
												"src": "1148:13:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2395,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1148:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2398,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "1180:4:9",
												"nodeType": "VariableDeclaration",
												"scope": 2440,
												"src": "1172:12:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2397,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1172:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2400,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1203:2:9",
												"nodeType": "VariableDeclaration",
												"scope": 2440,
												"src": "1195:10:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2399,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1195:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2402,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1224:5:9",
												"nodeType": "VariableDeclaration",
												"scope": 2440,
												"src": "1216:13:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2401,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1216:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1137:99:9"
									},
									"returnParameters": {
										"id": 2404,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1246:0:9"
									},
									"scope": 2497,
									"src": "1112:430:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2495,
										"nodeType": "Block",
										"src": "1733:400:9",
										"statements": [
											{
												"condition": {
													"id": 2452,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "!",
													"prefix": true,
													"src": "1748:8:9",
													"subExpression": {
														"id": 2451,
														"name": "isERC20",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2448,
														"src": "1749:7:9",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 2493,
													"nodeType": "Block",
													"src": "1809:317:9",
													"statements": [
														{
															"assignments": [
																2461,
																2463
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 2461,
																	"mutability": "mutable",
																	"name": "success",
																	"nameLocation": "1830:7:9",
																	"nodeType": "VariableDeclaration",
																	"scope": 2493,
																	"src": "1825:12:9",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"typeName": {
																		"id": 2460,
																		"name": "bool",
																		"nodeType": "ElementaryTypeName",
																		"src": "1825:4:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"visibility": "internal"
																},
																{
																	"constant": false,
																	"id": 2463,
																	"mutability": "mutable",
																	"name": "data",
																	"nameLocation": "1852:4:9",
																	"nodeType": "VariableDeclaration",
																	"scope": 2493,
																	"src": "1839:17:9",
																	"stateVariable": false,
																	"storageLocation": "memory",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes"
																	},
																	"typeName": {
																		"id": 2462,
																		"name": "bytes",
																		"nodeType": "ElementaryTypeName",
																		"src": "1839:5:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_storage_ptr",
																			"typeString": "bytes"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 2473,
															"initialValue": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30786139303539636262",
																				"id": 2468,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "1912:10:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_2835717307_by_1",
																					"typeString": "int_const 2835717307"
																				},
																				"value": "0xa9059cbb"
																			},
																			{
																				"id": 2469,
																				"name": "to",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2444,
																				"src": "1924:2:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address_payable",
																					"typeString": "address payable"
																				}
																			},
																			{
																				"id": 2470,
																				"name": "value",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2446,
																				"src": "1928:5:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_2835717307_by_1",
																					"typeString": "int_const 2835717307"
																				},
																				{
																					"typeIdentifier": "t_address_payable",
																					"typeString": "address payable"
																				},
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			],
																			"expression": {
																				"id": 2466,
																				"name": "abi",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4294967295,
																				"src": "1889:3:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_magic_abi",
																					"typeString": "abi"
																				}
																			},
																			"id": 2467,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"memberName": "encodeWithSelector",
																			"nodeType": "MemberAccess",
																			"src": "1889:22:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																				"typeString": "function (bytes4) pure returns (bytes memory)"
																			}
																		},
																		"id": 2471,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "1889:45:9",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	],
																	"expression": {
																		"id": 2464,
																		"name": "token",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2442,
																		"src": "1860:5:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"id": 2465,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "call",
																	"nodeType": "MemberAccess",
																	"src": "1860:10:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																		"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
																	}
																},
																"id": 2472,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1860:89:9",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
																	"typeString": "tuple(bool,bytes memory)"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "1824:125:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"id": 2489,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 2475,
																			"name": "success",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2461,
																			"src": "1990:7:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "&&",
																		"rightExpression": {
																			"components": [
																				{
																					"commonType": {
																						"typeIdentifier": "t_bool",
																						"typeString": "bool"
																					},
																					"id": 2487,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"commonType": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						},
																						"id": 2479,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"leftExpression": {
																							"expression": {
																								"id": 2476,
																								"name": "data",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 2463,
																								"src": "2002:4:9",
																								"typeDescriptions": {
																									"typeIdentifier": "t_bytes_memory_ptr",
																									"typeString": "bytes memory"
																								}
																							},
																							"id": 2477,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": false,
																							"lValueRequested": false,
																							"memberName": "length",
																							"nodeType": "MemberAccess",
																							"src": "2002:11:9",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						},
																						"nodeType": "BinaryOperation",
																						"operator": "==",
																						"rightExpression": {
																							"hexValue": "30",
																							"id": 2478,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"kind": "number",
																							"lValueRequested": false,
																							"nodeType": "Literal",
																							"src": "2017:1:9",
																							"typeDescriptions": {
																								"typeIdentifier": "t_rational_0_by_1",
																								"typeString": "int_const 0"
																							},
																							"value": "0"
																						},
																						"src": "2002:16:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_bool",
																							"typeString": "bool"
																						}
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "||",
																					"rightExpression": {
																						"arguments": [
																							{
																								"id": 2482,
																								"name": "data",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 2463,
																								"src": "2033:4:9",
																								"typeDescriptions": {
																									"typeIdentifier": "t_bytes_memory_ptr",
																									"typeString": "bytes memory"
																								}
																							},
																							{
																								"components": [
																									{
																										"id": 2484,
																										"isConstant": false,
																										"isLValue": false,
																										"isPure": true,
																										"lValueRequested": false,
																										"nodeType": "ElementaryTypeNameExpression",
																										"src": "2040:4:9",
																										"typeDescriptions": {
																											"typeIdentifier": "t_type$_t_bool_$",
																											"typeString": "type(bool)"
																										},
																										"typeName": {
																											"id": 2483,
																											"name": "bool",
																											"nodeType": "ElementaryTypeName",
																											"src": "2040:4:9",
																											"typeDescriptions": {}
																										}
																									}
																								],
																								"id": 2485,
																								"isConstant": false,
																								"isInlineArray": false,
																								"isLValue": false,
																								"isPure": true,
																								"lValueRequested": false,
																								"nodeType": "TupleExpression",
																								"src": "2039:6:9",
																								"typeDescriptions": {
																									"typeIdentifier": "t_type$_t_bool_$",
																									"typeString": "type(bool)"
																								}
																							}
																						],
																						"expression": {
																							"argumentTypes": [
																								{
																									"typeIdentifier": "t_bytes_memory_ptr",
																									"typeString": "bytes memory"
																								},
																								{
																									"typeIdentifier": "t_type$_t_bool_$",
																									"typeString": "type(bool)"
																								}
																							],
																							"expression": {
																								"id": 2480,
																								"name": "abi",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 4294967295,
																								"src": "2022:3:9",
																								"typeDescriptions": {
																									"typeIdentifier": "t_magic_abi",
																									"typeString": "abi"
																								}
																							},
																							"id": 2481,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"lValueRequested": false,
																							"memberName": "decode",
																							"nodeType": "MemberAccess",
																							"src": "2022:10:9",
																							"typeDescriptions": {
																								"typeIdentifier": "t_function_abidecode_pure$__$returns$__$",
																								"typeString": "function () pure"
																							}
																						},
																						"id": 2486,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"kind": "functionCall",
																						"lValueRequested": false,
																						"names": [],
																						"nodeType": "FunctionCall",
																						"src": "2022:24:9",
																						"tryCall": false,
																						"typeDescriptions": {
																							"typeIdentifier": "t_bool",
																							"typeString": "bool"
																						}
																					},
																					"src": "2002:44:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bool",
																						"typeString": "bool"
																					}
																				}
																			],
																			"id": 2488,
																			"isConstant": false,
																			"isInlineArray": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "TupleExpression",
																			"src": "2001:46:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"src": "1990:57:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	{
																		"hexValue": "5472616e7366657248656c7065723a205452414e534645525f4641494c4544",
																		"id": 2490,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2066:33:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_05d7eee434319ef96b9de8eaf182057f1e6a6441451c0ddc676469e4b256f426",
																			"typeString": "literal_string \"TransferHelper: TRANSFER_FAILED\""
																		},
																		"value": "TransferHelper: TRANSFER_FAILED"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		{
																			"typeIdentifier": "t_stringliteral_05d7eee434319ef96b9de8eaf182057f1e6a6441451c0ddc676469e4b256f426",
																			"typeString": "literal_string \"TransferHelper: TRANSFER_FAILED\""
																		}
																	],
																	"id": 2474,
																	"name": "require",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967278,
																		4294967278
																	],
																	"referencedDeclaration": 4294967278,
																	"src": "1964:7:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bool,string memory) pure"
																	}
																},
																"id": 2491,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1964:150:9",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 2492,
															"nodeType": "ExpressionStatement",
															"src": "1964:150:9"
														}
													]
												},
												"id": 2494,
												"nodeType": "IfStatement",
												"src": "1744:382:9",
												"trueBody": {
													"id": 2459,
													"nodeType": "Block",
													"src": "1758:45:9",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 2456,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2446,
																		"src": "1785:5:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"id": 2453,
																		"name": "to",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2444,
																		"src": "1773:2:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address_payable",
																			"typeString": "address payable"
																		}
																	},
																	"id": 2455,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "transfer",
																	"nodeType": "MemberAccess",
																	"src": "1773:11:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_transfer_nonpayable$_t_uint256_$returns$__$",
																		"typeString": "function (uint256)"
																	}
																},
																"id": 2457,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1773:18:9",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 2458,
															"nodeType": "ExpressionStatement",
															"src": "1773:18:9"
														}
													]
												}
											}
										]
									},
									"id": 2496,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferBaseToken",
									"nameLocation": "1595:21:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2449,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2442,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "1635:5:9",
												"nodeType": "VariableDeclaration",
												"scope": 2496,
												"src": "1627:13:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2441,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1627:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2444,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1667:2:9",
												"nodeType": "VariableDeclaration",
												"scope": 2496,
												"src": "1651:18:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address_payable",
													"typeString": "address payable"
												},
												"typeName": {
													"id": 2443,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1651:15:9",
													"stateMutability": "payable",
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2446,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1688:5:9",
												"nodeType": "VariableDeclaration",
												"scope": 2496,
												"src": "1680:13:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2445,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1680:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2448,
												"mutability": "mutable",
												"name": "isERC20",
												"nameLocation": "1709:7:9",
												"nodeType": "VariableDeclaration",
												"scope": 2496,
												"src": "1704:12:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2447,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1704:4:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1616:107:9"
									},
									"returnParameters": {
										"id": 2450,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1733:0:9"
									},
									"scope": 2497,
									"src": "1586:547:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 2498,
							"src": "244:1892:9",
							"usedErrors": []
						}
					],
					"src": "35:2103:9"
				},
				"id": 9
			}
		}
	}
}