{
	"id": "9da4906117a31027c2166f6e964ac1fd",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.0",
	"solcLongVersion": "0.8.0+commit.c7dfd78e",
	"input": {
		"language": "Solidity",
		"sources": {
			"Ethereum/Presale.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../ERC20/ERC20.sol\";\r\nimport \"../Utils/ReentrancyGuard.sol\";\r\nimport \"../Utils/TransferHelper.sol\";\r\nimport \"../Utils/EnumerableSet.sol\";\r\nimport \"../Utils/Ownable.sol\";\r\nimport \"../Utils/Context.sol\";\r\nimport \"../Utils/SafeMath.sol\";\r\n\r\n\r\n\r\ncontract Presale is ReentrancyGuard, Ownable{\r\n    using EnumerableSet for EnumerableSet.AddressSet;\r\n    using SafeMath for uint256;\r\n\r\n    struct SaleInfor {\r\n        address payable presaleOwner;\r\n        ERC20 saleToken;\r\n        ERC20 baseToken;\r\n        uint256 tokenPrice;\r\n        uint256 startSale;\r\n        uint256 endSale;\r\n        uint256 minSpendPerBuyer;\r\n        uint256 maxSpendPerBuyer;\r\n        uint256 refundFee;\r\n        uint256 claimFee;\r\n        bool saleIsBaseToken;\r\n        uint256 amountTokenForSale;\r\n    }\r\n    \r\n    struct SaleTotalSupply {\r\n        uint256 hardCap;\r\n        uint256 softCap;\r\n    }\r\n\r\n    struct BuyerInfo {\r\n        uint256 baseDeposit;\r\n        uint256 tokenOwner;\r\n        uint256 lastWithDraw;\r\n        uint256 totalTokenWithDraw;\r\n        bool isRefund;\r\n        bool isClaim;\r\n    }\r\n\r\n    struct PresaleStatus {\r\n        uint256 totalBaseCollected;\r\n        uint256 totalTokenSold;\r\n        uint256 totalTokenWithDraw;\r\n        uint256 totalBaseWithDraw;\r\n        uint256 numberBuyer;\r\n        uint256 totalFee;\r\n        address[] admin;\r\n    }\r\n    \r\n    mapping(address => BuyerInfo) public buyerInfo;\r\n    mapping(address => uint256) public userFee;\r\n    PresaleStatus public presaleStatus;\r\n    SaleTotalSupply public saleTotalSupply;\r\n    SaleInfor public saleInfor;\r\n    IERC20 public WETH;\r\n    uint256 public feeAnyone;\r\n    EnumerableSet.AddressSet private admins; \r\n    uint256 public totalFee;\r\n\r\n    modifier onlyAdmin() {\r\n        require(admins.contains(_msgSender()), \"Not admin\");\r\n        _;\r\n    }\r\n\r\n    modifier onlySaleOwner() {\r\n        require(_msgSender() == saleInfor.presaleOwner, \"Not sale owner\");\r\n        _;\r\n    }\r\n\r\n    constructor() payable {\r\n        WETH = ERC20(0xc778417E063141139Fce010982780140Aa0cD5Ab);\r\n        admins.add(0x6Ccb41eedA5a073076F3E7dC1614C185b5fA41eD);\r\n        admins.add(0x4f0B12bBF40Fc182559822A5b1dB6D34dbC3E016);\r\n        feeAnyone = 20;\r\n    }\r\n\r\n    function initialSaleInfor(\r\n        address payable _presaleOwner,\r\n        ERC20 _saleToken,\r\n        ERC20 _baseTOken,\r\n        uint256[9] memory datas\r\n    ) external {\r\n        saleInfor.presaleOwner = _presaleOwner;\r\n        saleInfor.saleToken = _saleToken;\r\n        saleInfor.baseToken = _baseTOken;\r\n        saleInfor.tokenPrice = datas[0] * 10** uint256(ERC20(saleInfor.saleToken).decimals());\r\n        saleInfor.startSale = datas[1];\r\n        saleInfor.endSale = datas[2];\r\n        saleInfor.minSpendPerBuyer = datas[3];\r\n        saleInfor.maxSpendPerBuyer = datas[4] * 10** uint256(ERC20(saleInfor.baseToken).decimals());\r\n        saleInfor.refundFee = datas[5];\r\n        saleInfor.claimFee = datas[6];\r\n        saleTotalSupply.hardCap = datas[7];\r\n        saleTotalSupply.softCap = datas[8];\r\n        saleInfor.saleIsBaseToken = address(WETH) == address(saleInfor.baseToken);\r\n        saleInfor.amountTokenForSale = saleInfor.tokenPrice.mul(saleTotalSupply.hardCap);\r\n    } \r\n\r\n    function status() public view returns(uint256) {\r\n        if(block.timestamp < saleInfor.startSale) {\r\n            return 0; // Not Active\r\n        }else{\r\n            if(block.timestamp > saleInfor.endSale) {\r\n                return 2; // Suceess\r\n            }else{\r\n                return 1; // Active\r\n            }\r\n        }\r\n    } \r\n\r\n    function checkAdminAddress() public view returns(bool) {\r\n        return admins.contains(_msgSender());\r\n    }\r\n\r\n    function deposit(uint256 _amount) external payable nonReentrant {\r\n        require(status() == 1, \"Not active\"); // ACTIVE\r\n        BuyerInfo storage buyer = buyerInfo[msg.sender];\r\n        uint256 amount_in = _amount;\r\n        uint256 real_amount_in = amount_in;\r\n        uint256 fee = 0;\r\n        uint256 fullPercenFee = 1000;\r\n        require(real_amount_in >= saleInfor.minSpendPerBuyer, \r\n                \"Not enough value\"\r\n        );\r\n        require(real_amount_in <= saleInfor.maxSpendPerBuyer, \r\n                \"Overflow value\"\r\n        );\r\n        if(!checkAdminAddress()) {\r\n            real_amount_in = ((fullPercenFee.sub(feeAnyone))\r\n                             .mul(real_amount_in))\r\n                             .div(fullPercenFee);\r\n            fee = amount_in - real_amount_in;                 \r\n        }\r\n        uint256 remainingByUser = saleInfor.maxSpendPerBuyer - buyer.baseDeposit;\r\n        uint256 remainingByPool = saleInfor.amountTokenForSale - presaleStatus.totalBaseCollected;\r\n        uint256 allowance = remainingByUser > remainingByPool ? remainingByPool : remainingByUser;\r\n        require(real_amount_in < allowance, \"Sale is success\");\r\n        uint256 tokenSold = (real_amount_in.\r\n                            mul(saleInfor.tokenPrice).\r\n                            div(10 ** uint256(ERC20(saleInfor.baseToken).decimals())));                 \r\n        buyer.baseDeposit += amount_in;\r\n        buyer.tokenOwner += tokenSold;\r\n        presaleStatus.totalBaseCollected += real_amount_in;\r\n        presaleStatus.totalTokenSold += tokenSold;\r\n        presaleStatus.numberBuyer++;\r\n        userFee[msg.sender] += fee;\r\n        totalFee += fee;  \r\n        if(saleInfor.saleIsBaseToken && real_amount_in + fee < msg.value) {\r\n            payable(msg.sender).transfer(msg.value - real_amount_in - fee);\r\n        } \r\n        if(!saleInfor.saleIsBaseToken) {\r\n            TransferHelper.safeTransferFrom(\r\n                address(saleInfor.baseToken),\r\n                msg.sender,\r\n                address(this),\r\n                real_amount_in + fee\r\n            );\r\n        }            \r\n    }\r\n\r\n    function userClaimEmergency() external nonReentrant {\r\n        require(status() == 1, \"Sale sucesss\"); \r\n        require(presaleStatus.totalTokenSold - presaleStatus.totalTokenWithDraw > 0, \r\n               \"All token has been withdraw\"\r\n        );\r\n        BuyerInfo storage buyer = buyerInfo[msg.sender];\r\n        require(buyer.tokenOwner > 0, \"You withdraw all or have not bought yet\");\r\n        // uint256 amount = (buyer.tokenOwner.mul(saleInfor.claimFee)).div(1000);\r\n        uint256 amountClaim = ((uint256(1000).sub(saleInfor.claimFee))\r\n                         .mul(buyer.tokenOwner))\r\n                         .div(uint256(1000));\r\n        presaleStatus.totalTokenWithDraw += amountClaim;\r\n        uint256 feeClaimToken = buyer.tokenOwner - amountClaim;\r\n        buyer.tokenOwner = amountClaim; \r\n        ERC20(saleInfor.saleToken).transfer(msg.sender, amountClaim);\r\n    }\r\n\r\n    function getBalance(address _address) external view returns(uint256) {\r\n        return _address.balance;\r\n    }\r\n   \r\n    function backToken() external payable {\r\n        payable(msg.sender).transfer(address(this).balance);\r\n    }\r\n}"
			},
			"Utils/SafeMath.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n// CAUTION\r\n// This version of SafeMath should only be used with Solidity 0.8 or later,\r\n// because it relies on the compiler's built in overflow checks.\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations.\r\n *\r\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\r\n * now has built in overflow checking.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}"
			},
			"Utils/Context.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n"
			},
			"Utils/Ownable.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./Context.sol\";\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}"
			},
			"Utils/EnumerableSet.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/structs/EnumerableSet.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Library for managing\r\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\r\n * types.\r\n *\r\n * Sets have the following properties:\r\n *\r\n * - Elements are added, removed, and checked for existence in constant time\r\n * (O(1)).\r\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\r\n *\r\n * ```\r\n * contract Example {\r\n *     // Add the library methods\r\n *     using EnumerableSet for EnumerableSet.AddressSet;\r\n *\r\n *     // Declare a set state variable\r\n *     EnumerableSet.AddressSet private mySet;\r\n * }\r\n * ```\r\n *\r\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\r\n * and `uint256` (`UintSet`) are supported.\r\n *\r\n * [WARNING]\r\n * ====\r\n *  Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable.\r\n *  See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\r\n *\r\n *  In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet.\r\n * ====\r\n */\r\nlibrary EnumerableSet {\r\n    // To implement this library for multiple types with as little code\r\n    // repetition as possible, we write it in terms of a generic Set type with\r\n    // bytes32 values.\r\n    // The Set implementation uses private functions, and user-facing\r\n    // implementations (such as AddressSet) are just wrappers around the\r\n    // underlying Set.\r\n    // This means that we can only create new EnumerableSets for types that fit\r\n    // in bytes32.\r\n\r\n    struct Set {\r\n        // Storage of set values\r\n        bytes32[] _values;\r\n        // Position of the value in the `values` array, plus 1 because index 0\r\n        // means a value is not in the set.\r\n        mapping(bytes32 => uint256) _indexes;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function _add(Set storage set, bytes32 value) private returns (bool) {\r\n        if (!_contains(set, value)) {\r\n            set._values.push(value);\r\n            // The value is stored at length-1, but we add 1 to all indexes\r\n            // and use 0 as a sentinel value\r\n            set._indexes[value] = set._values.length;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\r\n        // We read and store the value's index to prevent multiple reads from the same storage slot\r\n        uint256 valueIndex = set._indexes[value];\r\n\r\n        if (valueIndex != 0) {\r\n            // Equivalent to contains(set, value)\r\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\r\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\r\n            // This modifies the order of the array, as noted in {at}.\r\n\r\n            uint256 toDeleteIndex = valueIndex - 1;\r\n            uint256 lastIndex = set._values.length - 1;\r\n\r\n            if (lastIndex != toDeleteIndex) {\r\n                bytes32 lastValue = set._values[lastIndex];\r\n\r\n                // Move the last value to the index where the value to delete is\r\n                set._values[toDeleteIndex] = lastValue;\r\n                // Update the index for the moved value\r\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\r\n            }\r\n\r\n            // Delete the slot where the moved value was stored\r\n            set._values.pop();\r\n\r\n            // Delete the index for the deleted slot\r\n            delete set._indexes[value];\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\r\n        return set._indexes[value] != 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function _length(Set storage set) private view returns (uint256) {\r\n        return set._values.length;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\r\n        return set._values[index];\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function _values(Set storage set) private view returns (bytes32[] memory) {\r\n        return set._values;\r\n    }\r\n\r\n    // Bytes32Set\r\n\r\n    struct Bytes32Set {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _add(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _remove(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\r\n        return _contains(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(Bytes32Set storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\r\n        return _at(set._inner, index);\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\r\n        return _values(set._inner);\r\n    }\r\n\r\n    // AddressSet\r\n\r\n    struct AddressSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(AddressSet storage set, address value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(AddressSet storage set, address value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(AddressSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\r\n        return address(uint160(uint256(_at(set._inner, index))));\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function values(AddressSet storage set) internal view returns (address[] memory) {\r\n        bytes32[] memory store = _values(set._inner);\r\n        address[] memory result;\r\n\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            result := store\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    // UintSet\r\n\r\n    struct UintSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function length(UintSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\r\n        return uint256(_at(set._inner, index));\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\r\n        bytes32[] memory store = _values(set._inner);\r\n        uint256[] memory result;\r\n\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            result := store\r\n        }\r\n\r\n        return result;\r\n    }\r\n}"
			},
			"Utils/TransferHelper.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n    helper methods for interacting with ERC20 tokens that do not consistently return true/false\r\n    with the addition of a transfer function to send eth or an erc20 token\r\n*/\r\nlibrary TransferHelper {\r\n    function safeApprove(\r\n        address token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        (bool success, bytes memory data) = token.call(\r\n            abi.encodeWithSelector(0x095ea7b3, to, value)\r\n        );\r\n        require(\r\n            success && (data.length == 0 || abi.decode(data, (bool))),\r\n            \"TransferHelper: APPROVE_FAILED\"\r\n        );\r\n    }\r\n \r\n    function safeTransfer(\r\n        address token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        (bool success, bytes memory data) = token.call(\r\n            abi.encodeWithSelector(0xa9059cbb, to, value)\r\n        );\r\n        require(\r\n            success && (data.length == 0 || abi.decode(data, (bool))),\r\n            \"TransferHelper: TRANSFER_FAILED\"\r\n        );\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        address token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        (bool success, bytes memory data) = token.call(\r\n            abi.encodeWithSelector(0x23b872dd, from, to, value)\r\n        );\r\n        require(\r\n            success && (data.length == 0 || abi.decode(data, (bool))),\r\n            \"TransferHelper: TRANSFER_FROM_FAILED\"\r\n        );\r\n    }\r\n\r\n    // sends ETH or an erc20 token\r\n    function safeTransferBaseToken(\r\n        address token,\r\n        address payable to,\r\n        uint256 value,\r\n        bool isERC20\r\n    ) internal {\r\n        if (!isERC20) {\r\n            to.transfer(value);\r\n        } else {\r\n            (bool success, bytes memory data) = token.call(\r\n                abi.encodeWithSelector(0xa9059cbb, to, value)\r\n            );\r\n            require(\r\n                success && (data.length == 0 || abi.decode(data, (bool))),\r\n                \"TransferHelper: TRANSFER_FAILED\"\r\n            );\r\n        }\r\n    }\r\n}\r\n"
			},
			"Utils/ReentrancyGuard.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}"
			},
			"ERC20/ERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/ERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./IERC20.sol\";\r\nimport \"./IERC20Metadata.sol\";\r\nimport \"../Utils/Context.sol\";\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *z\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\r\n * instead returning `false` on failure. This behavior is nonetheless\r\n * conventional and does not conflict with the expectations of ERC20\r\n * applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * The default value of {decimals} is 18. To select a different value for\r\n     * {decimals} you should overload it.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n     * overridden;\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual override returns (uint256) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _transfer(owner, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\r\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * NOTE: Does not update the allowance if the current allowance\r\n     * is the maximum `uint256`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` and `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``from``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(owner, spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\r\n     *\r\n     * This internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, amount);\r\n\r\n        uint256 fromBalance = _balances[from];\r\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[from] = fromBalance - amount;\r\n        }\r\n        _balances[to] += amount;\r\n\r\n        emit Transfer(from, to, amount);\r\n\r\n        _afterTokenTransfer(from, to, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n        }\r\n        _totalSupply -= amount;\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\r\n     *\r\n     * Does not update the allowance amount in case of infinite allowance.\r\n     * Revert if not enough allowance is available.\r\n     *\r\n     * Might emit an {Approval} event.\r\n     */\r\n    function _spendAllowance(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * has been transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}"
			},
			"ERC20/IERC20Metadata.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./IERC20.sol\";\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint256);\r\n}\r\n"
			},
			"ERC20/IERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    \r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": true,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			}
		}
	},
	"output": {
		"contracts": {
			"ERC20/ERC20.sol": {
				"ERC20": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "string",
									"name": "name_",
									"type": "string"
								},
								{
									"internalType": "string",
									"name": "symbol_",
									"type": "string"
								}
							],
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "subtractedValue",
									"type": "uint256"
								}
							],
							"name": "decreaseAllowance",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "addedValue",
									"type": "uint256"
								}
							],
							"name": "increaseAllowance",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Implementation of the {IERC20} interface. z This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. For a generic mechanism see {ERC20PresetMinterPauser}. TIP: For a detailed writeup see our guide https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. We have followed general OpenZeppelin Contracts guidelines: functions revert instead returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC20 applications. Additionally, an {Approval} event is emitted on calls to {transferFrom}. This allows applications to reconstruct the allowance for all accounts just by listening to said events. Other implementations of the EIP may not emit these events, as it isn't required by the specification. Finally, the non-standard {decreaseAllowance} and {increaseAllowance} functions have been added to mitigate the well-known issues around setting allowances. See {IERC20-approve}.",
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "See {IERC20-allowance}."
							},
							"approve(address,uint256)": {
								"details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
							},
							"balanceOf(address)": {
								"details": "See {IERC20-balanceOf}."
							},
							"constructor": {
								"details": "Sets the values for {name} and {symbol}. The default value of {decimals} is 18. To select a different value for {decimals} you should overload it. All two of these values are immutable: they can only be set once during construction."
							},
							"decimals()": {
								"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
							},
							"decreaseAllowance(address,uint256)": {
								"details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
							},
							"increaseAllowance(address,uint256)": {
								"details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"symbol()": {
								"details": "Returns the symbol of the token, usually a shorter version of the name."
							},
							"totalSupply()": {
								"details": "See {IERC20-totalSupply}."
							},
							"transfer(address,uint256)": {
								"details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."
							},
							"transferFrom(address,address,uint256)": {
								"details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"ERC20/ERC20.sol\":1424:12997  contract ERC20 is Context, IERC20, IERC20Metadata {\r... */\n  mstore(0x40, 0x80)\n    /* \"ERC20/ERC20.sol\":2018:2134  constructor(string memory name_, string memory symbol_) {\r... */\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  mload(0x40)\n  sub(codesize, bytecodeSize)\n  dup1\n  bytecodeSize\n  dup4\n  codecopy\n  dup2\n  add\n  0x40\n  dup2\n  swap1\n  mstore\n  tag_2\n  swap2\n  tag_3\n  jump\t// in\ntag_2:\n    /* \"ERC20/ERC20.sol\":2085:2098  _name = name_ */\n  dup2\n  mload\n  tag_6\n  swap1\n    /* \"ERC20/ERC20.sol\":2085:2090  _name */\n  0x03\n  swap1\n    /* \"ERC20/ERC20.sol\":2085:2098  _name = name_ */\n  0x20\n  dup6\n  add\n  swap1\n  tag_7\n  jump\t// in\ntag_6:\n  pop\n    /* \"ERC20/ERC20.sol\":2109:2126  _symbol = symbol_ */\n  dup1\n  mload\n  tag_8\n  swap1\n    /* \"ERC20/ERC20.sol\":2109:2116  _symbol */\n  0x04\n  swap1\n    /* \"ERC20/ERC20.sol\":2109:2126  _symbol = symbol_ */\n  0x20\n  dup5\n  add\n  swap1\n  tag_7\n  jump\t// in\ntag_8:\n  pop\n    /* \"ERC20/ERC20.sol\":2018:2134  constructor(string memory name_, string memory symbol_) {\r... */\n  pop\n  pop\n    /* \"ERC20/ERC20.sol\":1424:12997  contract ERC20 is Context, IERC20, IERC20Metadata {\r... */\n  jump(tag_21)\ntag_7:\n  dup3\n  dup1\n  sload\n  tag_10\n  swap1\n  tag_11\n  jump\t// in\ntag_10:\n  swap1\n  0x00\n  mstore\n  keccak256(0x00, 0x20)\n  swap1\n  0x1f\n  add\n  0x20\n  swap1\n  div\n  dup2\n  add\n  swap3\n  dup3\n  tag_13\n  jumpi\n  0x00\n  dup6\n  sstore\n  jump(tag_16)\ntag_13:\n  dup3\n  0x1f\n  lt\n  tag_14\n  jumpi\n  dup1\n  mload\n  not(0xff)\n  and\n  dup4\n  dup1\n  add\n  or\n  dup6\n  sstore\n  jump(tag_16)\ntag_14:\n  dup3\n  dup1\n  add\n  0x01\n  add\n  dup6\n  sstore\n  dup3\n  iszero\n  tag_16\n  jumpi\n  swap2\n  dup3\n  add\ntag_15:\n  dup3\n  dup2\n  gt\n  iszero\n  tag_16\n  jumpi\n  dup3\n  mload\n  dup3\n  sstore\n  swap2\n  0x20\n  add\n  swap2\n  swap1\n  0x01\n  add\n  swap1\n  jump(tag_15)\ntag_16:\n  pop\n  tag_17\n  swap3\n  swap2\n  pop\n  tag_18\n  jump\t// in\ntag_17:\n  pop\n  swap1\n  jump\t// out\ntag_18:\ntag_19:\n  dup1\n  dup3\n  gt\n  iszero\n  tag_17\n  jumpi\n  0x00\n  dup2\n  sstore\n  0x01\n  add\n  jump(tag_19)\n    /* \"#utility.yul\":14:895   */\ntag_22:\n  0x00\n    /* \"#utility.yul\":123:126   */\n  dup3\n    /* \"#utility.yul\":116:120   */\n  0x1f\n    /* \"#utility.yul\":108:114   */\n  dup4\n    /* \"#utility.yul\":104:121   */\n  add\n    /* \"#utility.yul\":100:127   */\n  slt\n    /* \"#utility.yul\":90:92   */\n  tag_24\n  jumpi\n    /* \"#utility.yul\":145:150   */\n  dup1\n    /* \"#utility.yul\":138:143   */\n  dup2\n    /* \"#utility.yul\":131:151   */\n  revert\n    /* \"#utility.yul\":90:92   */\ntag_24:\n    /* \"#utility.yul\":172:185   */\n  dup2\n  mload\n  sub(shl(0x40, 0x01), 0x01)\n    /* \"#utility.yul\":234:244   */\n  dup1\n  dup3\n  gt\n    /* \"#utility.yul\":231:233   */\n  iszero\n  tag_26\n  jumpi\n    /* \"#utility.yul\":247:265   */\n  tag_26\n  tag_27\n  jump\t// in\ntag_26:\n    /* \"#utility.yul\":296:298   */\n  0x40\n    /* \"#utility.yul\":290:299   */\n  mload\n    /* \"#utility.yul\":318:322   */\n  0x20\n    /* \"#utility.yul\":388:390   */\n  0x1f\n    /* \"#utility.yul\":369:382   */\n  dup5\n  add\n  not(0x1f)\n    /* \"#utility.yul\":365:392   */\n  and\n    /* \"#utility.yul\":353:393   */\n  dup3\n  add\n    /* \"#utility.yul\":349:398   */\n  dup2\n  add\n    /* \"#utility.yul\":413:431   */\n  dup4\n  dup2\n  gt\n    /* \"#utility.yul\":433:455   */\n  dup4\n  dup3\n  lt\n    /* \"#utility.yul\":410:456   */\n  or\n    /* \"#utility.yul\":407:409   */\n  iszero\n  tag_29\n  jumpi\n    /* \"#utility.yul\":459:477   */\n  tag_29\n  tag_27\n  jump\t// in\ntag_29:\n    /* \"#utility.yul\":495:497   */\n  0x40\n    /* \"#utility.yul\":488:510   */\n  mstore\n    /* \"#utility.yul\":519:537   */\n  dup4\n  dup3\n  mstore\n    /* \"#utility.yul\":556:571   */\n  dup6\n  dup5\n  add\n    /* \"#utility.yul\":552:576   */\n  dup2\n  add\n    /* \"#utility.yul\":549:582   */\n  dup8\n  lt\n    /* \"#utility.yul\":546:548   */\n  iszero\n  tag_30\n  jumpi\n    /* \"#utility.yul\":599:604   */\n  dup5\n    /* \"#utility.yul\":592:597   */\n  dup6\n    /* \"#utility.yul\":585:605   */\n  revert\n    /* \"#utility.yul\":546:548   */\ntag_30:\n    /* \"#utility.yul\":625:630   */\n  dup5\n    /* \"#utility.yul\":616:630   */\n  swap3\n  pop\n    /* \"#utility.yul\":639:772   */\ntag_31:\n    /* \"#utility.yul\":653:655   */\n  dup4\n    /* \"#utility.yul\":650:651   */\n  dup4\n    /* \"#utility.yul\":647:656   */\n  lt\n    /* \"#utility.yul\":639:772   */\n  iszero\n  tag_33\n  jumpi\n    /* \"#utility.yul\":741:755   */\n  dup6\n  dup4\n  add\n    /* \"#utility.yul\":737:760   */\n  dup2\n  add\n    /* \"#utility.yul\":731:761   */\n  mload\n    /* \"#utility.yul\":710:724   */\n  dup3\n  dup5\n  add\n    /* \"#utility.yul\":706:729   */\n  dup3\n  add\n    /* \"#utility.yul\":699:762   */\n  mstore\n    /* \"#utility.yul\":664:674   */\n  swap2\n  dup3\n  add\n  swap2\n    /* \"#utility.yul\":639:772   */\n  jump(tag_31)\ntag_33:\n    /* \"#utility.yul\":790:792   */\n  dup4\n    /* \"#utility.yul\":787:788   */\n  dup4\n    /* \"#utility.yul\":784:793   */\n  gt\n    /* \"#utility.yul\":781:783   */\n  iszero\n  tag_34\n  jumpi\n    /* \"#utility.yul\":849:854   */\n  dup5\n    /* \"#utility.yul\":844:846   */\n  dup2\n    /* \"#utility.yul\":839:841   */\n  dup6\n    /* \"#utility.yul\":831:837   */\n  dup5\n    /* \"#utility.yul\":827:842   */\n  add\n    /* \"#utility.yul\":823:847   */\n  add\n    /* \"#utility.yul\":816:855   */\n  mstore\n    /* \"#utility.yul\":781:783   */\ntag_34:\n  pop\n    /* \"#utility.yul\":883:889   */\n  swap6\n    /* \"#utility.yul\":80:895   */\n  swap5\n  pop\n  pop\n  pop\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":900:1496   */\ntag_3:\n  0x00\n  dup1\n    /* \"#utility.yul\":1060:1062   */\n  0x40\n    /* \"#utility.yul\":1048:1057   */\n  dup4\n    /* \"#utility.yul\":1039:1046   */\n  dup6\n    /* \"#utility.yul\":1035:1058   */\n  sub\n    /* \"#utility.yul\":1031:1063   */\n  slt\n    /* \"#utility.yul\":1028:1030   */\n  iszero\n  tag_36\n  jumpi\n    /* \"#utility.yul\":1081:1087   */\n  dup2\n    /* \"#utility.yul\":1073:1079   */\n  dup3\n    /* \"#utility.yul\":1066:1088   */\n  revert\n    /* \"#utility.yul\":1028:1030   */\ntag_36:\n    /* \"#utility.yul\":1113:1129   */\n  dup3\n  mload\n  sub(shl(0x40, 0x01), 0x01)\n    /* \"#utility.yul\":1178:1192   */\n  dup1\n  dup3\n  gt\n    /* \"#utility.yul\":1175:1177   */\n  iszero\n  tag_37\n  jumpi\n    /* \"#utility.yul\":1210:1216   */\n  dup4\n    /* \"#utility.yul\":1202:1208   */\n  dup5\n    /* \"#utility.yul\":1195:1217   */\n  revert\n    /* \"#utility.yul\":1175:1177   */\ntag_37:\n    /* \"#utility.yul\":1238:1301   */\n  tag_38\n    /* \"#utility.yul\":1293:1300   */\n  dup7\n    /* \"#utility.yul\":1284:1290   */\n  dup4\n    /* \"#utility.yul\":1273:1282   */\n  dup8\n    /* \"#utility.yul\":1269:1291   */\n  add\n    /* \"#utility.yul\":1238:1301   */\n  tag_22\n  jump\t// in\ntag_38:\n    /* \"#utility.yul\":1228:1301   */\n  swap4\n  pop\n    /* \"#utility.yul\":1347:1349   */\n  0x20\n    /* \"#utility.yul\":1336:1345   */\n  dup6\n    /* \"#utility.yul\":1332:1350   */\n  add\n    /* \"#utility.yul\":1326:1351   */\n  mload\n    /* \"#utility.yul\":1310:1351   */\n  swap2\n  pop\n    /* \"#utility.yul\":1376:1378   */\n  dup1\n    /* \"#utility.yul\":1366:1374   */\n  dup3\n    /* \"#utility.yul\":1363:1379   */\n  gt\n    /* \"#utility.yul\":1360:1362   */\n  iszero\n  tag_39\n  jumpi\n    /* \"#utility.yul\":1397:1403   */\n  dup3\n    /* \"#utility.yul\":1389:1395   */\n  dup4\n    /* \"#utility.yul\":1382:1404   */\n  revert\n    /* \"#utility.yul\":1360:1362   */\ntag_39:\n  pop\n    /* \"#utility.yul\":1425:1490   */\n  tag_40\n    /* \"#utility.yul\":1482:1489   */\n  dup6\n    /* \"#utility.yul\":1471:1479   */\n  dup3\n    /* \"#utility.yul\":1460:1469   */\n  dup7\n    /* \"#utility.yul\":1456:1480   */\n  add\n    /* \"#utility.yul\":1425:1490   */\n  tag_22\n  jump\t// in\ntag_40:\n    /* \"#utility.yul\":1415:1490   */\n  swap2\n  pop\n  pop\n    /* \"#utility.yul\":1018:1496   */\n  swap3\n  pop\n  swap3\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":1501:1881   */\ntag_11:\n    /* \"#utility.yul\":1586:1587   */\n  0x02\n    /* \"#utility.yul\":1576:1588   */\n  dup2\n  div\n    /* \"#utility.yul\":1633:1634   */\n  0x01\n    /* \"#utility.yul\":1623:1635   */\n  dup3\n  and\n  dup1\n    /* \"#utility.yul\":1644:1646   */\n  tag_42\n  jumpi\n    /* \"#utility.yul\":1698:1702   */\n  0x7f\n    /* \"#utility.yul\":1690:1696   */\n  dup3\n    /* \"#utility.yul\":1686:1703   */\n  and\n    /* \"#utility.yul\":1676:1703   */\n  swap2\n  pop\n    /* \"#utility.yul\":1644:1646   */\ntag_42:\n    /* \"#utility.yul\":1751:1753   */\n  0x20\n    /* \"#utility.yul\":1743:1749   */\n  dup3\n    /* \"#utility.yul\":1740:1754   */\n  lt\n    /* \"#utility.yul\":1720:1738   */\n  dup2\n    /* \"#utility.yul\":1717:1755   */\n  eq\n    /* \"#utility.yul\":1714:1716   */\n  iszero\n  tag_43\n  jumpi\n    /* \"#utility.yul\":1797:1807   */\n  0x4e487b71\n    /* \"#utility.yul\":1792:1795   */\n  0xe0\n    /* \"#utility.yul\":1788:1808   */\n  shl\n    /* \"#utility.yul\":1785:1786   */\n  0x00\n    /* \"#utility.yul\":1778:1809   */\n  mstore\n    /* \"#utility.yul\":1832:1836   */\n  0x22\n    /* \"#utility.yul\":1829:1830   */\n  0x04\n    /* \"#utility.yul\":1822:1837   */\n  mstore\n    /* \"#utility.yul\":1860:1864   */\n  0x24\n    /* \"#utility.yul\":1857:1858   */\n  0x00\n    /* \"#utility.yul\":1850:1865   */\n  revert\n    /* \"#utility.yul\":1714:1716   */\ntag_43:\n  pop\n    /* \"#utility.yul\":1556:1881   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":1886:2013   */\ntag_27:\n    /* \"#utility.yul\":1947:1957   */\n  0x4e487b71\n    /* \"#utility.yul\":1942:1945   */\n  0xe0\n    /* \"#utility.yul\":1938:1958   */\n  shl\n    /* \"#utility.yul\":1935:1936   */\n  0x00\n    /* \"#utility.yul\":1928:1959   */\n  mstore\n    /* \"#utility.yul\":1978:1982   */\n  0x41\n    /* \"#utility.yul\":1975:1976   */\n  0x04\n    /* \"#utility.yul\":1968:1983   */\n  mstore\n    /* \"#utility.yul\":2002:2006   */\n  0x24\n    /* \"#utility.yul\":1999:2000   */\n  0x00\n    /* \"#utility.yul\":1992:2007   */\n  revert\n    /* \"#utility.yul\":1918:2013   */\ntag_21:\n    /* \"ERC20/ERC20.sol\":1424:12997  contract ERC20 is Context, IERC20, IERC20Metadata {\r... */\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"ERC20/ERC20.sol\":1424:12997  contract ERC20 is Context, IERC20, IERC20Metadata {\r... */\n      mstore(0x40, 0x80)\n      callvalue\n      dup1\n      iszero\n      tag_1\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_1:\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x39509351\n      gt\n      tag_14\n      jumpi\n      dup1\n      0x39509351\n      eq\n      tag_8\n      jumpi\n      dup1\n      0x70a08231\n      eq\n      tag_9\n      jumpi\n      dup1\n      0x95d89b41\n      eq\n      tag_10\n      jumpi\n      dup1\n      0xa457c2d7\n      eq\n      tag_11\n      jumpi\n      dup1\n      0xa9059cbb\n      eq\n      tag_12\n      jumpi\n      dup1\n      0xdd62ed3e\n      eq\n      tag_13\n      jumpi\n      jump(tag_2)\n    tag_14:\n      dup1\n      0x06fdde03\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x095ea7b3\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x18160ddd\n      eq\n      tag_5\n      jumpi\n      dup1\n      0x23b872dd\n      eq\n      tag_6\n      jumpi\n      dup1\n      0x313ce567\n      eq\n      tag_7\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"ERC20/ERC20.sol\":2204:2304  function name() public view virtual override returns (string memory) {\r... */\n    tag_3:\n      tag_15\n      tag_16\n      jump\t// in\n    tag_15:\n      mload(0x40)\n      tag_17\n      swap2\n      swap1\n      tag_18\n      jump\t// in\n    tag_17:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"ERC20/ERC20.sol\":4557:4758  function approve(address spender, uint256 amount) public virtual override returns (bool) {\r... */\n    tag_4:\n      tag_19\n      tag_20\n      calldatasize\n      0x04\n      tag_21\n      jump\t// in\n    tag_20:\n      tag_22\n      jump\t// in\n    tag_19:\n      mload(0x40)\n      tag_17\n      swap2\n      swap1\n      tag_24\n      jump\t// in\n        /* \"ERC20/ERC20.sol\":3326:3434  function totalSupply() public view virtual override returns (uint256) {\r... */\n    tag_5:\n      tag_25\n      tag_26\n      jump\t// in\n    tag_25:\n      mload(0x40)\n      tag_17\n      swap2\n      swap1\n      tag_28\n      jump\t// in\n        /* \"ERC20/ERC20.sol\":5338:5633  function transferFrom(\r... */\n    tag_6:\n      tag_19\n      tag_30\n      calldatasize\n      0x04\n      tag_31\n      jump\t// in\n    tag_30:\n      tag_32\n      jump\t// in\n        /* \"ERC20/ERC20.sol\":3166:3261  function decimals() public view virtual override returns (uint256) {\r... */\n    tag_7:\n      tag_25\n      tag_35\n      jump\t// in\n        /* \"ERC20/ERC20.sol\":6042:6280  function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r... */\n    tag_8:\n      tag_19\n      tag_38\n      calldatasize\n      0x04\n      tag_21\n      jump\t// in\n    tag_38:\n      tag_39\n      jump\t// in\n        /* \"ERC20/ERC20.sol\":3497:3624  function balanceOf(address account) public view virtual override returns (uint256) {\r... */\n    tag_9:\n      tag_25\n      tag_42\n      calldatasize\n      0x04\n      tag_43\n      jump\t// in\n    tag_42:\n      tag_44\n      jump\t// in\n        /* \"ERC20/ERC20.sol\":2423:2527  function symbol() public view virtual override returns (string memory) {\r... */\n    tag_10:\n      tag_15\n      tag_47\n      jump\t// in\n        /* \"ERC20/ERC20.sol\":6783:7219  function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r... */\n    tag_11:\n      tag_19\n      tag_50\n      calldatasize\n      0x04\n      tag_21\n      jump\t// in\n    tag_50:\n      tag_51\n      jump\t// in\n        /* \"ERC20/ERC20.sol\":3830:4023  function transfer(address to, uint256 amount) public virtual override returns (bool) {\r... */\n    tag_12:\n      tag_19\n      tag_54\n      calldatasize\n      0x04\n      tag_21\n      jump\t// in\n    tag_54:\n      tag_55\n      jump\t// in\n        /* \"ERC20/ERC20.sol\":4086:4237  function allowance(address owner, address spender) public view virtual override returns (uint256) {\r... */\n    tag_13:\n      tag_25\n      tag_58\n      calldatasize\n      0x04\n      tag_59\n      jump\t// in\n    tag_58:\n      tag_60\n      jump\t// in\n        /* \"ERC20/ERC20.sol\":2204:2304  function name() public view virtual override returns (string memory) {\r... */\n    tag_16:\n        /* \"ERC20/ERC20.sol\":2258:2271  string memory */\n      0x60\n        /* \"ERC20/ERC20.sol\":2291:2296  _name */\n      0x03\n        /* \"ERC20/ERC20.sol\":2284:2296  return _name */\n      dup1\n      sload\n      tag_63\n      swap1\n      tag_64\n      jump\t// in\n    tag_63:\n      dup1\n      0x1f\n      add\n      0x20\n      dup1\n      swap2\n      div\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      dup3\n      dup1\n      sload\n      tag_65\n      swap1\n      tag_64\n      jump\t// in\n    tag_65:\n      dup1\n      iszero\n      tag_66\n      jumpi\n      dup1\n      0x1f\n      lt\n      tag_67\n      jumpi\n      0x0100\n      dup1\n      dup4\n      sload\n      div\n      mul\n      dup4\n      mstore\n      swap2\n      0x20\n      add\n      swap2\n      jump(tag_66)\n    tag_67:\n      dup3\n      add\n      swap2\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      swap1\n    tag_68:\n      dup2\n      sload\n      dup2\n      mstore\n      swap1\n      0x01\n      add\n      swap1\n      0x20\n      add\n      dup1\n      dup4\n      gt\n      tag_68\n      jumpi\n      dup3\n      swap1\n      sub\n      0x1f\n      and\n      dup3\n      add\n      swap2\n    tag_66:\n      pop\n      pop\n      pop\n      pop\n      pop\n      swap1\n      pop\n        /* \"ERC20/ERC20.sol\":2204:2304  function name() public view virtual override returns (string memory) {\r... */\n      swap1\n      jump\t// out\n        /* \"ERC20/ERC20.sol\":4557:4758  function approve(address spender, uint256 amount) public virtual override returns (bool) {\r... */\n    tag_22:\n        /* \"ERC20/ERC20.sol\":4640:4644  bool */\n      0x00\n        /* \"ERC20/ERC20.sol\":4657:4670  address owner */\n      dup1\n        /* \"ERC20/ERC20.sol\":4673:4685  _msgSender() */\n      tag_70\n        /* \"ERC20/ERC20.sol\":4673:4683  _msgSender */\n      tag_71\n        /* \"ERC20/ERC20.sol\":4673:4685  _msgSender() */\n      jump\t// in\n    tag_70:\n        /* \"ERC20/ERC20.sol\":4657:4685  address owner = _msgSender() */\n      swap1\n      pop\n        /* \"ERC20/ERC20.sol\":4696:4728  _approve(owner, spender, amount) */\n      tag_72\n        /* \"ERC20/ERC20.sol\":4705:4710  owner */\n      dup2\n        /* \"ERC20/ERC20.sol\":4712:4719  spender */\n      dup6\n        /* \"ERC20/ERC20.sol\":4721:4727  amount */\n      dup6\n        /* \"ERC20/ERC20.sol\":4696:4704  _approve */\n      tag_73\n        /* \"ERC20/ERC20.sol\":4696:4728  _approve(owner, spender, amount) */\n      jump\t// in\n    tag_72:\n      pop\n        /* \"ERC20/ERC20.sol\":4746:4750  true */\n      0x01\n      swap4\n        /* \"ERC20/ERC20.sol\":4557:4758  function approve(address spender, uint256 amount) public virtual override returns (bool) {\r... */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"ERC20/ERC20.sol\":3326:3434  function totalSupply() public view virtual override returns (uint256) {\r... */\n    tag_26:\n        /* \"ERC20/ERC20.sol\":3414:3426  _totalSupply */\n      sload(0x02)\n        /* \"ERC20/ERC20.sol\":3326:3434  function totalSupply() public view virtual override returns (uint256) {\r... */\n      swap1\n      jump\t// out\n        /* \"ERC20/ERC20.sol\":5338:5633  function transferFrom(\r... */\n    tag_32:\n        /* \"ERC20/ERC20.sol\":5469:5473  bool */\n      0x00\n        /* \"ERC20/ERC20.sol\":5486:5501  address spender */\n      dup1\n        /* \"ERC20/ERC20.sol\":5504:5516  _msgSender() */\n      tag_76\n        /* \"ERC20/ERC20.sol\":5504:5514  _msgSender */\n      tag_71\n        /* \"ERC20/ERC20.sol\":5504:5516  _msgSender() */\n      jump\t// in\n    tag_76:\n        /* \"ERC20/ERC20.sol\":5486:5516  address spender = _msgSender() */\n      swap1\n      pop\n        /* \"ERC20/ERC20.sol\":5527:5565  _spendAllowance(from, spender, amount) */\n      tag_77\n        /* \"ERC20/ERC20.sol\":5543:5547  from */\n      dup6\n        /* \"ERC20/ERC20.sol\":5549:5556  spender */\n      dup3\n        /* \"ERC20/ERC20.sol\":5558:5564  amount */\n      dup6\n        /* \"ERC20/ERC20.sol\":5527:5542  _spendAllowance */\n      tag_78\n        /* \"ERC20/ERC20.sol\":5527:5565  _spendAllowance(from, spender, amount) */\n      jump\t// in\n    tag_77:\n        /* \"ERC20/ERC20.sol\":5576:5603  _transfer(from, to, amount) */\n      tag_79\n        /* \"ERC20/ERC20.sol\":5586:5590  from */\n      dup6\n        /* \"ERC20/ERC20.sol\":5592:5594  to */\n      dup6\n        /* \"ERC20/ERC20.sol\":5596:5602  amount */\n      dup6\n        /* \"ERC20/ERC20.sol\":5576:5585  _transfer */\n      tag_80\n        /* \"ERC20/ERC20.sol\":5576:5603  _transfer(from, to, amount) */\n      jump\t// in\n    tag_79:\n      pop\n        /* \"ERC20/ERC20.sol\":5621:5625  true */\n      0x01\n      swap5\n        /* \"ERC20/ERC20.sol\":5338:5633  function transferFrom(\r... */\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"ERC20/ERC20.sol\":3166:3261  function decimals() public view virtual override returns (uint256) {\r... */\n    tag_35:\n        /* \"ERC20/ERC20.sol\":3251:3253  18 */\n      0x12\n        /* \"ERC20/ERC20.sol\":3166:3261  function decimals() public view virtual override returns (uint256) {\r... */\n      swap1\n      jump\t// out\n        /* \"ERC20/ERC20.sol\":6042:6280  function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r... */\n    tag_39:\n        /* \"ERC20/ERC20.sol\":6130:6134  bool */\n      0x00\n        /* \"ERC20/ERC20.sol\":6147:6160  address owner */\n      dup1\n        /* \"ERC20/ERC20.sol\":6163:6175  _msgSender() */\n      tag_83\n        /* \"ERC20/ERC20.sol\":6163:6173  _msgSender */\n      tag_71\n        /* \"ERC20/ERC20.sol\":6163:6175  _msgSender() */\n      jump\t// in\n    tag_83:\n        /* \"ERC20/ERC20.sol\":6147:6175  address owner = _msgSender() */\n      swap1\n      pop\n        /* \"ERC20/ERC20.sol\":6186:6250  _approve(owner, spender, allowance(owner, spender) + addedValue) */\n      tag_72\n        /* \"ERC20/ERC20.sol\":6195:6200  owner */\n      dup2\n        /* \"ERC20/ERC20.sol\":6202:6209  spender */\n      dup6\n        /* \"ERC20/ERC20.sol\":6239:6249  addedValue */\n      dup6\n        /* \"ERC20/ERC20.sol\":6211:6236  allowance(owner, spender) */\n      tag_85\n        /* \"ERC20/ERC20.sol\":6221:6226  owner */\n      dup6\n        /* \"ERC20/ERC20.sol\":6228:6235  spender */\n      dup10\n        /* \"ERC20/ERC20.sol\":6211:6220  allowance */\n      tag_60\n        /* \"ERC20/ERC20.sol\":6211:6236  allowance(owner, spender) */\n      jump\t// in\n    tag_85:\n        /* \"ERC20/ERC20.sol\":6211:6249  allowance(owner, spender) + addedValue */\n      tag_86\n      swap2\n      swap1\n      tag_87\n      jump\t// in\n    tag_86:\n        /* \"ERC20/ERC20.sol\":6186:6194  _approve */\n      tag_73\n        /* \"ERC20/ERC20.sol\":6186:6250  _approve(owner, spender, allowance(owner, spender) + addedValue) */\n      jump\t// in\n        /* \"ERC20/ERC20.sol\":3497:3624  function balanceOf(address account) public view virtual override returns (uint256) {\r... */\n    tag_44:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"ERC20/ERC20.sol\":3598:3616  _balances[account] */\n      dup2\n      and\n        /* \"ERC20/ERC20.sol\":3571:3578  uint256 */\n      0x00\n        /* \"ERC20/ERC20.sol\":3598:3616  _balances[account] */\n      swap1\n      dup2\n      mstore\n      0x20\n      dup2\n      swap1\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n        /* \"ERC20/ERC20.sol\":3497:3624  function balanceOf(address account) public view virtual override returns (uint256) {\r... */\n    tag_88:\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"ERC20/ERC20.sol\":2423:2527  function symbol() public view virtual override returns (string memory) {\r... */\n    tag_47:\n        /* \"ERC20/ERC20.sol\":2479:2492  string memory */\n      0x60\n        /* \"ERC20/ERC20.sol\":2512:2519  _symbol */\n      0x04\n        /* \"ERC20/ERC20.sol\":2505:2519  return _symbol */\n      dup1\n      sload\n      tag_63\n      swap1\n      tag_64\n      jump\t// in\n        /* \"ERC20/ERC20.sol\":6783:7219  function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r... */\n    tag_51:\n        /* \"ERC20/ERC20.sol\":6876:6880  bool */\n      0x00\n        /* \"ERC20/ERC20.sol\":6893:6906  address owner */\n      dup1\n        /* \"ERC20/ERC20.sol\":6909:6921  _msgSender() */\n      tag_96\n        /* \"ERC20/ERC20.sol\":6909:6919  _msgSender */\n      tag_71\n        /* \"ERC20/ERC20.sol\":6909:6921  _msgSender() */\n      jump\t// in\n    tag_96:\n        /* \"ERC20/ERC20.sol\":6893:6921  address owner = _msgSender() */\n      swap1\n      pop\n        /* \"ERC20/ERC20.sol\":6932:6956  uint256 currentAllowance */\n      0x00\n        /* \"ERC20/ERC20.sol\":6959:6984  allowance(owner, spender) */\n      tag_97\n        /* \"ERC20/ERC20.sol\":6969:6974  owner */\n      dup3\n        /* \"ERC20/ERC20.sol\":6976:6983  spender */\n      dup7\n        /* \"ERC20/ERC20.sol\":6959:6968  allowance */\n      tag_60\n        /* \"ERC20/ERC20.sol\":6959:6984  allowance(owner, spender) */\n      jump\t// in\n    tag_97:\n        /* \"ERC20/ERC20.sol\":6932:6984  uint256 currentAllowance = allowance(owner, spender) */\n      swap1\n      pop\n        /* \"ERC20/ERC20.sol\":7023:7038  subtractedValue */\n      dup4\n        /* \"ERC20/ERC20.sol\":7003:7019  currentAllowance */\n      dup2\n        /* \"ERC20/ERC20.sol\":7003:7038  currentAllowance >= subtractedValue */\n      lt\n      iszero\n        /* \"ERC20/ERC20.sol\":6995:7080  require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\") */\n      tag_98\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_99\n      swap1\n      tag_100\n      jump\t// in\n    tag_99:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_98:\n        /* \"ERC20/ERC20.sol\":7116:7176  _approve(owner, spender, currentAllowance - subtractedValue) */\n      tag_79\n        /* \"ERC20/ERC20.sol\":7125:7130  owner */\n      dup3\n        /* \"ERC20/ERC20.sol\":7132:7139  spender */\n      dup7\n        /* \"ERC20/ERC20.sol\":7160:7175  subtractedValue */\n      dup7\n        /* \"ERC20/ERC20.sol\":7141:7157  currentAllowance */\n      dup5\n        /* \"ERC20/ERC20.sol\":7141:7175  currentAllowance - subtractedValue */\n      sub\n        /* \"ERC20/ERC20.sol\":7116:7124  _approve */\n      tag_73\n        /* \"ERC20/ERC20.sol\":7116:7176  _approve(owner, spender, currentAllowance - subtractedValue) */\n      jump\t// in\n        /* \"ERC20/ERC20.sol\":3830:4023  function transfer(address to, uint256 amount) public virtual override returns (bool) {\r... */\n    tag_55:\n        /* \"ERC20/ERC20.sol\":3909:3913  bool */\n      0x00\n        /* \"ERC20/ERC20.sol\":3926:3939  address owner */\n      dup1\n        /* \"ERC20/ERC20.sol\":3942:3954  _msgSender() */\n      tag_103\n        /* \"ERC20/ERC20.sol\":3942:3952  _msgSender */\n      tag_71\n        /* \"ERC20/ERC20.sol\":3942:3954  _msgSender() */\n      jump\t// in\n    tag_103:\n        /* \"ERC20/ERC20.sol\":3926:3954  address owner = _msgSender() */\n      swap1\n      pop\n        /* \"ERC20/ERC20.sol\":3965:3993  _transfer(owner, to, amount) */\n      tag_72\n        /* \"ERC20/ERC20.sol\":3975:3980  owner */\n      dup2\n        /* \"ERC20/ERC20.sol\":3982:3984  to */\n      dup6\n        /* \"ERC20/ERC20.sol\":3986:3992  amount */\n      dup6\n        /* \"ERC20/ERC20.sol\":3965:3974  _transfer */\n      tag_80\n        /* \"ERC20/ERC20.sol\":3965:3993  _transfer(owner, to, amount) */\n      jump\t// in\n        /* \"ERC20/ERC20.sol\":4086:4237  function allowance(address owner, address spender) public view virtual override returns (uint256) {\r... */\n    tag_60:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"ERC20/ERC20.sol\":4202:4220  _allowances[owner] */\n      swap2\n      dup3\n      and\n        /* \"ERC20/ERC20.sol\":4175:4182  uint256 */\n      0x00\n        /* \"ERC20/ERC20.sol\":4202:4220  _allowances[owner] */\n      swap1\n      dup2\n      mstore\n        /* \"ERC20/ERC20.sol\":4202:4213  _allowances */\n      0x01\n        /* \"ERC20/ERC20.sol\":4202:4220  _allowances[owner] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"ERC20/ERC20.sol\":4202:4229  _allowances[owner][spender] */\n      swap4\n      swap1\n      swap5\n      and\n      dup3\n      mstore\n      swap2\n      swap1\n      swap2\n      mstore\n      keccak256\n      sload\n      swap1\n        /* \"ERC20/ERC20.sol\":4086:4237  function allowance(address owner, address spender) public view virtual override returns (uint256) {\r... */\n      jump\t// out\n        /* \"Utils/Context.sol\":656:754  function _msgSender() internal view virtual returns (address) {\r... */\n    tag_71:\n        /* \"Utils/Context.sol\":736:746  msg.sender */\n      caller\n        /* \"Utils/Context.sol\":656:754  function _msgSender() internal view virtual returns (address) {\r... */\n      swap1\n      jump\t// out\n        /* \"ERC20/ERC20.sol\":10417:10797  function _approve(\r... */\n    tag_73:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"ERC20/ERC20.sol\":10553:10572  owner != address(0) */\n      dup4\n      and\n        /* \"ERC20/ERC20.sol\":10545:10613  require(owner != address(0), \"ERC20: approve from the zero address\") */\n      tag_108\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_99\n      swap1\n      tag_110\n      jump\t// in\n    tag_108:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"ERC20/ERC20.sol\":10632:10653  spender != address(0) */\n      dup3\n      and\n        /* \"ERC20/ERC20.sol\":10624:10692  require(spender != address(0), \"ERC20: approve to the zero address\") */\n      tag_111\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_99\n      swap1\n      tag_113\n      jump\t// in\n    tag_111:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"ERC20/ERC20.sol\":10705:10723  _allowances[owner] */\n      dup1\n      dup5\n      and\n      0x00\n      dup2\n      dup2\n      mstore\n        /* \"ERC20/ERC20.sol\":10705:10716  _allowances */\n      0x01\n        /* \"ERC20/ERC20.sol\":10705:10723  _allowances[owner] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"ERC20/ERC20.sol\":10705:10732  _allowances[owner][spender] */\n      swap5\n      dup8\n      and\n      dup1\n      dup5\n      mstore\n      swap5\n      swap1\n      swap2\n      mstore\n      swap1\n      dup2\n      swap1\n      keccak256\n        /* \"ERC20/ERC20.sol\":10705:10741  _allowances[owner][spender] = amount */\n      dup5\n      swap1\n      sstore\n        /* \"ERC20/ERC20.sol\":10757:10789  Approval(owner, spender, amount) */\n      mload\n      0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925\n      swap1\n      tag_114\n      swap1\n        /* \"ERC20/ERC20.sol\":10735:10741  amount */\n      dup6\n      swap1\n        /* \"ERC20/ERC20.sol\":10757:10789  Approval(owner, spender, amount) */\n      tag_28\n      jump\t// in\n    tag_114:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"ERC20/ERC20.sol\":10417:10797  function _approve(\r... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"ERC20/ERC20.sol\":11088:11541  function _spendAllowance(\r... */\n    tag_78:\n        /* \"ERC20/ERC20.sol\":11223:11247  uint256 currentAllowance */\n      0x00\n        /* \"ERC20/ERC20.sol\":11250:11275  allowance(owner, spender) */\n      tag_116\n        /* \"ERC20/ERC20.sol\":11260:11265  owner */\n      dup5\n        /* \"ERC20/ERC20.sol\":11267:11274  spender */\n      dup5\n        /* \"ERC20/ERC20.sol\":11250:11259  allowance */\n      tag_60\n        /* \"ERC20/ERC20.sol\":11250:11275  allowance(owner, spender) */\n      jump\t// in\n    tag_116:\n        /* \"ERC20/ERC20.sol\":11223:11275  uint256 currentAllowance = allowance(owner, spender) */\n      swap1\n      pop\n      not(0x00)\n        /* \"ERC20/ERC20.sol\":11290:11306  currentAllowance */\n      dup2\n        /* \"ERC20/ERC20.sol\":11290:11327  currentAllowance != type(uint256).max */\n      eq\n        /* \"ERC20/ERC20.sol\":11286:11534  if (currentAllowance != type(uint256).max) {\r... */\n      tag_121\n      jumpi\n        /* \"ERC20/ERC20.sol\":11372:11378  amount */\n      dup2\n        /* \"ERC20/ERC20.sol\":11352:11368  currentAllowance */\n      dup2\n        /* \"ERC20/ERC20.sol\":11352:11378  currentAllowance >= amount */\n      lt\n      iszero\n        /* \"ERC20/ERC20.sol\":11344:11412  require(currentAllowance >= amount, \"ERC20: insufficient allowance\") */\n      tag_118\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_99\n      swap1\n      tag_120\n      jump\t// in\n    tag_118:\n        /* \"ERC20/ERC20.sol\":11456:11507  _approve(owner, spender, currentAllowance - amount) */\n      tag_121\n        /* \"ERC20/ERC20.sol\":11465:11470  owner */\n      dup5\n        /* \"ERC20/ERC20.sol\":11472:11479  spender */\n      dup5\n        /* \"ERC20/ERC20.sol\":11500:11506  amount */\n      dup5\n        /* \"ERC20/ERC20.sol\":11481:11497  currentAllowance */\n      dup5\n        /* \"ERC20/ERC20.sol\":11481:11506  currentAllowance - amount */\n      sub\n        /* \"ERC20/ERC20.sol\":11456:11464  _approve */\n      tag_73\n        /* \"ERC20/ERC20.sol\":11456:11507  _approve(owner, spender, currentAllowance - amount) */\n      jump\t// in\n    tag_121:\n        /* \"ERC20/ERC20.sol\":11088:11541  function _spendAllowance(\r... */\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"ERC20/ERC20.sol\":7698:8369  function _transfer(\r... */\n    tag_80:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"ERC20/ERC20.sol\":7829:7847  from != address(0) */\n      dup4\n      and\n        /* \"ERC20/ERC20.sol\":7821:7889  require(from != address(0), \"ERC20: transfer from the zero address\") */\n      tag_123\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_99\n      swap1\n      tag_125\n      jump\t// in\n    tag_123:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"ERC20/ERC20.sol\":7908:7924  to != address(0) */\n      dup3\n      and\n        /* \"ERC20/ERC20.sol\":7900:7964  require(to != address(0), \"ERC20: transfer to the zero address\") */\n      tag_126\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_99\n      swap1\n      tag_128\n      jump\t// in\n    tag_126:\n        /* \"ERC20/ERC20.sol\":7977:8015  _beforeTokenTransfer(from, to, amount) */\n      tag_129\n        /* \"ERC20/ERC20.sol\":7998:8002  from */\n      dup4\n        /* \"ERC20/ERC20.sol\":8004:8006  to */\n      dup4\n        /* \"ERC20/ERC20.sol\":8008:8014  amount */\n      dup4\n        /* \"ERC20/ERC20.sol\":7977:7997  _beforeTokenTransfer */\n      tag_130\n        /* \"ERC20/ERC20.sol\":7977:8015  _beforeTokenTransfer(from, to, amount) */\n      jump\t// in\n    tag_129:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"ERC20/ERC20.sol\":8050:8065  _balances[from] */\n      dup4\n      and\n        /* \"ERC20/ERC20.sol\":8028:8047  uint256 fromBalance */\n      0x00\n        /* \"ERC20/ERC20.sol\":8050:8065  _balances[from] */\n      swap1\n      dup2\n      mstore\n      0x20\n      dup2\n      swap1\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n        /* \"ERC20/ERC20.sol\":8084:8105  fromBalance >= amount */\n      dup2\n      dup2\n      lt\n      iszero\n        /* \"ERC20/ERC20.sol\":8076:8148  require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\") */\n      tag_131\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_99\n      swap1\n      tag_133\n      jump\t// in\n    tag_131:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"ERC20/ERC20.sol\":8184:8199  _balances[from] */\n      dup1\n      dup6\n      and\n        /* \"ERC20/ERC20.sol\":8184:8193  _balances */\n      0x00\n        /* \"ERC20/ERC20.sol\":8184:8199  _balances[from] */\n      swap1\n      dup2\n      mstore\n      0x20\n      dup2\n      swap1\n      mstore\n      0x40\n      dup1\n      dup3\n      keccak256\n        /* \"ERC20/ERC20.sol\":8202:8222  fromBalance - amount */\n      dup6\n      dup6\n      sub\n        /* \"ERC20/ERC20.sol\":8184:8222  _balances[from] = fromBalance - amount */\n      swap1\n      sstore\n        /* \"ERC20/ERC20.sol\":8244:8257  _balances[to] */\n      swap2\n      dup6\n      and\n      dup2\n      mstore\n      swap1\n      dup2\n      keccak256\n        /* \"ERC20/ERC20.sol\":8244:8267  _balances[to] += amount */\n      dup1\n      sload\n        /* \"ERC20/ERC20.sol\":8216:8222  amount */\n      dup5\n      swap3\n        /* \"ERC20/ERC20.sol\":8184:8193  _balances */\n      swap1\n        /* \"ERC20/ERC20.sol\":8244:8267  _balances[to] += amount */\n      tag_134\n      swap1\n        /* \"ERC20/ERC20.sol\":8216:8222  amount */\n      dup5\n      swap1\n        /* \"ERC20/ERC20.sol\":8244:8267  _balances[to] += amount */\n      tag_87\n      jump\t// in\n    tag_134:\n      swap3\n      pop\n      pop\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"ERC20/ERC20.sol\":8300:8302  to */\n      dup3\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"ERC20/ERC20.sol\":8285:8311  Transfer(from, to, amount) */\n      and\n        /* \"ERC20/ERC20.sol\":8294:8298  from */\n      dup5\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"ERC20/ERC20.sol\":8285:8311  Transfer(from, to, amount) */\n      and\n      0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\n        /* \"ERC20/ERC20.sol\":8304:8310  amount */\n      dup5\n        /* \"ERC20/ERC20.sol\":8285:8311  Transfer(from, to, amount) */\n      mload(0x40)\n      tag_135\n      swap2\n      swap1\n      tag_28\n      jump\t// in\n    tag_135:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"ERC20/ERC20.sol\":8324:8361  _afterTokenTransfer(from, to, amount) */\n      tag_121\n        /* \"ERC20/ERC20.sol\":8344:8348  from */\n      dup5\n        /* \"ERC20/ERC20.sol\":8350:8352  to */\n      dup5\n        /* \"ERC20/ERC20.sol\":8354:8360  amount */\n      dup5\n        /* \"ERC20/ERC20.sol\":12141:12266  function _beforeTokenTransfer(\r... */\n    tag_130:\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":14:189   */\n    tag_141:\n        /* \"#utility.yul\":84:104   */\n      dup1\n      calldataload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":133:164   */\n      dup2\n      and\n        /* \"#utility.yul\":123:165   */\n      dup2\n      eq\n        /* \"#utility.yul\":113:115   */\n      tag_88\n      jumpi\n        /* \"#utility.yul\":179:180   */\n      0x00\n        /* \"#utility.yul\":176:177   */\n      dup1\n        /* \"#utility.yul\":169:181   */\n      revert\n        /* \"#utility.yul\":194:392   */\n    tag_43:\n      0x00\n        /* \"#utility.yul\":306:308   */\n      0x20\n        /* \"#utility.yul\":294:303   */\n      dup3\n        /* \"#utility.yul\":285:292   */\n      dup5\n        /* \"#utility.yul\":281:304   */\n      sub\n        /* \"#utility.yul\":277:309   */\n      slt\n        /* \"#utility.yul\":274:276   */\n      iszero\n      tag_145\n      jumpi\n        /* \"#utility.yul\":327:333   */\n      dup1\n        /* \"#utility.yul\":319:325   */\n      dup2\n        /* \"#utility.yul\":312:334   */\n      revert\n        /* \"#utility.yul\":274:276   */\n    tag_145:\n        /* \"#utility.yul\":355:386   */\n      tag_146\n        /* \"#utility.yul\":376:385   */\n      dup3\n        /* \"#utility.yul\":355:386   */\n      tag_141\n      jump\t// in\n    tag_146:\n        /* \"#utility.yul\":345:386   */\n      swap4\n        /* \"#utility.yul\":264:392   */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":397:671   */\n    tag_59:\n      0x00\n      dup1\n        /* \"#utility.yul\":526:528   */\n      0x40\n        /* \"#utility.yul\":514:523   */\n      dup4\n        /* \"#utility.yul\":505:512   */\n      dup6\n        /* \"#utility.yul\":501:524   */\n      sub\n        /* \"#utility.yul\":497:529   */\n      slt\n        /* \"#utility.yul\":494:496   */\n      iszero\n      tag_148\n      jumpi\n        /* \"#utility.yul\":547:553   */\n      dup1\n        /* \"#utility.yul\":539:545   */\n      dup2\n        /* \"#utility.yul\":532:554   */\n      revert\n        /* \"#utility.yul\":494:496   */\n    tag_148:\n        /* \"#utility.yul\":575:606   */\n      tag_149\n        /* \"#utility.yul\":596:605   */\n      dup4\n        /* \"#utility.yul\":575:606   */\n      tag_141\n      jump\t// in\n    tag_149:\n        /* \"#utility.yul\":565:606   */\n      swap2\n      pop\n        /* \"#utility.yul\":625:665   */\n      tag_150\n        /* \"#utility.yul\":661:663   */\n      0x20\n        /* \"#utility.yul\":650:659   */\n      dup5\n        /* \"#utility.yul\":646:664   */\n      add\n        /* \"#utility.yul\":625:665   */\n      tag_141\n      jump\t// in\n    tag_150:\n        /* \"#utility.yul\":615:665   */\n      swap1\n      pop\n        /* \"#utility.yul\":484:671   */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":676:1018   */\n    tag_31:\n      0x00\n      dup1\n      0x00\n        /* \"#utility.yul\":822:824   */\n      0x60\n        /* \"#utility.yul\":810:819   */\n      dup5\n        /* \"#utility.yul\":801:808   */\n      dup7\n        /* \"#utility.yul\":797:820   */\n      sub\n        /* \"#utility.yul\":793:825   */\n      slt\n        /* \"#utility.yul\":790:792   */\n      iszero\n      tag_152\n      jumpi\n        /* \"#utility.yul\":843:849   */\n      dup1\n        /* \"#utility.yul\":835:841   */\n      dup2\n        /* \"#utility.yul\":828:850   */\n      revert\n        /* \"#utility.yul\":790:792   */\n    tag_152:\n        /* \"#utility.yul\":871:902   */\n      tag_153\n        /* \"#utility.yul\":892:901   */\n      dup5\n        /* \"#utility.yul\":871:902   */\n      tag_141\n      jump\t// in\n    tag_153:\n        /* \"#utility.yul\":861:902   */\n      swap3\n      pop\n        /* \"#utility.yul\":921:961   */\n      tag_154\n        /* \"#utility.yul\":957:959   */\n      0x20\n        /* \"#utility.yul\":946:955   */\n      dup6\n        /* \"#utility.yul\":942:960   */\n      add\n        /* \"#utility.yul\":921:961   */\n      tag_141\n      jump\t// in\n    tag_154:\n        /* \"#utility.yul\":911:961   */\n      swap2\n      pop\n        /* \"#utility.yul\":1008:1010   */\n      0x40\n        /* \"#utility.yul\":997:1006   */\n      dup5\n        /* \"#utility.yul\":993:1011   */\n      add\n        /* \"#utility.yul\":980:1012   */\n      calldataload\n        /* \"#utility.yul\":970:1012   */\n      swap1\n      pop\n        /* \"#utility.yul\":780:1018   */\n      swap3\n      pop\n      swap3\n      pop\n      swap3\n      jump\t// out\n        /* \"#utility.yul\":1023:1289   */\n    tag_21:\n      0x00\n      dup1\n        /* \"#utility.yul\":1152:1154   */\n      0x40\n        /* \"#utility.yul\":1140:1149   */\n      dup4\n        /* \"#utility.yul\":1131:1138   */\n      dup6\n        /* \"#utility.yul\":1127:1150   */\n      sub\n        /* \"#utility.yul\":1123:1155   */\n      slt\n        /* \"#utility.yul\":1120:1122   */\n      iszero\n      tag_156\n      jumpi\n        /* \"#utility.yul\":1173:1179   */\n      dup2\n        /* \"#utility.yul\":1165:1171   */\n      dup3\n        /* \"#utility.yul\":1158:1180   */\n      revert\n        /* \"#utility.yul\":1120:1122   */\n    tag_156:\n        /* \"#utility.yul\":1201:1232   */\n      tag_157\n        /* \"#utility.yul\":1222:1231   */\n      dup4\n        /* \"#utility.yul\":1201:1232   */\n      tag_141\n      jump\t// in\n    tag_157:\n        /* \"#utility.yul\":1191:1232   */\n      swap5\n        /* \"#utility.yul\":1279:1281   */\n      0x20\n        /* \"#utility.yul\":1264:1282   */\n      swap4\n      swap1\n      swap4\n      add\n        /* \"#utility.yul\":1251:1283   */\n      calldataload\n      swap4\n      pop\n      pop\n      pop\n        /* \"#utility.yul\":1110:1289   */\n      jump\t// out\n        /* \"#utility.yul\":1294:1481   */\n    tag_24:\n        /* \"#utility.yul\":1459:1473   */\n      swap1\n      iszero\n        /* \"#utility.yul\":1452:1474   */\n      iszero\n        /* \"#utility.yul\":1434:1475   */\n      dup2\n      mstore\n        /* \"#utility.yul\":1422:1424   */\n      0x20\n        /* \"#utility.yul\":1407:1425   */\n      add\n      swap1\n        /* \"#utility.yul\":1389:1481   */\n      jump\t// out\n        /* \"#utility.yul\":1486:2089   */\n    tag_18:\n      0x00\n        /* \"#utility.yul\":1627:1629   */\n      0x20\n        /* \"#utility.yul\":1656:1658   */\n      dup1\n        /* \"#utility.yul\":1645:1654   */\n      dup4\n        /* \"#utility.yul\":1638:1659   */\n      mstore\n        /* \"#utility.yul\":1688:1694   */\n      dup4\n        /* \"#utility.yul\":1682:1695   */\n      mload\n        /* \"#utility.yul\":1731:1737   */\n      dup1\n        /* \"#utility.yul\":1726:1728   */\n      dup3\n        /* \"#utility.yul\":1715:1724   */\n      dup6\n        /* \"#utility.yul\":1711:1729   */\n      add\n        /* \"#utility.yul\":1704:1738   */\n      mstore\n        /* \"#utility.yul\":1756:1760   */\n      dup3\n        /* \"#utility.yul\":1769:1909   */\n    tag_160:\n        /* \"#utility.yul\":1783:1789   */\n      dup2\n        /* \"#utility.yul\":1780:1781   */\n      dup2\n        /* \"#utility.yul\":1777:1790   */\n      lt\n        /* \"#utility.yul\":1769:1909   */\n      iszero\n      tag_162\n      jumpi\n        /* \"#utility.yul\":1878:1892   */\n      dup6\n      dup2\n      add\n        /* \"#utility.yul\":1874:1897   */\n      dup4\n      add\n        /* \"#utility.yul\":1868:1898   */\n      mload\n        /* \"#utility.yul\":1844:1861   */\n      dup6\n      dup3\n      add\n        /* \"#utility.yul\":1863:1865   */\n      0x40\n        /* \"#utility.yul\":1840:1866   */\n      add\n        /* \"#utility.yul\":1833:1899   */\n      mstore\n        /* \"#utility.yul\":1798:1808   */\n      dup3\n      add\n        /* \"#utility.yul\":1769:1909   */\n      jump(tag_160)\n    tag_162:\n        /* \"#utility.yul\":1927:1933   */\n      dup2\n        /* \"#utility.yul\":1924:1925   */\n      dup2\n        /* \"#utility.yul\":1921:1934   */\n      gt\n        /* \"#utility.yul\":1918:1920   */\n      iszero\n      tag_163\n      jumpi\n        /* \"#utility.yul\":1997:2001   */\n      dup4\n        /* \"#utility.yul\":1992:1994   */\n      0x40\n        /* \"#utility.yul\":1983:1989   */\n      dup4\n        /* \"#utility.yul\":1972:1981   */\n      dup8\n        /* \"#utility.yul\":1968:1990   */\n      add\n        /* \"#utility.yul\":1964:1995   */\n      add\n        /* \"#utility.yul\":1957:2002   */\n      mstore\n        /* \"#utility.yul\":1918:1920   */\n    tag_163:\n      pop\n        /* \"#utility.yul\":2073:2075   */\n      0x1f\n        /* \"#utility.yul\":2052:2067   */\n      add\n      not(0x1f)\n        /* \"#utility.yul\":2048:2077   */\n      and\n        /* \"#utility.yul\":2033:2078   */\n      swap3\n      swap1\n      swap3\n      add\n        /* \"#utility.yul\":2080:2082   */\n      0x40\n        /* \"#utility.yul\":2029:2083   */\n      add\n      swap4\n        /* \"#utility.yul\":1607:2089   */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2094:2493   */\n    tag_128:\n        /* \"#utility.yul\":2296:2298   */\n      0x20\n        /* \"#utility.yul\":2278:2299   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":2335:2337   */\n      0x23\n        /* \"#utility.yul\":2315:2333   */\n      swap1\n      dup3\n      add\n        /* \"#utility.yul\":2308:2338   */\n      mstore\n        /* \"#utility.yul\":2374:2408   */\n      0x45524332303a207472616e7366657220746f20746865207a65726f2061646472\n        /* \"#utility.yul\":2369:2371   */\n      0x40\n        /* \"#utility.yul\":2354:2372   */\n      dup3\n      add\n        /* \"#utility.yul\":2347:2409   */\n      mstore\n      shl(0xe8, 0x657373)\n        /* \"#utility.yul\":2440:2442   */\n      0x60\n        /* \"#utility.yul\":2425:2443   */\n      dup3\n      add\n        /* \"#utility.yul\":2418:2451   */\n      mstore\n        /* \"#utility.yul\":2483:2486   */\n      0x80\n        /* \"#utility.yul\":2468:2487   */\n      add\n      swap1\n        /* \"#utility.yul\":2268:2493   */\n      jump\t// out\n        /* \"#utility.yul\":2498:2896   */\n    tag_113:\n        /* \"#utility.yul\":2700:2702   */\n      0x20\n        /* \"#utility.yul\":2682:2703   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":2739:2741   */\n      0x22\n        /* \"#utility.yul\":2719:2737   */\n      swap1\n      dup3\n      add\n        /* \"#utility.yul\":2712:2742   */\n      mstore\n        /* \"#utility.yul\":2778:2812   */\n      0x45524332303a20617070726f766520746f20746865207a65726f206164647265\n        /* \"#utility.yul\":2773:2775   */\n      0x40\n        /* \"#utility.yul\":2758:2776   */\n      dup3\n      add\n        /* \"#utility.yul\":2751:2813   */\n      mstore\n      shl(0xf0, 0x7373)\n        /* \"#utility.yul\":2844:2846   */\n      0x60\n        /* \"#utility.yul\":2829:2847   */\n      dup3\n      add\n        /* \"#utility.yul\":2822:2854   */\n      mstore\n        /* \"#utility.yul\":2886:2889   */\n      0x80\n        /* \"#utility.yul\":2871:2890   */\n      add\n      swap1\n        /* \"#utility.yul\":2672:2896   */\n      jump\t// out\n        /* \"#utility.yul\":2901:3254   */\n    tag_120:\n        /* \"#utility.yul\":3103:3105   */\n      0x20\n        /* \"#utility.yul\":3085:3106   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":3142:3144   */\n      0x1d\n        /* \"#utility.yul\":3122:3140   */\n      swap1\n      dup3\n      add\n        /* \"#utility.yul\":3115:3145   */\n      mstore\n        /* \"#utility.yul\":3181:3212   */\n      0x45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000\n        /* \"#utility.yul\":3176:3178   */\n      0x40\n        /* \"#utility.yul\":3161:3179   */\n      dup3\n      add\n        /* \"#utility.yul\":3154:3213   */\n      mstore\n        /* \"#utility.yul\":3245:3247   */\n      0x60\n        /* \"#utility.yul\":3230:3248   */\n      add\n      swap1\n        /* \"#utility.yul\":3075:3254   */\n      jump\t// out\n        /* \"#utility.yul\":3259:3661   */\n    tag_133:\n        /* \"#utility.yul\":3461:3463   */\n      0x20\n        /* \"#utility.yul\":3443:3464   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":3500:3502   */\n      0x26\n        /* \"#utility.yul\":3480:3498   */\n      swap1\n      dup3\n      add\n        /* \"#utility.yul\":3473:3503   */\n      mstore\n        /* \"#utility.yul\":3539:3573   */\n      0x45524332303a207472616e7366657220616d6f756e7420657863656564732062\n        /* \"#utility.yul\":3534:3536   */\n      0x40\n        /* \"#utility.yul\":3519:3537   */\n      dup3\n      add\n        /* \"#utility.yul\":3512:3574   */\n      mstore\n      shl(0xd0, 0x616c616e6365)\n        /* \"#utility.yul\":3605:3607   */\n      0x60\n        /* \"#utility.yul\":3590:3608   */\n      dup3\n      add\n        /* \"#utility.yul\":3583:3619   */\n      mstore\n        /* \"#utility.yul\":3651:3654   */\n      0x80\n        /* \"#utility.yul\":3636:3655   */\n      add\n      swap1\n        /* \"#utility.yul\":3433:3661   */\n      jump\t// out\n        /* \"#utility.yul\":3666:4067   */\n    tag_125:\n        /* \"#utility.yul\":3868:3870   */\n      0x20\n        /* \"#utility.yul\":3850:3871   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":3907:3909   */\n      0x25\n        /* \"#utility.yul\":3887:3905   */\n      swap1\n      dup3\n      add\n        /* \"#utility.yul\":3880:3910   */\n      mstore\n        /* \"#utility.yul\":3946:3980   */\n      0x45524332303a207472616e736665722066726f6d20746865207a65726f206164\n        /* \"#utility.yul\":3941:3943   */\n      0x40\n        /* \"#utility.yul\":3926:3944   */\n      dup3\n      add\n        /* \"#utility.yul\":3919:3981   */\n      mstore\n      shl(0xd8, 0x6472657373)\n        /* \"#utility.yul\":4012:4014   */\n      0x60\n        /* \"#utility.yul\":3997:4015   */\n      dup3\n      add\n        /* \"#utility.yul\":3990:4025   */\n      mstore\n        /* \"#utility.yul\":4057:4060   */\n      0x80\n        /* \"#utility.yul\":4042:4061   */\n      add\n      swap1\n        /* \"#utility.yul\":3840:4067   */\n      jump\t// out\n        /* \"#utility.yul\":4072:4472   */\n    tag_110:\n        /* \"#utility.yul\":4274:4276   */\n      0x20\n        /* \"#utility.yul\":4256:4277   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":4313:4315   */\n      0x24\n        /* \"#utility.yul\":4293:4311   */\n      swap1\n      dup3\n      add\n        /* \"#utility.yul\":4286:4316   */\n      mstore\n        /* \"#utility.yul\":4352:4386   */\n      0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464\n        /* \"#utility.yul\":4347:4349   */\n      0x40\n        /* \"#utility.yul\":4332:4350   */\n      dup3\n      add\n        /* \"#utility.yul\":4325:4387   */\n      mstore\n      shl(0xe0, 0x72657373)\n        /* \"#utility.yul\":4418:4420   */\n      0x60\n        /* \"#utility.yul\":4403:4421   */\n      dup3\n      add\n        /* \"#utility.yul\":4396:4430   */\n      mstore\n        /* \"#utility.yul\":4462:4465   */\n      0x80\n        /* \"#utility.yul\":4447:4466   */\n      add\n      swap1\n        /* \"#utility.yul\":4246:4472   */\n      jump\t// out\n        /* \"#utility.yul\":4477:4878   */\n    tag_100:\n        /* \"#utility.yul\":4679:4681   */\n      0x20\n        /* \"#utility.yul\":4661:4682   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":4718:4720   */\n      0x25\n        /* \"#utility.yul\":4698:4716   */\n      swap1\n      dup3\n      add\n        /* \"#utility.yul\":4691:4721   */\n      mstore\n        /* \"#utility.yul\":4757:4791   */\n      0x45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77\n        /* \"#utility.yul\":4752:4754   */\n      0x40\n        /* \"#utility.yul\":4737:4755   */\n      dup3\n      add\n        /* \"#utility.yul\":4730:4792   */\n      mstore\n      shl(0xd8, 0x207a65726f)\n        /* \"#utility.yul\":4823:4825   */\n      0x60\n        /* \"#utility.yul\":4808:4826   */\n      dup3\n      add\n        /* \"#utility.yul\":4801:4836   */\n      mstore\n        /* \"#utility.yul\":4868:4871   */\n      0x80\n        /* \"#utility.yul\":4853:4872   */\n      add\n      swap1\n        /* \"#utility.yul\":4651:4878   */\n      jump\t// out\n        /* \"#utility.yul\":4883:5060   */\n    tag_28:\n        /* \"#utility.yul\":5029:5054   */\n      swap1\n      dup2\n      mstore\n        /* \"#utility.yul\":5017:5019   */\n      0x20\n        /* \"#utility.yul\":5002:5020   */\n      add\n      swap1\n        /* \"#utility.yul\":4984:5060   */\n      jump\t// out\n        /* \"#utility.yul\":5065:5294   */\n    tag_87:\n      0x00\n        /* \"#utility.yul\":5136:5137   */\n      dup3\n        /* \"#utility.yul\":5132:5138   */\n      not\n        /* \"#utility.yul\":5129:5130   */\n      dup3\n        /* \"#utility.yul\":5126:5139   */\n      gt\n        /* \"#utility.yul\":5123:5125   */\n      iszero\n      tag_173\n      jumpi\n      shl(0xe0, 0x4e487b71)\n        /* \"#utility.yul\":5162:5195   */\n      dup2\n      mstore\n        /* \"#utility.yul\":5218:5222   */\n      0x11\n        /* \"#utility.yul\":5215:5216   */\n      0x04\n        /* \"#utility.yul\":5208:5223   */\n      mstore\n        /* \"#utility.yul\":5248:5252   */\n      0x24\n        /* \"#utility.yul\":5169:5172   */\n      dup2\n        /* \"#utility.yul\":5236:5253   */\n      revert\n        /* \"#utility.yul\":5123:5125   */\n    tag_173:\n      pop\n        /* \"#utility.yul\":5279:5288   */\n      add\n      swap1\n        /* \"#utility.yul\":5113:5294   */\n      jump\t// out\n        /* \"#utility.yul\":5299:5679   */\n    tag_64:\n        /* \"#utility.yul\":5384:5385   */\n      0x02\n        /* \"#utility.yul\":5374:5386   */\n      dup2\n      div\n        /* \"#utility.yul\":5431:5432   */\n      0x01\n        /* \"#utility.yul\":5421:5433   */\n      dup3\n      and\n      dup1\n        /* \"#utility.yul\":5442:5444   */\n      tag_175\n      jumpi\n        /* \"#utility.yul\":5496:5500   */\n      0x7f\n        /* \"#utility.yul\":5488:5494   */\n      dup3\n        /* \"#utility.yul\":5484:5501   */\n      and\n        /* \"#utility.yul\":5474:5501   */\n      swap2\n      pop\n        /* \"#utility.yul\":5442:5444   */\n    tag_175:\n        /* \"#utility.yul\":5549:5551   */\n      0x20\n        /* \"#utility.yul\":5541:5547   */\n      dup3\n        /* \"#utility.yul\":5538:5552   */\n      lt\n        /* \"#utility.yul\":5518:5536   */\n      dup2\n        /* \"#utility.yul\":5515:5553   */\n      eq\n        /* \"#utility.yul\":5512:5514   */\n      iszero\n      tag_176\n      jumpi\n        /* \"#utility.yul\":5595:5605   */\n      0x4e487b71\n        /* \"#utility.yul\":5590:5593   */\n      0xe0\n        /* \"#utility.yul\":5586:5606   */\n      shl\n        /* \"#utility.yul\":5583:5584   */\n      0x00\n        /* \"#utility.yul\":5576:5607   */\n      mstore\n        /* \"#utility.yul\":5630:5634   */\n      0x22\n        /* \"#utility.yul\":5627:5628   */\n      0x04\n        /* \"#utility.yul\":5620:5635   */\n      mstore\n        /* \"#utility.yul\":5658:5662   */\n      0x24\n        /* \"#utility.yul\":5655:5656   */\n      0x00\n        /* \"#utility.yul\":5648:5663   */\n      revert\n        /* \"#utility.yul\":5512:5514   */\n    tag_176:\n      pop\n        /* \"#utility.yul\":5354:5679   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n\n    auxdata: 0xa264697066735822122095df7fc9053b5bd679b51b2d78ece433167fbe3882defd903769d2a3f897523f64736f6c63430008000033\n}\n",
						"bytecode": {
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:2015:10",
										"statements": [
											{
												"nodeType": "YulBlock",
												"src": "6:3:10",
												"statements": []
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "80:815:10",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "129:24:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "array",
																					"nodeType": "YulIdentifier",
																					"src": "138:5:10"
																				},
																				{
																					"name": "array",
																					"nodeType": "YulIdentifier",
																					"src": "145:5:10"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "131:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "131:20:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "131:20:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "108:6:10"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "116:4:10",
																						"type": "",
																						"value": "0x1f"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "104:3:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "104:17:10"
																			},
																			{
																				"name": "end",
																				"nodeType": "YulIdentifier",
																				"src": "123:3:10"
																			}
																		],
																		"functionName": {
																			"name": "slt",
																			"nodeType": "YulIdentifier",
																			"src": "100:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "100:27:10"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "93:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "93:35:10"
															},
															"nodeType": "YulIf",
															"src": "90:2:10"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "162:23:10",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "178:6:10"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "172:5:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "172:13:10"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "166:2:10",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "194:28:10",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "212:2:10",
																				"type": "",
																				"value": "64"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "216:1:10",
																				"type": "",
																				"value": "1"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "208:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "208:10:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "220:1:10",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "204:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "204:18:10"
															},
															"variables": [
																{
																	"name": "_2",
																	"nodeType": "YulTypedName",
																	"src": "198:2:10",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "245:22:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x41",
																				"nodeType": "YulIdentifier",
																				"src": "247:16:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "247:18:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "247:18:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "237:2:10"
																	},
																	{
																		"name": "_2",
																		"nodeType": "YulIdentifier",
																		"src": "241:2:10"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "234:2:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "234:10:10"
															},
															"nodeType": "YulIf",
															"src": "231:2:10"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "276:23:10",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "296:2:10",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "290:5:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "290:9:10"
															},
															"variables": [
																{
																	"name": "memPtr",
																	"nodeType": "YulTypedName",
																	"src": "280:6:10",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "308:14:10",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "318:4:10",
																"type": "",
																"value": "0x20"
															},
															"variables": [
																{
																	"name": "_3",
																	"nodeType": "YulTypedName",
																	"src": "312:2:10",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "331:67:10",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "357:6:10"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"name": "_1",
																								"nodeType": "YulIdentifier",
																								"src": "373:2:10"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "377:4:10",
																								"type": "",
																								"value": "0x1f"
																							}
																						],
																						"functionName": {
																							"name": "add",
																							"nodeType": "YulIdentifier",
																							"src": "369:3:10"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "369:13:10"
																					},
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "388:2:10",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "not",
																							"nodeType": "YulIdentifier",
																							"src": "384:3:10"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "384:7:10"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "365:3:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "365:27:10"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "353:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "353:40:10"
																	},
																	{
																		"name": "_3",
																		"nodeType": "YulIdentifier",
																		"src": "395:2:10"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "349:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "349:49:10"
															},
															"variables": [
																{
																	"name": "newFreePtr",
																	"nodeType": "YulTypedName",
																	"src": "335:10:10",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "457:22:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x41",
																				"nodeType": "YulIdentifier",
																				"src": "459:16:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "459:18:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "459:18:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "newFreePtr",
																				"nodeType": "YulIdentifier",
																				"src": "416:10:10"
																			},
																			{
																				"name": "_2",
																				"nodeType": "YulIdentifier",
																				"src": "428:2:10"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "413:2:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "413:18:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "newFreePtr",
																				"nodeType": "YulIdentifier",
																				"src": "436:10:10"
																			},
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "448:6:10"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nodeType": "YulIdentifier",
																			"src": "433:2:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "433:22:10"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "410:2:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "410:46:10"
															},
															"nodeType": "YulIf",
															"src": "407:2:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "495:2:10",
																		"type": "",
																		"value": "64"
																	},
																	{
																		"name": "newFreePtr",
																		"nodeType": "YulIdentifier",
																		"src": "499:10:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "488:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "488:22:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "488:22:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "memPtr",
																		"nodeType": "YulIdentifier",
																		"src": "526:6:10"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "534:2:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "519:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "519:18:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "519:18:10"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "583:24:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "array",
																					"nodeType": "YulIdentifier",
																					"src": "592:5:10"
																				},
																				{
																					"name": "array",
																					"nodeType": "YulIdentifier",
																					"src": "599:5:10"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "585:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "585:20:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "585:20:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "560:6:10"
																					},
																					{
																						"name": "_1",
																						"nodeType": "YulIdentifier",
																						"src": "568:2:10"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "556:3:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "556:15:10"
																			},
																			{
																				"name": "_3",
																				"nodeType": "YulIdentifier",
																				"src": "573:2:10"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "552:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "552:24:10"
																	},
																	{
																		"name": "end",
																		"nodeType": "YulIdentifier",
																		"src": "578:3:10"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "549:2:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "549:33:10"
															},
															"nodeType": "YulIf",
															"src": "546:2:10"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "616:14:10",
															"value": {
																"name": "array",
																"nodeType": "YulIdentifier",
																"src": "625:5:10"
															},
															"variables": [
																{
																	"name": "i",
																	"nodeType": "YulTypedName",
																	"src": "620:1:10",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "685:87:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "memPtr",
																									"nodeType": "YulIdentifier",
																									"src": "714:6:10"
																								},
																								{
																									"name": "i",
																									"nodeType": "YulIdentifier",
																									"src": "722:1:10"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "710:3:10"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "710:14:10"
																						},
																						{
																							"name": "_3",
																							"nodeType": "YulIdentifier",
																							"src": "726:2:10"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "706:3:10"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "706:23:10"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"arguments": [
																										{
																											"name": "offset",
																											"nodeType": "YulIdentifier",
																											"src": "745:6:10"
																										},
																										{
																											"name": "i",
																											"nodeType": "YulIdentifier",
																											"src": "753:1:10"
																										}
																									],
																									"functionName": {
																										"name": "add",
																										"nodeType": "YulIdentifier",
																										"src": "741:3:10"
																									},
																									"nodeType": "YulFunctionCall",
																									"src": "741:14:10"
																								},
																								{
																									"name": "_3",
																									"nodeType": "YulIdentifier",
																									"src": "757:2:10"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "737:3:10"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "737:23:10"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nodeType": "YulIdentifier",
																						"src": "731:5:10"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "731:30:10"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "699:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "699:63:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "699:63:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "650:1:10"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "653:2:10"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "647:2:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "647:9:10"
															},
															"nodeType": "YulForLoop",
															"post": {
																"nodeType": "YulBlock",
																"src": "657:19:10",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "659:15:10",
																		"value": {
																			"arguments": [
																				{
																					"name": "i",
																					"nodeType": "YulIdentifier",
																					"src": "668:1:10"
																				},
																				{
																					"name": "_3",
																					"nodeType": "YulIdentifier",
																					"src": "671:2:10"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "664:3:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "664:10:10"
																		},
																		"variableNames": [
																			{
																				"name": "i",
																				"nodeType": "YulIdentifier",
																				"src": "659:1:10"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nodeType": "YulBlock",
																"src": "643:3:10",
																"statements": []
															},
															"src": "639:133:10"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "802:63:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "memPtr",
																									"nodeType": "YulIdentifier",
																									"src": "831:6:10"
																								},
																								{
																									"name": "_1",
																									"nodeType": "YulIdentifier",
																									"src": "839:2:10"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "827:3:10"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "827:15:10"
																						},
																						{
																							"name": "_3",
																							"nodeType": "YulIdentifier",
																							"src": "844:2:10"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "823:3:10"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "823:24:10"
																				},
																				{
																					"name": "array",
																					"nodeType": "YulIdentifier",
																					"src": "849:5:10"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "816:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "816:39:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "816:39:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "787:1:10"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "790:2:10"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "784:2:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "784:9:10"
															},
															"nodeType": "YulIf",
															"src": "781:2:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "874:15:10",
															"value": {
																"name": "memPtr",
																"nodeType": "YulIdentifier",
																"src": "883:6:10"
															},
															"variableNames": [
																{
																	"name": "array",
																	"nodeType": "YulIdentifier",
																	"src": "874:5:10"
																}
															]
														}
													]
												},
												"name": "abi_decode_t_string_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "54:6:10",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "62:3:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "array",
														"nodeType": "YulTypedName",
														"src": "70:5:10",
														"type": ""
													}
												],
												"src": "14:881:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1018:478:10",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1064:26:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "1073:6:10"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "1081:6:10"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1066:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1066:22:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1066:22:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1039:7:10"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1048:9:10"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1035:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1035:23:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1060:2:10",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1031:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1031:32:10"
															},
															"nodeType": "YulIf",
															"src": "1028:2:10"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1099:30:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1119:9:10"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "1113:5:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1113:16:10"
															},
															"variables": [
																{
																	"name": "offset",
																	"nodeType": "YulTypedName",
																	"src": "1103:6:10",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1138:28:10",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1156:2:10",
																				"type": "",
																				"value": "64"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1160:1:10",
																				"type": "",
																				"value": "1"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "1152:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1152:10:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1164:1:10",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "1148:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1148:18:10"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "1142:2:10",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1193:26:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "1202:6:10"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "1210:6:10"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1195:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1195:22:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1195:22:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "1181:6:10"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "1189:2:10"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "1178:2:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1178:14:10"
															},
															"nodeType": "YulIf",
															"src": "1175:2:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1228:73:10",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1273:9:10"
																			},
																			{
																				"name": "offset",
																				"nodeType": "YulIdentifier",
																				"src": "1284:6:10"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1269:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1269:22:10"
																	},
																	{
																		"name": "dataEnd",
																		"nodeType": "YulIdentifier",
																		"src": "1293:7:10"
																	}
																],
																"functionName": {
																	"name": "abi_decode_t_string_fromMemory",
																	"nodeType": "YulIdentifier",
																	"src": "1238:30:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1238:63:10"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "1228:6:10"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1310:41:10",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1336:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1347:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1332:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1332:18:10"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "1326:5:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1326:25:10"
															},
															"variables": [
																{
																	"name": "offset_1",
																	"nodeType": "YulTypedName",
																	"src": "1314:8:10",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1380:26:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value1",
																					"nodeType": "YulIdentifier",
																					"src": "1389:6:10"
																				},
																				{
																					"name": "value1",
																					"nodeType": "YulIdentifier",
																					"src": "1397:6:10"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1382:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1382:22:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1382:22:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "offset_1",
																		"nodeType": "YulIdentifier",
																		"src": "1366:8:10"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "1376:2:10"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "1363:2:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1363:16:10"
															},
															"nodeType": "YulIf",
															"src": "1360:2:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1415:75:10",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1460:9:10"
																			},
																			{
																				"name": "offset_1",
																				"nodeType": "YulIdentifier",
																				"src": "1471:8:10"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1456:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1456:24:10"
																	},
																	{
																		"name": "dataEnd",
																		"nodeType": "YulIdentifier",
																		"src": "1482:7:10"
																	}
																],
																"functionName": {
																	"name": "abi_decode_t_string_fromMemory",
																	"nodeType": "YulIdentifier",
																	"src": "1425:30:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1425:65:10"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "1415:6:10"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_string_memory_ptrt_string_memory_ptr_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "976:9:10",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "987:7:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "999:6:10",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "1007:6:10",
														"type": ""
													}
												],
												"src": "900:596:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1556:325:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1566:22:10",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "1580:4:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1586:1:10",
																		"type": "",
																		"value": "2"
																	}
																],
																"functionName": {
																	"name": "div",
																	"nodeType": "YulIdentifier",
																	"src": "1576:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1576:12:10"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nodeType": "YulIdentifier",
																	"src": "1566:6:10"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1597:38:10",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "1627:4:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1633:1:10",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "1623:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1623:12:10"
															},
															"variables": [
																{
																	"name": "outOfPlaceEncoding",
																	"nodeType": "YulTypedName",
																	"src": "1601:18:10",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1674:31:10",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "1676:27:10",
																		"value": {
																			"arguments": [
																				{
																					"name": "length",
																					"nodeType": "YulIdentifier",
																					"src": "1690:6:10"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1698:4:10",
																					"type": "",
																					"value": "0x7f"
																				}
																			],
																			"functionName": {
																				"name": "and",
																				"nodeType": "YulIdentifier",
																				"src": "1686:3:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1686:17:10"
																		},
																		"variableNames": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "1676:6:10"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "1654:18:10"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "1647:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1647:26:10"
															},
															"nodeType": "YulIf",
															"src": "1644:2:10"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1764:111:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1785:1:10",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "1792:3:10",
																							"type": "",
																							"value": "224"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "1797:10:10",
																							"type": "",
																							"value": "0x4e487b71"
																						}
																					],
																					"functionName": {
																						"name": "shl",
																						"nodeType": "YulIdentifier",
																						"src": "1788:3:10"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "1788:20:10"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "1778:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1778:31:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1778:31:10"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1829:1:10",
																					"type": "",
																					"value": "4"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1832:4:10",
																					"type": "",
																					"value": "0x22"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "1822:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1822:15:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1822:15:10"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1857:1:10",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1860:4:10",
																					"type": "",
																					"value": "0x24"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1850:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1850:15:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1850:15:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "1720:18:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "1743:6:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1751:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nodeType": "YulIdentifier",
																			"src": "1740:2:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1740:14:10"
																	}
																],
																"functionName": {
																	"name": "eq",
																	"nodeType": "YulIdentifier",
																	"src": "1717:2:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1717:38:10"
															},
															"nodeType": "YulIf",
															"src": "1714:2:10"
														}
													]
												},
												"name": "extract_byte_array_length",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "data",
														"nodeType": "YulTypedName",
														"src": "1536:4:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "1545:6:10",
														"type": ""
													}
												],
												"src": "1501:380:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1918:95:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1935:1:10",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1942:3:10",
																				"type": "",
																				"value": "224"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1947:10:10",
																				"type": "",
																				"value": "0x4e487b71"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "1938:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1938:20:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1928:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1928:31:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1928:31:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1975:1:10",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1978:4:10",
																		"type": "",
																		"value": "0x41"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1968:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1968:15:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1968:15:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1999:1:10",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2002:4:10",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "1992:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1992:15:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1992:15:10"
														}
													]
												},
												"name": "panic_error_0x41",
												"nodeType": "YulFunctionDefinition",
												"src": "1886:127:10"
											}
										]
									},
									"contents": "{\n    { }\n    function abi_decode_t_string_fromMemory(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(array, array) }\n        let _1 := mload(offset)\n        let _2 := sub(shl(64, 1), 1)\n        if gt(_1, _2) { panic_error_0x41() }\n        let memPtr := mload(64)\n        let _3 := 0x20\n        let newFreePtr := add(add(memPtr, and(add(_1, 0x1f), not(31))), _3)\n        if or(gt(newFreePtr, _2), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        mstore(memPtr, _1)\n        if gt(add(add(offset, _1), _3), end) { revert(array, array) }\n        let i := array\n        for { } lt(i, _1) { i := add(i, _3) }\n        {\n            mstore(add(add(memPtr, i), _3), mload(add(add(offset, i), _3)))\n        }\n        if gt(i, _1)\n        {\n            mstore(add(add(memPtr, _1), _3), array)\n        }\n        array := memPtr\n    }\n    function abi_decode_tuple_t_string_memory_ptrt_string_memory_ptr_fromMemory(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(value0, value0) }\n        let offset := mload(headStart)\n        let _1 := sub(shl(64, 1), 1)\n        if gt(offset, _1) { revert(value0, value0) }\n        value0 := abi_decode_t_string_fromMemory(add(headStart, offset), dataEnd)\n        let offset_1 := mload(add(headStart, 32))\n        if gt(offset_1, _1) { revert(value1, value1) }\n        value1 := abi_decode_t_string_fromMemory(add(headStart, offset_1), dataEnd)\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n}",
									"id": 10,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"linkReferences": {},
							"object": "60806040523480156200001157600080fd5b5060405162000ba238038062000ba28339810160408190526200003491620001b9565b81516200004990600390602085019062000068565b5080516200005f90600490602084019062000068565b50505062000273565b828054620000769062000220565b90600052602060002090601f0160209004810192826200009a5760008555620000e5565b82601f10620000b557805160ff1916838001178555620000e5565b82800160010185558215620000e5579182015b82811115620000e5578251825591602001919060010190620000c8565b50620000f3929150620000f7565b5090565b5b80821115620000f35760008155600101620000f8565b600082601f8301126200011f578081fd5b81516001600160401b03808211156200013c576200013c6200025d565b6040516020601f8401601f19168201810183811183821017156200016457620001646200025d565b60405283825285840181018710156200017b578485fd5b8492505b838310156200019e57858301810151828401820152918201916200017f565b83831115620001af57848185840101525b5095945050505050565b60008060408385031215620001cc578182fd5b82516001600160401b0380821115620001e3578384fd5b620001f1868387016200010e565b9350602085015191508082111562000207578283fd5b5062000216858286016200010e565b9150509250929050565b6002810460018216806200023557607f821691505b602082108114156200025757634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b61091f80620002836000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c80633950935111610071578063395093511461011c57806370a082311461012f57806395d89b4114610142578063a457c2d71461014a578063a9059cbb1461015d578063dd62ed3e14610170576100a9565b806306fdde03146100ae578063095ea7b3146100cc57806318160ddd146100ec57806323b872dd14610101578063313ce56714610114575b600080fd5b6100b6610183565b6040516100c3919061065e565b60405180910390f35b6100df6100da36600461062a565b610215565b6040516100c39190610653565b6100f4610237565b6040516100c39190610881565b6100df61010f3660046105ef565b61023d565b6100f461026b565b6100df61012a36600461062a565b610270565b6100f461013d36600461059c565b61029c565b6100b66102bb565b6100df61015836600461062a565b6102ca565b6100df61016b36600461062a565b61031b565b6100f461017e3660046105bd565b610333565b606060038054610192906108ae565b80601f01602080910402602001604051908101604052809291908181526020018280546101be906108ae565b801561020b5780601f106101e05761010080835404028352916020019161020b565b820191906000526020600020905b8154815290600101906020018083116101ee57829003601f168201915b5050505050905090565b60008061022061035e565b905061022d818585610362565b5060019392505050565b60025490565b60008061024861035e565b9050610255858285610416565b610260858585610460565b506001949350505050565b601290565b60008061027b61035e565b905061022d81858561028d8589610333565b610297919061088a565b610362565b6001600160a01b0381166000908152602081905260409020545b919050565b606060048054610192906108ae565b6000806102d561035e565b905060006102e38286610333565b90508381101561030e5760405162461bcd60e51b81526004016103059061083c565b60405180910390fd5b6102608286868403610362565b60008061032661035e565b905061022d818585610460565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b3390565b6001600160a01b0383166103885760405162461bcd60e51b8152600401610305906107f8565b6001600160a01b0382166103ae5760405162461bcd60e51b8152600401610305906106f4565b6001600160a01b0380841660008181526001602090815260408083209487168084529490915290819020849055517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92590610409908590610881565b60405180910390a3505050565b60006104228484610333565b9050600019811461045a578181101561044d5760405162461bcd60e51b815260040161030590610736565b61045a8484848403610362565b50505050565b6001600160a01b0383166104865760405162461bcd60e51b8152600401610305906107b3565b6001600160a01b0382166104ac5760405162461bcd60e51b8152600401610305906106b1565b6104b7838383610580565b6001600160a01b038316600090815260208190526040902054818110156104f05760405162461bcd60e51b81526004016103059061076d565b6001600160a01b0380851660009081526020819052604080822085850390559185168152908120805484929061052790849061088a565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516105719190610881565b60405180910390a361045a8484845b505050565b80356001600160a01b03811681146102b657600080fd5b6000602082840312156105ad578081fd5b6105b682610585565b9392505050565b600080604083850312156105cf578081fd5b6105d883610585565b91506105e660208401610585565b90509250929050565b600080600060608486031215610603578081fd5b61060c84610585565b925061061a60208501610585565b9150604084013590509250925092565b6000806040838503121561063c578182fd5b61064583610585565b946020939093013593505050565b901515815260200190565b6000602080835283518082850152825b8181101561068a5785810183015185820160400152820161066e565b8181111561069b5783604083870101525b50601f01601f1916929092016040019392505050565b60208082526023908201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260408201526265737360e81b606082015260800190565b60208082526022908201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604082015261737360f01b606082015260800190565b6020808252601d908201527f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000604082015260600190565b60208082526026908201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604082015265616c616e636560d01b606082015260800190565b60208082526025908201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604082015264647265737360d81b606082015260800190565b60208082526024908201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646040820152637265737360e01b606082015260800190565b60208082526025908201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604082015264207a65726f60d81b606082015260800190565b90815260200190565b600082198211156108a957634e487b7160e01b81526011600452602481fd5b500190565b6002810460018216806108c257607f821691505b602082108114156108e357634e487b7160e01b600052602260045260246000fd5b5091905056fea264697066735822122095df7fc9053b5bd679b51b2d78ece433167fbe3882defd903769d2a3f897523f64736f6c63430008000033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0xBA2 CODESIZE SUB DUP1 PUSH3 0xBA2 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x34 SWAP2 PUSH3 0x1B9 JUMP JUMPDEST DUP2 MLOAD PUSH3 0x49 SWAP1 PUSH1 0x3 SWAP1 PUSH1 0x20 DUP6 ADD SWAP1 PUSH3 0x68 JUMP JUMPDEST POP DUP1 MLOAD PUSH3 0x5F SWAP1 PUSH1 0x4 SWAP1 PUSH1 0x20 DUP5 ADD SWAP1 PUSH3 0x68 JUMP JUMPDEST POP POP POP PUSH3 0x273 JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH3 0x76 SWAP1 PUSH3 0x220 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH3 0x9A JUMPI PUSH1 0x0 DUP6 SSTORE PUSH3 0xE5 JUMP JUMPDEST DUP3 PUSH1 0x1F LT PUSH3 0xB5 JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH3 0xE5 JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH3 0xE5 JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH3 0xE5 JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH3 0xC8 JUMP JUMPDEST POP PUSH3 0xF3 SWAP3 SWAP2 POP PUSH3 0xF7 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH3 0xF3 JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH3 0xF8 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH3 0x11F JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH3 0x13C JUMPI PUSH3 0x13C PUSH3 0x25D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 PUSH1 0x1F DUP5 ADD PUSH1 0x1F NOT AND DUP3 ADD DUP2 ADD DUP4 DUP2 GT DUP4 DUP3 LT OR ISZERO PUSH3 0x164 JUMPI PUSH3 0x164 PUSH3 0x25D JUMP JUMPDEST PUSH1 0x40 MSTORE DUP4 DUP3 MSTORE DUP6 DUP5 ADD DUP2 ADD DUP8 LT ISZERO PUSH3 0x17B JUMPI DUP5 DUP6 REVERT JUMPDEST DUP5 SWAP3 POP JUMPDEST DUP4 DUP4 LT ISZERO PUSH3 0x19E JUMPI DUP6 DUP4 ADD DUP2 ADD MLOAD DUP3 DUP5 ADD DUP3 ADD MSTORE SWAP2 DUP3 ADD SWAP2 PUSH3 0x17F JUMP JUMPDEST DUP4 DUP4 GT ISZERO PUSH3 0x1AF JUMPI DUP5 DUP2 DUP6 DUP5 ADD ADD MSTORE JUMPDEST POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH3 0x1CC JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH3 0x1E3 JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH3 0x1F1 DUP7 DUP4 DUP8 ADD PUSH3 0x10E JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD MLOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH3 0x207 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH3 0x216 DUP6 DUP3 DUP7 ADD PUSH3 0x10E JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x2 DUP2 DIV PUSH1 0x1 DUP3 AND DUP1 PUSH3 0x235 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH3 0x257 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x91F DUP1 PUSH3 0x283 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xA9 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x39509351 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x11C JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x12F JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x142 JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x14A JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x15D JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x170 JUMPI PUSH2 0xA9 JUMP JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0xAE JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0xCC JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0xEC JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x101 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x114 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB6 PUSH2 0x183 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xC3 SWAP2 SWAP1 PUSH2 0x65E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xDF PUSH2 0xDA CALLDATASIZE PUSH1 0x4 PUSH2 0x62A JUMP JUMPDEST PUSH2 0x215 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xC3 SWAP2 SWAP1 PUSH2 0x653 JUMP JUMPDEST PUSH2 0xF4 PUSH2 0x237 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xC3 SWAP2 SWAP1 PUSH2 0x881 JUMP JUMPDEST PUSH2 0xDF PUSH2 0x10F CALLDATASIZE PUSH1 0x4 PUSH2 0x5EF JUMP JUMPDEST PUSH2 0x23D JUMP JUMPDEST PUSH2 0xF4 PUSH2 0x26B JUMP JUMPDEST PUSH2 0xDF PUSH2 0x12A CALLDATASIZE PUSH1 0x4 PUSH2 0x62A JUMP JUMPDEST PUSH2 0x270 JUMP JUMPDEST PUSH2 0xF4 PUSH2 0x13D CALLDATASIZE PUSH1 0x4 PUSH2 0x59C JUMP JUMPDEST PUSH2 0x29C JUMP JUMPDEST PUSH2 0xB6 PUSH2 0x2BB JUMP JUMPDEST PUSH2 0xDF PUSH2 0x158 CALLDATASIZE PUSH1 0x4 PUSH2 0x62A JUMP JUMPDEST PUSH2 0x2CA JUMP JUMPDEST PUSH2 0xDF PUSH2 0x16B CALLDATASIZE PUSH1 0x4 PUSH2 0x62A JUMP JUMPDEST PUSH2 0x31B JUMP JUMPDEST PUSH2 0xF4 PUSH2 0x17E CALLDATASIZE PUSH1 0x4 PUSH2 0x5BD JUMP JUMPDEST PUSH2 0x333 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD PUSH2 0x192 SWAP1 PUSH2 0x8AE JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x1BE SWAP1 PUSH2 0x8AE JUMP JUMPDEST DUP1 ISZERO PUSH2 0x20B JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1E0 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x20B JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x1EE JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x220 PUSH2 0x35E JUMP JUMPDEST SWAP1 POP PUSH2 0x22D DUP2 DUP6 DUP6 PUSH2 0x362 JUMP JUMPDEST POP PUSH1 0x1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x2 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x248 PUSH2 0x35E JUMP JUMPDEST SWAP1 POP PUSH2 0x255 DUP6 DUP3 DUP6 PUSH2 0x416 JUMP JUMPDEST PUSH2 0x260 DUP6 DUP6 DUP6 PUSH2 0x460 JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x12 SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x27B PUSH2 0x35E JUMP JUMPDEST SWAP1 POP PUSH2 0x22D DUP2 DUP6 DUP6 PUSH2 0x28D DUP6 DUP10 PUSH2 0x333 JUMP JUMPDEST PUSH2 0x297 SWAP2 SWAP1 PUSH2 0x88A JUMP JUMPDEST PUSH2 0x362 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x4 DUP1 SLOAD PUSH2 0x192 SWAP1 PUSH2 0x8AE JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x2D5 PUSH2 0x35E JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2E3 DUP3 DUP7 PUSH2 0x333 JUMP JUMPDEST SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0x30E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x305 SWAP1 PUSH2 0x83C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x260 DUP3 DUP7 DUP7 DUP5 SUB PUSH2 0x362 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x326 PUSH2 0x35E JUMP JUMPDEST SWAP1 POP PUSH2 0x22D DUP2 DUP6 DUP6 PUSH2 0x460 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST CALLER SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x388 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x305 SWAP1 PUSH2 0x7F8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x3AE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x305 SWAP1 PUSH2 0x6F4 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP5 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 SWAP1 SWAP2 MSTORE SWAP1 DUP2 SWAP1 KECCAK256 DUP5 SWAP1 SSTORE MLOAD PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP1 PUSH2 0x409 SWAP1 DUP6 SWAP1 PUSH2 0x881 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x422 DUP5 DUP5 PUSH2 0x333 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 NOT DUP2 EQ PUSH2 0x45A JUMPI DUP2 DUP2 LT ISZERO PUSH2 0x44D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x305 SWAP1 PUSH2 0x736 JUMP JUMPDEST PUSH2 0x45A DUP5 DUP5 DUP5 DUP5 SUB PUSH2 0x362 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x486 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x305 SWAP1 PUSH2 0x7B3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x4AC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x305 SWAP1 PUSH2 0x6B1 JUMP JUMPDEST PUSH2 0x4B7 DUP4 DUP4 DUP4 PUSH2 0x580 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0x4F0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x305 SWAP1 PUSH2 0x76D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP6 DUP6 SUB SWAP1 SSTORE SWAP2 DUP6 AND DUP2 MSTORE SWAP1 DUP2 KECCAK256 DUP1 SLOAD DUP5 SWAP3 SWAP1 PUSH2 0x527 SWAP1 DUP5 SWAP1 PUSH2 0x88A JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP5 PUSH1 0x40 MLOAD PUSH2 0x571 SWAP2 SWAP1 PUSH2 0x881 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0x45A DUP5 DUP5 DUP5 JUMPDEST POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x2B6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x5AD JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x5B6 DUP3 PUSH2 0x585 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x5CF JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x5D8 DUP4 PUSH2 0x585 JUMP JUMPDEST SWAP2 POP PUSH2 0x5E6 PUSH1 0x20 DUP5 ADD PUSH2 0x585 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x603 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x60C DUP5 PUSH2 0x585 JUMP JUMPDEST SWAP3 POP PUSH2 0x61A PUSH1 0x20 DUP6 ADD PUSH2 0x585 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x63C JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x645 DUP4 PUSH2 0x585 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 DUP3 DUP6 ADD MSTORE DUP3 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x68A JUMPI DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP3 ADD PUSH2 0x66E JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0x69B JUMPI DUP4 PUSH1 0x40 DUP4 DUP8 ADD ADD MSTORE JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x40 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x23 SWAP1 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x40 DUP3 ADD MSTORE PUSH3 0x657373 PUSH1 0xE8 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x22 SWAP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0x7373 PUSH1 0xF0 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1D SWAP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x26 SWAP1 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x40 DUP3 ADD MSTORE PUSH6 0x616C616E6365 PUSH1 0xD0 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x25 SWAP1 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x40 DUP3 ADD MSTORE PUSH5 0x6472657373 PUSH1 0xD8 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x24 SWAP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x40 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x25 SWAP1 DUP3 ADD MSTORE PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x40 DUP3 ADD MSTORE PUSH5 0x207A65726F PUSH1 0xD8 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x8A9 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 DUP2 REVERT JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x2 DUP2 DIV PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x8C2 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0x8E3 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP6 0xDF PUSH32 0xC9053B5BD679B51B2D78ECE433167FBE3882DEFD903769D2A3F897523F64736F PUSH13 0x63430008000033000000000000 ",
							"sourceMap": "1424:11573:0:-:0;;;2018:116;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2085:13;;;;:5;;:13;;;;;:::i;:::-;-1:-1:-1;2109:17:0;;;;:7;;:17;;;;;:::i;:::-;;2018:116;;1424:11573;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1424:11573:0;;;-1:-1:-1;1424:11573:0;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;14:881:10;;123:3;116:4;108:6;104:17;100:27;90:2;;145:5;138;131:20;90:2;172:13;;-1:-1:-1;;;;;234:10:10;;;231:2;;;247:18;;:::i;:::-;296:2;290:9;318:4;388:2;369:13;;-1:-1:-1;;365:27:10;353:40;;349:49;;413:18;;;433:22;;;410:46;407:2;;;459:18;;:::i;:::-;495:2;488:22;519:18;;;556:15;;;552:24;;549:33;-1:-1:-1;546:2:10;;;599:5;592;585:20;546:2;625:5;616:14;;639:133;653:2;650:1;647:9;639:133;;;741:14;;;737:23;;731:30;710:14;;;706:23;;699:63;664:10;;;;639:133;;;790:2;787:1;784:9;781:2;;;849:5;844:2;839;831:6;827:15;823:24;816:39;781:2;-1:-1:-1;883:6:10;80:815;-1:-1:-1;;;;;80:815:10:o;900:596::-;;;1060:2;1048:9;1039:7;1035:23;1031:32;1028:2;;;1081:6;1073;1066:22;1028:2;1113:16;;-1:-1:-1;;;;;1178:14:10;;;1175:2;;;1210:6;1202;1195:22;1175:2;1238:63;1293:7;1284:6;1273:9;1269:22;1238:63;:::i;:::-;1228:73;;1347:2;1336:9;1332:18;1326:25;1310:41;;1376:2;1366:8;1363:16;1360:2;;;1397:6;1389;1382:22;1360:2;;1425:65;1482:7;1471:8;1460:9;1456:24;1425:65;:::i;:::-;1415:75;;;1018:478;;;;;:::o;1501:380::-;1586:1;1576:12;;1633:1;1623:12;;;1644:2;;1698:4;1690:6;1686:17;1676:27;;1644:2;1751;1743:6;1740:14;1720:18;1717:38;1714:2;;;1797:10;1792:3;1788:20;1785:1;1778:31;1832:4;1829:1;1822:15;1860:4;1857:1;1850:15;1714:2;;1556:325;;;:::o;1886:127::-;1947:10;1942:3;1938:20;1935:1;1928:31;1978:4;1975:1;1968:15;2002:4;1999:1;1992:15;1918:95;1424:11573:0;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:5681:10",
										"statements": [
											{
												"nodeType": "YulBlock",
												"src": "6:3:10",
												"statements": []
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "65:124:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "75:29:10",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "97:6:10"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "84:12:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "84:20:10"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "75:5:10"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "167:16:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "176:1:10",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "179:1:10",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "169:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "169:12:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "169:12:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "126:5:10"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "137:5:10"
																					},
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "152:3:10",
																										"type": "",
																										"value": "160"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "157:1:10",
																										"type": "",
																										"value": "1"
																									}
																								],
																								"functionName": {
																									"name": "shl",
																									"nodeType": "YulIdentifier",
																									"src": "148:3:10"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "148:11:10"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "161:1:10",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "sub",
																							"nodeType": "YulIdentifier",
																							"src": "144:3:10"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "144:19:10"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "133:3:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "133:31:10"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "123:2:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "123:42:10"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "116:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "116:50:10"
															},
															"nodeType": "YulIf",
															"src": "113:2:10"
														}
													]
												},
												"name": "abi_decode_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "44:6:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "55:5:10",
														"type": ""
													}
												],
												"src": "14:175:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "264:128:10",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "310:26:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "319:6:10"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "327:6:10"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "312:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "312:22:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "312:22:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "285:7:10"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "294:9:10"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "281:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "281:23:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "306:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "277:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "277:32:10"
															},
															"nodeType": "YulIf",
															"src": "274:2:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "345:41:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "376:9:10"
																	}
																],
																"functionName": {
																	"name": "abi_decode_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "355:20:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "355:31:10"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "345:6:10"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "230:9:10",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "241:7:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "253:6:10",
														"type": ""
													}
												],
												"src": "194:198:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "484:187:10",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "530:26:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value1",
																					"nodeType": "YulIdentifier",
																					"src": "539:6:10"
																				},
																				{
																					"name": "value1",
																					"nodeType": "YulIdentifier",
																					"src": "547:6:10"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "532:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "532:22:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "532:22:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "505:7:10"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "514:9:10"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "501:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "501:23:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "526:2:10",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "497:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "497:32:10"
															},
															"nodeType": "YulIf",
															"src": "494:2:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "565:41:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "596:9:10"
																	}
																],
																"functionName": {
																	"name": "abi_decode_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "575:20:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "575:31:10"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "565:6:10"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "615:50:10",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "650:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "661:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "646:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "646:18:10"
																	}
																],
																"functionName": {
																	"name": "abi_decode_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "625:20:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "625:40:10"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "615:6:10"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "442:9:10",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "453:7:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "465:6:10",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "473:6:10",
														"type": ""
													}
												],
												"src": "397:274:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "780:238:10",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "826:26:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value2",
																					"nodeType": "YulIdentifier",
																					"src": "835:6:10"
																				},
																				{
																					"name": "value2",
																					"nodeType": "YulIdentifier",
																					"src": "843:6:10"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "828:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "828:22:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "828:22:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "801:7:10"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "810:9:10"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "797:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "797:23:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "822:2:10",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "793:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "793:32:10"
															},
															"nodeType": "YulIf",
															"src": "790:2:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "861:41:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "892:9:10"
																	}
																],
																"functionName": {
																	"name": "abi_decode_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "871:20:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "871:31:10"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "861:6:10"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "911:50:10",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "946:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "957:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "942:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "942:18:10"
																	}
																],
																"functionName": {
																	"name": "abi_decode_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "921:20:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "921:40:10"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "911:6:10"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "970:42:10",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "997:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1008:2:10",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "993:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "993:18:10"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "980:12:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "980:32:10"
															},
															"variableNames": [
																{
																	"name": "value2",
																	"nodeType": "YulIdentifier",
																	"src": "970:6:10"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_addresst_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "730:9:10",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "741:7:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "753:6:10",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "761:6:10",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "769:6:10",
														"type": ""
													}
												],
												"src": "676:342:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1110:179:10",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1156:26:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "1165:6:10"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "1173:6:10"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1158:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1158:22:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1158:22:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1131:7:10"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1140:9:10"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1127:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1127:23:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1152:2:10",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1123:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1123:32:10"
															},
															"nodeType": "YulIf",
															"src": "1120:2:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1191:41:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1222:9:10"
																	}
																],
																"functionName": {
																	"name": "abi_decode_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "1201:20:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1201:31:10"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "1191:6:10"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "1241:42:10",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1268:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1279:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1264:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1264:18:10"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1251:12:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1251:32:10"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "1241:6:10"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1068:9:10",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1079:7:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1091:6:10",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "1099:6:10",
														"type": ""
													}
												],
												"src": "1023:266:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1389:92:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1399:26:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1411:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1422:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1407:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1407:18:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "1399:4:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1441:9:10"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value0",
																						"nodeType": "YulIdentifier",
																						"src": "1466:6:10"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "1459:6:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1459:14:10"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "1452:6:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1452:22:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1434:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1434:41:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1434:41:10"
														}
													]
												},
												"name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1358:9:10",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1369:6:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "1380:4:10",
														"type": ""
													}
												],
												"src": "1294:187:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1607:482:10",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1617:12:10",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "1627:2:10",
																"type": "",
																"value": "32"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "1621:2:10",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1645:9:10"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "1656:2:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1638:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1638:21:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1638:21:10"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1668:27:10",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "1688:6:10"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "1682:5:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1682:13:10"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "1672:6:10",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1715:9:10"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "1726:2:10"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1711:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1711:18:10"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "1731:6:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1704:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1704:34:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1704:34:10"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1747:13:10",
															"value": {
																"name": "tail",
																"nodeType": "YulIdentifier",
																"src": "1756:4:10"
															},
															"variables": [
																{
																	"name": "i",
																	"nodeType": "YulTypedName",
																	"src": "1751:1:10",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1819:90:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "headStart",
																									"nodeType": "YulIdentifier",
																									"src": "1848:9:10"
																								},
																								{
																									"name": "i",
																									"nodeType": "YulIdentifier",
																									"src": "1859:1:10"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "1844:3:10"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "1844:17:10"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "1863:2:10",
																							"type": "",
																							"value": "64"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "1840:3:10"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "1840:26:10"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"arguments": [
																										{
																											"name": "value0",
																											"nodeType": "YulIdentifier",
																											"src": "1882:6:10"
																										},
																										{
																											"name": "i",
																											"nodeType": "YulIdentifier",
																											"src": "1890:1:10"
																										}
																									],
																									"functionName": {
																										"name": "add",
																										"nodeType": "YulIdentifier",
																										"src": "1878:3:10"
																									},
																									"nodeType": "YulFunctionCall",
																									"src": "1878:14:10"
																								},
																								{
																									"name": "_1",
																									"nodeType": "YulIdentifier",
																									"src": "1894:2:10"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "1874:3:10"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "1874:23:10"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nodeType": "YulIdentifier",
																						"src": "1868:5:10"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "1868:30:10"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "1833:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1833:66:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1833:66:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "1780:1:10"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "1783:6:10"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "1777:2:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1777:13:10"
															},
															"nodeType": "YulForLoop",
															"post": {
																"nodeType": "YulBlock",
																"src": "1791:19:10",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "1793:15:10",
																		"value": {
																			"arguments": [
																				{
																					"name": "i",
																					"nodeType": "YulIdentifier",
																					"src": "1802:1:10"
																				},
																				{
																					"name": "_1",
																					"nodeType": "YulIdentifier",
																					"src": "1805:2:10"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "1798:3:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1798:10:10"
																		},
																		"variableNames": [
																			{
																				"name": "i",
																				"nodeType": "YulIdentifier",
																				"src": "1793:1:10"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nodeType": "YulBlock",
																"src": "1773:3:10",
																"statements": []
															},
															"src": "1769:140:10"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1943:69:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "headStart",
																									"nodeType": "YulIdentifier",
																									"src": "1972:9:10"
																								},
																								{
																									"name": "length",
																									"nodeType": "YulIdentifier",
																									"src": "1983:6:10"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "1968:3:10"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "1968:22:10"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "1992:2:10",
																							"type": "",
																							"value": "64"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "1964:3:10"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "1964:31:10"
																				},
																				{
																					"name": "tail",
																					"nodeType": "YulIdentifier",
																					"src": "1997:4:10"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "1957:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1957:45:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1957:45:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "1924:1:10"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "1927:6:10"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "1921:2:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1921:13:10"
															},
															"nodeType": "YulIf",
															"src": "1918:2:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2021:62:10",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2037:9:10"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"name": "length",
																								"nodeType": "YulIdentifier",
																								"src": "2056:6:10"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "2064:2:10",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "add",
																							"nodeType": "YulIdentifier",
																							"src": "2052:3:10"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "2052:15:10"
																					},
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "2073:2:10",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "not",
																							"nodeType": "YulIdentifier",
																							"src": "2069:3:10"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "2069:7:10"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "2048:3:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2048:29:10"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2033:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2033:45:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2080:2:10",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2029:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2029:54:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "2021:4:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1576:9:10",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1587:6:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "1598:4:10",
														"type": ""
													}
												],
												"src": "1486:603:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2268:225:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2285:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2296:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2278:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2278:21:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2278:21:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2319:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2330:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2315:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2315:18:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2335:2:10",
																		"type": "",
																		"value": "35"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2308:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2308:30:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2308:30:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2358:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2369:2:10",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2354:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2354:18:10"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "2374:34:10",
																		"type": "",
																		"value": "ERC20: transfer to the zero addr"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2347:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2347:62:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2347:62:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2429:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2440:2:10",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2425:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2425:18:10"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "2445:5:10",
																		"type": "",
																		"value": "ess"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2418:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2418:33:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2418:33:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2460:27:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2472:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2483:3:10",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2468:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2468:19:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "2460:4:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2245:9:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "2259:4:10",
														"type": ""
													}
												],
												"src": "2094:399:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2672:224:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2689:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2700:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2682:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2682:21:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2682:21:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2723:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2734:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2719:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2719:18:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2739:2:10",
																		"type": "",
																		"value": "34"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2712:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2712:30:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2712:30:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2762:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2773:2:10",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2758:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2758:18:10"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "2778:34:10",
																		"type": "",
																		"value": "ERC20: approve to the zero addre"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2751:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2751:62:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2751:62:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2833:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2844:2:10",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2829:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2829:18:10"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "2849:4:10",
																		"type": "",
																		"value": "ss"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2822:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2822:32:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2822:32:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2863:27:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2875:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2886:3:10",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2871:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2871:19:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "2863:4:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2649:9:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "2663:4:10",
														"type": ""
													}
												],
												"src": "2498:398:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3075:179:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3092:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3103:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3085:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3085:21:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3085:21:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3126:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3137:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3122:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3122:18:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3142:2:10",
																		"type": "",
																		"value": "29"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3115:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3115:30:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3115:30:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3165:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3176:2:10",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3161:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3161:18:10"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "3181:31:10",
																		"type": "",
																		"value": "ERC20: insufficient allowance"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3154:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3154:59:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3154:59:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3222:26:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3234:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3245:2:10",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3230:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3230:18:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "3222:4:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3052:9:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "3066:4:10",
														"type": ""
													}
												],
												"src": "2901:353:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3433:228:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3450:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3461:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3443:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3443:21:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3443:21:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3484:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3495:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3480:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3480:18:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3500:2:10",
																		"type": "",
																		"value": "38"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3473:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3473:30:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3473:30:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3523:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3534:2:10",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3519:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3519:18:10"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "3539:34:10",
																		"type": "",
																		"value": "ERC20: transfer amount exceeds b"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3512:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3512:62:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3512:62:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3594:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3605:2:10",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3590:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3590:18:10"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "3610:8:10",
																		"type": "",
																		"value": "alance"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3583:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3583:36:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3583:36:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3628:27:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3640:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3651:3:10",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3636:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3636:19:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "3628:4:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3410:9:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "3424:4:10",
														"type": ""
													}
												],
												"src": "3259:402:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3840:227:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3857:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3868:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3850:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3850:21:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3850:21:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3891:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3902:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3887:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3887:18:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3907:2:10",
																		"type": "",
																		"value": "37"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3880:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3880:30:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3880:30:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3930:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3941:2:10",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3926:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3926:18:10"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "3946:34:10",
																		"type": "",
																		"value": "ERC20: transfer from the zero ad"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3919:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3919:62:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3919:62:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4001:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4012:2:10",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3997:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3997:18:10"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "4017:7:10",
																		"type": "",
																		"value": "dress"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3990:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3990:35:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3990:35:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4034:27:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4046:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4057:3:10",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4042:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4042:19:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "4034:4:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3817:9:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "3831:4:10",
														"type": ""
													}
												],
												"src": "3666:401:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4246:226:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4263:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4274:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4256:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4256:21:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4256:21:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4297:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4308:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4293:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4293:18:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4313:2:10",
																		"type": "",
																		"value": "36"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4286:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4286:30:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4286:30:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4336:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4347:2:10",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4332:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4332:18:10"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "4352:34:10",
																		"type": "",
																		"value": "ERC20: approve from the zero add"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4325:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4325:62:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4325:62:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4407:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4418:2:10",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4403:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4403:18:10"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "4423:6:10",
																		"type": "",
																		"value": "ress"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4396:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4396:34:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4396:34:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4439:27:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4451:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4462:3:10",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4447:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4447:19:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "4439:4:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4223:9:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "4237:4:10",
														"type": ""
													}
												],
												"src": "4072:400:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4651:227:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4668:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4679:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4661:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4661:21:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4661:21:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4702:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4713:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4698:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4698:18:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4718:2:10",
																		"type": "",
																		"value": "37"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4691:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4691:30:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4691:30:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4741:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4752:2:10",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4737:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4737:18:10"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "4757:34:10",
																		"type": "",
																		"value": "ERC20: decreased allowance below"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4730:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4730:62:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4730:62:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4812:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4823:2:10",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4808:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4808:18:10"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "4828:7:10",
																		"type": "",
																		"value": " zero"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4801:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4801:35:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4801:35:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4845:27:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4857:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4868:3:10",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4853:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4853:19:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "4845:4:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4628:9:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "4642:4:10",
														"type": ""
													}
												],
												"src": "4477:401:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4984:76:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "4994:26:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5006:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5017:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5002:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "5002:18:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "4994:4:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5036:9:10"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "5047:6:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5029:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "5029:25:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5029:25:10"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4953:9:10",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "4964:6:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "4975:4:10",
														"type": ""
													}
												],
												"src": "4883:177:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5113:181:10",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "5148:115:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "sum",
																					"nodeType": "YulIdentifier",
																					"src": "5169:3:10"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "5178:3:10",
																							"type": "",
																							"value": "224"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "5183:10:10",
																							"type": "",
																							"value": "0x4e487b71"
																						}
																					],
																					"functionName": {
																						"name": "shl",
																						"nodeType": "YulIdentifier",
																						"src": "5174:3:10"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "5174:20:10"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "5162:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5162:33:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5162:33:10"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5215:1:10",
																					"type": "",
																					"value": "4"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5218:4:10",
																					"type": "",
																					"value": "0x11"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "5208:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5208:15:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5208:15:10"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "sum",
																					"nodeType": "YulIdentifier",
																					"src": "5243:3:10"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5248:4:10",
																					"type": "",
																					"value": "0x24"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "5236:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5236:17:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5236:17:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "5129:1:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "y",
																				"nodeType": "YulIdentifier",
																				"src": "5136:1:10"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nodeType": "YulIdentifier",
																			"src": "5132:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5132:6:10"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "5126:2:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "5126:13:10"
															},
															"nodeType": "YulIf",
															"src": "5123:2:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "5272:16:10",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "5283:1:10"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "5286:1:10"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5279:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "5279:9:10"
															},
															"variableNames": [
																{
																	"name": "sum",
																	"nodeType": "YulIdentifier",
																	"src": "5272:3:10"
																}
															]
														}
													]
												},
												"name": "checked_add_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "5096:1:10",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "5099:1:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "sum",
														"nodeType": "YulTypedName",
														"src": "5105:3:10",
														"type": ""
													}
												],
												"src": "5065:229:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5354:325:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "5364:22:10",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "5378:4:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5384:1:10",
																		"type": "",
																		"value": "2"
																	}
																],
																"functionName": {
																	"name": "div",
																	"nodeType": "YulIdentifier",
																	"src": "5374:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "5374:12:10"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nodeType": "YulIdentifier",
																	"src": "5364:6:10"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5395:38:10",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "5425:4:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5431:1:10",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "5421:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "5421:12:10"
															},
															"variables": [
																{
																	"name": "outOfPlaceEncoding",
																	"nodeType": "YulTypedName",
																	"src": "5399:18:10",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "5472:31:10",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "5474:27:10",
																		"value": {
																			"arguments": [
																				{
																					"name": "length",
																					"nodeType": "YulIdentifier",
																					"src": "5488:6:10"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5496:4:10",
																					"type": "",
																					"value": "0x7f"
																				}
																			],
																			"functionName": {
																				"name": "and",
																				"nodeType": "YulIdentifier",
																				"src": "5484:3:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5484:17:10"
																		},
																		"variableNames": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "5474:6:10"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "5452:18:10"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "5445:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "5445:26:10"
															},
															"nodeType": "YulIf",
															"src": "5442:2:10"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "5562:111:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5583:1:10",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "5590:3:10",
																							"type": "",
																							"value": "224"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "5595:10:10",
																							"type": "",
																							"value": "0x4e487b71"
																						}
																					],
																					"functionName": {
																						"name": "shl",
																						"nodeType": "YulIdentifier",
																						"src": "5586:3:10"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "5586:20:10"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "5576:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5576:31:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5576:31:10"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5627:1:10",
																					"type": "",
																					"value": "4"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5630:4:10",
																					"type": "",
																					"value": "0x22"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "5620:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5620:15:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5620:15:10"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5655:1:10",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5658:4:10",
																					"type": "",
																					"value": "0x24"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "5648:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5648:15:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5648:15:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "5518:18:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "5541:6:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5549:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nodeType": "YulIdentifier",
																			"src": "5538:2:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5538:14:10"
																	}
																],
																"functionName": {
																	"name": "eq",
																	"nodeType": "YulIdentifier",
																	"src": "5515:2:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "5515:38:10"
															},
															"nodeType": "YulIf",
															"src": "5512:2:10"
														}
													]
												},
												"name": "extract_byte_array_length",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "data",
														"nodeType": "YulTypedName",
														"src": "5334:4:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "5343:6:10",
														"type": ""
													}
												],
												"src": "5299:380:10"
											}
										]
									},
									"contents": "{\n    { }\n    function abi_decode_t_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        value0 := abi_decode_t_address(headStart)\n    }\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(value1, value1) }\n        value0 := abi_decode_t_address(headStart)\n        value1 := abi_decode_t_address(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(value2, value2) }\n        value0 := abi_decode_t_address(headStart)\n        value1 := abi_decode_t_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(value0, value0) }\n        value0 := abi_decode_t_address(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        let _1 := 32\n        mstore(headStart, _1)\n        let length := mload(value0)\n        mstore(add(headStart, _1), length)\n        let i := tail\n        for { } lt(i, length) { i := add(i, _1) }\n        {\n            mstore(add(add(headStart, i), 64), mload(add(add(value0, i), _1)))\n        }\n        if gt(i, length)\n        {\n            mstore(add(add(headStart, length), 64), tail)\n        }\n        tail := add(add(headStart, and(add(length, 31), not(31))), 64)\n    }\n    function abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 35)\n        mstore(add(headStart, 64), \"ERC20: transfer to the zero addr\")\n        mstore(add(headStart, 96), \"ess\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 34)\n        mstore(add(headStart, 64), \"ERC20: approve to the zero addre\")\n        mstore(add(headStart, 96), \"ss\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"ERC20: insufficient allowance\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"ERC20: transfer amount exceeds b\")\n        mstore(add(headStart, 96), \"alance\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 37)\n        mstore(add(headStart, 64), \"ERC20: transfer from the zero ad\")\n        mstore(add(headStart, 96), \"dress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 36)\n        mstore(add(headStart, 64), \"ERC20: approve from the zero add\")\n        mstore(add(headStart, 96), \"ress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 37)\n        mstore(add(headStart, 64), \"ERC20: decreased allowance below\")\n        mstore(add(headStart, 96), \" zero\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        if gt(x, not(y))\n        {\n            mstore(sum, shl(224, 0x4e487b71))\n            mstore(4, 0x11)\n            revert(sum, 0x24)\n        }\n        sum := add(x, y)\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n}",
									"id": 10,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b50600436106100a95760003560e01c80633950935111610071578063395093511461011c57806370a082311461012f57806395d89b4114610142578063a457c2d71461014a578063a9059cbb1461015d578063dd62ed3e14610170576100a9565b806306fdde03146100ae578063095ea7b3146100cc57806318160ddd146100ec57806323b872dd14610101578063313ce56714610114575b600080fd5b6100b6610183565b6040516100c3919061065e565b60405180910390f35b6100df6100da36600461062a565b610215565b6040516100c39190610653565b6100f4610237565b6040516100c39190610881565b6100df61010f3660046105ef565b61023d565b6100f461026b565b6100df61012a36600461062a565b610270565b6100f461013d36600461059c565b61029c565b6100b66102bb565b6100df61015836600461062a565b6102ca565b6100df61016b36600461062a565b61031b565b6100f461017e3660046105bd565b610333565b606060038054610192906108ae565b80601f01602080910402602001604051908101604052809291908181526020018280546101be906108ae565b801561020b5780601f106101e05761010080835404028352916020019161020b565b820191906000526020600020905b8154815290600101906020018083116101ee57829003601f168201915b5050505050905090565b60008061022061035e565b905061022d818585610362565b5060019392505050565b60025490565b60008061024861035e565b9050610255858285610416565b610260858585610460565b506001949350505050565b601290565b60008061027b61035e565b905061022d81858561028d8589610333565b610297919061088a565b610362565b6001600160a01b0381166000908152602081905260409020545b919050565b606060048054610192906108ae565b6000806102d561035e565b905060006102e38286610333565b90508381101561030e5760405162461bcd60e51b81526004016103059061083c565b60405180910390fd5b6102608286868403610362565b60008061032661035e565b905061022d818585610460565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b3390565b6001600160a01b0383166103885760405162461bcd60e51b8152600401610305906107f8565b6001600160a01b0382166103ae5760405162461bcd60e51b8152600401610305906106f4565b6001600160a01b0380841660008181526001602090815260408083209487168084529490915290819020849055517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92590610409908590610881565b60405180910390a3505050565b60006104228484610333565b9050600019811461045a578181101561044d5760405162461bcd60e51b815260040161030590610736565b61045a8484848403610362565b50505050565b6001600160a01b0383166104865760405162461bcd60e51b8152600401610305906107b3565b6001600160a01b0382166104ac5760405162461bcd60e51b8152600401610305906106b1565b6104b7838383610580565b6001600160a01b038316600090815260208190526040902054818110156104f05760405162461bcd60e51b81526004016103059061076d565b6001600160a01b0380851660009081526020819052604080822085850390559185168152908120805484929061052790849061088a565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516105719190610881565b60405180910390a361045a8484845b505050565b80356001600160a01b03811681146102b657600080fd5b6000602082840312156105ad578081fd5b6105b682610585565b9392505050565b600080604083850312156105cf578081fd5b6105d883610585565b91506105e660208401610585565b90509250929050565b600080600060608486031215610603578081fd5b61060c84610585565b925061061a60208501610585565b9150604084013590509250925092565b6000806040838503121561063c578182fd5b61064583610585565b946020939093013593505050565b901515815260200190565b6000602080835283518082850152825b8181101561068a5785810183015185820160400152820161066e565b8181111561069b5783604083870101525b50601f01601f1916929092016040019392505050565b60208082526023908201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260408201526265737360e81b606082015260800190565b60208082526022908201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604082015261737360f01b606082015260800190565b6020808252601d908201527f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000604082015260600190565b60208082526026908201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604082015265616c616e636560d01b606082015260800190565b60208082526025908201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604082015264647265737360d81b606082015260800190565b60208082526024908201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646040820152637265737360e01b606082015260800190565b60208082526025908201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604082015264207a65726f60d81b606082015260800190565b90815260200190565b600082198211156108a957634e487b7160e01b81526011600452602481fd5b500190565b6002810460018216806108c257607f821691505b602082108114156108e357634e487b7160e01b600052602260045260246000fd5b5091905056fea264697066735822122095df7fc9053b5bd679b51b2d78ece433167fbe3882defd903769d2a3f897523f64736f6c63430008000033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xA9 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x39509351 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x11C JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x12F JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x142 JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x14A JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x15D JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x170 JUMPI PUSH2 0xA9 JUMP JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0xAE JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0xCC JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0xEC JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x101 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x114 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB6 PUSH2 0x183 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xC3 SWAP2 SWAP1 PUSH2 0x65E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xDF PUSH2 0xDA CALLDATASIZE PUSH1 0x4 PUSH2 0x62A JUMP JUMPDEST PUSH2 0x215 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xC3 SWAP2 SWAP1 PUSH2 0x653 JUMP JUMPDEST PUSH2 0xF4 PUSH2 0x237 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xC3 SWAP2 SWAP1 PUSH2 0x881 JUMP JUMPDEST PUSH2 0xDF PUSH2 0x10F CALLDATASIZE PUSH1 0x4 PUSH2 0x5EF JUMP JUMPDEST PUSH2 0x23D JUMP JUMPDEST PUSH2 0xF4 PUSH2 0x26B JUMP JUMPDEST PUSH2 0xDF PUSH2 0x12A CALLDATASIZE PUSH1 0x4 PUSH2 0x62A JUMP JUMPDEST PUSH2 0x270 JUMP JUMPDEST PUSH2 0xF4 PUSH2 0x13D CALLDATASIZE PUSH1 0x4 PUSH2 0x59C JUMP JUMPDEST PUSH2 0x29C JUMP JUMPDEST PUSH2 0xB6 PUSH2 0x2BB JUMP JUMPDEST PUSH2 0xDF PUSH2 0x158 CALLDATASIZE PUSH1 0x4 PUSH2 0x62A JUMP JUMPDEST PUSH2 0x2CA JUMP JUMPDEST PUSH2 0xDF PUSH2 0x16B CALLDATASIZE PUSH1 0x4 PUSH2 0x62A JUMP JUMPDEST PUSH2 0x31B JUMP JUMPDEST PUSH2 0xF4 PUSH2 0x17E CALLDATASIZE PUSH1 0x4 PUSH2 0x5BD JUMP JUMPDEST PUSH2 0x333 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD PUSH2 0x192 SWAP1 PUSH2 0x8AE JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x1BE SWAP1 PUSH2 0x8AE JUMP JUMPDEST DUP1 ISZERO PUSH2 0x20B JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1E0 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x20B JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x1EE JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x220 PUSH2 0x35E JUMP JUMPDEST SWAP1 POP PUSH2 0x22D DUP2 DUP6 DUP6 PUSH2 0x362 JUMP JUMPDEST POP PUSH1 0x1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x2 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x248 PUSH2 0x35E JUMP JUMPDEST SWAP1 POP PUSH2 0x255 DUP6 DUP3 DUP6 PUSH2 0x416 JUMP JUMPDEST PUSH2 0x260 DUP6 DUP6 DUP6 PUSH2 0x460 JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x12 SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x27B PUSH2 0x35E JUMP JUMPDEST SWAP1 POP PUSH2 0x22D DUP2 DUP6 DUP6 PUSH2 0x28D DUP6 DUP10 PUSH2 0x333 JUMP JUMPDEST PUSH2 0x297 SWAP2 SWAP1 PUSH2 0x88A JUMP JUMPDEST PUSH2 0x362 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x4 DUP1 SLOAD PUSH2 0x192 SWAP1 PUSH2 0x8AE JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x2D5 PUSH2 0x35E JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2E3 DUP3 DUP7 PUSH2 0x333 JUMP JUMPDEST SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0x30E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x305 SWAP1 PUSH2 0x83C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x260 DUP3 DUP7 DUP7 DUP5 SUB PUSH2 0x362 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x326 PUSH2 0x35E JUMP JUMPDEST SWAP1 POP PUSH2 0x22D DUP2 DUP6 DUP6 PUSH2 0x460 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST CALLER SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x388 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x305 SWAP1 PUSH2 0x7F8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x3AE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x305 SWAP1 PUSH2 0x6F4 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP5 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 SWAP1 SWAP2 MSTORE SWAP1 DUP2 SWAP1 KECCAK256 DUP5 SWAP1 SSTORE MLOAD PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP1 PUSH2 0x409 SWAP1 DUP6 SWAP1 PUSH2 0x881 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x422 DUP5 DUP5 PUSH2 0x333 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 NOT DUP2 EQ PUSH2 0x45A JUMPI DUP2 DUP2 LT ISZERO PUSH2 0x44D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x305 SWAP1 PUSH2 0x736 JUMP JUMPDEST PUSH2 0x45A DUP5 DUP5 DUP5 DUP5 SUB PUSH2 0x362 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x486 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x305 SWAP1 PUSH2 0x7B3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x4AC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x305 SWAP1 PUSH2 0x6B1 JUMP JUMPDEST PUSH2 0x4B7 DUP4 DUP4 DUP4 PUSH2 0x580 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0x4F0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x305 SWAP1 PUSH2 0x76D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP6 DUP6 SUB SWAP1 SSTORE SWAP2 DUP6 AND DUP2 MSTORE SWAP1 DUP2 KECCAK256 DUP1 SLOAD DUP5 SWAP3 SWAP1 PUSH2 0x527 SWAP1 DUP5 SWAP1 PUSH2 0x88A JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP5 PUSH1 0x40 MLOAD PUSH2 0x571 SWAP2 SWAP1 PUSH2 0x881 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0x45A DUP5 DUP5 DUP5 JUMPDEST POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x2B6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x5AD JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x5B6 DUP3 PUSH2 0x585 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x5CF JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x5D8 DUP4 PUSH2 0x585 JUMP JUMPDEST SWAP2 POP PUSH2 0x5E6 PUSH1 0x20 DUP5 ADD PUSH2 0x585 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x603 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x60C DUP5 PUSH2 0x585 JUMP JUMPDEST SWAP3 POP PUSH2 0x61A PUSH1 0x20 DUP6 ADD PUSH2 0x585 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x63C JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x645 DUP4 PUSH2 0x585 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 DUP3 DUP6 ADD MSTORE DUP3 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x68A JUMPI DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP3 ADD PUSH2 0x66E JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0x69B JUMPI DUP4 PUSH1 0x40 DUP4 DUP8 ADD ADD MSTORE JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x40 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x23 SWAP1 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x40 DUP3 ADD MSTORE PUSH3 0x657373 PUSH1 0xE8 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x22 SWAP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0x7373 PUSH1 0xF0 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1D SWAP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x26 SWAP1 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x40 DUP3 ADD MSTORE PUSH6 0x616C616E6365 PUSH1 0xD0 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x25 SWAP1 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x40 DUP3 ADD MSTORE PUSH5 0x6472657373 PUSH1 0xD8 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x24 SWAP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x40 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x25 SWAP1 DUP3 ADD MSTORE PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x40 DUP3 ADD MSTORE PUSH5 0x207A65726F PUSH1 0xD8 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x8A9 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 DUP2 REVERT JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x2 DUP2 DIV PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x8C2 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0x8E3 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP6 0xDF PUSH32 0xC9053B5BD679B51B2D78ECE433167FBE3882DEFD903769D2A3F897523F64736F PUSH13 0x63430008000033000000000000 ",
							"sourceMap": "1424:11573:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2204:100;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4557:201;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;3326:108::-;;;:::i;:::-;;;;;;;:::i;5338:295::-;;;;;;:::i;:::-;;:::i;3166:95::-;;;:::i;6042:238::-;;;;;;:::i;:::-;;:::i;3497:127::-;;;;;;:::i;:::-;;:::i;2423:104::-;;;:::i;6783:436::-;;;;;;:::i;:::-;;:::i;3830:193::-;;;;;;:::i;:::-;;:::i;4086:151::-;;;;;;:::i;:::-;;:::i;2204:100::-;2258:13;2291:5;2284:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2204:100;:::o;4557:201::-;4640:4;4657:13;4673:12;:10;:12::i;:::-;4657:28;;4696:32;4705:5;4712:7;4721:6;4696:8;:32::i;:::-;-1:-1:-1;4746:4:0;;4557:201;-1:-1:-1;;;4557:201:0:o;3326:108::-;3414:12;;3326:108;:::o;5338:295::-;5469:4;5486:15;5504:12;:10;:12::i;:::-;5486:30;;5527:38;5543:4;5549:7;5558:6;5527:15;:38::i;:::-;5576:27;5586:4;5592:2;5596:6;5576:9;:27::i;:::-;-1:-1:-1;5621:4:0;;5338:295;-1:-1:-1;;;;5338:295:0:o;3166:95::-;3251:2;3166:95;:::o;6042:238::-;6130:4;6147:13;6163:12;:10;:12::i;:::-;6147:28;;6186:64;6195:5;6202:7;6239:10;6211:25;6221:5;6228:7;6211:9;:25::i;:::-;:38;;;;:::i;:::-;6186:8;:64::i;3497:127::-;-1:-1:-1;;;;;3598:18:0;;3571:7;3598:18;;;;;;;;;;;3497:127;;;;:::o;2423:104::-;2479:13;2512:7;2505:14;;;;;:::i;6783:436::-;6876:4;6893:13;6909:12;:10;:12::i;:::-;6893:28;;6932:24;6959:25;6969:5;6976:7;6959:9;:25::i;:::-;6932:52;;7023:15;7003:16;:35;;6995:85;;;;-1:-1:-1;;;6995:85:0;;;;;;;:::i;:::-;;;;;;;;;7116:60;7125:5;7132:7;7160:15;7141:16;:34;7116:8;:60::i;3830:193::-;3909:4;3926:13;3942:12;:10;:12::i;:::-;3926:28;;3965;3975:5;3982:2;3986:6;3965:9;:28::i;4086:151::-;-1:-1:-1;;;;;4202:18:0;;;4175:7;4202:18;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;4086:151::o;656:98:4:-;736:10;656:98;:::o;10417:380:0:-;-1:-1:-1;;;;;10553:19:0;;10545:68;;;;-1:-1:-1;;;10545:68:0;;;;;;;:::i;:::-;-1:-1:-1;;;;;10632:21:0;;10624:68;;;;-1:-1:-1;;;10624:68:0;;;;;;;:::i;:::-;-1:-1:-1;;;;;10705:18:0;;;;;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;;:36;;;10757:32;;;;;10735:6;;10757:32;:::i;:::-;;;;;;;;10417:380;;;:::o;11088:453::-;11223:24;11250:25;11260:5;11267:7;11250:9;:25::i;:::-;11223:52;;-1:-1:-1;;11290:16:0;:37;11286:248;;11372:6;11352:16;:26;;11344:68;;;;-1:-1:-1;;;11344:68:0;;;;;;;:::i;:::-;11456:51;11465:5;11472:7;11500:6;11481:16;:25;11456:8;:51::i;:::-;11088:453;;;;:::o;7698:671::-;-1:-1:-1;;;;;7829:18:0;;7821:68;;;;-1:-1:-1;;;7821:68:0;;;;;;;:::i;:::-;-1:-1:-1;;;;;7908:16:0;;7900:64;;;;-1:-1:-1;;;7900:64:0;;;;;;;:::i;:::-;7977:38;7998:4;8004:2;8008:6;7977:20;:38::i;:::-;-1:-1:-1;;;;;8050:15:0;;8028:19;8050:15;;;;;;;;;;;8084:21;;;;8076:72;;;;-1:-1:-1;;;8076:72:0;;;;;;;:::i;:::-;-1:-1:-1;;;;;8184:15:0;;;:9;:15;;;;;;;;;;;8202:20;;;8184:38;;8244:13;;;;;;;;:23;;8216:6;;8184:9;8244:23;;8216:6;;8244:23;:::i;:::-;;;;;;;;8300:2;-1:-1:-1;;;;;8285:26:0;8294:4;-1:-1:-1;;;;;8285:26:0;;8304:6;8285:26;;;;;;:::i;:::-;;;;;;;;8324:37;8344:4;8350:2;8354:6;12141:125;;;;:::o;14:175:10:-;84:20;;-1:-1:-1;;;;;133:31:10;;123:42;;113:2;;179:1;176;169:12;194:198;;306:2;294:9;285:7;281:23;277:32;274:2;;;327:6;319;312:22;274:2;355:31;376:9;355:31;:::i;:::-;345:41;264:128;-1:-1:-1;;;264:128:10:o;397:274::-;;;526:2;514:9;505:7;501:23;497:32;494:2;;;547:6;539;532:22;494:2;575:31;596:9;575:31;:::i;:::-;565:41;;625:40;661:2;650:9;646:18;625:40;:::i;:::-;615:50;;484:187;;;;;:::o;676:342::-;;;;822:2;810:9;801:7;797:23;793:32;790:2;;;843:6;835;828:22;790:2;871:31;892:9;871:31;:::i;:::-;861:41;;921:40;957:2;946:9;942:18;921:40;:::i;:::-;911:50;;1008:2;997:9;993:18;980:32;970:42;;780:238;;;;;:::o;1023:266::-;;;1152:2;1140:9;1131:7;1127:23;1123:32;1120:2;;;1173:6;1165;1158:22;1120:2;1201:31;1222:9;1201:31;:::i;:::-;1191:41;1279:2;1264:18;;;;1251:32;;-1:-1:-1;;;1110:179:10:o;1294:187::-;1459:14;;1452:22;1434:41;;1422:2;1407:18;;1389:92::o;1486:603::-;;1627:2;1656;1645:9;1638:21;1688:6;1682:13;1731:6;1726:2;1715:9;1711:18;1704:34;1756:4;1769:140;1783:6;1780:1;1777:13;1769:140;;;1878:14;;;1874:23;;1868:30;1844:17;;;1863:2;1840:26;1833:66;1798:10;;1769:140;;;1927:6;1924:1;1921:13;1918:2;;;1997:4;1992:2;1983:6;1972:9;1968:22;1964:31;1957:45;1918:2;-1:-1:-1;2073:2:10;2052:15;-1:-1:-1;;2048:29:10;2033:45;;;;2080:2;2029:54;;1607:482;-1:-1:-1;;;1607:482:10:o;2094:399::-;2296:2;2278:21;;;2335:2;2315:18;;;2308:30;2374:34;2369:2;2354:18;;2347:62;-1:-1:-1;;;2440:2:10;2425:18;;2418:33;2483:3;2468:19;;2268:225::o;2498:398::-;2700:2;2682:21;;;2739:2;2719:18;;;2712:30;2778:34;2773:2;2758:18;;2751:62;-1:-1:-1;;;2844:2:10;2829:18;;2822:32;2886:3;2871:19;;2672:224::o;2901:353::-;3103:2;3085:21;;;3142:2;3122:18;;;3115:30;3181:31;3176:2;3161:18;;3154:59;3245:2;3230:18;;3075:179::o;3259:402::-;3461:2;3443:21;;;3500:2;3480:18;;;3473:30;3539:34;3534:2;3519:18;;3512:62;-1:-1:-1;;;3605:2:10;3590:18;;3583:36;3651:3;3636:19;;3433:228::o;3666:401::-;3868:2;3850:21;;;3907:2;3887:18;;;3880:30;3946:34;3941:2;3926:18;;3919:62;-1:-1:-1;;;4012:2:10;3997:18;;3990:35;4057:3;4042:19;;3840:227::o;4072:400::-;4274:2;4256:21;;;4313:2;4293:18;;;4286:30;4352:34;4347:2;4332:18;;4325:62;-1:-1:-1;;;4418:2:10;4403:18;;4396:34;4462:3;4447:19;;4246:226::o;4477:401::-;4679:2;4661:21;;;4718:2;4698:18;;;4691:30;4757:34;4752:2;4737:18;;4730:62;-1:-1:-1;;;4823:2:10;4808:18;;4801:35;4868:3;4853:19;;4651:227::o;4883:177::-;5029:25;;;5017:2;5002:18;;4984:76::o;5065:229::-;;5136:1;5132:6;5129:1;5126:13;5123:2;;;-1:-1:-1;;;5162:33:10;;5218:4;5215:1;5208:15;5248:4;5169:3;5236:17;5123:2;-1:-1:-1;5279:9:10;;5113:181::o;5299:380::-;5384:1;5374:12;;5431:1;5421:12;;;5442:2;;5496:4;5488:6;5484:17;5474:27;;5442:2;5549;5541:6;5538:14;5518:18;5515:38;5512:2;;;5595:10;5590:3;5586:20;5583:1;5576:31;5630:4;5627:1;5620:15;5658:4;5655:1;5648:15;5512:2;;5354:325;;;:::o"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "467000",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"external": {
								"allowance(address,address)": "infinite",
								"approve(address,uint256)": "22619",
								"balanceOf(address)": "infinite",
								"decimals()": "317",
								"decreaseAllowance(address,uint256)": "23711",
								"increaseAllowance(address,uint256)": "23673",
								"name()": "infinite",
								"symbol()": "infinite",
								"totalSupply()": "1073",
								"transfer(address,uint256)": "infinite",
								"transferFrom(address,address,uint256)": "infinite"
							},
							"internal": {
								"_afterTokenTransfer(address,address,uint256)": "infinite",
								"_approve(address,address,uint256)": "infinite",
								"_beforeTokenTransfer(address,address,uint256)": "15",
								"_burn(address,uint256)": "infinite",
								"_mint(address,uint256)": "infinite",
								"_spendAllowance(address,address,uint256)": "infinite",
								"_transfer(address,address,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 1424,
									"end": 12997,
									"name": "PUSH",
									"source": 0,
									"value": "80"
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 2018,
									"end": 2134,
									"name": "CALLVALUE",
									"source": 0
								},
								{
									"begin": 2018,
									"end": 2134,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 2018,
									"end": 2134,
									"name": "ISZERO",
									"source": 0
								},
								{
									"begin": 2018,
									"end": 2134,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 2018,
									"end": 2134,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": 2018,
									"end": 2134,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 2018,
									"end": 2134,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 2018,
									"end": 2134,
									"name": "REVERT",
									"source": 0
								},
								{
									"begin": 2018,
									"end": 2134,
									"name": "tag",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 2018,
									"end": 2134,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 2018,
									"end": 2134,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 2018,
									"end": 2134,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 2018,
									"end": 2134,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 2018,
									"end": 2134,
									"name": "PUSHSIZE",
									"source": 0
								},
								{
									"begin": 2018,
									"end": 2134,
									"name": "CODESIZE",
									"source": 0
								},
								{
									"begin": 2018,
									"end": 2134,
									"name": "SUB",
									"source": 0
								},
								{
									"begin": 2018,
									"end": 2134,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 2018,
									"end": 2134,
									"name": "PUSHSIZE",
									"source": 0
								},
								{
									"begin": 2018,
									"end": 2134,
									"name": "DUP4",
									"source": 0
								},
								{
									"begin": 2018,
									"end": 2134,
									"name": "CODECOPY",
									"source": 0
								},
								{
									"begin": 2018,
									"end": 2134,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 2018,
									"end": 2134,
									"name": "ADD",
									"source": 0
								},
								{
									"begin": 2018,
									"end": 2134,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 2018,
									"end": 2134,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 2018,
									"end": 2134,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 2018,
									"end": 2134,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 2018,
									"end": 2134,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "2"
								},
								{
									"begin": 2018,
									"end": 2134,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 2018,
									"end": 2134,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "3"
								},
								{
									"begin": 2018,
									"end": 2134,
									"name": "JUMP",
									"source": 0,
									"value": "[in]"
								},
								{
									"begin": 2018,
									"end": 2134,
									"name": "tag",
									"source": 0,
									"value": "2"
								},
								{
									"begin": 2018,
									"end": 2134,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 2085,
									"end": 2098,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 2085,
									"end": 2098,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 2085,
									"end": 2098,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "6"
								},
								{
									"begin": 2085,
									"end": 2098,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 2085,
									"end": 2090,
									"name": "PUSH",
									"source": 0,
									"value": "3"
								},
								{
									"begin": 2085,
									"end": 2090,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 2085,
									"end": 2098,
									"name": "PUSH",
									"source": 0,
									"value": "20"
								},
								{
									"begin": 2085,
									"end": 2098,
									"name": "DUP6",
									"source": 0
								},
								{
									"begin": 2085,
									"end": 2098,
									"name": "ADD",
									"source": 0
								},
								{
									"begin": 2085,
									"end": 2098,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 2085,
									"end": 2098,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "7"
								},
								{
									"begin": 2085,
									"end": 2098,
									"name": "JUMP",
									"source": 0,
									"value": "[in]"
								},
								{
									"begin": 2085,
									"end": 2098,
									"name": "tag",
									"source": 0,
									"value": "6"
								},
								{
									"begin": 2085,
									"end": 2098,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 2109,
									"end": 2126,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 2109,
									"end": 2126,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 2109,
									"end": 2126,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "8"
								},
								{
									"begin": 2109,
									"end": 2126,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 2109,
									"end": 2116,
									"name": "PUSH",
									"source": 0,
									"value": "4"
								},
								{
									"begin": 2109,
									"end": 2116,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 2109,
									"end": 2126,
									"name": "PUSH",
									"source": 0,
									"value": "20"
								},
								{
									"begin": 2109,
									"end": 2126,
									"name": "DUP5",
									"source": 0
								},
								{
									"begin": 2109,
									"end": 2126,
									"name": "ADD",
									"source": 0
								},
								{
									"begin": 2109,
									"end": 2126,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 2109,
									"end": 2126,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "7"
								},
								{
									"begin": 2109,
									"end": 2126,
									"name": "JUMP",
									"source": 0,
									"value": "[in]"
								},
								{
									"begin": 2109,
									"end": 2126,
									"name": "tag",
									"source": 0,
									"value": "8"
								},
								{
									"begin": 2109,
									"end": 2126,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 2109,
									"end": 2126,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 2018,
									"end": 2134,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 2018,
									"end": 2134,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "21"
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "JUMP",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "tag",
									"source": 0,
									"value": "7"
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "SLOAD",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "10"
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "11"
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "JUMP",
									"source": 0,
									"value": "[in]"
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "tag",
									"source": 0,
									"value": "10"
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "PUSH",
									"source": 0,
									"value": "20"
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "KECCAK256",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "PUSH",
									"source": 0,
									"value": "1F"
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "ADD",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "PUSH",
									"source": 0,
									"value": "20"
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "DIV",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "ADD",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "SWAP3",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "13"
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "DUP6",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "SSTORE",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "16"
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "JUMP",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "tag",
									"source": 0,
									"value": "13"
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "PUSH",
									"source": 0,
									"value": "1F"
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "LT",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "14"
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "PUSH",
									"source": 0,
									"value": "FF"
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "NOT",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "DUP4",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "ADD",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "OR",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "DUP6",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "SSTORE",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "16"
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "JUMP",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "tag",
									"source": 0,
									"value": "14"
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "ADD",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "PUSH",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "ADD",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "DUP6",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "SSTORE",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "ISZERO",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "16"
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "ADD",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "tag",
									"source": 0,
									"value": "15"
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "GT",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "ISZERO",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "16"
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "SSTORE",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "PUSH",
									"source": 0,
									"value": "20"
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "ADD",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "PUSH",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "ADD",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "15"
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "JUMP",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "tag",
									"source": 0,
									"value": "16"
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "17"
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "SWAP3",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "18"
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "JUMP",
									"source": 0,
									"value": "[in]"
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "tag",
									"source": 0,
									"value": "17"
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "JUMP",
									"source": 0,
									"value": "[out]"
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "tag",
									"source": 0,
									"value": "18"
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "tag",
									"source": 0,
									"value": "19"
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "GT",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "ISZERO",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "17"
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "SSTORE",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "PUSH",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "ADD",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "19"
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "JUMP",
									"source": 0
								},
								{
									"begin": 14,
									"end": 895,
									"name": "tag",
									"source": 10,
									"value": "22"
								},
								{
									"begin": 14,
									"end": 895,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 14,
									"end": 895,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 123,
									"end": 126,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 116,
									"end": 120,
									"name": "PUSH",
									"source": 10,
									"value": "1F"
								},
								{
									"begin": 108,
									"end": 114,
									"name": "DUP4",
									"source": 10
								},
								{
									"begin": 104,
									"end": 121,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 100,
									"end": 127,
									"name": "SLT",
									"source": 10
								},
								{
									"begin": 90,
									"end": 92,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "24"
								},
								{
									"begin": 90,
									"end": 92,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": 145,
									"end": 150,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 138,
									"end": 143,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 131,
									"end": 151,
									"name": "REVERT",
									"source": 10
								},
								{
									"begin": 90,
									"end": 92,
									"name": "tag",
									"source": 10,
									"value": "24"
								},
								{
									"begin": 90,
									"end": 92,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 172,
									"end": 185,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 172,
									"end": 185,
									"name": "MLOAD",
									"source": 10
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "40"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 234,
									"end": 244,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 234,
									"end": 244,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 234,
									"end": 244,
									"name": "GT",
									"source": 10
								},
								{
									"begin": 231,
									"end": 233,
									"name": "ISZERO",
									"source": 10
								},
								{
									"begin": 231,
									"end": 233,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "26"
								},
								{
									"begin": 231,
									"end": 233,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": 247,
									"end": 265,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "26"
								},
								{
									"begin": 247,
									"end": 265,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "27"
								},
								{
									"begin": 247,
									"end": 265,
									"name": "JUMP",
									"source": 10,
									"value": "[in]"
								},
								{
									"begin": 247,
									"end": 265,
									"name": "tag",
									"source": 10,
									"value": "26"
								},
								{
									"begin": 247,
									"end": 265,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 296,
									"end": 298,
									"name": "PUSH",
									"source": 10,
									"value": "40"
								},
								{
									"begin": 290,
									"end": 299,
									"name": "MLOAD",
									"source": 10
								},
								{
									"begin": 318,
									"end": 322,
									"name": "PUSH",
									"source": 10,
									"value": "20"
								},
								{
									"begin": 388,
									"end": 390,
									"name": "PUSH",
									"source": 10,
									"value": "1F"
								},
								{
									"begin": 369,
									"end": 382,
									"name": "DUP5",
									"source": 10
								},
								{
									"begin": 369,
									"end": 382,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1F"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 365,
									"end": 392,
									"name": "AND",
									"source": 10
								},
								{
									"begin": 353,
									"end": 393,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 353,
									"end": 393,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 349,
									"end": 398,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 349,
									"end": 398,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 413,
									"end": 431,
									"name": "DUP4",
									"source": 10
								},
								{
									"begin": 413,
									"end": 431,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 413,
									"end": 431,
									"name": "GT",
									"source": 10
								},
								{
									"begin": 433,
									"end": 455,
									"name": "DUP4",
									"source": 10
								},
								{
									"begin": 433,
									"end": 455,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 433,
									"end": 455,
									"name": "LT",
									"source": 10
								},
								{
									"begin": 410,
									"end": 456,
									"name": "OR",
									"source": 10
								},
								{
									"begin": 407,
									"end": 409,
									"name": "ISZERO",
									"source": 10
								},
								{
									"begin": 407,
									"end": 409,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "29"
								},
								{
									"begin": 407,
									"end": 409,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": 459,
									"end": 477,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "29"
								},
								{
									"begin": 459,
									"end": 477,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "27"
								},
								{
									"begin": 459,
									"end": 477,
									"name": "JUMP",
									"source": 10,
									"value": "[in]"
								},
								{
									"begin": 459,
									"end": 477,
									"name": "tag",
									"source": 10,
									"value": "29"
								},
								{
									"begin": 459,
									"end": 477,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 495,
									"end": 497,
									"name": "PUSH",
									"source": 10,
									"value": "40"
								},
								{
									"begin": 488,
									"end": 510,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 519,
									"end": 537,
									"name": "DUP4",
									"source": 10
								},
								{
									"begin": 519,
									"end": 537,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 519,
									"end": 537,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 556,
									"end": 571,
									"name": "DUP6",
									"source": 10
								},
								{
									"begin": 556,
									"end": 571,
									"name": "DUP5",
									"source": 10
								},
								{
									"begin": 556,
									"end": 571,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 552,
									"end": 576,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 552,
									"end": 576,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 549,
									"end": 582,
									"name": "DUP8",
									"source": 10
								},
								{
									"begin": -1,
									"end": -1,
									"name": "LT",
									"source": -1
								},
								{
									"begin": 546,
									"end": 548,
									"name": "ISZERO",
									"source": 10
								},
								{
									"begin": 546,
									"end": 548,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "30"
								},
								{
									"begin": 546,
									"end": 548,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": 599,
									"end": 604,
									"name": "DUP5",
									"source": 10
								},
								{
									"begin": 592,
									"end": 597,
									"name": "DUP6",
									"source": 10
								},
								{
									"begin": 585,
									"end": 605,
									"name": "REVERT",
									"source": 10
								},
								{
									"begin": 546,
									"end": 548,
									"name": "tag",
									"source": 10,
									"value": "30"
								},
								{
									"begin": 546,
									"end": 548,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 625,
									"end": 630,
									"name": "DUP5",
									"source": 10
								},
								{
									"begin": 616,
									"end": 630,
									"name": "SWAP3",
									"source": 10
								},
								{
									"begin": 616,
									"end": 630,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 639,
									"end": 772,
									"name": "tag",
									"source": 10,
									"value": "31"
								},
								{
									"begin": 639,
									"end": 772,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 653,
									"end": 655,
									"name": "DUP4",
									"source": 10
								},
								{
									"begin": 650,
									"end": 651,
									"name": "DUP4",
									"source": 10
								},
								{
									"begin": 647,
									"end": 656,
									"name": "LT",
									"source": 10
								},
								{
									"begin": 639,
									"end": 772,
									"name": "ISZERO",
									"source": 10
								},
								{
									"begin": 639,
									"end": 772,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "33"
								},
								{
									"begin": 639,
									"end": 772,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": 741,
									"end": 755,
									"name": "DUP6",
									"source": 10
								},
								{
									"begin": 741,
									"end": 755,
									"name": "DUP4",
									"source": 10
								},
								{
									"begin": 741,
									"end": 755,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 737,
									"end": 760,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 737,
									"end": 760,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 731,
									"end": 761,
									"name": "MLOAD",
									"source": 10
								},
								{
									"begin": 710,
									"end": 724,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 710,
									"end": 724,
									"name": "DUP5",
									"source": 10
								},
								{
									"begin": 710,
									"end": 724,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 706,
									"end": 729,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 706,
									"end": 729,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 699,
									"end": 762,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 664,
									"end": 674,
									"name": "SWAP2",
									"source": 10
								},
								{
									"begin": 664,
									"end": 674,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 664,
									"end": 674,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 664,
									"end": 674,
									"name": "SWAP2",
									"source": 10
								},
								{
									"begin": 639,
									"end": 772,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "31"
								},
								{
									"begin": 639,
									"end": 772,
									"name": "JUMP",
									"source": 10
								},
								{
									"begin": 639,
									"end": 772,
									"name": "tag",
									"source": 10,
									"value": "33"
								},
								{
									"begin": 639,
									"end": 772,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 790,
									"end": 792,
									"name": "DUP4",
									"source": 10
								},
								{
									"begin": 787,
									"end": 788,
									"name": "DUP4",
									"source": 10
								},
								{
									"begin": 784,
									"end": 793,
									"name": "GT",
									"source": 10
								},
								{
									"begin": 781,
									"end": 783,
									"name": "ISZERO",
									"source": 10
								},
								{
									"begin": 781,
									"end": 783,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "34"
								},
								{
									"begin": 781,
									"end": 783,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": 849,
									"end": 854,
									"name": "DUP5",
									"source": 10
								},
								{
									"begin": 844,
									"end": 846,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 839,
									"end": 841,
									"name": "DUP6",
									"source": 10
								},
								{
									"begin": 831,
									"end": 837,
									"name": "DUP5",
									"source": 10
								},
								{
									"begin": 827,
									"end": 842,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 823,
									"end": 847,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 816,
									"end": 855,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 781,
									"end": 783,
									"name": "tag",
									"source": 10,
									"value": "34"
								},
								{
									"begin": 781,
									"end": 783,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 883,
									"end": 889,
									"name": "SWAP6",
									"source": 10
								},
								{
									"begin": 80,
									"end": 895,
									"name": "SWAP5",
									"source": 10
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 80,
									"end": 895,
									"name": "JUMP",
									"source": 10,
									"value": "[out]"
								},
								{
									"begin": 900,
									"end": 1496,
									"name": "tag",
									"source": 10,
									"value": "3"
								},
								{
									"begin": 900,
									"end": 1496,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 900,
									"end": 1496,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 900,
									"end": 1496,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 1060,
									"end": 1062,
									"name": "PUSH",
									"source": 10,
									"value": "40"
								},
								{
									"begin": 1048,
									"end": 1057,
									"name": "DUP4",
									"source": 10
								},
								{
									"begin": 1039,
									"end": 1046,
									"name": "DUP6",
									"source": 10
								},
								{
									"begin": 1035,
									"end": 1058,
									"name": "SUB",
									"source": 10
								},
								{
									"begin": 1031,
									"end": 1063,
									"name": "SLT",
									"source": 10
								},
								{
									"begin": 1028,
									"end": 1030,
									"name": "ISZERO",
									"source": 10
								},
								{
									"begin": 1028,
									"end": 1030,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "36"
								},
								{
									"begin": 1028,
									"end": 1030,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": 1081,
									"end": 1087,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 1073,
									"end": 1079,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 1066,
									"end": 1088,
									"name": "REVERT",
									"source": 10
								},
								{
									"begin": 1028,
									"end": 1030,
									"name": "tag",
									"source": 10,
									"value": "36"
								},
								{
									"begin": 1028,
									"end": 1030,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 1113,
									"end": 1129,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 1113,
									"end": 1129,
									"name": "MLOAD",
									"source": 10
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "40"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 1178,
									"end": 1192,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 1178,
									"end": 1192,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 1178,
									"end": 1192,
									"name": "GT",
									"source": 10
								},
								{
									"begin": 1175,
									"end": 1177,
									"name": "ISZERO",
									"source": 10
								},
								{
									"begin": 1175,
									"end": 1177,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "37"
								},
								{
									"begin": 1175,
									"end": 1177,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": 1210,
									"end": 1216,
									"name": "DUP4",
									"source": 10
								},
								{
									"begin": 1202,
									"end": 1208,
									"name": "DUP5",
									"source": 10
								},
								{
									"begin": 1195,
									"end": 1217,
									"name": "REVERT",
									"source": 10
								},
								{
									"begin": 1175,
									"end": 1177,
									"name": "tag",
									"source": 10,
									"value": "37"
								},
								{
									"begin": 1175,
									"end": 1177,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 1238,
									"end": 1301,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "38"
								},
								{
									"begin": 1293,
									"end": 1300,
									"name": "DUP7",
									"source": 10
								},
								{
									"begin": 1284,
									"end": 1290,
									"name": "DUP4",
									"source": 10
								},
								{
									"begin": 1273,
									"end": 1282,
									"name": "DUP8",
									"source": 10
								},
								{
									"begin": 1269,
									"end": 1291,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 1238,
									"end": 1301,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "22"
								},
								{
									"begin": 1238,
									"end": 1301,
									"name": "JUMP",
									"source": 10,
									"value": "[in]"
								},
								{
									"begin": 1238,
									"end": 1301,
									"name": "tag",
									"source": 10,
									"value": "38"
								},
								{
									"begin": 1238,
									"end": 1301,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 1228,
									"end": 1301,
									"name": "SWAP4",
									"source": 10
								},
								{
									"begin": 1228,
									"end": 1301,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 1347,
									"end": 1349,
									"name": "PUSH",
									"source": 10,
									"value": "20"
								},
								{
									"begin": 1336,
									"end": 1345,
									"name": "DUP6",
									"source": 10
								},
								{
									"begin": 1332,
									"end": 1350,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 1326,
									"end": 1351,
									"name": "MLOAD",
									"source": 10
								},
								{
									"begin": 1310,
									"end": 1351,
									"name": "SWAP2",
									"source": 10
								},
								{
									"begin": 1310,
									"end": 1351,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 1376,
									"end": 1378,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 1366,
									"end": 1374,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 1363,
									"end": 1379,
									"name": "GT",
									"source": 10
								},
								{
									"begin": 1360,
									"end": 1362,
									"name": "ISZERO",
									"source": 10
								},
								{
									"begin": 1360,
									"end": 1362,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "39"
								},
								{
									"begin": 1360,
									"end": 1362,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": 1397,
									"end": 1403,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 1389,
									"end": 1395,
									"name": "DUP4",
									"source": 10
								},
								{
									"begin": 1382,
									"end": 1404,
									"name": "REVERT",
									"source": 10
								},
								{
									"begin": 1360,
									"end": 1362,
									"name": "tag",
									"source": 10,
									"value": "39"
								},
								{
									"begin": 1360,
									"end": 1362,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 1360,
									"end": 1362,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 1425,
									"end": 1490,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "40"
								},
								{
									"begin": 1482,
									"end": 1489,
									"name": "DUP6",
									"source": 10
								},
								{
									"begin": 1471,
									"end": 1479,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 1460,
									"end": 1469,
									"name": "DUP7",
									"source": 10
								},
								{
									"begin": 1456,
									"end": 1480,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 1425,
									"end": 1490,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "22"
								},
								{
									"begin": 1425,
									"end": 1490,
									"name": "JUMP",
									"source": 10,
									"value": "[in]"
								},
								{
									"begin": 1425,
									"end": 1490,
									"name": "tag",
									"source": 10,
									"value": "40"
								},
								{
									"begin": 1425,
									"end": 1490,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 1415,
									"end": 1490,
									"name": "SWAP2",
									"source": 10
								},
								{
									"begin": 1415,
									"end": 1490,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 1415,
									"end": 1490,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 1018,
									"end": 1496,
									"name": "SWAP3",
									"source": 10
								},
								{
									"begin": 1018,
									"end": 1496,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 1018,
									"end": 1496,
									"name": "SWAP3",
									"source": 10
								},
								{
									"begin": 1018,
									"end": 1496,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 1018,
									"end": 1496,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 1018,
									"end": 1496,
									"name": "JUMP",
									"source": 10,
									"value": "[out]"
								},
								{
									"begin": 1501,
									"end": 1881,
									"name": "tag",
									"source": 10,
									"value": "11"
								},
								{
									"begin": 1501,
									"end": 1881,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 1586,
									"end": 1587,
									"name": "PUSH",
									"source": 10,
									"value": "2"
								},
								{
									"begin": 1576,
									"end": 1588,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 1576,
									"end": 1588,
									"name": "DIV",
									"source": 10
								},
								{
									"begin": 1633,
									"end": 1634,
									"name": "PUSH",
									"source": 10,
									"value": "1"
								},
								{
									"begin": 1623,
									"end": 1635,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 1623,
									"end": 1635,
									"name": "AND",
									"source": 10
								},
								{
									"begin": 1623,
									"end": 1635,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 1644,
									"end": 1646,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "42"
								},
								{
									"begin": 1644,
									"end": 1646,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": 1698,
									"end": 1702,
									"name": "PUSH",
									"source": 10,
									"value": "7F"
								},
								{
									"begin": 1690,
									"end": 1696,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 1686,
									"end": 1703,
									"name": "AND",
									"source": 10
								},
								{
									"begin": 1676,
									"end": 1703,
									"name": "SWAP2",
									"source": 10
								},
								{
									"begin": 1676,
									"end": 1703,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 1644,
									"end": 1646,
									"name": "tag",
									"source": 10,
									"value": "42"
								},
								{
									"begin": 1644,
									"end": 1646,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 1751,
									"end": 1753,
									"name": "PUSH",
									"source": 10,
									"value": "20"
								},
								{
									"begin": 1743,
									"end": 1749,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 1740,
									"end": 1754,
									"name": "LT",
									"source": 10
								},
								{
									"begin": 1720,
									"end": 1738,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 1717,
									"end": 1755,
									"name": "EQ",
									"source": 10
								},
								{
									"begin": 1714,
									"end": 1716,
									"name": "ISZERO",
									"source": 10
								},
								{
									"begin": 1714,
									"end": 1716,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "43"
								},
								{
									"begin": 1714,
									"end": 1716,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": 1797,
									"end": 1807,
									"name": "PUSH",
									"source": 10,
									"value": "4E487B71"
								},
								{
									"begin": 1792,
									"end": 1795,
									"name": "PUSH",
									"source": 10,
									"value": "E0"
								},
								{
									"begin": 1788,
									"end": 1808,
									"name": "SHL",
									"source": 10
								},
								{
									"begin": 1785,
									"end": 1786,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 1778,
									"end": 1809,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 1832,
									"end": 1836,
									"name": "PUSH",
									"source": 10,
									"value": "22"
								},
								{
									"begin": 1829,
									"end": 1830,
									"name": "PUSH",
									"source": 10,
									"value": "4"
								},
								{
									"begin": 1822,
									"end": 1837,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 1860,
									"end": 1864,
									"name": "PUSH",
									"source": 10,
									"value": "24"
								},
								{
									"begin": 1857,
									"end": 1858,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 1850,
									"end": 1865,
									"name": "REVERT",
									"source": 10
								},
								{
									"begin": 1714,
									"end": 1716,
									"name": "tag",
									"source": 10,
									"value": "43"
								},
								{
									"begin": 1714,
									"end": 1716,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 1714,
									"end": 1716,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 1556,
									"end": 1881,
									"name": "SWAP2",
									"source": 10
								},
								{
									"begin": 1556,
									"end": 1881,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 1556,
									"end": 1881,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 1556,
									"end": 1881,
									"name": "JUMP",
									"source": 10,
									"value": "[out]"
								},
								{
									"begin": 1886,
									"end": 2013,
									"name": "tag",
									"source": 10,
									"value": "27"
								},
								{
									"begin": 1886,
									"end": 2013,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 1947,
									"end": 1957,
									"name": "PUSH",
									"source": 10,
									"value": "4E487B71"
								},
								{
									"begin": 1942,
									"end": 1945,
									"name": "PUSH",
									"source": 10,
									"value": "E0"
								},
								{
									"begin": 1938,
									"end": 1958,
									"name": "SHL",
									"source": 10
								},
								{
									"begin": 1935,
									"end": 1936,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 1928,
									"end": 1959,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 1978,
									"end": 1982,
									"name": "PUSH",
									"source": 10,
									"value": "41"
								},
								{
									"begin": 1975,
									"end": 1976,
									"name": "PUSH",
									"source": 10,
									"value": "4"
								},
								{
									"begin": 1968,
									"end": 1983,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 2002,
									"end": 2006,
									"name": "PUSH",
									"source": 10,
									"value": "24"
								},
								{
									"begin": 1999,
									"end": 2000,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 1992,
									"end": 2007,
									"name": "REVERT",
									"source": 10
								},
								{
									"begin": 1918,
									"end": 2013,
									"name": "tag",
									"source": 10,
									"value": "21"
								},
								{
									"begin": 1918,
									"end": 2013,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "PUSH #[$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "PUSH [$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "CODECOPY",
									"source": 0
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 1424,
									"end": 12997,
									"name": "RETURN",
									"source": 0
								}
							],
							".data": {
								"0": {
									".auxdata": "a264697066735822122095df7fc9053b5bd679b51b2d78ece433167fbe3882defd903769d2a3f897523f64736f6c63430008000033",
									".code": [
										{
											"begin": 1424,
											"end": 12997,
											"name": "PUSH",
											"source": 0,
											"value": "80"
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "CALLVALUE",
											"source": 0
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "tag",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "CALLDATALOAD",
											"source": 0
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "PUSH",
											"source": 0,
											"value": "E0"
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "SHR",
											"source": 0
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "PUSH",
											"source": 0,
											"value": "39509351"
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "GT",
											"source": 0
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "14"
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "PUSH",
											"source": 0,
											"value": "39509351"
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "8"
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "PUSH",
											"source": 0,
											"value": "70A08231"
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "9"
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "PUSH",
											"source": 0,
											"value": "95D89B41"
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "10"
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "PUSH",
											"source": 0,
											"value": "A457C2D7"
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "11"
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "PUSH",
											"source": 0,
											"value": "A9059CBB"
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "12"
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "PUSH",
											"source": 0,
											"value": "DD62ED3E"
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "13"
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "tag",
											"source": 0,
											"value": "14"
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "PUSH",
											"source": 0,
											"value": "6FDDE03"
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "3"
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "PUSH",
											"source": 0,
											"value": "95EA7B3"
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "PUSH",
											"source": 0,
											"value": "18160DDD"
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "5"
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "PUSH",
											"source": 0,
											"value": "23B872DD"
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "6"
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "PUSH",
											"source": 0,
											"value": "313CE567"
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "7"
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "tag",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1424,
											"end": 12997,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 2204,
											"end": 2304,
											"name": "tag",
											"source": 0,
											"value": "3"
										},
										{
											"begin": 2204,
											"end": 2304,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2204,
											"end": 2304,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "15"
										},
										{
											"begin": 2204,
											"end": 2304,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "16"
										},
										{
											"begin": 2204,
											"end": 2304,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2204,
											"end": 2304,
											"name": "tag",
											"source": 0,
											"value": "15"
										},
										{
											"begin": 2204,
											"end": 2304,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2204,
											"end": 2304,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2204,
											"end": 2304,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2204,
											"end": 2304,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "17"
										},
										{
											"begin": 2204,
											"end": 2304,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2204,
											"end": 2304,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2204,
											"end": 2304,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "18"
										},
										{
											"begin": 2204,
											"end": 2304,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2204,
											"end": 2304,
											"name": "tag",
											"source": 0,
											"value": "17"
										},
										{
											"begin": 2204,
											"end": 2304,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2204,
											"end": 2304,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2204,
											"end": 2304,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2204,
											"end": 2304,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2204,
											"end": 2304,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2204,
											"end": 2304,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 2204,
											"end": 2304,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2204,
											"end": 2304,
											"name": "RETURN",
											"source": 0
										},
										{
											"begin": 4557,
											"end": 4758,
											"name": "tag",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 4557,
											"end": 4758,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4557,
											"end": 4758,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "19"
										},
										{
											"begin": 4557,
											"end": 4758,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 4557,
											"end": 4758,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 4557,
											"end": 4758,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 4557,
											"end": 4758,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "21"
										},
										{
											"begin": 4557,
											"end": 4758,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 4557,
											"end": 4758,
											"name": "tag",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 4557,
											"end": 4758,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4557,
											"end": 4758,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "22"
										},
										{
											"begin": 4557,
											"end": 4758,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 4557,
											"end": 4758,
											"name": "tag",
											"source": 0,
											"value": "19"
										},
										{
											"begin": 4557,
											"end": 4758,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4557,
											"end": 4758,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 4557,
											"end": 4758,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 4557,
											"end": 4758,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "17"
										},
										{
											"begin": 4557,
											"end": 4758,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 4557,
											"end": 4758,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4557,
											"end": 4758,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "24"
										},
										{
											"begin": 4557,
											"end": 4758,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 3326,
											"end": 3434,
											"name": "tag",
											"source": 0,
											"value": "5"
										},
										{
											"begin": 3326,
											"end": 3434,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3326,
											"end": 3434,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "25"
										},
										{
											"begin": 3326,
											"end": 3434,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "26"
										},
										{
											"begin": 3326,
											"end": 3434,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 3326,
											"end": 3434,
											"name": "tag",
											"source": 0,
											"value": "25"
										},
										{
											"begin": 3326,
											"end": 3434,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3326,
											"end": 3434,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 3326,
											"end": 3434,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 3326,
											"end": 3434,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "17"
										},
										{
											"begin": 3326,
											"end": 3434,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 3326,
											"end": 3434,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3326,
											"end": 3434,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "28"
										},
										{
											"begin": 3326,
											"end": 3434,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 5338,
											"end": 5633,
											"name": "tag",
											"source": 0,
											"value": "6"
										},
										{
											"begin": 5338,
											"end": 5633,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5338,
											"end": 5633,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "19"
										},
										{
											"begin": 5338,
											"end": 5633,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "30"
										},
										{
											"begin": 5338,
											"end": 5633,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 5338,
											"end": 5633,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 5338,
											"end": 5633,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "31"
										},
										{
											"begin": 5338,
											"end": 5633,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 5338,
											"end": 5633,
											"name": "tag",
											"source": 0,
											"value": "30"
										},
										{
											"begin": 5338,
											"end": 5633,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5338,
											"end": 5633,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "32"
										},
										{
											"begin": 5338,
											"end": 5633,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 3166,
											"end": 3261,
											"name": "tag",
											"source": 0,
											"value": "7"
										},
										{
											"begin": 3166,
											"end": 3261,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3166,
											"end": 3261,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "25"
										},
										{
											"begin": 3166,
											"end": 3261,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "35"
										},
										{
											"begin": 3166,
											"end": 3261,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 6042,
											"end": 6280,
											"name": "tag",
											"source": 0,
											"value": "8"
										},
										{
											"begin": 6042,
											"end": 6280,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 6042,
											"end": 6280,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "19"
										},
										{
											"begin": 6042,
											"end": 6280,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "38"
										},
										{
											"begin": 6042,
											"end": 6280,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 6042,
											"end": 6280,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 6042,
											"end": 6280,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "21"
										},
										{
											"begin": 6042,
											"end": 6280,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 6042,
											"end": 6280,
											"name": "tag",
											"source": 0,
											"value": "38"
										},
										{
											"begin": 6042,
											"end": 6280,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 6042,
											"end": 6280,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "39"
										},
										{
											"begin": 6042,
											"end": 6280,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 3497,
											"end": 3624,
											"name": "tag",
											"source": 0,
											"value": "9"
										},
										{
											"begin": 3497,
											"end": 3624,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3497,
											"end": 3624,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "25"
										},
										{
											"begin": 3497,
											"end": 3624,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "42"
										},
										{
											"begin": 3497,
											"end": 3624,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 3497,
											"end": 3624,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 3497,
											"end": 3624,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "43"
										},
										{
											"begin": 3497,
											"end": 3624,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 3497,
											"end": 3624,
											"name": "tag",
											"source": 0,
											"value": "42"
										},
										{
											"begin": 3497,
											"end": 3624,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3497,
											"end": 3624,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "44"
										},
										{
											"begin": 3497,
											"end": 3624,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2423,
											"end": 2527,
											"name": "tag",
											"source": 0,
											"value": "10"
										},
										{
											"begin": 2423,
											"end": 2527,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2423,
											"end": 2527,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "15"
										},
										{
											"begin": 2423,
											"end": 2527,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "47"
										},
										{
											"begin": 2423,
											"end": 2527,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 6783,
											"end": 7219,
											"name": "tag",
											"source": 0,
											"value": "11"
										},
										{
											"begin": 6783,
											"end": 7219,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 6783,
											"end": 7219,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "19"
										},
										{
											"begin": 6783,
											"end": 7219,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "50"
										},
										{
											"begin": 6783,
											"end": 7219,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 6783,
											"end": 7219,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 6783,
											"end": 7219,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "21"
										},
										{
											"begin": 6783,
											"end": 7219,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 6783,
											"end": 7219,
											"name": "tag",
											"source": 0,
											"value": "50"
										},
										{
											"begin": 6783,
											"end": 7219,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 6783,
											"end": 7219,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "51"
										},
										{
											"begin": 6783,
											"end": 7219,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 3830,
											"end": 4023,
											"name": "tag",
											"source": 0,
											"value": "12"
										},
										{
											"begin": 3830,
											"end": 4023,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3830,
											"end": 4023,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "19"
										},
										{
											"begin": 3830,
											"end": 4023,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "54"
										},
										{
											"begin": 3830,
											"end": 4023,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 3830,
											"end": 4023,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 3830,
											"end": 4023,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "21"
										},
										{
											"begin": 3830,
											"end": 4023,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 3830,
											"end": 4023,
											"name": "tag",
											"source": 0,
											"value": "54"
										},
										{
											"begin": 3830,
											"end": 4023,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3830,
											"end": 4023,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "55"
										},
										{
											"begin": 3830,
											"end": 4023,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 4086,
											"end": 4237,
											"name": "tag",
											"source": 0,
											"value": "13"
										},
										{
											"begin": 4086,
											"end": 4237,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4086,
											"end": 4237,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "25"
										},
										{
											"begin": 4086,
											"end": 4237,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "58"
										},
										{
											"begin": 4086,
											"end": 4237,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 4086,
											"end": 4237,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 4086,
											"end": 4237,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "59"
										},
										{
											"begin": 4086,
											"end": 4237,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 4086,
											"end": 4237,
											"name": "tag",
											"source": 0,
											"value": "58"
										},
										{
											"begin": 4086,
											"end": 4237,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4086,
											"end": 4237,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "60"
										},
										{
											"begin": 4086,
											"end": 4237,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2204,
											"end": 2304,
											"name": "tag",
											"source": 0,
											"value": "16"
										},
										{
											"begin": 2204,
											"end": 2304,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2258,
											"end": 2271,
											"name": "PUSH",
											"source": 0,
											"value": "60"
										},
										{
											"begin": 2291,
											"end": 2296,
											"name": "PUSH",
											"source": 0,
											"value": "3"
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "63"
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "64"
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "tag",
											"source": 0,
											"value": "63"
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "PUSH",
											"source": 0,
											"value": "1F"
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "65"
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "64"
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "tag",
											"source": 0,
											"value": "65"
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "66"
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "PUSH",
											"source": 0,
											"value": "1F"
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "67"
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "66"
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "tag",
											"source": 0,
											"value": "67"
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "tag",
											"source": 0,
											"value": "68"
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "GT",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "68"
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "PUSH",
											"source": 0,
											"value": "1F"
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "tag",
											"source": 0,
											"value": "66"
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2204,
											"end": 2304,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2204,
											"end": 2304,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 4557,
											"end": 4758,
											"name": "tag",
											"source": 0,
											"value": "22"
										},
										{
											"begin": 4557,
											"end": 4758,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4640,
											"end": 4644,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 4657,
											"end": 4670,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 4673,
											"end": 4685,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "70"
										},
										{
											"begin": 4673,
											"end": 4683,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "71"
										},
										{
											"begin": 4673,
											"end": 4685,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 4673,
											"end": 4685,
											"name": "tag",
											"source": 0,
											"value": "70"
										},
										{
											"begin": 4673,
											"end": 4685,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4657,
											"end": 4685,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4657,
											"end": 4685,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 4696,
											"end": 4728,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "72"
										},
										{
											"begin": 4705,
											"end": 4710,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 4712,
											"end": 4719,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 4721,
											"end": 4727,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 4696,
											"end": 4704,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "73"
										},
										{
											"begin": 4696,
											"end": 4728,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 4696,
											"end": 4728,
											"name": "tag",
											"source": 0,
											"value": "72"
										},
										{
											"begin": 4696,
											"end": 4728,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4746,
											"end": 4750,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 4746,
											"end": 4750,
											"name": "SWAP4",
											"source": 0
										},
										{
											"begin": 4557,
											"end": 4758,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4557,
											"end": 4758,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 3326,
											"end": 3434,
											"name": "tag",
											"source": 0,
											"value": "26"
										},
										{
											"begin": 3326,
											"end": 3434,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3414,
											"end": 3426,
											"name": "PUSH",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 3414,
											"end": 3426,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 3326,
											"end": 3434,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3326,
											"end": 3434,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 5338,
											"end": 5633,
											"name": "tag",
											"source": 0,
											"value": "32"
										},
										{
											"begin": 5338,
											"end": 5633,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5469,
											"end": 5473,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 5486,
											"end": 5501,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 5504,
											"end": 5516,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "76"
										},
										{
											"begin": 5504,
											"end": 5514,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "71"
										},
										{
											"begin": 5504,
											"end": 5516,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 5504,
											"end": 5516,
											"name": "tag",
											"source": 0,
											"value": "76"
										},
										{
											"begin": 5504,
											"end": 5516,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5486,
											"end": 5516,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 5486,
											"end": 5516,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 5527,
											"end": 5565,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "77"
										},
										{
											"begin": 5543,
											"end": 5547,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 5549,
											"end": 5556,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 5558,
											"end": 5564,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 5527,
											"end": 5542,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "78"
										},
										{
											"begin": 5527,
											"end": 5565,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 5527,
											"end": 5565,
											"name": "tag",
											"source": 0,
											"value": "77"
										},
										{
											"begin": 5527,
											"end": 5565,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5576,
											"end": 5603,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "79"
										},
										{
											"begin": 5586,
											"end": 5590,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 5592,
											"end": 5594,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 5596,
											"end": 5602,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 5576,
											"end": 5585,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "80"
										},
										{
											"begin": 5576,
											"end": 5603,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 5576,
											"end": 5603,
											"name": "tag",
											"source": 0,
											"value": "79"
										},
										{
											"begin": 5576,
											"end": 5603,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5621,
											"end": 5625,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 5621,
											"end": 5625,
											"name": "SWAP5",
											"source": 0
										},
										{
											"begin": 5338,
											"end": 5633,
											"name": "SWAP4",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5338,
											"end": 5633,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 3166,
											"end": 3261,
											"name": "tag",
											"source": 0,
											"value": "35"
										},
										{
											"begin": 3166,
											"end": 3261,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3251,
											"end": 3253,
											"name": "PUSH",
											"source": 0,
											"value": "12"
										},
										{
											"begin": 3166,
											"end": 3261,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3166,
											"end": 3261,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 6042,
											"end": 6280,
											"name": "tag",
											"source": 0,
											"value": "39"
										},
										{
											"begin": 6042,
											"end": 6280,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 6130,
											"end": 6134,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 6147,
											"end": 6160,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 6163,
											"end": 6175,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "83"
										},
										{
											"begin": 6163,
											"end": 6173,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "71"
										},
										{
											"begin": 6163,
											"end": 6175,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 6163,
											"end": 6175,
											"name": "tag",
											"source": 0,
											"value": "83"
										},
										{
											"begin": 6163,
											"end": 6175,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 6147,
											"end": 6175,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 6147,
											"end": 6175,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 6186,
											"end": 6250,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "72"
										},
										{
											"begin": 6195,
											"end": 6200,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 6202,
											"end": 6209,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 6239,
											"end": 6249,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 6211,
											"end": 6236,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "85"
										},
										{
											"begin": 6221,
											"end": 6226,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 6228,
											"end": 6235,
											"name": "DUP10",
											"source": 0
										},
										{
											"begin": 6211,
											"end": 6220,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "60"
										},
										{
											"begin": 6211,
											"end": 6236,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 6211,
											"end": 6236,
											"name": "tag",
											"source": 0,
											"value": "85"
										},
										{
											"begin": 6211,
											"end": 6236,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 6211,
											"end": 6249,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "86"
										},
										{
											"begin": 6211,
											"end": 6249,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 6211,
											"end": 6249,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 6211,
											"end": 6249,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "87"
										},
										{
											"begin": 6211,
											"end": 6249,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 6211,
											"end": 6249,
											"name": "tag",
											"source": 0,
											"value": "86"
										},
										{
											"begin": 6211,
											"end": 6249,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 6186,
											"end": 6194,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "73"
										},
										{
											"begin": 6186,
											"end": 6250,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 3497,
											"end": 3624,
											"name": "tag",
											"source": 0,
											"value": "44"
										},
										{
											"begin": 3497,
											"end": 3624,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3598,
											"end": 3616,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 3598,
											"end": 3616,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 3571,
											"end": 3578,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 3598,
											"end": 3616,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3598,
											"end": 3616,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 3598,
											"end": 3616,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 3598,
											"end": 3616,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 3598,
											"end": 3616,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 3598,
											"end": 3616,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3598,
											"end": 3616,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 3598,
											"end": 3616,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 3598,
											"end": 3616,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3598,
											"end": 3616,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 3598,
											"end": 3616,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 3497,
											"end": 3624,
											"name": "tag",
											"source": 0,
											"value": "88"
										},
										{
											"begin": 3497,
											"end": 3624,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3497,
											"end": 3624,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 3497,
											"end": 3624,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3497,
											"end": 3624,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 3497,
											"end": 3624,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 2423,
											"end": 2527,
											"name": "tag",
											"source": 0,
											"value": "47"
										},
										{
											"begin": 2423,
											"end": 2527,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2479,
											"end": 2492,
											"name": "PUSH",
											"source": 0,
											"value": "60"
										},
										{
											"begin": 2512,
											"end": 2519,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 2505,
											"end": 2519,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2505,
											"end": 2519,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 2505,
											"end": 2519,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "63"
										},
										{
											"begin": 2505,
											"end": 2519,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2505,
											"end": 2519,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "64"
										},
										{
											"begin": 2505,
											"end": 2519,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 6783,
											"end": 7219,
											"name": "tag",
											"source": 0,
											"value": "51"
										},
										{
											"begin": 6783,
											"end": 7219,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 6876,
											"end": 6880,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 6893,
											"end": 6906,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 6909,
											"end": 6921,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "96"
										},
										{
											"begin": 6909,
											"end": 6919,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "71"
										},
										{
											"begin": 6909,
											"end": 6921,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 6909,
											"end": 6921,
											"name": "tag",
											"source": 0,
											"value": "96"
										},
										{
											"begin": 6909,
											"end": 6921,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 6893,
											"end": 6921,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 6893,
											"end": 6921,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 6932,
											"end": 6956,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 6959,
											"end": 6984,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "97"
										},
										{
											"begin": 6969,
											"end": 6974,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 6976,
											"end": 6983,
											"name": "DUP7",
											"source": 0
										},
										{
											"begin": 6959,
											"end": 6968,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "60"
										},
										{
											"begin": 6959,
											"end": 6984,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 6959,
											"end": 6984,
											"name": "tag",
											"source": 0,
											"value": "97"
										},
										{
											"begin": 6959,
											"end": 6984,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 6932,
											"end": 6984,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 6932,
											"end": 6984,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 7023,
											"end": 7038,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 7003,
											"end": 7019,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 7003,
											"end": 7038,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 7003,
											"end": 7038,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 6995,
											"end": 7080,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "98"
										},
										{
											"begin": 6995,
											"end": 7080,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 6995,
											"end": 7080,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 6995,
											"end": 7080,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 6995,
											"end": 7080,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 6995,
											"end": 7080,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 6995,
											"end": 7080,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 6995,
											"end": 7080,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 6995,
											"end": 7080,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "99"
										},
										{
											"begin": 6995,
											"end": 7080,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 6995,
											"end": 7080,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 6995,
											"end": 7080,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 6995,
											"end": 7080,
											"name": "tag",
											"source": 0,
											"value": "99"
										},
										{
											"begin": 6995,
											"end": 7080,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 6995,
											"end": 7080,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 6995,
											"end": 7080,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 6995,
											"end": 7080,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 6995,
											"end": 7080,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 6995,
											"end": 7080,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 6995,
											"end": 7080,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 6995,
											"end": 7080,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 6995,
											"end": 7080,
											"name": "tag",
											"source": 0,
											"value": "98"
										},
										{
											"begin": 6995,
											"end": 7080,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 7116,
											"end": 7176,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "79"
										},
										{
											"begin": 7125,
											"end": 7130,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 7132,
											"end": 7139,
											"name": "DUP7",
											"source": 0
										},
										{
											"begin": 7160,
											"end": 7175,
											"name": "DUP7",
											"source": 0
										},
										{
											"begin": 7141,
											"end": 7157,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 7141,
											"end": 7175,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 7116,
											"end": 7124,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "73"
										},
										{
											"begin": 7116,
											"end": 7176,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 3830,
											"end": 4023,
											"name": "tag",
											"source": 0,
											"value": "55"
										},
										{
											"begin": 3830,
											"end": 4023,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3909,
											"end": 3913,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 3926,
											"end": 3939,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 3942,
											"end": 3954,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "103"
										},
										{
											"begin": 3942,
											"end": 3952,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "71"
										},
										{
											"begin": 3942,
											"end": 3954,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 3942,
											"end": 3954,
											"name": "tag",
											"source": 0,
											"value": "103"
										},
										{
											"begin": 3942,
											"end": 3954,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3926,
											"end": 3954,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3926,
											"end": 3954,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 3965,
											"end": 3993,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "72"
										},
										{
											"begin": 3975,
											"end": 3980,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 3982,
											"end": 3984,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 3986,
											"end": 3992,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 3965,
											"end": 3974,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "80"
										},
										{
											"begin": 3965,
											"end": 3993,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 4086,
											"end": 4237,
											"name": "tag",
											"source": 0,
											"value": "60"
										},
										{
											"begin": 4086,
											"end": 4237,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4202,
											"end": 4220,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 4202,
											"end": 4220,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 4202,
											"end": 4220,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 4175,
											"end": 4182,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 4202,
											"end": 4220,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4202,
											"end": 4220,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 4202,
											"end": 4220,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 4202,
											"end": 4213,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 4202,
											"end": 4220,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 4202,
											"end": 4220,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4202,
											"end": 4220,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 4202,
											"end": 4220,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 4202,
											"end": 4220,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 4202,
											"end": 4220,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 4202,
											"end": 4220,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 4202,
											"end": 4220,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 4202,
											"end": 4229,
											"name": "SWAP4",
											"source": 0
										},
										{
											"begin": 4202,
											"end": 4229,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4202,
											"end": 4229,
											"name": "SWAP5",
											"source": 0
										},
										{
											"begin": 4202,
											"end": 4229,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 4202,
											"end": 4229,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 4202,
											"end": 4229,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 4202,
											"end": 4229,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 4202,
											"end": 4229,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4202,
											"end": 4229,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 4202,
											"end": 4229,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 4202,
											"end": 4229,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 4202,
											"end": 4229,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 4202,
											"end": 4229,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4086,
											"end": 4237,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 656,
											"end": 754,
											"name": "tag",
											"source": 4,
											"value": "71"
										},
										{
											"begin": 656,
											"end": 754,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 736,
											"end": 746,
											"name": "CALLER",
											"source": 4
										},
										{
											"begin": 656,
											"end": 754,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 656,
											"end": 754,
											"name": "JUMP",
											"source": 4,
											"value": "[out]"
										},
										{
											"begin": 10417,
											"end": 10797,
											"name": "tag",
											"source": 0,
											"value": "73"
										},
										{
											"begin": 10417,
											"end": 10797,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 10553,
											"end": 10572,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 10553,
											"end": 10572,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 10545,
											"end": 10613,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "108"
										},
										{
											"begin": 10545,
											"end": 10613,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 10545,
											"end": 10613,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 10545,
											"end": 10613,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 10545,
											"end": 10613,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 10545,
											"end": 10613,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 10545,
											"end": 10613,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 10545,
											"end": 10613,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 10545,
											"end": 10613,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "99"
										},
										{
											"begin": 10545,
											"end": 10613,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 10545,
											"end": 10613,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "110"
										},
										{
											"begin": 10545,
											"end": 10613,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 10545,
											"end": 10613,
											"name": "tag",
											"source": 0,
											"value": "108"
										},
										{
											"begin": 10545,
											"end": 10613,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 10632,
											"end": 10653,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 10632,
											"end": 10653,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 10624,
											"end": 10692,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "111"
										},
										{
											"begin": 10624,
											"end": 10692,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 10624,
											"end": 10692,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 10624,
											"end": 10692,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 10624,
											"end": 10692,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 10624,
											"end": 10692,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 10624,
											"end": 10692,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 10624,
											"end": 10692,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 10624,
											"end": 10692,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "99"
										},
										{
											"begin": 10624,
											"end": 10692,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 10624,
											"end": 10692,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "113"
										},
										{
											"begin": 10624,
											"end": 10692,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 10624,
											"end": 10692,
											"name": "tag",
											"source": 0,
											"value": "111"
										},
										{
											"begin": 10624,
											"end": 10692,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 10705,
											"end": 10723,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 10705,
											"end": 10723,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 10705,
											"end": 10723,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 10705,
											"end": 10723,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 10705,
											"end": 10723,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 10705,
											"end": 10723,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 10705,
											"end": 10723,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 10705,
											"end": 10716,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 10705,
											"end": 10723,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 10705,
											"end": 10723,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 10705,
											"end": 10723,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 10705,
											"end": 10723,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 10705,
											"end": 10723,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 10705,
											"end": 10723,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 10705,
											"end": 10723,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 10705,
											"end": 10723,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 10705,
											"end": 10732,
											"name": "SWAP5",
											"source": 0
										},
										{
											"begin": 10705,
											"end": 10732,
											"name": "DUP8",
											"source": 0
										},
										{
											"begin": 10705,
											"end": 10732,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 10705,
											"end": 10732,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 10705,
											"end": 10732,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 10705,
											"end": 10732,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 10705,
											"end": 10732,
											"name": "SWAP5",
											"source": 0
										},
										{
											"begin": 10705,
											"end": 10732,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 10705,
											"end": 10732,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 10705,
											"end": 10732,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 10705,
											"end": 10732,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 10705,
											"end": 10732,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 10705,
											"end": 10732,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 10705,
											"end": 10732,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 10705,
											"end": 10741,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 10705,
											"end": 10741,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 10705,
											"end": 10741,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 10757,
											"end": 10789,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 10757,
											"end": 10789,
											"name": "PUSH",
											"source": 0,
											"value": "8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925"
										},
										{
											"begin": 10757,
											"end": 10789,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 10757,
											"end": 10789,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "114"
										},
										{
											"begin": 10757,
											"end": 10789,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 10735,
											"end": 10741,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 10735,
											"end": 10741,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 10757,
											"end": 10789,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "28"
										},
										{
											"begin": 10757,
											"end": 10789,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 10757,
											"end": 10789,
											"name": "tag",
											"source": 0,
											"value": "114"
										},
										{
											"begin": 10757,
											"end": 10789,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 10757,
											"end": 10789,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 10757,
											"end": 10789,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 10757,
											"end": 10789,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 10757,
											"end": 10789,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 10757,
											"end": 10789,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 10757,
											"end": 10789,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 10757,
											"end": 10789,
											"name": "LOG3",
											"source": 0
										},
										{
											"begin": 10417,
											"end": 10797,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 10417,
											"end": 10797,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 10417,
											"end": 10797,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 10417,
											"end": 10797,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 11088,
											"end": 11541,
											"name": "tag",
											"source": 0,
											"value": "78"
										},
										{
											"begin": 11088,
											"end": 11541,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 11223,
											"end": 11247,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 11250,
											"end": 11275,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "116"
										},
										{
											"begin": 11260,
											"end": 11265,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 11267,
											"end": 11274,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 11250,
											"end": 11259,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "60"
										},
										{
											"begin": 11250,
											"end": 11275,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 11250,
											"end": 11275,
											"name": "tag",
											"source": 0,
											"value": "116"
										},
										{
											"begin": 11250,
											"end": 11275,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 11223,
											"end": 11275,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 11223,
											"end": 11275,
											"name": "POP",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 11290,
											"end": 11306,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 11290,
											"end": 11327,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 11286,
											"end": 11534,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "121"
										},
										{
											"begin": 11286,
											"end": 11534,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 11372,
											"end": 11378,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 11352,
											"end": 11368,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 11352,
											"end": 11378,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 11352,
											"end": 11378,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 11344,
											"end": 11412,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "118"
										},
										{
											"begin": 11344,
											"end": 11412,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 11344,
											"end": 11412,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 11344,
											"end": 11412,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 11344,
											"end": 11412,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 11344,
											"end": 11412,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 11344,
											"end": 11412,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 11344,
											"end": 11412,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 11344,
											"end": 11412,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "99"
										},
										{
											"begin": 11344,
											"end": 11412,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 11344,
											"end": 11412,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "120"
										},
										{
											"begin": 11344,
											"end": 11412,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 11344,
											"end": 11412,
											"name": "tag",
											"source": 0,
											"value": "118"
										},
										{
											"begin": 11344,
											"end": 11412,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 11456,
											"end": 11507,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "121"
										},
										{
											"begin": 11465,
											"end": 11470,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 11472,
											"end": 11479,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 11500,
											"end": 11506,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 11481,
											"end": 11497,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 11481,
											"end": 11506,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 11456,
											"end": 11464,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "73"
										},
										{
											"begin": 11456,
											"end": 11507,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 11456,
											"end": 11507,
											"name": "tag",
											"source": 0,
											"value": "121"
										},
										{
											"begin": 11456,
											"end": 11507,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 11088,
											"end": 11541,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 11088,
											"end": 11541,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 11088,
											"end": 11541,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 11088,
											"end": 11541,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 11088,
											"end": 11541,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 7698,
											"end": 8369,
											"name": "tag",
											"source": 0,
											"value": "80"
										},
										{
											"begin": 7698,
											"end": 8369,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7829,
											"end": 7847,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 7829,
											"end": 7847,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 7821,
											"end": 7889,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "123"
										},
										{
											"begin": 7821,
											"end": 7889,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 7821,
											"end": 7889,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 7821,
											"end": 7889,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7821,
											"end": 7889,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 7821,
											"end": 7889,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 7821,
											"end": 7889,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 7821,
											"end": 7889,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 7821,
											"end": 7889,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "99"
										},
										{
											"begin": 7821,
											"end": 7889,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 7821,
											"end": 7889,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "125"
										},
										{
											"begin": 7821,
											"end": 7889,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 7821,
											"end": 7889,
											"name": "tag",
											"source": 0,
											"value": "123"
										},
										{
											"begin": 7821,
											"end": 7889,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7908,
											"end": 7924,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 7908,
											"end": 7924,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 7900,
											"end": 7964,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "126"
										},
										{
											"begin": 7900,
											"end": 7964,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 7900,
											"end": 7964,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 7900,
											"end": 7964,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7900,
											"end": 7964,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 7900,
											"end": 7964,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 7900,
											"end": 7964,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 7900,
											"end": 7964,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 7900,
											"end": 7964,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "99"
										},
										{
											"begin": 7900,
											"end": 7964,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 7900,
											"end": 7964,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "128"
										},
										{
											"begin": 7900,
											"end": 7964,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 7900,
											"end": 7964,
											"name": "tag",
											"source": 0,
											"value": "126"
										},
										{
											"begin": 7900,
											"end": 7964,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 7977,
											"end": 8015,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "129"
										},
										{
											"begin": 7998,
											"end": 8002,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 8004,
											"end": 8006,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 8008,
											"end": 8014,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 7977,
											"end": 7997,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "130"
										},
										{
											"begin": 7977,
											"end": 8015,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 7977,
											"end": 8015,
											"name": "tag",
											"source": 0,
											"value": "129"
										},
										{
											"begin": 7977,
											"end": 8015,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8050,
											"end": 8065,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 8050,
											"end": 8065,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 8028,
											"end": 8047,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 8050,
											"end": 8065,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 8050,
											"end": 8065,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 8050,
											"end": 8065,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 8050,
											"end": 8065,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 8050,
											"end": 8065,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 8050,
											"end": 8065,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 8050,
											"end": 8065,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 8050,
											"end": 8065,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 8050,
											"end": 8065,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 8050,
											"end": 8065,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 8050,
											"end": 8065,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 8084,
											"end": 8105,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 8084,
											"end": 8105,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 8084,
											"end": 8105,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 8084,
											"end": 8105,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 8076,
											"end": 8148,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "131"
										},
										{
											"begin": 8076,
											"end": 8148,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 8076,
											"end": 8148,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 8076,
											"end": 8148,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 8076,
											"end": 8148,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 8076,
											"end": 8148,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 8076,
											"end": 8148,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 8076,
											"end": 8148,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 8076,
											"end": 8148,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "99"
										},
										{
											"begin": 8076,
											"end": 8148,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 8076,
											"end": 8148,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "133"
										},
										{
											"begin": 8076,
											"end": 8148,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 8076,
											"end": 8148,
											"name": "tag",
											"source": 0,
											"value": "131"
										},
										{
											"begin": 8076,
											"end": 8148,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8184,
											"end": 8199,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 8184,
											"end": 8199,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 8184,
											"end": 8199,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 8184,
											"end": 8193,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 8184,
											"end": 8199,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 8184,
											"end": 8199,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 8184,
											"end": 8199,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 8184,
											"end": 8199,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 8184,
											"end": 8199,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 8184,
											"end": 8199,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 8184,
											"end": 8199,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 8184,
											"end": 8199,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 8184,
											"end": 8199,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 8184,
											"end": 8199,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 8184,
											"end": 8199,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 8202,
											"end": 8222,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 8202,
											"end": 8222,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 8202,
											"end": 8222,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 8184,
											"end": 8222,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 8184,
											"end": 8222,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 8244,
											"end": 8257,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 8244,
											"end": 8257,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 8244,
											"end": 8257,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 8244,
											"end": 8257,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 8244,
											"end": 8257,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 8244,
											"end": 8257,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 8244,
											"end": 8257,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 8244,
											"end": 8257,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 8244,
											"end": 8267,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 8244,
											"end": 8267,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 8216,
											"end": 8222,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 8216,
											"end": 8222,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 8184,
											"end": 8193,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 8244,
											"end": 8267,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "134"
										},
										{
											"begin": 8244,
											"end": 8267,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 8216,
											"end": 8222,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 8216,
											"end": 8222,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 8244,
											"end": 8267,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "87"
										},
										{
											"begin": 8244,
											"end": 8267,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 8244,
											"end": 8267,
											"name": "tag",
											"source": 0,
											"value": "134"
										},
										{
											"begin": 8244,
											"end": 8267,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 8244,
											"end": 8267,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 8244,
											"end": 8267,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 8244,
											"end": 8267,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 8244,
											"end": 8267,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 8244,
											"end": 8267,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 8244,
											"end": 8267,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 8244,
											"end": 8267,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 8300,
											"end": 8302,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8285,
											"end": 8311,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 8294,
											"end": 8298,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8285,
											"end": 8311,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 8285,
											"end": 8311,
											"name": "PUSH",
											"source": 0,
											"value": "DDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF"
										},
										{
											"begin": 8304,
											"end": 8310,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 8285,
											"end": 8311,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 8285,
											"end": 8311,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 8285,
											"end": 8311,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "135"
										},
										{
											"begin": 8285,
											"end": 8311,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 8285,
											"end": 8311,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 8285,
											"end": 8311,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "28"
										},
										{
											"begin": 8285,
											"end": 8311,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 8285,
											"end": 8311,
											"name": "tag",
											"source": 0,
											"value": "135"
										},
										{
											"begin": 8285,
											"end": 8311,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 8285,
											"end": 8311,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 8285,
											"end": 8311,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 8285,
											"end": 8311,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 8285,
											"end": 8311,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 8285,
											"end": 8311,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 8285,
											"end": 8311,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 8285,
											"end": 8311,
											"name": "LOG3",
											"source": 0
										},
										{
											"begin": 8324,
											"end": 8361,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "121"
										},
										{
											"begin": 8344,
											"end": 8348,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 8350,
											"end": 8352,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 8354,
											"end": 8360,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 12141,
											"end": 12266,
											"name": "tag",
											"source": 0,
											"value": "130"
										},
										{
											"begin": 12141,
											"end": 12266,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 12141,
											"end": 12266,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 12141,
											"end": 12266,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 12141,
											"end": 12266,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 12141,
											"end": 12266,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 14,
											"end": 189,
											"name": "tag",
											"source": 10,
											"value": "141"
										},
										{
											"begin": 14,
											"end": 189,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 84,
											"end": 104,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 84,
											"end": 104,
											"name": "CALLDATALOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 133,
											"end": 164,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 133,
											"end": 164,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 123,
											"end": 165,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 123,
											"end": 165,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 113,
											"end": 115,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "88"
										},
										{
											"begin": 113,
											"end": 115,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 179,
											"end": 180,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 176,
											"end": 177,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 169,
											"end": 181,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 194,
											"end": 392,
											"name": "tag",
											"source": 10,
											"value": "43"
										},
										{
											"begin": 194,
											"end": 392,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 194,
											"end": 392,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 306,
											"end": 308,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 294,
											"end": 303,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 285,
											"end": 292,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 281,
											"end": 304,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 277,
											"end": 309,
											"name": "SLT",
											"source": 10
										},
										{
											"begin": 274,
											"end": 276,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 274,
											"end": 276,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "145"
										},
										{
											"begin": 274,
											"end": 276,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 327,
											"end": 333,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 319,
											"end": 325,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 312,
											"end": 334,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 274,
											"end": 276,
											"name": "tag",
											"source": 10,
											"value": "145"
										},
										{
											"begin": 274,
											"end": 276,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 355,
											"end": 386,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "146"
										},
										{
											"begin": 376,
											"end": 385,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 355,
											"end": 386,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "141"
										},
										{
											"begin": 355,
											"end": 386,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 355,
											"end": 386,
											"name": "tag",
											"source": 10,
											"value": "146"
										},
										{
											"begin": 355,
											"end": 386,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 345,
											"end": 386,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 264,
											"end": 392,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 264,
											"end": 392,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 397,
											"end": 671,
											"name": "tag",
											"source": 10,
											"value": "59"
										},
										{
											"begin": 397,
											"end": 671,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 397,
											"end": 671,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 397,
											"end": 671,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 526,
											"end": 528,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 514,
											"end": 523,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 505,
											"end": 512,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 501,
											"end": 524,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 497,
											"end": 529,
											"name": "SLT",
											"source": 10
										},
										{
											"begin": 494,
											"end": 496,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 494,
											"end": 496,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "148"
										},
										{
											"begin": 494,
											"end": 496,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 547,
											"end": 553,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 539,
											"end": 545,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 532,
											"end": 554,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 494,
											"end": 496,
											"name": "tag",
											"source": 10,
											"value": "148"
										},
										{
											"begin": 494,
											"end": 496,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 575,
											"end": 606,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "149"
										},
										{
											"begin": 596,
											"end": 605,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 575,
											"end": 606,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "141"
										},
										{
											"begin": 575,
											"end": 606,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 575,
											"end": 606,
											"name": "tag",
											"source": 10,
											"value": "149"
										},
										{
											"begin": 575,
											"end": 606,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 565,
											"end": 606,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 565,
											"end": 606,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 625,
											"end": 665,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "150"
										},
										{
											"begin": 661,
											"end": 663,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 650,
											"end": 659,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 646,
											"end": 664,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 625,
											"end": 665,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "141"
										},
										{
											"begin": 625,
											"end": 665,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 625,
											"end": 665,
											"name": "tag",
											"source": 10,
											"value": "150"
										},
										{
											"begin": 625,
											"end": 665,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 615,
											"end": 665,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 615,
											"end": 665,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 484,
											"end": 671,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 484,
											"end": 671,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 484,
											"end": 671,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 484,
											"end": 671,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 484,
											"end": 671,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 484,
											"end": 671,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 676,
											"end": 1018,
											"name": "tag",
											"source": 10,
											"value": "31"
										},
										{
											"begin": 676,
											"end": 1018,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 676,
											"end": 1018,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 676,
											"end": 1018,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 676,
											"end": 1018,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 822,
											"end": 824,
											"name": "PUSH",
											"source": 10,
											"value": "60"
										},
										{
											"begin": 810,
											"end": 819,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 801,
											"end": 808,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 797,
											"end": 820,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 793,
											"end": 825,
											"name": "SLT",
											"source": 10
										},
										{
											"begin": 790,
											"end": 792,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 790,
											"end": 792,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "152"
										},
										{
											"begin": 790,
											"end": 792,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 843,
											"end": 849,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 835,
											"end": 841,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 828,
											"end": 850,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 790,
											"end": 792,
											"name": "tag",
											"source": 10,
											"value": "152"
										},
										{
											"begin": 790,
											"end": 792,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 871,
											"end": 902,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "153"
										},
										{
											"begin": 892,
											"end": 901,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 871,
											"end": 902,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "141"
										},
										{
											"begin": 871,
											"end": 902,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 871,
											"end": 902,
											"name": "tag",
											"source": 10,
											"value": "153"
										},
										{
											"begin": 871,
											"end": 902,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 861,
											"end": 902,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 861,
											"end": 902,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 921,
											"end": 961,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "154"
										},
										{
											"begin": 957,
											"end": 959,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 946,
											"end": 955,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 942,
											"end": 960,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 921,
											"end": 961,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "141"
										},
										{
											"begin": 921,
											"end": 961,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 921,
											"end": 961,
											"name": "tag",
											"source": 10,
											"value": "154"
										},
										{
											"begin": 921,
											"end": 961,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 911,
											"end": 961,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 911,
											"end": 961,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1008,
											"end": 1010,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 997,
											"end": 1006,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 993,
											"end": 1011,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 980,
											"end": 1012,
											"name": "CALLDATALOAD",
											"source": 10
										},
										{
											"begin": 970,
											"end": 1012,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 970,
											"end": 1012,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 780,
											"end": 1018,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 780,
											"end": 1018,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 780,
											"end": 1018,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 780,
											"end": 1018,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 780,
											"end": 1018,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 780,
											"end": 1018,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 1023,
											"end": 1289,
											"name": "tag",
											"source": 10,
											"value": "21"
										},
										{
											"begin": 1023,
											"end": 1289,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1023,
											"end": 1289,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1023,
											"end": 1289,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1152,
											"end": 1154,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 1140,
											"end": 1149,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 1131,
											"end": 1138,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 1127,
											"end": 1150,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 1123,
											"end": 1155,
											"name": "SLT",
											"source": 10
										},
										{
											"begin": 1120,
											"end": 1122,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 1120,
											"end": 1122,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "156"
										},
										{
											"begin": 1120,
											"end": 1122,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 1173,
											"end": 1179,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1165,
											"end": 1171,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 1158,
											"end": 1180,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 1120,
											"end": 1122,
											"name": "tag",
											"source": 10,
											"value": "156"
										},
										{
											"begin": 1120,
											"end": 1122,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1201,
											"end": 1232,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "157"
										},
										{
											"begin": 1222,
											"end": 1231,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 1201,
											"end": 1232,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "141"
										},
										{
											"begin": 1201,
											"end": 1232,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 1201,
											"end": 1232,
											"name": "tag",
											"source": 10,
											"value": "157"
										},
										{
											"begin": 1201,
											"end": 1232,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1191,
											"end": 1232,
											"name": "SWAP5",
											"source": 10
										},
										{
											"begin": 1279,
											"end": 1281,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 1264,
											"end": 1282,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 1264,
											"end": 1282,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1264,
											"end": 1282,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 1264,
											"end": 1282,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1251,
											"end": 1283,
											"name": "CALLDATALOAD",
											"source": 10
										},
										{
											"begin": 1251,
											"end": 1283,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1110,
											"end": 1289,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 1294,
											"end": 1481,
											"name": "tag",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 1294,
											"end": 1481,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1459,
											"end": 1473,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1459,
											"end": 1473,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 1452,
											"end": 1474,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 1434,
											"end": 1475,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1434,
											"end": 1475,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 1422,
											"end": 1424,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 1407,
											"end": 1425,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1407,
											"end": 1425,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1389,
											"end": 1481,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 1486,
											"end": 2089,
											"name": "tag",
											"source": 10,
											"value": "18"
										},
										{
											"begin": 1486,
											"end": 2089,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1486,
											"end": 2089,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1627,
											"end": 1629,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 1656,
											"end": 1658,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1645,
											"end": 1654,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 1638,
											"end": 1659,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 1688,
											"end": 1694,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 1682,
											"end": 1695,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 1731,
											"end": 1737,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1726,
											"end": 1728,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 1715,
											"end": 1724,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 1711,
											"end": 1729,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1704,
											"end": 1738,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 1756,
											"end": 1760,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 1769,
											"end": 1909,
											"name": "tag",
											"source": 10,
											"value": "160"
										},
										{
											"begin": 1769,
											"end": 1909,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1783,
											"end": 1789,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1780,
											"end": 1781,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1777,
											"end": 1790,
											"name": "LT",
											"source": 10
										},
										{
											"begin": 1769,
											"end": 1909,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 1769,
											"end": 1909,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "162"
										},
										{
											"begin": 1769,
											"end": 1909,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 1878,
											"end": 1892,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 1878,
											"end": 1892,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1878,
											"end": 1892,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1874,
											"end": 1897,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 1874,
											"end": 1897,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1868,
											"end": 1898,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 1844,
											"end": 1861,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 1844,
											"end": 1861,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 1844,
											"end": 1861,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1863,
											"end": 1865,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 1840,
											"end": 1866,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1833,
											"end": 1899,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 1798,
											"end": 1808,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 1798,
											"end": 1808,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1769,
											"end": 1909,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "160"
										},
										{
											"begin": 1769,
											"end": 1909,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 1769,
											"end": 1909,
											"name": "tag",
											"source": 10,
											"value": "162"
										},
										{
											"begin": 1769,
											"end": 1909,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1927,
											"end": 1933,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1924,
											"end": 1925,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1921,
											"end": 1934,
											"name": "GT",
											"source": 10
										},
										{
											"begin": 1918,
											"end": 1920,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 1918,
											"end": 1920,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "163"
										},
										{
											"begin": 1918,
											"end": 1920,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 1997,
											"end": 2001,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 1992,
											"end": 1994,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 1983,
											"end": 1989,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 1972,
											"end": 1981,
											"name": "DUP8",
											"source": 10
										},
										{
											"begin": 1968,
											"end": 1990,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1964,
											"end": 1995,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1957,
											"end": 2002,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 1918,
											"end": 1920,
											"name": "tag",
											"source": 10,
											"value": "163"
										},
										{
											"begin": 1918,
											"end": 1920,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2073,
											"end": 2075,
											"name": "PUSH",
											"source": 10,
											"value": "1F"
										},
										{
											"begin": 2052,
											"end": 2067,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 2048,
											"end": 2077,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 2033,
											"end": 2078,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 2033,
											"end": 2078,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 2033,
											"end": 2078,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 2033,
											"end": 2078,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 2080,
											"end": 2082,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 2029,
											"end": 2083,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 2029,
											"end": 2083,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 1607,
											"end": 2089,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1607,
											"end": 2089,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 2094,
											"end": 2493,
											"name": "tag",
											"source": 10,
											"value": "128"
										},
										{
											"begin": 2094,
											"end": 2493,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2296,
											"end": 2298,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 2278,
											"end": 2299,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 2278,
											"end": 2299,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 2278,
											"end": 2299,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 2335,
											"end": 2337,
											"name": "PUSH",
											"source": 10,
											"value": "23"
										},
										{
											"begin": 2315,
											"end": 2333,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 2315,
											"end": 2333,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 2315,
											"end": 2333,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 2308,
											"end": 2338,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 2374,
											"end": 2408,
											"name": "PUSH",
											"source": 10,
											"value": "45524332303A207472616E7366657220746F20746865207A65726F2061646472"
										},
										{
											"begin": 2369,
											"end": 2371,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 2354,
											"end": 2372,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 2354,
											"end": 2372,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 2347,
											"end": 2409,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "657373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2440,
											"end": 2442,
											"name": "PUSH",
											"source": 10,
											"value": "60"
										},
										{
											"begin": 2425,
											"end": 2443,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 2425,
											"end": 2443,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 2418,
											"end": 2451,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 2483,
											"end": 2486,
											"name": "PUSH",
											"source": 10,
											"value": "80"
										},
										{
											"begin": 2468,
											"end": 2487,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 2468,
											"end": 2487,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 2268,
											"end": 2493,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 2498,
											"end": 2896,
											"name": "tag",
											"source": 10,
											"value": "113"
										},
										{
											"begin": 2498,
											"end": 2896,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2700,
											"end": 2702,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 2682,
											"end": 2703,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 2682,
											"end": 2703,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 2682,
											"end": 2703,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 2739,
											"end": 2741,
											"name": "PUSH",
											"source": 10,
											"value": "22"
										},
										{
											"begin": 2719,
											"end": 2737,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 2719,
											"end": 2737,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 2719,
											"end": 2737,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 2712,
											"end": 2742,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 2778,
											"end": 2812,
											"name": "PUSH",
											"source": 10,
											"value": "45524332303A20617070726F766520746F20746865207A65726F206164647265"
										},
										{
											"begin": 2773,
											"end": 2775,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 2758,
											"end": 2776,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 2758,
											"end": 2776,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 2751,
											"end": 2813,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "7373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "F0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2844,
											"end": 2846,
											"name": "PUSH",
											"source": 10,
											"value": "60"
										},
										{
											"begin": 2829,
											"end": 2847,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 2829,
											"end": 2847,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 2822,
											"end": 2854,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 2886,
											"end": 2889,
											"name": "PUSH",
											"source": 10,
											"value": "80"
										},
										{
											"begin": 2871,
											"end": 2890,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 2871,
											"end": 2890,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 2672,
											"end": 2896,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 2901,
											"end": 3254,
											"name": "tag",
											"source": 10,
											"value": "120"
										},
										{
											"begin": 2901,
											"end": 3254,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3103,
											"end": 3105,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 3085,
											"end": 3106,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 3085,
											"end": 3106,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 3085,
											"end": 3106,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 3142,
											"end": 3144,
											"name": "PUSH",
											"source": 10,
											"value": "1D"
										},
										{
											"begin": 3122,
											"end": 3140,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 3122,
											"end": 3140,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 3122,
											"end": 3140,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 3115,
											"end": 3145,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 3181,
											"end": 3212,
											"name": "PUSH",
											"source": 10,
											"value": "45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000"
										},
										{
											"begin": 3176,
											"end": 3178,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 3161,
											"end": 3179,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 3161,
											"end": 3179,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 3154,
											"end": 3213,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 3245,
											"end": 3247,
											"name": "PUSH",
											"source": 10,
											"value": "60"
										},
										{
											"begin": 3230,
											"end": 3248,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 3230,
											"end": 3248,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 3075,
											"end": 3254,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 3259,
											"end": 3661,
											"name": "tag",
											"source": 10,
											"value": "133"
										},
										{
											"begin": 3259,
											"end": 3661,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3461,
											"end": 3463,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 3443,
											"end": 3464,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 3443,
											"end": 3464,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 3443,
											"end": 3464,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 3500,
											"end": 3502,
											"name": "PUSH",
											"source": 10,
											"value": "26"
										},
										{
											"begin": 3480,
											"end": 3498,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 3480,
											"end": 3498,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 3480,
											"end": 3498,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 3473,
											"end": 3503,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 3539,
											"end": 3573,
											"name": "PUSH",
											"source": 10,
											"value": "45524332303A207472616E7366657220616D6F756E7420657863656564732062"
										},
										{
											"begin": 3534,
											"end": 3536,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 3519,
											"end": 3537,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 3519,
											"end": 3537,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 3512,
											"end": 3574,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "616C616E6365"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3605,
											"end": 3607,
											"name": "PUSH",
											"source": 10,
											"value": "60"
										},
										{
											"begin": 3590,
											"end": 3608,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 3590,
											"end": 3608,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 3583,
											"end": 3619,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 3651,
											"end": 3654,
											"name": "PUSH",
											"source": 10,
											"value": "80"
										},
										{
											"begin": 3636,
											"end": 3655,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 3636,
											"end": 3655,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 3433,
											"end": 3661,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 3666,
											"end": 4067,
											"name": "tag",
											"source": 10,
											"value": "125"
										},
										{
											"begin": 3666,
											"end": 4067,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3868,
											"end": 3870,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 3850,
											"end": 3871,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 3850,
											"end": 3871,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 3850,
											"end": 3871,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 3907,
											"end": 3909,
											"name": "PUSH",
											"source": 10,
											"value": "25"
										},
										{
											"begin": 3887,
											"end": 3905,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 3887,
											"end": 3905,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 3887,
											"end": 3905,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 3880,
											"end": 3910,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 3946,
											"end": 3980,
											"name": "PUSH",
											"source": 10,
											"value": "45524332303A207472616E736665722066726F6D20746865207A65726F206164"
										},
										{
											"begin": 3941,
											"end": 3943,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 3926,
											"end": 3944,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 3926,
											"end": 3944,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 3919,
											"end": 3981,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "6472657373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4012,
											"end": 4014,
											"name": "PUSH",
											"source": 10,
											"value": "60"
										},
										{
											"begin": 3997,
											"end": 4015,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 3997,
											"end": 4015,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 3990,
											"end": 4025,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 4057,
											"end": 4060,
											"name": "PUSH",
											"source": 10,
											"value": "80"
										},
										{
											"begin": 4042,
											"end": 4061,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 4042,
											"end": 4061,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 3840,
											"end": 4067,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 4072,
											"end": 4472,
											"name": "tag",
											"source": 10,
											"value": "110"
										},
										{
											"begin": 4072,
											"end": 4472,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 4274,
											"end": 4276,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 4256,
											"end": 4277,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 4256,
											"end": 4277,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 4256,
											"end": 4277,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 4313,
											"end": 4315,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 4293,
											"end": 4311,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 4293,
											"end": 4311,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 4293,
											"end": 4311,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 4286,
											"end": 4316,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 4352,
											"end": 4386,
											"name": "PUSH",
											"source": 10,
											"value": "45524332303A20617070726F76652066726F6D20746865207A65726F20616464"
										},
										{
											"begin": 4347,
											"end": 4349,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 4332,
											"end": 4350,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 4332,
											"end": 4350,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 4325,
											"end": 4387,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "72657373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4418,
											"end": 4420,
											"name": "PUSH",
											"source": 10,
											"value": "60"
										},
										{
											"begin": 4403,
											"end": 4421,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 4403,
											"end": 4421,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 4396,
											"end": 4430,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 4462,
											"end": 4465,
											"name": "PUSH",
											"source": 10,
											"value": "80"
										},
										{
											"begin": 4447,
											"end": 4466,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 4447,
											"end": 4466,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 4246,
											"end": 4472,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 4477,
											"end": 4878,
											"name": "tag",
											"source": 10,
											"value": "100"
										},
										{
											"begin": 4477,
											"end": 4878,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 4679,
											"end": 4681,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 4661,
											"end": 4682,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 4661,
											"end": 4682,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 4661,
											"end": 4682,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 4718,
											"end": 4720,
											"name": "PUSH",
											"source": 10,
											"value": "25"
										},
										{
											"begin": 4698,
											"end": 4716,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 4698,
											"end": 4716,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 4698,
											"end": 4716,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 4691,
											"end": 4721,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 4757,
											"end": 4791,
											"name": "PUSH",
											"source": 10,
											"value": "45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77"
										},
										{
											"begin": 4752,
											"end": 4754,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 4737,
											"end": 4755,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 4737,
											"end": 4755,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 4730,
											"end": 4792,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "207A65726F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4823,
											"end": 4825,
											"name": "PUSH",
											"source": 10,
											"value": "60"
										},
										{
											"begin": 4808,
											"end": 4826,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 4808,
											"end": 4826,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 4801,
											"end": 4836,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 4868,
											"end": 4871,
											"name": "PUSH",
											"source": 10,
											"value": "80"
										},
										{
											"begin": 4853,
											"end": 4872,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 4853,
											"end": 4872,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 4651,
											"end": 4878,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 4883,
											"end": 5060,
											"name": "tag",
											"source": 10,
											"value": "28"
										},
										{
											"begin": 4883,
											"end": 5060,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 5029,
											"end": 5054,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 5029,
											"end": 5054,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 5029,
											"end": 5054,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 5017,
											"end": 5019,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 5002,
											"end": 5020,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 5002,
											"end": 5020,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 4984,
											"end": 5060,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 5065,
											"end": 5294,
											"name": "tag",
											"source": 10,
											"value": "87"
										},
										{
											"begin": 5065,
											"end": 5294,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 5065,
											"end": 5294,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 5136,
											"end": 5137,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 5132,
											"end": 5138,
											"name": "NOT",
											"source": 10
										},
										{
											"begin": 5129,
											"end": 5130,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 5126,
											"end": 5139,
											"name": "GT",
											"source": 10
										},
										{
											"begin": 5123,
											"end": 5125,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 5123,
											"end": 5125,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "173"
										},
										{
											"begin": 5123,
											"end": 5125,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "4E487B71"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5162,
											"end": 5195,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 5162,
											"end": 5195,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 5218,
											"end": 5222,
											"name": "PUSH",
											"source": 10,
											"value": "11"
										},
										{
											"begin": 5215,
											"end": 5216,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 5208,
											"end": 5223,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 5248,
											"end": 5252,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 5169,
											"end": 5172,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 5236,
											"end": 5253,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 5123,
											"end": 5125,
											"name": "tag",
											"source": 10,
											"value": "173"
										},
										{
											"begin": 5123,
											"end": 5125,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5279,
											"end": 5288,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 5279,
											"end": 5288,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 5113,
											"end": 5294,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 5299,
											"end": 5679,
											"name": "tag",
											"source": 10,
											"value": "64"
										},
										{
											"begin": 5299,
											"end": 5679,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 5384,
											"end": 5385,
											"name": "PUSH",
											"source": 10,
											"value": "2"
										},
										{
											"begin": 5374,
											"end": 5386,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 5374,
											"end": 5386,
											"name": "DIV",
											"source": 10
										},
										{
											"begin": 5431,
											"end": 5432,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 5421,
											"end": 5433,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 5421,
											"end": 5433,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 5421,
											"end": 5433,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 5442,
											"end": 5444,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "175"
										},
										{
											"begin": 5442,
											"end": 5444,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 5496,
											"end": 5500,
											"name": "PUSH",
											"source": 10,
											"value": "7F"
										},
										{
											"begin": 5488,
											"end": 5494,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 5484,
											"end": 5501,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 5474,
											"end": 5501,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 5474,
											"end": 5501,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 5442,
											"end": 5444,
											"name": "tag",
											"source": 10,
											"value": "175"
										},
										{
											"begin": 5442,
											"end": 5444,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 5549,
											"end": 5551,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 5541,
											"end": 5547,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 5538,
											"end": 5552,
											"name": "LT",
											"source": 10
										},
										{
											"begin": 5518,
											"end": 5536,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 5515,
											"end": 5553,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 5512,
											"end": 5514,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 5512,
											"end": 5514,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "176"
										},
										{
											"begin": 5512,
											"end": 5514,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 5595,
											"end": 5605,
											"name": "PUSH",
											"source": 10,
											"value": "4E487B71"
										},
										{
											"begin": 5590,
											"end": 5593,
											"name": "PUSH",
											"source": 10,
											"value": "E0"
										},
										{
											"begin": 5586,
											"end": 5606,
											"name": "SHL",
											"source": 10
										},
										{
											"begin": 5583,
											"end": 5584,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 5576,
											"end": 5607,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 5630,
											"end": 5634,
											"name": "PUSH",
											"source": 10,
											"value": "22"
										},
										{
											"begin": 5627,
											"end": 5628,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 5620,
											"end": 5635,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 5658,
											"end": 5662,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 5655,
											"end": 5656,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 5648,
											"end": 5663,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 5512,
											"end": 5514,
											"name": "tag",
											"source": 10,
											"value": "176"
										},
										{
											"begin": 5512,
											"end": 5514,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 5512,
											"end": 5514,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 5354,
											"end": 5679,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 5354,
											"end": 5679,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 5354,
											"end": 5679,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 5354,
											"end": 5679,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										}
									]
								}
							}
						},
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"decimals()": "313ce567",
							"decreaseAllowance(address,uint256)": "a457c2d7",
							"increaseAllowance(address,uint256)": "39509351",
							"name()": "06fdde03",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC20} interface. z This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. For a generic mechanism see {ERC20PresetMinterPauser}. TIP: For a detailed writeup see our guide https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. We have followed general OpenZeppelin Contracts guidelines: functions revert instead returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC20 applications. Additionally, an {Approval} event is emitted on calls to {transferFrom}. This allows applications to reconstruct the allowance for all accounts just by listening to said events. Other implementations of the EIP may not emit these events, as it isn't required by the specification. Finally, the non-standard {decreaseAllowance} and {increaseAllowance} functions have been added to mitigate the well-known issues around setting allowances. See {IERC20-approve}.\",\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"constructor\":{\"details\":\"Sets the values for {name} and {symbol}. The default value of {decimals} is 18. To select a different value for {decimals} you should overload it. All two of these values are immutable: they can only be set once during construction.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"ERC20/ERC20.sol\":\"ERC20\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"ERC20/ERC20.sol\":{\"keccak256\":\"0x06de64a6e4f0f98aaf7bc91b3826b714e7ce7827a08da3031f8f2f91c14c5687\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://79cb85a1ebbc907f8b80a26cfce98cd61eb1dfc5dbed47f2cc5f6e7a3e87d2db\",\"dweb:/ipfs/QmWzRXkG6oFwtNiGz98zduSDVYhnTKkCE5YMTVE15fBFse\"]},\"ERC20/IERC20.sol\":{\"keccak256\":\"0x62e7e272bf9d2c10b294645ea698d7fc41dadc18146ac88e9b9cc18514faacc1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e09024b0f1ddb94bdc13008d4c221747b1a6f1e07b0ca599d8d213925982af34\",\"dweb:/ipfs/QmcL6X4KCFc45tk5xSEgBDFUrsKap8G74aJtti5sUYzYCL\"]},\"ERC20/IERC20Metadata.sol\":{\"keccak256\":\"0x2095e6b6cd9fc67a55c1dce6c4a4282036fef487baf848e399adc2f571f6c47b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bbdbc5c7af217e674e7c45ab729cf3ffe1c2756c4438e5818f39f30266b836e2\",\"dweb:/ipfs/QmPkmQQ6bAVYGRKR1KMqRhU1kPL49aFc5zqCLmJZEMsavE\"]},\"Utils/Context.sol\":{\"keccak256\":\"0x81d5fc973a522c8909d60be6a201869d46aa47b030b8813f60616404628c2b94\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9755b505799e622d964a843a8ed1fd60fedffca230178e5cb95ae9280df4dcd2\",\"dweb:/ipfs/QmRkhUYUUgRZ2QYJjmtQct2ubyYwS3bdUMhbuFYM12VfYn\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 15,
								"contract": "ERC20/ERC20.sol:ERC20",
								"label": "_balances",
								"offset": 0,
								"slot": "0",
								"type": "t_mapping(t_address,t_uint256)"
							},
							{
								"astId": 21,
								"contract": "ERC20/ERC20.sol:ERC20",
								"label": "_allowances",
								"offset": 0,
								"slot": "1",
								"type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
							},
							{
								"astId": 23,
								"contract": "ERC20/ERC20.sol:ERC20",
								"label": "_totalSupply",
								"offset": 0,
								"slot": "2",
								"type": "t_uint256"
							},
							{
								"astId": 25,
								"contract": "ERC20/ERC20.sol:ERC20",
								"label": "_name",
								"offset": 0,
								"slot": "3",
								"type": "t_string_storage"
							},
							{
								"astId": 27,
								"contract": "ERC20/ERC20.sol:ERC20",
								"label": "_symbol",
								"offset": 0,
								"slot": "4",
								"type": "t_string_storage"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_mapping(t_address,t_mapping(t_address,t_uint256))": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => mapping(address => uint256))",
								"numberOfBytes": "32",
								"value": "t_mapping(t_address,t_uint256)"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_string_storage": {
								"encoding": "bytes",
								"label": "string",
								"numberOfBytes": "32"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"ERC20/IERC20.sol": {
				"IERC20": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC20 standard as defined in the EIP.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the amount of tokens owned by `account`."
							},
							"totalSupply()": {
								"details": "Returns the amount of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"ERC20/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"ERC20/IERC20.sol\":{\"keccak256\":\"0x62e7e272bf9d2c10b294645ea698d7fc41dadc18146ac88e9b9cc18514faacc1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e09024b0f1ddb94bdc13008d4c221747b1a6f1e07b0ca599d8d213925982af34\",\"dweb:/ipfs/QmcL6X4KCFc45tk5xSEgBDFUrsKap8G74aJtti5sUYzYCL\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"ERC20/IERC20Metadata.sol": {
				"IERC20Metadata": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface for the optional metadata functions from the ERC20 standard. _Available since v4.1._",
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the amount of tokens owned by `account`."
							},
							"decimals()": {
								"details": "Returns the decimals places of the token."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"symbol()": {
								"details": "Returns the symbol of the token."
							},
							"totalSupply()": {
								"details": "Returns the amount of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"decimals()": "313ce567",
							"name()": "06fdde03",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for the optional metadata functions from the ERC20 standard. _Available since v4.1._\",\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"decimals()\":{\"details\":\"Returns the decimals places of the token.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"ERC20/IERC20Metadata.sol\":\"IERC20Metadata\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"ERC20/IERC20.sol\":{\"keccak256\":\"0x62e7e272bf9d2c10b294645ea698d7fc41dadc18146ac88e9b9cc18514faacc1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e09024b0f1ddb94bdc13008d4c221747b1a6f1e07b0ca599d8d213925982af34\",\"dweb:/ipfs/QmcL6X4KCFc45tk5xSEgBDFUrsKap8G74aJtti5sUYzYCL\"]},\"ERC20/IERC20Metadata.sol\":{\"keccak256\":\"0x2095e6b6cd9fc67a55c1dce6c4a4282036fef487baf848e399adc2f571f6c47b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bbdbc5c7af217e674e7c45ab729cf3ffe1c2756c4438e5818f39f30266b836e2\",\"dweb:/ipfs/QmPkmQQ6bAVYGRKR1KMqRhU1kPL49aFc5zqCLmJZEMsavE\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"Ethereum/Presale.sol": {
				"Presale": {
					"abi": [
						{
							"inputs": [],
							"stateMutability": "payable",
							"type": "constructor"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "WETH",
							"outputs": [
								{
									"internalType": "contract IERC20",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "backToken",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"name": "buyerInfo",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "baseDeposit",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "tokenOwner",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "lastWithDraw",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "totalTokenWithDraw",
									"type": "uint256"
								},
								{
									"internalType": "bool",
									"name": "isRefund",
									"type": "bool"
								},
								{
									"internalType": "bool",
									"name": "isClaim",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "checkAdminAddress",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "_amount",
									"type": "uint256"
								}
							],
							"name": "deposit",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "feeAnyone",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_address",
									"type": "address"
								}
							],
							"name": "getBalance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address payable",
									"name": "_presaleOwner",
									"type": "address"
								},
								{
									"internalType": "contract ERC20",
									"name": "_saleToken",
									"type": "address"
								},
								{
									"internalType": "contract ERC20",
									"name": "_baseTOken",
									"type": "address"
								},
								{
									"internalType": "uint256[9]",
									"name": "datas",
									"type": "uint256[9]"
								}
							],
							"name": "initialSaleInfor",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "presaleStatus",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "totalBaseCollected",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "totalTokenSold",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "totalTokenWithDraw",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "totalBaseWithDraw",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "numberBuyer",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "totalFee",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "saleInfor",
							"outputs": [
								{
									"internalType": "address payable",
									"name": "presaleOwner",
									"type": "address"
								},
								{
									"internalType": "contract ERC20",
									"name": "saleToken",
									"type": "address"
								},
								{
									"internalType": "contract ERC20",
									"name": "baseToken",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenPrice",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "startSale",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "endSale",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "minSpendPerBuyer",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "maxSpendPerBuyer",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "refundFee",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "claimFee",
									"type": "uint256"
								},
								{
									"internalType": "bool",
									"name": "saleIsBaseToken",
									"type": "bool"
								},
								{
									"internalType": "uint256",
									"name": "amountTokenForSale",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "saleTotalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "hardCap",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "softCap",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "status",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalFee",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "userClaimEmergency",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"name": "userFee",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"Ethereum/Presale.sol\":370:7052  contract Presale is ReentrancyGuard, Ownable{\r... */\n  mstore(0x40, 0x80)\n    /* \"Utils/ReentrancyGuard.sol\":1734:1735  1 */\n  0x01\n    /* \"Utils/ReentrancyGuard.sol\":1845:1852  _status */\n  0x00\n    /* \"Utils/ReentrancyGuard.sol\":1845:1867  _status = _NOT_ENTERED */\n  sstore\n    /* \"Utils/Ownable.sol\":942:974  _transferOwnership(_msgSender()) */\n  tag_6\n    /* \"Utils/Ownable.sol\":961:973  _msgSender() */\n  tag_7\n    /* \"Utils/Ownable.sol\":961:971  _msgSender */\n  tag_8\n    /* \"Utils/Ownable.sol\":961:973  _msgSender() */\n  jump\t// in\ntag_7:\n    /* \"Utils/Ownable.sol\":942:960  _transferOwnership */\n  tag_9\n    /* \"Utils/Ownable.sol\":942:974  _transferOwnership(_msgSender()) */\n  jump\t// in\ntag_6:\n    /* \"Ethereum/Presale.sol\":2109:2113  WETH */\n  0x19\n    /* \"Ethereum/Presale.sol\":2109:2165  WETH = ERC20(0xc778417E063141139Fce010982780140Aa0cD5Ab) */\n  dup1\n  sload\n    /* \"Ethereum/Presale.sol\":2122:2164  0xc778417E063141139Fce010982780140Aa0cD5Ab */\n  0xc778417e063141139fce010982780140aa0cd5ab\n  not(sub(shl(0xa0, 0x01), 0x01))\n    /* \"Ethereum/Presale.sol\":2109:2165  WETH = ERC20(0xc778417E063141139Fce010982780140Aa0cD5Ab) */\n  swap1\n  swap2\n  and\n  or\n  swap1\n  sstore\n    /* \"Ethereum/Presale.sol\":2176:2230  admins.add(0x6Ccb41eedA5a073076F3E7dC1614C185b5fA41eD) */\n  tag_11\n    /* \"Ethereum/Presale.sol\":2176:2182  admins */\n  0x1b\n    /* \"Ethereum/Presale.sol\":2187:2229  0x6Ccb41eedA5a073076F3E7dC1614C185b5fA41eD */\n  0x6ccb41eeda5a073076f3e7dc1614c185b5fa41ed\n    /* \"Ethereum/Presale.sol\":2176:2186  admins.add */\n  tag_12\n  0x20\n  swap1\n  dup2\n  shl\n  tag_0_104\n  or\n    /* \"Ethereum/Presale.sol\":2176:2230  admins.add(0x6Ccb41eedA5a073076F3E7dC1614C185b5fA41eD) */\n  swap1\n  shr\n  jump\t// in\ntag_11:\n  pop\n    /* \"Ethereum/Presale.sol\":2241:2295  admins.add(0x4f0B12bBF40Fc182559822A5b1dB6D34dbC3E016) */\n  tag_13\n    /* \"Ethereum/Presale.sol\":2252:2294  0x4f0B12bBF40Fc182559822A5b1dB6D34dbC3E016 */\n  0x4f0b12bbf40fc182559822a5b1db6d34dbc3e016\n    /* \"Ethereum/Presale.sol\":2241:2247  admins */\n  0x1b\n    /* \"Ethereum/Presale.sol\":2241:2251  admins.add */\n  or(tag_0_104, shl(0x20, tag_12))\n  swap1\n    /* \"Ethereum/Presale.sol\":2241:2295  admins.add(0x4f0B12bBF40Fc182559822A5b1dB6D34dbC3E016) */\n  swap2\n  swap1\n  0x20\n  shr\n  jump\t// in\ntag_13:\n  pop\n    /* \"Ethereum/Presale.sol\":2318:2320  20 */\n  0x14\n    /* \"Ethereum/Presale.sol\":2306:2315  feeAnyone */\n  0x1a\n    /* \"Ethereum/Presale.sol\":2306:2320  feeAnyone = 20 */\n  sstore\n    /* \"Ethereum/Presale.sol\":370:7052  contract Presale is ReentrancyGuard, Ownable{\r... */\n  jump(tag_14)\n    /* \"Utils/Context.sol\":656:754  function _msgSender() internal view virtual returns (address) {\r... */\ntag_8:\n    /* \"Utils/Context.sol\":736:746  msg.sender */\n  caller\n    /* \"Utils/Context.sol\":656:754  function _msgSender() internal view virtual returns (address) {\r... */\n  swap1\n  jump\t// out\n    /* \"Utils/Ownable.sol\":2333:2524  function _transferOwnership(address newOwner) internal virtual {\r... */\ntag_9:\n    /* \"Utils/Ownable.sol\":2426:2432  _owner */\n  0x01\n  dup1\n  sload\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"Utils/Ownable.sol\":2443:2460  _owner = newOwner */\n  dup4\n  dup2\n  and\n  not(sub(shl(0xa0, 0x01), 0x01))\n  dup4\n  and\n  dup2\n  or\n  swap1\n  swap4\n  sstore\n    /* \"Utils/Ownable.sol\":2476:2516  OwnershipTransferred(oldOwner, newOwner) */\n  mload(0x40)\n    /* \"Utils/Ownable.sol\":2426:2432  _owner */\n  swap2\n  and\n  swap2\n    /* \"Utils/Ownable.sol\":2443:2460  _owner = newOwner */\n  swap1\n    /* \"Utils/Ownable.sol\":2426:2432  _owner */\n  dup3\n  swap1\n    /* \"Utils/Ownable.sol\":2476:2516  OwnershipTransferred(oldOwner, newOwner) */\n  0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\n  swap1\n    /* \"Utils/Ownable.sol\":2407:2423  address oldOwner */\n  0x00\n  swap1\n    /* \"Utils/Ownable.sol\":2476:2516  OwnershipTransferred(oldOwner, newOwner) */\n  log3\n    /* \"Utils/Ownable.sol\":2333:2524  function _transferOwnership(address newOwner) internal virtual {\r... */\n  pop\n  pop\n  jump\t// out\n    /* \"Utils/EnumerableSet.sol\":8259:8411  function add(AddressSet storage set, address value) internal returns (bool) {\r... */\ntag_12:\n    /* \"Utils/EnumerableSet.sol\":8329:8333  bool */\n  0x00\n    /* \"Utils/EnumerableSet.sol\":8353:8403  _add(set._inner, bytes32(uint256(uint160(value)))) */\n  tag_18\n    /* \"Utils/EnumerableSet.sol\":8358:8361  set */\n  dup4\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"Utils/EnumerableSet.sol\":8378:8401  uint256(uint160(value)) */\n  dup5\n  and\n    /* \"Utils/EnumerableSet.sol\":8353:8357  _add */\n  tag_19\n    /* \"Utils/EnumerableSet.sol\":8353:8403  _add(set._inner, bytes32(uint256(uint160(value)))) */\n  jump\t// in\ntag_18:\n    /* \"Utils/EnumerableSet.sol\":8346:8403  return _add(set._inner, bytes32(uint256(uint160(value)))) */\n  swap1\n  pop\n    /* \"Utils/EnumerableSet.sol\":8259:8411  function add(AddressSet storage set, address value) internal returns (bool) {\r... */\ntag_17:\n  swap3\n  swap2\n  pop\n  pop\n  jump\t// out\n    /* \"Utils/EnumerableSet.sol\":2174:2588  function _add(Set storage set, bytes32 value) private returns (bool) {\r... */\ntag_19:\n    /* \"Utils/EnumerableSet.sol\":2237:2241  bool */\n  0x00\n    /* \"Utils/EnumerableSet.sol\":2259:2280  _contains(set, value) */\n  tag_21\n    /* \"Utils/EnumerableSet.sol\":2269:2272  set */\n  dup4\n    /* \"Utils/EnumerableSet.sol\":2274:2279  value */\n  dup4\n    /* \"Utils/EnumerableSet.sol\":2259:2268  _contains */\n  tag_22\n    /* \"Utils/EnumerableSet.sol\":2259:2280  _contains(set, value) */\n  jump\t// in\ntag_21:\n    /* \"Utils/EnumerableSet.sol\":2254:2581  if (!_contains(set, value)) {\r... */\n  tag_23\n  jumpi\n  pop\n    /* \"Utils/EnumerableSet.sol\":2297:2320  set._values.push(value) */\n  dup2\n  sload\n  0x01\n  dup2\n  dup2\n  add\n  dup5\n  sstore\n    /* \"Utils/EnumerableSet.sol\":2297:2308  set._values */\n  0x00\n    /* \"Utils/EnumerableSet.sol\":2297:2320  set._values.push(value) */\n  dup5\n  dup2\n  mstore\n  0x20\n  dup1\n  dup3\n  keccak256\n  swap1\n  swap4\n  add\n  dup5\n  swap1\n  sstore\n    /* \"Utils/EnumerableSet.sol\":2480:2498  set._values.length */\n  dup5\n  sload\n    /* \"Utils/EnumerableSet.sol\":2458:2477  set._indexes[value] */\n  dup5\n  dup3\n  mstore\n    /* \"Utils/EnumerableSet.sol\":2458:2470  set._indexes */\n  dup3\n  dup7\n  add\n    /* \"Utils/EnumerableSet.sol\":2458:2477  set._indexes[value] */\n  swap1\n  swap4\n  mstore\n  0x40\n  swap1\n  keccak256\n    /* \"Utils/EnumerableSet.sol\":2458:2498  set._indexes[value] = set._values.length */\n  swap2\n  swap1\n  swap2\n  sstore\n    /* \"Utils/EnumerableSet.sol\":2513:2524  return true */\n  jump(tag_17)\n    /* \"Utils/EnumerableSet.sol\":2254:2581  if (!_contains(set, value)) {\r... */\ntag_23:\n  pop\n    /* \"Utils/EnumerableSet.sol\":2564:2569  false */\n  0x00\n    /* \"Utils/EnumerableSet.sol\":2557:2569  return false */\n  jump(tag_17)\n    /* \"Utils/EnumerableSet.sol\":4270:4399  function _contains(Set storage set, bytes32 value) private view returns (bool) {\r... */\ntag_22:\n    /* \"Utils/EnumerableSet.sol\":4343:4347  bool */\n  0x00\n    /* \"Utils/EnumerableSet.sol\":4367:4386  set._indexes[value] */\n  swap1\n  dup2\n  mstore\n    /* \"Utils/EnumerableSet.sol\":4367:4379  set._indexes */\n  0x01\n  swap2\n  swap1\n  swap2\n  add\n    /* \"Utils/EnumerableSet.sol\":4367:4386  set._indexes[value] */\n  0x20\n  mstore\n  0x40\n  swap1\n  keccak256\n  sload\n    /* \"Utils/EnumerableSet.sol\":4367:4391  set._indexes[value] != 0 */\n  iszero\n  iszero\n  swap1\n    /* \"Utils/EnumerableSet.sol\":4270:4399  function _contains(Set storage set, bytes32 value) private view returns (bool) {\r... */\n  jump\t// out\n    /* \"Ethereum/Presale.sol\":370:7052  contract Presale is ReentrancyGuard, Ownable{\r... */\ntag_14:\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"Ethereum/Presale.sol\":370:7052  contract Presale is ReentrancyGuard, Ownable{\r... */\n      mstore(0x40, 0x80)\n      jumpi(tag_1, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x8f1eae4c\n      gt\n      tag_20\n      jumpi\n      dup1\n      0xb6b55f25\n      gt\n      tag_21\n      jumpi\n      dup1\n      0xb6b55f25\n      eq\n      tag_15\n      jumpi\n      dup1\n      0xcad5b0f7\n      eq\n      tag_16\n      jumpi\n      dup1\n      0xe2d3f423\n      eq\n      tag_17\n      jumpi\n      dup1\n      0xf2fde38b\n      eq\n      tag_18\n      jumpi\n      dup1\n      0xf8b2cb4f\n      eq\n      tag_19\n      jumpi\n      jump(tag_1)\n    tag_21:\n      dup1\n      0x8f1eae4c\n      eq\n      tag_11\n      jumpi\n      dup1\n      0xab33985a\n      eq\n      tag_12\n      jumpi\n      dup1\n      0xacfb2355\n      eq\n      tag_13\n      jumpi\n      dup1\n      0xad5c4648\n      eq\n      tag_14\n      jumpi\n      jump(tag_1)\n    tag_20:\n      dup1\n      0x3b5ef2ad\n      gt\n      tag_22\n      jumpi\n      dup1\n      0x3b5ef2ad\n      eq\n      tag_6\n      jumpi\n      dup1\n      0x56c5f349\n      eq\n      tag_7\n      jumpi\n      dup1\n      0x715018a6\n      eq\n      tag_8\n      jumpi\n      dup1\n      0x861faf5f\n      eq\n      tag_9\n      jumpi\n      dup1\n      0x8da5cb5b\n      eq\n      tag_10\n      jumpi\n      jump(tag_1)\n    tag_22:\n      dup1\n      0x12e5d0b9\n      eq\n      tag_2\n      jumpi\n      dup1\n      0x18856a2f\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x1df4ccfc\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x200d2ed2\n      eq\n      tag_5\n      jumpi\n    tag_1:\n      0x00\n      dup1\n      revert\n        /* \"Ethereum/Presale.sol\":1623:1661  SaleTotalSupply public saleTotalSupply */\n    tag_2:\n      callvalue\n      dup1\n      iszero\n      tag_23\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_23:\n      pop\n      tag_24\n      tag_25\n      jump\t// in\n    tag_24:\n      mload(0x40)\n      tag_26\n      swap3\n      swap2\n      swap1\n      tag_27\n      jump\t// in\n    tag_26:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"Ethereum/Presale.sol\":1668:1694  SaleInfor public saleInfor */\n    tag_3:\n      callvalue\n      dup1\n      iszero\n      tag_28\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_28:\n      pop\n      tag_29\n      tag_30\n      jump\t// in\n    tag_29:\n      mload(0x40)\n      tag_26\n      swap13\n      swap12\n      swap11\n      swap10\n      swap9\n      swap8\n      swap7\n      swap6\n      swap5\n      swap4\n      swap3\n      swap2\n      swap1\n      tag_32\n      jump\t// in\n        /* \"Ethereum/Presale.sol\":1804:1827  uint256 public totalFee */\n    tag_4:\n      callvalue\n      dup1\n      iszero\n      tag_33\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_33:\n      pop\n      tag_34\n      tag_35\n      jump\t// in\n    tag_34:\n      mload(0x40)\n      tag_26\n      swap2\n      swap1\n      tag_37\n      jump\t// in\n        /* \"Ethereum/Presale.sol\":3330:3667  function status() public view returns(uint256) {\r... */\n    tag_5:\n      callvalue\n      dup1\n      iszero\n      tag_38\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_38:\n      pop\n      tag_34\n      tag_40\n      jump\t// in\n        /* \"Ethereum/Presale.sol\":1726:1750  uint256 public feeAnyone */\n    tag_6:\n      callvalue\n      dup1\n      iszero\n      tag_42\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_42:\n      pop\n      tag_34\n      tag_44\n      jump\t// in\n        /* \"Ethereum/Presale.sol\":1533:1575  mapping(address => uint256) public userFee */\n    tag_7:\n      callvalue\n      dup1\n      iszero\n      tag_46\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_46:\n      pop\n      tag_34\n      tag_48\n      calldatasize\n      0x04\n      tag_49\n      jump\t// in\n    tag_48:\n      tag_50\n      jump\t// in\n        /* \"Utils/Ownable.sol\":1714:1817  function renounceOwnership() public virtual onlyOwner {\r... */\n    tag_8:\n      callvalue\n      dup1\n      iszero\n      tag_52\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_52:\n      pop\n      tag_53\n      tag_54\n      jump\t// in\n    tag_53:\n      stop\n        /* \"Ethereum/Presale.sol\":6941:7049  function backToken() external payable {\r... */\n    tag_9:\n      tag_53\n      tag_56\n      jump\t// in\n        /* \"Utils/Ownable.sol\":1063:1150  function owner() public view virtual returns (address) {\r... */\n    tag_10:\n      callvalue\n      dup1\n      iszero\n      tag_57\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_57:\n      pop\n      tag_58\n      tag_59\n      jump\t// in\n    tag_58:\n      mload(0x40)\n      tag_26\n      swap2\n      swap1\n      tag_61\n      jump\t// in\n        /* \"Ethereum/Presale.sol\":2336:3321  function initialSaleInfor(\r... */\n    tag_11:\n      callvalue\n      dup1\n      iszero\n      tag_62\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_62:\n      pop\n      tag_53\n      tag_64\n      calldatasize\n      0x04\n      tag_65\n      jump\t// in\n    tag_64:\n      tag_66\n      jump\t// in\n        /* \"Ethereum/Presale.sol\":5927:6811  function userClaimEmergency() external nonReentrant {\r... */\n    tag_12:\n      callvalue\n      dup1\n      iszero\n      tag_67\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_67:\n      pop\n      tag_53\n      tag_69\n      jump\t// in\n        /* \"Ethereum/Presale.sol\":1582:1616  PresaleStatus public presaleStatus */\n    tag_13:\n      callvalue\n      dup1\n      iszero\n      tag_70\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_70:\n      pop\n      tag_71\n      tag_72\n      jump\t// in\n    tag_71:\n      mload(0x40)\n      tag_26\n      swap7\n      swap6\n      swap5\n      swap4\n      swap3\n      swap2\n      swap1\n      tag_74\n      jump\t// in\n        /* \"Ethereum/Presale.sol\":1701:1719  IERC20 public WETH */\n    tag_14:\n      callvalue\n      dup1\n      iszero\n      tag_75\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_75:\n      pop\n      tag_58\n      tag_77\n      jump\t// in\n        /* \"Ethereum/Presale.sol\":3794:5919  function deposit(uint256 _amount) external payable nonReentrant {\r... */\n    tag_15:\n      tag_53\n      tag_81\n      calldatasize\n      0x04\n      tag_82\n      jump\t// in\n    tag_81:\n      tag_83\n      jump\t// in\n        /* \"Ethereum/Presale.sol\":3676:3786  function checkAdminAddress() public view returns(bool) {\r... */\n    tag_16:\n      callvalue\n      dup1\n      iszero\n      tag_84\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_84:\n      pop\n      tag_85\n      tag_86\n      jump\t// in\n    tag_85:\n      mload(0x40)\n      tag_26\n      swap2\n      swap1\n      tag_88\n      jump\t// in\n        /* \"Ethereum/Presale.sol\":1480:1526  mapping(address => BuyerInfo) public buyerInfo */\n    tag_17:\n      callvalue\n      dup1\n      iszero\n      tag_89\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_89:\n      pop\n      tag_90\n      tag_91\n      calldatasize\n      0x04\n      tag_49\n      jump\t// in\n    tag_91:\n      tag_92\n      jump\t// in\n    tag_90:\n      mload(0x40)\n      tag_26\n      swap7\n      swap6\n      swap5\n      swap4\n      swap3\n      swap2\n      swap1\n      tag_94\n      jump\t// in\n        /* \"Utils/Ownable.sol\":1972:2173  function transferOwnership(address newOwner) public virtual onlyOwner {\r... */\n    tag_18:\n      callvalue\n      dup1\n      iszero\n      tag_95\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_95:\n      pop\n      tag_53\n      tag_97\n      calldatasize\n      0x04\n      tag_49\n      jump\t// in\n    tag_97:\n      tag_98\n      jump\t// in\n        /* \"Ethereum/Presale.sol\":6819:6930  function getBalance(address _address) external view returns(uint256) {\r... */\n    tag_19:\n      callvalue\n      dup1\n      iszero\n      tag_99\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_99:\n      pop\n      tag_34\n      tag_101\n      calldatasize\n      0x04\n      tag_49\n      jump\t// in\n    tag_101:\n      tag_102\n      jump\t// in\n        /* \"Ethereum/Presale.sol\":1623:1661  SaleTotalSupply public saleTotalSupply */\n    tag_25:\n      sload(0x0b)\n      sload(0x0c)\n      dup3\n      jump\t// out\n        /* \"Ethereum/Presale.sol\":1668:1694  SaleInfor public saleInfor */\n    tag_30:\n      sload(0x0d)\n      sload(0x0e)\n      sload(0x0f)\n      sload(0x10)\n      sload(0x11)\n      sload(0x12)\n      sload(0x13)\n      sload(0x14)\n      sload(0x15)\n      sload(0x16)\n      sload(0x17)\n      sload(0x18)\n      sub(shl(0xa0, 0x01), 0x01)\n      swap12\n      dup13\n      and\n      swap12\n      swap11\n      dup12\n      and\n      swap11\n      swap1\n      swap10\n      and\n      swap9\n      0xff\n      swap1\n      swap2\n      and\n      swap1\n      dup13\n      jump\t// out\n        /* \"Ethereum/Presale.sol\":1804:1827  uint256 public totalFee */\n    tag_35:\n      sload(0x1d)\n      dup2\n      jump\t// out\n        /* \"Ethereum/Presale.sol\":3330:3667  function status() public view returns(uint256) {\r... */\n    tag_40:\n        /* \"Ethereum/Presale.sol\":3409:3428  saleInfor.startSale */\n      sload(0x11)\n        /* \"Ethereum/Presale.sol\":3368:3375  uint256 */\n      0x00\n      swap1\n        /* \"Ethereum/Presale.sol\":3391:3406  block.timestamp */\n      timestamp\n        /* \"Ethereum/Presale.sol\":3391:3428  block.timestamp < saleInfor.startSale */\n      lt\n        /* \"Ethereum/Presale.sol\":3388:3660  if(block.timestamp < saleInfor.startSale) {\r... */\n      iszero\n      tag_106\n      jumpi\n      pop\n        /* \"Ethereum/Presale.sol\":3452:3453  0 */\n      0x00\n        /* \"Ethereum/Presale.sol\":3445:3453  return 0 */\n      jump(tag_109)\n        /* \"Ethereum/Presale.sol\":3388:3660  if(block.timestamp < saleInfor.startSale) {\r... */\n    tag_106:\n        /* \"Ethereum/Presale.sol\":3519:3536  saleInfor.endSale */\n      sload(0x12)\n        /* \"Ethereum/Presale.sol\":3501:3516  block.timestamp */\n      timestamp\n        /* \"Ethereum/Presale.sol\":3501:3536  block.timestamp > saleInfor.endSale */\n      gt\n        /* \"Ethereum/Presale.sol\":3498:3649  if(block.timestamp > saleInfor.endSale) {\r... */\n      iszero\n      tag_108\n      jumpi\n      pop\n        /* \"Ethereum/Presale.sol\":3564:3565  2 */\n      0x02\n        /* \"Ethereum/Presale.sol\":3557:3565  return 2 */\n      jump(tag_109)\n        /* \"Ethereum/Presale.sol\":3498:3649  if(block.timestamp > saleInfor.endSale) {\r... */\n    tag_108:\n      pop\n        /* \"Ethereum/Presale.sol\":3622:3623  1 */\n      0x01\n        /* \"Ethereum/Presale.sol\":3498:3649  if(block.timestamp > saleInfor.endSale) {\r... */\n    tag_109:\n        /* \"Ethereum/Presale.sol\":3330:3667  function status() public view returns(uint256) {\r... */\n      swap1\n      jump\t// out\n        /* \"Ethereum/Presale.sol\":1726:1750  uint256 public feeAnyone */\n    tag_44:\n      sload(0x1a)\n      dup2\n      jump\t// out\n        /* \"Ethereum/Presale.sol\":1533:1575  mapping(address => uint256) public userFee */\n    tag_50:\n      mstore(0x20, 0x03)\n      0x00\n      swap1\n      dup2\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n      dup2\n      jump\t// out\n        /* \"Utils/Ownable.sol\":1714:1817  function renounceOwnership() public virtual onlyOwner {\r... */\n    tag_54:\n        /* \"Utils/Ownable.sol\":1294:1306  _msgSender() */\n      tag_111\n        /* \"Utils/Ownable.sol\":1294:1304  _msgSender */\n      tag_112\n        /* \"Utils/Ownable.sol\":1294:1306  _msgSender() */\n      jump\t// in\n    tag_111:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"Utils/Ownable.sol\":1283:1306  owner() == _msgSender() */\n      and\n        /* \"Utils/Ownable.sol\":1283:1290  owner() */\n      tag_113\n        /* \"Utils/Ownable.sol\":1283:1288  owner */\n      tag_59\n        /* \"Utils/Ownable.sol\":1283:1290  owner() */\n      jump\t// in\n    tag_113:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"Utils/Ownable.sol\":1283:1306  owner() == _msgSender() */\n      and\n      eq\n        /* \"Utils/Ownable.sol\":1275:1343  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_114\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_115\n      swap1\n      tag_116\n      jump\t// in\n    tag_115:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_114:\n        /* \"Utils/Ownable.sol\":1779:1809  _transferOwnership(address(0)) */\n      tag_118\n        /* \"Utils/Ownable.sol\":1806:1807  0 */\n      0x00\n        /* \"Utils/Ownable.sol\":1779:1797  _transferOwnership */\n      tag_119\n        /* \"Utils/Ownable.sol\":1779:1809  _transferOwnership(address(0)) */\n      jump\t// in\n    tag_118:\n        /* \"Utils/Ownable.sol\":1714:1817  function renounceOwnership() public virtual onlyOwner {\r... */\n      jump\t// out\n        /* \"Ethereum/Presale.sol\":6941:7049  function backToken() external payable {\r... */\n    tag_56:\n        /* \"Ethereum/Presale.sol\":6990:7041  payable(msg.sender).transfer(address(this).balance) */\n      mload(0x40)\n        /* \"Ethereum/Presale.sol\":6998:7008  msg.sender */\n      caller\n      swap1\n        /* \"Ethereum/Presale.sol\":7019:7040  address(this).balance */\n      selfbalance\n        /* \"Ethereum/Presale.sol\":6990:7041  payable(msg.sender).transfer(address(this).balance) */\n      dup1\n      iszero\n      0x08fc\n      mul\n      swap2\n      0x00\n      dup2\n      dup2\n      dup2\n        /* \"Ethereum/Presale.sol\":7019:7040  address(this).balance */\n      dup6\n        /* \"Ethereum/Presale.sol\":6998:7008  msg.sender */\n      dup9\n        /* \"Ethereum/Presale.sol\":6990:7041  payable(msg.sender).transfer(address(this).balance) */\n      dup9\n      call\n      swap4\n      pop\n      pop\n      pop\n      pop\n      iszero\n      dup1\n      iszero\n      tag_122\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_122:\n      pop\n        /* \"Ethereum/Presale.sol\":6941:7049  function backToken() external payable {\r... */\n      jump\t// out\n        /* \"Utils/Ownable.sol\":1063:1150  function owner() public view virtual returns (address) {\r... */\n    tag_59:\n        /* \"Utils/Ownable.sol\":1136:1142  _owner */\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x01))\n        /* \"Utils/Ownable.sol\":1063:1150  function owner() public view virtual returns (address) {\r... */\n      swap1\n      jump\t// out\n        /* \"Ethereum/Presale.sol\":2336:3321  function initialSaleInfor(\r... */\n    tag_66:\n        /* \"Ethereum/Presale.sol\":2517:2526  saleInfor */\n      0x0d\n        /* \"Ethereum/Presale.sol\":2517:2555  saleInfor.presaleOwner = _presaleOwner */\n      dup1\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n      dup1\n      dup8\n      and\n      not(sub(shl(0xa0, 0x01), 0x01))\n      swap3\n      dup4\n      and\n      or\n      swap1\n      swap3\n      sstore\n        /* \"Ethereum/Presale.sol\":2566:2585  saleInfor.saleToken */\n      0x0e\n        /* \"Ethereum/Presale.sol\":2566:2598  saleInfor.saleToken = _saleToken */\n      dup1\n      sload\n      dup7\n      dup5\n      and\n      swap1\n      dup4\n      and\n      or\n      swap1\n      dup2\n      swap1\n      sstore\n        /* \"Ethereum/Presale.sol\":2609:2628  saleInfor.baseToken */\n      0x0f\n        /* \"Ethereum/Presale.sol\":2609:2641  saleInfor.baseToken = _baseTOken */\n      dup1\n      sload\n      dup7\n      dup6\n      and\n      swap4\n      and\n      swap3\n      swap1\n      swap3\n      or\n      swap1\n      swap2\n      sstore\n        /* \"Ethereum/Presale.sol\":2699:2736  ERC20(saleInfor.saleToken).decimals() */\n      0x40\n      dup1\n      mload\n      shl(0xe0, 0x313ce567)\n      dup2\n      mstore\n      swap1\n      mload\n        /* \"Ethereum/Presale.sol\":2705:2724  saleInfor.saleToken */\n      swap2\n      swap1\n      swap3\n      and\n      swap2\n        /* \"Ethereum/Presale.sol\":2699:2734  ERC20(saleInfor.saleToken).decimals */\n      0x313ce567\n      swap2\n        /* \"Ethereum/Presale.sol\":2699:2736  ERC20(saleInfor.saleToken).decimals() */\n      0x04\n      dup1\n      dup4\n      add\n      swap3\n      0x20\n      swap3\n      swap2\n      swap1\n      dup3\n      swap1\n      sub\n      add\n      dup2\n        /* \"Ethereum/Presale.sol\":2705:2724  saleInfor.saleToken */\n      dup7\n        /* \"Ethereum/Presale.sol\":2699:2736  ERC20(saleInfor.saleToken).decimals() */\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_125\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_125:\n      pop\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_127\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_127:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_128\n      swap2\n      swap1\n      tag_129\n      jump\t// in\n    tag_128:\n        /* \"Ethereum/Presale.sol\":2686:2737  10** uint256(ERC20(saleInfor.saleToken).decimals()) */\n      tag_130\n      swap1\n        /* \"Ethereum/Presale.sol\":2686:2688  10 */\n      0x0a\n        /* \"Ethereum/Presale.sol\":2686:2737  10** uint256(ERC20(saleInfor.saleToken).decimals()) */\n      tag_131\n      jump\t// in\n    tag_130:\n        /* \"Ethereum/Presale.sol\":2675:2683  datas[0] */\n      dup2\n      mload\n        /* \"Ethereum/Presale.sol\":2675:2737  datas[0] * 10** uint256(ERC20(saleInfor.saleToken).decimals()) */\n      tag_133\n      swap2\n      swap1\n      tag_134\n      jump\t// in\n    tag_133:\n        /* \"Ethereum/Presale.sol\":2652:2672  saleInfor.tokenPrice */\n      0x10\n        /* \"Ethereum/Presale.sol\":2652:2737  saleInfor.tokenPrice = datas[0] * 10** uint256(ERC20(saleInfor.saleToken).decimals()) */\n      sstore\n        /* \"Ethereum/Presale.sol\":2770:2778  datas[1] */\n      0x20\n      dup1\n      dup3\n      add\n      mload\n        /* \"Ethereum/Presale.sol\":2748:2767  saleInfor.startSale */\n      0x11\n        /* \"Ethereum/Presale.sol\":2748:2778  saleInfor.startSale = datas[1] */\n      sstore\n        /* \"Ethereum/Presale.sol\":2809:2817  datas[2] */\n      0x40\n      dup1\n      dup4\n      add\n      mload\n        /* \"Ethereum/Presale.sol\":2789:2806  saleInfor.endSale */\n      0x12\n        /* \"Ethereum/Presale.sol\":2789:2817  saleInfor.endSale = datas[2] */\n      sstore\n        /* \"Ethereum/Presale.sol\":2857:2865  datas[3] */\n      0x60\n      dup4\n      add\n      mload\n        /* \"Ethereum/Presale.sol\":2828:2854  saleInfor.minSpendPerBuyer */\n      0x13\n        /* \"Ethereum/Presale.sol\":2828:2865  saleInfor.minSpendPerBuyer = datas[3] */\n      sstore\n        /* \"Ethereum/Presale.sol\":2935:2954  saleInfor.baseToken */\n      sload(0x0f)\n        /* \"Ethereum/Presale.sol\":2929:2966  ERC20(saleInfor.baseToken).decimals() */\n      dup2\n      mload\n      shl(0xe0, 0x313ce567)\n      dup2\n      mstore\n      swap2\n      mload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"Ethereum/Presale.sol\":2935:2954  saleInfor.baseToken */\n      swap1\n      swap2\n      and\n      swap3\n        /* \"Ethereum/Presale.sol\":2929:2964  ERC20(saleInfor.baseToken).decimals */\n      0x313ce567\n      swap3\n        /* \"Ethereum/Presale.sol\":2929:2966  ERC20(saleInfor.baseToken).decimals() */\n      0x04\n      dup1\n      dup3\n      add\n      swap4\n      swap2\n      dup3\n      swap1\n      sub\n      add\n      dup2\n        /* \"Ethereum/Presale.sol\":2935:2954  saleInfor.baseToken */\n      dup7\n        /* \"Ethereum/Presale.sol\":2929:2966  ERC20(saleInfor.baseToken).decimals() */\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_138\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_138:\n      pop\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_140\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_140:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_141\n      swap2\n      swap1\n      tag_129\n      jump\t// in\n    tag_141:\n        /* \"Ethereum/Presale.sol\":2916:2967  10** uint256(ERC20(saleInfor.baseToken).decimals()) */\n      tag_142\n      swap1\n        /* \"Ethereum/Presale.sol\":2916:2918  10 */\n      0x0a\n        /* \"Ethereum/Presale.sol\":2916:2967  10** uint256(ERC20(saleInfor.baseToken).decimals()) */\n      tag_131\n      jump\t// in\n    tag_142:\n        /* \"Ethereum/Presale.sol\":2905:2913  datas[4] */\n      0x80\n      dup3\n      add\n      mload\n        /* \"Ethereum/Presale.sol\":2905:2967  datas[4] * 10** uint256(ERC20(saleInfor.baseToken).decimals()) */\n      tag_144\n      swap2\n      swap1\n      tag_134\n      jump\t// in\n    tag_144:\n        /* \"Ethereum/Presale.sol\":2876:2902  saleInfor.maxSpendPerBuyer */\n      0x14\n        /* \"Ethereum/Presale.sol\":2876:2967  saleInfor.maxSpendPerBuyer = datas[4] * 10** uint256(ERC20(saleInfor.baseToken).decimals()) */\n      sstore\n        /* \"Ethereum/Presale.sol\":3000:3008  datas[5] */\n      0xa0\n      dup2\n      add\n      mload\n        /* \"Ethereum/Presale.sol\":2978:2997  saleInfor.refundFee */\n      0x15\n        /* \"Ethereum/Presale.sol\":2978:3008  saleInfor.refundFee = datas[5] */\n      sstore\n        /* \"Ethereum/Presale.sol\":3040:3048  datas[6] */\n      0xc0\n      dup2\n      add\n      mload\n        /* \"Ethereum/Presale.sol\":3019:3037  saleInfor.claimFee */\n      0x16\n        /* \"Ethereum/Presale.sol\":3019:3048  saleInfor.claimFee = datas[6] */\n      sstore\n        /* \"Ethereum/Presale.sol\":3085:3093  datas[7] */\n      0xe0\n      dup2\n      add\n      mload\n        /* \"Ethereum/Presale.sol\":3059:3074  saleTotalSupply */\n      0x0b\n        /* \"Ethereum/Presale.sol\":3059:3093  saleTotalSupply.hardCap = datas[7] */\n      dup2\n      swap1\n      sstore\n        /* \"Ethereum/Presale.sol\":3130:3138  datas[8] */\n      0x0100\n      dup3\n      add\n      mload\n        /* \"Ethereum/Presale.sol\":3104:3127  saleTotalSupply.softCap */\n      0x0c\n        /* \"Ethereum/Presale.sol\":3104:3138  saleTotalSupply.softCap = datas[8] */\n      sstore\n        /* \"Ethereum/Presale.sol\":3202:3221  saleInfor.baseToken */\n      sload(0x0f)\n        /* \"Ethereum/Presale.sol\":3185:3189  WETH */\n      sload(0x19)\n        /* \"Ethereum/Presale.sol\":3149:3174  saleInfor.saleIsBaseToken */\n      0x17\n        /* \"Ethereum/Presale.sol\":3149:3222  saleInfor.saleIsBaseToken = address(WETH) == address(saleInfor.baseToken) */\n      dup1\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"Ethereum/Presale.sol\":3202:3221  saleInfor.baseToken */\n      swap4\n      dup5\n      and\n        /* \"Ethereum/Presale.sol\":3185:3189  WETH */\n      swap4\n      swap1\n      swap3\n      and\n        /* \"Ethereum/Presale.sol\":3177:3222  address(WETH) == address(saleInfor.baseToken) */\n      swap3\n      swap1\n      swap3\n      eq\n      not(0xff)\n        /* \"Ethereum/Presale.sol\":3149:3222  saleInfor.saleIsBaseToken = address(WETH) == address(saleInfor.baseToken) */\n      swap1\n      swap2\n      and\n      or\n      swap1\n      sstore\n        /* \"Ethereum/Presale.sol\":3264:3284  saleInfor.tokenPrice */\n      sload(0x10)\n        /* \"Ethereum/Presale.sol\":3264:3313  saleInfor.tokenPrice.mul(saleTotalSupply.hardCap) */\n      tag_149\n      swap2\n        /* \"Ethereum/Presale.sol\":3264:3288  saleInfor.tokenPrice.mul */\n      tag_150\n        /* \"Ethereum/Presale.sol\":3264:3313  saleInfor.tokenPrice.mul(saleTotalSupply.hardCap) */\n      jump\t// in\n    tag_149:\n        /* \"Ethereum/Presale.sol\":3233:3261  saleInfor.amountTokenForSale */\n      0x18\n        /* \"Ethereum/Presale.sol\":3233:3313  saleInfor.amountTokenForSale = saleInfor.tokenPrice.mul(saleTotalSupply.hardCap) */\n      sstore\n      pop\n      pop\n      pop\n      pop\n        /* \"Ethereum/Presale.sol\":2336:3321  function initialSaleInfor(\r... */\n      jump\t// out\n        /* \"Ethereum/Presale.sol\":5927:6811  function userClaimEmergency() external nonReentrant {\r... */\n    tag_69:\n        /* \"Utils/ReentrancyGuard.sol\":1778:1779  2 */\n      0x02\n        /* \"Utils/ReentrancyGuard.sol\":2376:2383  _status */\n      sload(0x00)\n        /* \"Utils/ReentrancyGuard.sol\":2376:2395  _status != _ENTERED */\n      eq\n      iszero\n        /* \"Utils/ReentrancyGuard.sol\":2368:2431  require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\") */\n      tag_152\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_115\n      swap1\n      tag_154\n      jump\t// in\n    tag_152:\n        /* \"Utils/ReentrancyGuard.sol\":1778:1779  2 */\n      0x02\n        /* \"Utils/ReentrancyGuard.sol\":2509:2516  _status */\n      0x00\n        /* \"Utils/ReentrancyGuard.sol\":2509:2527  _status = _ENTERED */\n      sstore\n        /* \"Ethereum/Presale.sol\":5998:6006  status() */\n      tag_156\n        /* \"Ethereum/Presale.sol\":5998:6004  status */\n      tag_40\n        /* \"Ethereum/Presale.sol\":5998:6006  status() */\n      jump\t// in\n    tag_156:\n        /* \"Ethereum/Presale.sol\":6010:6011  1 */\n      0x01\n        /* \"Ethereum/Presale.sol\":5998:6011  status() == 1 */\n      eq\n        /* \"Ethereum/Presale.sol\":5990:6028  require(status() == 1, \"Sale sucesss\") */\n      tag_157\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_115\n      swap1\n      tag_159\n      jump\t// in\n    tag_157:\n        /* \"Ethereum/Presale.sol\":6079:6111  presaleStatus.totalTokenWithDraw */\n      sload(0x06)\n        /* \"Ethereum/Presale.sol\":6048:6076  presaleStatus.totalTokenSold */\n      sload(0x05)\n        /* \"Ethereum/Presale.sol\":6114:6115  0 */\n      0x00\n      swap2\n        /* \"Ethereum/Presale.sol\":6048:6111  presaleStatus.totalTokenSold - presaleStatus.totalTokenWithDraw */\n      tag_160\n      swap2\n      tag_161\n      jump\t// in\n    tag_160:\n        /* \"Ethereum/Presale.sol\":6048:6115  presaleStatus.totalTokenSold - presaleStatus.totalTokenWithDraw > 0 */\n      gt\n        /* \"Ethereum/Presale.sol\":6040:6174  require(presaleStatus.totalTokenSold - presaleStatus.totalTokenWithDraw > 0, \r... */\n      tag_162\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_115\n      swap1\n      tag_164\n      jump\t// in\n    tag_162:\n        /* \"Ethereum/Presale.sol\":6221:6231  msg.sender */\n      caller\n        /* \"Ethereum/Presale.sol\":6185:6208  BuyerInfo storage buyer */\n      0x00\n        /* \"Ethereum/Presale.sol\":6211:6232  buyerInfo[msg.sender] */\n      swap1\n      dup2\n      mstore\n        /* \"Ethereum/Presale.sol\":6211:6220  buyerInfo */\n      0x02\n        /* \"Ethereum/Presale.sol\":6211:6232  buyerInfo[msg.sender] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"Ethereum/Presale.sol\":6251:6267  buyer.tokenOwner */\n      0x01\n      dup2\n      add\n      sload\n        /* \"Ethereum/Presale.sol\":6243:6315  require(buyer.tokenOwner > 0, \"You withdraw all or have not bought yet\") */\n      tag_165\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_115\n      swap1\n      tag_167\n      jump\t// in\n    tag_165:\n        /* \"Ethereum/Presale.sol\":6409:6428  uint256 amountClaim */\n      0x00\n        /* \"Ethereum/Presale.sol\":6431:6567  ((uint256(1000).sub(saleInfor.claimFee))\r... */\n      tag_168\n        /* \"Ethereum/Presale.sol\":6561:6565  1000 */\n      0x03e8\n        /* \"Ethereum/Presale.sol\":6432:6520  (uint256(1000).sub(saleInfor.claimFee))\r... */\n      tag_169\n        /* \"Ethereum/Presale.sol\":6503:6508  buyer */\n      dup5\n        /* \"Ethereum/Presale.sol\":6503:6519  buyer.tokenOwner */\n      0x01\n      add\n      sload\n        /* \"Ethereum/Presale.sol\":6433:6470  uint256(1000).sub(saleInfor.claimFee) */\n      tag_170\n        /* \"Ethereum/Presale.sol\":6451:6460  saleInfor */\n      0x0d\n        /* \"Ethereum/Presale.sol\":6451:6469  saleInfor.claimFee */\n      0x09\n      add\n      sload\n        /* \"Ethereum/Presale.sol\":6441:6445  1000 */\n      0x03e8\n        /* \"Ethereum/Presale.sol\":6433:6450  uint256(1000).sub */\n      tag_171\n      swap1\n        /* \"Ethereum/Presale.sol\":6433:6470  uint256(1000).sub(saleInfor.claimFee) */\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_170:\n        /* \"Ethereum/Presale.sol\":6432:6502  (uint256(1000).sub(saleInfor.claimFee))\r... */\n      swap1\n      tag_150\n        /* \"Ethereum/Presale.sol\":6432:6520  (uint256(1000).sub(saleInfor.claimFee))\r... */\n      jump\t// in\n    tag_169:\n        /* \"Ethereum/Presale.sol\":6431:6552  ((uint256(1000).sub(saleInfor.claimFee))\r... */\n      swap1\n      tag_172\n        /* \"Ethereum/Presale.sol\":6431:6567  ((uint256(1000).sub(saleInfor.claimFee))\r... */\n      jump\t// in\n    tag_168:\n        /* \"Ethereum/Presale.sol\":6409:6567  uint256 amountClaim = ((uint256(1000).sub(saleInfor.claimFee))\r... */\n      swap1\n      pop\n        /* \"Ethereum/Presale.sol\":6614:6625  amountClaim */\n      dup1\n        /* \"Ethereum/Presale.sol\":6578:6591  presaleStatus */\n      0x04\n        /* \"Ethereum/Presale.sol\":6578:6610  presaleStatus.totalTokenWithDraw */\n      0x02\n      add\n      0x00\n        /* \"Ethereum/Presale.sol\":6578:6625  presaleStatus.totalTokenWithDraw += amountClaim */\n      dup3\n      dup3\n      sload\n      tag_173\n      swap2\n      swap1\n      tag_174\n      jump\t// in\n    tag_173:\n      swap1\n      swap2\n      sstore\n      pop\n      pop\n        /* \"Ethereum/Presale.sol\":6660:6676  buyer.tokenOwner */\n      0x01\n      dup3\n      add\n      sload\n        /* \"Ethereum/Presale.sol\":6636:6657  uint256 feeClaimToken */\n      0x00\n      swap1\n        /* \"Ethereum/Presale.sol\":6660:6690  buyer.tokenOwner - amountClaim */\n      tag_175\n      swap1\n        /* \"Ethereum/Presale.sol\":6679:6690  amountClaim */\n      dup4\n      swap1\n        /* \"Ethereum/Presale.sol\":6660:6690  buyer.tokenOwner - amountClaim */\n      tag_161\n      jump\t// in\n    tag_175:\n        /* \"Ethereum/Presale.sol\":6701:6717  buyer.tokenOwner */\n      0x01\n      dup5\n      add\n        /* \"Ethereum/Presale.sol\":6701:6731  buyer.tokenOwner = amountClaim */\n      dup4\n      swap1\n      sstore\n        /* \"Ethereum/Presale.sol\":6749:6768  saleInfor.saleToken */\n      sload(0x0e)\n        /* \"Ethereum/Presale.sol\":6743:6803  ERC20(saleInfor.saleToken).transfer(msg.sender, amountClaim) */\n      mload(0x40)\n      shl(0xe0, 0xa9059cbb)\n      dup2\n      mstore\n        /* \"Ethereum/Presale.sol\":6636:6690  uint256 feeClaimToken = buyer.tokenOwner - amountClaim */\n      swap2\n      swap3\n      pop\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"Ethereum/Presale.sol\":6749:6768  saleInfor.saleToken */\n      and\n      swap1\n        /* \"Ethereum/Presale.sol\":6743:6778  ERC20(saleInfor.saleToken).transfer */\n      0xa9059cbb\n      swap1\n        /* \"Ethereum/Presale.sol\":6743:6803  ERC20(saleInfor.saleToken).transfer(msg.sender, amountClaim) */\n      tag_176\n      swap1\n        /* \"Ethereum/Presale.sol\":6779:6789  msg.sender */\n      caller\n      swap1\n        /* \"Ethereum/Presale.sol\":6720:6731  amountClaim */\n      dup7\n      swap1\n        /* \"Ethereum/Presale.sol\":6743:6803  ERC20(saleInfor.saleToken).transfer(msg.sender, amountClaim) */\n      0x04\n      add\n      tag_177\n      jump\t// in\n    tag_176:\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_178\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_178:\n      pop\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_180\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_180:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_181\n      swap2\n      swap1\n      tag_182\n      jump\t// in\n    tag_181:\n      pop\n      pop\n        /* \"Utils/ReentrancyGuard.sol\":1734:1735  1 */\n      0x01\n        /* \"Utils/ReentrancyGuard.sol\":2688:2695  _status */\n      0x00\n        /* \"Utils/ReentrancyGuard.sol\":2688:2710  _status = _NOT_ENTERED */\n      sstore\n      pop\n      pop\n        /* \"Ethereum/Presale.sol\":5927:6811  function userClaimEmergency() external nonReentrant {\r... */\n      jump\t// out\n        /* \"Ethereum/Presale.sol\":1582:1616  PresaleStatus public presaleStatus */\n    tag_72:\n      sload(0x04)\n      sload(0x05)\n      sload(0x06)\n      sload(0x07)\n      sload(0x08)\n      sload(0x09)\n      dup7\n      jump\t// out\n        /* \"Ethereum/Presale.sol\":1701:1719  IERC20 public WETH */\n    tag_77:\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x19))\n      dup2\n      jump\t// out\n        /* \"Ethereum/Presale.sol\":3794:5919  function deposit(uint256 _amount) external payable nonReentrant {\r... */\n    tag_83:\n        /* \"Utils/ReentrancyGuard.sol\":1778:1779  2 */\n      0x02\n        /* \"Utils/ReentrancyGuard.sol\":2376:2383  _status */\n      sload(0x00)\n        /* \"Utils/ReentrancyGuard.sol\":2376:2395  _status != _ENTERED */\n      eq\n      iszero\n        /* \"Utils/ReentrancyGuard.sol\":2368:2431  require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\") */\n      tag_184\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_115\n      swap1\n      tag_154\n      jump\t// in\n    tag_184:\n        /* \"Utils/ReentrancyGuard.sol\":1778:1779  2 */\n      0x02\n        /* \"Utils/ReentrancyGuard.sol\":2509:2516  _status */\n      0x00\n        /* \"Utils/ReentrancyGuard.sol\":2509:2527  _status = _ENTERED */\n      sstore\n        /* \"Ethereum/Presale.sol\":3877:3885  status() */\n      tag_187\n        /* \"Ethereum/Presale.sol\":3877:3883  status */\n      tag_40\n        /* \"Ethereum/Presale.sol\":3877:3885  status() */\n      jump\t// in\n    tag_187:\n        /* \"Ethereum/Presale.sol\":3889:3890  1 */\n      0x01\n        /* \"Ethereum/Presale.sol\":3877:3890  status() == 1 */\n      eq\n        /* \"Ethereum/Presale.sol\":3869:3905  require(status() == 1, \"Not active\") */\n      tag_188\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_115\n      swap1\n      tag_190\n      jump\t// in\n    tag_188:\n        /* \"Ethereum/Presale.sol\":3962:3972  msg.sender */\n      caller\n        /* \"Ethereum/Presale.sol\":3926:3949  BuyerInfo storage buyer */\n      0x00\n        /* \"Ethereum/Presale.sol\":3952:3973  buyerInfo[msg.sender] */\n      swap1\n      dup2\n      mstore\n        /* \"Ethereum/Presale.sol\":3952:3961  buyerInfo */\n      0x02\n        /* \"Ethereum/Presale.sol\":3952:3973  buyerInfo[msg.sender] */\n      0x20\n      mstore\n      0x40\n      dup2\n      keccak256\n        /* \"Ethereum/Presale.sol\":4158:4184  saleInfor.minSpendPerBuyer */\n      sload(0x13)\n        /* \"Ethereum/Presale.sol\":3952:3973  buyerInfo[msg.sender] */\n      swap1\n      swap2\n        /* \"Ethereum/Presale.sol\":4004:4011  _amount */\n      dup4\n      swap2\n      dup3\n      swap2\n        /* \"Ethereum/Presale.sol\":3926:3949  BuyerInfo storage buyer */\n      swap1\n        /* \"Ethereum/Presale.sol\":4117:4121  1000 */\n      0x03e8\n      swap1\n        /* \"Ethereum/Presale.sol\":4140:4184  real_amount_in >= saleInfor.minSpendPerBuyer */\n      dup4\n      lt\n      iszero\n        /* \"Ethereum/Presale.sol\":4132:4233  require(real_amount_in >= saleInfor.minSpendPerBuyer, \r... */\n      tag_191\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_115\n      swap1\n      tag_193\n      jump\t// in\n    tag_191:\n        /* \"Ethereum/Presale.sol\":4270:4296  saleInfor.maxSpendPerBuyer */\n      sload(0x14)\n        /* \"Ethereum/Presale.sol\":4252:4296  real_amount_in <= saleInfor.maxSpendPerBuyer */\n      dup4\n      gt\n      iszero\n        /* \"Ethereum/Presale.sol\":4244:4343  require(real_amount_in <= saleInfor.maxSpendPerBuyer, \r... */\n      tag_194\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_115\n      swap1\n      tag_196\n      jump\t// in\n    tag_194:\n        /* \"Ethereum/Presale.sol\":4358:4377  checkAdminAddress() */\n      tag_197\n        /* \"Ethereum/Presale.sol\":4358:4375  checkAdminAddress */\n      tag_86\n        /* \"Ethereum/Presale.sol\":4358:4377  checkAdminAddress() */\n      jump\t// in\n    tag_197:\n        /* \"Ethereum/Presale.sol\":4354:4620  if(!checkAdminAddress()) {\r... */\n      tag_198\n      jumpi\n        /* \"Ethereum/Presale.sol\":4411:4544  ((fullPercenFee.sub(feeAnyone))\r... */\n      tag_199\n        /* \"Ethereum/Presale.sol\":4530:4543  fullPercenFee */\n      dup2\n        /* \"Ethereum/Presale.sol\":4412:4493  (fullPercenFee.sub(feeAnyone))\r... */\n      tag_169\n        /* \"Ethereum/Presale.sol\":4478:4492  real_amount_in */\n      dup6\n        /* \"Ethereum/Presale.sol\":4413:4441  fullPercenFee.sub(feeAnyone) */\n      tag_170\n        /* \"Ethereum/Presale.sol\":4431:4440  feeAnyone */\n      sload(0x1a)\n        /* \"Ethereum/Presale.sol\":4413:4426  fullPercenFee */\n      dup7\n        /* \"Ethereum/Presale.sol\":4413:4430  fullPercenFee.sub */\n      tag_171\n      swap1\n        /* \"Ethereum/Presale.sol\":4413:4441  fullPercenFee.sub(feeAnyone) */\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n        /* \"Ethereum/Presale.sol\":4411:4544  ((fullPercenFee.sub(feeAnyone))\r... */\n    tag_199:\n        /* \"Ethereum/Presale.sol\":4394:4544  real_amount_in = ((fullPercenFee.sub(feeAnyone))\r... */\n      swap3\n      pop\n        /* \"Ethereum/Presale.sol\":4565:4591  amount_in - real_amount_in */\n      tag_202\n        /* \"Ethereum/Presale.sol\":4394:4544  real_amount_in = ((fullPercenFee.sub(feeAnyone))\r... */\n      dup4\n        /* \"Ethereum/Presale.sol\":4565:4574  amount_in */\n      dup6\n        /* \"Ethereum/Presale.sol\":4565:4591  amount_in - real_amount_in */\n      tag_161\n      jump\t// in\n    tag_202:\n        /* \"Ethereum/Presale.sol\":4559:4591  fee = amount_in - real_amount_in */\n      swap2\n      pop\n        /* \"Ethereum/Presale.sol\":4354:4620  if(!checkAdminAddress()) {\r... */\n    tag_198:\n        /* \"Ethereum/Presale.sol\":4685:4702  buyer.baseDeposit */\n      dup5\n      sload\n        /* \"Ethereum/Presale.sol\":4656:4682  saleInfor.maxSpendPerBuyer */\n      sload(0x14)\n        /* \"Ethereum/Presale.sol\":4630:4653  uint256 remainingByUser */\n      0x00\n      swap2\n        /* \"Ethereum/Presale.sol\":4656:4702  saleInfor.maxSpendPerBuyer - buyer.baseDeposit */\n      tag_203\n      swap2\n      tag_161\n      jump\t// in\n    tag_203:\n        /* \"Ethereum/Presale.sol\":4770:4783  presaleStatus */\n      0x04\n        /* \"Ethereum/Presale.sol\":4770:4802  presaleStatus.totalBaseCollected */\n      sload\n        /* \"Ethereum/Presale.sol\":4739:4767  saleInfor.amountTokenForSale */\n      sload(0x18)\n        /* \"Ethereum/Presale.sol\":4630:4702  uint256 remainingByUser = saleInfor.maxSpendPerBuyer - buyer.baseDeposit */\n      swap2\n      swap3\n      pop\n        /* \"Ethereum/Presale.sol\":4713:4736  uint256 remainingByPool */\n      0x00\n      swap2\n        /* \"Ethereum/Presale.sol\":4739:4802  saleInfor.amountTokenForSale - presaleStatus.totalBaseCollected */\n      tag_204\n      swap2\n        /* \"Ethereum/Presale.sol\":4770:4802  presaleStatus.totalBaseCollected */\n      swap1\n        /* \"Ethereum/Presale.sol\":4739:4802  saleInfor.amountTokenForSale - presaleStatus.totalBaseCollected */\n      tag_161\n      jump\t// in\n    tag_204:\n        /* \"Ethereum/Presale.sol\":4713:4802  uint256 remainingByPool = saleInfor.amountTokenForSale - presaleStatus.totalBaseCollected */\n      swap1\n      pop\n        /* \"Ethereum/Presale.sol\":4813:4830  uint256 allowance */\n      0x00\n        /* \"Ethereum/Presale.sol\":4851:4866  remainingByPool */\n      dup2\n        /* \"Ethereum/Presale.sol\":4833:4848  remainingByUser */\n      dup4\n        /* \"Ethereum/Presale.sol\":4833:4866  remainingByUser > remainingByPool */\n      gt\n        /* \"Ethereum/Presale.sol\":4833:4902  remainingByUser > remainingByPool ? remainingByPool : remainingByUser */\n      tag_205\n      jumpi\n        /* \"Ethereum/Presale.sol\":4887:4902  remainingByUser */\n      dup3\n        /* \"Ethereum/Presale.sol\":4833:4902  remainingByUser > remainingByPool ? remainingByPool : remainingByUser */\n      jump(tag_206)\n    tag_205:\n        /* \"Ethereum/Presale.sol\":4869:4884  remainingByPool */\n      dup2\n        /* \"Ethereum/Presale.sol\":4833:4902  remainingByUser > remainingByPool ? remainingByPool : remainingByUser */\n    tag_206:\n        /* \"Ethereum/Presale.sol\":4813:4902  uint256 allowance = remainingByUser > remainingByPool ? remainingByPool : remainingByUser */\n      swap1\n      pop\n        /* \"Ethereum/Presale.sol\":4938:4947  allowance */\n      dup1\n        /* \"Ethereum/Presale.sol\":4921:4935  real_amount_in */\n      dup7\n        /* \"Ethereum/Presale.sol\":4921:4947  real_amount_in < allowance */\n      lt\n        /* \"Ethereum/Presale.sol\":4913:4967  require(real_amount_in < allowance, \"Sale is success\") */\n      tag_207\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_115\n      swap1\n      tag_209\n      jump\t// in\n    tag_207:\n        /* \"Ethereum/Presale.sol\":4978:4995  uint256 tokenSold */\n      0x00\n        /* \"Ethereum/Presale.sol\":4999:5157  real_amount_in.\r... */\n      tag_210\n        /* \"Ethereum/Presale.sol\":5124:5133  saleInfor */\n      0x0d\n        /* \"Ethereum/Presale.sol\":5124:5143  saleInfor.baseToken */\n      0x02\n      add\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"Ethereum/Presale.sol\":5118:5153  ERC20(saleInfor.baseToken).decimals */\n      and\n      0x313ce567\n        /* \"Ethereum/Presale.sol\":5118:5155  ERC20(saleInfor.baseToken).decimals() */\n      mload(0x40)\n      dup2\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup7\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_211\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_211:\n      pop\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_213\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_213:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_214\n      swap2\n      swap1\n      tag_129\n      jump\t// in\n    tag_214:\n        /* \"Ethereum/Presale.sol\":5104:5156  10 ** uint256(ERC20(saleInfor.baseToken).decimals()) */\n      tag_215\n      swap1\n        /* \"Ethereum/Presale.sol\":5104:5106  10 */\n      0x0a\n        /* \"Ethereum/Presale.sol\":5104:5156  10 ** uint256(ERC20(saleInfor.baseToken).decimals()) */\n      tag_131\n      jump\t// in\n    tag_215:\n        /* \"Ethereum/Presale.sol\":5048:5068  saleInfor.tokenPrice */\n      sload(0x10)\n        /* \"Ethereum/Presale.sol\":4999:5069  real_amount_in.\r... */\n      tag_169\n      swap1\n        /* \"Ethereum/Presale.sol\":4999:5013  real_amount_in */\n      dup11\n      swap1\n        /* \"Ethereum/Presale.sol\":4999:5047  real_amount_in.\r... */\n      tag_150\n        /* \"Ethereum/Presale.sol\":4999:5069  real_amount_in.\r... */\n      jump\t// in\n        /* \"Ethereum/Presale.sol\":4999:5157  real_amount_in.\r... */\n    tag_210:\n        /* \"Ethereum/Presale.sol\":4978:5158  uint256 tokenSold = (real_amount_in.\r... */\n      swap1\n      pop\n        /* \"Ethereum/Presale.sol\":5207:5216  amount_in */\n      dup8\n        /* \"Ethereum/Presale.sol\":5186:5191  buyer */\n      dup10\n        /* \"Ethereum/Presale.sol\":5186:5203  buyer.baseDeposit */\n      0x00\n      add\n      0x00\n        /* \"Ethereum/Presale.sol\":5186:5216  buyer.baseDeposit += amount_in */\n      dup3\n      dup3\n      sload\n      tag_217\n      swap2\n      swap1\n      tag_174\n      jump\t// in\n    tag_217:\n      swap3\n      pop\n      pop\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"Ethereum/Presale.sol\":5247:5256  tokenSold */\n      dup1\n        /* \"Ethereum/Presale.sol\":5227:5232  buyer */\n      dup10\n        /* \"Ethereum/Presale.sol\":5227:5243  buyer.tokenOwner */\n      0x01\n      add\n      0x00\n        /* \"Ethereum/Presale.sol\":5227:5256  buyer.tokenOwner += tokenSold */\n      dup3\n      dup3\n      sload\n      tag_218\n      swap2\n      swap1\n      tag_174\n      jump\t// in\n    tag_218:\n      swap1\n      swap2\n      sstore\n      pop\n      pop\n        /* \"Ethereum/Presale.sol\":5267:5280  presaleStatus */\n      0x04\n        /* \"Ethereum/Presale.sol\":5267:5317  presaleStatus.totalBaseCollected += real_amount_in */\n      dup1\n      sload\n        /* \"Ethereum/Presale.sol\":5303:5317  real_amount_in */\n      dup9\n      swap2\n        /* \"Ethereum/Presale.sol\":5267:5280  presaleStatus */\n      swap1\n        /* \"Ethereum/Presale.sol\":5267:5299  presaleStatus.totalBaseCollected */\n      0x00\n      swap1\n        /* \"Ethereum/Presale.sol\":5267:5317  presaleStatus.totalBaseCollected += real_amount_in */\n      tag_219\n      swap1\n        /* \"Ethereum/Presale.sol\":5303:5317  real_amount_in */\n      dup5\n      swap1\n        /* \"Ethereum/Presale.sol\":5267:5317  presaleStatus.totalBaseCollected += real_amount_in */\n      tag_174\n      jump\t// in\n    tag_219:\n      swap1\n      swap2\n      sstore\n      pop\n      pop\n        /* \"Ethereum/Presale.sol\":5328:5356  presaleStatus.totalTokenSold */\n      0x05\n        /* \"Ethereum/Presale.sol\":5328:5369  presaleStatus.totalTokenSold += tokenSold */\n      dup1\n      sload\n        /* \"Ethereum/Presale.sol\":5360:5369  tokenSold */\n      dup3\n      swap2\n        /* \"Ethereum/Presale.sol\":5328:5356  presaleStatus.totalTokenSold */\n      swap1\n      0x00\n      swap1\n        /* \"Ethereum/Presale.sol\":5328:5369  presaleStatus.totalTokenSold += tokenSold */\n      tag_220\n      swap1\n        /* \"Ethereum/Presale.sol\":5360:5369  tokenSold */\n      dup5\n      swap1\n        /* \"Ethereum/Presale.sol\":5328:5369  presaleStatus.totalTokenSold += tokenSold */\n      tag_174\n      jump\t// in\n    tag_220:\n      swap1\n      swap2\n      sstore\n      pop\n      pop\n        /* \"Ethereum/Presale.sol\":5380:5405  presaleStatus.numberBuyer */\n      0x08\n        /* \"Ethereum/Presale.sol\":5380:5407  presaleStatus.numberBuyer++ */\n      dup1\n      sload\n      swap1\n        /* \"Ethereum/Presale.sol\":5380:5405  presaleStatus.numberBuyer */\n      0x00\n        /* \"Ethereum/Presale.sol\":5380:5407  presaleStatus.numberBuyer++ */\n      tag_221\n      dup4\n      tag_222\n      jump\t// in\n    tag_221:\n      swap1\n      swap2\n      sstore\n      pop\n      pop\n        /* \"Ethereum/Presale.sol\":5426:5436  msg.sender */\n      caller\n        /* \"Ethereum/Presale.sol\":5418:5437  userFee[msg.sender] */\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"Ethereum/Presale.sol\":5418:5425  userFee */\n      0x03\n        /* \"Ethereum/Presale.sol\":5418:5437  userFee[msg.sender] */\n      0x20\n      mstore\n      0x40\n      dup2\n      keccak256\n        /* \"Ethereum/Presale.sol\":5418:5444  userFee[msg.sender] += fee */\n      dup1\n      sload\n        /* \"Ethereum/Presale.sol\":5441:5444  fee */\n      dup9\n      swap3\n        /* \"Ethereum/Presale.sol\":5418:5437  userFee[msg.sender] */\n      swap1\n        /* \"Ethereum/Presale.sol\":5418:5444  userFee[msg.sender] += fee */\n      tag_223\n      swap1\n        /* \"Ethereum/Presale.sol\":5441:5444  fee */\n      dup5\n      swap1\n        /* \"Ethereum/Presale.sol\":5418:5444  userFee[msg.sender] += fee */\n      tag_174\n      jump\t// in\n    tag_223:\n      swap3\n      pop\n      pop\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"Ethereum/Presale.sol\":5467:5470  fee */\n      dup6\n        /* \"Ethereum/Presale.sol\":5455:5463  totalFee */\n      0x1d\n      0x00\n        /* \"Ethereum/Presale.sol\":5455:5470  totalFee += fee */\n      dup3\n      dup3\n      sload\n      tag_224\n      swap2\n      swap1\n      tag_174\n      jump\t// in\n    tag_224:\n      swap1\n      swap2\n      sstore\n      pop\n      pop\n        /* \"Ethereum/Presale.sol\":5486:5511  saleInfor.saleIsBaseToken */\n      and(0xff, sload(0x17))\n        /* \"Ethereum/Presale.sol\":5486:5547  saleInfor.saleIsBaseToken && real_amount_in + fee < msg.value */\n      dup1\n      iszero\n      tag_225\n      jumpi\n      pop\n        /* \"Ethereum/Presale.sol\":5538:5547  msg.value */\n      callvalue\n        /* \"Ethereum/Presale.sol\":5515:5535  real_amount_in + fee */\n      tag_226\n        /* \"Ethereum/Presale.sol\":5532:5535  fee */\n      dup8\n        /* \"Ethereum/Presale.sol\":5515:5529  real_amount_in */\n      dup10\n        /* \"Ethereum/Presale.sol\":5515:5535  real_amount_in + fee */\n      tag_174\n      jump\t// in\n    tag_226:\n        /* \"Ethereum/Presale.sol\":5515:5547  real_amount_in + fee < msg.value */\n      lt\n        /* \"Ethereum/Presale.sol\":5486:5547  saleInfor.saleIsBaseToken && real_amount_in + fee < msg.value */\n    tag_225:\n        /* \"Ethereum/Presale.sol\":5483:5638  if(saleInfor.saleIsBaseToken && real_amount_in + fee < msg.value) {\r... */\n      iszero\n      tag_227\n      jumpi\n        /* \"Ethereum/Presale.sol\":5572:5582  msg.sender */\n      caller\n        /* \"Ethereum/Presale.sol\":5564:5626  payable(msg.sender).transfer(msg.value - real_amount_in - fee) */\n      0x08fc\n        /* \"Ethereum/Presale.sol\":5622:5625  fee */\n      dup8\n        /* \"Ethereum/Presale.sol\":5593:5619  msg.value - real_amount_in */\n      tag_228\n        /* \"Ethereum/Presale.sol\":5605:5619  real_amount_in */\n      dup11\n        /* \"Ethereum/Presale.sol\":5593:5602  msg.value */\n      callvalue\n        /* \"Ethereum/Presale.sol\":5593:5619  msg.value - real_amount_in */\n      tag_161\n      jump\t// in\n    tag_228:\n        /* \"Ethereum/Presale.sol\":5593:5625  msg.value - real_amount_in - fee */\n      tag_229\n      swap2\n      swap1\n      tag_161\n      jump\t// in\n    tag_229:\n        /* \"Ethereum/Presale.sol\":5564:5626  payable(msg.sender).transfer(msg.value - real_amount_in - fee) */\n      mload(0x40)\n      dup2\n      iszero\n      swap1\n      swap3\n      mul\n      swap2\n      0x00\n      dup2\n      dup2\n      dup2\n      dup6\n      dup9\n      dup9\n      call\n      swap4\n      pop\n      pop\n      pop\n      pop\n      iszero\n      dup1\n      iszero\n      tag_231\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_231:\n      pop\n        /* \"Ethereum/Presale.sol\":5483:5638  if(saleInfor.saleIsBaseToken && real_amount_in + fee < msg.value) {\r... */\n    tag_227:\n        /* \"Ethereum/Presale.sol\":5653:5678  saleInfor.saleIsBaseToken */\n      and(0xff, sload(0x17))\n        /* \"Ethereum/Presale.sol\":5649:5900  if(!saleInfor.saleIsBaseToken) {\r... */\n      tag_233\n      jumpi\n        /* \"Ethereum/Presale.sol\":5753:5772  saleInfor.baseToken */\n      sload(0x0f)\n        /* \"Ethereum/Presale.sol\":5695:5888  TransferHelper.safeTransferFrom(\r... */\n      tag_233\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"Ethereum/Presale.sol\":5753:5772  saleInfor.baseToken */\n      and\n        /* \"Ethereum/Presale.sol\":5792:5802  msg.sender */\n      caller\n        /* \"Ethereum/Presale.sol\":5829:5833  this */\n      address\n        /* \"Ethereum/Presale.sol\":5853:5873  real_amount_in + fee */\n      tag_234\n        /* \"Ethereum/Presale.sol\":5870:5873  fee */\n      dup11\n        /* \"Ethereum/Presale.sol\":5853:5867  real_amount_in */\n      dup13\n        /* \"Ethereum/Presale.sol\":5853:5873  real_amount_in + fee */\n      tag_174\n      jump\t// in\n    tag_234:\n        /* \"Ethereum/Presale.sol\":5695:5726  TransferHelper.safeTransferFrom */\n      tag_235\n        /* \"Ethereum/Presale.sol\":5695:5888  TransferHelper.safeTransferFrom(\r... */\n      jump\t// in\n    tag_233:\n      pop\n      pop\n        /* \"Utils/ReentrancyGuard.sol\":1734:1735  1 */\n      0x01\n        /* \"Utils/ReentrancyGuard.sol\":2688:2695  _status */\n      0x00\n        /* \"Utils/ReentrancyGuard.sol\":2688:2710  _status = _NOT_ENTERED */\n      sstore\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n        /* \"Ethereum/Presale.sol\":3794:5919  function deposit(uint256 _amount) external payable nonReentrant {\r... */\n      jump\t// out\n        /* \"Ethereum/Presale.sol\":3676:3786  function checkAdminAddress() public view returns(bool) {\r... */\n    tag_86:\n        /* \"Ethereum/Presale.sol\":3725:3729  bool */\n      0x00\n        /* \"Ethereum/Presale.sol\":3749:3778  admins.contains(_msgSender()) */\n      tag_237\n        /* \"Ethereum/Presale.sol\":3765:3777  _msgSender() */\n      tag_238\n        /* \"Ethereum/Presale.sol\":3765:3775  _msgSender */\n      tag_112\n        /* \"Ethereum/Presale.sol\":3765:3777  _msgSender() */\n      jump\t// in\n    tag_238:\n        /* \"Ethereum/Presale.sol\":3749:3755  admins */\n      0x1b\n      swap1\n        /* \"Ethereum/Presale.sol\":3749:3764  admins.contains */\n      tag_239\n        /* \"Ethereum/Presale.sol\":3749:3778  admins.contains(_msgSender()) */\n      jump\t// in\n    tag_237:\n        /* \"Ethereum/Presale.sol\":3742:3778  return admins.contains(_msgSender()) */\n      swap1\n      pop\n        /* \"Ethereum/Presale.sol\":3676:3786  function checkAdminAddress() public view returns(bool) {\r... */\n      swap1\n      jump\t// out\n        /* \"Ethereum/Presale.sol\":1480:1526  mapping(address => BuyerInfo) public buyerInfo */\n    tag_92:\n      0x02\n      0x20\n      dup2\n      swap1\n      mstore\n      0x00\n      swap2\n      dup3\n      mstore\n      0x40\n      swap1\n      swap2\n      keccak256\n      dup1\n      sload\n      0x01\n      dup3\n      add\n      sload\n      swap3\n      dup3\n      add\n      sload\n      0x03\n      dup4\n      add\n      sload\n      0x04\n      swap1\n      swap4\n      add\n      sload\n      swap2\n      swap4\n      swap3\n      swap1\n      swap2\n      0xff\n      dup1\n      dup3\n      and\n      swap2\n      0x0100\n      swap1\n      div\n      and\n      dup7\n      jump\t// out\n        /* \"Utils/Ownable.sol\":1972:2173  function transferOwnership(address newOwner) public virtual onlyOwner {\r... */\n    tag_98:\n        /* \"Utils/Ownable.sol\":1294:1306  _msgSender() */\n      tag_241\n        /* \"Utils/Ownable.sol\":1294:1304  _msgSender */\n      tag_112\n        /* \"Utils/Ownable.sol\":1294:1306  _msgSender() */\n      jump\t// in\n    tag_241:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"Utils/Ownable.sol\":1283:1306  owner() == _msgSender() */\n      and\n        /* \"Utils/Ownable.sol\":1283:1290  owner() */\n      tag_242\n        /* \"Utils/Ownable.sol\":1283:1288  owner */\n      tag_59\n        /* \"Utils/Ownable.sol\":1283:1290  owner() */\n      jump\t// in\n    tag_242:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"Utils/Ownable.sol\":1283:1306  owner() == _msgSender() */\n      and\n      eq\n        /* \"Utils/Ownable.sol\":1275:1343  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_243\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_115\n      swap1\n      tag_116\n      jump\t// in\n    tag_243:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"Utils/Ownable.sol\":2061:2083  newOwner != address(0) */\n      dup2\n      and\n        /* \"Utils/Ownable.sol\":2053:2126  require(newOwner != address(0), \"Ownable: new owner is the zero address\") */\n      tag_246\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_115\n      swap1\n      tag_248\n      jump\t// in\n    tag_246:\n        /* \"Utils/Ownable.sol\":2137:2165  _transferOwnership(newOwner) */\n      tag_122\n        /* \"Utils/Ownable.sol\":2156:2164  newOwner */\n      dup2\n        /* \"Utils/Ownable.sol\":2137:2155  _transferOwnership */\n      tag_119\n        /* \"Utils/Ownable.sol\":2137:2165  _transferOwnership(newOwner) */\n      jump\t// in\n        /* \"Ethereum/Presale.sol\":6819:6930  function getBalance(address _address) external view returns(uint256) {\r... */\n    tag_102:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"Ethereum/Presale.sol\":6906:6922  _address.balance */\n      and\n      balance\n      swap1\n        /* \"Ethereum/Presale.sol\":6819:6930  function getBalance(address _address) external view returns(uint256) {\r... */\n      jump\t// out\n        /* \"Utils/EnumerableSet.sol\":8259:8411  function add(AddressSet storage set, address value) internal returns (bool) {\r... */\n    tag_104:\n        /* \"Utils/EnumerableSet.sol\":8329:8333  bool */\n      0x00\n        /* \"Utils/EnumerableSet.sol\":8353:8403  _add(set._inner, bytes32(uint256(uint160(value)))) */\n      tag_252\n        /* \"Utils/EnumerableSet.sol\":8358:8361  set */\n      dup4\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"Utils/EnumerableSet.sol\":8378:8401  uint256(uint160(value)) */\n      dup5\n      and\n        /* \"Utils/EnumerableSet.sol\":8353:8357  _add */\n      tag_253\n        /* \"Utils/EnumerableSet.sol\":8353:8403  _add(set._inner, bytes32(uint256(uint160(value)))) */\n      jump\t// in\n    tag_252:\n        /* \"Utils/EnumerableSet.sol\":8346:8403  return _add(set._inner, bytes32(uint256(uint160(value)))) */\n      swap1\n      pop\n        /* \"Utils/EnumerableSet.sol\":8259:8411  function add(AddressSet storage set, address value) internal returns (bool) {\r... */\n    tag_251:\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"Utils/Context.sol\":656:754  function _msgSender() internal view virtual returns (address) {\r... */\n    tag_112:\n        /* \"Utils/Context.sol\":736:746  msg.sender */\n      caller\n        /* \"Utils/Context.sol\":656:754  function _msgSender() internal view virtual returns (address) {\r... */\n      swap1\n      jump\t// out\n        /* \"Utils/Ownable.sol\":2333:2524  function _transferOwnership(address newOwner) internal virtual {\r... */\n    tag_119:\n        /* \"Utils/Ownable.sol\":2426:2432  _owner */\n      0x01\n      dup1\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"Utils/Ownable.sol\":2443:2460  _owner = newOwner */\n      dup4\n      dup2\n      and\n      not(sub(shl(0xa0, 0x01), 0x01))\n      dup4\n      and\n      dup2\n      or\n      swap1\n      swap4\n      sstore\n        /* \"Utils/Ownable.sol\":2476:2516  OwnershipTransferred(oldOwner, newOwner) */\n      mload(0x40)\n        /* \"Utils/Ownable.sol\":2426:2432  _owner */\n      swap2\n      and\n      swap2\n        /* \"Utils/Ownable.sol\":2443:2460  _owner = newOwner */\n      swap1\n        /* \"Utils/Ownable.sol\":2426:2432  _owner */\n      dup3\n      swap1\n        /* \"Utils/Ownable.sol\":2476:2516  OwnershipTransferred(oldOwner, newOwner) */\n      0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\n      swap1\n        /* \"Utils/Ownable.sol\":2407:2423  address oldOwner */\n      0x00\n      swap1\n        /* \"Utils/Ownable.sol\":2476:2516  OwnershipTransferred(oldOwner, newOwner) */\n      log3\n        /* \"Utils/Ownable.sol\":2333:2524  function _transferOwnership(address newOwner) internal virtual {\r... */\n      pop\n      pop\n      jump\t// out\n        /* \"Utils/SafeMath.sol\":3585:3683  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r... */\n    tag_150:\n        /* \"Utils/SafeMath.sol\":3643:3650  uint256 */\n      0x00\n        /* \"Utils/SafeMath.sol\":3670:3675  a * b */\n      tag_252\n        /* \"Utils/SafeMath.sol\":3674:3675  b */\n      dup3\n        /* \"Utils/SafeMath.sol\":3670:3671  a */\n      dup5\n        /* \"Utils/SafeMath.sol\":3670:3675  a * b */\n      tag_134\n      jump\t// in\n        /* \"Utils/SafeMath.sol\":3228:3326  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r... */\n    tag_171:\n        /* \"Utils/SafeMath.sol\":3286:3293  uint256 */\n      0x00\n        /* \"Utils/SafeMath.sol\":3313:3318  a - b */\n      tag_252\n        /* \"Utils/SafeMath.sol\":3317:3318  b */\n      dup3\n        /* \"Utils/SafeMath.sol\":3313:3314  a */\n      dup5\n        /* \"Utils/SafeMath.sol\":3313:3318  a - b */\n      tag_161\n      jump\t// in\n        /* \"Utils/SafeMath.sol\":3984:4082  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r... */\n    tag_172:\n        /* \"Utils/SafeMath.sol\":4042:4049  uint256 */\n      0x00\n        /* \"Utils/SafeMath.sol\":4069:4074  a / b */\n      tag_252\n        /* \"Utils/SafeMath.sol\":4073:4074  b */\n      dup3\n        /* \"Utils/SafeMath.sol\":4069:4070  a */\n      dup5\n        /* \"Utils/SafeMath.sol\":4069:4074  a / b */\n      tag_262\n      jump\t// in\n        /* \"Utils/TransferHelper.sol\":1073:1503  function safeTransferFrom(\r... */\n    tag_235:\n        /* \"Utils/TransferHelper.sol\":1219:1231  bool success */\n      0x00\n        /* \"Utils/TransferHelper.sol\":1233:1250  bytes memory data */\n      dup1\n        /* \"Utils/TransferHelper.sol\":1254:1259  token */\n      dup6\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"Utils/TransferHelper.sol\":1254:1264  token.call */\n      and\n        /* \"Utils/TransferHelper.sol\":1302:1312  0x23b872dd */\n      0x23b872dd\n        /* \"Utils/TransferHelper.sol\":1314:1318  from */\n      dup7\n        /* \"Utils/TransferHelper.sol\":1320:1322  to */\n      dup7\n        /* \"Utils/TransferHelper.sol\":1324:1329  value */\n      dup7\n        /* \"Utils/TransferHelper.sol\":1279:1330  abi.encodeWithSelector(0x23b872dd, from, to, value) */\n      add(0x24, mload(0x40))\n      tag_264\n      swap4\n      swap3\n      swap2\n      swap1\n      tag_265\n      jump\t// in\n    tag_264:\n      mload(0x40)\n      0x20\n      dup2\n      dup4\n      sub\n      sub\n      dup2\n      mstore\n      swap1\n      0x40\n      mstore\n      swap1\n      0xe0\n      shl\n      0x20\n      dup3\n      add\n      dup1\n      mload\n      sub(shl(0xe0, 0x01), 0x01)\n      dup4\n      dup2\n      dup4\n      and\n      or\n      dup4\n      mstore\n      pop\n      pop\n      pop\n      pop\n        /* \"Utils/TransferHelper.sol\":1254:1341  token.call(\r... */\n      mload(0x40)\n      tag_266\n      swap2\n      swap1\n      tag_267\n      jump\t// in\n    tag_266:\n      0x00\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup7\n      gas\n      call\n      swap2\n      pop\n      pop\n      returndatasize\n      dup1\n      0x00\n      dup2\n      eq\n      tag_270\n      jumpi\n      mload(0x40)\n      swap2\n      pop\n      and(add(returndatasize, 0x3f), not(0x1f))\n      dup3\n      add\n      0x40\n      mstore\n      returndatasize\n      dup3\n      mstore\n      returndatasize\n      0x00\n      0x20\n      dup5\n      add\n      returndatacopy\n      jump(tag_269)\n    tag_270:\n      0x60\n      swap2\n      pop\n    tag_269:\n      pop\n        /* \"Utils/TransferHelper.sol\":1218:1341  (bool success, bytes memory data) = token.call(\r... */\n      swap2\n      pop\n      swap2\n      pop\n        /* \"Utils/TransferHelper.sol\":1374:1381  success */\n      dup2\n        /* \"Utils/TransferHelper.sol\":1374:1431  success && (data.length == 0 || abi.decode(data, (bool))) */\n      dup1\n      iszero\n      tag_273\n      jumpi\n      pop\n        /* \"Utils/TransferHelper.sol\":1386:1397  data.length */\n      dup1\n      mload\n        /* \"Utils/TransferHelper.sol\":1386:1402  data.length == 0 */\n      iszero\n      dup1\n        /* \"Utils/TransferHelper.sol\":1386:1430  data.length == 0 || abi.decode(data, (bool)) */\n      tag_273\n      jumpi\n      pop\n        /* \"Utils/TransferHelper.sol\":1417:1421  data */\n      dup1\n        /* \"Utils/TransferHelper.sol\":1406:1430  abi.decode(data, (bool)) */\n      dup1\n      0x20\n      add\n      swap1\n      mload\n      dup2\n      add\n      swap1\n      tag_273\n      swap2\n      swap1\n      tag_182\n      jump\t// in\n    tag_273:\n        /* \"Utils/TransferHelper.sol\":1352:1495  require(\r... */\n      tag_274\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_115\n      swap1\n      tag_276\n      jump\t// in\n    tag_274:\n        /* \"Utils/TransferHelper.sol\":1073:1503  function safeTransferFrom(\r... */\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"Utils/EnumerableSet.sol\":8831:8998  function contains(AddressSet storage set, address value) internal view returns (bool) {\r... */\n    tag_239:\n        /* \"Utils/EnumerableSet.sol\":8911:8915  bool */\n      0x00\n        /* \"Utils/EnumerableSet.sol\":8935:8990  _contains(set._inner, bytes32(uint256(uint160(value)))) */\n      tag_252\n        /* \"Utils/EnumerableSet.sol\":8945:8948  set */\n      dup4\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"Utils/EnumerableSet.sol\":8965:8988  uint256(uint160(value)) */\n      dup5\n      and\n        /* \"Utils/EnumerableSet.sol\":8935:8944  _contains */\n      tag_279\n        /* \"Utils/EnumerableSet.sol\":8935:8990  _contains(set._inner, bytes32(uint256(uint160(value)))) */\n      jump\t// in\n        /* \"Utils/EnumerableSet.sol\":2174:2588  function _add(Set storage set, bytes32 value) private returns (bool) {\r... */\n    tag_253:\n        /* \"Utils/EnumerableSet.sol\":2237:2241  bool */\n      0x00\n        /* \"Utils/EnumerableSet.sol\":2259:2280  _contains(set, value) */\n      tag_281\n        /* \"Utils/EnumerableSet.sol\":2269:2272  set */\n      dup4\n        /* \"Utils/EnumerableSet.sol\":2274:2279  value */\n      dup4\n        /* \"Utils/EnumerableSet.sol\":2259:2268  _contains */\n      tag_279\n        /* \"Utils/EnumerableSet.sol\":2259:2280  _contains(set, value) */\n      jump\t// in\n    tag_281:\n        /* \"Utils/EnumerableSet.sol\":2254:2581  if (!_contains(set, value)) {\r... */\n      tag_282\n      jumpi\n      pop\n        /* \"Utils/EnumerableSet.sol\":2297:2320  set._values.push(value) */\n      dup2\n      sload\n      0x01\n      dup2\n      dup2\n      add\n      dup5\n      sstore\n        /* \"Utils/EnumerableSet.sol\":2297:2308  set._values */\n      0x00\n        /* \"Utils/EnumerableSet.sol\":2297:2320  set._values.push(value) */\n      dup5\n      dup2\n      mstore\n      0x20\n      dup1\n      dup3\n      keccak256\n      swap1\n      swap4\n      add\n      dup5\n      swap1\n      sstore\n        /* \"Utils/EnumerableSet.sol\":2480:2498  set._values.length */\n      dup5\n      sload\n        /* \"Utils/EnumerableSet.sol\":2458:2477  set._indexes[value] */\n      dup5\n      dup3\n      mstore\n        /* \"Utils/EnumerableSet.sol\":2458:2470  set._indexes */\n      dup3\n      dup7\n      add\n        /* \"Utils/EnumerableSet.sol\":2458:2477  set._indexes[value] */\n      swap1\n      swap4\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"Utils/EnumerableSet.sol\":2458:2498  set._indexes[value] = set._values.length */\n      swap2\n      swap1\n      swap2\n      sstore\n        /* \"Utils/EnumerableSet.sol\":2513:2524  return true */\n      jump(tag_251)\n        /* \"Utils/EnumerableSet.sol\":2254:2581  if (!_contains(set, value)) {\r... */\n    tag_282:\n      pop\n        /* \"Utils/EnumerableSet.sol\":2564:2569  false */\n      0x00\n        /* \"Utils/EnumerableSet.sol\":2557:2569  return false */\n      jump(tag_251)\n        /* \"Utils/EnumerableSet.sol\":4270:4399  function _contains(Set storage set, bytes32 value) private view returns (bool) {\r... */\n    tag_279:\n        /* \"Utils/EnumerableSet.sol\":4343:4347  bool */\n      0x00\n        /* \"Utils/EnumerableSet.sol\":4367:4386  set._indexes[value] */\n      swap1\n      dup2\n      mstore\n        /* \"Utils/EnumerableSet.sol\":4367:4379  set._indexes */\n      0x01\n      swap2\n      swap1\n      swap2\n      add\n        /* \"Utils/EnumerableSet.sol\":4367:4386  set._indexes[value] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n        /* \"Utils/EnumerableSet.sol\":4367:4391  set._indexes[value] != 0 */\n      iszero\n      iszero\n      swap1\n        /* \"Utils/EnumerableSet.sol\":4270:4399  function _contains(Set storage set, bytes32 value) private view returns (bool) {\r... */\n      jump\t// out\n        /* \"#utility.yul\":14:273   */\n    tag_49:\n      0x00\n        /* \"#utility.yul\":126:128   */\n      0x20\n        /* \"#utility.yul\":114:123   */\n      dup3\n        /* \"#utility.yul\":105:112   */\n      dup5\n        /* \"#utility.yul\":101:124   */\n      sub\n        /* \"#utility.yul\":97:129   */\n      slt\n        /* \"#utility.yul\":94:96   */\n      iszero\n      tag_288\n      jumpi\n        /* \"#utility.yul\":147:153   */\n      dup1\n        /* \"#utility.yul\":139:145   */\n      dup2\n        /* \"#utility.yul\":132:154   */\n      revert\n        /* \"#utility.yul\":94:96   */\n    tag_288:\n        /* \"#utility.yul\":191:200   */\n      dup2\n        /* \"#utility.yul\":178:201   */\n      calldataload\n        /* \"#utility.yul\":210:243   */\n      tag_289\n        /* \"#utility.yul\":237:242   */\n      dup2\n        /* \"#utility.yul\":210:243   */\n      tag_290\n      jump\t// in\n    tag_289:\n        /* \"#utility.yul\":262:267   */\n      swap4\n        /* \"#utility.yul\":84:273   */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":278:1580   */\n    tag_65:\n      0x00\n      dup1\n      0x00\n      dup1\n        /* \"#utility.yul\":476:479   */\n      0x0180\n        /* \"#utility.yul\":520:522   */\n      dup1\n        /* \"#utility.yul\":508:517   */\n      dup7\n        /* \"#utility.yul\":499:506   */\n      dup9\n        /* \"#utility.yul\":495:518   */\n      sub\n        /* \"#utility.yul\":491:523   */\n      slt\n        /* \"#utility.yul\":488:490   */\n      iszero\n      tag_292\n      jumpi\n        /* \"#utility.yul\":541:547   */\n      dup4\n        /* \"#utility.yul\":533:539   */\n      dup5\n        /* \"#utility.yul\":526:548   */\n      revert\n        /* \"#utility.yul\":488:490   */\n    tag_292:\n        /* \"#utility.yul\":585:594   */\n      dup6\n        /* \"#utility.yul\":572:595   */\n      calldataload\n        /* \"#utility.yul\":604:637   */\n      tag_293\n        /* \"#utility.yul\":631:636   */\n      dup2\n        /* \"#utility.yul\":604:637   */\n      tag_290\n      jump\t// in\n    tag_293:\n        /* \"#utility.yul\":656:661   */\n      swap5\n      pop\n        /* \"#utility.yul\":680:682   */\n      0x20\n        /* \"#utility.yul\":719:737   */\n      dup7\n      dup2\n      add\n        /* \"#utility.yul\":706:738   */\n      calldataload\n        /* \"#utility.yul\":747:782   */\n      tag_294\n        /* \"#utility.yul\":706:738   */\n      dup2\n        /* \"#utility.yul\":747:782   */\n      tag_290\n      jump\t// in\n    tag_294:\n        /* \"#utility.yul\":801:808   */\n      swap5\n      pop\n        /* \"#utility.yul\":860:862   */\n      0x40\n        /* \"#utility.yul\":845:863   */\n      dup8\n      add\n        /* \"#utility.yul\":832:864   */\n      calldataload\n        /* \"#utility.yul\":873:908   */\n      tag_295\n        /* \"#utility.yul\":832:864   */\n      dup2\n        /* \"#utility.yul\":873:908   */\n      tag_290\n      jump\t// in\n    tag_295:\n        /* \"#utility.yul\":927:934   */\n      swap4\n      pop\n        /* \"#utility.yul\":972:975   */\n      0x7f\n        /* \"#utility.yul\":957:976   */\n      dup8\n      add\n        /* \"#utility.yul\":953:986   */\n      dup9\n      sgt\n        /* \"#utility.yul\":943:945   */\n      tag_296\n      jumpi\n        /* \"#utility.yul\":1005:1011   */\n      dup3\n        /* \"#utility.yul\":997:1003   */\n      dup4\n        /* \"#utility.yul\":990:1012   */\n      revert\n        /* \"#utility.yul\":943:945   */\n    tag_296:\n        /* \"#utility.yul\":1043:1045   */\n      0x40\n        /* \"#utility.yul\":1037:1046   */\n      mload\n        /* \"#utility.yul\":1085:1088   */\n      0x0120\n        /* \"#utility.yul\":1077:1083   */\n      dup2\n        /* \"#utility.yul\":1073:1089   */\n      add\n        /* \"#utility.yul\":1155:1161   */\n      dup2\n        /* \"#utility.yul\":1143:1153   */\n      dup2\n        /* \"#utility.yul\":1140:1162   */\n      lt\n        /* \"#utility.yul\":1119:1137   */\n      0xffffffffffffffff\n        /* \"#utility.yul\":1107:1117   */\n      dup3\n        /* \"#utility.yul\":1104:1138   */\n      gt\n        /* \"#utility.yul\":1101:1163   */\n      or\n        /* \"#utility.yul\":1098:1100   */\n      iszero\n      tag_298\n      jumpi\n        /* \"#utility.yul\":1166:1184   */\n      tag_298\n      tag_299\n      jump\t// in\n    tag_298:\n        /* \"#utility.yul\":1202:1204   */\n      0x40\n        /* \"#utility.yul\":1195:1217   */\n      mstore\n        /* \"#utility.yul\":1237:1243   */\n      dup1\n        /* \"#utility.yul\":1278:1280   */\n      0x60\n        /* \"#utility.yul\":1263:1281   */\n      dup10\n      add\n        /* \"#utility.yul\":1296:1314   */\n      dup5\n      dup11\n      add\n        /* \"#utility.yul\":1293:1324   */\n      dup12\n      lt\n        /* \"#utility.yul\":1290:1292   */\n      iszero\n      tag_300\n      jumpi\n        /* \"#utility.yul\":1342:1348   */\n      dup6\n        /* \"#utility.yul\":1334:1340   */\n      dup7\n        /* \"#utility.yul\":1327:1349   */\n      revert\n        /* \"#utility.yul\":1290:1292   */\n    tag_300:\n        /* \"#utility.yul\":1369:1375   */\n      dup6\n        /* \"#utility.yul\":1360:1375   */\n      swap5\n      pop\n        /* \"#utility.yul\":1384:1549   */\n    tag_301:\n        /* \"#utility.yul\":1398:1402   */\n      0x09\n        /* \"#utility.yul\":1395:1396   */\n      dup6\n        /* \"#utility.yul\":1392:1403   */\n      lt\n        /* \"#utility.yul\":1384:1549   */\n      iszero\n      tag_303\n      jumpi\n        /* \"#utility.yul\":1457:1474   */\n      dup1\n      calldataload\n        /* \"#utility.yul\":1445:1475   */\n      dup3\n      mstore\n        /* \"#utility.yul\":1418:1419   */\n      0x01\n        /* \"#utility.yul\":1411:1420   */\n      swap5\n      swap1\n      swap5\n      add\n      swap4\n        /* \"#utility.yul\":1495:1507   */\n      swap1\n      dup4\n      add\n      swap1\n        /* \"#utility.yul\":1527:1539   */\n      dup4\n      add\n        /* \"#utility.yul\":1384:1549   */\n      jump(tag_301)\n    tag_303:\n        /* \"#utility.yul\":1388:1391   */\n      pop\n      pop\n        /* \"#utility.yul\":1568:1574   */\n      dup1\n        /* \"#utility.yul\":1558:1574   */\n      swap4\n      pop\n      pop\n      pop\n      pop\n        /* \"#utility.yul\":456:1580   */\n      swap3\n      swap6\n      swap2\n      swap5\n      pop\n      swap3\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1585:1882   */\n    tag_182:\n      0x00\n        /* \"#utility.yul\":1705:1707   */\n      0x20\n        /* \"#utility.yul\":1693:1702   */\n      dup3\n        /* \"#utility.yul\":1684:1691   */\n      dup5\n        /* \"#utility.yul\":1680:1703   */\n      sub\n        /* \"#utility.yul\":1676:1708   */\n      slt\n        /* \"#utility.yul\":1673:1675   */\n      iszero\n      tag_305\n      jumpi\n        /* \"#utility.yul\":1726:1732   */\n      dup1\n        /* \"#utility.yul\":1718:1724   */\n      dup2\n        /* \"#utility.yul\":1711:1733   */\n      revert\n        /* \"#utility.yul\":1673:1675   */\n    tag_305:\n        /* \"#utility.yul\":1763:1772   */\n      dup2\n        /* \"#utility.yul\":1757:1773   */\n      mload\n        /* \"#utility.yul\":1816:1821   */\n      dup1\n        /* \"#utility.yul\":1809:1822   */\n      iszero\n        /* \"#utility.yul\":1802:1823   */\n      iszero\n        /* \"#utility.yul\":1795:1800   */\n      dup2\n        /* \"#utility.yul\":1792:1824   */\n      eq\n        /* \"#utility.yul\":1782:1784   */\n      tag_289\n      jumpi\n        /* \"#utility.yul\":1843:1849   */\n      dup2\n        /* \"#utility.yul\":1835:1841   */\n      dup3\n        /* \"#utility.yul\":1828:1850   */\n      revert\n        /* \"#utility.yul\":1887:2077   */\n    tag_82:\n      0x00\n        /* \"#utility.yul\":1999:2001   */\n      0x20\n        /* \"#utility.yul\":1987:1996   */\n      dup3\n        /* \"#utility.yul\":1978:1985   */\n      dup5\n        /* \"#utility.yul\":1974:1997   */\n      sub\n        /* \"#utility.yul\":1970:2002   */\n      slt\n        /* \"#utility.yul\":1967:1969   */\n      iszero\n      tag_308\n      jumpi\n        /* \"#utility.yul\":2020:2026   */\n      dup1\n        /* \"#utility.yul\":2012:2018   */\n      dup2\n        /* \"#utility.yul\":2005:2027   */\n      revert\n        /* \"#utility.yul\":1967:1969   */\n    tag_308:\n      pop\n        /* \"#utility.yul\":2048:2071   */\n      calldataload\n      swap2\n        /* \"#utility.yul\":1957:2077   */\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2082:2276   */\n    tag_129:\n      0x00\n        /* \"#utility.yul\":2205:2207   */\n      0x20\n        /* \"#utility.yul\":2193:2202   */\n      dup3\n        /* \"#utility.yul\":2184:2191   */\n      dup5\n        /* \"#utility.yul\":2180:2203   */\n      sub\n        /* \"#utility.yul\":2176:2208   */\n      slt\n        /* \"#utility.yul\":2173:2175   */\n      iszero\n      tag_310\n      jumpi\n        /* \"#utility.yul\":2226:2232   */\n      dup1\n        /* \"#utility.yul\":2218:2224   */\n      dup2\n        /* \"#utility.yul\":2211:2233   */\n      revert\n        /* \"#utility.yul\":2173:2175   */\n    tag_310:\n      pop\n        /* \"#utility.yul\":2254:2270   */\n      mload\n      swap2\n        /* \"#utility.yul\":2163:2276   */\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2281:2711   */\n    tag_267:\n      0x00\n        /* \"#utility.yul\":2448:2454   */\n      dup3\n        /* \"#utility.yul\":2442:2455   */\n      mload\n        /* \"#utility.yul\":2473:2476   */\n      dup2\n        /* \"#utility.yul\":2485:2614   */\n    tag_312:\n        /* \"#utility.yul\":2499:2505   */\n      dup2\n        /* \"#utility.yul\":2496:2497   */\n      dup2\n        /* \"#utility.yul\":2493:2506   */\n      lt\n        /* \"#utility.yul\":2485:2614   */\n      iszero\n      tag_314\n      jumpi\n        /* \"#utility.yul\":2597:2601   */\n      0x20\n        /* \"#utility.yul\":2581:2595   */\n      dup2\n      dup7\n      add\n        /* \"#utility.yul\":2577:2602   */\n      dup2\n      add\n        /* \"#utility.yul\":2571:2603   */\n      mload\n        /* \"#utility.yul\":2558:2569   */\n      dup6\n      dup4\n      add\n        /* \"#utility.yul\":2551:2604   */\n      mstore\n        /* \"#utility.yul\":2514:2526   */\n      add\n        /* \"#utility.yul\":2485:2614   */\n      jump(tag_312)\n    tag_314:\n        /* \"#utility.yul\":2632:2638   */\n      dup2\n        /* \"#utility.yul\":2629:2630   */\n      dup2\n        /* \"#utility.yul\":2626:2639   */\n      gt\n        /* \"#utility.yul\":2623:2625   */\n      iszero\n      tag_315\n      jumpi\n        /* \"#utility.yul\":2667:2670   */\n      dup3\n        /* \"#utility.yul\":2658:2664   */\n      dup3\n        /* \"#utility.yul\":2653:2656   */\n      dup6\n        /* \"#utility.yul\":2649:2665   */\n      add\n        /* \"#utility.yul\":2642:2671   */\n      mstore\n        /* \"#utility.yul\":2623:2625   */\n    tag_315:\n      pop\n        /* \"#utility.yul\":2689:2705   */\n      swap2\n      swap1\n      swap2\n      add\n      swap3\n        /* \"#utility.yul\":2418:2711   */\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2716:2919   */\n    tag_61:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":2880:2912   */\n      swap2\n      swap1\n      swap2\n      and\n        /* \"#utility.yul\":2862:2913   */\n      dup2\n      mstore\n        /* \"#utility.yul\":2850:2852   */\n      0x20\n        /* \"#utility.yul\":2835:2853   */\n      add\n      swap1\n        /* \"#utility.yul\":2817:2919   */\n      jump\t// out\n        /* \"#utility.yul\":2924:4012   */\n    tag_32:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":3473:3488   */\n      swap13\n      dup14\n      and\n        /* \"#utility.yul\":3455:3489   */\n      dup2\n      mstore\n        /* \"#utility.yul\":3525:3540   */\n      swap11\n      dup13\n      and\n        /* \"#utility.yul\":3520:3522   */\n      0x20\n        /* \"#utility.yul\":3505:3523   */\n      dup13\n      add\n        /* \"#utility.yul\":3498:3541   */\n      mstore\n        /* \"#utility.yul\":3577:3592   */\n      swap9\n      swap1\n      swap11\n      and\n        /* \"#utility.yul\":3572:3574   */\n      0x40\n        /* \"#utility.yul\":3557:3575   */\n      dup11\n      add\n        /* \"#utility.yul\":3550:3593   */\n      mstore\n        /* \"#utility.yul\":3624:3626   */\n      0x60\n        /* \"#utility.yul\":3609:3627   */\n      dup10\n      add\n        /* \"#utility.yul\":3602:3636   */\n      swap7\n      swap1\n      swap7\n      mstore\n        /* \"#utility.yul\":3667:3670   */\n      0x80\n        /* \"#utility.yul\":3652:3671   */\n      dup9\n      add\n        /* \"#utility.yul\":3645:3680   */\n      swap5\n      swap1\n      swap5\n      mstore\n        /* \"#utility.yul\":3435:3438   */\n      0xa0\n        /* \"#utility.yul\":3696:3715   */\n      dup8\n      add\n        /* \"#utility.yul\":3689:3724   */\n      swap3\n      swap1\n      swap3\n      mstore\n        /* \"#utility.yul\":3755:3758   */\n      0xc0\n        /* \"#utility.yul\":3740:3759   */\n      dup7\n      add\n        /* \"#utility.yul\":3733:3768   */\n      mstore\n        /* \"#utility.yul\":3799:3802   */\n      0xe0\n        /* \"#utility.yul\":3784:3803   */\n      dup6\n      add\n        /* \"#utility.yul\":3777:3812   */\n      mstore\n        /* \"#utility.yul\":3843:3846   */\n      0x0100\n        /* \"#utility.yul\":3828:3847   */\n      dup5\n      add\n        /* \"#utility.yul\":3821:3856   */\n      mstore\n        /* \"#utility.yul\":3887:3890   */\n      0x0120\n        /* \"#utility.yul\":3872:3891   */\n      dup4\n      add\n        /* \"#utility.yul\":3865:3900   */\n      mstore\n        /* \"#utility.yul\":3944:3959   */\n      swap2\n      iszero\n        /* \"#utility.yul\":3937:3960   */\n      iszero\n        /* \"#utility.yul\":3931:3934   */\n      0x0140\n        /* \"#utility.yul\":3916:3935   */\n      dup3\n      add\n        /* \"#utility.yul\":3909:3961   */\n      mstore\n        /* \"#utility.yul\":3992:3995   */\n      0x0160\n        /* \"#utility.yul\":3977:3996   */\n      dup2\n      add\n        /* \"#utility.yul\":3970:4006   */\n      swap2\n      swap1\n      swap2\n      mstore\n        /* \"#utility.yul\":3404:3407   */\n      0x0180\n        /* \"#utility.yul\":3389:3408   */\n      add\n      swap1\n        /* \"#utility.yul\":3371:4012   */\n      jump\t// out\n        /* \"#utility.yul\":4017:4392   */\n    tag_265:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":4275:4290   */\n      swap4\n      dup5\n      and\n        /* \"#utility.yul\":4257:4291   */\n      dup2\n      mstore\n        /* \"#utility.yul\":4327:4342   */\n      swap2\n      swap1\n      swap3\n      and\n        /* \"#utility.yul\":4322:4324   */\n      0x20\n        /* \"#utility.yul\":4307:4325   */\n      dup3\n      add\n        /* \"#utility.yul\":4300:4343   */\n      mstore\n        /* \"#utility.yul\":4374:4376   */\n      0x40\n        /* \"#utility.yul\":4359:4377   */\n      dup2\n      add\n        /* \"#utility.yul\":4352:4386   */\n      swap2\n      swap1\n      swap2\n      mstore\n        /* \"#utility.yul\":4207:4209   */\n      0x60\n        /* \"#utility.yul\":4192:4210   */\n      add\n      swap1\n        /* \"#utility.yul\":4174:4392   */\n      jump\t// out\n        /* \"#utility.yul\":4397:4671   */\n    tag_177:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":4589:4621   */\n      swap3\n      swap1\n      swap3\n      and\n        /* \"#utility.yul\":4571:4622   */\n      dup3\n      mstore\n        /* \"#utility.yul\":4653:4655   */\n      0x20\n        /* \"#utility.yul\":4638:4656   */\n      dup3\n      add\n        /* \"#utility.yul\":4631:4665   */\n      mstore\n        /* \"#utility.yul\":4559:4561   */\n      0x40\n        /* \"#utility.yul\":4544:4562   */\n      add\n      swap1\n        /* \"#utility.yul\":4526:4671   */\n      jump\t// out\n        /* \"#utility.yul\":4676:4863   */\n    tag_88:\n        /* \"#utility.yul\":4841:4855   */\n      swap1\n      iszero\n        /* \"#utility.yul\":4834:4856   */\n      iszero\n        /* \"#utility.yul\":4816:4857   */\n      dup2\n      mstore\n        /* \"#utility.yul\":4804:4806   */\n      0x20\n        /* \"#utility.yul\":4789:4807   */\n      add\n      swap1\n        /* \"#utility.yul\":4771:4863   */\n      jump\t// out\n        /* \"#utility.yul\":5090:5441   */\n    tag_164:\n        /* \"#utility.yul\":5292:5294   */\n      0x20\n        /* \"#utility.yul\":5274:5295   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":5331:5333   */\n      0x1b\n        /* \"#utility.yul\":5311:5329   */\n      swap1\n      dup3\n      add\n        /* \"#utility.yul\":5304:5334   */\n      mstore\n        /* \"#utility.yul\":5370:5399   */\n      0x416c6c20746f6b656e20686173206265656e2077697468647261770000000000\n        /* \"#utility.yul\":5365:5367   */\n      0x40\n        /* \"#utility.yul\":5350:5368   */\n      dup3\n      add\n        /* \"#utility.yul\":5343:5400   */\n      mstore\n        /* \"#utility.yul\":5432:5434   */\n      0x60\n        /* \"#utility.yul\":5417:5435   */\n      add\n      swap1\n        /* \"#utility.yul\":5264:5441   */\n      jump\t// out\n        /* \"#utility.yul\":5446:5848   */\n    tag_248:\n        /* \"#utility.yul\":5648:5650   */\n      0x20\n        /* \"#utility.yul\":5630:5651   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":5687:5689   */\n      0x26\n        /* \"#utility.yul\":5667:5685   */\n      swap1\n      dup3\n      add\n        /* \"#utility.yul\":5660:5690   */\n      mstore\n        /* \"#utility.yul\":5726:5760   */\n      0x4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061\n        /* \"#utility.yul\":5721:5723   */\n      0x40\n        /* \"#utility.yul\":5706:5724   */\n      dup3\n      add\n        /* \"#utility.yul\":5699:5761   */\n      mstore\n      shl(0xd0, 0x646472657373)\n        /* \"#utility.yul\":5792:5794   */\n      0x60\n        /* \"#utility.yul\":5777:5795   */\n      dup3\n      add\n        /* \"#utility.yul\":5770:5806   */\n      mstore\n        /* \"#utility.yul\":5838:5841   */\n      0x80\n        /* \"#utility.yul\":5823:5842   */\n      add\n      swap1\n        /* \"#utility.yul\":5620:5848   */\n      jump\t// out\n        /* \"#utility.yul\":5853:6191   */\n    tag_196:\n        /* \"#utility.yul\":6055:6057   */\n      0x20\n        /* \"#utility.yul\":6037:6058   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":6094:6096   */\n      0x0e\n        /* \"#utility.yul\":6074:6092   */\n      swap1\n      dup3\n      add\n        /* \"#utility.yul\":6067:6097   */\n      mstore\n      shl(0x90, 0x4f766572666c6f772076616c7565)\n        /* \"#utility.yul\":6128:6130   */\n      0x40\n        /* \"#utility.yul\":6113:6131   */\n      dup3\n      add\n        /* \"#utility.yul\":6106:6150   */\n      mstore\n        /* \"#utility.yul\":6182:6184   */\n      0x60\n        /* \"#utility.yul\":6167:6185   */\n      add\n      swap1\n        /* \"#utility.yul\":6027:6191   */\n      jump\t// out\n        /* \"#utility.yul\":6196:6530   */\n    tag_190:\n        /* \"#utility.yul\":6398:6400   */\n      0x20\n        /* \"#utility.yul\":6380:6401   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":6437:6439   */\n      0x0a\n        /* \"#utility.yul\":6417:6435   */\n      swap1\n      dup3\n      add\n        /* \"#utility.yul\":6410:6440   */\n      mstore\n      shl(0xb0, 0x4e6f7420616374697665)\n        /* \"#utility.yul\":6471:6473   */\n      0x40\n        /* \"#utility.yul\":6456:6474   */\n      dup3\n      add\n        /* \"#utility.yul\":6449:6489   */\n      mstore\n        /* \"#utility.yul\":6521:6523   */\n      0x60\n        /* \"#utility.yul\":6506:6524   */\n      add\n      swap1\n        /* \"#utility.yul\":6370:6530   */\n      jump\t// out\n        /* \"#utility.yul\":6535:6875   */\n    tag_193:\n        /* \"#utility.yul\":6737:6739   */\n      0x20\n        /* \"#utility.yul\":6719:6740   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":6776:6778   */\n      0x10\n        /* \"#utility.yul\":6756:6774   */\n      swap1\n      dup3\n      add\n        /* \"#utility.yul\":6749:6779   */\n      mstore\n      shl(0x80, 0x4e6f7420656e6f7567682076616c7565)\n        /* \"#utility.yul\":6810:6812   */\n      0x40\n        /* \"#utility.yul\":6795:6813   */\n      dup3\n      add\n        /* \"#utility.yul\":6788:6834   */\n      mstore\n        /* \"#utility.yul\":6866:6868   */\n      0x60\n        /* \"#utility.yul\":6851:6869   */\n      add\n      swap1\n        /* \"#utility.yul\":6709:6875   */\n      jump\t// out\n        /* \"#utility.yul\":6880:7216   */\n    tag_159:\n        /* \"#utility.yul\":7082:7084   */\n      0x20\n        /* \"#utility.yul\":7064:7085   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":7121:7123   */\n      0x0c\n        /* \"#utility.yul\":7101:7119   */\n      swap1\n      dup3\n      add\n        /* \"#utility.yul\":7094:7124   */\n      mstore\n      shl(0xa0, 0x53616c652073756365737373)\n        /* \"#utility.yul\":7155:7157   */\n      0x40\n        /* \"#utility.yul\":7140:7158   */\n      dup3\n      add\n        /* \"#utility.yul\":7133:7175   */\n      mstore\n        /* \"#utility.yul\":7207:7209   */\n      0x60\n        /* \"#utility.yul\":7192:7210   */\n      add\n      swap1\n        /* \"#utility.yul\":7054:7216   */\n      jump\t// out\n        /* \"#utility.yul\":7221:7577   */\n    tag_116:\n        /* \"#utility.yul\":7423:7425   */\n      0x20\n        /* \"#utility.yul\":7405:7426   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":7442:7460   */\n      dup2\n      dup2\n      add\n        /* \"#utility.yul\":7435:7465   */\n      mstore\n        /* \"#utility.yul\":7501:7535   */\n      0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572\n        /* \"#utility.yul\":7496:7498   */\n      0x40\n        /* \"#utility.yul\":7481:7499   */\n      dup3\n      add\n        /* \"#utility.yul\":7474:7536   */\n      mstore\n        /* \"#utility.yul\":7568:7570   */\n      0x60\n        /* \"#utility.yul\":7553:7571   */\n      add\n      swap1\n        /* \"#utility.yul\":7395:7577   */\n      jump\t// out\n        /* \"#utility.yul\":7582:7985   */\n    tag_167:\n        /* \"#utility.yul\":7784:7786   */\n      0x20\n        /* \"#utility.yul\":7766:7787   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":7823:7825   */\n      0x27\n        /* \"#utility.yul\":7803:7821   */\n      swap1\n      dup3\n      add\n        /* \"#utility.yul\":7796:7826   */\n      mstore\n        /* \"#utility.yul\":7862:7896   */\n      0x596f7520776974686472617720616c6c206f722068617665206e6f7420626f75\n        /* \"#utility.yul\":7857:7859   */\n      0x40\n        /* \"#utility.yul\":7842:7860   */\n      dup3\n      add\n        /* \"#utility.yul\":7835:7897   */\n      mstore\n      shl(0xca, 0x19da1d081e595d)\n        /* \"#utility.yul\":7928:7930   */\n      0x60\n        /* \"#utility.yul\":7913:7931   */\n      dup3\n      add\n        /* \"#utility.yul\":7906:7943   */\n      mstore\n        /* \"#utility.yul\":7975:7978   */\n      0x80\n        /* \"#utility.yul\":7960:7979   */\n      add\n      swap1\n        /* \"#utility.yul\":7756:7985   */\n      jump\t// out\n        /* \"#utility.yul\":7990:8390   */\n    tag_276:\n        /* \"#utility.yul\":8192:8194   */\n      0x20\n        /* \"#utility.yul\":8174:8195   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":8231:8233   */\n      0x24\n        /* \"#utility.yul\":8211:8229   */\n      swap1\n      dup3\n      add\n        /* \"#utility.yul\":8204:8234   */\n      mstore\n        /* \"#utility.yul\":8270:8304   */\n      0x5472616e7366657248656c7065723a205452414e534645525f46524f4d5f4641\n        /* \"#utility.yul\":8265:8267   */\n      0x40\n        /* \"#utility.yul\":8250:8268   */\n      dup3\n      add\n        /* \"#utility.yul\":8243:8305   */\n      mstore\n      shl(0xe2, 0x12531151)\n        /* \"#utility.yul\":8336:8338   */\n      0x60\n        /* \"#utility.yul\":8321:8339   */\n      dup3\n      add\n        /* \"#utility.yul\":8314:8348   */\n      mstore\n        /* \"#utility.yul\":8380:8383   */\n      0x80\n        /* \"#utility.yul\":8365:8384   */\n      add\n      swap1\n        /* \"#utility.yul\":8164:8390   */\n      jump\t// out\n        /* \"#utility.yul\":8395:8750   */\n    tag_154:\n        /* \"#utility.yul\":8597:8599   */\n      0x20\n        /* \"#utility.yul\":8579:8600   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":8636:8638   */\n      0x1f\n        /* \"#utility.yul\":8616:8634   */\n      swap1\n      dup3\n      add\n        /* \"#utility.yul\":8609:8639   */\n      mstore\n        /* \"#utility.yul\":8675:8708   */\n      0x5265656e7472616e637947756172643a207265656e7472616e742063616c6c00\n        /* \"#utility.yul\":8670:8672   */\n      0x40\n        /* \"#utility.yul\":8655:8673   */\n      dup3\n      add\n        /* \"#utility.yul\":8648:8709   */\n      mstore\n        /* \"#utility.yul\":8741:8743   */\n      0x60\n        /* \"#utility.yul\":8726:8744   */\n      add\n      swap1\n        /* \"#utility.yul\":8569:8750   */\n      jump\t// out\n        /* \"#utility.yul\":8755:9094   */\n    tag_209:\n        /* \"#utility.yul\":8957:8959   */\n      0x20\n        /* \"#utility.yul\":8939:8960   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":8996:8998   */\n      0x0f\n        /* \"#utility.yul\":8976:8994   */\n      swap1\n      dup3\n      add\n        /* \"#utility.yul\":8969:8999   */\n      mstore\n      shl(0x88, 0x53616c652069732073756363657373)\n        /* \"#utility.yul\":9030:9032   */\n      0x40\n        /* \"#utility.yul\":9015:9033   */\n      dup3\n      add\n        /* \"#utility.yul\":9008:9053   */\n      mstore\n        /* \"#utility.yul\":9085:9087   */\n      0x60\n        /* \"#utility.yul\":9070:9088   */\n      add\n      swap1\n        /* \"#utility.yul\":8929:9094   */\n      jump\t// out\n        /* \"#utility.yul\":9099:9276   */\n    tag_37:\n        /* \"#utility.yul\":9245:9270   */\n      swap1\n      dup2\n      mstore\n        /* \"#utility.yul\":9233:9235   */\n      0x20\n        /* \"#utility.yul\":9218:9236   */\n      add\n      swap1\n        /* \"#utility.yul\":9200:9276   */\n      jump\t// out\n        /* \"#utility.yul\":9281:9529   */\n    tag_27:\n        /* \"#utility.yul\":9455:9480   */\n      swap2\n      dup3\n      mstore\n        /* \"#utility.yul\":9511:9513   */\n      0x20\n        /* \"#utility.yul\":9496:9514   */\n      dup3\n      add\n        /* \"#utility.yul\":9489:9523   */\n      mstore\n        /* \"#utility.yul\":9443:9445   */\n      0x40\n        /* \"#utility.yul\":9428:9446   */\n      add\n      swap1\n        /* \"#utility.yul\":9410:9529   */\n      jump\t// out\n        /* \"#utility.yul\":9534:10089   */\n    tag_94:\n        /* \"#utility.yul\":9809:9834   */\n      swap6\n      dup7\n      mstore\n        /* \"#utility.yul\":9865:9867   */\n      0x20\n        /* \"#utility.yul\":9850:9868   */\n      dup7\n      add\n        /* \"#utility.yul\":9843:9877   */\n      swap5\n      swap1\n      swap5\n      mstore\n        /* \"#utility.yul\":9908:9910   */\n      0x40\n        /* \"#utility.yul\":9893:9911   */\n      dup6\n      add\n        /* \"#utility.yul\":9886:9920   */\n      swap3\n      swap1\n      swap3\n      mstore\n        /* \"#utility.yul\":9951:9953   */\n      0x60\n        /* \"#utility.yul\":9936:9954   */\n      dup5\n      add\n        /* \"#utility.yul\":9929:9963   */\n      mstore\n        /* \"#utility.yul\":10007:10021   */\n      iszero\n        /* \"#utility.yul\":10000:10022   */\n      iszero\n        /* \"#utility.yul\":9994:9997   */\n      0x80\n        /* \"#utility.yul\":9979:9998   */\n      dup4\n      add\n        /* \"#utility.yul\":9972:10023   */\n      mstore\n        /* \"#utility.yul\":10067:10081   */\n      iszero\n        /* \"#utility.yul\":10060:10082   */\n      iszero\n        /* \"#utility.yul\":10054:10057   */\n      0xa0\n        /* \"#utility.yul\":10039:10058   */\n      dup3\n      add\n        /* \"#utility.yul\":10032:10083   */\n      mstore\n        /* \"#utility.yul\":9796:9799   */\n      0xc0\n        /* \"#utility.yul\":9781:9800   */\n      add\n      swap1\n        /* \"#utility.yul\":9763:10089   */\n      jump\t// out\n        /* \"#utility.yul\":10094:10629   */\n    tag_74:\n        /* \"#utility.yul\":10381:10406   */\n      swap6\n      dup7\n      mstore\n        /* \"#utility.yul\":10437:10439   */\n      0x20\n        /* \"#utility.yul\":10422:10440   */\n      dup7\n      add\n        /* \"#utility.yul\":10415:10449   */\n      swap5\n      swap1\n      swap5\n      mstore\n        /* \"#utility.yul\":10480:10482   */\n      0x40\n        /* \"#utility.yul\":10465:10483   */\n      dup6\n      add\n        /* \"#utility.yul\":10458:10492   */\n      swap3\n      swap1\n      swap3\n      mstore\n        /* \"#utility.yul\":10523:10525   */\n      0x60\n        /* \"#utility.yul\":10508:10526   */\n      dup5\n      add\n        /* \"#utility.yul\":10501:10535   */\n      mstore\n        /* \"#utility.yul\":10566:10569   */\n      0x80\n        /* \"#utility.yul\":10551:10570   */\n      dup4\n      add\n        /* \"#utility.yul\":10544:10579   */\n      mstore\n        /* \"#utility.yul\":10610:10613   */\n      0xa0\n        /* \"#utility.yul\":10595:10614   */\n      dup3\n      add\n        /* \"#utility.yul\":10588:10623   */\n      mstore\n        /* \"#utility.yul\":10368:10371   */\n      0xc0\n        /* \"#utility.yul\":10353:10372   */\n      add\n      swap1\n        /* \"#utility.yul\":10335:10629   */\n      jump\t// out\n        /* \"#utility.yul\":10634:10762   */\n    tag_174:\n      0x00\n        /* \"#utility.yul\":10705:10706   */\n      dup3\n        /* \"#utility.yul\":10701:10707   */\n      not\n        /* \"#utility.yul\":10698:10699   */\n      dup3\n        /* \"#utility.yul\":10695:10708   */\n      gt\n        /* \"#utility.yul\":10692:10694   */\n      iszero\n      tag_339\n      jumpi\n        /* \"#utility.yul\":10711:10729   */\n      tag_339\n      tag_340\n      jump\t// in\n    tag_339:\n      pop\n        /* \"#utility.yul\":10747:10756   */\n      add\n      swap1\n        /* \"#utility.yul\":10682:10762   */\n      jump\t// out\n        /* \"#utility.yul\":10767:10984   */\n    tag_262:\n      0x00\n        /* \"#utility.yul\":10833:10834   */\n      dup3\n        /* \"#utility.yul\":10823:10825   */\n      tag_342\n      jumpi\n      shl(0xe0, 0x4e487b71)\n        /* \"#utility.yul\":10858:10889   */\n      dup2\n      mstore\n        /* \"#utility.yul\":10912:10916   */\n      0x12\n        /* \"#utility.yul\":10909:10910   */\n      0x04\n        /* \"#utility.yul\":10902:10917   */\n      mstore\n        /* \"#utility.yul\":10940:10944   */\n      0x24\n        /* \"#utility.yul\":10865:10866   */\n      dup2\n        /* \"#utility.yul\":10930:10945   */\n      revert\n        /* \"#utility.yul\":10823:10825   */\n    tag_342:\n      pop\n        /* \"#utility.yul\":10969:10978   */\n      div\n      swap1\n        /* \"#utility.yul\":10813:10984   */\n      jump\t// out\n        /* \"#utility.yul\":10989:11442   */\n    tag_343:\n        /* \"#utility.yul\":11085:11091   */\n      dup1\n        /* \"#utility.yul\":11108:11113   */\n      dup3\n        /* \"#utility.yul\":11122:11436   */\n    tag_345:\n        /* \"#utility.yul\":11171:11172   */\n      0x01\n        /* \"#utility.yul\":11208:11210   */\n      dup1\n        /* \"#utility.yul\":11198:11206   */\n      dup7\n        /* \"#utility.yul\":11195:11211   */\n      gt\n        /* \"#utility.yul\":11185:11187   */\n      tag_348\n      jumpi\n        /* \"#utility.yul\":11215:11220   */\n      pop\n      jump(tag_347)\n        /* \"#utility.yul\":11185:11187   */\n    tag_348:\n        /* \"#utility.yul\":11256:11260   */\n      dup2\n        /* \"#utility.yul\":11251:11254   */\n      dup8\n        /* \"#utility.yul\":11247:11261   */\n      div\n        /* \"#utility.yul\":11241:11245   */\n      dup3\n        /* \"#utility.yul\":11238:11262   */\n      gt\n        /* \"#utility.yul\":11235:11237   */\n      iszero\n      tag_350\n      jumpi\n        /* \"#utility.yul\":11265:11283   */\n      tag_350\n      tag_340\n      jump\t// in\n    tag_350:\n        /* \"#utility.yul\":11315:11317   */\n      dup1\n        /* \"#utility.yul\":11305:11313   */\n      dup7\n        /* \"#utility.yul\":11301:11318   */\n      and\n        /* \"#utility.yul\":11298:11300   */\n      iszero\n      tag_351\n      jumpi\n        /* \"#utility.yul\":11330:11346   */\n      swap2\n      dup2\n      mul\n      swap2\n        /* \"#utility.yul\":11298:11300   */\n    tag_351:\n        /* \"#utility.yul\":11409:11426   */\n      swap5\n      swap1\n      swap5\n      shr\n      swap4\n        /* \"#utility.yul\":11369:11384   */\n      dup1\n      mul\n        /* \"#utility.yul\":11122:11436   */\n      jump(tag_345)\n    tag_347:\n        /* \"#utility.yul\":11066:11442   */\n      swap5\n      pop\n      swap5\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":11447:11586   */\n    tag_131:\n      0x00\n        /* \"#utility.yul\":11536:11580   */\n      tag_252\n      not(0x00)\n        /* \"#utility.yul\":11563:11571   */\n      dup5\n        /* \"#utility.yul\":11557:11561   */\n      dup5\n        /* \"#utility.yul\":11591:12513   */\n      0x00\n        /* \"#utility.yul\":11675:11683   */\n      dup3\n        /* \"#utility.yul\":11665:11667   */\n      tag_356\n      jumpi\n      pop\n        /* \"#utility.yul\":11716:11717   */\n      0x01\n        /* \"#utility.yul\":11730:11735   */\n      jump(tag_289)\n        /* \"#utility.yul\":11665:11667   */\n    tag_356:\n        /* \"#utility.yul\":11764:11768   */\n      dup2\n        /* \"#utility.yul\":11754:11756   */\n      tag_357\n      jumpi\n      pop\n        /* \"#utility.yul\":11801:11802   */\n      0x00\n        /* \"#utility.yul\":11815:11820   */\n      jump(tag_289)\n        /* \"#utility.yul\":11754:11756   */\n    tag_357:\n        /* \"#utility.yul\":11846:11850   */\n      dup2\n        /* \"#utility.yul\":11864:11865   */\n      0x01\n        /* \"#utility.yul\":11859:11918   */\n      dup2\n      eq\n      tag_359\n      jumpi\n        /* \"#utility.yul\":11932:11933   */\n      0x02\n        /* \"#utility.yul\":11927:12110   */\n      dup2\n      eq\n      tag_360\n      jumpi\n        /* \"#utility.yul\":11839:12110   */\n      jump(tag_358)\n        /* \"#utility.yul\":11859:11918   */\n    tag_359:\n        /* \"#utility.yul\":11889:11890   */\n      0x01\n        /* \"#utility.yul\":11880:11890   */\n      swap2\n      pop\n        /* \"#utility.yul\":11903:11908   */\n      pop\n      jump(tag_289)\n        /* \"#utility.yul\":11927:12110   */\n    tag_360:\n        /* \"#utility.yul\":11964:11967   */\n      0xff\n        /* \"#utility.yul\":11954:11962   */\n      dup5\n        /* \"#utility.yul\":11951:11968   */\n      gt\n        /* \"#utility.yul\":11948:11950   */\n      iszero\n      tag_362\n      jumpi\n        /* \"#utility.yul\":11971:11989   */\n      tag_362\n      tag_340\n      jump\t// in\n    tag_362:\n        /* \"#utility.yul\":12027:12028   */\n      0x01\n        /* \"#utility.yul\":12017:12025   */\n      dup5\n        /* \"#utility.yul\":12013:12029   */\n      shl\n        /* \"#utility.yul\":12004:12029   */\n      swap2\n      pop\n        /* \"#utility.yul\":12055:12058   */\n      dup5\n        /* \"#utility.yul\":12048:12053   */\n      dup3\n        /* \"#utility.yul\":12045:12059   */\n      gt\n        /* \"#utility.yul\":12042:12044   */\n      iszero\n      tag_364\n      jumpi\n        /* \"#utility.yul\":12062:12080   */\n      tag_364\n      tag_340\n      jump\t// in\n    tag_364:\n        /* \"#utility.yul\":12095:12100   */\n      pop\n      jump(tag_289)\n        /* \"#utility.yul\":11839:12110   */\n    tag_358:\n      pop\n        /* \"#utility.yul\":12194:12196   */\n      0x20\n        /* \"#utility.yul\":12184:12192   */\n      dup4\n        /* \"#utility.yul\":12181:12197   */\n      lt\n        /* \"#utility.yul\":12175:12178   */\n      0x0133\n        /* \"#utility.yul\":12169:12173   */\n      dup4\n        /* \"#utility.yul\":12166:12179   */\n      lt\n        /* \"#utility.yul\":12162:12198   */\n      and\n        /* \"#utility.yul\":12156:12158   */\n      0x4e\n        /* \"#utility.yul\":12146:12154   */\n      dup5\n        /* \"#utility.yul\":12143:12159   */\n      lt\n        /* \"#utility.yul\":12138:12140   */\n      0x0b\n        /* \"#utility.yul\":12132:12136   */\n      dup5\n        /* \"#utility.yul\":12129:12141   */\n      lt\n        /* \"#utility.yul\":12125:12160   */\n      and\n        /* \"#utility.yul\":12122:12199   */\n      or\n        /* \"#utility.yul\":12119:12121   */\n      iszero\n      tag_365\n      jumpi\n      pop\n        /* \"#utility.yul\":12231:12250   */\n      dup2\n      dup2\n      exp\n        /* \"#utility.yul\":12266:12280   */\n      dup4\n      dup2\n      gt\n        /* \"#utility.yul\":12263:12265   */\n      iszero\n      tag_367\n      jumpi\n        /* \"#utility.yul\":12283:12301   */\n      tag_367\n      tag_340\n      jump\t// in\n    tag_367:\n        /* \"#utility.yul\":12316:12321   */\n      jump(tag_289)\n        /* \"#utility.yul\":12119:12121   */\n    tag_365:\n        /* \"#utility.yul\":12363:12405   */\n      tag_368\n        /* \"#utility.yul\":12401:12404   */\n      dup5\n        /* \"#utility.yul\":12391:12399   */\n      dup5\n        /* \"#utility.yul\":12385:12389   */\n      dup5\n        /* \"#utility.yul\":12382:12383   */\n      0x01\n        /* \"#utility.yul\":12363:12405   */\n      tag_343\n      jump\t// in\n    tag_368:\n        /* \"#utility.yul\":12438:12444   */\n      dup1\n        /* \"#utility.yul\":12433:12436   */\n      dup7\n        /* \"#utility.yul\":12429:12445   */\n      div\n        /* \"#utility.yul\":12420:12427   */\n      dup3\n        /* \"#utility.yul\":12417:12446   */\n      gt\n        /* \"#utility.yul\":12414:12416   */\n      iszero\n      tag_370\n      jumpi\n        /* \"#utility.yul\":12449:12467   */\n      tag_370\n      tag_340\n      jump\t// in\n    tag_370:\n        /* \"#utility.yul\":12487:12507   */\n      mul\n      swap5\n        /* \"#utility.yul\":11655:12513   */\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":12518:12686   */\n    tag_134:\n      0x00\n        /* \"#utility.yul\":12624:12625   */\n      dup2\n        /* \"#utility.yul\":12620:12621   */\n      0x00\n        /* \"#utility.yul\":12616:12622   */\n      not\n        /* \"#utility.yul\":12612:12626   */\n      div\n        /* \"#utility.yul\":12609:12610   */\n      dup4\n        /* \"#utility.yul\":12606:12627   */\n      gt\n        /* \"#utility.yul\":12601:12602   */\n      dup3\n        /* \"#utility.yul\":12594:12603   */\n      iszero\n        /* \"#utility.yul\":12587:12604   */\n      iszero\n        /* \"#utility.yul\":12583:12628   */\n      and\n        /* \"#utility.yul\":12580:12582   */\n      iszero\n      tag_373\n      jumpi\n        /* \"#utility.yul\":12631:12649   */\n      tag_373\n      tag_340\n      jump\t// in\n    tag_373:\n      pop\n        /* \"#utility.yul\":12671:12680   */\n      mul\n      swap1\n        /* \"#utility.yul\":12570:12686   */\n      jump\t// out\n        /* \"#utility.yul\":12691:12816   */\n    tag_161:\n      0x00\n        /* \"#utility.yul\":12759:12760   */\n      dup3\n        /* \"#utility.yul\":12756:12757   */\n      dup3\n        /* \"#utility.yul\":12753:12761   */\n      lt\n        /* \"#utility.yul\":12750:12752   */\n      iszero\n      tag_376\n      jumpi\n        /* \"#utility.yul\":12764:12782   */\n      tag_376\n      tag_340\n      jump\t// in\n    tag_376:\n      pop\n        /* \"#utility.yul\":12801:12810   */\n      sub\n      swap1\n        /* \"#utility.yul\":12740:12816   */\n      jump\t// out\n        /* \"#utility.yul\":12821:12956   */\n    tag_222:\n      0x00\n      not(0x00)\n        /* \"#utility.yul\":12881:12898   */\n      dup3\n      eq\n        /* \"#utility.yul\":12878:12880   */\n      iszero\n      tag_379\n      jumpi\n        /* \"#utility.yul\":12901:12919   */\n      tag_379\n      tag_340\n      jump\t// in\n    tag_379:\n      pop\n        /* \"#utility.yul\":12948:12949   */\n      0x01\n        /* \"#utility.yul\":12937:12950   */\n      add\n      swap1\n        /* \"#utility.yul\":12868:12956   */\n      jump\t// out\n        /* \"#utility.yul\":12961:13088   */\n    tag_340:\n        /* \"#utility.yul\":13022:13032   */\n      0x4e487b71\n        /* \"#utility.yul\":13017:13020   */\n      0xe0\n        /* \"#utility.yul\":13013:13033   */\n      shl\n        /* \"#utility.yul\":13010:13011   */\n      0x00\n        /* \"#utility.yul\":13003:13034   */\n      mstore\n        /* \"#utility.yul\":13053:13057   */\n      0x11\n        /* \"#utility.yul\":13050:13051   */\n      0x04\n        /* \"#utility.yul\":13043:13058   */\n      mstore\n        /* \"#utility.yul\":13077:13081   */\n      0x24\n        /* \"#utility.yul\":13074:13075   */\n      0x00\n        /* \"#utility.yul\":13067:13082   */\n      revert\n        /* \"#utility.yul\":13093:13220   */\n    tag_299:\n        /* \"#utility.yul\":13154:13164   */\n      0x4e487b71\n        /* \"#utility.yul\":13149:13152   */\n      0xe0\n        /* \"#utility.yul\":13145:13165   */\n      shl\n        /* \"#utility.yul\":13142:13143   */\n      0x00\n        /* \"#utility.yul\":13135:13166   */\n      mstore\n        /* \"#utility.yul\":13185:13189   */\n      0x41\n        /* \"#utility.yul\":13182:13183   */\n      0x04\n        /* \"#utility.yul\":13175:13190   */\n      mstore\n        /* \"#utility.yul\":13209:13213   */\n      0x24\n        /* \"#utility.yul\":13206:13207   */\n      0x00\n        /* \"#utility.yul\":13199:13214   */\n      revert\n        /* \"#utility.yul\":13225:13358   */\n    tag_290:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":13302:13333   */\n      dup2\n      and\n        /* \"#utility.yul\":13292:13334   */\n      dup2\n      eq\n        /* \"#utility.yul\":13282:13284   */\n      tag_122\n      jumpi\n        /* \"#utility.yul\":13348:13349   */\n      0x00\n        /* \"#utility.yul\":13345:13346   */\n      dup1\n        /* \"#utility.yul\":13338:13350   */\n      revert\n\n    auxdata: 0xa264697066735822122048b73e0b6f99a3f0907ab1389ffa3756223137b1d362d1d0124bc8a7062ae68364736f6c63430008000033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "608060405260016000556200001d62000017620000ae565b620000b2565b6019805473c778417e063141139fce010982780140aa0cd5ab6001600160a01b031990911617905562000072601b736ccb41eeda5a073076f3e7dc1614c185b5fa41ed62000104602090811b62000c0817901c565b50620000a2734f0b12bbf40fc182559822a5b1db6d34dbc3e016601b6200010460201b62000c081790919060201c565b506014601a556200018b565b3390565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60006200011b836001600160a01b03841662000124565b90505b92915050565b600062000132838362000173565b6200016a575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556200011e565b5060006200011e565b60009081526001919091016020526040902054151590565b6114ed806200019b6000396000f3fe6080604052600436106101095760003560e01c80638f1eae4c11610095578063b6b55f2511610064578063b6b55f2514610285578063cad5b0f714610298578063e2d3f423146102ba578063f2fde38b146102ec578063f8b2cb4f1461030c57610109565b80638f1eae4c14610214578063ab33985a14610234578063acfb235514610249578063ad5c46481461027057610109565b80633b5ef2ad116100dc5780633b5ef2ad1461019e57806356c5f349146101b3578063715018a6146101d3578063861faf5f146101ea5780638da5cb5b146101f257610109565b806312e5d0b91461010e57806318856a2f1461013a5780631df4ccfc14610167578063200d2ed214610189575b600080fd5b34801561011a57600080fd5b5061012361032c565b604051610131929190611277565b60405180910390f35b34801561014657600080fd5b5061014f610335565b6040516101319c9b9a99989796959493929190610f88565b34801561017357600080fd5b5061017c610376565b604051610131919061126e565b34801561019557600080fd5b5061017c61037c565b3480156101aa57600080fd5b5061017c6103aa565b3480156101bf57600080fd5b5061017c6101ce366004610e07565b6103b0565b3480156101df57600080fd5b506101e86103c2565b005b6101e8610416565b3480156101fe57600080fd5b50610207610445565b6040516101319190610f74565b34801561022057600080fd5b506101e861022f366004610e2a565b610454565b34801561024057600080fd5b506101e8610629565b34801561025557600080fd5b5061025e6107d3565b604051610131969594939291906112b1565b34801561027c57600080fd5b506102076107e8565b6101e8610293366004610f0b565b6107f7565b3480156102a457600080fd5b506102ad610b38565b604051610131919061102a565b3480156102c657600080fd5b506102da6102d5366004610e07565b610b52565b60405161013196959493929190611285565b3480156102f857600080fd5b506101e8610307366004610e07565b610b8d565b34801561031857600080fd5b5061017c610327366004610e07565b610bfb565b600b54600c5482565b600d54600e54600f546010546011546012546013546014546015546016546017546018546001600160a01b039b8c169b9a8b169a9099169860ff909116908c565b601d5481565b601154600090421015610391575060006103a7565b6012544211156103a3575060026103a7565b5060015b90565b601a5481565b60036020526000908152604090205481565b6103ca610c26565b6001600160a01b03166103db610445565b6001600160a01b03161461040a5760405162461bcd60e51b81526004016104019061114e565b60405180910390fd5b6104146000610c2a565b565b60405133904780156108fc02916000818181858888f19350505050158015610442573d6000803e3d6000fd5b50565b6001546001600160a01b031690565b600d80546001600160a01b038087166001600160a01b031992831617909255600e80548684169083161790819055600f80548685169316929092179091556040805163313ce56760e01b81529051919092169163313ce567916004808301926020929190829003018186803b1580156104cc57600080fd5b505afa1580156104e0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105049190610f23565b61050f90600a611357565b815161051b9190611425565b6010556020808201516011556040808301516012556060830151601355600f54815163313ce56760e01b815291516001600160a01b039091169263313ce5679260048082019391829003018186803b15801561057657600080fd5b505afa15801561058a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ae9190610f23565b6105b990600a611357565b60808201516105c89190611425565b60145560a081015160155560c081015160165560e0810151600b819055610100820151600c55600f54601954601780546001600160a01b03938416939092169290921460ff1990911617905560105461062091610c7c565b60185550505050565b6002600054141561064c5760405162461bcd60e51b81526004016104019061120e565b600260005561065961037c565b6001146106785760405162461bcd60e51b815260040161040190611128565b60065460055460009161068a91611444565b116106a75760405162461bcd60e51b815260040161040190611035565b33600090815260026020526040902060018101546106d75760405162461bcd60e51b815260040161040190611183565b600061070d6103e86107078460010154610701600d600901546103e8610c8890919063ffffffff16565b90610c7c565b90610c94565b9050806004600201600082825461072491906112d9565b9091555050600182015460009061073c908390611444565b60018401839055600e5460405163a9059cbb60e01b81529192506001600160a01b03169063a9059cbb906107769033908690600401611011565b602060405180830381600087803b15801561079057600080fd5b505af11580156107a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107c89190610eeb565b505060016000555050565b60045460055460065460075460085460095486565b6019546001600160a01b031681565b6002600054141561081a5760405162461bcd60e51b81526004016104019061120e565b600260005561082761037c565b6001146108465760405162461bcd60e51b8152600401610401906110da565b336000908152600260205260408120601354909183918291906103e8908310156108825760405162461bcd60e51b8152600401610401906110fe565b6014548311156108a45760405162461bcd60e51b8152600401610401906110b2565b6108ac610b38565b6108dc576108cd8161070785610701601a5486610c8890919063ffffffff16565b92506108d98385611444565b91505b84546014546000916108ed91611444565b6004546018549192506000916109039190611444565b905060008183116109145782610916565b815b90508086106109375760405162461bcd60e51b815260040161040190611245565b60006109de600d60020160009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561098d57600080fd5b505afa1580156109a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109c59190610f23565b6109d090600a611357565b601054610707908a90610c7c565b9050878960000160008282546109f491906112d9565b9250508190555080896001016000828254610a0f91906112d9565b909155505060048054889190600090610a299084906112d9565b909155505060058054829190600090610a439084906112d9565b909155505060088054906000610a588361145b565b90915550503360009081526003602052604081208054889290610a7c9084906112d9565b9250508190555085601d6000828254610a9591906112d9565b909155505060175460ff168015610ab4575034610ab287896112d9565b105b15610afc57336108fc87610ac88a34611444565b610ad29190611444565b6040518115909202916000818181858888f19350505050158015610afa573d6000803e3d6000fd5b505b60175460ff16610b2757600f54610b27906001600160a01b03163330610b228a8c6112d9565b610ca0565b505060016000555050505050505050565b6000610b4d610b45610c26565b601b90610d90565b905090565b600260208190526000918252604090912080546001820154928201546003830154600490930154919392909160ff8082169161010090041686565b610b95610c26565b6001600160a01b0316610ba6610445565b6001600160a01b031614610bcc5760405162461bcd60e51b81526004016104019061114e565b6001600160a01b038116610bf25760405162461bcd60e51b81526004016104019061106c565b61044281610c2a565b6001600160a01b03163190565b6000610c1d836001600160a01b038416610da5565b90505b92915050565b3390565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000610c1d8284611425565b6000610c1d8284611444565b6000610c1d82846112f1565b600080856001600160a01b03166323b872dd868686604051602401610cc793929190610fed565b6040516020818303038152906040529060e01b6020820180516001600160e01b038381831617835250505050604051610d009190610f3b565b6000604051808303816000865af19150503d8060008114610d3d576040519150601f19603f3d011682016040523d82523d6000602084013e610d42565b606091505b5091509150818015610d6c575080511580610d6c575080806020019051810190610d6c9190610eeb565b610d885760405162461bcd60e51b8152600401610401906111ca565b505050505050565b6000610c1d836001600160a01b038416610def565b6000610db18383610def565b610de757508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610c20565b506000610c20565b60009081526001919091016020526040902054151590565b600060208284031215610e18578081fd5b8135610e23816114a2565b9392505050565b600080600080610180808688031215610e41578384fd5b8535610e4c816114a2565b9450602086810135610e5d816114a2565b94506040870135610e6d816114a2565b9350607f87018813610e7d578283fd5b604051610120810181811067ffffffffffffffff82111715610ea157610ea161148c565b6040528060608901848a018b1015610eb7578586fd5b8594505b6009851015610eda578035825260019490940193908301908301610ebb565b505080935050505092959194509250565b600060208284031215610efc578081fd5b81518015158114610e23578182fd5b600060208284031215610f1c578081fd5b5035919050565b600060208284031215610f34578081fd5b5051919050565b60008251815b81811015610f5b5760208186018101518583015201610f41565b81811115610f695782828501525b509190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b039c8d1681529a8c1660208c015298909a1660408a01526060890196909652608088019490945260a087019290925260c086015260e08501526101008401526101208301529115156101408201526101608101919091526101800190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b901515815260200190565b6020808252601b908201527f416c6c20746f6b656e20686173206265656e2077697468647261770000000000604082015260600190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b6020808252600e908201526d4f766572666c6f772076616c756560901b604082015260600190565b6020808252600a90820152694e6f742061637469766560b01b604082015260600190565b60208082526010908201526f4e6f7420656e6f7567682076616c756560801b604082015260600190565b6020808252600c908201526b53616c65207375636573737360a01b604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526027908201527f596f7520776974686472617720616c6c206f722068617665206e6f7420626f7560408201526619da1d081e595d60ca1b606082015260800190565b60208082526024908201527f5472616e7366657248656c7065723a205452414e534645525f46524f4d5f46416040820152631253115160e21b606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6020808252600f908201526e53616c65206973207375636365737360881b604082015260600190565b90815260200190565b918252602082015260400190565b95865260208601949094526040850192909252606084015215156080830152151560a082015260c00190565b958652602086019490945260408501929092526060840152608083015260a082015260c00190565b600082198211156112ec576112ec611476565b500190565b60008261130c57634e487b7160e01b81526012600452602481fd5b500490565b80825b6001808611611323575061134e565b81870482111561133557611335611476565b8086161561134257918102915b9490941c938002611314565b94509492505050565b6000610c1d600019848460008261137057506001610e23565b8161137d57506000610e23565b8160018114611393576002811461139d576113ca565b6001915050610e23565b60ff8411156113ae576113ae611476565b6001841b9150848211156113c4576113c4611476565b50610e23565b5060208310610133831016604e8410600b84101617156113fd575081810a838111156113f8576113f8611476565b610e23565b61140a8484846001611311565b80860482111561141c5761141c611476565b02949350505050565b600081600019048311821515161561143f5761143f611476565b500290565b60008282101561145657611456611476565b500390565b600060001982141561146f5761146f611476565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461044257600080fdfea264697066735822122048b73e0b6f99a3f0907ab1389ffa3756223137b1d362d1d0124bc8a7062ae68364736f6c63430008000033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x1 PUSH1 0x0 SSTORE PUSH3 0x1D PUSH3 0x17 PUSH3 0xAE JUMP JUMPDEST PUSH3 0xB2 JUMP JUMPDEST PUSH1 0x19 DUP1 SLOAD PUSH20 0xC778417E063141139FCE010982780140AA0CD5AB PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP1 SWAP2 AND OR SWAP1 SSTORE PUSH3 0x72 PUSH1 0x1B PUSH20 0x6CCB41EEDA5A073076F3E7DC1614C185B5FA41ED PUSH3 0x104 PUSH1 0x20 SWAP1 DUP2 SHL PUSH3 0xC08 OR SWAP1 SHR JUMP JUMPDEST POP PUSH3 0xA2 PUSH20 0x4F0B12BBF40FC182559822A5B1DB6D34DBC3E016 PUSH1 0x1B PUSH3 0x104 PUSH1 0x20 SHL PUSH3 0xC08 OR SWAP1 SWAP2 SWAP1 PUSH1 0x20 SHR JUMP JUMPDEST POP PUSH1 0x14 PUSH1 0x1A SSTORE PUSH3 0x18B JUMP JUMPDEST CALLER SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x11B DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH3 0x124 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x132 DUP4 DUP4 PUSH3 0x173 JUMP JUMPDEST PUSH3 0x16A JUMPI POP DUP2 SLOAD PUSH1 0x1 DUP2 DUP2 ADD DUP5 SSTORE PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 KECCAK256 SWAP1 SWAP4 ADD DUP5 SWAP1 SSTORE DUP5 SLOAD DUP5 DUP3 MSTORE DUP3 DUP7 ADD SWAP1 SWAP4 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP2 SWAP1 SWAP2 SSTORE PUSH3 0x11E JUMP JUMPDEST POP PUSH1 0x0 PUSH3 0x11E JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 SWAP2 SWAP1 SWAP2 ADD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD ISZERO ISZERO SWAP1 JUMP JUMPDEST PUSH2 0x14ED DUP1 PUSH3 0x19B PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x109 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8F1EAE4C GT PUSH2 0x95 JUMPI DUP1 PUSH4 0xB6B55F25 GT PUSH2 0x64 JUMPI DUP1 PUSH4 0xB6B55F25 EQ PUSH2 0x285 JUMPI DUP1 PUSH4 0xCAD5B0F7 EQ PUSH2 0x298 JUMPI DUP1 PUSH4 0xE2D3F423 EQ PUSH2 0x2BA JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x2EC JUMPI DUP1 PUSH4 0xF8B2CB4F EQ PUSH2 0x30C JUMPI PUSH2 0x109 JUMP JUMPDEST DUP1 PUSH4 0x8F1EAE4C EQ PUSH2 0x214 JUMPI DUP1 PUSH4 0xAB33985A EQ PUSH2 0x234 JUMPI DUP1 PUSH4 0xACFB2355 EQ PUSH2 0x249 JUMPI DUP1 PUSH4 0xAD5C4648 EQ PUSH2 0x270 JUMPI PUSH2 0x109 JUMP JUMPDEST DUP1 PUSH4 0x3B5EF2AD GT PUSH2 0xDC JUMPI DUP1 PUSH4 0x3B5EF2AD EQ PUSH2 0x19E JUMPI DUP1 PUSH4 0x56C5F349 EQ PUSH2 0x1B3 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x1D3 JUMPI DUP1 PUSH4 0x861FAF5F EQ PUSH2 0x1EA JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x1F2 JUMPI PUSH2 0x109 JUMP JUMPDEST DUP1 PUSH4 0x12E5D0B9 EQ PUSH2 0x10E JUMPI DUP1 PUSH4 0x18856A2F EQ PUSH2 0x13A JUMPI DUP1 PUSH4 0x1DF4CCFC EQ PUSH2 0x167 JUMPI DUP1 PUSH4 0x200D2ED2 EQ PUSH2 0x189 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x11A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x123 PUSH2 0x32C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x131 SWAP3 SWAP2 SWAP1 PUSH2 0x1277 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x146 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x14F PUSH2 0x335 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x131 SWAP13 SWAP12 SWAP11 SWAP10 SWAP9 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xF88 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x173 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x17C PUSH2 0x376 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x131 SWAP2 SWAP1 PUSH2 0x126E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x195 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x17C PUSH2 0x37C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1AA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x17C PUSH2 0x3AA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1BF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x17C PUSH2 0x1CE CALLDATASIZE PUSH1 0x4 PUSH2 0xE07 JUMP JUMPDEST PUSH2 0x3B0 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1DF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1E8 PUSH2 0x3C2 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1E8 PUSH2 0x416 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1FE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x207 PUSH2 0x445 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x131 SWAP2 SWAP1 PUSH2 0xF74 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x220 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1E8 PUSH2 0x22F CALLDATASIZE PUSH1 0x4 PUSH2 0xE2A JUMP JUMPDEST PUSH2 0x454 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x240 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1E8 PUSH2 0x629 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x255 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x25E PUSH2 0x7D3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x131 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x12B1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x27C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x207 PUSH2 0x7E8 JUMP JUMPDEST PUSH2 0x1E8 PUSH2 0x293 CALLDATASIZE PUSH1 0x4 PUSH2 0xF0B JUMP JUMPDEST PUSH2 0x7F7 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2A4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2AD PUSH2 0xB38 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x131 SWAP2 SWAP1 PUSH2 0x102A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2C6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2DA PUSH2 0x2D5 CALLDATASIZE PUSH1 0x4 PUSH2 0xE07 JUMP JUMPDEST PUSH2 0xB52 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x131 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1285 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2F8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1E8 PUSH2 0x307 CALLDATASIZE PUSH1 0x4 PUSH2 0xE07 JUMP JUMPDEST PUSH2 0xB8D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x318 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x17C PUSH2 0x327 CALLDATASIZE PUSH1 0x4 PUSH2 0xE07 JUMP JUMPDEST PUSH2 0xBFB JUMP JUMPDEST PUSH1 0xB SLOAD PUSH1 0xC SLOAD DUP3 JUMP JUMPDEST PUSH1 0xD SLOAD PUSH1 0xE SLOAD PUSH1 0xF SLOAD PUSH1 0x10 SLOAD PUSH1 0x11 SLOAD PUSH1 0x12 SLOAD PUSH1 0x13 SLOAD PUSH1 0x14 SLOAD PUSH1 0x15 SLOAD PUSH1 0x16 SLOAD PUSH1 0x17 SLOAD PUSH1 0x18 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP12 DUP13 AND SWAP12 SWAP11 DUP12 AND SWAP11 SWAP1 SWAP10 AND SWAP9 PUSH1 0xFF SWAP1 SWAP2 AND SWAP1 DUP13 JUMP JUMPDEST PUSH1 0x1D SLOAD DUP2 JUMP JUMPDEST PUSH1 0x11 SLOAD PUSH1 0x0 SWAP1 TIMESTAMP LT ISZERO PUSH2 0x391 JUMPI POP PUSH1 0x0 PUSH2 0x3A7 JUMP JUMPDEST PUSH1 0x12 SLOAD TIMESTAMP GT ISZERO PUSH2 0x3A3 JUMPI POP PUSH1 0x2 PUSH2 0x3A7 JUMP JUMPDEST POP PUSH1 0x1 JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x1A SLOAD DUP2 JUMP JUMPDEST PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x3CA PUSH2 0xC26 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x3DB PUSH2 0x445 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x40A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x401 SWAP1 PUSH2 0x114E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x414 PUSH1 0x0 PUSH2 0xC2A JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x40 MLOAD CALLER SWAP1 SELFBALANCE DUP1 ISZERO PUSH2 0x8FC MUL SWAP2 PUSH1 0x0 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x442 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0xD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP8 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP3 DUP4 AND OR SWAP1 SWAP3 SSTORE PUSH1 0xE DUP1 SLOAD DUP7 DUP5 AND SWAP1 DUP4 AND OR SWAP1 DUP2 SWAP1 SSTORE PUSH1 0xF DUP1 SLOAD DUP7 DUP6 AND SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 SSTORE PUSH1 0x40 DUP1 MLOAD PUSH4 0x313CE567 PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP2 PUSH4 0x313CE567 SWAP2 PUSH1 0x4 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4CC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x4E0 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x504 SWAP2 SWAP1 PUSH2 0xF23 JUMP JUMPDEST PUSH2 0x50F SWAP1 PUSH1 0xA PUSH2 0x1357 JUMP JUMPDEST DUP2 MLOAD PUSH2 0x51B SWAP2 SWAP1 PUSH2 0x1425 JUMP JUMPDEST PUSH1 0x10 SSTORE PUSH1 0x20 DUP1 DUP3 ADD MLOAD PUSH1 0x11 SSTORE PUSH1 0x40 DUP1 DUP4 ADD MLOAD PUSH1 0x12 SSTORE PUSH1 0x60 DUP4 ADD MLOAD PUSH1 0x13 SSTORE PUSH1 0xF SLOAD DUP2 MLOAD PUSH4 0x313CE567 PUSH1 0xE0 SHL DUP2 MSTORE SWAP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP3 PUSH4 0x313CE567 SWAP3 PUSH1 0x4 DUP1 DUP3 ADD SWAP4 SWAP2 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x576 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x58A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x5AE SWAP2 SWAP1 PUSH2 0xF23 JUMP JUMPDEST PUSH2 0x5B9 SWAP1 PUSH1 0xA PUSH2 0x1357 JUMP JUMPDEST PUSH1 0x80 DUP3 ADD MLOAD PUSH2 0x5C8 SWAP2 SWAP1 PUSH2 0x1425 JUMP JUMPDEST PUSH1 0x14 SSTORE PUSH1 0xA0 DUP2 ADD MLOAD PUSH1 0x15 SSTORE PUSH1 0xC0 DUP2 ADD MLOAD PUSH1 0x16 SSTORE PUSH1 0xE0 DUP2 ADD MLOAD PUSH1 0xB DUP2 SWAP1 SSTORE PUSH2 0x100 DUP3 ADD MLOAD PUSH1 0xC SSTORE PUSH1 0xF SLOAD PUSH1 0x19 SLOAD PUSH1 0x17 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND SWAP4 SWAP1 SWAP3 AND SWAP3 SWAP1 SWAP3 EQ PUSH1 0xFF NOT SWAP1 SWAP2 AND OR SWAP1 SSTORE PUSH1 0x10 SLOAD PUSH2 0x620 SWAP2 PUSH2 0xC7C JUMP JUMPDEST PUSH1 0x18 SSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SLOAD EQ ISZERO PUSH2 0x64C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x401 SWAP1 PUSH2 0x120E JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SSTORE PUSH2 0x659 PUSH2 0x37C JUMP JUMPDEST PUSH1 0x1 EQ PUSH2 0x678 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x401 SWAP1 PUSH2 0x1128 JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH1 0x5 SLOAD PUSH1 0x0 SWAP2 PUSH2 0x68A SWAP2 PUSH2 0x1444 JUMP JUMPDEST GT PUSH2 0x6A7 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x401 SWAP1 PUSH2 0x1035 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 DUP2 ADD SLOAD PUSH2 0x6D7 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x401 SWAP1 PUSH2 0x1183 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x70D PUSH2 0x3E8 PUSH2 0x707 DUP5 PUSH1 0x1 ADD SLOAD PUSH2 0x701 PUSH1 0xD PUSH1 0x9 ADD SLOAD PUSH2 0x3E8 PUSH2 0xC88 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 PUSH2 0xC7C JUMP JUMPDEST SWAP1 PUSH2 0xC94 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x4 PUSH1 0x2 ADD PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x724 SWAP2 SWAP1 PUSH2 0x12D9 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x0 SWAP1 PUSH2 0x73C SWAP1 DUP4 SWAP1 PUSH2 0x1444 JUMP JUMPDEST PUSH1 0x1 DUP5 ADD DUP4 SWAP1 SSTORE PUSH1 0xE SLOAD PUSH1 0x40 MLOAD PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP2 MSTORE SWAP2 SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0xA9059CBB SWAP1 PUSH2 0x776 SWAP1 CALLER SWAP1 DUP7 SWAP1 PUSH1 0x4 ADD PUSH2 0x1011 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x790 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x7A4 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x7C8 SWAP2 SWAP1 PUSH2 0xEEB JUMP JUMPDEST POP POP PUSH1 0x1 PUSH1 0x0 SSTORE POP POP JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0x5 SLOAD PUSH1 0x6 SLOAD PUSH1 0x7 SLOAD PUSH1 0x8 SLOAD PUSH1 0x9 SLOAD DUP7 JUMP JUMPDEST PUSH1 0x19 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SLOAD EQ ISZERO PUSH2 0x81A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x401 SWAP1 PUSH2 0x120E JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SSTORE PUSH2 0x827 PUSH2 0x37C JUMP JUMPDEST PUSH1 0x1 EQ PUSH2 0x846 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x401 SWAP1 PUSH2 0x10DA JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x13 SLOAD SWAP1 SWAP2 DUP4 SWAP2 DUP3 SWAP2 SWAP1 PUSH2 0x3E8 SWAP1 DUP4 LT ISZERO PUSH2 0x882 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x401 SWAP1 PUSH2 0x10FE JUMP JUMPDEST PUSH1 0x14 SLOAD DUP4 GT ISZERO PUSH2 0x8A4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x401 SWAP1 PUSH2 0x10B2 JUMP JUMPDEST PUSH2 0x8AC PUSH2 0xB38 JUMP JUMPDEST PUSH2 0x8DC JUMPI PUSH2 0x8CD DUP2 PUSH2 0x707 DUP6 PUSH2 0x701 PUSH1 0x1A SLOAD DUP7 PUSH2 0xC88 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP3 POP PUSH2 0x8D9 DUP4 DUP6 PUSH2 0x1444 JUMP JUMPDEST SWAP2 POP JUMPDEST DUP5 SLOAD PUSH1 0x14 SLOAD PUSH1 0x0 SWAP2 PUSH2 0x8ED SWAP2 PUSH2 0x1444 JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0x18 SLOAD SWAP2 SWAP3 POP PUSH1 0x0 SWAP2 PUSH2 0x903 SWAP2 SWAP1 PUSH2 0x1444 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 DUP4 GT PUSH2 0x914 JUMPI DUP3 PUSH2 0x916 JUMP JUMPDEST DUP2 JUMPDEST SWAP1 POP DUP1 DUP7 LT PUSH2 0x937 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x401 SWAP1 PUSH2 0x1245 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x9DE PUSH1 0xD PUSH1 0x2 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x313CE567 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x98D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x9A1 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x9C5 SWAP2 SWAP1 PUSH2 0xF23 JUMP JUMPDEST PUSH2 0x9D0 SWAP1 PUSH1 0xA PUSH2 0x1357 JUMP JUMPDEST PUSH1 0x10 SLOAD PUSH2 0x707 SWAP1 DUP11 SWAP1 PUSH2 0xC7C JUMP JUMPDEST SWAP1 POP DUP8 DUP10 PUSH1 0x0 ADD PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x9F4 SWAP2 SWAP1 PUSH2 0x12D9 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP1 DUP10 PUSH1 0x1 ADD PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0xA0F SWAP2 SWAP1 PUSH2 0x12D9 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x4 DUP1 SLOAD DUP9 SWAP2 SWAP1 PUSH1 0x0 SWAP1 PUSH2 0xA29 SWAP1 DUP5 SWAP1 PUSH2 0x12D9 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x5 DUP1 SLOAD DUP3 SWAP2 SWAP1 PUSH1 0x0 SWAP1 PUSH2 0xA43 SWAP1 DUP5 SWAP1 PUSH2 0x12D9 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x8 DUP1 SLOAD SWAP1 PUSH1 0x0 PUSH2 0xA58 DUP4 PUSH2 0x145B JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD DUP9 SWAP3 SWAP1 PUSH2 0xA7C SWAP1 DUP5 SWAP1 PUSH2 0x12D9 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP6 PUSH1 0x1D PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0xA95 SWAP2 SWAP1 PUSH2 0x12D9 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x17 SLOAD PUSH1 0xFF AND DUP1 ISZERO PUSH2 0xAB4 JUMPI POP CALLVALUE PUSH2 0xAB2 DUP8 DUP10 PUSH2 0x12D9 JUMP JUMPDEST LT JUMPDEST ISZERO PUSH2 0xAFC JUMPI CALLER PUSH2 0x8FC DUP8 PUSH2 0xAC8 DUP11 CALLVALUE PUSH2 0x1444 JUMP JUMPDEST PUSH2 0xAD2 SWAP2 SWAP1 PUSH2 0x1444 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 ISZERO SWAP1 SWAP3 MUL SWAP2 PUSH1 0x0 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0xAFA JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP JUMPDEST PUSH1 0x17 SLOAD PUSH1 0xFF AND PUSH2 0xB27 JUMPI PUSH1 0xF SLOAD PUSH2 0xB27 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER ADDRESS PUSH2 0xB22 DUP11 DUP13 PUSH2 0x12D9 JUMP JUMPDEST PUSH2 0xCA0 JUMP JUMPDEST POP POP PUSH1 0x1 PUSH1 0x0 SSTORE POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB4D PUSH2 0xB45 PUSH2 0xC26 JUMP JUMPDEST PUSH1 0x1B SWAP1 PUSH2 0xD90 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD SWAP3 DUP3 ADD SLOAD PUSH1 0x3 DUP4 ADD SLOAD PUSH1 0x4 SWAP1 SWAP4 ADD SLOAD SWAP2 SWAP4 SWAP3 SWAP1 SWAP2 PUSH1 0xFF DUP1 DUP3 AND SWAP2 PUSH2 0x100 SWAP1 DIV AND DUP7 JUMP JUMPDEST PUSH2 0xB95 PUSH2 0xC26 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xBA6 PUSH2 0x445 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xBCC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x401 SWAP1 PUSH2 0x114E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0xBF2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x401 SWAP1 PUSH2 0x106C JUMP JUMPDEST PUSH2 0x442 DUP2 PUSH2 0xC2A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND BALANCE SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC1D DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0xDA5 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST CALLER SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC1D DUP3 DUP5 PUSH2 0x1425 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC1D DUP3 DUP5 PUSH2 0x1444 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC1D DUP3 DUP5 PUSH2 0x12F1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x23B872DD DUP7 DUP7 DUP7 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0xCC7 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xFED JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH1 0xE0 SHL PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP PUSH1 0x40 MLOAD PUSH2 0xD00 SWAP2 SWAP1 PUSH2 0xF3B JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0xD3D JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xD42 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0xD6C JUMPI POP DUP1 MLOAD ISZERO DUP1 PUSH2 0xD6C JUMPI POP DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0xD6C SWAP2 SWAP1 PUSH2 0xEEB JUMP JUMPDEST PUSH2 0xD88 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x401 SWAP1 PUSH2 0x11CA JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC1D DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0xDEF JUMP JUMPDEST PUSH1 0x0 PUSH2 0xDB1 DUP4 DUP4 PUSH2 0xDEF JUMP JUMPDEST PUSH2 0xDE7 JUMPI POP DUP2 SLOAD PUSH1 0x1 DUP2 DUP2 ADD DUP5 SSTORE PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 KECCAK256 SWAP1 SWAP4 ADD DUP5 SWAP1 SSTORE DUP5 SLOAD DUP5 DUP3 MSTORE DUP3 DUP7 ADD SWAP1 SWAP4 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP2 SWAP1 SWAP2 SSTORE PUSH2 0xC20 JUMP JUMPDEST POP PUSH1 0x0 PUSH2 0xC20 JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 SWAP2 SWAP1 SWAP2 ADD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD ISZERO ISZERO SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xE18 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0xE23 DUP2 PUSH2 0x14A2 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH2 0x180 DUP1 DUP7 DUP9 SUB SLT ISZERO PUSH2 0xE41 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH2 0xE4C DUP2 PUSH2 0x14A2 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 DUP2 ADD CALLDATALOAD PUSH2 0xE5D DUP2 PUSH2 0x14A2 JUMP JUMPDEST SWAP5 POP PUSH1 0x40 DUP8 ADD CALLDATALOAD PUSH2 0xE6D DUP2 PUSH2 0x14A2 JUMP JUMPDEST SWAP4 POP PUSH1 0x7F DUP8 ADD DUP9 SGT PUSH2 0xE7D JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x120 DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0xEA1 JUMPI PUSH2 0xEA1 PUSH2 0x148C JUMP JUMPDEST PUSH1 0x40 MSTORE DUP1 PUSH1 0x60 DUP10 ADD DUP5 DUP11 ADD DUP12 LT ISZERO PUSH2 0xEB7 JUMPI DUP6 DUP7 REVERT JUMPDEST DUP6 SWAP5 POP JUMPDEST PUSH1 0x9 DUP6 LT ISZERO PUSH2 0xEDA JUMPI DUP1 CALLDATALOAD DUP3 MSTORE PUSH1 0x1 SWAP5 SWAP1 SWAP5 ADD SWAP4 SWAP1 DUP4 ADD SWAP1 DUP4 ADD PUSH2 0xEBB JUMP JUMPDEST POP POP DUP1 SWAP4 POP POP POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xEFC JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0xE23 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xF1C JUMPI DUP1 DUP2 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xF34 JUMPI DUP1 DUP2 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD DUP2 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xF5B JUMPI PUSH1 0x20 DUP2 DUP7 ADD DUP2 ADD MLOAD DUP6 DUP4 ADD MSTORE ADD PUSH2 0xF41 JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0xF69 JUMPI DUP3 DUP3 DUP6 ADD MSTORE JUMPDEST POP SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP13 DUP14 AND DUP2 MSTORE SWAP11 DUP13 AND PUSH1 0x20 DUP13 ADD MSTORE SWAP9 SWAP1 SWAP11 AND PUSH1 0x40 DUP11 ADD MSTORE PUSH1 0x60 DUP10 ADD SWAP7 SWAP1 SWAP7 MSTORE PUSH1 0x80 DUP9 ADD SWAP5 SWAP1 SWAP5 MSTORE PUSH1 0xA0 DUP8 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0xC0 DUP7 ADD MSTORE PUSH1 0xE0 DUP6 ADD MSTORE PUSH2 0x100 DUP5 ADD MSTORE PUSH2 0x120 DUP4 ADD MSTORE SWAP2 ISZERO ISZERO PUSH2 0x140 DUP3 ADD MSTORE PUSH2 0x160 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH2 0x180 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND DUP2 MSTORE SWAP2 SWAP1 SWAP3 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1B SWAP1 DUP3 ADD MSTORE PUSH32 0x416C6C20746F6B656E20686173206265656E2077697468647261770000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x26 SWAP1 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x40 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xE SWAP1 DUP3 ADD MSTORE PUSH14 0x4F766572666C6F772076616C7565 PUSH1 0x90 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xA SWAP1 DUP3 ADD MSTORE PUSH10 0x4E6F7420616374697665 PUSH1 0xB0 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x10 SWAP1 DUP3 ADD MSTORE PUSH16 0x4E6F7420656E6F7567682076616C7565 PUSH1 0x80 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xC SWAP1 DUP3 ADD MSTORE PUSH12 0x53616C652073756365737373 PUSH1 0xA0 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 DUP2 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x27 SWAP1 DUP3 ADD MSTORE PUSH32 0x596F7520776974686472617720616C6C206F722068617665206E6F7420626F75 PUSH1 0x40 DUP3 ADD MSTORE PUSH7 0x19DA1D081E595D PUSH1 0xCA SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x24 SWAP1 DUP3 ADD MSTORE PUSH32 0x5472616E7366657248656C7065723A205452414E534645525F46524F4D5F4641 PUSH1 0x40 DUP3 ADD MSTORE PUSH4 0x12531151 PUSH1 0xE2 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1F SWAP1 DUP3 ADD MSTORE PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xF SWAP1 DUP3 ADD MSTORE PUSH15 0x53616C652069732073756363657373 PUSH1 0x88 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST SWAP6 DUP7 MSTORE PUSH1 0x20 DUP7 ADD SWAP5 SWAP1 SWAP5 MSTORE PUSH1 0x40 DUP6 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x60 DUP5 ADD MSTORE ISZERO ISZERO PUSH1 0x80 DUP4 ADD MSTORE ISZERO ISZERO PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 ADD SWAP1 JUMP JUMPDEST SWAP6 DUP7 MSTORE PUSH1 0x20 DUP7 ADD SWAP5 SWAP1 SWAP5 MSTORE PUSH1 0x40 DUP6 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x12EC JUMPI PUSH2 0x12EC PUSH2 0x1476 JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x130C JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 DUP2 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST DUP1 DUP3 JUMPDEST PUSH1 0x1 DUP1 DUP7 GT PUSH2 0x1323 JUMPI POP PUSH2 0x134E JUMP JUMPDEST DUP2 DUP8 DIV DUP3 GT ISZERO PUSH2 0x1335 JUMPI PUSH2 0x1335 PUSH2 0x1476 JUMP JUMPDEST DUP1 DUP7 AND ISZERO PUSH2 0x1342 JUMPI SWAP2 DUP2 MUL SWAP2 JUMPDEST SWAP5 SWAP1 SWAP5 SHR SWAP4 DUP1 MUL PUSH2 0x1314 JUMP JUMPDEST SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC1D PUSH1 0x0 NOT DUP5 DUP5 PUSH1 0x0 DUP3 PUSH2 0x1370 JUMPI POP PUSH1 0x1 PUSH2 0xE23 JUMP JUMPDEST DUP2 PUSH2 0x137D JUMPI POP PUSH1 0x0 PUSH2 0xE23 JUMP JUMPDEST DUP2 PUSH1 0x1 DUP2 EQ PUSH2 0x1393 JUMPI PUSH1 0x2 DUP2 EQ PUSH2 0x139D JUMPI PUSH2 0x13CA JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP PUSH2 0xE23 JUMP JUMPDEST PUSH1 0xFF DUP5 GT ISZERO PUSH2 0x13AE JUMPI PUSH2 0x13AE PUSH2 0x1476 JUMP JUMPDEST PUSH1 0x1 DUP5 SHL SWAP2 POP DUP5 DUP3 GT ISZERO PUSH2 0x13C4 JUMPI PUSH2 0x13C4 PUSH2 0x1476 JUMP JUMPDEST POP PUSH2 0xE23 JUMP JUMPDEST POP PUSH1 0x20 DUP4 LT PUSH2 0x133 DUP4 LT AND PUSH1 0x4E DUP5 LT PUSH1 0xB DUP5 LT AND OR ISZERO PUSH2 0x13FD JUMPI POP DUP2 DUP2 EXP DUP4 DUP2 GT ISZERO PUSH2 0x13F8 JUMPI PUSH2 0x13F8 PUSH2 0x1476 JUMP JUMPDEST PUSH2 0xE23 JUMP JUMPDEST PUSH2 0x140A DUP5 DUP5 DUP5 PUSH1 0x1 PUSH2 0x1311 JUMP JUMPDEST DUP1 DUP7 DIV DUP3 GT ISZERO PUSH2 0x141C JUMPI PUSH2 0x141C PUSH2 0x1476 JUMP JUMPDEST MUL SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x143F JUMPI PUSH2 0x143F PUSH2 0x1476 JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0x1456 JUMPI PUSH2 0x1456 PUSH2 0x1476 JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x0 NOT DUP3 EQ ISZERO PUSH2 0x146F JUMPI PUSH2 0x146F PUSH2 0x1476 JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x442 JUMPI PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x48 0xB7 RETURNDATACOPY SIGNEXTEND PUSH16 0x99A3F0907AB1389FFA3756223137B1D3 PUSH3 0xD1D012 0x4B 0xC8 0xA7 MOD 0x2A 0xE6 DUP4 PUSH5 0x736F6C6343 STOP ADDMOD STOP STOP CALLER ",
							"sourceMap": "370:6682:3:-:0;;;1734:1:7;1845:7;:22;942:32:6;961:12;:10;:12::i;:::-;942:18;:32::i;:::-;2109:4:3;:56;;2122:42;-1:-1:-1;;;;;;2109:56:3;;;;;;2176:54;:6;2187:42;2176:10;;;;;;;:54;;:::i;:::-;;2241;2252:42;2241:6;:10;;;;;;:54;;;;:::i;:::-;-1:-1:-1;2318:2:3;2306:9;:14;370:6682;;656:98:4;736:10;656:98;:::o;2333:191:6:-;2426:6;;;-1:-1:-1;;;;;2443:17:6;;;-1:-1:-1;;;;;;2443:17:6;;;;;;;2476:40;;2426:6;;;2443:17;2426:6;;2476:40;;2407:16;;2476:40;2333:191;;:::o;8259:152:5:-;8329:4;8353:50;8358:3;-1:-1:-1;;;;;8378:23:5;;8353:4;:50::i;:::-;8346:57;;8259:152;;;;;:::o;2174:414::-;2237:4;2259:21;2269:3;2274:5;2259:9;:21::i;:::-;2254:327;;-1:-1:-1;2297:23:5;;;;;;;;:11;:23;;;;;;;;;;;;;2480:18;;2458:19;;;:12;;;:19;;;;;;:40;;;;2513:11;;2254:327;-1:-1:-1;2564:5:5;2557:12;;4270:129;4343:4;4367:19;;;:12;;;;;:19;;;;;;:24;;;4270:129::o;370:6682:3:-;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:13360:10",
										"statements": [
											{
												"nodeType": "YulBlock",
												"src": "6:3:10",
												"statements": []
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "84:189:10",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "130:26:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "139:6:10"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "147:6:10"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "132:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "132:22:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "132:22:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "105:7:10"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "114:9:10"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "101:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "101:23:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "126:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "97:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "97:32:10"
															},
															"nodeType": "YulIf",
															"src": "94:2:10"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "165:36:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "191:9:10"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "178:12:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "178:23:10"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "169:5:10",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "237:5:10"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "210:26:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "210:33:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "210:33:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "252:15:10",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "262:5:10"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "252:6:10"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "50:9:10",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "61:7:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "73:6:10",
														"type": ""
													}
												],
												"src": "14:259:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "456:1124:10",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "466:13:10",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "476:3:10",
																"type": "",
																"value": "384"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "470:2:10",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "524:26:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value1",
																					"nodeType": "YulIdentifier",
																					"src": "533:6:10"
																				},
																				{
																					"name": "value1",
																					"nodeType": "YulIdentifier",
																					"src": "541:6:10"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "526:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "526:22:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "526:22:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "499:7:10"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "508:9:10"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "495:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "495:23:10"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "520:2:10"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "491:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "491:32:10"
															},
															"nodeType": "YulIf",
															"src": "488:2:10"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "559:36:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "585:9:10"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "572:12:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "572:23:10"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "563:5:10",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "631:5:10"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "604:26:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "604:33:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "604:33:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "646:15:10",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "656:5:10"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "646:6:10"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "670:12:10",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "680:2:10",
																"type": "",
																"value": "32"
															},
															"variables": [
																{
																	"name": "_2",
																	"nodeType": "YulTypedName",
																	"src": "674:2:10",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "691:47:10",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "723:9:10"
																			},
																			{
																				"name": "_2",
																				"nodeType": "YulIdentifier",
																				"src": "734:2:10"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "719:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "719:18:10"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "706:12:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "706:32:10"
															},
															"variables": [
																{
																	"name": "value_1",
																	"nodeType": "YulTypedName",
																	"src": "695:7:10",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value_1",
																		"nodeType": "YulIdentifier",
																		"src": "774:7:10"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "747:26:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "747:35:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "747:35:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "791:17:10",
															"value": {
																"name": "value_1",
																"nodeType": "YulIdentifier",
																"src": "801:7:10"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "791:6:10"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "817:47:10",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "849:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "860:2:10",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "845:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "845:18:10"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "832:12:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "832:32:10"
															},
															"variables": [
																{
																	"name": "value_2",
																	"nodeType": "YulTypedName",
																	"src": "821:7:10",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value_2",
																		"nodeType": "YulIdentifier",
																		"src": "900:7:10"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "873:26:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "873:35:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "873:35:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "917:17:10",
															"value": {
																"name": "value_2",
																"nodeType": "YulIdentifier",
																"src": "927:7:10"
															},
															"variableNames": [
																{
																	"name": "value2",
																	"nodeType": "YulIdentifier",
																	"src": "917:6:10"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "988:26:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value3",
																					"nodeType": "YulIdentifier",
																					"src": "997:6:10"
																				},
																				{
																					"name": "value3",
																					"nodeType": "YulIdentifier",
																					"src": "1005:6:10"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "990:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "990:22:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "990:22:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "961:9:10"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "972:3:10",
																						"type": "",
																						"value": "127"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "957:3:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "957:19:10"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "978:7:10"
																			}
																		],
																		"functionName": {
																			"name": "slt",
																			"nodeType": "YulIdentifier",
																			"src": "953:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "953:33:10"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "946:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "946:41:10"
															},
															"nodeType": "YulIf",
															"src": "943:2:10"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1023:23:10",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1043:2:10",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "1037:5:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1037:9:10"
															},
															"variables": [
																{
																	"name": "memPtr",
																	"nodeType": "YulTypedName",
																	"src": "1027:6:10",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1055:34:10",
															"value": {
																"arguments": [
																	{
																		"name": "memPtr",
																		"nodeType": "YulIdentifier",
																		"src": "1077:6:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1085:3:10",
																		"type": "",
																		"value": "288"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1073:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1073:16:10"
															},
															"variables": [
																{
																	"name": "newFreePtr",
																	"nodeType": "YulTypedName",
																	"src": "1059:10:10",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1164:22:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x41",
																				"nodeType": "YulIdentifier",
																				"src": "1166:16:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1166:18:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1166:18:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "newFreePtr",
																				"nodeType": "YulIdentifier",
																				"src": "1107:10:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1119:18:10",
																				"type": "",
																				"value": "0xffffffffffffffff"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "1104:2:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1104:34:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "newFreePtr",
																				"nodeType": "YulIdentifier",
																				"src": "1143:10:10"
																			},
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "1155:6:10"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nodeType": "YulIdentifier",
																			"src": "1140:2:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1140:22:10"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "1101:2:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1101:62:10"
															},
															"nodeType": "YulIf",
															"src": "1098:2:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1202:2:10",
																		"type": "",
																		"value": "64"
																	},
																	{
																		"name": "newFreePtr",
																		"nodeType": "YulIdentifier",
																		"src": "1206:10:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1195:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1195:22:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1195:22:10"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1226:17:10",
															"value": {
																"name": "memPtr",
																"nodeType": "YulIdentifier",
																"src": "1237:6:10"
															},
															"variables": [
																{
																	"name": "dst",
																	"nodeType": "YulTypedName",
																	"src": "1230:3:10",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1252:29:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1267:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1278:2:10",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1263:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1263:18:10"
															},
															"variables": [
																{
																	"name": "src",
																	"nodeType": "YulTypedName",
																	"src": "1256:3:10",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1325:26:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value3",
																					"nodeType": "YulIdentifier",
																					"src": "1334:6:10"
																				},
																				{
																					"name": "value3",
																					"nodeType": "YulIdentifier",
																					"src": "1342:6:10"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1327:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1327:22:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1327:22:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1300:9:10"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "1311:2:10"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1296:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1296:18:10"
																	},
																	{
																		"name": "dataEnd",
																		"nodeType": "YulIdentifier",
																		"src": "1316:7:10"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "1293:2:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1293:31:10"
															},
															"nodeType": "YulIf",
															"src": "1290:2:10"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1360:15:10",
															"value": {
																"name": "value3",
																"nodeType": "YulIdentifier",
																"src": "1369:6:10"
															},
															"variables": [
																{
																	"name": "i",
																	"nodeType": "YulTypedName",
																	"src": "1364:1:10",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1431:118:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "dst",
																					"nodeType": "YulIdentifier",
																					"src": "1452:3:10"
																				},
																				{
																					"arguments": [
																						{
																							"name": "src",
																							"nodeType": "YulIdentifier",
																							"src": "1470:3:10"
																						}
																					],
																					"functionName": {
																						"name": "calldataload",
																						"nodeType": "YulIdentifier",
																						"src": "1457:12:10"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "1457:17:10"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "1445:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1445:30:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1445:30:10"
																	},
																	{
																		"nodeType": "YulAssignment",
																		"src": "1488:19:10",
																		"value": {
																			"arguments": [
																				{
																					"name": "dst",
																					"nodeType": "YulIdentifier",
																					"src": "1499:3:10"
																				},
																				{
																					"name": "_2",
																					"nodeType": "YulIdentifier",
																					"src": "1504:2:10"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "1495:3:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1495:12:10"
																		},
																		"variableNames": [
																			{
																				"name": "dst",
																				"nodeType": "YulIdentifier",
																				"src": "1488:3:10"
																			}
																		]
																	},
																	{
																		"nodeType": "YulAssignment",
																		"src": "1520:19:10",
																		"value": {
																			"arguments": [
																				{
																					"name": "src",
																					"nodeType": "YulIdentifier",
																					"src": "1531:3:10"
																				},
																				{
																					"name": "_2",
																					"nodeType": "YulIdentifier",
																					"src": "1536:2:10"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "1527:3:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1527:12:10"
																		},
																		"variableNames": [
																			{
																				"name": "src",
																				"nodeType": "YulIdentifier",
																				"src": "1520:3:10"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "1395:1:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1398:4:10",
																		"type": "",
																		"value": "0x09"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "1392:2:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1392:11:10"
															},
															"nodeType": "YulForLoop",
															"post": {
																"nodeType": "YulBlock",
																"src": "1404:18:10",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "1406:14:10",
																		"value": {
																			"arguments": [
																				{
																					"name": "i",
																					"nodeType": "YulIdentifier",
																					"src": "1415:1:10"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1418:1:10",
																					"type": "",
																					"value": "1"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "1411:3:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1411:9:10"
																		},
																		"variableNames": [
																			{
																				"name": "i",
																				"nodeType": "YulIdentifier",
																				"src": "1406:1:10"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nodeType": "YulBlock",
																"src": "1388:3:10",
																"statements": []
															},
															"src": "1384:165:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1558:16:10",
															"value": {
																"name": "memPtr",
																"nodeType": "YulIdentifier",
																"src": "1568:6:10"
															},
															"variableNames": [
																{
																	"name": "value3",
																	"nodeType": "YulIdentifier",
																	"src": "1558:6:10"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address_payablet_contract$_ERC20_$585t_contract$_ERC20_$585t_array$_t_uint256_$9_memory_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "398:9:10",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "409:7:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "421:6:10",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "429:6:10",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "437:6:10",
														"type": ""
													},
													{
														"name": "value3",
														"nodeType": "YulTypedName",
														"src": "445:6:10",
														"type": ""
													}
												],
												"src": "278:1302:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1663:219:10",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1709:26:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "1718:6:10"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "1726:6:10"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1711:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1711:22:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1711:22:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1684:7:10"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1693:9:10"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1680:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1680:23:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1705:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1676:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1676:32:10"
															},
															"nodeType": "YulIf",
															"src": "1673:2:10"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1744:29:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1763:9:10"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "1757:5:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1757:16:10"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "1748:5:10",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1826:26:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "1835:6:10"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "1843:6:10"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1828:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1828:22:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1828:22:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "1795:5:10"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"name": "value",
																								"nodeType": "YulIdentifier",
																								"src": "1816:5:10"
																							}
																						],
																						"functionName": {
																							"name": "iszero",
																							"nodeType": "YulIdentifier",
																							"src": "1809:6:10"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "1809:13:10"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "1802:6:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1802:21:10"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "1792:2:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1792:32:10"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "1785:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1785:40:10"
															},
															"nodeType": "YulIf",
															"src": "1782:2:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1861:15:10",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "1871:5:10"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "1861:6:10"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_bool_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1629:9:10",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1640:7:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1652:6:10",
														"type": ""
													}
												],
												"src": "1585:297:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1957:120:10",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2003:26:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "2012:6:10"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "2020:6:10"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2005:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2005:22:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2005:22:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1978:7:10"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1987:9:10"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1974:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1974:23:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1999:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1970:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1970:32:10"
															},
															"nodeType": "YulIf",
															"src": "1967:2:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2038:33:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2061:9:10"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "2048:12:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2048:23:10"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "2038:6:10"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1923:9:10",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1934:7:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1946:6:10",
														"type": ""
													}
												],
												"src": "1887:190:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2163:113:10",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2209:26:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "2218:6:10"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "2226:6:10"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2211:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2211:22:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2211:22:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2184:7:10"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2193:9:10"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "2180:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2180:23:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2205:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "2176:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2176:32:10"
															},
															"nodeType": "YulIf",
															"src": "2173:2:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2244:26:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2260:9:10"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "2254:5:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2254:16:10"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "2244:6:10"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2129:9:10",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "2140:7:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2152:6:10",
														"type": ""
													}
												],
												"src": "2082:194:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2418:293:10",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "2428:27:10",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "2448:6:10"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "2442:5:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2442:13:10"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "2432:6:10",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "2464:12:10",
															"value": {
																"name": "end",
																"nodeType": "YulIdentifier",
																"src": "2473:3:10"
															},
															"variables": [
																{
																	"name": "i",
																	"nodeType": "YulTypedName",
																	"src": "2468:1:10",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2537:77:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "pos",
																							"nodeType": "YulIdentifier",
																							"src": "2562:3:10"
																						},
																						{
																							"name": "i",
																							"nodeType": "YulIdentifier",
																							"src": "2567:1:10"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "2558:3:10"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "2558:11:10"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"arguments": [
																										{
																											"name": "value0",
																											"nodeType": "YulIdentifier",
																											"src": "2585:6:10"
																										},
																										{
																											"name": "i",
																											"nodeType": "YulIdentifier",
																											"src": "2593:1:10"
																										}
																									],
																									"functionName": {
																										"name": "add",
																										"nodeType": "YulIdentifier",
																										"src": "2581:3:10"
																									},
																									"nodeType": "YulFunctionCall",
																									"src": "2581:14:10"
																								},
																								{
																									"kind": "number",
																									"nodeType": "YulLiteral",
																									"src": "2597:4:10",
																									"type": "",
																									"value": "0x20"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "2577:3:10"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "2577:25:10"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nodeType": "YulIdentifier",
																						"src": "2571:5:10"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "2571:32:10"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "2551:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2551:53:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2551:53:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "2496:1:10"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "2499:6:10"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "2493:2:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2493:13:10"
															},
															"nodeType": "YulForLoop",
															"post": {
																"nodeType": "YulBlock",
																"src": "2507:21:10",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "2509:17:10",
																		"value": {
																			"arguments": [
																				{
																					"name": "i",
																					"nodeType": "YulIdentifier",
																					"src": "2518:1:10"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2521:4:10",
																					"type": "",
																					"value": "0x20"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "2514:3:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2514:12:10"
																		},
																		"variableNames": [
																			{
																				"name": "i",
																				"nodeType": "YulIdentifier",
																				"src": "2509:1:10"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nodeType": "YulBlock",
																"src": "2489:3:10",
																"statements": []
															},
															"src": "2485:129:10"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2640:33:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "pos",
																							"nodeType": "YulIdentifier",
																							"src": "2653:3:10"
																						},
																						{
																							"name": "length",
																							"nodeType": "YulIdentifier",
																							"src": "2658:6:10"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "2649:3:10"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "2649:16:10"
																				},
																				{
																					"name": "end",
																					"nodeType": "YulIdentifier",
																					"src": "2667:3:10"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "2642:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2642:29:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2642:29:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "2629:1:10"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "2632:6:10"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "2626:2:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2626:13:10"
															},
															"nodeType": "YulIf",
															"src": "2623:2:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2682:23:10",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "2693:3:10"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "2698:6:10"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2689:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2689:16:10"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "2682:3:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "2394:3:10",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2399:6:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "2410:3:10",
														"type": ""
													}
												],
												"src": "2281:430:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2817:102:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2827:26:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2839:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2850:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2835:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2835:18:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "2827:4:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2869:9:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "2884:6:10"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "2900:3:10",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "2905:1:10",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nodeType": "YulIdentifier",
																							"src": "2896:3:10"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "2896:11:10"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "2909:1:10",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nodeType": "YulIdentifier",
																					"src": "2892:3:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2892:19:10"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "2880:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2880:32:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2862:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2862:51:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2862:51:10"
														}
													]
												},
												"name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2786:9:10",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2797:6:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "2808:4:10",
														"type": ""
													}
												],
												"src": "2716:203:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3371:641:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3381:27:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3393:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3404:3:10",
																		"type": "",
																		"value": "384"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3389:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3389:19:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "3381:4:10"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "3417:29:10",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3435:3:10",
																				"type": "",
																				"value": "160"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3440:1:10",
																				"type": "",
																				"value": "1"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "3431:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3431:11:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3444:1:10",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "3427:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3427:19:10"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "3421:2:10",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3462:9:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "3477:6:10"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "3485:2:10"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "3473:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3473:15:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3455:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3455:34:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3455:34:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3509:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3520:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3505:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3505:18:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value1",
																				"nodeType": "YulIdentifier",
																				"src": "3529:6:10"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "3537:2:10"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "3525:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3525:15:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3498:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3498:43:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3498:43:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3561:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3572:2:10",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3557:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3557:18:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value2",
																				"nodeType": "YulIdentifier",
																				"src": "3581:6:10"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "3589:2:10"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "3577:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3577:15:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3550:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3550:43:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3550:43:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3613:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3624:2:10",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3609:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3609:18:10"
																	},
																	{
																		"name": "value3",
																		"nodeType": "YulIdentifier",
																		"src": "3629:6:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3602:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3602:34:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3602:34:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3656:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3667:3:10",
																				"type": "",
																				"value": "128"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3652:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3652:19:10"
																	},
																	{
																		"name": "value4",
																		"nodeType": "YulIdentifier",
																		"src": "3673:6:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3645:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3645:35:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3645:35:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3700:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3711:3:10",
																				"type": "",
																				"value": "160"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3696:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3696:19:10"
																	},
																	{
																		"name": "value5",
																		"nodeType": "YulIdentifier",
																		"src": "3717:6:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3689:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3689:35:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3689:35:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3744:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3755:3:10",
																				"type": "",
																				"value": "192"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3740:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3740:19:10"
																	},
																	{
																		"name": "value6",
																		"nodeType": "YulIdentifier",
																		"src": "3761:6:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3733:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3733:35:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3733:35:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3788:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3799:3:10",
																				"type": "",
																				"value": "224"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3784:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3784:19:10"
																	},
																	{
																		"name": "value7",
																		"nodeType": "YulIdentifier",
																		"src": "3805:6:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3777:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3777:35:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3777:35:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3832:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3843:3:10",
																				"type": "",
																				"value": "256"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3828:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3828:19:10"
																	},
																	{
																		"name": "value8",
																		"nodeType": "YulIdentifier",
																		"src": "3849:6:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3821:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3821:35:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3821:35:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3876:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3887:3:10",
																				"type": "",
																				"value": "288"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3872:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3872:19:10"
																	},
																	{
																		"name": "value9",
																		"nodeType": "YulIdentifier",
																		"src": "3893:6:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3865:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3865:35:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3865:35:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3920:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3931:3:10",
																				"type": "",
																				"value": "320"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3916:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3916:19:10"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value10",
																						"nodeType": "YulIdentifier",
																						"src": "3951:7:10"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "3944:6:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3944:15:10"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "3937:6:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3937:23:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3909:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3909:52:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3909:52:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3981:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3992:3:10",
																				"type": "",
																				"value": "352"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3977:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3977:19:10"
																	},
																	{
																		"name": "value11",
																		"nodeType": "YulIdentifier",
																		"src": "3998:7:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3970:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3970:36:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3970:36:10"
														}
													]
												},
												"name": "abi_encode_tuple_t_address_payable_t_contract$_ERC20_$585_t_contract$_ERC20_$585_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256_t_bool_t_uint256__to_t_address_payable_t_address_t_address_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256_t_bool_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3250:9:10",
														"type": ""
													},
													{
														"name": "value11",
														"nodeType": "YulTypedName",
														"src": "3261:7:10",
														"type": ""
													},
													{
														"name": "value10",
														"nodeType": "YulTypedName",
														"src": "3270:7:10",
														"type": ""
													},
													{
														"name": "value9",
														"nodeType": "YulTypedName",
														"src": "3279:6:10",
														"type": ""
													},
													{
														"name": "value8",
														"nodeType": "YulTypedName",
														"src": "3287:6:10",
														"type": ""
													},
													{
														"name": "value7",
														"nodeType": "YulTypedName",
														"src": "3295:6:10",
														"type": ""
													},
													{
														"name": "value6",
														"nodeType": "YulTypedName",
														"src": "3303:6:10",
														"type": ""
													},
													{
														"name": "value5",
														"nodeType": "YulTypedName",
														"src": "3311:6:10",
														"type": ""
													},
													{
														"name": "value4",
														"nodeType": "YulTypedName",
														"src": "3319:6:10",
														"type": ""
													},
													{
														"name": "value3",
														"nodeType": "YulTypedName",
														"src": "3327:6:10",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "3335:6:10",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "3343:6:10",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "3351:6:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "3362:4:10",
														"type": ""
													}
												],
												"src": "2924:1088:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4174:218:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "4184:26:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4196:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4207:2:10",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4192:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4192:18:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "4184:4:10"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "4219:29:10",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4237:3:10",
																				"type": "",
																				"value": "160"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4242:1:10",
																				"type": "",
																				"value": "1"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "4233:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4233:11:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4246:1:10",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "4229:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4229:19:10"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "4223:2:10",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4264:9:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "4279:6:10"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "4287:2:10"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "4275:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4275:15:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4257:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4257:34:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4257:34:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4311:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4322:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4307:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4307:18:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value1",
																				"nodeType": "YulIdentifier",
																				"src": "4331:6:10"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "4339:2:10"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "4327:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4327:15:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4300:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4300:43:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4300:43:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4363:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4374:2:10",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4359:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4359:18:10"
																	},
																	{
																		"name": "value2",
																		"nodeType": "YulIdentifier",
																		"src": "4379:6:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4352:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4352:34:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4352:34:10"
														}
													]
												},
												"name": "abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4127:9:10",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "4138:6:10",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "4146:6:10",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "4154:6:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "4165:4:10",
														"type": ""
													}
												],
												"src": "4017:375:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4526:145:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "4536:26:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4548:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4559:2:10",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4544:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4544:18:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "4536:4:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4578:9:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "4593:6:10"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "4609:3:10",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "4614:1:10",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nodeType": "YulIdentifier",
																							"src": "4605:3:10"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "4605:11:10"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "4618:1:10",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nodeType": "YulIdentifier",
																					"src": "4601:3:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4601:19:10"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "4589:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4589:32:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4571:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4571:51:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4571:51:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4642:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4653:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4638:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4638:18:10"
																	},
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "4658:6:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4631:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4631:34:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4631:34:10"
														}
													]
												},
												"name": "abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4487:9:10",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "4498:6:10",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "4506:6:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "4517:4:10",
														"type": ""
													}
												],
												"src": "4397:274:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4771:92:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "4781:26:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4793:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4804:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4789:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4789:18:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "4781:4:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4823:9:10"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value0",
																						"nodeType": "YulIdentifier",
																						"src": "4848:6:10"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "4841:6:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4841:14:10"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "4834:6:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4834:22:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4816:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4816:41:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4816:41:10"
														}
													]
												},
												"name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4740:9:10",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "4751:6:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "4762:4:10",
														"type": ""
													}
												],
												"src": "4676:187:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4983:102:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "4993:26:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5005:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5016:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5001:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "5001:18:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "4993:4:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5035:9:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "5050:6:10"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "5066:3:10",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "5071:1:10",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nodeType": "YulIdentifier",
																							"src": "5062:3:10"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "5062:11:10"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "5075:1:10",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nodeType": "YulIdentifier",
																					"src": "5058:3:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "5058:19:10"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "5046:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5046:32:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5028:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "5028:51:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5028:51:10"
														}
													]
												},
												"name": "abi_encode_tuple_t_contract$_IERC20_$663__to_t_address__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4952:9:10",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "4963:6:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "4974:4:10",
														"type": ""
													}
												],
												"src": "4868:217:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5264:177:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5281:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5292:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5274:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "5274:21:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5274:21:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5315:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5326:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5311:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5311:18:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5331:2:10",
																		"type": "",
																		"value": "27"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5304:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "5304:30:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5304:30:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5354:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5365:2:10",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5350:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5350:18:10"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "5370:29:10",
																		"type": "",
																		"value": "All token has been withdraw"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5343:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "5343:57:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5343:57:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "5409:26:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5421:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5432:2:10",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5417:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "5417:18:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "5409:4:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_1a08ca9b2c061630f3688e7825008183e816899b30fb4092678404714b0570be__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5241:9:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "5255:4:10",
														"type": ""
													}
												],
												"src": "5090:351:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5620:228:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5637:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5648:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5630:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "5630:21:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5630:21:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5671:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5682:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5667:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5667:18:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5687:2:10",
																		"type": "",
																		"value": "38"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5660:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "5660:30:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5660:30:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5710:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5721:2:10",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5706:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5706:18:10"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "5726:34:10",
																		"type": "",
																		"value": "Ownable: new owner is the zero a"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5699:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "5699:62:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5699:62:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5781:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5792:2:10",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5777:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5777:18:10"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "5797:8:10",
																		"type": "",
																		"value": "ddress"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5770:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "5770:36:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5770:36:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "5815:27:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5827:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5838:3:10",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5823:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "5823:19:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "5815:4:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5597:9:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "5611:4:10",
														"type": ""
													}
												],
												"src": "5446:402:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6027:164:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6044:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6055:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6037:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "6037:21:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6037:21:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6078:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6089:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6074:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6074:18:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6094:2:10",
																		"type": "",
																		"value": "14"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6067:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "6067:30:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6067:30:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6117:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6128:2:10",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6113:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6113:18:10"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "6133:16:10",
																		"type": "",
																		"value": "Overflow value"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6106:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "6106:44:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6106:44:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "6159:26:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6171:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6182:2:10",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "6167:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "6167:18:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "6159:4:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_48cc793e3ea877d6bf034b11f4c6d0d583dd24a0f1374daf495701b65f42f81c__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "6004:9:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "6018:4:10",
														"type": ""
													}
												],
												"src": "5853:338:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6370:160:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6387:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6398:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6380:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "6380:21:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6380:21:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6421:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6432:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6417:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6417:18:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6437:2:10",
																		"type": "",
																		"value": "10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6410:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "6410:30:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6410:30:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6460:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6471:2:10",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6456:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6456:18:10"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "6476:12:10",
																		"type": "",
																		"value": "Not active"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6449:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "6449:40:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6449:40:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "6498:26:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6510:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6521:2:10",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "6506:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "6506:18:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "6498:4:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_4f4071cacb98a73fb0fb3325a9a9a07b87a20a90340fd79a56fa9441c16f3367__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "6347:9:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "6361:4:10",
														"type": ""
													}
												],
												"src": "6196:334:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6709:166:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6726:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6737:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6719:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "6719:21:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6719:21:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6760:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6771:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6756:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6756:18:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6776:2:10",
																		"type": "",
																		"value": "16"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6749:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "6749:30:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6749:30:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6799:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6810:2:10",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6795:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6795:18:10"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "6815:18:10",
																		"type": "",
																		"value": "Not enough value"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6788:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "6788:46:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6788:46:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "6843:26:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6855:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6866:2:10",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "6851:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "6851:18:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "6843:4:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_8254a19c2218e87bd65e7d451e5bbd6df57ba9f73035118b8f47be7b5659ddde__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "6686:9:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "6700:4:10",
														"type": ""
													}
												],
												"src": "6535:340:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7054:162:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7071:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7082:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7064:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "7064:21:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7064:21:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7105:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7116:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7101:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7101:18:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7121:2:10",
																		"type": "",
																		"value": "12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7094:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "7094:30:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7094:30:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7144:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7155:2:10",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7140:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7140:18:10"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "7160:14:10",
																		"type": "",
																		"value": "Sale sucesss"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7133:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "7133:42:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7133:42:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "7184:26:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7196:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7207:2:10",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "7192:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "7192:18:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "7184:4:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_889f3e86a9951bfad2140f6dc5924dd7f98edb776cbbf33fc4908c6b5d4cff41__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "7031:9:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "7045:4:10",
														"type": ""
													}
												],
												"src": "6880:336:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7395:182:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7412:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7423:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7405:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "7405:21:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7405:21:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7446:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7457:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7442:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7442:18:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7462:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7435:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "7435:30:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7435:30:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7485:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7496:2:10",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7481:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7481:18:10"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "7501:34:10",
																		"type": "",
																		"value": "Ownable: caller is not the owner"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7474:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "7474:62:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7474:62:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "7545:26:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7557:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7568:2:10",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "7553:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "7553:18:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "7545:4:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "7372:9:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "7386:4:10",
														"type": ""
													}
												],
												"src": "7221:356:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7756:229:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7773:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7784:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7766:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "7766:21:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7766:21:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7807:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7818:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7803:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7803:18:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7823:2:10",
																		"type": "",
																		"value": "39"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7796:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "7796:30:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7796:30:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7846:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7857:2:10",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7842:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7842:18:10"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "7862:34:10",
																		"type": "",
																		"value": "You withdraw all or have not bou"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7835:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "7835:62:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7835:62:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7917:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7928:2:10",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7913:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7913:18:10"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "7933:9:10",
																		"type": "",
																		"value": "ght yet"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7906:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "7906:37:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7906:37:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "7952:27:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7964:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7975:3:10",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "7960:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "7960:19:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "7952:4:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_dd6d59c83c1bd1de3b78051d04016b176b56ee6f6028c113e575cf17865caf0f__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "7733:9:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "7747:4:10",
														"type": ""
													}
												],
												"src": "7582:403:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8164:226:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "8181:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8192:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8174:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "8174:21:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8174:21:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8215:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8226:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8211:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8211:18:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8231:2:10",
																		"type": "",
																		"value": "36"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8204:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "8204:30:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8204:30:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8254:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8265:2:10",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8250:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8250:18:10"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "8270:34:10",
																		"type": "",
																		"value": "TransferHelper: TRANSFER_FROM_FA"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8243:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "8243:62:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8243:62:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8325:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8336:2:10",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8321:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8321:18:10"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "8341:6:10",
																		"type": "",
																		"value": "ILED"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8314:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "8314:34:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8314:34:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "8357:27:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "8369:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8380:3:10",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "8365:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "8365:19:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "8357:4:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_eb2904bf3c0c9ae693b53eb0188a703c388998a9c405b7965ca678cef9a51d18__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "8141:9:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "8155:4:10",
														"type": ""
													}
												],
												"src": "7990:400:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8569:181:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "8586:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8597:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8579:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "8579:21:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8579:21:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8620:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8631:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8616:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8616:18:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8636:2:10",
																		"type": "",
																		"value": "31"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8609:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "8609:30:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8609:30:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8659:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8670:2:10",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8655:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8655:18:10"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "8675:33:10",
																		"type": "",
																		"value": "ReentrancyGuard: reentrant call"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8648:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "8648:61:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8648:61:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "8718:26:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "8730:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8741:2:10",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "8726:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "8726:18:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "8718:4:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "8546:9:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "8560:4:10",
														"type": ""
													}
												],
												"src": "8395:355:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8929:165:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "8946:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8957:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8939:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "8939:21:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8939:21:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8980:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8991:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8976:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8976:18:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8996:2:10",
																		"type": "",
																		"value": "15"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8969:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "8969:30:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8969:30:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9019:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9030:2:10",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9015:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9015:18:10"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "9035:17:10",
																		"type": "",
																		"value": "Sale is success"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9008:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "9008:45:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9008:45:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "9062:26:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "9074:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9085:2:10",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "9070:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "9070:18:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "9062:4:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_f04f9a30ea5d365bfb2900741297979fe0df33fc47f4cd4f9a152dc08b22c374__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "8906:9:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "8920:4:10",
														"type": ""
													}
												],
												"src": "8755:339:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9200:76:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "9210:26:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "9222:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9233:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "9218:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "9218:18:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "9210:4:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "9252:9:10"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "9263:6:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9245:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "9245:25:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9245:25:10"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "9169:9:10",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "9180:6:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "9191:4:10",
														"type": ""
													}
												],
												"src": "9099:177:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9410:119:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "9420:26:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "9432:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9443:2:10",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "9428:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "9428:18:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "9420:4:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "9462:9:10"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "9473:6:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9455:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "9455:25:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9455:25:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9500:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9511:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9496:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9496:18:10"
																	},
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "9516:6:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9489:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "9489:34:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9489:34:10"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "9371:9:10",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "9382:6:10",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "9390:6:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "9401:4:10",
														"type": ""
													}
												],
												"src": "9281:248:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9763:326:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "9773:27:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "9785:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9796:3:10",
																		"type": "",
																		"value": "192"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "9781:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "9781:19:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "9773:4:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "9816:9:10"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "9827:6:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9809:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "9809:25:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9809:25:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9854:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9865:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9850:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9850:18:10"
																	},
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "9870:6:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9843:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "9843:34:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9843:34:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9897:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9908:2:10",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9893:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9893:18:10"
																	},
																	{
																		"name": "value2",
																		"nodeType": "YulIdentifier",
																		"src": "9913:6:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9886:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "9886:34:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9886:34:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9940:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9951:2:10",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9936:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9936:18:10"
																	},
																	{
																		"name": "value3",
																		"nodeType": "YulIdentifier",
																		"src": "9956:6:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9929:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "9929:34:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9929:34:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9983:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9994:3:10",
																				"type": "",
																				"value": "128"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9979:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9979:19:10"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value4",
																						"nodeType": "YulIdentifier",
																						"src": "10014:6:10"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "10007:6:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "10007:14:10"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "10000:6:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10000:22:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9972:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "9972:51:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9972:51:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10043:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10054:3:10",
																				"type": "",
																				"value": "160"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10039:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10039:19:10"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value5",
																						"nodeType": "YulIdentifier",
																						"src": "10074:6:10"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "10067:6:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "10067:14:10"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "10060:6:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10060:22:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10032:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "10032:51:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10032:51:10"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256_t_uint256_t_uint256_t_uint256_t_bool_t_bool__to_t_uint256_t_uint256_t_uint256_t_uint256_t_bool_t_bool__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "9692:9:10",
														"type": ""
													},
													{
														"name": "value5",
														"nodeType": "YulTypedName",
														"src": "9703:6:10",
														"type": ""
													},
													{
														"name": "value4",
														"nodeType": "YulTypedName",
														"src": "9711:6:10",
														"type": ""
													},
													{
														"name": "value3",
														"nodeType": "YulTypedName",
														"src": "9719:6:10",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "9727:6:10",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "9735:6:10",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "9743:6:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "9754:4:10",
														"type": ""
													}
												],
												"src": "9534:555:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10335:294:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "10345:27:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "10357:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10368:3:10",
																		"type": "",
																		"value": "192"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "10353:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "10353:19:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "10345:4:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "10388:9:10"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "10399:6:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10381:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "10381:25:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10381:25:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10426:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10437:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10422:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10422:18:10"
																	},
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "10442:6:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10415:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "10415:34:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10415:34:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10469:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10480:2:10",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10465:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10465:18:10"
																	},
																	{
																		"name": "value2",
																		"nodeType": "YulIdentifier",
																		"src": "10485:6:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10458:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "10458:34:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10458:34:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10512:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10523:2:10",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10508:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10508:18:10"
																	},
																	{
																		"name": "value3",
																		"nodeType": "YulIdentifier",
																		"src": "10528:6:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10501:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "10501:34:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10501:34:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10555:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10566:3:10",
																				"type": "",
																				"value": "128"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10551:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10551:19:10"
																	},
																	{
																		"name": "value4",
																		"nodeType": "YulIdentifier",
																		"src": "10572:6:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10544:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "10544:35:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10544:35:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10599:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10610:3:10",
																				"type": "",
																				"value": "160"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10595:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10595:19:10"
																	},
																	{
																		"name": "value5",
																		"nodeType": "YulIdentifier",
																		"src": "10616:6:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10588:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "10588:35:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10588:35:10"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "10264:9:10",
														"type": ""
													},
													{
														"name": "value5",
														"nodeType": "YulTypedName",
														"src": "10275:6:10",
														"type": ""
													},
													{
														"name": "value4",
														"nodeType": "YulTypedName",
														"src": "10283:6:10",
														"type": ""
													},
													{
														"name": "value3",
														"nodeType": "YulTypedName",
														"src": "10291:6:10",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "10299:6:10",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "10307:6:10",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "10315:6:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "10326:4:10",
														"type": ""
													}
												],
												"src": "10094:535:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10682:80:10",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "10709:22:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "10711:16:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "10711:18:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "10711:18:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "10698:1:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "y",
																				"nodeType": "YulIdentifier",
																				"src": "10705:1:10"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nodeType": "YulIdentifier",
																			"src": "10701:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10701:6:10"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "10695:2:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "10695:13:10"
															},
															"nodeType": "YulIf",
															"src": "10692:2:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "10740:16:10",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "10751:1:10"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "10754:1:10"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "10747:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "10747:9:10"
															},
															"variableNames": [
																{
																	"name": "sum",
																	"nodeType": "YulIdentifier",
																	"src": "10740:3:10"
																}
															]
														}
													]
												},
												"name": "checked_add_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "10665:1:10",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "10668:1:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "sum",
														"nodeType": "YulTypedName",
														"src": "10674:3:10",
														"type": ""
													}
												],
												"src": "10634:128:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10813:171:10",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "10844:111:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "r",
																					"nodeType": "YulIdentifier",
																					"src": "10865:1:10"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "10872:3:10",
																							"type": "",
																							"value": "224"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "10877:10:10",
																							"type": "",
																							"value": "0x4e487b71"
																						}
																					],
																					"functionName": {
																						"name": "shl",
																						"nodeType": "YulIdentifier",
																						"src": "10868:3:10"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "10868:20:10"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "10858:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "10858:31:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "10858:31:10"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "10909:1:10",
																					"type": "",
																					"value": "4"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "10912:4:10",
																					"type": "",
																					"value": "0x12"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "10902:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "10902:15:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "10902:15:10"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "r",
																					"nodeType": "YulIdentifier",
																					"src": "10937:1:10"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "10940:4:10",
																					"type": "",
																					"value": "0x24"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "10930:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "10930:15:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "10930:15:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "10833:1:10"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "10826:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "10826:9:10"
															},
															"nodeType": "YulIf",
															"src": "10823:2:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "10964:14:10",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "10973:1:10"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "10976:1:10"
																	}
																],
																"functionName": {
																	"name": "div",
																	"nodeType": "YulIdentifier",
																	"src": "10969:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "10969:9:10"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "10964:1:10"
																}
															]
														}
													]
												},
												"name": "checked_div_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "10798:1:10",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "10801:1:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "r",
														"nodeType": "YulTypedName",
														"src": "10807:1:10",
														"type": ""
													}
												],
												"src": "10767:217:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11066:376:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "11076:15:10",
															"value": {
																"name": "_power",
																"nodeType": "YulIdentifier",
																"src": "11085:6:10"
															},
															"variableNames": [
																{
																	"name": "power",
																	"nodeType": "YulIdentifier",
																	"src": "11076:5:10"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "11100:13:10",
															"value": {
																"name": "_base",
																"nodeType": "YulIdentifier",
																"src": "11108:5:10"
															},
															"variableNames": [
																{
																	"name": "base",
																	"nodeType": "YulIdentifier",
																	"src": "11100:4:10"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "11147:289:10",
																"statements": [
																	{
																		"nodeType": "YulVariableDeclaration",
																		"src": "11161:11:10",
																		"value": {
																			"kind": "number",
																			"nodeType": "YulLiteral",
																			"src": "11171:1:10",
																			"type": "",
																			"value": "1"
																		},
																		"variables": [
																			{
																				"name": "_1",
																				"nodeType": "YulTypedName",
																				"src": "11165:2:10",
																				"type": ""
																			}
																		]
																	},
																	{
																		"body": {
																			"nodeType": "YulBlock",
																			"src": "11213:9:10",
																			"statements": [
																				{
																					"nodeType": "YulBreak",
																					"src": "11215:5:10"
																				}
																			]
																		},
																		"condition": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "exponent",
																							"nodeType": "YulIdentifier",
																							"src": "11198:8:10"
																						},
																						{
																							"name": "_1",
																							"nodeType": "YulIdentifier",
																							"src": "11208:2:10"
																						}
																					],
																					"functionName": {
																						"name": "gt",
																						"nodeType": "YulIdentifier",
																						"src": "11195:2:10"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "11195:16:10"
																				}
																			],
																			"functionName": {
																				"name": "iszero",
																				"nodeType": "YulIdentifier",
																				"src": "11188:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "11188:24:10"
																		},
																		"nodeType": "YulIf",
																		"src": "11185:2:10"
																	},
																	{
																		"body": {
																			"nodeType": "YulBlock",
																			"src": "11263:22:10",
																			"statements": [
																				{
																					"expression": {
																						"arguments": [],
																						"functionName": {
																							"name": "panic_error_0x11",
																							"nodeType": "YulIdentifier",
																							"src": "11265:16:10"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "11265:18:10"
																					},
																					"nodeType": "YulExpressionStatement",
																					"src": "11265:18:10"
																				}
																			]
																		},
																		"condition": {
																			"arguments": [
																				{
																					"name": "base",
																					"nodeType": "YulIdentifier",
																					"src": "11241:4:10"
																				},
																				{
																					"arguments": [
																						{
																							"name": "max",
																							"nodeType": "YulIdentifier",
																							"src": "11251:3:10"
																						},
																						{
																							"name": "base",
																							"nodeType": "YulIdentifier",
																							"src": "11256:4:10"
																						}
																					],
																					"functionName": {
																						"name": "div",
																						"nodeType": "YulIdentifier",
																						"src": "11247:3:10"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "11247:14:10"
																				}
																			],
																			"functionName": {
																				"name": "gt",
																				"nodeType": "YulIdentifier",
																				"src": "11238:2:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "11238:24:10"
																		},
																		"nodeType": "YulIf",
																		"src": "11235:2:10"
																	},
																	{
																		"body": {
																			"nodeType": "YulBlock",
																			"src": "11319:29:10",
																			"statements": [
																				{
																					"nodeType": "YulAssignment",
																					"src": "11321:25:10",
																					"value": {
																						"arguments": [
																							{
																								"name": "power",
																								"nodeType": "YulIdentifier",
																								"src": "11334:5:10"
																							},
																							{
																								"name": "base",
																								"nodeType": "YulIdentifier",
																								"src": "11341:4:10"
																							}
																						],
																						"functionName": {
																							"name": "mul",
																							"nodeType": "YulIdentifier",
																							"src": "11330:3:10"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "11330:16:10"
																					},
																					"variableNames": [
																						{
																							"name": "power",
																							"nodeType": "YulIdentifier",
																							"src": "11321:5:10"
																						}
																					]
																				}
																			]
																		},
																		"condition": {
																			"arguments": [
																				{
																					"name": "exponent",
																					"nodeType": "YulIdentifier",
																					"src": "11305:8:10"
																				},
																				{
																					"name": "_1",
																					"nodeType": "YulIdentifier",
																					"src": "11315:2:10"
																				}
																			],
																			"functionName": {
																				"name": "and",
																				"nodeType": "YulIdentifier",
																				"src": "11301:3:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "11301:17:10"
																		},
																		"nodeType": "YulIf",
																		"src": "11298:2:10"
																	},
																	{
																		"nodeType": "YulAssignment",
																		"src": "11361:23:10",
																		"value": {
																			"arguments": [
																				{
																					"name": "base",
																					"nodeType": "YulIdentifier",
																					"src": "11373:4:10"
																				},
																				{
																					"name": "base",
																					"nodeType": "YulIdentifier",
																					"src": "11379:4:10"
																				}
																			],
																			"functionName": {
																				"name": "mul",
																				"nodeType": "YulIdentifier",
																				"src": "11369:3:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "11369:15:10"
																		},
																		"variableNames": [
																			{
																				"name": "base",
																				"nodeType": "YulIdentifier",
																				"src": "11361:4:10"
																			}
																		]
																	},
																	{
																		"nodeType": "YulAssignment",
																		"src": "11397:29:10",
																		"value": {
																			"arguments": [
																				{
																					"name": "_1",
																					"nodeType": "YulIdentifier",
																					"src": "11413:2:10"
																				},
																				{
																					"name": "exponent",
																					"nodeType": "YulIdentifier",
																					"src": "11417:8:10"
																				}
																			],
																			"functionName": {
																				"name": "shr",
																				"nodeType": "YulIdentifier",
																				"src": "11409:3:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "11409:17:10"
																		},
																		"variableNames": [
																			{
																				"name": "exponent",
																				"nodeType": "YulIdentifier",
																				"src": "11397:8:10"
																			}
																		]
																	}
																]
															},
															"condition": {
																"kind": "bool",
																"nodeType": "YulLiteral",
																"src": "11130:4:10",
																"type": "",
																"value": "true"
															},
															"nodeType": "YulForLoop",
															"post": {
																"nodeType": "YulBlock",
																"src": "11135:3:10",
																"statements": []
															},
															"pre": {
																"nodeType": "YulBlock",
																"src": "11126:3:10",
																"statements": []
															},
															"src": "11122:314:10"
														}
													]
												},
												"name": "checked_exp_helper",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "_power",
														"nodeType": "YulTypedName",
														"src": "11017:6:10",
														"type": ""
													},
													{
														"name": "_base",
														"nodeType": "YulTypedName",
														"src": "11025:5:10",
														"type": ""
													},
													{
														"name": "exponent",
														"nodeType": "YulTypedName",
														"src": "11032:8:10",
														"type": ""
													},
													{
														"name": "max",
														"nodeType": "YulTypedName",
														"src": "11042:3:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "power",
														"nodeType": "YulTypedName",
														"src": "11050:5:10",
														"type": ""
													},
													{
														"name": "base",
														"nodeType": "YulTypedName",
														"src": "11057:4:10",
														"type": ""
													}
												],
												"src": "10989:453:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11517:69:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "11527:53:10",
															"value": {
																"arguments": [
																	{
																		"name": "base",
																		"nodeType": "YulIdentifier",
																		"src": "11557:4:10"
																	},
																	{
																		"name": "exponent",
																		"nodeType": "YulIdentifier",
																		"src": "11563:8:10"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11577:1:10",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nodeType": "YulIdentifier",
																			"src": "11573:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11573:6:10"
																	}
																],
																"functionName": {
																	"name": "checked_exp_unsigned",
																	"nodeType": "YulIdentifier",
																	"src": "11536:20:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "11536:44:10"
															},
															"variableNames": [
																{
																	"name": "power",
																	"nodeType": "YulIdentifier",
																	"src": "11527:5:10"
																}
															]
														}
													]
												},
												"name": "checked_exp_t_uint256_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "base",
														"nodeType": "YulTypedName",
														"src": "11488:4:10",
														"type": ""
													},
													{
														"name": "exponent",
														"nodeType": "YulTypedName",
														"src": "11494:8:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "power",
														"nodeType": "YulTypedName",
														"src": "11507:5:10",
														"type": ""
													}
												],
												"src": "11447:139:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11655:858:10",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "11693:52:10",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "11707:10:10",
																		"value": {
																			"kind": "number",
																			"nodeType": "YulLiteral",
																			"src": "11716:1:10",
																			"type": "",
																			"value": "1"
																		},
																		"variableNames": [
																			{
																				"name": "power",
																				"nodeType": "YulIdentifier",
																				"src": "11707:5:10"
																			}
																		]
																	},
																	{
																		"nodeType": "YulLeave",
																		"src": "11730:5:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "exponent",
																		"nodeType": "YulIdentifier",
																		"src": "11675:8:10"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "11668:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "11668:16:10"
															},
															"nodeType": "YulIf",
															"src": "11665:2:10"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "11778:52:10",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "11792:10:10",
																		"value": {
																			"kind": "number",
																			"nodeType": "YulLiteral",
																			"src": "11801:1:10",
																			"type": "",
																			"value": "0"
																		},
																		"variableNames": [
																			{
																				"name": "power",
																				"nodeType": "YulIdentifier",
																				"src": "11792:5:10"
																			}
																		]
																	},
																	{
																		"nodeType": "YulLeave",
																		"src": "11815:5:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "base",
																		"nodeType": "YulIdentifier",
																		"src": "11764:4:10"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "11757:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "11757:12:10"
															},
															"nodeType": "YulIf",
															"src": "11754:2:10"
														},
														{
															"cases": [
																{
																	"body": {
																		"nodeType": "YulBlock",
																		"src": "11866:52:10",
																		"statements": [
																			{
																				"nodeType": "YulAssignment",
																				"src": "11880:10:10",
																				"value": {
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "11889:1:10",
																					"type": "",
																					"value": "1"
																				},
																				"variableNames": [
																					{
																						"name": "power",
																						"nodeType": "YulIdentifier",
																						"src": "11880:5:10"
																					}
																				]
																			},
																			{
																				"nodeType": "YulLeave",
																				"src": "11903:5:10"
																			}
																		]
																	},
																	"nodeType": "YulCase",
																	"src": "11859:59:10",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11864:1:10",
																		"type": "",
																		"value": "1"
																	}
																},
																{
																	"body": {
																		"nodeType": "YulBlock",
																		"src": "11934:176:10",
																		"statements": [
																			{
																				"body": {
																					"nodeType": "YulBlock",
																					"src": "11969:22:10",
																					"statements": [
																						{
																							"expression": {
																								"arguments": [],
																								"functionName": {
																									"name": "panic_error_0x11",
																									"nodeType": "YulIdentifier",
																									"src": "11971:16:10"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "11971:18:10"
																							},
																							"nodeType": "YulExpressionStatement",
																							"src": "11971:18:10"
																						}
																					]
																				},
																				"condition": {
																					"arguments": [
																						{
																							"name": "exponent",
																							"nodeType": "YulIdentifier",
																							"src": "11954:8:10"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "11964:3:10",
																							"type": "",
																							"value": "255"
																						}
																					],
																					"functionName": {
																						"name": "gt",
																						"nodeType": "YulIdentifier",
																						"src": "11951:2:10"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "11951:17:10"
																				},
																				"nodeType": "YulIf",
																				"src": "11948:2:10"
																			},
																			{
																				"nodeType": "YulAssignment",
																				"src": "12004:25:10",
																				"value": {
																					"arguments": [
																						{
																							"name": "exponent",
																							"nodeType": "YulIdentifier",
																							"src": "12017:8:10"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "12027:1:10",
																							"type": "",
																							"value": "1"
																						}
																					],
																					"functionName": {
																						"name": "shl",
																						"nodeType": "YulIdentifier",
																						"src": "12013:3:10"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "12013:16:10"
																				},
																				"variableNames": [
																					{
																						"name": "power",
																						"nodeType": "YulIdentifier",
																						"src": "12004:5:10"
																					}
																				]
																			},
																			{
																				"body": {
																					"nodeType": "YulBlock",
																					"src": "12060:22:10",
																					"statements": [
																						{
																							"expression": {
																								"arguments": [],
																								"functionName": {
																									"name": "panic_error_0x11",
																									"nodeType": "YulIdentifier",
																									"src": "12062:16:10"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "12062:18:10"
																							},
																							"nodeType": "YulExpressionStatement",
																							"src": "12062:18:10"
																						}
																					]
																				},
																				"condition": {
																					"arguments": [
																						{
																							"name": "power",
																							"nodeType": "YulIdentifier",
																							"src": "12048:5:10"
																						},
																						{
																							"name": "max",
																							"nodeType": "YulIdentifier",
																							"src": "12055:3:10"
																						}
																					],
																					"functionName": {
																						"name": "gt",
																						"nodeType": "YulIdentifier",
																						"src": "12045:2:10"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "12045:14:10"
																				},
																				"nodeType": "YulIf",
																				"src": "12042:2:10"
																			},
																			{
																				"nodeType": "YulLeave",
																				"src": "12095:5:10"
																			}
																		]
																	},
																	"nodeType": "YulCase",
																	"src": "11927:183:10",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11932:1:10",
																		"type": "",
																		"value": "2"
																	}
																}
															],
															"expression": {
																"name": "base",
																"nodeType": "YulIdentifier",
																"src": "11846:4:10"
															},
															"nodeType": "YulSwitch",
															"src": "11839:271:10"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "12208:123:10",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "12222:28:10",
																		"value": {
																			"arguments": [
																				{
																					"name": "base",
																					"nodeType": "YulIdentifier",
																					"src": "12235:4:10"
																				},
																				{
																					"name": "exponent",
																					"nodeType": "YulIdentifier",
																					"src": "12241:8:10"
																				}
																			],
																			"functionName": {
																				"name": "exp",
																				"nodeType": "YulIdentifier",
																				"src": "12231:3:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "12231:19:10"
																		},
																		"variableNames": [
																			{
																				"name": "power",
																				"nodeType": "YulIdentifier",
																				"src": "12222:5:10"
																			}
																		]
																	},
																	{
																		"body": {
																			"nodeType": "YulBlock",
																			"src": "12281:22:10",
																			"statements": [
																				{
																					"expression": {
																						"arguments": [],
																						"functionName": {
																							"name": "panic_error_0x11",
																							"nodeType": "YulIdentifier",
																							"src": "12283:16:10"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "12283:18:10"
																					},
																					"nodeType": "YulExpressionStatement",
																					"src": "12283:18:10"
																				}
																			]
																		},
																		"condition": {
																			"arguments": [
																				{
																					"name": "power",
																					"nodeType": "YulIdentifier",
																					"src": "12269:5:10"
																				},
																				{
																					"name": "max",
																					"nodeType": "YulIdentifier",
																					"src": "12276:3:10"
																				}
																			],
																			"functionName": {
																				"name": "gt",
																				"nodeType": "YulIdentifier",
																				"src": "12266:2:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "12266:14:10"
																		},
																		"nodeType": "YulIf",
																		"src": "12263:2:10"
																	},
																	{
																		"nodeType": "YulLeave",
																		"src": "12316:5:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "base",
																						"nodeType": "YulIdentifier",
																						"src": "12132:4:10"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "12138:2:10",
																						"type": "",
																						"value": "11"
																					}
																				],
																				"functionName": {
																					"name": "lt",
																					"nodeType": "YulIdentifier",
																					"src": "12129:2:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "12129:12:10"
																			},
																			{
																				"arguments": [
																					{
																						"name": "exponent",
																						"nodeType": "YulIdentifier",
																						"src": "12146:8:10"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "12156:2:10",
																						"type": "",
																						"value": "78"
																					}
																				],
																				"functionName": {
																					"name": "lt",
																					"nodeType": "YulIdentifier",
																					"src": "12143:2:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "12143:16:10"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "12125:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12125:35:10"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "base",
																						"nodeType": "YulIdentifier",
																						"src": "12169:4:10"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "12175:3:10",
																						"type": "",
																						"value": "307"
																					}
																				],
																				"functionName": {
																					"name": "lt",
																					"nodeType": "YulIdentifier",
																					"src": "12166:2:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "12166:13:10"
																			},
																			{
																				"arguments": [
																					{
																						"name": "exponent",
																						"nodeType": "YulIdentifier",
																						"src": "12184:8:10"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "12194:2:10",
																						"type": "",
																						"value": "32"
																					}
																				],
																				"functionName": {
																					"name": "lt",
																					"nodeType": "YulIdentifier",
																					"src": "12181:2:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "12181:16:10"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "12162:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12162:36:10"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "12122:2:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "12122:77:10"
															},
															"nodeType": "YulIf",
															"src": "12119:2:10"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "12340:65:10",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12382:1:10",
																		"type": "",
																		"value": "1"
																	},
																	{
																		"name": "base",
																		"nodeType": "YulIdentifier",
																		"src": "12385:4:10"
																	},
																	{
																		"name": "exponent",
																		"nodeType": "YulIdentifier",
																		"src": "12391:8:10"
																	},
																	{
																		"name": "max",
																		"nodeType": "YulIdentifier",
																		"src": "12401:3:10"
																	}
																],
																"functionName": {
																	"name": "checked_exp_helper",
																	"nodeType": "YulIdentifier",
																	"src": "12363:18:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "12363:42:10"
															},
															"variables": [
																{
																	"name": "power_1",
																	"nodeType": "YulTypedName",
																	"src": "12344:7:10",
																	"type": ""
																},
																{
																	"name": "base_1",
																	"nodeType": "YulTypedName",
																	"src": "12353:6:10",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "12447:22:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "12449:16:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "12449:18:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "12449:18:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "power_1",
																		"nodeType": "YulIdentifier",
																		"src": "12420:7:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "max",
																				"nodeType": "YulIdentifier",
																				"src": "12433:3:10"
																			},
																			{
																				"name": "base_1",
																				"nodeType": "YulIdentifier",
																				"src": "12438:6:10"
																			}
																		],
																		"functionName": {
																			"name": "div",
																			"nodeType": "YulIdentifier",
																			"src": "12429:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12429:16:10"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "12417:2:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "12417:29:10"
															},
															"nodeType": "YulIf",
															"src": "12414:2:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "12478:29:10",
															"value": {
																"arguments": [
																	{
																		"name": "power_1",
																		"nodeType": "YulIdentifier",
																		"src": "12491:7:10"
																	},
																	{
																		"name": "base_1",
																		"nodeType": "YulIdentifier",
																		"src": "12500:6:10"
																	}
																],
																"functionName": {
																	"name": "mul",
																	"nodeType": "YulIdentifier",
																	"src": "12487:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "12487:20:10"
															},
															"variableNames": [
																{
																	"name": "power",
																	"nodeType": "YulIdentifier",
																	"src": "12478:5:10"
																}
															]
														}
													]
												},
												"name": "checked_exp_unsigned",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "base",
														"nodeType": "YulTypedName",
														"src": "11621:4:10",
														"type": ""
													},
													{
														"name": "exponent",
														"nodeType": "YulTypedName",
														"src": "11627:8:10",
														"type": ""
													},
													{
														"name": "max",
														"nodeType": "YulTypedName",
														"src": "11637:3:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "power",
														"nodeType": "YulTypedName",
														"src": "11645:5:10",
														"type": ""
													}
												],
												"src": "11591:922:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "12570:116:10",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "12629:22:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "12631:16:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "12631:18:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "12631:18:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "x",
																						"nodeType": "YulIdentifier",
																						"src": "12601:1:10"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "12594:6:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "12594:9:10"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "12587:6:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12587:17:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "y",
																				"nodeType": "YulIdentifier",
																				"src": "12609:1:10"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "12620:1:10",
																								"type": "",
																								"value": "0"
																							}
																						],
																						"functionName": {
																							"name": "not",
																							"nodeType": "YulIdentifier",
																							"src": "12616:3:10"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "12616:6:10"
																					},
																					{
																						"name": "x",
																						"nodeType": "YulIdentifier",
																						"src": "12624:1:10"
																					}
																				],
																				"functionName": {
																					"name": "div",
																					"nodeType": "YulIdentifier",
																					"src": "12612:3:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "12612:14:10"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "12606:2:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12606:21:10"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "12583:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "12583:45:10"
															},
															"nodeType": "YulIf",
															"src": "12580:2:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "12660:20:10",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "12675:1:10"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "12678:1:10"
																	}
																],
																"functionName": {
																	"name": "mul",
																	"nodeType": "YulIdentifier",
																	"src": "12671:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "12671:9:10"
															},
															"variableNames": [
																{
																	"name": "product",
																	"nodeType": "YulIdentifier",
																	"src": "12660:7:10"
																}
															]
														}
													]
												},
												"name": "checked_mul_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "12549:1:10",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "12552:1:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "product",
														"nodeType": "YulTypedName",
														"src": "12558:7:10",
														"type": ""
													}
												],
												"src": "12518:168:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "12740:76:10",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "12762:22:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "12764:16:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "12764:18:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "12764:18:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "12756:1:10"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "12759:1:10"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "12753:2:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "12753:8:10"
															},
															"nodeType": "YulIf",
															"src": "12750:2:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "12793:17:10",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "12805:1:10"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "12808:1:10"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "12801:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "12801:9:10"
															},
															"variableNames": [
																{
																	"name": "diff",
																	"nodeType": "YulIdentifier",
																	"src": "12793:4:10"
																}
															]
														}
													]
												},
												"name": "checked_sub_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "12722:1:10",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "12725:1:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "diff",
														"nodeType": "YulTypedName",
														"src": "12731:4:10",
														"type": ""
													}
												],
												"src": "12691:125:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "12868:88:10",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "12899:22:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "12901:16:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "12901:18:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "12901:18:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "12884:5:10"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "12895:1:10",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nodeType": "YulIdentifier",
																			"src": "12891:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12891:6:10"
																	}
																],
																"functionName": {
																	"name": "eq",
																	"nodeType": "YulIdentifier",
																	"src": "12881:2:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "12881:17:10"
															},
															"nodeType": "YulIf",
															"src": "12878:2:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "12930:20:10",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "12941:5:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12948:1:10",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "12937:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "12937:13:10"
															},
															"variableNames": [
																{
																	"name": "ret",
																	"nodeType": "YulIdentifier",
																	"src": "12930:3:10"
																}
															]
														}
													]
												},
												"name": "increment_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "12850:5:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "ret",
														"nodeType": "YulTypedName",
														"src": "12860:3:10",
														"type": ""
													}
												],
												"src": "12821:135:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "12993:95:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "13010:1:10",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "13017:3:10",
																				"type": "",
																				"value": "224"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "13022:10:10",
																				"type": "",
																				"value": "0x4e487b71"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "13013:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13013:20:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "13003:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "13003:31:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13003:31:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "13050:1:10",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "13053:4:10",
																		"type": "",
																		"value": "0x11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "13043:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "13043:15:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13043:15:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "13074:1:10",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "13077:4:10",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "13067:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "13067:15:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13067:15:10"
														}
													]
												},
												"name": "panic_error_0x11",
												"nodeType": "YulFunctionDefinition",
												"src": "12961:127:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "13125:95:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "13142:1:10",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "13149:3:10",
																				"type": "",
																				"value": "224"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "13154:10:10",
																				"type": "",
																				"value": "0x4e487b71"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "13145:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13145:20:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "13135:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "13135:31:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13135:31:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "13182:1:10",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "13185:4:10",
																		"type": "",
																		"value": "0x41"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "13175:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "13175:15:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13175:15:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "13206:1:10",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "13209:4:10",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "13199:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "13199:15:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13199:15:10"
														}
													]
												},
												"name": "panic_error_0x41",
												"nodeType": "YulFunctionDefinition",
												"src": "13093:127:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "13272:86:10",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "13336:16:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "13345:1:10",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "13348:1:10",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "13338:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "13338:12:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "13338:12:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "13295:5:10"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "13306:5:10"
																					},
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "13321:3:10",
																										"type": "",
																										"value": "160"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "13326:1:10",
																										"type": "",
																										"value": "1"
																									}
																								],
																								"functionName": {
																									"name": "shl",
																									"nodeType": "YulIdentifier",
																									"src": "13317:3:10"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "13317:11:10"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "13330:1:10",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "sub",
																							"nodeType": "YulIdentifier",
																							"src": "13313:3:10"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "13313:19:10"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "13302:3:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "13302:31:10"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "13292:2:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13292:42:10"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "13285:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "13285:50:10"
															},
															"nodeType": "YulIf",
															"src": "13282:2:10"
														}
													]
												},
												"name": "validator_revert_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "13261:5:10",
														"type": ""
													}
												],
												"src": "13225:133:10"
											}
										]
									},
									"contents": "{\n    { }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        let value := calldataload(headStart)\n        validator_revert_t_address(value)\n        value0 := value\n    }\n    function abi_decode_tuple_t_address_payablet_contract$_ERC20_$585t_contract$_ERC20_$585t_array$_t_uint256_$9_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        let _1 := 384\n        if slt(sub(dataEnd, headStart), _1) { revert(value1, value1) }\n        let value := calldataload(headStart)\n        validator_revert_t_address(value)\n        value0 := value\n        let _2 := 32\n        let value_1 := calldataload(add(headStart, _2))\n        validator_revert_t_address(value_1)\n        value1 := value_1\n        let value_2 := calldataload(add(headStart, 64))\n        validator_revert_t_address(value_2)\n        value2 := value_2\n        if iszero(slt(add(headStart, 127), dataEnd)) { revert(value3, value3) }\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, 288)\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        let dst := memPtr\n        let src := add(headStart, 96)\n        if gt(add(headStart, _1), dataEnd) { revert(value3, value3) }\n        let i := value3\n        for { } lt(i, 0x09) { i := add(i, 1) }\n        {\n            mstore(dst, calldataload(src))\n            dst := add(dst, _2)\n            src := add(src, _2)\n        }\n        value3 := memPtr\n    }\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        let value := mload(headStart)\n        if iszero(eq(value, iszero(iszero(value)))) { revert(value0, value0) }\n        value0 := value\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        value0 := mload(headStart)\n    }\n    function abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        let length := mload(value0)\n        let i := end\n        for { } lt(i, length) { i := add(i, 0x20) }\n        {\n            mstore(add(pos, i), mload(add(add(value0, i), 0x20)))\n        }\n        if gt(i, length) { mstore(add(pos, length), end) }\n        end := add(pos, length)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_address_payable_t_contract$_ERC20_$585_t_contract$_ERC20_$585_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256_t_bool_t_uint256__to_t_address_payable_t_address_t_address_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256_t_bool_t_uint256__fromStack_reversed(headStart, value11, value10, value9, value8, value7, value6, value5, value4, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 384)\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), and(value2, _1))\n        mstore(add(headStart, 96), value3)\n        mstore(add(headStart, 128), value4)\n        mstore(add(headStart, 160), value5)\n        mstore(add(headStart, 192), value6)\n        mstore(add(headStart, 224), value7)\n        mstore(add(headStart, 256), value8)\n        mstore(add(headStart, 288), value9)\n        mstore(add(headStart, 320), iszero(iszero(value10)))\n        mstore(add(headStart, 352), value11)\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n    }\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_encode_tuple_t_contract$_IERC20_$663__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_stringliteral_1a08ca9b2c061630f3688e7825008183e816899b30fb4092678404714b0570be__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 27)\n        mstore(add(headStart, 64), \"All token has been withdraw\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"Ownable: new owner is the zero a\")\n        mstore(add(headStart, 96), \"ddress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_48cc793e3ea877d6bf034b11f4c6d0d583dd24a0f1374daf495701b65f42f81c__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 14)\n        mstore(add(headStart, 64), \"Overflow value\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_4f4071cacb98a73fb0fb3325a9a9a07b87a20a90340fd79a56fa9441c16f3367__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 10)\n        mstore(add(headStart, 64), \"Not active\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_8254a19c2218e87bd65e7d451e5bbd6df57ba9f73035118b8f47be7b5659ddde__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 16)\n        mstore(add(headStart, 64), \"Not enough value\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_889f3e86a9951bfad2140f6dc5924dd7f98edb776cbbf33fc4908c6b5d4cff41__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 12)\n        mstore(add(headStart, 64), \"Sale sucesss\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 32)\n        mstore(add(headStart, 64), \"Ownable: caller is not the owner\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_dd6d59c83c1bd1de3b78051d04016b176b56ee6f6028c113e575cf17865caf0f__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 39)\n        mstore(add(headStart, 64), \"You withdraw all or have not bou\")\n        mstore(add(headStart, 96), \"ght yet\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_eb2904bf3c0c9ae693b53eb0188a703c388998a9c405b7965ca678cef9a51d18__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 36)\n        mstore(add(headStart, 64), \"TransferHelper: TRANSFER_FROM_FA\")\n        mstore(add(headStart, 96), \"ILED\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 31)\n        mstore(add(headStart, 64), \"ReentrancyGuard: reentrant call\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_f04f9a30ea5d365bfb2900741297979fe0df33fc47f4cd4f9a152dc08b22c374__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 15)\n        mstore(add(headStart, 64), \"Sale is success\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_uint256_t_uint256_t_uint256_t_uint256_t_bool_t_bool__to_t_uint256_t_uint256_t_uint256_t_uint256_t_bool_t_bool__fromStack_reversed(headStart, value5, value4, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 192)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n        mstore(add(headStart, 128), iszero(iszero(value4)))\n        mstore(add(headStart, 160), iszero(iszero(value5)))\n    }\n    function abi_encode_tuple_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256__fromStack_reversed(headStart, value5, value4, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 192)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n        mstore(add(headStart, 128), value4)\n        mstore(add(headStart, 160), value5)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        if gt(x, not(y)) { panic_error_0x11() }\n        sum := add(x, y)\n    }\n    function checked_div_t_uint256(x, y) -> r\n    {\n        if iszero(y)\n        {\n            mstore(r, shl(224, 0x4e487b71))\n            mstore(4, 0x12)\n            revert(r, 0x24)\n        }\n        r := div(x, y)\n    }\n    function checked_exp_helper(_power, _base, exponent, max) -> power, base\n    {\n        power := _power\n        base := _base\n        for { } true { }\n        {\n            let _1 := 1\n            if iszero(gt(exponent, _1)) { break }\n            if gt(base, div(max, base)) { panic_error_0x11() }\n            if and(exponent, _1) { power := mul(power, base) }\n            base := mul(base, base)\n            exponent := shr(_1, exponent)\n        }\n    }\n    function checked_exp_t_uint256_t_uint256(base, exponent) -> power\n    {\n        power := checked_exp_unsigned(base, exponent, not(0))\n    }\n    function checked_exp_unsigned(base, exponent, max) -> power\n    {\n        if iszero(exponent)\n        {\n            power := 1\n            leave\n        }\n        if iszero(base)\n        {\n            power := 0\n            leave\n        }\n        switch base\n        case 1 {\n            power := 1\n            leave\n        }\n        case 2 {\n            if gt(exponent, 255) { panic_error_0x11() }\n            power := shl(exponent, 1)\n            if gt(power, max) { panic_error_0x11() }\n            leave\n        }\n        if or(and(lt(base, 11), lt(exponent, 78)), and(lt(base, 307), lt(exponent, 32)))\n        {\n            power := exp(base, exponent)\n            if gt(power, max) { panic_error_0x11() }\n            leave\n        }\n        let power_1, base_1 := checked_exp_helper(1, base, exponent, max)\n        if gt(power_1, div(max, base_1)) { panic_error_0x11() }\n        power := mul(power_1, base_1)\n    }\n    function checked_mul_t_uint256(x, y) -> product\n    {\n        if and(iszero(iszero(x)), gt(y, div(not(0), x))) { panic_error_0x11() }\n        product := mul(x, y)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        if lt(x, y) { panic_error_0x11() }\n        diff := sub(x, y)\n    }\n    function increment_t_uint256(value) -> ret\n    {\n        if eq(value, not(0)) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function validator_revert_t_address(value)\n    {\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n}",
									"id": 10,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "6080604052600436106101095760003560e01c80638f1eae4c11610095578063b6b55f2511610064578063b6b55f2514610285578063cad5b0f714610298578063e2d3f423146102ba578063f2fde38b146102ec578063f8b2cb4f1461030c57610109565b80638f1eae4c14610214578063ab33985a14610234578063acfb235514610249578063ad5c46481461027057610109565b80633b5ef2ad116100dc5780633b5ef2ad1461019e57806356c5f349146101b3578063715018a6146101d3578063861faf5f146101ea5780638da5cb5b146101f257610109565b806312e5d0b91461010e57806318856a2f1461013a5780631df4ccfc14610167578063200d2ed214610189575b600080fd5b34801561011a57600080fd5b5061012361032c565b604051610131929190611277565b60405180910390f35b34801561014657600080fd5b5061014f610335565b6040516101319c9b9a99989796959493929190610f88565b34801561017357600080fd5b5061017c610376565b604051610131919061126e565b34801561019557600080fd5b5061017c61037c565b3480156101aa57600080fd5b5061017c6103aa565b3480156101bf57600080fd5b5061017c6101ce366004610e07565b6103b0565b3480156101df57600080fd5b506101e86103c2565b005b6101e8610416565b3480156101fe57600080fd5b50610207610445565b6040516101319190610f74565b34801561022057600080fd5b506101e861022f366004610e2a565b610454565b34801561024057600080fd5b506101e8610629565b34801561025557600080fd5b5061025e6107d3565b604051610131969594939291906112b1565b34801561027c57600080fd5b506102076107e8565b6101e8610293366004610f0b565b6107f7565b3480156102a457600080fd5b506102ad610b38565b604051610131919061102a565b3480156102c657600080fd5b506102da6102d5366004610e07565b610b52565b60405161013196959493929190611285565b3480156102f857600080fd5b506101e8610307366004610e07565b610b8d565b34801561031857600080fd5b5061017c610327366004610e07565b610bfb565b600b54600c5482565b600d54600e54600f546010546011546012546013546014546015546016546017546018546001600160a01b039b8c169b9a8b169a9099169860ff909116908c565b601d5481565b601154600090421015610391575060006103a7565b6012544211156103a3575060026103a7565b5060015b90565b601a5481565b60036020526000908152604090205481565b6103ca610c26565b6001600160a01b03166103db610445565b6001600160a01b03161461040a5760405162461bcd60e51b81526004016104019061114e565b60405180910390fd5b6104146000610c2a565b565b60405133904780156108fc02916000818181858888f19350505050158015610442573d6000803e3d6000fd5b50565b6001546001600160a01b031690565b600d80546001600160a01b038087166001600160a01b031992831617909255600e80548684169083161790819055600f80548685169316929092179091556040805163313ce56760e01b81529051919092169163313ce567916004808301926020929190829003018186803b1580156104cc57600080fd5b505afa1580156104e0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105049190610f23565b61050f90600a611357565b815161051b9190611425565b6010556020808201516011556040808301516012556060830151601355600f54815163313ce56760e01b815291516001600160a01b039091169263313ce5679260048082019391829003018186803b15801561057657600080fd5b505afa15801561058a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ae9190610f23565b6105b990600a611357565b60808201516105c89190611425565b60145560a081015160155560c081015160165560e0810151600b819055610100820151600c55600f54601954601780546001600160a01b03938416939092169290921460ff1990911617905560105461062091610c7c565b60185550505050565b6002600054141561064c5760405162461bcd60e51b81526004016104019061120e565b600260005561065961037c565b6001146106785760405162461bcd60e51b815260040161040190611128565b60065460055460009161068a91611444565b116106a75760405162461bcd60e51b815260040161040190611035565b33600090815260026020526040902060018101546106d75760405162461bcd60e51b815260040161040190611183565b600061070d6103e86107078460010154610701600d600901546103e8610c8890919063ffffffff16565b90610c7c565b90610c94565b9050806004600201600082825461072491906112d9565b9091555050600182015460009061073c908390611444565b60018401839055600e5460405163a9059cbb60e01b81529192506001600160a01b03169063a9059cbb906107769033908690600401611011565b602060405180830381600087803b15801561079057600080fd5b505af11580156107a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107c89190610eeb565b505060016000555050565b60045460055460065460075460085460095486565b6019546001600160a01b031681565b6002600054141561081a5760405162461bcd60e51b81526004016104019061120e565b600260005561082761037c565b6001146108465760405162461bcd60e51b8152600401610401906110da565b336000908152600260205260408120601354909183918291906103e8908310156108825760405162461bcd60e51b8152600401610401906110fe565b6014548311156108a45760405162461bcd60e51b8152600401610401906110b2565b6108ac610b38565b6108dc576108cd8161070785610701601a5486610c8890919063ffffffff16565b92506108d98385611444565b91505b84546014546000916108ed91611444565b6004546018549192506000916109039190611444565b905060008183116109145782610916565b815b90508086106109375760405162461bcd60e51b815260040161040190611245565b60006109de600d60020160009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561098d57600080fd5b505afa1580156109a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109c59190610f23565b6109d090600a611357565b601054610707908a90610c7c565b9050878960000160008282546109f491906112d9565b9250508190555080896001016000828254610a0f91906112d9565b909155505060048054889190600090610a299084906112d9565b909155505060058054829190600090610a439084906112d9565b909155505060088054906000610a588361145b565b90915550503360009081526003602052604081208054889290610a7c9084906112d9565b9250508190555085601d6000828254610a9591906112d9565b909155505060175460ff168015610ab4575034610ab287896112d9565b105b15610afc57336108fc87610ac88a34611444565b610ad29190611444565b6040518115909202916000818181858888f19350505050158015610afa573d6000803e3d6000fd5b505b60175460ff16610b2757600f54610b27906001600160a01b03163330610b228a8c6112d9565b610ca0565b505060016000555050505050505050565b6000610b4d610b45610c26565b601b90610d90565b905090565b600260208190526000918252604090912080546001820154928201546003830154600490930154919392909160ff8082169161010090041686565b610b95610c26565b6001600160a01b0316610ba6610445565b6001600160a01b031614610bcc5760405162461bcd60e51b81526004016104019061114e565b6001600160a01b038116610bf25760405162461bcd60e51b81526004016104019061106c565b61044281610c2a565b6001600160a01b03163190565b6000610c1d836001600160a01b038416610da5565b90505b92915050565b3390565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000610c1d8284611425565b6000610c1d8284611444565b6000610c1d82846112f1565b600080856001600160a01b03166323b872dd868686604051602401610cc793929190610fed565b6040516020818303038152906040529060e01b6020820180516001600160e01b038381831617835250505050604051610d009190610f3b565b6000604051808303816000865af19150503d8060008114610d3d576040519150601f19603f3d011682016040523d82523d6000602084013e610d42565b606091505b5091509150818015610d6c575080511580610d6c575080806020019051810190610d6c9190610eeb565b610d885760405162461bcd60e51b8152600401610401906111ca565b505050505050565b6000610c1d836001600160a01b038416610def565b6000610db18383610def565b610de757508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610c20565b506000610c20565b60009081526001919091016020526040902054151590565b600060208284031215610e18578081fd5b8135610e23816114a2565b9392505050565b600080600080610180808688031215610e41578384fd5b8535610e4c816114a2565b9450602086810135610e5d816114a2565b94506040870135610e6d816114a2565b9350607f87018813610e7d578283fd5b604051610120810181811067ffffffffffffffff82111715610ea157610ea161148c565b6040528060608901848a018b1015610eb7578586fd5b8594505b6009851015610eda578035825260019490940193908301908301610ebb565b505080935050505092959194509250565b600060208284031215610efc578081fd5b81518015158114610e23578182fd5b600060208284031215610f1c578081fd5b5035919050565b600060208284031215610f34578081fd5b5051919050565b60008251815b81811015610f5b5760208186018101518583015201610f41565b81811115610f695782828501525b509190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b039c8d1681529a8c1660208c015298909a1660408a01526060890196909652608088019490945260a087019290925260c086015260e08501526101008401526101208301529115156101408201526101608101919091526101800190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b901515815260200190565b6020808252601b908201527f416c6c20746f6b656e20686173206265656e2077697468647261770000000000604082015260600190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b6020808252600e908201526d4f766572666c6f772076616c756560901b604082015260600190565b6020808252600a90820152694e6f742061637469766560b01b604082015260600190565b60208082526010908201526f4e6f7420656e6f7567682076616c756560801b604082015260600190565b6020808252600c908201526b53616c65207375636573737360a01b604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526027908201527f596f7520776974686472617720616c6c206f722068617665206e6f7420626f7560408201526619da1d081e595d60ca1b606082015260800190565b60208082526024908201527f5472616e7366657248656c7065723a205452414e534645525f46524f4d5f46416040820152631253115160e21b606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6020808252600f908201526e53616c65206973207375636365737360881b604082015260600190565b90815260200190565b918252602082015260400190565b95865260208601949094526040850192909252606084015215156080830152151560a082015260c00190565b958652602086019490945260408501929092526060840152608083015260a082015260c00190565b600082198211156112ec576112ec611476565b500190565b60008261130c57634e487b7160e01b81526012600452602481fd5b500490565b80825b6001808611611323575061134e565b81870482111561133557611335611476565b8086161561134257918102915b9490941c938002611314565b94509492505050565b6000610c1d600019848460008261137057506001610e23565b8161137d57506000610e23565b8160018114611393576002811461139d576113ca565b6001915050610e23565b60ff8411156113ae576113ae611476565b6001841b9150848211156113c4576113c4611476565b50610e23565b5060208310610133831016604e8410600b84101617156113fd575081810a838111156113f8576113f8611476565b610e23565b61140a8484846001611311565b80860482111561141c5761141c611476565b02949350505050565b600081600019048311821515161561143f5761143f611476565b500290565b60008282101561145657611456611476565b500390565b600060001982141561146f5761146f611476565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461044257600080fdfea264697066735822122048b73e0b6f99a3f0907ab1389ffa3756223137b1d362d1d0124bc8a7062ae68364736f6c63430008000033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x109 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8F1EAE4C GT PUSH2 0x95 JUMPI DUP1 PUSH4 0xB6B55F25 GT PUSH2 0x64 JUMPI DUP1 PUSH4 0xB6B55F25 EQ PUSH2 0x285 JUMPI DUP1 PUSH4 0xCAD5B0F7 EQ PUSH2 0x298 JUMPI DUP1 PUSH4 0xE2D3F423 EQ PUSH2 0x2BA JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x2EC JUMPI DUP1 PUSH4 0xF8B2CB4F EQ PUSH2 0x30C JUMPI PUSH2 0x109 JUMP JUMPDEST DUP1 PUSH4 0x8F1EAE4C EQ PUSH2 0x214 JUMPI DUP1 PUSH4 0xAB33985A EQ PUSH2 0x234 JUMPI DUP1 PUSH4 0xACFB2355 EQ PUSH2 0x249 JUMPI DUP1 PUSH4 0xAD5C4648 EQ PUSH2 0x270 JUMPI PUSH2 0x109 JUMP JUMPDEST DUP1 PUSH4 0x3B5EF2AD GT PUSH2 0xDC JUMPI DUP1 PUSH4 0x3B5EF2AD EQ PUSH2 0x19E JUMPI DUP1 PUSH4 0x56C5F349 EQ PUSH2 0x1B3 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x1D3 JUMPI DUP1 PUSH4 0x861FAF5F EQ PUSH2 0x1EA JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x1F2 JUMPI PUSH2 0x109 JUMP JUMPDEST DUP1 PUSH4 0x12E5D0B9 EQ PUSH2 0x10E JUMPI DUP1 PUSH4 0x18856A2F EQ PUSH2 0x13A JUMPI DUP1 PUSH4 0x1DF4CCFC EQ PUSH2 0x167 JUMPI DUP1 PUSH4 0x200D2ED2 EQ PUSH2 0x189 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x11A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x123 PUSH2 0x32C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x131 SWAP3 SWAP2 SWAP1 PUSH2 0x1277 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x146 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x14F PUSH2 0x335 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x131 SWAP13 SWAP12 SWAP11 SWAP10 SWAP9 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xF88 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x173 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x17C PUSH2 0x376 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x131 SWAP2 SWAP1 PUSH2 0x126E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x195 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x17C PUSH2 0x37C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1AA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x17C PUSH2 0x3AA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1BF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x17C PUSH2 0x1CE CALLDATASIZE PUSH1 0x4 PUSH2 0xE07 JUMP JUMPDEST PUSH2 0x3B0 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1DF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1E8 PUSH2 0x3C2 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1E8 PUSH2 0x416 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1FE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x207 PUSH2 0x445 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x131 SWAP2 SWAP1 PUSH2 0xF74 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x220 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1E8 PUSH2 0x22F CALLDATASIZE PUSH1 0x4 PUSH2 0xE2A JUMP JUMPDEST PUSH2 0x454 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x240 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1E8 PUSH2 0x629 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x255 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x25E PUSH2 0x7D3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x131 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x12B1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x27C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x207 PUSH2 0x7E8 JUMP JUMPDEST PUSH2 0x1E8 PUSH2 0x293 CALLDATASIZE PUSH1 0x4 PUSH2 0xF0B JUMP JUMPDEST PUSH2 0x7F7 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2A4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2AD PUSH2 0xB38 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x131 SWAP2 SWAP1 PUSH2 0x102A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2C6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2DA PUSH2 0x2D5 CALLDATASIZE PUSH1 0x4 PUSH2 0xE07 JUMP JUMPDEST PUSH2 0xB52 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x131 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1285 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2F8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1E8 PUSH2 0x307 CALLDATASIZE PUSH1 0x4 PUSH2 0xE07 JUMP JUMPDEST PUSH2 0xB8D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x318 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x17C PUSH2 0x327 CALLDATASIZE PUSH1 0x4 PUSH2 0xE07 JUMP JUMPDEST PUSH2 0xBFB JUMP JUMPDEST PUSH1 0xB SLOAD PUSH1 0xC SLOAD DUP3 JUMP JUMPDEST PUSH1 0xD SLOAD PUSH1 0xE SLOAD PUSH1 0xF SLOAD PUSH1 0x10 SLOAD PUSH1 0x11 SLOAD PUSH1 0x12 SLOAD PUSH1 0x13 SLOAD PUSH1 0x14 SLOAD PUSH1 0x15 SLOAD PUSH1 0x16 SLOAD PUSH1 0x17 SLOAD PUSH1 0x18 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP12 DUP13 AND SWAP12 SWAP11 DUP12 AND SWAP11 SWAP1 SWAP10 AND SWAP9 PUSH1 0xFF SWAP1 SWAP2 AND SWAP1 DUP13 JUMP JUMPDEST PUSH1 0x1D SLOAD DUP2 JUMP JUMPDEST PUSH1 0x11 SLOAD PUSH1 0x0 SWAP1 TIMESTAMP LT ISZERO PUSH2 0x391 JUMPI POP PUSH1 0x0 PUSH2 0x3A7 JUMP JUMPDEST PUSH1 0x12 SLOAD TIMESTAMP GT ISZERO PUSH2 0x3A3 JUMPI POP PUSH1 0x2 PUSH2 0x3A7 JUMP JUMPDEST POP PUSH1 0x1 JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x1A SLOAD DUP2 JUMP JUMPDEST PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x3CA PUSH2 0xC26 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x3DB PUSH2 0x445 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x40A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x401 SWAP1 PUSH2 0x114E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x414 PUSH1 0x0 PUSH2 0xC2A JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x40 MLOAD CALLER SWAP1 SELFBALANCE DUP1 ISZERO PUSH2 0x8FC MUL SWAP2 PUSH1 0x0 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x442 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0xD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP8 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP3 DUP4 AND OR SWAP1 SWAP3 SSTORE PUSH1 0xE DUP1 SLOAD DUP7 DUP5 AND SWAP1 DUP4 AND OR SWAP1 DUP2 SWAP1 SSTORE PUSH1 0xF DUP1 SLOAD DUP7 DUP6 AND SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 SSTORE PUSH1 0x40 DUP1 MLOAD PUSH4 0x313CE567 PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP2 PUSH4 0x313CE567 SWAP2 PUSH1 0x4 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4CC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x4E0 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x504 SWAP2 SWAP1 PUSH2 0xF23 JUMP JUMPDEST PUSH2 0x50F SWAP1 PUSH1 0xA PUSH2 0x1357 JUMP JUMPDEST DUP2 MLOAD PUSH2 0x51B SWAP2 SWAP1 PUSH2 0x1425 JUMP JUMPDEST PUSH1 0x10 SSTORE PUSH1 0x20 DUP1 DUP3 ADD MLOAD PUSH1 0x11 SSTORE PUSH1 0x40 DUP1 DUP4 ADD MLOAD PUSH1 0x12 SSTORE PUSH1 0x60 DUP4 ADD MLOAD PUSH1 0x13 SSTORE PUSH1 0xF SLOAD DUP2 MLOAD PUSH4 0x313CE567 PUSH1 0xE0 SHL DUP2 MSTORE SWAP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP3 PUSH4 0x313CE567 SWAP3 PUSH1 0x4 DUP1 DUP3 ADD SWAP4 SWAP2 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x576 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x58A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x5AE SWAP2 SWAP1 PUSH2 0xF23 JUMP JUMPDEST PUSH2 0x5B9 SWAP1 PUSH1 0xA PUSH2 0x1357 JUMP JUMPDEST PUSH1 0x80 DUP3 ADD MLOAD PUSH2 0x5C8 SWAP2 SWAP1 PUSH2 0x1425 JUMP JUMPDEST PUSH1 0x14 SSTORE PUSH1 0xA0 DUP2 ADD MLOAD PUSH1 0x15 SSTORE PUSH1 0xC0 DUP2 ADD MLOAD PUSH1 0x16 SSTORE PUSH1 0xE0 DUP2 ADD MLOAD PUSH1 0xB DUP2 SWAP1 SSTORE PUSH2 0x100 DUP3 ADD MLOAD PUSH1 0xC SSTORE PUSH1 0xF SLOAD PUSH1 0x19 SLOAD PUSH1 0x17 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND SWAP4 SWAP1 SWAP3 AND SWAP3 SWAP1 SWAP3 EQ PUSH1 0xFF NOT SWAP1 SWAP2 AND OR SWAP1 SSTORE PUSH1 0x10 SLOAD PUSH2 0x620 SWAP2 PUSH2 0xC7C JUMP JUMPDEST PUSH1 0x18 SSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SLOAD EQ ISZERO PUSH2 0x64C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x401 SWAP1 PUSH2 0x120E JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SSTORE PUSH2 0x659 PUSH2 0x37C JUMP JUMPDEST PUSH1 0x1 EQ PUSH2 0x678 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x401 SWAP1 PUSH2 0x1128 JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH1 0x5 SLOAD PUSH1 0x0 SWAP2 PUSH2 0x68A SWAP2 PUSH2 0x1444 JUMP JUMPDEST GT PUSH2 0x6A7 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x401 SWAP1 PUSH2 0x1035 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 DUP2 ADD SLOAD PUSH2 0x6D7 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x401 SWAP1 PUSH2 0x1183 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x70D PUSH2 0x3E8 PUSH2 0x707 DUP5 PUSH1 0x1 ADD SLOAD PUSH2 0x701 PUSH1 0xD PUSH1 0x9 ADD SLOAD PUSH2 0x3E8 PUSH2 0xC88 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 PUSH2 0xC7C JUMP JUMPDEST SWAP1 PUSH2 0xC94 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x4 PUSH1 0x2 ADD PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x724 SWAP2 SWAP1 PUSH2 0x12D9 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x0 SWAP1 PUSH2 0x73C SWAP1 DUP4 SWAP1 PUSH2 0x1444 JUMP JUMPDEST PUSH1 0x1 DUP5 ADD DUP4 SWAP1 SSTORE PUSH1 0xE SLOAD PUSH1 0x40 MLOAD PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP2 MSTORE SWAP2 SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0xA9059CBB SWAP1 PUSH2 0x776 SWAP1 CALLER SWAP1 DUP7 SWAP1 PUSH1 0x4 ADD PUSH2 0x1011 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x790 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x7A4 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x7C8 SWAP2 SWAP1 PUSH2 0xEEB JUMP JUMPDEST POP POP PUSH1 0x1 PUSH1 0x0 SSTORE POP POP JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0x5 SLOAD PUSH1 0x6 SLOAD PUSH1 0x7 SLOAD PUSH1 0x8 SLOAD PUSH1 0x9 SLOAD DUP7 JUMP JUMPDEST PUSH1 0x19 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SLOAD EQ ISZERO PUSH2 0x81A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x401 SWAP1 PUSH2 0x120E JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SSTORE PUSH2 0x827 PUSH2 0x37C JUMP JUMPDEST PUSH1 0x1 EQ PUSH2 0x846 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x401 SWAP1 PUSH2 0x10DA JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x13 SLOAD SWAP1 SWAP2 DUP4 SWAP2 DUP3 SWAP2 SWAP1 PUSH2 0x3E8 SWAP1 DUP4 LT ISZERO PUSH2 0x882 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x401 SWAP1 PUSH2 0x10FE JUMP JUMPDEST PUSH1 0x14 SLOAD DUP4 GT ISZERO PUSH2 0x8A4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x401 SWAP1 PUSH2 0x10B2 JUMP JUMPDEST PUSH2 0x8AC PUSH2 0xB38 JUMP JUMPDEST PUSH2 0x8DC JUMPI PUSH2 0x8CD DUP2 PUSH2 0x707 DUP6 PUSH2 0x701 PUSH1 0x1A SLOAD DUP7 PUSH2 0xC88 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP3 POP PUSH2 0x8D9 DUP4 DUP6 PUSH2 0x1444 JUMP JUMPDEST SWAP2 POP JUMPDEST DUP5 SLOAD PUSH1 0x14 SLOAD PUSH1 0x0 SWAP2 PUSH2 0x8ED SWAP2 PUSH2 0x1444 JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0x18 SLOAD SWAP2 SWAP3 POP PUSH1 0x0 SWAP2 PUSH2 0x903 SWAP2 SWAP1 PUSH2 0x1444 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 DUP4 GT PUSH2 0x914 JUMPI DUP3 PUSH2 0x916 JUMP JUMPDEST DUP2 JUMPDEST SWAP1 POP DUP1 DUP7 LT PUSH2 0x937 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x401 SWAP1 PUSH2 0x1245 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x9DE PUSH1 0xD PUSH1 0x2 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x313CE567 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x98D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x9A1 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x9C5 SWAP2 SWAP1 PUSH2 0xF23 JUMP JUMPDEST PUSH2 0x9D0 SWAP1 PUSH1 0xA PUSH2 0x1357 JUMP JUMPDEST PUSH1 0x10 SLOAD PUSH2 0x707 SWAP1 DUP11 SWAP1 PUSH2 0xC7C JUMP JUMPDEST SWAP1 POP DUP8 DUP10 PUSH1 0x0 ADD PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x9F4 SWAP2 SWAP1 PUSH2 0x12D9 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP1 DUP10 PUSH1 0x1 ADD PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0xA0F SWAP2 SWAP1 PUSH2 0x12D9 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x4 DUP1 SLOAD DUP9 SWAP2 SWAP1 PUSH1 0x0 SWAP1 PUSH2 0xA29 SWAP1 DUP5 SWAP1 PUSH2 0x12D9 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x5 DUP1 SLOAD DUP3 SWAP2 SWAP1 PUSH1 0x0 SWAP1 PUSH2 0xA43 SWAP1 DUP5 SWAP1 PUSH2 0x12D9 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x8 DUP1 SLOAD SWAP1 PUSH1 0x0 PUSH2 0xA58 DUP4 PUSH2 0x145B JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD DUP9 SWAP3 SWAP1 PUSH2 0xA7C SWAP1 DUP5 SWAP1 PUSH2 0x12D9 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP6 PUSH1 0x1D PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0xA95 SWAP2 SWAP1 PUSH2 0x12D9 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x17 SLOAD PUSH1 0xFF AND DUP1 ISZERO PUSH2 0xAB4 JUMPI POP CALLVALUE PUSH2 0xAB2 DUP8 DUP10 PUSH2 0x12D9 JUMP JUMPDEST LT JUMPDEST ISZERO PUSH2 0xAFC JUMPI CALLER PUSH2 0x8FC DUP8 PUSH2 0xAC8 DUP11 CALLVALUE PUSH2 0x1444 JUMP JUMPDEST PUSH2 0xAD2 SWAP2 SWAP1 PUSH2 0x1444 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 ISZERO SWAP1 SWAP3 MUL SWAP2 PUSH1 0x0 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0xAFA JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP JUMPDEST PUSH1 0x17 SLOAD PUSH1 0xFF AND PUSH2 0xB27 JUMPI PUSH1 0xF SLOAD PUSH2 0xB27 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER ADDRESS PUSH2 0xB22 DUP11 DUP13 PUSH2 0x12D9 JUMP JUMPDEST PUSH2 0xCA0 JUMP JUMPDEST POP POP PUSH1 0x1 PUSH1 0x0 SSTORE POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB4D PUSH2 0xB45 PUSH2 0xC26 JUMP JUMPDEST PUSH1 0x1B SWAP1 PUSH2 0xD90 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD SWAP3 DUP3 ADD SLOAD PUSH1 0x3 DUP4 ADD SLOAD PUSH1 0x4 SWAP1 SWAP4 ADD SLOAD SWAP2 SWAP4 SWAP3 SWAP1 SWAP2 PUSH1 0xFF DUP1 DUP3 AND SWAP2 PUSH2 0x100 SWAP1 DIV AND DUP7 JUMP JUMPDEST PUSH2 0xB95 PUSH2 0xC26 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xBA6 PUSH2 0x445 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xBCC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x401 SWAP1 PUSH2 0x114E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0xBF2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x401 SWAP1 PUSH2 0x106C JUMP JUMPDEST PUSH2 0x442 DUP2 PUSH2 0xC2A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND BALANCE SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC1D DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0xDA5 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST CALLER SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC1D DUP3 DUP5 PUSH2 0x1425 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC1D DUP3 DUP5 PUSH2 0x1444 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC1D DUP3 DUP5 PUSH2 0x12F1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x23B872DD DUP7 DUP7 DUP7 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0xCC7 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xFED JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH1 0xE0 SHL PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP PUSH1 0x40 MLOAD PUSH2 0xD00 SWAP2 SWAP1 PUSH2 0xF3B JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0xD3D JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xD42 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0xD6C JUMPI POP DUP1 MLOAD ISZERO DUP1 PUSH2 0xD6C JUMPI POP DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0xD6C SWAP2 SWAP1 PUSH2 0xEEB JUMP JUMPDEST PUSH2 0xD88 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x401 SWAP1 PUSH2 0x11CA JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC1D DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0xDEF JUMP JUMPDEST PUSH1 0x0 PUSH2 0xDB1 DUP4 DUP4 PUSH2 0xDEF JUMP JUMPDEST PUSH2 0xDE7 JUMPI POP DUP2 SLOAD PUSH1 0x1 DUP2 DUP2 ADD DUP5 SSTORE PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 KECCAK256 SWAP1 SWAP4 ADD DUP5 SWAP1 SSTORE DUP5 SLOAD DUP5 DUP3 MSTORE DUP3 DUP7 ADD SWAP1 SWAP4 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP2 SWAP1 SWAP2 SSTORE PUSH2 0xC20 JUMP JUMPDEST POP PUSH1 0x0 PUSH2 0xC20 JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 SWAP2 SWAP1 SWAP2 ADD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD ISZERO ISZERO SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xE18 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0xE23 DUP2 PUSH2 0x14A2 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH2 0x180 DUP1 DUP7 DUP9 SUB SLT ISZERO PUSH2 0xE41 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH2 0xE4C DUP2 PUSH2 0x14A2 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 DUP2 ADD CALLDATALOAD PUSH2 0xE5D DUP2 PUSH2 0x14A2 JUMP JUMPDEST SWAP5 POP PUSH1 0x40 DUP8 ADD CALLDATALOAD PUSH2 0xE6D DUP2 PUSH2 0x14A2 JUMP JUMPDEST SWAP4 POP PUSH1 0x7F DUP8 ADD DUP9 SGT PUSH2 0xE7D JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x120 DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0xEA1 JUMPI PUSH2 0xEA1 PUSH2 0x148C JUMP JUMPDEST PUSH1 0x40 MSTORE DUP1 PUSH1 0x60 DUP10 ADD DUP5 DUP11 ADD DUP12 LT ISZERO PUSH2 0xEB7 JUMPI DUP6 DUP7 REVERT JUMPDEST DUP6 SWAP5 POP JUMPDEST PUSH1 0x9 DUP6 LT ISZERO PUSH2 0xEDA JUMPI DUP1 CALLDATALOAD DUP3 MSTORE PUSH1 0x1 SWAP5 SWAP1 SWAP5 ADD SWAP4 SWAP1 DUP4 ADD SWAP1 DUP4 ADD PUSH2 0xEBB JUMP JUMPDEST POP POP DUP1 SWAP4 POP POP POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xEFC JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0xE23 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xF1C JUMPI DUP1 DUP2 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xF34 JUMPI DUP1 DUP2 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD DUP2 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xF5B JUMPI PUSH1 0x20 DUP2 DUP7 ADD DUP2 ADD MLOAD DUP6 DUP4 ADD MSTORE ADD PUSH2 0xF41 JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0xF69 JUMPI DUP3 DUP3 DUP6 ADD MSTORE JUMPDEST POP SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP13 DUP14 AND DUP2 MSTORE SWAP11 DUP13 AND PUSH1 0x20 DUP13 ADD MSTORE SWAP9 SWAP1 SWAP11 AND PUSH1 0x40 DUP11 ADD MSTORE PUSH1 0x60 DUP10 ADD SWAP7 SWAP1 SWAP7 MSTORE PUSH1 0x80 DUP9 ADD SWAP5 SWAP1 SWAP5 MSTORE PUSH1 0xA0 DUP8 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0xC0 DUP7 ADD MSTORE PUSH1 0xE0 DUP6 ADD MSTORE PUSH2 0x100 DUP5 ADD MSTORE PUSH2 0x120 DUP4 ADD MSTORE SWAP2 ISZERO ISZERO PUSH2 0x140 DUP3 ADD MSTORE PUSH2 0x160 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH2 0x180 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND DUP2 MSTORE SWAP2 SWAP1 SWAP3 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1B SWAP1 DUP3 ADD MSTORE PUSH32 0x416C6C20746F6B656E20686173206265656E2077697468647261770000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x26 SWAP1 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x40 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xE SWAP1 DUP3 ADD MSTORE PUSH14 0x4F766572666C6F772076616C7565 PUSH1 0x90 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xA SWAP1 DUP3 ADD MSTORE PUSH10 0x4E6F7420616374697665 PUSH1 0xB0 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x10 SWAP1 DUP3 ADD MSTORE PUSH16 0x4E6F7420656E6F7567682076616C7565 PUSH1 0x80 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xC SWAP1 DUP3 ADD MSTORE PUSH12 0x53616C652073756365737373 PUSH1 0xA0 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 DUP2 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x27 SWAP1 DUP3 ADD MSTORE PUSH32 0x596F7520776974686472617720616C6C206F722068617665206E6F7420626F75 PUSH1 0x40 DUP3 ADD MSTORE PUSH7 0x19DA1D081E595D PUSH1 0xCA SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x24 SWAP1 DUP3 ADD MSTORE PUSH32 0x5472616E7366657248656C7065723A205452414E534645525F46524F4D5F4641 PUSH1 0x40 DUP3 ADD MSTORE PUSH4 0x12531151 PUSH1 0xE2 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1F SWAP1 DUP3 ADD MSTORE PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xF SWAP1 DUP3 ADD MSTORE PUSH15 0x53616C652069732073756363657373 PUSH1 0x88 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST SWAP6 DUP7 MSTORE PUSH1 0x20 DUP7 ADD SWAP5 SWAP1 SWAP5 MSTORE PUSH1 0x40 DUP6 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x60 DUP5 ADD MSTORE ISZERO ISZERO PUSH1 0x80 DUP4 ADD MSTORE ISZERO ISZERO PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 ADD SWAP1 JUMP JUMPDEST SWAP6 DUP7 MSTORE PUSH1 0x20 DUP7 ADD SWAP5 SWAP1 SWAP5 MSTORE PUSH1 0x40 DUP6 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x12EC JUMPI PUSH2 0x12EC PUSH2 0x1476 JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x130C JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 DUP2 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST DUP1 DUP3 JUMPDEST PUSH1 0x1 DUP1 DUP7 GT PUSH2 0x1323 JUMPI POP PUSH2 0x134E JUMP JUMPDEST DUP2 DUP8 DIV DUP3 GT ISZERO PUSH2 0x1335 JUMPI PUSH2 0x1335 PUSH2 0x1476 JUMP JUMPDEST DUP1 DUP7 AND ISZERO PUSH2 0x1342 JUMPI SWAP2 DUP2 MUL SWAP2 JUMPDEST SWAP5 SWAP1 SWAP5 SHR SWAP4 DUP1 MUL PUSH2 0x1314 JUMP JUMPDEST SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC1D PUSH1 0x0 NOT DUP5 DUP5 PUSH1 0x0 DUP3 PUSH2 0x1370 JUMPI POP PUSH1 0x1 PUSH2 0xE23 JUMP JUMPDEST DUP2 PUSH2 0x137D JUMPI POP PUSH1 0x0 PUSH2 0xE23 JUMP JUMPDEST DUP2 PUSH1 0x1 DUP2 EQ PUSH2 0x1393 JUMPI PUSH1 0x2 DUP2 EQ PUSH2 0x139D JUMPI PUSH2 0x13CA JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP PUSH2 0xE23 JUMP JUMPDEST PUSH1 0xFF DUP5 GT ISZERO PUSH2 0x13AE JUMPI PUSH2 0x13AE PUSH2 0x1476 JUMP JUMPDEST PUSH1 0x1 DUP5 SHL SWAP2 POP DUP5 DUP3 GT ISZERO PUSH2 0x13C4 JUMPI PUSH2 0x13C4 PUSH2 0x1476 JUMP JUMPDEST POP PUSH2 0xE23 JUMP JUMPDEST POP PUSH1 0x20 DUP4 LT PUSH2 0x133 DUP4 LT AND PUSH1 0x4E DUP5 LT PUSH1 0xB DUP5 LT AND OR ISZERO PUSH2 0x13FD JUMPI POP DUP2 DUP2 EXP DUP4 DUP2 GT ISZERO PUSH2 0x13F8 JUMPI PUSH2 0x13F8 PUSH2 0x1476 JUMP JUMPDEST PUSH2 0xE23 JUMP JUMPDEST PUSH2 0x140A DUP5 DUP5 DUP5 PUSH1 0x1 PUSH2 0x1311 JUMP JUMPDEST DUP1 DUP7 DIV DUP3 GT ISZERO PUSH2 0x141C JUMPI PUSH2 0x141C PUSH2 0x1476 JUMP JUMPDEST MUL SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x143F JUMPI PUSH2 0x143F PUSH2 0x1476 JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0x1456 JUMPI PUSH2 0x1456 PUSH2 0x1476 JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x0 NOT DUP3 EQ ISZERO PUSH2 0x146F JUMPI PUSH2 0x146F PUSH2 0x1476 JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x442 JUMPI PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x48 0xB7 RETURNDATACOPY SIGNEXTEND PUSH16 0x99A3F0907AB1389FFA3756223137B1D3 PUSH3 0xD1D012 0x4B 0xC8 0xA7 MOD 0x2A 0xE6 DUP4 PUSH5 0x736F6C6343 STOP ADDMOD STOP STOP CALLER ",
							"sourceMap": "370:6682:3:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1623:38;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;1668:26;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;1804:23::-;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;3330:337::-;;;;;;;;;;;;;:::i;1726:24::-;;;;;;;;;;;;;:::i;1533:42::-;;;;;;;;;;-1:-1:-1;1533:42:3;;;;;:::i;:::-;;:::i;1714:103:6:-;;;;;;;;;;;;;:::i;:::-;;6941:108:3;;;:::i;1063:87:6:-;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;2336:985:3:-;;;;;;;;;;-1:-1:-1;2336:985:3;;;;;:::i;:::-;;:::i;5927:884::-;;;;;;;;;;;;;:::i;1582:34::-;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;:::i;1701:18::-;;;;;;;;;;;;;:::i;3794:2125::-;;;;;;:::i;:::-;;:::i;3676:110::-;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;1480:46::-;;;;;;;;;;-1:-1:-1;1480:46:3;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;;;;:::i;1972:201:6:-;;;;;;;;;;-1:-1:-1;1972:201:6;;;;;:::i;:::-;;:::i;6819:111:3:-;;;;;;;;;;-1:-1:-1;6819:111:3;;;;;:::i;:::-;;:::i;1623:38::-;;;;;;:::o;1668:26::-;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1668:26:3;;;;;;;;;;;;;;;;;;:::o;1804:23::-;;;;:::o;3330:337::-;3409:19;;3368:7;;3391:15;:37;3388:272;;;-1:-1:-1;3452:1:3;3445:8;;3388:272;3519:17;;3501:15;:35;3498:151;;;-1:-1:-1;3564:1:3;3557:8;;3498:151;-1:-1:-1;3622:1:3;3498:151;3330:337;:::o;1726:24::-;;;;:::o;1533:42::-;;;;;;;;;;;;;:::o;1714:103:6:-;1294:12;:10;:12::i;:::-;-1:-1:-1;;;;;1283:23:6;:7;:5;:7::i;:::-;-1:-1:-1;;;;;1283:23:6;;1275:68;;;;-1:-1:-1;;;1275:68:6;;;;;;;:::i;:::-;;;;;;;;;1779:30:::1;1806:1;1779:18;:30::i;:::-;1714:103::o:0;6941:108:3:-;6990:51;;6998:10;;7019:21;6990:51;;;;;;;;;7019:21;6998:10;6990:51;;;;;;;;;;;;;;;;;;;;;6941:108::o;1063:87:6:-;1136:6;;-1:-1:-1;;;;;1136:6:6;1063:87;:::o;2336:985:3:-;2517:9;:38;;-1:-1:-1;;;;;2517:38:3;;;-1:-1:-1;;;;;;2517:38:3;;;;;;;2566:19;:32;;;;;;;;;;;;;2609:19;:32;;;;;;;;;;;;;;2699:37;;;-1:-1:-1;;;2699:37:3;;;;2705:19;;;;;2699:35;;:37;;;;;;;;;;;;;;2705:19;2699:37;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2686:51;;:2;:51;:::i;:::-;2675:8;;:62;;;;:::i;:::-;2652:20;:85;2770:8;;;;;2748:19;:30;2809:8;;;;;2789:17;:28;2857:8;;;;2828:26;:37;2935:19;;2929:37;;-1:-1:-1;;;2929:37:3;;;;-1:-1:-1;;;;;2935:19:3;;;;2929:35;;:37;;;;;;;;;;;2935:19;2929:37;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2916:51;;:2;:51;:::i;:::-;2905:8;;;;:62;;;;:::i;:::-;2876:26;:91;3000:8;;;;2978:19;:30;3040:8;;;;3019:18;:29;3085:8;;;;3059:15;:34;;;3130:8;;;;3104:23;:34;3202:19;;3185:4;;3149:25;:73;;-1:-1:-1;;;;;3202:19:3;;;3185:4;;;;3177:45;;;;-1:-1:-1;;3149:73:3;;;;;;3264:20;;:49;;:24;:49::i;:::-;3233:28;:80;-1:-1:-1;;;;2336:985:3:o;5927:884::-;1778:1:7;2376:7;;:19;;2368:63;;;;-1:-1:-1;;;2368:63:7;;;;;;;:::i;:::-;1778:1;2509:7;:18;5998:8:3::1;:6;:8::i;:::-;6010:1;5998:13;5990:38;;;;-1:-1:-1::0;;;5990:38:3::1;;;;;;;:::i;:::-;6079:32:::0;;6048:28;;6114:1:::1;::::0;6048:63:::1;::::0;::::1;:::i;:::-;:67;6040:134;;;;-1:-1:-1::0;;;6040:134:3::1;;;;;;;:::i;:::-;6221:10;6185:23;6211:21:::0;;;:9:::1;:21;::::0;;;;6251:16:::1;::::0;::::1;::::0;6243:72:::1;;;;-1:-1:-1::0;;;6243:72:3::1;;;;;;;:::i;:::-;6409:19;6431:136;6561:4;6432:88;6503:5;:16;;;6433:37;6451:9;:18;;;6441:4;6433:17;;:37;;;;:::i;:::-;6432:70:::0;::::1;:88::i;:::-;6431:121:::0;::::1;:136::i;:::-;6409:158;;6614:11;6578:13;:32;;;:47;;;;;;;:::i;:::-;::::0;;;-1:-1:-1;;6660:16:3::1;::::0;::::1;::::0;6636:21:::1;::::0;6660:30:::1;::::0;6679:11;;6660:30:::1;:::i;:::-;6701:16;::::0;::::1;:30:::0;;;6749:19;;6743:60:::1;::::0;-1:-1:-1;;;6743:60:3;;6636:54;;-1:-1:-1;;;;;;6749:19:3::1;::::0;6743:35:::1;::::0;:60:::1;::::0;6779:10:::1;::::0;6720:11;;6743:60:::1;;;:::i;:::-;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1::0;;1734:1:7;2688:7;:22;-1:-1:-1;;5927:884:3:o;1582:34::-;;;;;;;;;;;;;;:::o;1701:18::-;;;-1:-1:-1;;;;;1701:18:3;;:::o;3794:2125::-;1778:1:7;2376:7;;:19;;2368:63;;;;-1:-1:-1;;;2368:63:7;;;;;;;:::i;:::-;1778:1;2509:7;:18;3877:8:3::1;:6;:8::i;:::-;3889:1;3877:13;3869:36;;;;-1:-1:-1::0;;;3869:36:3::1;;;;;;;:::i;:::-;3962:10;3926:23;3952:21:::0;;;:9:::1;:21;::::0;;;;4158:26;;3952:21;;4004:7;;;;3926:23;4117:4:::1;::::0;4140:44;::::1;;4132:101;;;;-1:-1:-1::0;;;4132:101:3::1;;;;;;;:::i;:::-;4270:26:::0;;4252:44;::::1;;4244:99;;;;-1:-1:-1::0;;;4244:99:3::1;;;;;;;:::i;:::-;4358:19;:17;:19::i;:::-;4354:266;;4411:133;4530:13;4412:81;4478:14;4413:28;4431:9;;4413:13;:17;;:28;;;;:::i;4411:133::-;4394:150:::0;-1:-1:-1;4565:26:3::1;4394:150:::0;4565:9;:26:::1;:::i;:::-;4559:32;;4354:266;4685:17:::0;;4656:26;;4630:23:::1;::::0;4656:46:::1;::::0;::::1;:::i;:::-;4770:13;:32:::0;4739:28;;4630:72;;-1:-1:-1;4713:23:3::1;::::0;4739:63:::1;::::0;4770:32;4739:63:::1;:::i;:::-;4713:89;;4813:17;4851:15;4833;:33;:69;;4887:15;4833:69;;;4869:15;4833:69;4813:89;;4938:9;4921:14;:26;4913:54;;;;-1:-1:-1::0;;;4913:54:3::1;;;;;;;:::i;:::-;4978:17;4999:158;5124:9;:19;;;;;;;;;;-1:-1:-1::0;;;;;5124:19:3::1;-1:-1:-1::0;;;;;5118:35:3::1;;:37;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;5104:52;::::0;:2:::1;:52;:::i;:::-;5048:20:::0;;4999:70:::1;::::0;:14;;:48:::1;:70::i;:158::-;4978:180;;5207:9;5186:5;:17;;;:30;;;;;;;:::i;:::-;;;;;;;;5247:9;5227:5;:16;;;:29;;;;;;;:::i;:::-;::::0;;;-1:-1:-1;;5267:13:3::1;:50:::0;;5303:14;;5267:13;:32:::1;::::0;:50:::1;::::0;5303:14;;5267:50:::1;:::i;:::-;::::0;;;-1:-1:-1;;5328:28:3;:41;;5360:9;;5328:28;::::1;::::0;:41:::1;::::0;5360:9;;5328:41:::1;:::i;:::-;::::0;;;-1:-1:-1;;5380:25:3;:27;;;:25:::1;:27;::::0;::::1;:::i;:::-;::::0;;;-1:-1:-1;;5426:10:3::1;5418:19;::::0;;;:7:::1;:19;::::0;;;;:26;;5441:3;;5418:19;:26:::1;::::0;5441:3;;5418:26:::1;:::i;:::-;;;;;;;;5467:3;5455:8;;:15;;;;;;;:::i;:::-;::::0;;;-1:-1:-1;;5486:25:3;;::::1;;:61:::0;::::1;;;-1:-1:-1::0;5538:9:3::1;5515:20;5532:3:::0;5515:14;:20:::1;:::i;:::-;:32;5486:61;5483:155;;;5572:10;5564:62;5622:3:::0;5593:26:::1;5605:14:::0;5593:9:::1;:26;:::i;:::-;:32;;;;:::i;:::-;5564:62;::::0;;::::1;::::0;;::::1;::::0;::::1;::::0;;;;;;::::1;;;;;;;;;;;;;::::0;::::1;;;;;;5483:155;5653:25:::0;;::::1;;5649:251;;5753:19:::0;;5695:193:::1;::::0;-1:-1:-1;;;;;5753:19:3::1;5792:10;5829:4;5853:20;5870:3:::0;5853:14;:20:::1;:::i;:::-;5695:31;:193::i;:::-;-1:-1:-1::0;;1734:1:7;2688:7;:22;-1:-1:-1;;;;;;;;3794:2125:3:o;3676:110::-;3725:4;3749:29;3765:12;:10;:12::i;:::-;3749:6;;:15;:29::i;:::-;3742:36;;3676:110;:::o;1480:46::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;1972:201:6:-;1294:12;:10;:12::i;:::-;-1:-1:-1;;;;;1283:23:6;:7;:5;:7::i;:::-;-1:-1:-1;;;;;1283:23:6;;1275:68;;;;-1:-1:-1;;;1275:68:6;;;;;;;:::i;:::-;-1:-1:-1;;;;;2061:22:6;::::1;2053:73;;;;-1:-1:-1::0;;;2053:73:6::1;;;;;;;:::i;:::-;2137:28;2156:8;2137:18;:28::i;6819:111:3:-:0;-1:-1:-1;;;;;6906:16:3;;;6819:111::o;8259:152:5:-;8329:4;8353:50;8358:3;-1:-1:-1;;;;;8378:23:5;;8353:4;:50::i;:::-;8346:57;;8259:152;;;;;:::o;656:98:4:-;736:10;656:98;:::o;2333:191:6:-;2426:6;;;-1:-1:-1;;;;;2443:17:6;;;-1:-1:-1;;;;;;2443:17:6;;;;;;;2476:40;;2426:6;;;2443:17;2426:6;;2476:40;;2407:16;;2476:40;2333:191;;:::o;3585:98:8:-;3643:7;3670:5;3674:1;3670;:5;:::i;3228:98::-;3286:7;3313:5;3317:1;3313;:5;:::i;3984:98::-;4042:7;4069:5;4073:1;4069;:5;:::i;1073:430:9:-;1219:12;1233:17;1254:5;-1:-1:-1;;;;;1254:10:9;1302;1314:4;1320:2;1324:5;1279:51;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1279:51:9;;;;;;;;;;;1254:87;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1218:123;;;;1374:7;:57;;;;-1:-1:-1;1386:11:9;;:16;;:44;;;1417:4;1406:24;;;;;;;;;;;;:::i;:::-;1352:143;;;;-1:-1:-1;;;1352:143:9;;;;;;;:::i;:::-;1073:430;;;;;;:::o;8831:167:5:-;8911:4;8935:55;8945:3;-1:-1:-1;;;;;8965:23:5;;8935:9;:55::i;2174:414::-;2237:4;2259:21;2269:3;2274:5;2259:9;:21::i;:::-;2254:327;;-1:-1:-1;2297:23:5;;;;;;;;:11;:23;;;;;;;;;;;;;2480:18;;2458:19;;;:12;;;:19;;;;;;:40;;;;2513:11;;2254:327;-1:-1:-1;2564:5:5;2557:12;;4270:129;4343:4;4367:19;;;:12;;;;;:19;;;;;;:24;;;4270:129::o;14:259:10:-;;126:2;114:9;105:7;101:23;97:32;94:2;;;147:6;139;132:22;94:2;191:9;178:23;210:33;237:5;210:33;:::i;:::-;262:5;84:189;-1:-1:-1;;;84:189:10:o;278:1302::-;;;;;476:3;520:2;508:9;499:7;495:23;491:32;488:2;;;541:6;533;526:22;488:2;585:9;572:23;604:33;631:5;604:33;:::i;:::-;656:5;-1:-1:-1;680:2:10;719:18;;;706:32;747:35;706:32;747:35;:::i;:::-;801:7;-1:-1:-1;860:2:10;845:18;;832:32;873:35;832:32;873:35;:::i;:::-;927:7;-1:-1:-1;972:3:10;957:19;;953:33;-1:-1:-1;943:2:10;;1005:6;997;990:22;943:2;1043;1037:9;1085:3;1077:6;1073:16;1155:6;1143:10;1140:22;1119:18;1107:10;1104:34;1101:62;1098:2;;;1166:18;;:::i;:::-;1202:2;1195:22;1237:6;1278:2;1263:18;;1296;;;1293:31;-1:-1:-1;1290:2:10;;;1342:6;1334;1327:22;1290:2;1369:6;1360:15;;1384:165;1398:4;1395:1;1392:11;1384:165;;;1457:17;;1445:30;;1418:1;1411:9;;;;;1495:12;;;;1527;;1384:165;;;1388:3;;1568:6;1558:16;;;;;456:1124;;;;;;;:::o;1585:297::-;;1705:2;1693:9;1684:7;1680:23;1676:32;1673:2;;;1726:6;1718;1711:22;1673:2;1763:9;1757:16;1816:5;1809:13;1802:21;1795:5;1792:32;1782:2;;1843:6;1835;1828:22;1887:190;;1999:2;1987:9;1978:7;1974:23;1970:32;1967:2;;;2020:6;2012;2005:22;1967:2;-1:-1:-1;2048:23:10;;1957:120;-1:-1:-1;1957:120:10:o;2082:194::-;;2205:2;2193:9;2184:7;2180:23;2176:32;2173:2;;;2226:6;2218;2211:22;2173:2;-1:-1:-1;2254:16:10;;2163:113;-1:-1:-1;2163:113:10:o;2281:430::-;;2448:6;2442:13;2473:3;2485:129;2499:6;2496:1;2493:13;2485:129;;;2597:4;2581:14;;;2577:25;;2571:32;2558:11;;;2551:53;2514:12;2485:129;;;2632:6;2629:1;2626:13;2623:2;;;2667:3;2658:6;2653:3;2649:16;2642:29;2623:2;-1:-1:-1;2689:16:10;;;;;2418:293;-1:-1:-1;;2418:293:10:o;2716:203::-;-1:-1:-1;;;;;2880:32:10;;;;2862:51;;2850:2;2835:18;;2817:102::o;2924:1088::-;-1:-1:-1;;;;;3473:15:10;;;3455:34;;3525:15;;;3520:2;3505:18;;3498:43;3577:15;;;;3572:2;3557:18;;3550:43;3624:2;3609:18;;3602:34;;;;3667:3;3652:19;;3645:35;;;;3435:3;3696:19;;3689:35;;;;3755:3;3740:19;;3733:35;3799:3;3784:19;;3777:35;3843:3;3828:19;;3821:35;3887:3;3872:19;;3865:35;3944:15;;3937:23;3931:3;3916:19;;3909:52;3992:3;3977:19;;3970:36;;;;3404:3;3389:19;;3371:641::o;4017:375::-;-1:-1:-1;;;;;4275:15:10;;;4257:34;;4327:15;;;;4322:2;4307:18;;4300:43;4374:2;4359:18;;4352:34;;;;4207:2;4192:18;;4174:218::o;4397:274::-;-1:-1:-1;;;;;4589:32:10;;;;4571:51;;4653:2;4638:18;;4631:34;4559:2;4544:18;;4526:145::o;4676:187::-;4841:14;;4834:22;4816:41;;4804:2;4789:18;;4771:92::o;5090:351::-;5292:2;5274:21;;;5331:2;5311:18;;;5304:30;5370:29;5365:2;5350:18;;5343:57;5432:2;5417:18;;5264:177::o;5446:402::-;5648:2;5630:21;;;5687:2;5667:18;;;5660:30;5726:34;5721:2;5706:18;;5699:62;-1:-1:-1;;;5792:2:10;5777:18;;5770:36;5838:3;5823:19;;5620:228::o;5853:338::-;6055:2;6037:21;;;6094:2;6074:18;;;6067:30;-1:-1:-1;;;6128:2:10;6113:18;;6106:44;6182:2;6167:18;;6027:164::o;6196:334::-;6398:2;6380:21;;;6437:2;6417:18;;;6410:30;-1:-1:-1;;;6471:2:10;6456:18;;6449:40;6521:2;6506:18;;6370:160::o;6535:340::-;6737:2;6719:21;;;6776:2;6756:18;;;6749:30;-1:-1:-1;;;6810:2:10;6795:18;;6788:46;6866:2;6851:18;;6709:166::o;6880:336::-;7082:2;7064:21;;;7121:2;7101:18;;;7094:30;-1:-1:-1;;;7155:2:10;7140:18;;7133:42;7207:2;7192:18;;7054:162::o;7221:356::-;7423:2;7405:21;;;7442:18;;;7435:30;7501:34;7496:2;7481:18;;7474:62;7568:2;7553:18;;7395:182::o;7582:403::-;7784:2;7766:21;;;7823:2;7803:18;;;7796:30;7862:34;7857:2;7842:18;;7835:62;-1:-1:-1;;;7928:2:10;7913:18;;7906:37;7975:3;7960:19;;7756:229::o;7990:400::-;8192:2;8174:21;;;8231:2;8211:18;;;8204:30;8270:34;8265:2;8250:18;;8243:62;-1:-1:-1;;;8336:2:10;8321:18;;8314:34;8380:3;8365:19;;8164:226::o;8395:355::-;8597:2;8579:21;;;8636:2;8616:18;;;8609:30;8675:33;8670:2;8655:18;;8648:61;8741:2;8726:18;;8569:181::o;8755:339::-;8957:2;8939:21;;;8996:2;8976:18;;;8969:30;-1:-1:-1;;;9030:2:10;9015:18;;9008:45;9085:2;9070:18;;8929:165::o;9099:177::-;9245:25;;;9233:2;9218:18;;9200:76::o;9281:248::-;9455:25;;;9511:2;9496:18;;9489:34;9443:2;9428:18;;9410:119::o;9534:555::-;9809:25;;;9865:2;9850:18;;9843:34;;;;9908:2;9893:18;;9886:34;;;;9951:2;9936:18;;9929:34;10007:14;10000:22;9994:3;9979:19;;9972:51;10067:14;10060:22;10054:3;10039:19;;10032:51;9796:3;9781:19;;9763:326::o;10094:535::-;10381:25;;;10437:2;10422:18;;10415:34;;;;10480:2;10465:18;;10458:34;;;;10523:2;10508:18;;10501:34;10566:3;10551:19;;10544:35;10610:3;10595:19;;10588:35;10368:3;10353:19;;10335:294::o;10634:128::-;;10705:1;10701:6;10698:1;10695:13;10692:2;;;10711:18;;:::i;:::-;-1:-1:-1;10747:9:10;;10682:80::o;10767:217::-;;10833:1;10823:2;;-1:-1:-1;;;10858:31:10;;10912:4;10909:1;10902:15;10940:4;10865:1;10930:15;10823:2;-1:-1:-1;10969:9:10;;10813:171::o;10989:453::-;11085:6;11108:5;11122:314;11171:1;11208:2;11198:8;11195:16;11185:2;;11215:5;;;11185:2;11256:4;11251:3;11247:14;11241:4;11238:24;11235:2;;;11265:18;;:::i;:::-;11315:2;11305:8;11301:17;11298:2;;;11330:16;;;;11298:2;11409:17;;;;;11369:15;;11122:314;;;11066:376;;;;;;;:::o;11447:139::-;;11536:44;-1:-1:-1;;11563:8:10;11557:4;11591:922;11675:8;11665:2;;-1:-1:-1;11716:1:10;11730:5;;11665:2;11764:4;11754:2;;-1:-1:-1;11801:1:10;11815:5;;11754:2;11846:4;11864:1;11859:59;;;;11932:1;11927:183;;;;11839:271;;11859:59;11889:1;11880:10;;11903:5;;;11927:183;11964:3;11954:8;11951:17;11948:2;;;11971:18;;:::i;:::-;12027:1;12017:8;12013:16;12004:25;;12055:3;12048:5;12045:14;12042:2;;;12062:18;;:::i;:::-;12095:5;;;11839:271;;12194:2;12184:8;12181:16;12175:3;12169:4;12166:13;12162:36;12156:2;12146:8;12143:16;12138:2;12132:4;12129:12;12125:35;12122:77;12119:2;;;-1:-1:-1;12231:19:10;;;12266:14;;;12263:2;;;12283:18;;:::i;:::-;12316:5;;12119:2;12363:42;12401:3;12391:8;12385:4;12382:1;12363:42;:::i;:::-;12438:6;12433:3;12429:16;12420:7;12417:29;12414:2;;;12449:18;;:::i;:::-;12487:20;;11655:858;-1:-1:-1;;;;11655:858:10:o;12518:168::-;;12624:1;12620;12616:6;12612:14;12609:1;12606:21;12601:1;12594:9;12587:17;12583:45;12580:2;;;12631:18;;:::i;:::-;-1:-1:-1;12671:9:10;;12570:116::o;12691:125::-;;12759:1;12756;12753:8;12750:2;;;12764:18;;:::i;:::-;-1:-1:-1;12801:9:10;;12740:76::o;12821:135::-;;-1:-1:-1;;12881:17:10;;12878:2;;;12901:18;;:::i;:::-;-1:-1:-1;12948:1:10;12937:13;;12868:88::o;12961:127::-;13022:10;13017:3;13013:20;13010:1;13003:31;13053:4;13050:1;13043:15;13077:4;13074:1;13067:15;13093:127;13154:10;13149:3;13145:20;13142:1;13135:31;13185:4;13182:1;13175:15;13209:4;13206:1;13199:15;13225:133;-1:-1:-1;;;;;13302:31:10;;13292:42;;13282:2;;13348:1;13345;13338:12"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "1071400",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"external": {
								"WETH()": "1159",
								"backToken()": "infinite",
								"buyerInfo(address)": "4727",
								"checkAdminAddress()": "1299",
								"deposit(uint256)": "22904",
								"feeAnyone()": "1051",
								"getBalance(address)": "1205",
								"initialSaleInfor(address,address,address,uint256[9])": "infinite",
								"owner()": "1181",
								"presaleStatus()": "5218",
								"renounceOwnership()": "23574",
								"saleInfor()": "10258",
								"saleTotalSupply()": "1873",
								"status()": "1987",
								"totalFee()": "1096",
								"transferOwnership(address)": "infinite",
								"userClaimEmergency()": "22874",
								"userFee(address)": "1291"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 370,
									"end": 7052,
									"name": "PUSH",
									"source": 3,
									"value": "80"
								},
								{
									"begin": 370,
									"end": 7052,
									"name": "PUSH",
									"source": 3,
									"value": "40"
								},
								{
									"begin": 370,
									"end": 7052,
									"name": "MSTORE",
									"source": 3
								},
								{
									"begin": 1734,
									"end": 1735,
									"name": "PUSH",
									"source": 7,
									"value": "1"
								},
								{
									"begin": 1845,
									"end": 1852,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 1845,
									"end": 1867,
									"name": "SSTORE",
									"source": 7
								},
								{
									"begin": 942,
									"end": 974,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "6"
								},
								{
									"begin": 961,
									"end": 973,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "7"
								},
								{
									"begin": 961,
									"end": 971,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "8"
								},
								{
									"begin": 961,
									"end": 973,
									"name": "JUMP",
									"source": 6,
									"value": "[in]"
								},
								{
									"begin": 961,
									"end": 973,
									"name": "tag",
									"source": 6,
									"value": "7"
								},
								{
									"begin": 961,
									"end": 973,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 942,
									"end": 960,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "9"
								},
								{
									"begin": 942,
									"end": 974,
									"name": "JUMP",
									"source": 6,
									"value": "[in]"
								},
								{
									"begin": 942,
									"end": 974,
									"name": "tag",
									"source": 6,
									"value": "6"
								},
								{
									"begin": 942,
									"end": 974,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 2109,
									"end": 2113,
									"name": "PUSH",
									"source": 3,
									"value": "19"
								},
								{
									"begin": 2109,
									"end": 2165,
									"name": "DUP1",
									"source": 3
								},
								{
									"begin": 2109,
									"end": 2165,
									"name": "SLOAD",
									"source": 3
								},
								{
									"begin": 2122,
									"end": 2164,
									"name": "PUSH",
									"source": 3,
									"value": "C778417E063141139FCE010982780140AA0CD5AB"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 2109,
									"end": 2165,
									"name": "SWAP1",
									"source": 3
								},
								{
									"begin": 2109,
									"end": 2165,
									"name": "SWAP2",
									"source": 3
								},
								{
									"begin": 2109,
									"end": 2165,
									"name": "AND",
									"source": 3
								},
								{
									"begin": 2109,
									"end": 2165,
									"name": "OR",
									"source": 3
								},
								{
									"begin": 2109,
									"end": 2165,
									"name": "SWAP1",
									"source": 3
								},
								{
									"begin": 2109,
									"end": 2165,
									"name": "SSTORE",
									"source": 3
								},
								{
									"begin": 2176,
									"end": 2230,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "11"
								},
								{
									"begin": 2176,
									"end": 2182,
									"name": "PUSH",
									"source": 3,
									"value": "1B"
								},
								{
									"begin": 2187,
									"end": 2229,
									"name": "PUSH",
									"source": 3,
									"value": "6CCB41EEDA5A073076F3E7DC1614C185B5FA41ED"
								},
								{
									"begin": 2176,
									"end": 2186,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "12"
								},
								{
									"begin": 2176,
									"end": 2186,
									"name": "PUSH",
									"source": 3,
									"value": "20"
								},
								{
									"begin": 2176,
									"end": 2186,
									"name": "SWAP1",
									"source": 3
								},
								{
									"begin": 2176,
									"end": 2186,
									"name": "DUP2",
									"source": 3
								},
								{
									"begin": 2176,
									"end": 2186,
									"name": "SHL",
									"source": 3
								},
								{
									"begin": 2176,
									"end": 2186,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "18446744073709551720"
								},
								{
									"begin": 2176,
									"end": 2186,
									"name": "OR",
									"source": 3
								},
								{
									"begin": 2176,
									"end": 2230,
									"name": "SWAP1",
									"source": 3
								},
								{
									"begin": 2176,
									"end": 2230,
									"name": "SHR",
									"source": 3
								},
								{
									"begin": 2176,
									"end": 2230,
									"name": "JUMP",
									"source": 3,
									"value": "[in]"
								},
								{
									"begin": 2176,
									"end": 2230,
									"name": "tag",
									"source": 3,
									"value": "11"
								},
								{
									"begin": 2176,
									"end": 2230,
									"name": "JUMPDEST",
									"source": 3
								},
								{
									"begin": 2176,
									"end": 2230,
									"name": "POP",
									"source": 3
								},
								{
									"begin": 2241,
									"end": 2295,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "13"
								},
								{
									"begin": 2252,
									"end": 2294,
									"name": "PUSH",
									"source": 3,
									"value": "4F0B12BBF40FC182559822A5B1DB6D34DBC3E016"
								},
								{
									"begin": 2241,
									"end": 2247,
									"name": "PUSH",
									"source": 3,
									"value": "1B"
								},
								{
									"begin": 2241,
									"end": 2251,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "12"
								},
								{
									"begin": 2241,
									"end": 2251,
									"name": "PUSH",
									"source": 3,
									"value": "20"
								},
								{
									"begin": 2241,
									"end": 2251,
									"name": "SHL",
									"source": 3
								},
								{
									"begin": 2241,
									"end": 2251,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "18446744073709551720"
								},
								{
									"begin": 2241,
									"end": 2251,
									"name": "OR",
									"source": 3
								},
								{
									"begin": 2241,
									"end": 2251,
									"name": "SWAP1",
									"source": 3
								},
								{
									"begin": 2241,
									"end": 2295,
									"name": "SWAP2",
									"source": 3
								},
								{
									"begin": 2241,
									"end": 2295,
									"name": "SWAP1",
									"source": 3
								},
								{
									"begin": 2241,
									"end": 2295,
									"name": "PUSH",
									"source": 3,
									"value": "20"
								},
								{
									"begin": 2241,
									"end": 2295,
									"name": "SHR",
									"source": 3
								},
								{
									"begin": 2241,
									"end": 2295,
									"name": "JUMP",
									"source": 3,
									"value": "[in]"
								},
								{
									"begin": 2241,
									"end": 2295,
									"name": "tag",
									"source": 3,
									"value": "13"
								},
								{
									"begin": 2241,
									"end": 2295,
									"name": "JUMPDEST",
									"source": 3
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 2318,
									"end": 2320,
									"name": "PUSH",
									"source": 3,
									"value": "14"
								},
								{
									"begin": 2306,
									"end": 2315,
									"name": "PUSH",
									"source": 3,
									"value": "1A"
								},
								{
									"begin": 2306,
									"end": 2320,
									"name": "SSTORE",
									"source": 3
								},
								{
									"begin": 370,
									"end": 7052,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "14"
								},
								{
									"begin": 370,
									"end": 7052,
									"name": "JUMP",
									"source": 3
								},
								{
									"begin": 656,
									"end": 754,
									"name": "tag",
									"source": 4,
									"value": "8"
								},
								{
									"begin": 656,
									"end": 754,
									"name": "JUMPDEST",
									"source": 4
								},
								{
									"begin": 736,
									"end": 746,
									"name": "CALLER",
									"source": 4
								},
								{
									"begin": 656,
									"end": 754,
									"name": "SWAP1",
									"source": 4
								},
								{
									"begin": 656,
									"end": 754,
									"name": "JUMP",
									"source": 4,
									"value": "[out]"
								},
								{
									"begin": 2333,
									"end": 2524,
									"name": "tag",
									"source": 6,
									"value": "9"
								},
								{
									"begin": 2333,
									"end": 2524,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 2426,
									"end": 2432,
									"name": "PUSH",
									"source": 6,
									"value": "1"
								},
								{
									"begin": 2426,
									"end": 2432,
									"name": "DUP1",
									"source": 6
								},
								{
									"begin": 2426,
									"end": 2432,
									"name": "SLOAD",
									"source": 6
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 2443,
									"end": 2460,
									"name": "DUP4",
									"source": 6
								},
								{
									"begin": 2443,
									"end": 2460,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 2443,
									"end": 2460,
									"name": "AND",
									"source": 6
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 2443,
									"end": 2460,
									"name": "DUP4",
									"source": 6
								},
								{
									"begin": 2443,
									"end": 2460,
									"name": "AND",
									"source": 6
								},
								{
									"begin": 2443,
									"end": 2460,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 2443,
									"end": 2460,
									"name": "OR",
									"source": 6
								},
								{
									"begin": 2443,
									"end": 2460,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 2443,
									"end": 2460,
									"name": "SWAP4",
									"source": 6
								},
								{
									"begin": 2443,
									"end": 2460,
									"name": "SSTORE",
									"source": 6
								},
								{
									"begin": 2476,
									"end": 2516,
									"name": "PUSH",
									"source": 6,
									"value": "40"
								},
								{
									"begin": 2476,
									"end": 2516,
									"name": "MLOAD",
									"source": 6
								},
								{
									"begin": 2426,
									"end": 2432,
									"name": "SWAP2",
									"source": 6
								},
								{
									"begin": 2426,
									"end": 2432,
									"name": "AND",
									"source": 6
								},
								{
									"begin": 2426,
									"end": 2432,
									"name": "SWAP2",
									"source": 6
								},
								{
									"begin": 2443,
									"end": 2460,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 2426,
									"end": 2432,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 2426,
									"end": 2432,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 2476,
									"end": 2516,
									"name": "PUSH",
									"source": 6,
									"value": "8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
								},
								{
									"begin": 2476,
									"end": 2516,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 2407,
									"end": 2423,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 2407,
									"end": 2423,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 2476,
									"end": 2516,
									"name": "LOG3",
									"source": 6
								},
								{
									"begin": 2333,
									"end": 2524,
									"name": "POP",
									"source": 6
								},
								{
									"begin": 2333,
									"end": 2524,
									"name": "POP",
									"source": 6
								},
								{
									"begin": 2333,
									"end": 2524,
									"name": "JUMP",
									"source": 6,
									"value": "[out]"
								},
								{
									"begin": 8259,
									"end": 8411,
									"name": "tag",
									"source": 5,
									"value": "12"
								},
								{
									"begin": 8259,
									"end": 8411,
									"name": "JUMPDEST",
									"source": 5
								},
								{
									"begin": 8329,
									"end": 8333,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 8353,
									"end": 8403,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "18"
								},
								{
									"begin": 8358,
									"end": 8361,
									"name": "DUP4",
									"source": 5
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 8378,
									"end": 8401,
									"name": "DUP5",
									"source": 5
								},
								{
									"begin": 8378,
									"end": 8401,
									"name": "AND",
									"source": 5
								},
								{
									"begin": 8353,
									"end": 8357,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "19"
								},
								{
									"begin": 8353,
									"end": 8403,
									"name": "JUMP",
									"source": 5,
									"value": "[in]"
								},
								{
									"begin": 8353,
									"end": 8403,
									"name": "tag",
									"source": 5,
									"value": "18"
								},
								{
									"begin": 8353,
									"end": 8403,
									"name": "JUMPDEST",
									"source": 5
								},
								{
									"begin": 8346,
									"end": 8403,
									"name": "SWAP1",
									"source": 5
								},
								{
									"begin": 8346,
									"end": 8403,
									"name": "POP",
									"source": 5
								},
								{
									"begin": 8259,
									"end": 8411,
									"name": "tag",
									"source": 5,
									"value": "17"
								},
								{
									"begin": 8259,
									"end": 8411,
									"name": "JUMPDEST",
									"source": 5
								},
								{
									"begin": 8259,
									"end": 8411,
									"name": "SWAP3",
									"source": 5
								},
								{
									"begin": 8259,
									"end": 8411,
									"name": "SWAP2",
									"source": 5
								},
								{
									"begin": 8259,
									"end": 8411,
									"name": "POP",
									"source": 5
								},
								{
									"begin": 8259,
									"end": 8411,
									"name": "POP",
									"source": 5
								},
								{
									"begin": 8259,
									"end": 8411,
									"name": "JUMP",
									"source": 5,
									"value": "[out]"
								},
								{
									"begin": 2174,
									"end": 2588,
									"name": "tag",
									"source": 5,
									"value": "19"
								},
								{
									"begin": 2174,
									"end": 2588,
									"name": "JUMPDEST",
									"source": 5
								},
								{
									"begin": 2237,
									"end": 2241,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 2259,
									"end": 2280,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "21"
								},
								{
									"begin": 2269,
									"end": 2272,
									"name": "DUP4",
									"source": 5
								},
								{
									"begin": 2274,
									"end": 2279,
									"name": "DUP4",
									"source": 5
								},
								{
									"begin": 2259,
									"end": 2268,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "22"
								},
								{
									"begin": 2259,
									"end": 2280,
									"name": "JUMP",
									"source": 5,
									"value": "[in]"
								},
								{
									"begin": 2259,
									"end": 2280,
									"name": "tag",
									"source": 5,
									"value": "21"
								},
								{
									"begin": 2259,
									"end": 2280,
									"name": "JUMPDEST",
									"source": 5
								},
								{
									"begin": 2254,
									"end": 2581,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "23"
								},
								{
									"begin": 2254,
									"end": 2581,
									"name": "JUMPI",
									"source": 5
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 2297,
									"end": 2320,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 2297,
									"end": 2320,
									"name": "SLOAD",
									"source": 5
								},
								{
									"begin": 2297,
									"end": 2320,
									"name": "PUSH",
									"source": 5,
									"value": "1"
								},
								{
									"begin": 2297,
									"end": 2320,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 2297,
									"end": 2320,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 2297,
									"end": 2320,
									"name": "ADD",
									"source": 5
								},
								{
									"begin": 2297,
									"end": 2320,
									"name": "DUP5",
									"source": 5
								},
								{
									"begin": 2297,
									"end": 2320,
									"name": "SSTORE",
									"source": 5
								},
								{
									"begin": 2297,
									"end": 2308,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 2297,
									"end": 2320,
									"name": "DUP5",
									"source": 5
								},
								{
									"begin": 2297,
									"end": 2320,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 2297,
									"end": 2320,
									"name": "MSTORE",
									"source": 5
								},
								{
									"begin": 2297,
									"end": 2320,
									"name": "PUSH",
									"source": 5,
									"value": "20"
								},
								{
									"begin": 2297,
									"end": 2320,
									"name": "DUP1",
									"source": 5
								},
								{
									"begin": 2297,
									"end": 2320,
									"name": "DUP3",
									"source": 5
								},
								{
									"begin": 2297,
									"end": 2320,
									"name": "KECCAK256",
									"source": 5
								},
								{
									"begin": 2297,
									"end": 2320,
									"name": "SWAP1",
									"source": 5
								},
								{
									"begin": 2297,
									"end": 2320,
									"name": "SWAP4",
									"source": 5
								},
								{
									"begin": 2297,
									"end": 2320,
									"name": "ADD",
									"source": 5
								},
								{
									"begin": 2297,
									"end": 2320,
									"name": "DUP5",
									"source": 5
								},
								{
									"begin": 2297,
									"end": 2320,
									"name": "SWAP1",
									"source": 5
								},
								{
									"begin": 2297,
									"end": 2320,
									"name": "SSTORE",
									"source": 5
								},
								{
									"begin": 2480,
									"end": 2498,
									"name": "DUP5",
									"source": 5
								},
								{
									"begin": 2480,
									"end": 2498,
									"name": "SLOAD",
									"source": 5
								},
								{
									"begin": 2458,
									"end": 2477,
									"name": "DUP5",
									"source": 5
								},
								{
									"begin": 2458,
									"end": 2477,
									"name": "DUP3",
									"source": 5
								},
								{
									"begin": 2458,
									"end": 2477,
									"name": "MSTORE",
									"source": 5
								},
								{
									"begin": 2458,
									"end": 2470,
									"name": "DUP3",
									"source": 5
								},
								{
									"begin": 2458,
									"end": 2470,
									"name": "DUP7",
									"source": 5
								},
								{
									"begin": 2458,
									"end": 2470,
									"name": "ADD",
									"source": 5
								},
								{
									"begin": 2458,
									"end": 2477,
									"name": "SWAP1",
									"source": 5
								},
								{
									"begin": 2458,
									"end": 2477,
									"name": "SWAP4",
									"source": 5
								},
								{
									"begin": 2458,
									"end": 2477,
									"name": "MSTORE",
									"source": 5
								},
								{
									"begin": 2458,
									"end": 2477,
									"name": "PUSH",
									"source": 5,
									"value": "40"
								},
								{
									"begin": 2458,
									"end": 2477,
									"name": "SWAP1",
									"source": 5
								},
								{
									"begin": 2458,
									"end": 2477,
									"name": "KECCAK256",
									"source": 5
								},
								{
									"begin": 2458,
									"end": 2498,
									"name": "SWAP2",
									"source": 5
								},
								{
									"begin": 2458,
									"end": 2498,
									"name": "SWAP1",
									"source": 5
								},
								{
									"begin": 2458,
									"end": 2498,
									"name": "SWAP2",
									"source": 5
								},
								{
									"begin": 2458,
									"end": 2498,
									"name": "SSTORE",
									"source": 5
								},
								{
									"begin": 2513,
									"end": 2524,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "17"
								},
								{
									"begin": 2513,
									"end": 2524,
									"name": "JUMP",
									"source": 5
								},
								{
									"begin": 2254,
									"end": 2581,
									"name": "tag",
									"source": 5,
									"value": "23"
								},
								{
									"begin": 2254,
									"end": 2581,
									"name": "JUMPDEST",
									"source": 5
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 2564,
									"end": 2569,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 2557,
									"end": 2569,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "17"
								},
								{
									"begin": 2557,
									"end": 2569,
									"name": "JUMP",
									"source": 5
								},
								{
									"begin": 4270,
									"end": 4399,
									"name": "tag",
									"source": 5,
									"value": "22"
								},
								{
									"begin": 4270,
									"end": 4399,
									"name": "JUMPDEST",
									"source": 5
								},
								{
									"begin": 4343,
									"end": 4347,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 4367,
									"end": 4386,
									"name": "SWAP1",
									"source": 5
								},
								{
									"begin": 4367,
									"end": 4386,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 4367,
									"end": 4386,
									"name": "MSTORE",
									"source": 5
								},
								{
									"begin": 4367,
									"end": 4379,
									"name": "PUSH",
									"source": 5,
									"value": "1"
								},
								{
									"begin": 4367,
									"end": 4379,
									"name": "SWAP2",
									"source": 5
								},
								{
									"begin": 4367,
									"end": 4379,
									"name": "SWAP1",
									"source": 5
								},
								{
									"begin": 4367,
									"end": 4379,
									"name": "SWAP2",
									"source": 5
								},
								{
									"begin": 4367,
									"end": 4379,
									"name": "ADD",
									"source": 5
								},
								{
									"begin": 4367,
									"end": 4386,
									"name": "PUSH",
									"source": 5,
									"value": "20"
								},
								{
									"begin": 4367,
									"end": 4386,
									"name": "MSTORE",
									"source": 5
								},
								{
									"begin": 4367,
									"end": 4386,
									"name": "PUSH",
									"source": 5,
									"value": "40"
								},
								{
									"begin": 4367,
									"end": 4386,
									"name": "SWAP1",
									"source": 5
								},
								{
									"begin": 4367,
									"end": 4386,
									"name": "KECCAK256",
									"source": 5
								},
								{
									"begin": 4367,
									"end": 4386,
									"name": "SLOAD",
									"source": 5
								},
								{
									"begin": 4367,
									"end": 4391,
									"name": "ISZERO",
									"source": 5
								},
								{
									"begin": 4367,
									"end": 4391,
									"name": "ISZERO",
									"source": 5
								},
								{
									"begin": 4367,
									"end": 4391,
									"name": "SWAP1",
									"source": 5
								},
								{
									"begin": 4270,
									"end": 4399,
									"name": "JUMP",
									"source": 5,
									"value": "[out]"
								},
								{
									"begin": 370,
									"end": 7052,
									"name": "tag",
									"source": 3,
									"value": "14"
								},
								{
									"begin": 370,
									"end": 7052,
									"name": "JUMPDEST",
									"source": 3
								},
								{
									"begin": 370,
									"end": 7052,
									"name": "PUSH #[$]",
									"source": 3,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 370,
									"end": 7052,
									"name": "DUP1",
									"source": 3
								},
								{
									"begin": 370,
									"end": 7052,
									"name": "PUSH [$]",
									"source": 3,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 370,
									"end": 7052,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 370,
									"end": 7052,
									"name": "CODECOPY",
									"source": 3
								},
								{
									"begin": 370,
									"end": 7052,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 370,
									"end": 7052,
									"name": "RETURN",
									"source": 3
								}
							],
							".data": {
								"0": {
									".auxdata": "a264697066735822122048b73e0b6f99a3f0907ab1389ffa3756223137b1d362d1d0124bc8a7062ae68364736f6c63430008000033",
									".code": [
										{
											"begin": 370,
											"end": 7052,
											"name": "PUSH",
											"source": 3,
											"value": "80"
										},
										{
											"begin": 370,
											"end": 7052,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 370,
											"end": 7052,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 370,
											"end": 7052,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 370,
											"end": 7052,
											"name": "CALLDATASIZE",
											"source": 3
										},
										{
											"begin": 370,
											"end": 7052,
											"name": "LT",
											"source": 3
										},
										{
											"begin": 370,
											"end": 7052,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "1"
										},
										{
											"begin": 370,
											"end": 7052,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 370,
											"end": 7052,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 370,
											"end": 7052,
											"name": "CALLDATALOAD",
											"source": 3
										},
										{
											"begin": 370,
											"end": 7052,
											"name": "PUSH",
											"source": 3,
											"value": "E0"
										},
										{
											"begin": 370,
											"end": 7052,
											"name": "SHR",
											"source": 3
										},
										{
											"begin": 370,
											"end": 7052,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 370,
											"end": 7052,
											"name": "PUSH",
											"source": 3,
											"value": "8F1EAE4C"
										},
										{
											"begin": 370,
											"end": 7052,
											"name": "GT",
											"source": 3
										},
										{
											"begin": 370,
											"end": 7052,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 370,
											"end": 7052,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 370,
											"end": 7052,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 370,
											"end": 7052,
											"name": "PUSH",
											"source": 3,
											"value": "B6B55F25"
										},
										{
											"begin": 370,
											"end": 7052,
											"name": "GT",
											"source": 3
										},
										{
											"begin": 370,
											"end": 7052,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "21"
										},
										{
											"begin": 370,
											"end": 7052,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 370,
											"end": 7052,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 370,
											"end": 7052,
											"name": "PUSH",
											"source": 3,
											"value": "B6B55F25"
										},
										{
											"begin": 370,
											"end": 7052,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 370,
											"end": 7052,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "15"
										},
										{
											"begin": 370,
											"end": 7052,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 370,
											"end": 7052,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 370,
											"end": 7052,
											"name": "PUSH",
											"source": 3,
											"value": "CAD5B0F7"
										},
										{
											"begin": 370,
											"end": 7052,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 370,
											"end": 7052,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "16"
										},
										{
											"begin": 370,
											"end": 7052,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 370,
											"end": 7052,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 370,
											"end": 7052,
											"name": "PUSH",
											"source": 3,
											"value": "E2D3F423"
										},
										{
											"begin": 370,
											"end": 7052,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 370,
											"end": 7052,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "17"
										},
										{
											"begin": 370,
											"end": 7052,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 370,
											"end": 7052,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 370,
											"end": 7052,
											"name": "PUSH",
											"source": 3,
											"value": "F2FDE38B"
										},
										{
											"begin": 370,
											"end": 7052,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 370,
											"end": 7052,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "18"
										},
										{
											"begin": 370,
											"end": 7052,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 370,
											"end": 7052,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 370,
											"end": 7052,
											"name": "PUSH",
											"source": 3,
											"value": "F8B2CB4F"
										},
										{
											"begin": 370,
											"end": 7052,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 370,
											"end": 7052,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "19"
										},
										{
											"begin": 370,
											"end": 7052,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 370,
											"end": 7052,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "1"
										},
										{
											"begin": 370,
											"end": 7052,
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 370,
											"end": 7052,
											"name": "tag",
											"source": 3,
											"value": "21"
										},
										{
											"begin": 370,
											"end": 7052,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 370,
											"end": 7052,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 370,
											"end": 7052,
											"name": "PUSH",
											"source": 3,
											"value": "8F1EAE4C"
										},
										{
											"begin": 370,
											"end": 7052,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 370,
											"end": 7052,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "11"
										},
										{
											"begin": 370,
											"end": 7052,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 370,
											"end": 7052,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 370,
											"end": 7052,
											"name": "PUSH",
											"source": 3,
											"value": "AB33985A"
										},
										{
											"begin": 370,
											"end": 7052,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 370,
											"end": 7052,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "12"
										},
										{
											"begin": 370,
											"end": 7052,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 370,
											"end": 7052,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 370,
											"end": 7052,
											"name": "PUSH",
											"source": 3,
											"value": "ACFB2355"
										},
										{
											"begin": 370,
											"end": 7052,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 370,
											"end": 7052,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "13"
										},
										{
											"begin": 370,
											"end": 7052,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 370,
											"end": 7052,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 370,
											"end": 7052,
											"name": "PUSH",
											"source": 3,
											"value": "AD5C4648"
										},
										{
											"begin": 370,
											"end": 7052,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 370,
											"end": 7052,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "14"
										},
										{
											"begin": 370,
											"end": 7052,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 370,
											"end": 7052,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "1"
										},
										{
											"begin": 370,
											"end": 7052,
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 370,
											"end": 7052,
											"name": "tag",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 370,
											"end": 7052,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 370,
											"end": 7052,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 370,
											"end": 7052,
											"name": "PUSH",
											"source": 3,
											"value": "3B5EF2AD"
										},
										{
											"begin": 370,
											"end": 7052,
											"name": "GT",
											"source": 3
										},
										{
											"begin": 370,
											"end": 7052,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "22"
										},
										{
											"begin": 370,
											"end": 7052,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 370,
											"end": 7052,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 370,
											"end": 7052,
											"name": "PUSH",
											"source": 3,
											"value": "3B5EF2AD"
										},
										{
											"begin": 370,
											"end": 7052,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 370,
											"end": 7052,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "6"
										},
										{
											"begin": 370,
											"end": 7052,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 370,
											"end": 7052,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 370,
											"end": 7052,
											"name": "PUSH",
											"source": 3,
											"value": "56C5F349"
										},
										{
											"begin": 370,
											"end": 7052,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 370,
											"end": 7052,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "7"
										},
										{
											"begin": 370,
											"end": 7052,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 370,
											"end": 7052,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 370,
											"end": 7052,
											"name": "PUSH",
											"source": 3,
											"value": "715018A6"
										},
										{
											"begin": 370,
											"end": 7052,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 370,
											"end": 7052,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "8"
										},
										{
											"begin": 370,
											"end": 7052,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 370,
											"end": 7052,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 370,
											"end": 7052,
											"name": "PUSH",
											"source": 3,
											"value": "861FAF5F"
										},
										{
											"begin": 370,
											"end": 7052,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 370,
											"end": 7052,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "9"
										},
										{
											"begin": 370,
											"end": 7052,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 370,
											"end": 7052,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 370,
											"end": 7052,
											"name": "PUSH",
											"source": 3,
											"value": "8DA5CB5B"
										},
										{
											"begin": 370,
											"end": 7052,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 370,
											"end": 7052,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "10"
										},
										{
											"begin": 370,
											"end": 7052,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 370,
											"end": 7052,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "1"
										},
										{
											"begin": 370,
											"end": 7052,
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 370,
											"end": 7052,
											"name": "tag",
											"source": 3,
											"value": "22"
										},
										{
											"begin": 370,
											"end": 7052,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 370,
											"end": 7052,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 370,
											"end": 7052,
											"name": "PUSH",
											"source": 3,
											"value": "12E5D0B9"
										},
										{
											"begin": 370,
											"end": 7052,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 370,
											"end": 7052,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "2"
										},
										{
											"begin": 370,
											"end": 7052,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 370,
											"end": 7052,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 370,
											"end": 7052,
											"name": "PUSH",
											"source": 3,
											"value": "18856A2F"
										},
										{
											"begin": 370,
											"end": 7052,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 370,
											"end": 7052,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "3"
										},
										{
											"begin": 370,
											"end": 7052,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 370,
											"end": 7052,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 370,
											"end": 7052,
											"name": "PUSH",
											"source": 3,
											"value": "1DF4CCFC"
										},
										{
											"begin": 370,
											"end": 7052,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 370,
											"end": 7052,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 370,
											"end": 7052,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 370,
											"end": 7052,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 370,
											"end": 7052,
											"name": "PUSH",
											"source": 3,
											"value": "200D2ED2"
										},
										{
											"begin": 370,
											"end": 7052,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 370,
											"end": 7052,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "5"
										},
										{
											"begin": 370,
											"end": 7052,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 370,
											"end": 7052,
											"name": "tag",
											"source": 3,
											"value": "1"
										},
										{
											"begin": 370,
											"end": 7052,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 370,
											"end": 7052,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 370,
											"end": 7052,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 370,
											"end": 7052,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 1623,
											"end": 1661,
											"name": "tag",
											"source": 3,
											"value": "2"
										},
										{
											"begin": 1623,
											"end": 1661,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1623,
											"end": 1661,
											"name": "CALLVALUE",
											"source": 3
										},
										{
											"begin": 1623,
											"end": 1661,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1623,
											"end": 1661,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 1623,
											"end": 1661,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "23"
										},
										{
											"begin": 1623,
											"end": 1661,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 1623,
											"end": 1661,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 1623,
											"end": 1661,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1623,
											"end": 1661,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 1623,
											"end": 1661,
											"name": "tag",
											"source": 3,
											"value": "23"
										},
										{
											"begin": 1623,
											"end": 1661,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1623,
											"end": 1661,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 1623,
											"end": 1661,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "24"
										},
										{
											"begin": 1623,
											"end": 1661,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "25"
										},
										{
											"begin": 1623,
											"end": 1661,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 1623,
											"end": 1661,
											"name": "tag",
											"source": 3,
											"value": "24"
										},
										{
											"begin": 1623,
											"end": 1661,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1623,
											"end": 1661,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 1623,
											"end": 1661,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 1623,
											"end": 1661,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "26"
										},
										{
											"begin": 1623,
											"end": 1661,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 1623,
											"end": 1661,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 1623,
											"end": 1661,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1623,
											"end": 1661,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "27"
										},
										{
											"begin": 1623,
											"end": 1661,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 1623,
											"end": 1661,
											"name": "tag",
											"source": 3,
											"value": "26"
										},
										{
											"begin": 1623,
											"end": 1661,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1623,
											"end": 1661,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 1623,
											"end": 1661,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 1623,
											"end": 1661,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1623,
											"end": 1661,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 1623,
											"end": 1661,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 1623,
											"end": 1661,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1623,
											"end": 1661,
											"name": "RETURN",
											"source": 3
										},
										{
											"begin": 1668,
											"end": 1694,
											"name": "tag",
											"source": 3,
											"value": "3"
										},
										{
											"begin": 1668,
											"end": 1694,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1668,
											"end": 1694,
											"name": "CALLVALUE",
											"source": 3
										},
										{
											"begin": 1668,
											"end": 1694,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1668,
											"end": 1694,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 1668,
											"end": 1694,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "28"
										},
										{
											"begin": 1668,
											"end": 1694,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 1668,
											"end": 1694,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 1668,
											"end": 1694,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1668,
											"end": 1694,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 1668,
											"end": 1694,
											"name": "tag",
											"source": 3,
											"value": "28"
										},
										{
											"begin": 1668,
											"end": 1694,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1668,
											"end": 1694,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 1668,
											"end": 1694,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "29"
										},
										{
											"begin": 1668,
											"end": 1694,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "30"
										},
										{
											"begin": 1668,
											"end": 1694,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 1668,
											"end": 1694,
											"name": "tag",
											"source": 3,
											"value": "29"
										},
										{
											"begin": 1668,
											"end": 1694,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1668,
											"end": 1694,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 1668,
											"end": 1694,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 1668,
											"end": 1694,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "26"
										},
										{
											"begin": 1668,
											"end": 1694,
											"name": "SWAP13",
											"source": 3
										},
										{
											"begin": 1668,
											"end": 1694,
											"name": "SWAP12",
											"source": 3
										},
										{
											"begin": 1668,
											"end": 1694,
											"name": "SWAP11",
											"source": 3
										},
										{
											"begin": 1668,
											"end": 1694,
											"name": "SWAP10",
											"source": 3
										},
										{
											"begin": 1668,
											"end": 1694,
											"name": "SWAP9",
											"source": 3
										},
										{
											"begin": 1668,
											"end": 1694,
											"name": "SWAP8",
											"source": 3
										},
										{
											"begin": 1668,
											"end": 1694,
											"name": "SWAP7",
											"source": 3
										},
										{
											"begin": 1668,
											"end": 1694,
											"name": "SWAP6",
											"source": 3
										},
										{
											"begin": 1668,
											"end": 1694,
											"name": "SWAP5",
											"source": 3
										},
										{
											"begin": 1668,
											"end": 1694,
											"name": "SWAP4",
											"source": 3
										},
										{
											"begin": 1668,
											"end": 1694,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 1668,
											"end": 1694,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 1668,
											"end": 1694,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1668,
											"end": 1694,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "32"
										},
										{
											"begin": 1668,
											"end": 1694,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 1804,
											"end": 1827,
											"name": "tag",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 1804,
											"end": 1827,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1804,
											"end": 1827,
											"name": "CALLVALUE",
											"source": 3
										},
										{
											"begin": 1804,
											"end": 1827,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1804,
											"end": 1827,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 1804,
											"end": 1827,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "33"
										},
										{
											"begin": 1804,
											"end": 1827,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 1804,
											"end": 1827,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 1804,
											"end": 1827,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1804,
											"end": 1827,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 1804,
											"end": 1827,
											"name": "tag",
											"source": 3,
											"value": "33"
										},
										{
											"begin": 1804,
											"end": 1827,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1804,
											"end": 1827,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 1804,
											"end": 1827,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "34"
										},
										{
											"begin": 1804,
											"end": 1827,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "35"
										},
										{
											"begin": 1804,
											"end": 1827,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 1804,
											"end": 1827,
											"name": "tag",
											"source": 3,
											"value": "34"
										},
										{
											"begin": 1804,
											"end": 1827,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1804,
											"end": 1827,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 1804,
											"end": 1827,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 1804,
											"end": 1827,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "26"
										},
										{
											"begin": 1804,
											"end": 1827,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 1804,
											"end": 1827,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1804,
											"end": 1827,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "37"
										},
										{
											"begin": 1804,
											"end": 1827,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 3330,
											"end": 3667,
											"name": "tag",
											"source": 3,
											"value": "5"
										},
										{
											"begin": 3330,
											"end": 3667,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3330,
											"end": 3667,
											"name": "CALLVALUE",
											"source": 3
										},
										{
											"begin": 3330,
											"end": 3667,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 3330,
											"end": 3667,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 3330,
											"end": 3667,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "38"
										},
										{
											"begin": 3330,
											"end": 3667,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 3330,
											"end": 3667,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 3330,
											"end": 3667,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 3330,
											"end": 3667,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 3330,
											"end": 3667,
											"name": "tag",
											"source": 3,
											"value": "38"
										},
										{
											"begin": 3330,
											"end": 3667,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3330,
											"end": 3667,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 3330,
											"end": 3667,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "34"
										},
										{
											"begin": 3330,
											"end": 3667,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 3330,
											"end": 3667,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 1726,
											"end": 1750,
											"name": "tag",
											"source": 3,
											"value": "6"
										},
										{
											"begin": 1726,
											"end": 1750,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1726,
											"end": 1750,
											"name": "CALLVALUE",
											"source": 3
										},
										{
											"begin": 1726,
											"end": 1750,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1726,
											"end": 1750,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 1726,
											"end": 1750,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "42"
										},
										{
											"begin": 1726,
											"end": 1750,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 1726,
											"end": 1750,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 1726,
											"end": 1750,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1726,
											"end": 1750,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 1726,
											"end": 1750,
											"name": "tag",
											"source": 3,
											"value": "42"
										},
										{
											"begin": 1726,
											"end": 1750,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1726,
											"end": 1750,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 1726,
											"end": 1750,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "34"
										},
										{
											"begin": 1726,
											"end": 1750,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "44"
										},
										{
											"begin": 1726,
											"end": 1750,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 1533,
											"end": 1575,
											"name": "tag",
											"source": 3,
											"value": "7"
										},
										{
											"begin": 1533,
											"end": 1575,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1533,
											"end": 1575,
											"name": "CALLVALUE",
											"source": 3
										},
										{
											"begin": 1533,
											"end": 1575,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1533,
											"end": 1575,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 1533,
											"end": 1575,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "46"
										},
										{
											"begin": 1533,
											"end": 1575,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 1533,
											"end": 1575,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 1533,
											"end": 1575,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1533,
											"end": 1575,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 1533,
											"end": 1575,
											"name": "tag",
											"source": 3,
											"value": "46"
										},
										{
											"begin": 1533,
											"end": 1575,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1533,
											"end": 1575,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "34"
										},
										{
											"begin": 1533,
											"end": 1575,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "48"
										},
										{
											"begin": 1533,
											"end": 1575,
											"name": "CALLDATASIZE",
											"source": 3
										},
										{
											"begin": 1533,
											"end": 1575,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 1533,
											"end": 1575,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "49"
										},
										{
											"begin": 1533,
											"end": 1575,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 1533,
											"end": 1575,
											"name": "tag",
											"source": 3,
											"value": "48"
										},
										{
											"begin": 1533,
											"end": 1575,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1533,
											"end": 1575,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "50"
										},
										{
											"begin": 1533,
											"end": 1575,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 1714,
											"end": 1817,
											"name": "tag",
											"source": 6,
											"value": "8"
										},
										{
											"begin": 1714,
											"end": 1817,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1714,
											"end": 1817,
											"name": "CALLVALUE",
											"source": 6
										},
										{
											"begin": 1714,
											"end": 1817,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1714,
											"end": 1817,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 1714,
											"end": 1817,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "52"
										},
										{
											"begin": 1714,
											"end": 1817,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 1714,
											"end": 1817,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 1714,
											"end": 1817,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1714,
											"end": 1817,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 1714,
											"end": 1817,
											"name": "tag",
											"source": 6,
											"value": "52"
										},
										{
											"begin": 1714,
											"end": 1817,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1714,
											"end": 1817,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1714,
											"end": 1817,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "53"
										},
										{
											"begin": 1714,
											"end": 1817,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "54"
										},
										{
											"begin": 1714,
											"end": 1817,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 1714,
											"end": 1817,
											"name": "tag",
											"source": 6,
											"value": "53"
										},
										{
											"begin": 1714,
											"end": 1817,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1714,
											"end": 1817,
											"name": "STOP",
											"source": 6
										},
										{
											"begin": 6941,
											"end": 7049,
											"name": "tag",
											"source": 3,
											"value": "9"
										},
										{
											"begin": 6941,
											"end": 7049,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 6941,
											"end": 7049,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "53"
										},
										{
											"begin": 6941,
											"end": 7049,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "56"
										},
										{
											"begin": 6941,
											"end": 7049,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 1063,
											"end": 1150,
											"name": "tag",
											"source": 6,
											"value": "10"
										},
										{
											"begin": 1063,
											"end": 1150,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1063,
											"end": 1150,
											"name": "CALLVALUE",
											"source": 6
										},
										{
											"begin": 1063,
											"end": 1150,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1063,
											"end": 1150,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 1063,
											"end": 1150,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "57"
										},
										{
											"begin": 1063,
											"end": 1150,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 1063,
											"end": 1150,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 1063,
											"end": 1150,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1063,
											"end": 1150,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 1063,
											"end": 1150,
											"name": "tag",
											"source": 6,
											"value": "57"
										},
										{
											"begin": 1063,
											"end": 1150,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1063,
											"end": 1150,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1063,
											"end": 1150,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "58"
										},
										{
											"begin": 1063,
											"end": 1150,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "59"
										},
										{
											"begin": 1063,
											"end": 1150,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 1063,
											"end": 1150,
											"name": "tag",
											"source": 6,
											"value": "58"
										},
										{
											"begin": 1063,
											"end": 1150,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1063,
											"end": 1150,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 1063,
											"end": 1150,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 1063,
											"end": 1150,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "26"
										},
										{
											"begin": 1063,
											"end": 1150,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 1063,
											"end": 1150,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1063,
											"end": 1150,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "61"
										},
										{
											"begin": 1063,
											"end": 1150,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 2336,
											"end": 3321,
											"name": "tag",
											"source": 3,
											"value": "11"
										},
										{
											"begin": 2336,
											"end": 3321,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2336,
											"end": 3321,
											"name": "CALLVALUE",
											"source": 3
										},
										{
											"begin": 2336,
											"end": 3321,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2336,
											"end": 3321,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 2336,
											"end": 3321,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "62"
										},
										{
											"begin": 2336,
											"end": 3321,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 2336,
											"end": 3321,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 2336,
											"end": 3321,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2336,
											"end": 3321,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 2336,
											"end": 3321,
											"name": "tag",
											"source": 3,
											"value": "62"
										},
										{
											"begin": 2336,
											"end": 3321,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2336,
											"end": 3321,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "53"
										},
										{
											"begin": 2336,
											"end": 3321,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "64"
										},
										{
											"begin": 2336,
											"end": 3321,
											"name": "CALLDATASIZE",
											"source": 3
										},
										{
											"begin": 2336,
											"end": 3321,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 2336,
											"end": 3321,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "65"
										},
										{
											"begin": 2336,
											"end": 3321,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 2336,
											"end": 3321,
											"name": "tag",
											"source": 3,
											"value": "64"
										},
										{
											"begin": 2336,
											"end": 3321,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2336,
											"end": 3321,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "66"
										},
										{
											"begin": 2336,
											"end": 3321,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 5927,
											"end": 6811,
											"name": "tag",
											"source": 3,
											"value": "12"
										},
										{
											"begin": 5927,
											"end": 6811,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 5927,
											"end": 6811,
											"name": "CALLVALUE",
											"source": 3
										},
										{
											"begin": 5927,
											"end": 6811,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 5927,
											"end": 6811,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 5927,
											"end": 6811,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "67"
										},
										{
											"begin": 5927,
											"end": 6811,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 5927,
											"end": 6811,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 5927,
											"end": 6811,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 5927,
											"end": 6811,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 5927,
											"end": 6811,
											"name": "tag",
											"source": 3,
											"value": "67"
										},
										{
											"begin": 5927,
											"end": 6811,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 5927,
											"end": 6811,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 5927,
											"end": 6811,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "53"
										},
										{
											"begin": 5927,
											"end": 6811,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "69"
										},
										{
											"begin": 5927,
											"end": 6811,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 1582,
											"end": 1616,
											"name": "tag",
											"source": 3,
											"value": "13"
										},
										{
											"begin": 1582,
											"end": 1616,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1582,
											"end": 1616,
											"name": "CALLVALUE",
											"source": 3
										},
										{
											"begin": 1582,
											"end": 1616,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1582,
											"end": 1616,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 1582,
											"end": 1616,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "70"
										},
										{
											"begin": 1582,
											"end": 1616,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 1582,
											"end": 1616,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 1582,
											"end": 1616,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1582,
											"end": 1616,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 1582,
											"end": 1616,
											"name": "tag",
											"source": 3,
											"value": "70"
										},
										{
											"begin": 1582,
											"end": 1616,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1582,
											"end": 1616,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 1582,
											"end": 1616,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "71"
										},
										{
											"begin": 1582,
											"end": 1616,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "72"
										},
										{
											"begin": 1582,
											"end": 1616,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 1582,
											"end": 1616,
											"name": "tag",
											"source": 3,
											"value": "71"
										},
										{
											"begin": 1582,
											"end": 1616,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1582,
											"end": 1616,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 1582,
											"end": 1616,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 1582,
											"end": 1616,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "26"
										},
										{
											"begin": 1582,
											"end": 1616,
											"name": "SWAP7",
											"source": 3
										},
										{
											"begin": 1582,
											"end": 1616,
											"name": "SWAP6",
											"source": 3
										},
										{
											"begin": 1582,
											"end": 1616,
											"name": "SWAP5",
											"source": 3
										},
										{
											"begin": 1582,
											"end": 1616,
											"name": "SWAP4",
											"source": 3
										},
										{
											"begin": 1582,
											"end": 1616,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 1582,
											"end": 1616,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 1582,
											"end": 1616,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1582,
											"end": 1616,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "74"
										},
										{
											"begin": 1582,
											"end": 1616,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 1701,
											"end": 1719,
											"name": "tag",
											"source": 3,
											"value": "14"
										},
										{
											"begin": 1701,
											"end": 1719,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1701,
											"end": 1719,
											"name": "CALLVALUE",
											"source": 3
										},
										{
											"begin": 1701,
											"end": 1719,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1701,
											"end": 1719,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 1701,
											"end": 1719,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "75"
										},
										{
											"begin": 1701,
											"end": 1719,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 1701,
											"end": 1719,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 1701,
											"end": 1719,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1701,
											"end": 1719,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 1701,
											"end": 1719,
											"name": "tag",
											"source": 3,
											"value": "75"
										},
										{
											"begin": 1701,
											"end": 1719,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1701,
											"end": 1719,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 1701,
											"end": 1719,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "58"
										},
										{
											"begin": 1701,
											"end": 1719,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "77"
										},
										{
											"begin": 1701,
											"end": 1719,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 3794,
											"end": 5919,
											"name": "tag",
											"source": 3,
											"value": "15"
										},
										{
											"begin": 3794,
											"end": 5919,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3794,
											"end": 5919,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "53"
										},
										{
											"begin": 3794,
											"end": 5919,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "81"
										},
										{
											"begin": 3794,
											"end": 5919,
											"name": "CALLDATASIZE",
											"source": 3
										},
										{
											"begin": 3794,
											"end": 5919,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 3794,
											"end": 5919,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "82"
										},
										{
											"begin": 3794,
											"end": 5919,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 3794,
											"end": 5919,
											"name": "tag",
											"source": 3,
											"value": "81"
										},
										{
											"begin": 3794,
											"end": 5919,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3794,
											"end": 5919,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "83"
										},
										{
											"begin": 3794,
											"end": 5919,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 3676,
											"end": 3786,
											"name": "tag",
											"source": 3,
											"value": "16"
										},
										{
											"begin": 3676,
											"end": 3786,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3676,
											"end": 3786,
											"name": "CALLVALUE",
											"source": 3
										},
										{
											"begin": 3676,
											"end": 3786,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 3676,
											"end": 3786,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 3676,
											"end": 3786,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "84"
										},
										{
											"begin": 3676,
											"end": 3786,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 3676,
											"end": 3786,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 3676,
											"end": 3786,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 3676,
											"end": 3786,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 3676,
											"end": 3786,
											"name": "tag",
											"source": 3,
											"value": "84"
										},
										{
											"begin": 3676,
											"end": 3786,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3676,
											"end": 3786,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 3676,
											"end": 3786,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "85"
										},
										{
											"begin": 3676,
											"end": 3786,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "86"
										},
										{
											"begin": 3676,
											"end": 3786,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 3676,
											"end": 3786,
											"name": "tag",
											"source": 3,
											"value": "85"
										},
										{
											"begin": 3676,
											"end": 3786,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3676,
											"end": 3786,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 3676,
											"end": 3786,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 3676,
											"end": 3786,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "26"
										},
										{
											"begin": 3676,
											"end": 3786,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 3676,
											"end": 3786,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3676,
											"end": 3786,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "88"
										},
										{
											"begin": 3676,
											"end": 3786,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 1480,
											"end": 1526,
											"name": "tag",
											"source": 3,
											"value": "17"
										},
										{
											"begin": 1480,
											"end": 1526,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1480,
											"end": 1526,
											"name": "CALLVALUE",
											"source": 3
										},
										{
											"begin": 1480,
											"end": 1526,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1480,
											"end": 1526,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 1480,
											"end": 1526,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "89"
										},
										{
											"begin": 1480,
											"end": 1526,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 1480,
											"end": 1526,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 1480,
											"end": 1526,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1480,
											"end": 1526,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 1480,
											"end": 1526,
											"name": "tag",
											"source": 3,
											"value": "89"
										},
										{
											"begin": 1480,
											"end": 1526,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1480,
											"end": 1526,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "90"
										},
										{
											"begin": 1480,
											"end": 1526,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "91"
										},
										{
											"begin": 1480,
											"end": 1526,
											"name": "CALLDATASIZE",
											"source": 3
										},
										{
											"begin": 1480,
											"end": 1526,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 1480,
											"end": 1526,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "49"
										},
										{
											"begin": 1480,
											"end": 1526,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 1480,
											"end": 1526,
											"name": "tag",
											"source": 3,
											"value": "91"
										},
										{
											"begin": 1480,
											"end": 1526,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1480,
											"end": 1526,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "92"
										},
										{
											"begin": 1480,
											"end": 1526,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 1480,
											"end": 1526,
											"name": "tag",
											"source": 3,
											"value": "90"
										},
										{
											"begin": 1480,
											"end": 1526,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1480,
											"end": 1526,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 1480,
											"end": 1526,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 1480,
											"end": 1526,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "26"
										},
										{
											"begin": 1480,
											"end": 1526,
											"name": "SWAP7",
											"source": 3
										},
										{
											"begin": 1480,
											"end": 1526,
											"name": "SWAP6",
											"source": 3
										},
										{
											"begin": 1480,
											"end": 1526,
											"name": "SWAP5",
											"source": 3
										},
										{
											"begin": 1480,
											"end": 1526,
											"name": "SWAP4",
											"source": 3
										},
										{
											"begin": 1480,
											"end": 1526,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 1480,
											"end": 1526,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 1480,
											"end": 1526,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1480,
											"end": 1526,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "94"
										},
										{
											"begin": 1480,
											"end": 1526,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 1972,
											"end": 2173,
											"name": "tag",
											"source": 6,
											"value": "18"
										},
										{
											"begin": 1972,
											"end": 2173,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1972,
											"end": 2173,
											"name": "CALLVALUE",
											"source": 6
										},
										{
											"begin": 1972,
											"end": 2173,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1972,
											"end": 2173,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 1972,
											"end": 2173,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "95"
										},
										{
											"begin": 1972,
											"end": 2173,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 1972,
											"end": 2173,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 1972,
											"end": 2173,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1972,
											"end": 2173,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 1972,
											"end": 2173,
											"name": "tag",
											"source": 6,
											"value": "95"
										},
										{
											"begin": 1972,
											"end": 2173,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1972,
											"end": 2173,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "53"
										},
										{
											"begin": 1972,
											"end": 2173,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "97"
										},
										{
											"begin": 1972,
											"end": 2173,
											"name": "CALLDATASIZE",
											"source": 6
										},
										{
											"begin": 1972,
											"end": 2173,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 1972,
											"end": 2173,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "49"
										},
										{
											"begin": 1972,
											"end": 2173,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 1972,
											"end": 2173,
											"name": "tag",
											"source": 6,
											"value": "97"
										},
										{
											"begin": 1972,
											"end": 2173,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1972,
											"end": 2173,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "98"
										},
										{
											"begin": 1972,
											"end": 2173,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 6819,
											"end": 6930,
											"name": "tag",
											"source": 3,
											"value": "19"
										},
										{
											"begin": 6819,
											"end": 6930,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 6819,
											"end": 6930,
											"name": "CALLVALUE",
											"source": 3
										},
										{
											"begin": 6819,
											"end": 6930,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 6819,
											"end": 6930,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 6819,
											"end": 6930,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "99"
										},
										{
											"begin": 6819,
											"end": 6930,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 6819,
											"end": 6930,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 6819,
											"end": 6930,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 6819,
											"end": 6930,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 6819,
											"end": 6930,
											"name": "tag",
											"source": 3,
											"value": "99"
										},
										{
											"begin": 6819,
											"end": 6930,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6819,
											"end": 6930,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "34"
										},
										{
											"begin": 6819,
											"end": 6930,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "101"
										},
										{
											"begin": 6819,
											"end": 6930,
											"name": "CALLDATASIZE",
											"source": 3
										},
										{
											"begin": 6819,
											"end": 6930,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 6819,
											"end": 6930,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "49"
										},
										{
											"begin": 6819,
											"end": 6930,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 6819,
											"end": 6930,
											"name": "tag",
											"source": 3,
											"value": "101"
										},
										{
											"begin": 6819,
											"end": 6930,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 6819,
											"end": 6930,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "102"
										},
										{
											"begin": 6819,
											"end": 6930,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 1623,
											"end": 1661,
											"name": "tag",
											"source": 3,
											"value": "25"
										},
										{
											"begin": 1623,
											"end": 1661,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1623,
											"end": 1661,
											"name": "PUSH",
											"source": 3,
											"value": "B"
										},
										{
											"begin": 1623,
											"end": 1661,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 1623,
											"end": 1661,
											"name": "PUSH",
											"source": 3,
											"value": "C"
										},
										{
											"begin": 1623,
											"end": 1661,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 1623,
											"end": 1661,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 1623,
											"end": 1661,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										},
										{
											"begin": 1668,
											"end": 1694,
											"name": "tag",
											"source": 3,
											"value": "30"
										},
										{
											"begin": 1668,
											"end": 1694,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1668,
											"end": 1694,
											"name": "PUSH",
											"source": 3,
											"value": "D"
										},
										{
											"begin": 1668,
											"end": 1694,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 1668,
											"end": 1694,
											"name": "PUSH",
											"source": 3,
											"value": "E"
										},
										{
											"begin": 1668,
											"end": 1694,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 1668,
											"end": 1694,
											"name": "PUSH",
											"source": 3,
											"value": "F"
										},
										{
											"begin": 1668,
											"end": 1694,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 1668,
											"end": 1694,
											"name": "PUSH",
											"source": 3,
											"value": "10"
										},
										{
											"begin": 1668,
											"end": 1694,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 1668,
											"end": 1694,
											"name": "PUSH",
											"source": 3,
											"value": "11"
										},
										{
											"begin": 1668,
											"end": 1694,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 1668,
											"end": 1694,
											"name": "PUSH",
											"source": 3,
											"value": "12"
										},
										{
											"begin": 1668,
											"end": 1694,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 1668,
											"end": 1694,
											"name": "PUSH",
											"source": 3,
											"value": "13"
										},
										{
											"begin": 1668,
											"end": 1694,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 1668,
											"end": 1694,
											"name": "PUSH",
											"source": 3,
											"value": "14"
										},
										{
											"begin": 1668,
											"end": 1694,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 1668,
											"end": 1694,
											"name": "PUSH",
											"source": 3,
											"value": "15"
										},
										{
											"begin": 1668,
											"end": 1694,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 1668,
											"end": 1694,
											"name": "PUSH",
											"source": 3,
											"value": "16"
										},
										{
											"begin": 1668,
											"end": 1694,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 1668,
											"end": 1694,
											"name": "PUSH",
											"source": 3,
											"value": "17"
										},
										{
											"begin": 1668,
											"end": 1694,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 1668,
											"end": 1694,
											"name": "PUSH",
											"source": 3,
											"value": "18"
										},
										{
											"begin": 1668,
											"end": 1694,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1668,
											"end": 1694,
											"name": "SWAP12",
											"source": 3
										},
										{
											"begin": 1668,
											"end": 1694,
											"name": "DUP13",
											"source": 3
										},
										{
											"begin": 1668,
											"end": 1694,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 1668,
											"end": 1694,
											"name": "SWAP12",
											"source": 3
										},
										{
											"begin": 1668,
											"end": 1694,
											"name": "SWAP11",
											"source": 3
										},
										{
											"begin": 1668,
											"end": 1694,
											"name": "DUP12",
											"source": 3
										},
										{
											"begin": 1668,
											"end": 1694,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 1668,
											"end": 1694,
											"name": "SWAP11",
											"source": 3
										},
										{
											"begin": 1668,
											"end": 1694,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1668,
											"end": 1694,
											"name": "SWAP10",
											"source": 3
										},
										{
											"begin": 1668,
											"end": 1694,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 1668,
											"end": 1694,
											"name": "SWAP9",
											"source": 3
										},
										{
											"begin": 1668,
											"end": 1694,
											"name": "PUSH",
											"source": 3,
											"value": "FF"
										},
										{
											"begin": 1668,
											"end": 1694,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1668,
											"end": 1694,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 1668,
											"end": 1694,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 1668,
											"end": 1694,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1668,
											"end": 1694,
											"name": "DUP13",
											"source": 3
										},
										{
											"begin": 1668,
											"end": 1694,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										},
										{
											"begin": 1804,
											"end": 1827,
											"name": "tag",
											"source": 3,
											"value": "35"
										},
										{
											"begin": 1804,
											"end": 1827,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1804,
											"end": 1827,
											"name": "PUSH",
											"source": 3,
											"value": "1D"
										},
										{
											"begin": 1804,
											"end": 1827,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 1804,
											"end": 1827,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1804,
											"end": 1827,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										},
										{
											"begin": 3330,
											"end": 3667,
											"name": "tag",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 3330,
											"end": 3667,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3409,
											"end": 3428,
											"name": "PUSH",
											"source": 3,
											"value": "11"
										},
										{
											"begin": 3409,
											"end": 3428,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 3368,
											"end": 3375,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 3368,
											"end": 3375,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3391,
											"end": 3406,
											"name": "TIMESTAMP",
											"source": 3
										},
										{
											"begin": 3391,
											"end": 3428,
											"name": "LT",
											"source": 3
										},
										{
											"begin": 3388,
											"end": 3660,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 3388,
											"end": 3660,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "106"
										},
										{
											"begin": 3388,
											"end": 3660,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3452,
											"end": 3453,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 3445,
											"end": 3453,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "109"
										},
										{
											"begin": 3445,
											"end": 3453,
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 3388,
											"end": 3660,
											"name": "tag",
											"source": 3,
											"value": "106"
										},
										{
											"begin": 3388,
											"end": 3660,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3519,
											"end": 3536,
											"name": "PUSH",
											"source": 3,
											"value": "12"
										},
										{
											"begin": 3519,
											"end": 3536,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 3501,
											"end": 3516,
											"name": "TIMESTAMP",
											"source": 3
										},
										{
											"begin": 3501,
											"end": 3536,
											"name": "GT",
											"source": 3
										},
										{
											"begin": 3498,
											"end": 3649,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 3498,
											"end": 3649,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "108"
										},
										{
											"begin": 3498,
											"end": 3649,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3564,
											"end": 3565,
											"name": "PUSH",
											"source": 3,
											"value": "2"
										},
										{
											"begin": 3557,
											"end": 3565,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "109"
										},
										{
											"begin": 3557,
											"end": 3565,
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 3498,
											"end": 3649,
											"name": "tag",
											"source": 3,
											"value": "108"
										},
										{
											"begin": 3498,
											"end": 3649,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3622,
											"end": 3623,
											"name": "PUSH",
											"source": 3,
											"value": "1"
										},
										{
											"begin": 3498,
											"end": 3649,
											"name": "tag",
											"source": 3,
											"value": "109"
										},
										{
											"begin": 3498,
											"end": 3649,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3330,
											"end": 3667,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3330,
											"end": 3667,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										},
										{
											"begin": 1726,
											"end": 1750,
											"name": "tag",
											"source": 3,
											"value": "44"
										},
										{
											"begin": 1726,
											"end": 1750,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1726,
											"end": 1750,
											"name": "PUSH",
											"source": 3,
											"value": "1A"
										},
										{
											"begin": 1726,
											"end": 1750,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 1726,
											"end": 1750,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1726,
											"end": 1750,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										},
										{
											"begin": 1533,
											"end": 1575,
											"name": "tag",
											"source": 3,
											"value": "50"
										},
										{
											"begin": 1533,
											"end": 1575,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1533,
											"end": 1575,
											"name": "PUSH",
											"source": 3,
											"value": "3"
										},
										{
											"begin": 1533,
											"end": 1575,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 1533,
											"end": 1575,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 1533,
											"end": 1575,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 1533,
											"end": 1575,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1533,
											"end": 1575,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1533,
											"end": 1575,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 1533,
											"end": 1575,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 1533,
											"end": 1575,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1533,
											"end": 1575,
											"name": "KECCAK256",
											"source": 3
										},
										{
											"begin": 1533,
											"end": 1575,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 1533,
											"end": 1575,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1533,
											"end": 1575,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										},
										{
											"begin": 1714,
											"end": 1817,
											"name": "tag",
											"source": 6,
											"value": "54"
										},
										{
											"begin": 1714,
											"end": 1817,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1294,
											"end": 1306,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "111"
										},
										{
											"begin": 1294,
											"end": 1304,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "112"
										},
										{
											"begin": 1294,
											"end": 1306,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 1294,
											"end": 1306,
											"name": "tag",
											"source": 6,
											"value": "111"
										},
										{
											"begin": 1294,
											"end": 1306,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1283,
											"end": 1306,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 1283,
											"end": 1290,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "113"
										},
										{
											"begin": 1283,
											"end": 1288,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "59"
										},
										{
											"begin": 1283,
											"end": 1290,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 1283,
											"end": 1290,
											"name": "tag",
											"source": 6,
											"value": "113"
										},
										{
											"begin": 1283,
											"end": 1290,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1283,
											"end": 1306,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 1283,
											"end": 1306,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 1275,
											"end": 1343,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "114"
										},
										{
											"begin": 1275,
											"end": 1343,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 1275,
											"end": 1343,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 1275,
											"end": 1343,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1275,
											"end": 1343,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1275,
											"end": 1343,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 1275,
											"end": 1343,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 1275,
											"end": 1343,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 1275,
											"end": 1343,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "115"
										},
										{
											"begin": 1275,
											"end": 1343,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1275,
											"end": 1343,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "116"
										},
										{
											"begin": 1275,
											"end": 1343,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 1275,
											"end": 1343,
											"name": "tag",
											"source": 6,
											"value": "115"
										},
										{
											"begin": 1275,
											"end": 1343,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1275,
											"end": 1343,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 1275,
											"end": 1343,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 1275,
											"end": 1343,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1275,
											"end": 1343,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 1275,
											"end": 1343,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 1275,
											"end": 1343,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1275,
											"end": 1343,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 1275,
											"end": 1343,
											"name": "tag",
											"source": 6,
											"value": "114"
										},
										{
											"begin": 1275,
											"end": 1343,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1779,
											"end": 1809,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "118"
										},
										{
											"begin": 1806,
											"end": 1807,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 1779,
											"end": 1797,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "119"
										},
										{
											"begin": 1779,
											"end": 1809,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 1779,
											"end": 1809,
											"name": "tag",
											"source": 6,
											"value": "118"
										},
										{
											"begin": 1779,
											"end": 1809,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1714,
											"end": 1817,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 6941,
											"end": 7049,
											"name": "tag",
											"source": 3,
											"value": "56"
										},
										{
											"begin": 6941,
											"end": 7049,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 6990,
											"end": 7041,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 6990,
											"end": 7041,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 6998,
											"end": 7008,
											"name": "CALLER",
											"source": 3
										},
										{
											"begin": 6998,
											"end": 7008,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 7019,
											"end": 7040,
											"name": "SELFBALANCE",
											"source": 3
										},
										{
											"begin": 6990,
											"end": 7041,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 6990,
											"end": 7041,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 6990,
											"end": 7041,
											"name": "PUSH",
											"source": 3,
											"value": "8FC"
										},
										{
											"begin": 6990,
											"end": 7041,
											"name": "MUL",
											"source": 3
										},
										{
											"begin": 6990,
											"end": 7041,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 6990,
											"end": 7041,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 6990,
											"end": 7041,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 6990,
											"end": 7041,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 6990,
											"end": 7041,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 7019,
											"end": 7040,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 6998,
											"end": 7008,
											"name": "DUP9",
											"source": 3
										},
										{
											"begin": 6990,
											"end": 7041,
											"name": "DUP9",
											"source": 3
										},
										{
											"begin": 6990,
											"end": 7041,
											"name": "CALL",
											"source": 3
										},
										{
											"begin": 6990,
											"end": 7041,
											"name": "SWAP4",
											"source": 3
										},
										{
											"begin": 6990,
											"end": 7041,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 6990,
											"end": 7041,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 6990,
											"end": 7041,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 6990,
											"end": 7041,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 6990,
											"end": 7041,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 6990,
											"end": 7041,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 6990,
											"end": 7041,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 6990,
											"end": 7041,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "122"
										},
										{
											"begin": 6990,
											"end": 7041,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 6990,
											"end": 7041,
											"name": "RETURNDATASIZE",
											"source": 3
										},
										{
											"begin": 6990,
											"end": 7041,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 6990,
											"end": 7041,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 6990,
											"end": 7041,
											"name": "RETURNDATACOPY",
											"source": 3
										},
										{
											"begin": 6990,
											"end": 7041,
											"name": "RETURNDATASIZE",
											"source": 3
										},
										{
											"begin": 6990,
											"end": 7041,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 6990,
											"end": 7041,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 6990,
											"end": 7041,
											"name": "tag",
											"source": 3,
											"value": "122"
										},
										{
											"begin": 6990,
											"end": 7041,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 6990,
											"end": 7041,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 6941,
											"end": 7049,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										},
										{
											"begin": 1063,
											"end": 1150,
											"name": "tag",
											"source": 6,
											"value": "59"
										},
										{
											"begin": 1063,
											"end": 1150,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1136,
											"end": 1142,
											"name": "PUSH",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 1136,
											"end": 1142,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1136,
											"end": 1142,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 1063,
											"end": 1150,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1063,
											"end": 1150,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 2336,
											"end": 3321,
											"name": "tag",
											"source": 3,
											"value": "66"
										},
										{
											"begin": 2336,
											"end": 3321,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2517,
											"end": 2526,
											"name": "PUSH",
											"source": 3,
											"value": "D"
										},
										{
											"begin": 2517,
											"end": 2555,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2517,
											"end": 2555,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2517,
											"end": 2555,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2517,
											"end": 2555,
											"name": "DUP8",
											"source": 3
										},
										{
											"begin": 2517,
											"end": 2555,
											"name": "AND",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 2517,
											"end": 2555,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 2517,
											"end": 2555,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 2517,
											"end": 2555,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 2517,
											"end": 2555,
											"name": "OR",
											"source": 3
										},
										{
											"begin": 2517,
											"end": 2555,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2517,
											"end": 2555,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 2517,
											"end": 2555,
											"name": "SSTORE",
											"source": 3
										},
										{
											"begin": 2566,
											"end": 2585,
											"name": "PUSH",
											"source": 3,
											"value": "E"
										},
										{
											"begin": 2566,
											"end": 2598,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2566,
											"end": 2598,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 2566,
											"end": 2598,
											"name": "DUP7",
											"source": 3
										},
										{
											"begin": 2566,
											"end": 2598,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 2566,
											"end": 2598,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 2566,
											"end": 2598,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2566,
											"end": 2598,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 2566,
											"end": 2598,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 2566,
											"end": 2598,
											"name": "OR",
											"source": 3
										},
										{
											"begin": 2566,
											"end": 2598,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2566,
											"end": 2598,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 2566,
											"end": 2598,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2566,
											"end": 2598,
											"name": "SSTORE",
											"source": 3
										},
										{
											"begin": 2609,
											"end": 2628,
											"name": "PUSH",
											"source": 3,
											"value": "F"
										},
										{
											"begin": 2609,
											"end": 2641,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2609,
											"end": 2641,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 2609,
											"end": 2641,
											"name": "DUP7",
											"source": 3
										},
										{
											"begin": 2609,
											"end": 2641,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 2609,
											"end": 2641,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 2609,
											"end": 2641,
											"name": "SWAP4",
											"source": 3
										},
										{
											"begin": 2609,
											"end": 2641,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 2609,
											"end": 2641,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 2609,
											"end": 2641,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2609,
											"end": 2641,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 2609,
											"end": 2641,
											"name": "OR",
											"source": 3
										},
										{
											"begin": 2609,
											"end": 2641,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2609,
											"end": 2641,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 2609,
											"end": 2641,
											"name": "SSTORE",
											"source": 3
										},
										{
											"begin": 2699,
											"end": 2736,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 2699,
											"end": 2736,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2699,
											"end": 2736,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "313CE567"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2699,
											"end": 2736,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 2699,
											"end": 2736,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 2699,
											"end": 2736,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2699,
											"end": 2736,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 2705,
											"end": 2724,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 2705,
											"end": 2724,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2705,
											"end": 2724,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 2705,
											"end": 2724,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 2705,
											"end": 2724,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 2699,
											"end": 2734,
											"name": "PUSH",
											"source": 3,
											"value": "313CE567"
										},
										{
											"begin": 2699,
											"end": 2734,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 2699,
											"end": 2736,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 2699,
											"end": 2736,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2699,
											"end": 2736,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 2699,
											"end": 2736,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2699,
											"end": 2736,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 2699,
											"end": 2736,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 2699,
											"end": 2736,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 2699,
											"end": 2736,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 2699,
											"end": 2736,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2699,
											"end": 2736,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 2699,
											"end": 2736,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2699,
											"end": 2736,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 2699,
											"end": 2736,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2699,
											"end": 2736,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 2705,
											"end": 2724,
											"name": "DUP7",
											"source": 3
										},
										{
											"begin": 2699,
											"end": 2736,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2699,
											"end": 2736,
											"name": "EXTCODESIZE",
											"source": 3
										},
										{
											"begin": 2699,
											"end": 2736,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 2699,
											"end": 2736,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2699,
											"end": 2736,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 2699,
											"end": 2736,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "125"
										},
										{
											"begin": 2699,
											"end": 2736,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 2699,
											"end": 2736,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 2699,
											"end": 2736,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2699,
											"end": 2736,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 2699,
											"end": 2736,
											"name": "tag",
											"source": 3,
											"value": "125"
										},
										{
											"begin": 2699,
											"end": 2736,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2699,
											"end": 2736,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2699,
											"end": 2736,
											"name": "GAS",
											"source": 3
										},
										{
											"begin": 2699,
											"end": 2736,
											"name": "STATICCALL",
											"source": 3
										},
										{
											"begin": 2699,
											"end": 2736,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 2699,
											"end": 2736,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2699,
											"end": 2736,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 2699,
											"end": 2736,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "127"
										},
										{
											"begin": 2699,
											"end": 2736,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 2699,
											"end": 2736,
											"name": "RETURNDATASIZE",
											"source": 3
										},
										{
											"begin": 2699,
											"end": 2736,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 2699,
											"end": 2736,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2699,
											"end": 2736,
											"name": "RETURNDATACOPY",
											"source": 3
										},
										{
											"begin": 2699,
											"end": 2736,
											"name": "RETURNDATASIZE",
											"source": 3
										},
										{
											"begin": 2699,
											"end": 2736,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 2699,
											"end": 2736,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 2699,
											"end": 2736,
											"name": "tag",
											"source": 3,
											"value": "127"
										},
										{
											"begin": 2699,
											"end": 2736,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2699,
											"end": 2736,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2699,
											"end": 2736,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2699,
											"end": 2736,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2699,
											"end": 2736,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2699,
											"end": 2736,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 2699,
											"end": 2736,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 2699,
											"end": 2736,
											"name": "RETURNDATASIZE",
											"source": 3
										},
										{
											"begin": 2699,
											"end": 2736,
											"name": "PUSH",
											"source": 3,
											"value": "1F"
										},
										{
											"begin": 2699,
											"end": 2736,
											"name": "NOT",
											"source": 3
										},
										{
											"begin": 2699,
											"end": 2736,
											"name": "PUSH",
											"source": 3,
											"value": "1F"
										},
										{
											"begin": 2699,
											"end": 2736,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 2699,
											"end": 2736,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2699,
											"end": 2736,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 2699,
											"end": 2736,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 2699,
											"end": 2736,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2699,
											"end": 2736,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2699,
											"end": 2736,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 2699,
											"end": 2736,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 2699,
											"end": 2736,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2699,
											"end": 2736,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 2699,
											"end": 2736,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2699,
											"end": 2736,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2699,
											"end": 2736,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "128"
										},
										{
											"begin": 2699,
											"end": 2736,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 2699,
											"end": 2736,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2699,
											"end": 2736,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "129"
										},
										{
											"begin": 2699,
											"end": 2736,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 2699,
											"end": 2736,
											"name": "tag",
											"source": 3,
											"value": "128"
										},
										{
											"begin": 2699,
											"end": 2736,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2686,
											"end": 2737,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "130"
										},
										{
											"begin": 2686,
											"end": 2737,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2686,
											"end": 2688,
											"name": "PUSH",
											"source": 3,
											"value": "A"
										},
										{
											"begin": 2686,
											"end": 2737,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "131"
										},
										{
											"begin": 2686,
											"end": 2737,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 2686,
											"end": 2737,
											"name": "tag",
											"source": 3,
											"value": "130"
										},
										{
											"begin": 2686,
											"end": 2737,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2675,
											"end": 2683,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 2675,
											"end": 2683,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 2675,
											"end": 2737,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "133"
										},
										{
											"begin": 2675,
											"end": 2737,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 2675,
											"end": 2737,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2675,
											"end": 2737,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "134"
										},
										{
											"begin": 2675,
											"end": 2737,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 2675,
											"end": 2737,
											"name": "tag",
											"source": 3,
											"value": "133"
										},
										{
											"begin": 2675,
											"end": 2737,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2652,
											"end": 2672,
											"name": "PUSH",
											"source": 3,
											"value": "10"
										},
										{
											"begin": 2652,
											"end": 2737,
											"name": "SSTORE",
											"source": 3
										},
										{
											"begin": 2770,
											"end": 2778,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 2770,
											"end": 2778,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2770,
											"end": 2778,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 2770,
											"end": 2778,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2770,
											"end": 2778,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 2748,
											"end": 2767,
											"name": "PUSH",
											"source": 3,
											"value": "11"
										},
										{
											"begin": 2748,
											"end": 2778,
											"name": "SSTORE",
											"source": 3
										},
										{
											"begin": 2809,
											"end": 2817,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 2809,
											"end": 2817,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2809,
											"end": 2817,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 2809,
											"end": 2817,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2809,
											"end": 2817,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 2789,
											"end": 2806,
											"name": "PUSH",
											"source": 3,
											"value": "12"
										},
										{
											"begin": 2789,
											"end": 2817,
											"name": "SSTORE",
											"source": 3
										},
										{
											"begin": 2857,
											"end": 2865,
											"name": "PUSH",
											"source": 3,
											"value": "60"
										},
										{
											"begin": 2857,
											"end": 2865,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 2857,
											"end": 2865,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2857,
											"end": 2865,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 2828,
											"end": 2854,
											"name": "PUSH",
											"source": 3,
											"value": "13"
										},
										{
											"begin": 2828,
											"end": 2865,
											"name": "SSTORE",
											"source": 3
										},
										{
											"begin": 2935,
											"end": 2954,
											"name": "PUSH",
											"source": 3,
											"value": "F"
										},
										{
											"begin": 2935,
											"end": 2954,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 2929,
											"end": 2966,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 2929,
											"end": 2966,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "313CE567"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2929,
											"end": 2966,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 2929,
											"end": 2966,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 2929,
											"end": 2966,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 2929,
											"end": 2966,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2935,
											"end": 2954,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2935,
											"end": 2954,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 2935,
											"end": 2954,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 2935,
											"end": 2954,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 2929,
											"end": 2964,
											"name": "PUSH",
											"source": 3,
											"value": "313CE567"
										},
										{
											"begin": 2929,
											"end": 2964,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 2929,
											"end": 2966,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 2929,
											"end": 2966,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2929,
											"end": 2966,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 2929,
											"end": 2966,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2929,
											"end": 2966,
											"name": "SWAP4",
											"source": 3
										},
										{
											"begin": 2929,
											"end": 2966,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 2929,
											"end": 2966,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 2929,
											"end": 2966,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2929,
											"end": 2966,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 2929,
											"end": 2966,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2929,
											"end": 2966,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 2935,
											"end": 2954,
											"name": "DUP7",
											"source": 3
										},
										{
											"begin": 2929,
											"end": 2966,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2929,
											"end": 2966,
											"name": "EXTCODESIZE",
											"source": 3
										},
										{
											"begin": 2929,
											"end": 2966,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 2929,
											"end": 2966,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2929,
											"end": 2966,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 2929,
											"end": 2966,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "138"
										},
										{
											"begin": 2929,
											"end": 2966,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 2929,
											"end": 2966,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 2929,
											"end": 2966,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2929,
											"end": 2966,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 2929,
											"end": 2966,
											"name": "tag",
											"source": 3,
											"value": "138"
										},
										{
											"begin": 2929,
											"end": 2966,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2929,
											"end": 2966,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2929,
											"end": 2966,
											"name": "GAS",
											"source": 3
										},
										{
											"begin": 2929,
											"end": 2966,
											"name": "STATICCALL",
											"source": 3
										},
										{
											"begin": 2929,
											"end": 2966,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 2929,
											"end": 2966,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2929,
											"end": 2966,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 2929,
											"end": 2966,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "140"
										},
										{
											"begin": 2929,
											"end": 2966,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 2929,
											"end": 2966,
											"name": "RETURNDATASIZE",
											"source": 3
										},
										{
											"begin": 2929,
											"end": 2966,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 2929,
											"end": 2966,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2929,
											"end": 2966,
											"name": "RETURNDATACOPY",
											"source": 3
										},
										{
											"begin": 2929,
											"end": 2966,
											"name": "RETURNDATASIZE",
											"source": 3
										},
										{
											"begin": 2929,
											"end": 2966,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 2929,
											"end": 2966,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 2929,
											"end": 2966,
											"name": "tag",
											"source": 3,
											"value": "140"
										},
										{
											"begin": 2929,
											"end": 2966,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2929,
											"end": 2966,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2929,
											"end": 2966,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2929,
											"end": 2966,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2929,
											"end": 2966,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2929,
											"end": 2966,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 2929,
											"end": 2966,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 2929,
											"end": 2966,
											"name": "RETURNDATASIZE",
											"source": 3
										},
										{
											"begin": 2929,
											"end": 2966,
											"name": "PUSH",
											"source": 3,
											"value": "1F"
										},
										{
											"begin": 2929,
											"end": 2966,
											"name": "NOT",
											"source": 3
										},
										{
											"begin": 2929,
											"end": 2966,
											"name": "PUSH",
											"source": 3,
											"value": "1F"
										},
										{
											"begin": 2929,
											"end": 2966,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 2929,
											"end": 2966,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2929,
											"end": 2966,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 2929,
											"end": 2966,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 2929,
											"end": 2966,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2929,
											"end": 2966,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2929,
											"end": 2966,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 2929,
											"end": 2966,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 2929,
											"end": 2966,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2929,
											"end": 2966,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 2929,
											"end": 2966,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2929,
											"end": 2966,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2929,
											"end": 2966,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "141"
										},
										{
											"begin": 2929,
											"end": 2966,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 2929,
											"end": 2966,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2929,
											"end": 2966,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "129"
										},
										{
											"begin": 2929,
											"end": 2966,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 2929,
											"end": 2966,
											"name": "tag",
											"source": 3,
											"value": "141"
										},
										{
											"begin": 2929,
											"end": 2966,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2916,
											"end": 2967,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "142"
										},
										{
											"begin": 2916,
											"end": 2967,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2916,
											"end": 2918,
											"name": "PUSH",
											"source": 3,
											"value": "A"
										},
										{
											"begin": 2916,
											"end": 2967,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "131"
										},
										{
											"begin": 2916,
											"end": 2967,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 2916,
											"end": 2967,
											"name": "tag",
											"source": 3,
											"value": "142"
										},
										{
											"begin": 2916,
											"end": 2967,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2905,
											"end": 2913,
											"name": "PUSH",
											"source": 3,
											"value": "80"
										},
										{
											"begin": 2905,
											"end": 2913,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 2905,
											"end": 2913,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2905,
											"end": 2913,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 2905,
											"end": 2967,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "144"
										},
										{
											"begin": 2905,
											"end": 2967,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 2905,
											"end": 2967,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2905,
											"end": 2967,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "134"
										},
										{
											"begin": 2905,
											"end": 2967,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 2905,
											"end": 2967,
											"name": "tag",
											"source": 3,
											"value": "144"
										},
										{
											"begin": 2905,
											"end": 2967,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2876,
											"end": 2902,
											"name": "PUSH",
											"source": 3,
											"value": "14"
										},
										{
											"begin": 2876,
											"end": 2967,
											"name": "SSTORE",
											"source": 3
										},
										{
											"begin": 3000,
											"end": 3008,
											"name": "PUSH",
											"source": 3,
											"value": "A0"
										},
										{
											"begin": 3000,
											"end": 3008,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 3000,
											"end": 3008,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 3000,
											"end": 3008,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 2978,
											"end": 2997,
											"name": "PUSH",
											"source": 3,
											"value": "15"
										},
										{
											"begin": 2978,
											"end": 3008,
											"name": "SSTORE",
											"source": 3
										},
										{
											"begin": 3040,
											"end": 3048,
											"name": "PUSH",
											"source": 3,
											"value": "C0"
										},
										{
											"begin": 3040,
											"end": 3048,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 3040,
											"end": 3048,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 3040,
											"end": 3048,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 3019,
											"end": 3037,
											"name": "PUSH",
											"source": 3,
											"value": "16"
										},
										{
											"begin": 3019,
											"end": 3048,
											"name": "SSTORE",
											"source": 3
										},
										{
											"begin": 3085,
											"end": 3093,
											"name": "PUSH",
											"source": 3,
											"value": "E0"
										},
										{
											"begin": 3085,
											"end": 3093,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 3085,
											"end": 3093,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 3085,
											"end": 3093,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 3059,
											"end": 3074,
											"name": "PUSH",
											"source": 3,
											"value": "B"
										},
										{
											"begin": 3059,
											"end": 3093,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 3059,
											"end": 3093,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3059,
											"end": 3093,
											"name": "SSTORE",
											"source": 3
										},
										{
											"begin": 3130,
											"end": 3138,
											"name": "PUSH",
											"source": 3,
											"value": "100"
										},
										{
											"begin": 3130,
											"end": 3138,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 3130,
											"end": 3138,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 3130,
											"end": 3138,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 3104,
											"end": 3127,
											"name": "PUSH",
											"source": 3,
											"value": "C"
										},
										{
											"begin": 3104,
											"end": 3138,
											"name": "SSTORE",
											"source": 3
										},
										{
											"begin": 3202,
											"end": 3221,
											"name": "PUSH",
											"source": 3,
											"value": "F"
										},
										{
											"begin": 3202,
											"end": 3221,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 3185,
											"end": 3189,
											"name": "PUSH",
											"source": 3,
											"value": "19"
										},
										{
											"begin": 3185,
											"end": 3189,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 3149,
											"end": 3174,
											"name": "PUSH",
											"source": 3,
											"value": "17"
										},
										{
											"begin": 3149,
											"end": 3222,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 3149,
											"end": 3222,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3202,
											"end": 3221,
											"name": "SWAP4",
											"source": 3
										},
										{
											"begin": 3202,
											"end": 3221,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 3202,
											"end": 3221,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 3185,
											"end": 3189,
											"name": "SWAP4",
											"source": 3
										},
										{
											"begin": 3185,
											"end": 3189,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3185,
											"end": 3189,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 3185,
											"end": 3189,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 3177,
											"end": 3222,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 3177,
											"end": 3222,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3177,
											"end": 3222,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 3177,
											"end": 3222,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 3149,
											"end": 3222,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3149,
											"end": 3222,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 3149,
											"end": 3222,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 3149,
											"end": 3222,
											"name": "OR",
											"source": 3
										},
										{
											"begin": 3149,
											"end": 3222,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3149,
											"end": 3222,
											"name": "SSTORE",
											"source": 3
										},
										{
											"begin": 3264,
											"end": 3284,
											"name": "PUSH",
											"source": 3,
											"value": "10"
										},
										{
											"begin": 3264,
											"end": 3284,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 3264,
											"end": 3313,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "149"
										},
										{
											"begin": 3264,
											"end": 3313,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 3264,
											"end": 3288,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "150"
										},
										{
											"begin": 3264,
											"end": 3313,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 3264,
											"end": 3313,
											"name": "tag",
											"source": 3,
											"value": "149"
										},
										{
											"begin": 3264,
											"end": 3313,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3233,
											"end": 3261,
											"name": "PUSH",
											"source": 3,
											"value": "18"
										},
										{
											"begin": 3233,
											"end": 3313,
											"name": "SSTORE",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2336,
											"end": 3321,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										},
										{
											"begin": 5927,
											"end": 6811,
											"name": "tag",
											"source": 3,
											"value": "69"
										},
										{
											"begin": 5927,
											"end": 6811,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1778,
											"end": 1779,
											"name": "PUSH",
											"source": 7,
											"value": "2"
										},
										{
											"begin": 2376,
											"end": 2383,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 2376,
											"end": 2383,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 2376,
											"end": 2395,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 2376,
											"end": 2395,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 2368,
											"end": 2431,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "152"
										},
										{
											"begin": 2368,
											"end": 2431,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 2368,
											"end": 2431,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 2368,
											"end": 2431,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2368,
											"end": 2431,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 2368,
											"end": 2431,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2368,
											"end": 2431,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 2368,
											"end": 2431,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2368,
											"end": 2431,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "115"
										},
										{
											"begin": 2368,
											"end": 2431,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2368,
											"end": 2431,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "154"
										},
										{
											"begin": 2368,
											"end": 2431,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 2368,
											"end": 2431,
											"name": "tag",
											"source": 7,
											"value": "152"
										},
										{
											"begin": 2368,
											"end": 2431,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1778,
											"end": 1779,
											"name": "PUSH",
											"source": 7,
											"value": "2"
										},
										{
											"begin": 2509,
											"end": 2516,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 2509,
											"end": 2527,
											"name": "SSTORE",
											"source": 7
										},
										{
											"begin": 5998,
											"end": 6006,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "156"
										},
										{
											"begin": 5998,
											"end": 6004,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 5998,
											"end": 6006,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 5998,
											"end": 6006,
											"name": "tag",
											"source": 3,
											"value": "156"
										},
										{
											"begin": 5998,
											"end": 6006,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 6010,
											"end": 6011,
											"name": "PUSH",
											"source": 3,
											"value": "1"
										},
										{
											"begin": 5998,
											"end": 6011,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 5990,
											"end": 6028,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "157"
										},
										{
											"begin": 5990,
											"end": 6028,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 5990,
											"end": 6028,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 5990,
											"end": 6028,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5990,
											"end": 6028,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 5990,
											"end": 6028,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 5990,
											"end": 6028,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 5990,
											"end": 6028,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 5990,
											"end": 6028,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "115"
										},
										{
											"begin": 5990,
											"end": 6028,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 5990,
											"end": 6028,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "159"
										},
										{
											"begin": 5990,
											"end": 6028,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 5990,
											"end": 6028,
											"name": "tag",
											"source": 3,
											"value": "157"
										},
										{
											"begin": 5990,
											"end": 6028,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 6079,
											"end": 6111,
											"name": "PUSH",
											"source": 3,
											"value": "6"
										},
										{
											"begin": 6079,
											"end": 6111,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 6048,
											"end": 6076,
											"name": "PUSH",
											"source": 3,
											"value": "5"
										},
										{
											"begin": 6048,
											"end": 6076,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 6114,
											"end": 6115,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 6114,
											"end": 6115,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 6048,
											"end": 6111,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "160"
										},
										{
											"begin": 6048,
											"end": 6111,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 6048,
											"end": 6111,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "161"
										},
										{
											"begin": 6048,
											"end": 6111,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 6048,
											"end": 6111,
											"name": "tag",
											"source": 3,
											"value": "160"
										},
										{
											"begin": 6048,
											"end": 6111,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 6048,
											"end": 6115,
											"name": "GT",
											"source": 3
										},
										{
											"begin": 6040,
											"end": 6174,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "162"
										},
										{
											"begin": 6040,
											"end": 6174,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 6040,
											"end": 6174,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 6040,
											"end": 6174,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 6040,
											"end": 6174,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 6040,
											"end": 6174,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 6040,
											"end": 6174,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 6040,
											"end": 6174,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 6040,
											"end": 6174,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "115"
										},
										{
											"begin": 6040,
											"end": 6174,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 6040,
											"end": 6174,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "164"
										},
										{
											"begin": 6040,
											"end": 6174,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 6040,
											"end": 6174,
											"name": "tag",
											"source": 3,
											"value": "162"
										},
										{
											"begin": 6040,
											"end": 6174,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 6221,
											"end": 6231,
											"name": "CALLER",
											"source": 3
										},
										{
											"begin": 6185,
											"end": 6208,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 6211,
											"end": 6232,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 6211,
											"end": 6232,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 6211,
											"end": 6232,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 6211,
											"end": 6220,
											"name": "PUSH",
											"source": 3,
											"value": "2"
										},
										{
											"begin": 6211,
											"end": 6232,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 6211,
											"end": 6232,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 6211,
											"end": 6232,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 6211,
											"end": 6232,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 6211,
											"end": 6232,
											"name": "KECCAK256",
											"source": 3
										},
										{
											"begin": 6251,
											"end": 6267,
											"name": "PUSH",
											"source": 3,
											"value": "1"
										},
										{
											"begin": 6251,
											"end": 6267,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 6251,
											"end": 6267,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 6251,
											"end": 6267,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 6243,
											"end": 6315,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "165"
										},
										{
											"begin": 6243,
											"end": 6315,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 6243,
											"end": 6315,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 6243,
											"end": 6315,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 6243,
											"end": 6315,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 6243,
											"end": 6315,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 6243,
											"end": 6315,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 6243,
											"end": 6315,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 6243,
											"end": 6315,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "115"
										},
										{
											"begin": 6243,
											"end": 6315,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 6243,
											"end": 6315,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "167"
										},
										{
											"begin": 6243,
											"end": 6315,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 6243,
											"end": 6315,
											"name": "tag",
											"source": 3,
											"value": "165"
										},
										{
											"begin": 6243,
											"end": 6315,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 6409,
											"end": 6428,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 6431,
											"end": 6567,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "168"
										},
										{
											"begin": 6561,
											"end": 6565,
											"name": "PUSH",
											"source": 3,
											"value": "3E8"
										},
										{
											"begin": 6432,
											"end": 6520,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "169"
										},
										{
											"begin": 6503,
											"end": 6508,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 6503,
											"end": 6519,
											"name": "PUSH",
											"source": 3,
											"value": "1"
										},
										{
											"begin": 6503,
											"end": 6519,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 6503,
											"end": 6519,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 6433,
											"end": 6470,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "170"
										},
										{
											"begin": 6451,
											"end": 6460,
											"name": "PUSH",
											"source": 3,
											"value": "D"
										},
										{
											"begin": 6451,
											"end": 6469,
											"name": "PUSH",
											"source": 3,
											"value": "9"
										},
										{
											"begin": 6451,
											"end": 6469,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 6451,
											"end": 6469,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 6441,
											"end": 6445,
											"name": "PUSH",
											"source": 3,
											"value": "3E8"
										},
										{
											"begin": 6433,
											"end": 6450,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "171"
										},
										{
											"begin": 6433,
											"end": 6450,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 6433,
											"end": 6470,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 6433,
											"end": 6470,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 6433,
											"end": 6470,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFF"
										},
										{
											"begin": 6433,
											"end": 6470,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 6433,
											"end": 6470,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 6433,
											"end": 6470,
											"name": "tag",
											"source": 3,
											"value": "170"
										},
										{
											"begin": 6433,
											"end": 6470,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 6432,
											"end": 6502,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 6432,
											"end": 6502,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "150"
										},
										{
											"begin": 6432,
											"end": 6520,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 6432,
											"end": 6520,
											"name": "tag",
											"source": 3,
											"value": "169"
										},
										{
											"begin": 6432,
											"end": 6520,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 6431,
											"end": 6552,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 6431,
											"end": 6552,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "172"
										},
										{
											"begin": 6431,
											"end": 6567,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 6431,
											"end": 6567,
											"name": "tag",
											"source": 3,
											"value": "168"
										},
										{
											"begin": 6431,
											"end": 6567,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 6409,
											"end": 6567,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 6409,
											"end": 6567,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 6614,
											"end": 6625,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 6578,
											"end": 6591,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 6578,
											"end": 6610,
											"name": "PUSH",
											"source": 3,
											"value": "2"
										},
										{
											"begin": 6578,
											"end": 6610,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 6578,
											"end": 6610,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 6578,
											"end": 6625,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 6578,
											"end": 6625,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 6578,
											"end": 6625,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 6578,
											"end": 6625,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "173"
										},
										{
											"begin": 6578,
											"end": 6625,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 6578,
											"end": 6625,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 6578,
											"end": 6625,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "174"
										},
										{
											"begin": 6578,
											"end": 6625,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 6578,
											"end": 6625,
											"name": "tag",
											"source": 3,
											"value": "173"
										},
										{
											"begin": 6578,
											"end": 6625,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 6578,
											"end": 6625,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 6578,
											"end": 6625,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 6578,
											"end": 6625,
											"name": "SSTORE",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6660,
											"end": 6676,
											"name": "PUSH",
											"source": 3,
											"value": "1"
										},
										{
											"begin": 6660,
											"end": 6676,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 6660,
											"end": 6676,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 6660,
											"end": 6676,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 6636,
											"end": 6657,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 6636,
											"end": 6657,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 6660,
											"end": 6690,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "175"
										},
										{
											"begin": 6660,
											"end": 6690,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 6679,
											"end": 6690,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 6679,
											"end": 6690,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 6660,
											"end": 6690,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "161"
										},
										{
											"begin": 6660,
											"end": 6690,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 6660,
											"end": 6690,
											"name": "tag",
											"source": 3,
											"value": "175"
										},
										{
											"begin": 6660,
											"end": 6690,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 6701,
											"end": 6717,
											"name": "PUSH",
											"source": 3,
											"value": "1"
										},
										{
											"begin": 6701,
											"end": 6717,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 6701,
											"end": 6717,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 6701,
											"end": 6731,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 6701,
											"end": 6731,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 6701,
											"end": 6731,
											"name": "SSTORE",
											"source": 3
										},
										{
											"begin": 6749,
											"end": 6768,
											"name": "PUSH",
											"source": 3,
											"value": "E"
										},
										{
											"begin": 6749,
											"end": 6768,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 6743,
											"end": 6803,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 6743,
											"end": 6803,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A9059CBB"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 6743,
											"end": 6803,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 6743,
											"end": 6803,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 6636,
											"end": 6690,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 6636,
											"end": 6690,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 6749,
											"end": 6768,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 6749,
											"end": 6768,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 6743,
											"end": 6778,
											"name": "PUSH",
											"source": 3,
											"value": "A9059CBB"
										},
										{
											"begin": 6743,
											"end": 6778,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 6743,
											"end": 6803,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "176"
										},
										{
											"begin": 6743,
											"end": 6803,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 6779,
											"end": 6789,
											"name": "CALLER",
											"source": 3
										},
										{
											"begin": 6779,
											"end": 6789,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 6720,
											"end": 6731,
											"name": "DUP7",
											"source": 3
										},
										{
											"begin": 6720,
											"end": 6731,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 6743,
											"end": 6803,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 6743,
											"end": 6803,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 6743,
											"end": 6803,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "177"
										},
										{
											"begin": 6743,
											"end": 6803,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 6743,
											"end": 6803,
											"name": "tag",
											"source": 3,
											"value": "176"
										},
										{
											"begin": 6743,
											"end": 6803,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 6743,
											"end": 6803,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 6743,
											"end": 6803,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 6743,
											"end": 6803,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 6743,
											"end": 6803,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 6743,
											"end": 6803,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 6743,
											"end": 6803,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 6743,
											"end": 6803,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 6743,
											"end": 6803,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 6743,
											"end": 6803,
											"name": "DUP8",
											"source": 3
										},
										{
											"begin": 6743,
											"end": 6803,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 6743,
											"end": 6803,
											"name": "EXTCODESIZE",
											"source": 3
										},
										{
											"begin": 6743,
											"end": 6803,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 6743,
											"end": 6803,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 6743,
											"end": 6803,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 6743,
											"end": 6803,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "178"
										},
										{
											"begin": 6743,
											"end": 6803,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 6743,
											"end": 6803,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 6743,
											"end": 6803,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 6743,
											"end": 6803,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 6743,
											"end": 6803,
											"name": "tag",
											"source": 3,
											"value": "178"
										},
										{
											"begin": 6743,
											"end": 6803,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 6743,
											"end": 6803,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 6743,
											"end": 6803,
											"name": "GAS",
											"source": 3
										},
										{
											"begin": 6743,
											"end": 6803,
											"name": "CALL",
											"source": 3
										},
										{
											"begin": 6743,
											"end": 6803,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 6743,
											"end": 6803,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 6743,
											"end": 6803,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 6743,
											"end": 6803,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "180"
										},
										{
											"begin": 6743,
											"end": 6803,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 6743,
											"end": 6803,
											"name": "RETURNDATASIZE",
											"source": 3
										},
										{
											"begin": 6743,
											"end": 6803,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 6743,
											"end": 6803,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 6743,
											"end": 6803,
											"name": "RETURNDATACOPY",
											"source": 3
										},
										{
											"begin": 6743,
											"end": 6803,
											"name": "RETURNDATASIZE",
											"source": 3
										},
										{
											"begin": 6743,
											"end": 6803,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 6743,
											"end": 6803,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 6743,
											"end": 6803,
											"name": "tag",
											"source": 3,
											"value": "180"
										},
										{
											"begin": 6743,
											"end": 6803,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 6743,
											"end": 6803,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 6743,
											"end": 6803,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 6743,
											"end": 6803,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 6743,
											"end": 6803,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 6743,
											"end": 6803,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 6743,
											"end": 6803,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 6743,
											"end": 6803,
											"name": "RETURNDATASIZE",
											"source": 3
										},
										{
											"begin": 6743,
											"end": 6803,
											"name": "PUSH",
											"source": 3,
											"value": "1F"
										},
										{
											"begin": 6743,
											"end": 6803,
											"name": "NOT",
											"source": 3
										},
										{
											"begin": 6743,
											"end": 6803,
											"name": "PUSH",
											"source": 3,
											"value": "1F"
										},
										{
											"begin": 6743,
											"end": 6803,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 6743,
											"end": 6803,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 6743,
											"end": 6803,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 6743,
											"end": 6803,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 6743,
											"end": 6803,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 6743,
											"end": 6803,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 6743,
											"end": 6803,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 6743,
											"end": 6803,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 6743,
											"end": 6803,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 6743,
											"end": 6803,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 6743,
											"end": 6803,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 6743,
											"end": 6803,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 6743,
											"end": 6803,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "181"
										},
										{
											"begin": 6743,
											"end": 6803,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 6743,
											"end": 6803,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 6743,
											"end": 6803,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "182"
										},
										{
											"begin": 6743,
											"end": 6803,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 6743,
											"end": 6803,
											"name": "tag",
											"source": 3,
											"value": "181"
										},
										{
											"begin": 6743,
											"end": 6803,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1734,
											"end": 1735,
											"name": "PUSH",
											"source": 7,
											"value": "1"
										},
										{
											"begin": 2688,
											"end": 2695,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 2688,
											"end": 2710,
											"name": "SSTORE",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5927,
											"end": 6811,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										},
										{
											"begin": 1582,
											"end": 1616,
											"name": "tag",
											"source": 3,
											"value": "72"
										},
										{
											"begin": 1582,
											"end": 1616,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1582,
											"end": 1616,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 1582,
											"end": 1616,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 1582,
											"end": 1616,
											"name": "PUSH",
											"source": 3,
											"value": "5"
										},
										{
											"begin": 1582,
											"end": 1616,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 1582,
											"end": 1616,
											"name": "PUSH",
											"source": 3,
											"value": "6"
										},
										{
											"begin": 1582,
											"end": 1616,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 1582,
											"end": 1616,
											"name": "PUSH",
											"source": 3,
											"value": "7"
										},
										{
											"begin": 1582,
											"end": 1616,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 1582,
											"end": 1616,
											"name": "PUSH",
											"source": 3,
											"value": "8"
										},
										{
											"begin": 1582,
											"end": 1616,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 1582,
											"end": 1616,
											"name": "PUSH",
											"source": 3,
											"value": "9"
										},
										{
											"begin": 1582,
											"end": 1616,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 1582,
											"end": 1616,
											"name": "DUP7",
											"source": 3
										},
										{
											"begin": 1582,
											"end": 1616,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										},
										{
											"begin": 1701,
											"end": 1719,
											"name": "tag",
											"source": 3,
											"value": "77"
										},
										{
											"begin": 1701,
											"end": 1719,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1701,
											"end": 1719,
											"name": "PUSH",
											"source": 3,
											"value": "19"
										},
										{
											"begin": 1701,
											"end": 1719,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1701,
											"end": 1719,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 1701,
											"end": 1719,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1701,
											"end": 1719,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										},
										{
											"begin": 3794,
											"end": 5919,
											"name": "tag",
											"source": 3,
											"value": "83"
										},
										{
											"begin": 3794,
											"end": 5919,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1778,
											"end": 1779,
											"name": "PUSH",
											"source": 7,
											"value": "2"
										},
										{
											"begin": 2376,
											"end": 2383,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 2376,
											"end": 2383,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 2376,
											"end": 2395,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 2376,
											"end": 2395,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 2368,
											"end": 2431,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "184"
										},
										{
											"begin": 2368,
											"end": 2431,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 2368,
											"end": 2431,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 2368,
											"end": 2431,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2368,
											"end": 2431,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 2368,
											"end": 2431,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2368,
											"end": 2431,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 2368,
											"end": 2431,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2368,
											"end": 2431,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "115"
										},
										{
											"begin": 2368,
											"end": 2431,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2368,
											"end": 2431,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "154"
										},
										{
											"begin": 2368,
											"end": 2431,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 2368,
											"end": 2431,
											"name": "tag",
											"source": 7,
											"value": "184"
										},
										{
											"begin": 2368,
											"end": 2431,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1778,
											"end": 1779,
											"name": "PUSH",
											"source": 7,
											"value": "2"
										},
										{
											"begin": 2509,
											"end": 2516,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 2509,
											"end": 2527,
											"name": "SSTORE",
											"source": 7
										},
										{
											"begin": 3877,
											"end": 3885,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "187"
										},
										{
											"begin": 3877,
											"end": 3883,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 3877,
											"end": 3885,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 3877,
											"end": 3885,
											"name": "tag",
											"source": 3,
											"value": "187"
										},
										{
											"begin": 3877,
											"end": 3885,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3889,
											"end": 3890,
											"name": "PUSH",
											"source": 3,
											"value": "1"
										},
										{
											"begin": 3877,
											"end": 3890,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 3869,
											"end": 3905,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "188"
										},
										{
											"begin": 3869,
											"end": 3905,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 3869,
											"end": 3905,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 3869,
											"end": 3905,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3869,
											"end": 3905,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 3869,
											"end": 3905,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 3869,
											"end": 3905,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 3869,
											"end": 3905,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 3869,
											"end": 3905,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "115"
										},
										{
											"begin": 3869,
											"end": 3905,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3869,
											"end": 3905,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "190"
										},
										{
											"begin": 3869,
											"end": 3905,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 3869,
											"end": 3905,
											"name": "tag",
											"source": 3,
											"value": "188"
										},
										{
											"begin": 3869,
											"end": 3905,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3962,
											"end": 3972,
											"name": "CALLER",
											"source": 3
										},
										{
											"begin": 3926,
											"end": 3949,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 3952,
											"end": 3973,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3952,
											"end": 3973,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 3952,
											"end": 3973,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 3952,
											"end": 3961,
											"name": "PUSH",
											"source": 3,
											"value": "2"
										},
										{
											"begin": 3952,
											"end": 3973,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 3952,
											"end": 3973,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 3952,
											"end": 3973,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 3952,
											"end": 3973,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 3952,
											"end": 3973,
											"name": "KECCAK256",
											"source": 3
										},
										{
											"begin": 4158,
											"end": 4184,
											"name": "PUSH",
											"source": 3,
											"value": "13"
										},
										{
											"begin": 4158,
											"end": 4184,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 3952,
											"end": 3973,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3952,
											"end": 3973,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 4004,
											"end": 4011,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 4004,
											"end": 4011,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 4004,
											"end": 4011,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 4004,
											"end": 4011,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 3926,
											"end": 3949,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4117,
											"end": 4121,
											"name": "PUSH",
											"source": 3,
											"value": "3E8"
										},
										{
											"begin": 4117,
											"end": 4121,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4140,
											"end": 4184,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 4140,
											"end": 4184,
											"name": "LT",
											"source": 3
										},
										{
											"begin": 4140,
											"end": 4184,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 4132,
											"end": 4233,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "191"
										},
										{
											"begin": 4132,
											"end": 4233,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 4132,
											"end": 4233,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 4132,
											"end": 4233,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4132,
											"end": 4233,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 4132,
											"end": 4233,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 4132,
											"end": 4233,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 4132,
											"end": 4233,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 4132,
											"end": 4233,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "115"
										},
										{
											"begin": 4132,
											"end": 4233,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4132,
											"end": 4233,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "193"
										},
										{
											"begin": 4132,
											"end": 4233,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 4132,
											"end": 4233,
											"name": "tag",
											"source": 3,
											"value": "191"
										},
										{
											"begin": 4132,
											"end": 4233,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4270,
											"end": 4296,
											"name": "PUSH",
											"source": 3,
											"value": "14"
										},
										{
											"begin": 4270,
											"end": 4296,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 4252,
											"end": 4296,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 4252,
											"end": 4296,
											"name": "GT",
											"source": 3
										},
										{
											"begin": 4252,
											"end": 4296,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 4244,
											"end": 4343,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "194"
										},
										{
											"begin": 4244,
											"end": 4343,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 4244,
											"end": 4343,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 4244,
											"end": 4343,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4244,
											"end": 4343,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 4244,
											"end": 4343,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 4244,
											"end": 4343,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 4244,
											"end": 4343,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 4244,
											"end": 4343,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "115"
										},
										{
											"begin": 4244,
											"end": 4343,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4244,
											"end": 4343,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "196"
										},
										{
											"begin": 4244,
											"end": 4343,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 4244,
											"end": 4343,
											"name": "tag",
											"source": 3,
											"value": "194"
										},
										{
											"begin": 4244,
											"end": 4343,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4358,
											"end": 4377,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "197"
										},
										{
											"begin": 4358,
											"end": 4375,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "86"
										},
										{
											"begin": 4358,
											"end": 4377,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 4358,
											"end": 4377,
											"name": "tag",
											"source": 3,
											"value": "197"
										},
										{
											"begin": 4358,
											"end": 4377,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4354,
											"end": 4620,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "198"
										},
										{
											"begin": 4354,
											"end": 4620,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 4411,
											"end": 4544,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "199"
										},
										{
											"begin": 4530,
											"end": 4543,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 4412,
											"end": 4493,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "169"
										},
										{
											"begin": 4478,
											"end": 4492,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 4413,
											"end": 4441,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "170"
										},
										{
											"begin": 4431,
											"end": 4440,
											"name": "PUSH",
											"source": 3,
											"value": "1A"
										},
										{
											"begin": 4431,
											"end": 4440,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 4413,
											"end": 4426,
											"name": "DUP7",
											"source": 3
										},
										{
											"begin": 4413,
											"end": 4430,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "171"
										},
										{
											"begin": 4413,
											"end": 4430,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4413,
											"end": 4441,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 4413,
											"end": 4441,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4413,
											"end": 4441,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFF"
										},
										{
											"begin": 4413,
											"end": 4441,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 4413,
											"end": 4441,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 4411,
											"end": 4544,
											"name": "tag",
											"source": 3,
											"value": "199"
										},
										{
											"begin": 4411,
											"end": 4544,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4394,
											"end": 4544,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4565,
											"end": 4591,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "202"
										},
										{
											"begin": 4394,
											"end": 4544,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 4565,
											"end": 4574,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 4565,
											"end": 4591,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "161"
										},
										{
											"begin": 4565,
											"end": 4591,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 4565,
											"end": 4591,
											"name": "tag",
											"source": 3,
											"value": "202"
										},
										{
											"begin": 4565,
											"end": 4591,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4559,
											"end": 4591,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 4559,
											"end": 4591,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 4354,
											"end": 4620,
											"name": "tag",
											"source": 3,
											"value": "198"
										},
										{
											"begin": 4354,
											"end": 4620,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4685,
											"end": 4702,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 4685,
											"end": 4702,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 4656,
											"end": 4682,
											"name": "PUSH",
											"source": 3,
											"value": "14"
										},
										{
											"begin": 4656,
											"end": 4682,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 4630,
											"end": 4653,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 4630,
											"end": 4653,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 4656,
											"end": 4702,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "203"
										},
										{
											"begin": 4656,
											"end": 4702,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 4656,
											"end": 4702,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "161"
										},
										{
											"begin": 4656,
											"end": 4702,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 4656,
											"end": 4702,
											"name": "tag",
											"source": 3,
											"value": "203"
										},
										{
											"begin": 4656,
											"end": 4702,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4770,
											"end": 4783,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 4770,
											"end": 4802,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 4739,
											"end": 4767,
											"name": "PUSH",
											"source": 3,
											"value": "18"
										},
										{
											"begin": 4739,
											"end": 4767,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 4630,
											"end": 4702,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 4630,
											"end": 4702,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4713,
											"end": 4736,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 4713,
											"end": 4736,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 4739,
											"end": 4802,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "204"
										},
										{
											"begin": 4739,
											"end": 4802,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 4770,
											"end": 4802,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4739,
											"end": 4802,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "161"
										},
										{
											"begin": 4739,
											"end": 4802,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 4739,
											"end": 4802,
											"name": "tag",
											"source": 3,
											"value": "204"
										},
										{
											"begin": 4739,
											"end": 4802,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4713,
											"end": 4802,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4713,
											"end": 4802,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 4813,
											"end": 4830,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 4851,
											"end": 4866,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 4833,
											"end": 4848,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 4833,
											"end": 4866,
											"name": "GT",
											"source": 3
										},
										{
											"begin": 4833,
											"end": 4902,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "205"
										},
										{
											"begin": 4833,
											"end": 4902,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 4887,
											"end": 4902,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 4833,
											"end": 4902,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "206"
										},
										{
											"begin": 4833,
											"end": 4902,
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 4833,
											"end": 4902,
											"name": "tag",
											"source": 3,
											"value": "205"
										},
										{
											"begin": 4833,
											"end": 4902,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4869,
											"end": 4884,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 4833,
											"end": 4902,
											"name": "tag",
											"source": 3,
											"value": "206"
										},
										{
											"begin": 4833,
											"end": 4902,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4813,
											"end": 4902,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4813,
											"end": 4902,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 4938,
											"end": 4947,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 4921,
											"end": 4935,
											"name": "DUP7",
											"source": 3
										},
										{
											"begin": 4921,
											"end": 4947,
											"name": "LT",
											"source": 3
										},
										{
											"begin": 4913,
											"end": 4967,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "207"
										},
										{
											"begin": 4913,
											"end": 4967,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 4913,
											"end": 4967,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 4913,
											"end": 4967,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4913,
											"end": 4967,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 4913,
											"end": 4967,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 4913,
											"end": 4967,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 4913,
											"end": 4967,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 4913,
											"end": 4967,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "115"
										},
										{
											"begin": 4913,
											"end": 4967,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4913,
											"end": 4967,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "209"
										},
										{
											"begin": 4913,
											"end": 4967,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 4913,
											"end": 4967,
											"name": "tag",
											"source": 3,
											"value": "207"
										},
										{
											"begin": 4913,
											"end": 4967,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4978,
											"end": 4995,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 4999,
											"end": 5157,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "210"
										},
										{
											"begin": 5124,
											"end": 5133,
											"name": "PUSH",
											"source": 3,
											"value": "D"
										},
										{
											"begin": 5124,
											"end": 5143,
											"name": "PUSH",
											"source": 3,
											"value": "2"
										},
										{
											"begin": 5124,
											"end": 5143,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 5124,
											"end": 5143,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 5124,
											"end": 5143,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 5124,
											"end": 5143,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 5124,
											"end": 5143,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 5124,
											"end": 5143,
											"name": "PUSH",
											"source": 3,
											"value": "100"
										},
										{
											"begin": 5124,
											"end": 5143,
											"name": "EXP",
											"source": 3
										},
										{
											"begin": 5124,
											"end": 5143,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 5124,
											"end": 5143,
											"name": "DIV",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5124,
											"end": 5143,
											"name": "AND",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5118,
											"end": 5153,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 5118,
											"end": 5153,
											"name": "PUSH",
											"source": 3,
											"value": "313CE567"
										},
										{
											"begin": 5118,
											"end": 5155,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 5118,
											"end": 5155,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 5118,
											"end": 5155,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 5118,
											"end": 5155,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFF"
										},
										{
											"begin": 5118,
											"end": 5155,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 5118,
											"end": 5155,
											"name": "PUSH",
											"source": 3,
											"value": "E0"
										},
										{
											"begin": 5118,
											"end": 5155,
											"name": "SHL",
											"source": 3
										},
										{
											"begin": 5118,
											"end": 5155,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 5118,
											"end": 5155,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 5118,
											"end": 5155,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 5118,
											"end": 5155,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 5118,
											"end": 5155,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 5118,
											"end": 5155,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 5118,
											"end": 5155,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 5118,
											"end": 5155,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 5118,
											"end": 5155,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 5118,
											"end": 5155,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 5118,
											"end": 5155,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 5118,
											"end": 5155,
											"name": "DUP7",
											"source": 3
										},
										{
											"begin": 5118,
											"end": 5155,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 5118,
											"end": 5155,
											"name": "EXTCODESIZE",
											"source": 3
										},
										{
											"begin": 5118,
											"end": 5155,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 5118,
											"end": 5155,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 5118,
											"end": 5155,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 5118,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "211"
										},
										{
											"begin": 5118,
											"end": 5155,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 5118,
											"end": 5155,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 5118,
											"end": 5155,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 5118,
											"end": 5155,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 5118,
											"end": 5155,
											"name": "tag",
											"source": 3,
											"value": "211"
										},
										{
											"begin": 5118,
											"end": 5155,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 5118,
											"end": 5155,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 5118,
											"end": 5155,
											"name": "GAS",
											"source": 3
										},
										{
											"begin": 5118,
											"end": 5155,
											"name": "STATICCALL",
											"source": 3
										},
										{
											"begin": 5118,
											"end": 5155,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 5118,
											"end": 5155,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 5118,
											"end": 5155,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 5118,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "213"
										},
										{
											"begin": 5118,
											"end": 5155,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 5118,
											"end": 5155,
											"name": "RETURNDATASIZE",
											"source": 3
										},
										{
											"begin": 5118,
											"end": 5155,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 5118,
											"end": 5155,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 5118,
											"end": 5155,
											"name": "RETURNDATACOPY",
											"source": 3
										},
										{
											"begin": 5118,
											"end": 5155,
											"name": "RETURNDATASIZE",
											"source": 3
										},
										{
											"begin": 5118,
											"end": 5155,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 5118,
											"end": 5155,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 5118,
											"end": 5155,
											"name": "tag",
											"source": 3,
											"value": "213"
										},
										{
											"begin": 5118,
											"end": 5155,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 5118,
											"end": 5155,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 5118,
											"end": 5155,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 5118,
											"end": 5155,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 5118,
											"end": 5155,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 5118,
											"end": 5155,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 5118,
											"end": 5155,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 5118,
											"end": 5155,
											"name": "RETURNDATASIZE",
											"source": 3
										},
										{
											"begin": 5118,
											"end": 5155,
											"name": "PUSH",
											"source": 3,
											"value": "1F"
										},
										{
											"begin": 5118,
											"end": 5155,
											"name": "NOT",
											"source": 3
										},
										{
											"begin": 5118,
											"end": 5155,
											"name": "PUSH",
											"source": 3,
											"value": "1F"
										},
										{
											"begin": 5118,
											"end": 5155,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 5118,
											"end": 5155,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 5118,
											"end": 5155,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 5118,
											"end": 5155,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 5118,
											"end": 5155,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 5118,
											"end": 5155,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 5118,
											"end": 5155,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 5118,
											"end": 5155,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 5118,
											"end": 5155,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 5118,
											"end": 5155,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 5118,
											"end": 5155,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 5118,
											"end": 5155,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 5118,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "214"
										},
										{
											"begin": 5118,
											"end": 5155,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 5118,
											"end": 5155,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 5118,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "129"
										},
										{
											"begin": 5118,
											"end": 5155,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 5118,
											"end": 5155,
											"name": "tag",
											"source": 3,
											"value": "214"
										},
										{
											"begin": 5118,
											"end": 5155,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 5104,
											"end": 5156,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "215"
										},
										{
											"begin": 5104,
											"end": 5156,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 5104,
											"end": 5106,
											"name": "PUSH",
											"source": 3,
											"value": "A"
										},
										{
											"begin": 5104,
											"end": 5156,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "131"
										},
										{
											"begin": 5104,
											"end": 5156,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 5104,
											"end": 5156,
											"name": "tag",
											"source": 3,
											"value": "215"
										},
										{
											"begin": 5104,
											"end": 5156,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 5048,
											"end": 5068,
											"name": "PUSH",
											"source": 3,
											"value": "10"
										},
										{
											"begin": 5048,
											"end": 5068,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 4999,
											"end": 5069,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "169"
										},
										{
											"begin": 4999,
											"end": 5069,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4999,
											"end": 5013,
											"name": "DUP11",
											"source": 3
										},
										{
											"begin": 4999,
											"end": 5013,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4999,
											"end": 5047,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "150"
										},
										{
											"begin": 4999,
											"end": 5069,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 4999,
											"end": 5157,
											"name": "tag",
											"source": 3,
											"value": "210"
										},
										{
											"begin": 4999,
											"end": 5157,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4978,
											"end": 5158,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4978,
											"end": 5158,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 5207,
											"end": 5216,
											"name": "DUP8",
											"source": 3
										},
										{
											"begin": 5186,
											"end": 5191,
											"name": "DUP10",
											"source": 3
										},
										{
											"begin": 5186,
											"end": 5203,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 5186,
											"end": 5203,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 5186,
											"end": 5203,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 5186,
											"end": 5216,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 5186,
											"end": 5216,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 5186,
											"end": 5216,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 5186,
											"end": 5216,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "217"
										},
										{
											"begin": 5186,
											"end": 5216,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 5186,
											"end": 5216,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 5186,
											"end": 5216,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "174"
										},
										{
											"begin": 5186,
											"end": 5216,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 5186,
											"end": 5216,
											"name": "tag",
											"source": 3,
											"value": "217"
										},
										{
											"begin": 5186,
											"end": 5216,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 5186,
											"end": 5216,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 5186,
											"end": 5216,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 5186,
											"end": 5216,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 5186,
											"end": 5216,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 5186,
											"end": 5216,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 5186,
											"end": 5216,
											"name": "SSTORE",
											"source": 3
										},
										{
											"begin": 5186,
											"end": 5216,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 5247,
											"end": 5256,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 5227,
											"end": 5232,
											"name": "DUP10",
											"source": 3
										},
										{
											"begin": 5227,
											"end": 5243,
											"name": "PUSH",
											"source": 3,
											"value": "1"
										},
										{
											"begin": 5227,
											"end": 5243,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 5227,
											"end": 5243,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 5227,
											"end": 5256,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 5227,
											"end": 5256,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 5227,
											"end": 5256,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 5227,
											"end": 5256,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "218"
										},
										{
											"begin": 5227,
											"end": 5256,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 5227,
											"end": 5256,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 5227,
											"end": 5256,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "174"
										},
										{
											"begin": 5227,
											"end": 5256,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 5227,
											"end": 5256,
											"name": "tag",
											"source": 3,
											"value": "218"
										},
										{
											"begin": 5227,
											"end": 5256,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 5227,
											"end": 5256,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 5227,
											"end": 5256,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 5227,
											"end": 5256,
											"name": "SSTORE",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5267,
											"end": 5280,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 5267,
											"end": 5317,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 5267,
											"end": 5317,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 5303,
											"end": 5317,
											"name": "DUP9",
											"source": 3
										},
										{
											"begin": 5303,
											"end": 5317,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 5267,
											"end": 5280,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 5267,
											"end": 5299,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 5267,
											"end": 5299,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 5267,
											"end": 5317,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "219"
										},
										{
											"begin": 5267,
											"end": 5317,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 5303,
											"end": 5317,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 5303,
											"end": 5317,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 5267,
											"end": 5317,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "174"
										},
										{
											"begin": 5267,
											"end": 5317,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 5267,
											"end": 5317,
											"name": "tag",
											"source": 3,
											"value": "219"
										},
										{
											"begin": 5267,
											"end": 5317,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 5267,
											"end": 5317,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 5267,
											"end": 5317,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 5267,
											"end": 5317,
											"name": "SSTORE",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5328,
											"end": 5356,
											"name": "PUSH",
											"source": 3,
											"value": "5"
										},
										{
											"begin": 5328,
											"end": 5369,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 5328,
											"end": 5369,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 5360,
											"end": 5369,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 5360,
											"end": 5369,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 5328,
											"end": 5356,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 5328,
											"end": 5356,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 5328,
											"end": 5356,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 5328,
											"end": 5369,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "220"
										},
										{
											"begin": 5328,
											"end": 5369,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 5360,
											"end": 5369,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 5360,
											"end": 5369,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 5328,
											"end": 5369,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "174"
										},
										{
											"begin": 5328,
											"end": 5369,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 5328,
											"end": 5369,
											"name": "tag",
											"source": 3,
											"value": "220"
										},
										{
											"begin": 5328,
											"end": 5369,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 5328,
											"end": 5369,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 5328,
											"end": 5369,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 5328,
											"end": 5369,
											"name": "SSTORE",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5380,
											"end": 5405,
											"name": "PUSH",
											"source": 3,
											"value": "8"
										},
										{
											"begin": 5380,
											"end": 5407,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 5380,
											"end": 5407,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 5380,
											"end": 5407,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 5380,
											"end": 5405,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 5380,
											"end": 5407,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "221"
										},
										{
											"begin": 5380,
											"end": 5407,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 5380,
											"end": 5407,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "222"
										},
										{
											"begin": 5380,
											"end": 5407,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 5380,
											"end": 5407,
											"name": "tag",
											"source": 3,
											"value": "221"
										},
										{
											"begin": 5380,
											"end": 5407,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 5380,
											"end": 5407,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 5380,
											"end": 5407,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 5380,
											"end": 5407,
											"name": "SSTORE",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5426,
											"end": 5436,
											"name": "CALLER",
											"source": 3
										},
										{
											"begin": 5418,
											"end": 5437,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 5418,
											"end": 5437,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 5418,
											"end": 5437,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 5418,
											"end": 5437,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 5418,
											"end": 5425,
											"name": "PUSH",
											"source": 3,
											"value": "3"
										},
										{
											"begin": 5418,
											"end": 5437,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 5418,
											"end": 5437,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 5418,
											"end": 5437,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 5418,
											"end": 5437,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 5418,
											"end": 5437,
											"name": "KECCAK256",
											"source": 3
										},
										{
											"begin": 5418,
											"end": 5444,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 5418,
											"end": 5444,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 5441,
											"end": 5444,
											"name": "DUP9",
											"source": 3
										},
										{
											"begin": 5441,
											"end": 5444,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 5418,
											"end": 5437,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 5418,
											"end": 5444,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "223"
										},
										{
											"begin": 5418,
											"end": 5444,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 5441,
											"end": 5444,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 5441,
											"end": 5444,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 5418,
											"end": 5444,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "174"
										},
										{
											"begin": 5418,
											"end": 5444,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 5418,
											"end": 5444,
											"name": "tag",
											"source": 3,
											"value": "223"
										},
										{
											"begin": 5418,
											"end": 5444,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 5418,
											"end": 5444,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 5418,
											"end": 5444,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 5418,
											"end": 5444,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 5418,
											"end": 5444,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 5418,
											"end": 5444,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 5418,
											"end": 5444,
											"name": "SSTORE",
											"source": 3
										},
										{
											"begin": 5418,
											"end": 5444,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 5467,
											"end": 5470,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 5455,
											"end": 5463,
											"name": "PUSH",
											"source": 3,
											"value": "1D"
										},
										{
											"begin": 5455,
											"end": 5463,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 5455,
											"end": 5470,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 5455,
											"end": 5470,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 5455,
											"end": 5470,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 5455,
											"end": 5470,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "224"
										},
										{
											"begin": 5455,
											"end": 5470,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 5455,
											"end": 5470,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 5455,
											"end": 5470,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "174"
										},
										{
											"begin": 5455,
											"end": 5470,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 5455,
											"end": 5470,
											"name": "tag",
											"source": 3,
											"value": "224"
										},
										{
											"begin": 5455,
											"end": 5470,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 5455,
											"end": 5470,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 5455,
											"end": 5470,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 5455,
											"end": 5470,
											"name": "SSTORE",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5486,
											"end": 5511,
											"name": "PUSH",
											"source": 3,
											"value": "17"
										},
										{
											"begin": 5486,
											"end": 5511,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 5486,
											"end": 5511,
											"name": "PUSH",
											"source": 3,
											"value": "FF"
										},
										{
											"begin": 5486,
											"end": 5511,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 5486,
											"end": 5547,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 5486,
											"end": 5547,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 5486,
											"end": 5547,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "225"
										},
										{
											"begin": 5486,
											"end": 5547,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5538,
											"end": 5547,
											"name": "CALLVALUE",
											"source": 3
										},
										{
											"begin": 5515,
											"end": 5535,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "226"
										},
										{
											"begin": 5532,
											"end": 5535,
											"name": "DUP8",
											"source": 3
										},
										{
											"begin": 5515,
											"end": 5529,
											"name": "DUP10",
											"source": 3
										},
										{
											"begin": 5515,
											"end": 5535,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "174"
										},
										{
											"begin": 5515,
											"end": 5535,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 5515,
											"end": 5535,
											"name": "tag",
											"source": 3,
											"value": "226"
										},
										{
											"begin": 5515,
											"end": 5535,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 5515,
											"end": 5547,
											"name": "LT",
											"source": 3
										},
										{
											"begin": 5486,
											"end": 5547,
											"name": "tag",
											"source": 3,
											"value": "225"
										},
										{
											"begin": 5486,
											"end": 5547,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 5483,
											"end": 5638,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 5483,
											"end": 5638,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "227"
										},
										{
											"begin": 5483,
											"end": 5638,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 5572,
											"end": 5582,
											"name": "CALLER",
											"source": 3
										},
										{
											"begin": 5564,
											"end": 5626,
											"name": "PUSH",
											"source": 3,
											"value": "8FC"
										},
										{
											"begin": 5622,
											"end": 5625,
											"name": "DUP8",
											"source": 3
										},
										{
											"begin": 5593,
											"end": 5619,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "228"
										},
										{
											"begin": 5605,
											"end": 5619,
											"name": "DUP11",
											"source": 3
										},
										{
											"begin": 5593,
											"end": 5602,
											"name": "CALLVALUE",
											"source": 3
										},
										{
											"begin": 5593,
											"end": 5619,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "161"
										},
										{
											"begin": 5593,
											"end": 5619,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 5593,
											"end": 5619,
											"name": "tag",
											"source": 3,
											"value": "228"
										},
										{
											"begin": 5593,
											"end": 5619,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 5593,
											"end": 5625,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "229"
										},
										{
											"begin": 5593,
											"end": 5625,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 5593,
											"end": 5625,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 5593,
											"end": 5625,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "161"
										},
										{
											"begin": 5593,
											"end": 5625,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 5593,
											"end": 5625,
											"name": "tag",
											"source": 3,
											"value": "229"
										},
										{
											"begin": 5593,
											"end": 5625,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 5564,
											"end": 5626,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 5564,
											"end": 5626,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 5564,
											"end": 5626,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 5564,
											"end": 5626,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 5564,
											"end": 5626,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 5564,
											"end": 5626,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 5564,
											"end": 5626,
											"name": "MUL",
											"source": 3
										},
										{
											"begin": 5564,
											"end": 5626,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 5564,
											"end": 5626,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 5564,
											"end": 5626,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 5564,
											"end": 5626,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 5564,
											"end": 5626,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 5564,
											"end": 5626,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 5564,
											"end": 5626,
											"name": "DUP9",
											"source": 3
										},
										{
											"begin": 5564,
											"end": 5626,
											"name": "DUP9",
											"source": 3
										},
										{
											"begin": 5564,
											"end": 5626,
											"name": "CALL",
											"source": 3
										},
										{
											"begin": 5564,
											"end": 5626,
											"name": "SWAP4",
											"source": 3
										},
										{
											"begin": 5564,
											"end": 5626,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 5564,
											"end": 5626,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 5564,
											"end": 5626,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 5564,
											"end": 5626,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 5564,
											"end": 5626,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 5564,
											"end": 5626,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 5564,
											"end": 5626,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 5564,
											"end": 5626,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "231"
										},
										{
											"begin": 5564,
											"end": 5626,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 5564,
											"end": 5626,
											"name": "RETURNDATASIZE",
											"source": 3
										},
										{
											"begin": 5564,
											"end": 5626,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 5564,
											"end": 5626,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 5564,
											"end": 5626,
											"name": "RETURNDATACOPY",
											"source": 3
										},
										{
											"begin": 5564,
											"end": 5626,
											"name": "RETURNDATASIZE",
											"source": 3
										},
										{
											"begin": 5564,
											"end": 5626,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 5564,
											"end": 5626,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 5564,
											"end": 5626,
											"name": "tag",
											"source": 3,
											"value": "231"
										},
										{
											"begin": 5564,
											"end": 5626,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 5564,
											"end": 5626,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 5483,
											"end": 5638,
											"name": "tag",
											"source": 3,
											"value": "227"
										},
										{
											"begin": 5483,
											"end": 5638,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 5653,
											"end": 5678,
											"name": "PUSH",
											"source": 3,
											"value": "17"
										},
										{
											"begin": 5653,
											"end": 5678,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 5653,
											"end": 5678,
											"name": "PUSH",
											"source": 3,
											"value": "FF"
										},
										{
											"begin": 5653,
											"end": 5678,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 5649,
											"end": 5900,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "233"
										},
										{
											"begin": 5649,
											"end": 5900,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 5753,
											"end": 5772,
											"name": "PUSH",
											"source": 3,
											"value": "F"
										},
										{
											"begin": 5753,
											"end": 5772,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 5695,
											"end": 5888,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "233"
										},
										{
											"begin": 5695,
											"end": 5888,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5753,
											"end": 5772,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 5792,
											"end": 5802,
											"name": "CALLER",
											"source": 3
										},
										{
											"begin": 5829,
											"end": 5833,
											"name": "ADDRESS",
											"source": 3
										},
										{
											"begin": 5853,
											"end": 5873,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "234"
										},
										{
											"begin": 5870,
											"end": 5873,
											"name": "DUP11",
											"source": 3
										},
										{
											"begin": 5853,
											"end": 5867,
											"name": "DUP13",
											"source": 3
										},
										{
											"begin": 5853,
											"end": 5873,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "174"
										},
										{
											"begin": 5853,
											"end": 5873,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 5853,
											"end": 5873,
											"name": "tag",
											"source": 3,
											"value": "234"
										},
										{
											"begin": 5853,
											"end": 5873,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 5695,
											"end": 5726,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "235"
										},
										{
											"begin": 5695,
											"end": 5888,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 5695,
											"end": 5888,
											"name": "tag",
											"source": 3,
											"value": "233"
										},
										{
											"begin": 5695,
											"end": 5888,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1734,
											"end": 1735,
											"name": "PUSH",
											"source": 7,
											"value": "1"
										},
										{
											"begin": 2688,
											"end": 2695,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 2688,
											"end": 2710,
											"name": "SSTORE",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3794,
											"end": 5919,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										},
										{
											"begin": 3676,
											"end": 3786,
											"name": "tag",
											"source": 3,
											"value": "86"
										},
										{
											"begin": 3676,
											"end": 3786,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3725,
											"end": 3729,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 3749,
											"end": 3778,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "237"
										},
										{
											"begin": 3765,
											"end": 3777,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "238"
										},
										{
											"begin": 3765,
											"end": 3775,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "112"
										},
										{
											"begin": 3765,
											"end": 3777,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 3765,
											"end": 3777,
											"name": "tag",
											"source": 3,
											"value": "238"
										},
										{
											"begin": 3765,
											"end": 3777,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3749,
											"end": 3755,
											"name": "PUSH",
											"source": 3,
											"value": "1B"
										},
										{
											"begin": 3749,
											"end": 3755,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3749,
											"end": 3764,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "239"
										},
										{
											"begin": 3749,
											"end": 3778,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 3749,
											"end": 3778,
											"name": "tag",
											"source": 3,
											"value": "237"
										},
										{
											"begin": 3749,
											"end": 3778,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3742,
											"end": 3778,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3742,
											"end": 3778,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 3676,
											"end": 3786,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3676,
											"end": 3786,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										},
										{
											"begin": 1480,
											"end": 1526,
											"name": "tag",
											"source": 3,
											"value": "92"
										},
										{
											"begin": 1480,
											"end": 1526,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1480,
											"end": 1526,
											"name": "PUSH",
											"source": 3,
											"value": "2"
										},
										{
											"begin": 1480,
											"end": 1526,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 1480,
											"end": 1526,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1480,
											"end": 1526,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1480,
											"end": 1526,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 1480,
											"end": 1526,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 1480,
											"end": 1526,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 1480,
											"end": 1526,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 1480,
											"end": 1526,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 1480,
											"end": 1526,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 1480,
											"end": 1526,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1480,
											"end": 1526,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 1480,
											"end": 1526,
											"name": "KECCAK256",
											"source": 3
										},
										{
											"begin": 1480,
											"end": 1526,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1480,
											"end": 1526,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 1480,
											"end": 1526,
											"name": "PUSH",
											"source": 3,
											"value": "1"
										},
										{
											"begin": 1480,
											"end": 1526,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 1480,
											"end": 1526,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 1480,
											"end": 1526,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 1480,
											"end": 1526,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 1480,
											"end": 1526,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 1480,
											"end": 1526,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 1480,
											"end": 1526,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 1480,
											"end": 1526,
											"name": "PUSH",
											"source": 3,
											"value": "3"
										},
										{
											"begin": 1480,
											"end": 1526,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 1480,
											"end": 1526,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 1480,
											"end": 1526,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 1480,
											"end": 1526,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 1480,
											"end": 1526,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1480,
											"end": 1526,
											"name": "SWAP4",
											"source": 3
										},
										{
											"begin": 1480,
											"end": 1526,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 1480,
											"end": 1526,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 1480,
											"end": 1526,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 1480,
											"end": 1526,
											"name": "SWAP4",
											"source": 3
										},
										{
											"begin": 1480,
											"end": 1526,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 1480,
											"end": 1526,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1480,
											"end": 1526,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 1480,
											"end": 1526,
											"name": "PUSH",
											"source": 3,
											"value": "FF"
										},
										{
											"begin": 1480,
											"end": 1526,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1480,
											"end": 1526,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 1480,
											"end": 1526,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 1480,
											"end": 1526,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 1480,
											"end": 1526,
											"name": "PUSH",
											"source": 3,
											"value": "100"
										},
										{
											"begin": 1480,
											"end": 1526,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1480,
											"end": 1526,
											"name": "DIV",
											"source": 3
										},
										{
											"begin": 1480,
											"end": 1526,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 1480,
											"end": 1526,
											"name": "DUP7",
											"source": 3
										},
										{
											"begin": 1480,
											"end": 1526,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										},
										{
											"begin": 1972,
											"end": 2173,
											"name": "tag",
											"source": 6,
											"value": "98"
										},
										{
											"begin": 1972,
											"end": 2173,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1294,
											"end": 1306,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "241"
										},
										{
											"begin": 1294,
											"end": 1304,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "112"
										},
										{
											"begin": 1294,
											"end": 1306,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 1294,
											"end": 1306,
											"name": "tag",
											"source": 6,
											"value": "241"
										},
										{
											"begin": 1294,
											"end": 1306,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1283,
											"end": 1306,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 1283,
											"end": 1290,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "242"
										},
										{
											"begin": 1283,
											"end": 1288,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "59"
										},
										{
											"begin": 1283,
											"end": 1290,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 1283,
											"end": 1290,
											"name": "tag",
											"source": 6,
											"value": "242"
										},
										{
											"begin": 1283,
											"end": 1290,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1283,
											"end": 1306,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 1283,
											"end": 1306,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 1275,
											"end": 1343,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "243"
										},
										{
											"begin": 1275,
											"end": 1343,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 1275,
											"end": 1343,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 1275,
											"end": 1343,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1275,
											"end": 1343,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1275,
											"end": 1343,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 1275,
											"end": 1343,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 1275,
											"end": 1343,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 1275,
											"end": 1343,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "115"
										},
										{
											"begin": 1275,
											"end": 1343,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1275,
											"end": 1343,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "116"
										},
										{
											"begin": 1275,
											"end": 1343,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 1275,
											"end": 1343,
											"name": "tag",
											"source": 6,
											"value": "243"
										},
										{
											"begin": 1275,
											"end": 1343,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2061,
											"end": 2083,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 2061,
											"end": 2083,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 2053,
											"end": 2126,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "246"
										},
										{
											"begin": 2053,
											"end": 2126,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 2053,
											"end": 2126,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 2053,
											"end": 2126,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2053,
											"end": 2126,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 2053,
											"end": 2126,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 2053,
											"end": 2126,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 2053,
											"end": 2126,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 2053,
											"end": 2126,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "115"
										},
										{
											"begin": 2053,
											"end": 2126,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2053,
											"end": 2126,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "248"
										},
										{
											"begin": 2053,
											"end": 2126,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 2053,
											"end": 2126,
											"name": "tag",
											"source": 6,
											"value": "246"
										},
										{
											"begin": 2053,
											"end": 2126,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2137,
											"end": 2165,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "122"
										},
										{
											"begin": 2156,
											"end": 2164,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 2137,
											"end": 2155,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "119"
										},
										{
											"begin": 2137,
											"end": 2165,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 6819,
											"end": 6930,
											"name": "tag",
											"source": 3,
											"value": "102"
										},
										{
											"begin": 6819,
											"end": 6930,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 6906,
											"end": 6922,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 6906,
											"end": 6922,
											"name": "BALANCE",
											"source": 3
										},
										{
											"begin": 6906,
											"end": 6922,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 6819,
											"end": 6930,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										},
										{
											"begin": 8259,
											"end": 8411,
											"name": "tag",
											"source": 5,
											"value": "104"
										},
										{
											"begin": 8259,
											"end": 8411,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 8329,
											"end": 8333,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 8353,
											"end": 8403,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "252"
										},
										{
											"begin": 8358,
											"end": 8361,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8378,
											"end": 8401,
											"name": "DUP5",
											"source": 5
										},
										{
											"begin": 8378,
											"end": 8401,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 8353,
											"end": 8357,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "253"
										},
										{
											"begin": 8353,
											"end": 8403,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 8353,
											"end": 8403,
											"name": "tag",
											"source": 5,
											"value": "252"
										},
										{
											"begin": 8353,
											"end": 8403,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 8346,
											"end": 8403,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 8346,
											"end": 8403,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 8259,
											"end": 8411,
											"name": "tag",
											"source": 5,
											"value": "251"
										},
										{
											"begin": 8259,
											"end": 8411,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 8259,
											"end": 8411,
											"name": "SWAP3",
											"source": 5
										},
										{
											"begin": 8259,
											"end": 8411,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 8259,
											"end": 8411,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 8259,
											"end": 8411,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 8259,
											"end": 8411,
											"name": "JUMP",
											"source": 5,
											"value": "[out]"
										},
										{
											"begin": 656,
											"end": 754,
											"name": "tag",
											"source": 4,
											"value": "112"
										},
										{
											"begin": 656,
											"end": 754,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 736,
											"end": 746,
											"name": "CALLER",
											"source": 4
										},
										{
											"begin": 656,
											"end": 754,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 656,
											"end": 754,
											"name": "JUMP",
											"source": 4,
											"value": "[out]"
										},
										{
											"begin": 2333,
											"end": 2524,
											"name": "tag",
											"source": 6,
											"value": "119"
										},
										{
											"begin": 2333,
											"end": 2524,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2426,
											"end": 2432,
											"name": "PUSH",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 2426,
											"end": 2432,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 2426,
											"end": 2432,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2443,
											"end": 2460,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 2443,
											"end": 2460,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 2443,
											"end": 2460,
											"name": "AND",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 2443,
											"end": 2460,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 2443,
											"end": 2460,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 2443,
											"end": 2460,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 2443,
											"end": 2460,
											"name": "OR",
											"source": 6
										},
										{
											"begin": 2443,
											"end": 2460,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2443,
											"end": 2460,
											"name": "SWAP4",
											"source": 6
										},
										{
											"begin": 2443,
											"end": 2460,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 2476,
											"end": 2516,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 2476,
											"end": 2516,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 2426,
											"end": 2432,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 2426,
											"end": 2432,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 2426,
											"end": 2432,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 2443,
											"end": 2460,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2426,
											"end": 2432,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 2426,
											"end": 2432,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2476,
											"end": 2516,
											"name": "PUSH",
											"source": 6,
											"value": "8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
										},
										{
											"begin": 2476,
											"end": 2516,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2407,
											"end": 2423,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 2407,
											"end": 2423,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2476,
											"end": 2516,
											"name": "LOG3",
											"source": 6
										},
										{
											"begin": 2333,
											"end": 2524,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 2333,
											"end": 2524,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 2333,
											"end": 2524,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 3585,
											"end": 3683,
											"name": "tag",
											"source": 8,
											"value": "150"
										},
										{
											"begin": 3585,
											"end": 3683,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3643,
											"end": 3650,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 3670,
											"end": 3675,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "252"
										},
										{
											"begin": 3674,
											"end": 3675,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 3670,
											"end": 3671,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 3670,
											"end": 3675,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "134"
										},
										{
											"begin": 3670,
											"end": 3675,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 3228,
											"end": 3326,
											"name": "tag",
											"source": 8,
											"value": "171"
										},
										{
											"begin": 3228,
											"end": 3326,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3286,
											"end": 3293,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 3313,
											"end": 3318,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "252"
										},
										{
											"begin": 3317,
											"end": 3318,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 3313,
											"end": 3314,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 3313,
											"end": 3318,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "161"
										},
										{
											"begin": 3313,
											"end": 3318,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 3984,
											"end": 4082,
											"name": "tag",
											"source": 8,
											"value": "172"
										},
										{
											"begin": 3984,
											"end": 4082,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 4042,
											"end": 4049,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 4069,
											"end": 4074,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "252"
										},
										{
											"begin": 4073,
											"end": 4074,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 4069,
											"end": 4070,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 4069,
											"end": 4074,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "262"
										},
										{
											"begin": 4069,
											"end": 4074,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 1073,
											"end": 1503,
											"name": "tag",
											"source": 9,
											"value": "235"
										},
										{
											"begin": 1073,
											"end": 1503,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1219,
											"end": 1231,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 1233,
											"end": 1250,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 1254,
											"end": 1259,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1254,
											"end": 1264,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 1302,
											"end": 1312,
											"name": "PUSH",
											"source": 9,
											"value": "23B872DD"
										},
										{
											"begin": 1314,
											"end": 1318,
											"name": "DUP7",
											"source": 9
										},
										{
											"begin": 1320,
											"end": 1322,
											"name": "DUP7",
											"source": 9
										},
										{
											"begin": 1324,
											"end": 1329,
											"name": "DUP7",
											"source": 9
										},
										{
											"begin": 1279,
											"end": 1330,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 1279,
											"end": 1330,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 1279,
											"end": 1330,
											"name": "PUSH",
											"source": 9,
											"value": "24"
										},
										{
											"begin": 1279,
											"end": 1330,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 1279,
											"end": 1330,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "264"
										},
										{
											"begin": 1279,
											"end": 1330,
											"name": "SWAP4",
											"source": 9
										},
										{
											"begin": 1279,
											"end": 1330,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 1279,
											"end": 1330,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 1279,
											"end": 1330,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1279,
											"end": 1330,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "265"
										},
										{
											"begin": 1279,
											"end": 1330,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 1279,
											"end": 1330,
											"name": "tag",
											"source": 9,
											"value": "264"
										},
										{
											"begin": 1279,
											"end": 1330,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1279,
											"end": 1330,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 1279,
											"end": 1330,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 1279,
											"end": 1330,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 1279,
											"end": 1330,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 1279,
											"end": 1330,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 1279,
											"end": 1330,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 1279,
											"end": 1330,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 1279,
											"end": 1330,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 1279,
											"end": 1330,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 1279,
											"end": 1330,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1279,
											"end": 1330,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 1279,
											"end": 1330,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 1279,
											"end": 1330,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1279,
											"end": 1330,
											"name": "PUSH",
											"source": 9,
											"value": "E0"
										},
										{
											"begin": 1279,
											"end": 1330,
											"name": "SHL",
											"source": 9
										},
										{
											"begin": 1279,
											"end": 1330,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 1279,
											"end": 1330,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 1279,
											"end": 1330,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 1279,
											"end": 1330,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 1279,
											"end": 1330,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1279,
											"end": 1330,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 1279,
											"end": 1330,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 1279,
											"end": 1330,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 1279,
											"end": 1330,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 1279,
											"end": 1330,
											"name": "OR",
											"source": 9
										},
										{
											"begin": 1279,
											"end": 1330,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 1279,
											"end": 1330,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 1279,
											"end": 1330,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1279,
											"end": 1330,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1279,
											"end": 1330,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1279,
											"end": 1330,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1254,
											"end": 1341,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 1254,
											"end": 1341,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 1254,
											"end": 1341,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "266"
										},
										{
											"begin": 1254,
											"end": 1341,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 1254,
											"end": 1341,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1254,
											"end": 1341,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "267"
										},
										{
											"begin": 1254,
											"end": 1341,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 1254,
											"end": 1341,
											"name": "tag",
											"source": 9,
											"value": "266"
										},
										{
											"begin": 1254,
											"end": 1341,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1254,
											"end": 1341,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 1254,
											"end": 1341,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 1254,
											"end": 1341,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 1254,
											"end": 1341,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 1254,
											"end": 1341,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 1254,
											"end": 1341,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 1254,
											"end": 1341,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 1254,
											"end": 1341,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 1254,
											"end": 1341,
											"name": "DUP7",
											"source": 9
										},
										{
											"begin": 1254,
											"end": 1341,
											"name": "GAS",
											"source": 9
										},
										{
											"begin": 1254,
											"end": 1341,
											"name": "CALL",
											"source": 9
										},
										{
											"begin": 1254,
											"end": 1341,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 1254,
											"end": 1341,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1254,
											"end": 1341,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1254,
											"end": 1341,
											"name": "RETURNDATASIZE",
											"source": 9
										},
										{
											"begin": 1254,
											"end": 1341,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 1254,
											"end": 1341,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 1254,
											"end": 1341,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 1254,
											"end": 1341,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 1254,
											"end": 1341,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "270"
										},
										{
											"begin": 1254,
											"end": 1341,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 1254,
											"end": 1341,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 1254,
											"end": 1341,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 1254,
											"end": 1341,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 1254,
											"end": 1341,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1254,
											"end": 1341,
											"name": "PUSH",
											"source": 9,
											"value": "1F"
										},
										{
											"begin": 1254,
											"end": 1341,
											"name": "NOT",
											"source": 9
										},
										{
											"begin": 1254,
											"end": 1341,
											"name": "PUSH",
											"source": 9,
											"value": "3F"
										},
										{
											"begin": 1254,
											"end": 1341,
											"name": "RETURNDATASIZE",
											"source": 9
										},
										{
											"begin": 1254,
											"end": 1341,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 1254,
											"end": 1341,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 1254,
											"end": 1341,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 1254,
											"end": 1341,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 1254,
											"end": 1341,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 1254,
											"end": 1341,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 1254,
											"end": 1341,
											"name": "RETURNDATASIZE",
											"source": 9
										},
										{
											"begin": 1254,
											"end": 1341,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 1254,
											"end": 1341,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 1254,
											"end": 1341,
											"name": "RETURNDATASIZE",
											"source": 9
										},
										{
											"begin": 1254,
											"end": 1341,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 1254,
											"end": 1341,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 1254,
											"end": 1341,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 1254,
											"end": 1341,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 1254,
											"end": 1341,
											"name": "RETURNDATACOPY",
											"source": 9
										},
										{
											"begin": 1254,
											"end": 1341,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "269"
										},
										{
											"begin": 1254,
											"end": 1341,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 1254,
											"end": 1341,
											"name": "tag",
											"source": 9,
											"value": "270"
										},
										{
											"begin": 1254,
											"end": 1341,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1254,
											"end": 1341,
											"name": "PUSH",
											"source": 9,
											"value": "60"
										},
										{
											"begin": 1254,
											"end": 1341,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 1254,
											"end": 1341,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1254,
											"end": 1341,
											"name": "tag",
											"source": 9,
											"value": "269"
										},
										{
											"begin": 1254,
											"end": 1341,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1254,
											"end": 1341,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1218,
											"end": 1341,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 1218,
											"end": 1341,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1218,
											"end": 1341,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 1218,
											"end": 1341,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1374,
											"end": 1381,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 1374,
											"end": 1431,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 1374,
											"end": 1431,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 1374,
											"end": 1431,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "273"
										},
										{
											"begin": 1374,
											"end": 1431,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1386,
											"end": 1397,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 1386,
											"end": 1397,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 1386,
											"end": 1402,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 1386,
											"end": 1402,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 1386,
											"end": 1430,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "273"
										},
										{
											"begin": 1386,
											"end": 1430,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 1386,
											"end": 1430,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1417,
											"end": 1421,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 1406,
											"end": 1430,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 1406,
											"end": 1430,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 1406,
											"end": 1430,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 1406,
											"end": 1430,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1406,
											"end": 1430,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 1406,
											"end": 1430,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 1406,
											"end": 1430,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 1406,
											"end": 1430,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1406,
											"end": 1430,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "273"
										},
										{
											"begin": 1406,
											"end": 1430,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 1406,
											"end": 1430,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1406,
											"end": 1430,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "182"
										},
										{
											"begin": 1406,
											"end": 1430,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 1406,
											"end": 1430,
											"name": "tag",
											"source": 9,
											"value": "273"
										},
										{
											"begin": 1406,
											"end": 1430,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1352,
											"end": 1495,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "274"
										},
										{
											"begin": 1352,
											"end": 1495,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 1352,
											"end": 1495,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 1352,
											"end": 1495,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1352,
											"end": 1495,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 1352,
											"end": 1495,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 1352,
											"end": 1495,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 1352,
											"end": 1495,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 1352,
											"end": 1495,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "115"
										},
										{
											"begin": 1352,
											"end": 1495,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1352,
											"end": 1495,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "276"
										},
										{
											"begin": 1352,
											"end": 1495,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 1352,
											"end": 1495,
											"name": "tag",
											"source": 9,
											"value": "274"
										},
										{
											"begin": 1352,
											"end": 1495,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1073,
											"end": 1503,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1073,
											"end": 1503,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1073,
											"end": 1503,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1073,
											"end": 1503,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1073,
											"end": 1503,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1073,
											"end": 1503,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1073,
											"end": 1503,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 8831,
											"end": 8998,
											"name": "tag",
											"source": 5,
											"value": "239"
										},
										{
											"begin": 8831,
											"end": 8998,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 8911,
											"end": 8915,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 8935,
											"end": 8990,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "252"
										},
										{
											"begin": 8945,
											"end": 8948,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8965,
											"end": 8988,
											"name": "DUP5",
											"source": 5
										},
										{
											"begin": 8965,
											"end": 8988,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 8935,
											"end": 8944,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "279"
										},
										{
											"begin": 8935,
											"end": 8990,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 2174,
											"end": 2588,
											"name": "tag",
											"source": 5,
											"value": "253"
										},
										{
											"begin": 2174,
											"end": 2588,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 2237,
											"end": 2241,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 2259,
											"end": 2280,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "281"
										},
										{
											"begin": 2269,
											"end": 2272,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 2274,
											"end": 2279,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 2259,
											"end": 2268,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "279"
										},
										{
											"begin": 2259,
											"end": 2280,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 2259,
											"end": 2280,
											"name": "tag",
											"source": 5,
											"value": "281"
										},
										{
											"begin": 2259,
											"end": 2280,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 2254,
											"end": 2581,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "282"
										},
										{
											"begin": 2254,
											"end": 2581,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2297,
											"end": 2320,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 2297,
											"end": 2320,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 2297,
											"end": 2320,
											"name": "PUSH",
											"source": 5,
											"value": "1"
										},
										{
											"begin": 2297,
											"end": 2320,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 2297,
											"end": 2320,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 2297,
											"end": 2320,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 2297,
											"end": 2320,
											"name": "DUP5",
											"source": 5
										},
										{
											"begin": 2297,
											"end": 2320,
											"name": "SSTORE",
											"source": 5
										},
										{
											"begin": 2297,
											"end": 2308,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 2297,
											"end": 2320,
											"name": "DUP5",
											"source": 5
										},
										{
											"begin": 2297,
											"end": 2320,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 2297,
											"end": 2320,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 2297,
											"end": 2320,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 2297,
											"end": 2320,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 2297,
											"end": 2320,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 2297,
											"end": 2320,
											"name": "KECCAK256",
											"source": 5
										},
										{
											"begin": 2297,
											"end": 2320,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2297,
											"end": 2320,
											"name": "SWAP4",
											"source": 5
										},
										{
											"begin": 2297,
											"end": 2320,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 2297,
											"end": 2320,
											"name": "DUP5",
											"source": 5
										},
										{
											"begin": 2297,
											"end": 2320,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2297,
											"end": 2320,
											"name": "SSTORE",
											"source": 5
										},
										{
											"begin": 2480,
											"end": 2498,
											"name": "DUP5",
											"source": 5
										},
										{
											"begin": 2480,
											"end": 2498,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 2458,
											"end": 2477,
											"name": "DUP5",
											"source": 5
										},
										{
											"begin": 2458,
											"end": 2477,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 2458,
											"end": 2477,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 2458,
											"end": 2470,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 2458,
											"end": 2470,
											"name": "DUP7",
											"source": 5
										},
										{
											"begin": 2458,
											"end": 2470,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 2458,
											"end": 2477,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2458,
											"end": 2477,
											"name": "SWAP4",
											"source": 5
										},
										{
											"begin": 2458,
											"end": 2477,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 2458,
											"end": 2477,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 2458,
											"end": 2477,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2458,
											"end": 2477,
											"name": "KECCAK256",
											"source": 5
										},
										{
											"begin": 2458,
											"end": 2498,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 2458,
											"end": 2498,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2458,
											"end": 2498,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 2458,
											"end": 2498,
											"name": "SSTORE",
											"source": 5
										},
										{
											"begin": 2513,
											"end": 2524,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "251"
										},
										{
											"begin": 2513,
											"end": 2524,
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 2254,
											"end": 2581,
											"name": "tag",
											"source": 5,
											"value": "282"
										},
										{
											"begin": 2254,
											"end": 2581,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2564,
											"end": 2569,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 2557,
											"end": 2569,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "251"
										},
										{
											"begin": 2557,
											"end": 2569,
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 4270,
											"end": 4399,
											"name": "tag",
											"source": 5,
											"value": "279"
										},
										{
											"begin": 4270,
											"end": 4399,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 4343,
											"end": 4347,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 4367,
											"end": 4386,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 4367,
											"end": 4386,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 4367,
											"end": 4386,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 4367,
											"end": 4379,
											"name": "PUSH",
											"source": 5,
											"value": "1"
										},
										{
											"begin": 4367,
											"end": 4379,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 4367,
											"end": 4379,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 4367,
											"end": 4379,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 4367,
											"end": 4379,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 4367,
											"end": 4386,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 4367,
											"end": 4386,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 4367,
											"end": 4386,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 4367,
											"end": 4386,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 4367,
											"end": 4386,
											"name": "KECCAK256",
											"source": 5
										},
										{
											"begin": 4367,
											"end": 4386,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 4367,
											"end": 4391,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 4367,
											"end": 4391,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 4367,
											"end": 4391,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 4270,
											"end": 4399,
											"name": "JUMP",
											"source": 5,
											"value": "[out]"
										},
										{
											"begin": 14,
											"end": 273,
											"name": "tag",
											"source": 10,
											"value": "49"
										},
										{
											"begin": 14,
											"end": 273,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 14,
											"end": 273,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 126,
											"end": 128,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 114,
											"end": 123,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 105,
											"end": 112,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 101,
											"end": 124,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 97,
											"end": 129,
											"name": "SLT",
											"source": 10
										},
										{
											"begin": 94,
											"end": 96,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 94,
											"end": 96,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "288"
										},
										{
											"begin": 94,
											"end": 96,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 147,
											"end": 153,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 139,
											"end": 145,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 132,
											"end": 154,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 94,
											"end": 96,
											"name": "tag",
											"source": 10,
											"value": "288"
										},
										{
											"begin": 94,
											"end": 96,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 191,
											"end": 200,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 178,
											"end": 201,
											"name": "CALLDATALOAD",
											"source": 10
										},
										{
											"begin": 210,
											"end": 243,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "289"
										},
										{
											"begin": 237,
											"end": 242,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 210,
											"end": 243,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "290"
										},
										{
											"begin": 210,
											"end": 243,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 210,
											"end": 243,
											"name": "tag",
											"source": 10,
											"value": "289"
										},
										{
											"begin": 210,
											"end": 243,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 262,
											"end": 267,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 84,
											"end": 273,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 84,
											"end": 273,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 278,
											"end": 1580,
											"name": "tag",
											"source": 10,
											"value": "65"
										},
										{
											"begin": 278,
											"end": 1580,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 278,
											"end": 1580,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 278,
											"end": 1580,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 278,
											"end": 1580,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 278,
											"end": 1580,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 476,
											"end": 479,
											"name": "PUSH",
											"source": 10,
											"value": "180"
										},
										{
											"begin": 520,
											"end": 522,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 508,
											"end": 517,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 499,
											"end": 506,
											"name": "DUP9",
											"source": 10
										},
										{
											"begin": 495,
											"end": 518,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 491,
											"end": 523,
											"name": "SLT",
											"source": 10
										},
										{
											"begin": 488,
											"end": 490,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 488,
											"end": 490,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "292"
										},
										{
											"begin": 488,
											"end": 490,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 541,
											"end": 547,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 533,
											"end": 539,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 526,
											"end": 548,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 488,
											"end": 490,
											"name": "tag",
											"source": 10,
											"value": "292"
										},
										{
											"begin": 488,
											"end": 490,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 585,
											"end": 594,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 572,
											"end": 595,
											"name": "CALLDATALOAD",
											"source": 10
										},
										{
											"begin": 604,
											"end": 637,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "293"
										},
										{
											"begin": 631,
											"end": 636,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 604,
											"end": 637,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "290"
										},
										{
											"begin": 604,
											"end": 637,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 604,
											"end": 637,
											"name": "tag",
											"source": 10,
											"value": "293"
										},
										{
											"begin": 604,
											"end": 637,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 656,
											"end": 661,
											"name": "SWAP5",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 680,
											"end": 682,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 719,
											"end": 737,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 719,
											"end": 737,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 719,
											"end": 737,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 706,
											"end": 738,
											"name": "CALLDATALOAD",
											"source": 10
										},
										{
											"begin": 747,
											"end": 782,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "294"
										},
										{
											"begin": 706,
											"end": 738,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 747,
											"end": 782,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "290"
										},
										{
											"begin": 747,
											"end": 782,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 747,
											"end": 782,
											"name": "tag",
											"source": 10,
											"value": "294"
										},
										{
											"begin": 747,
											"end": 782,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 801,
											"end": 808,
											"name": "SWAP5",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 860,
											"end": 862,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 845,
											"end": 863,
											"name": "DUP8",
											"source": 10
										},
										{
											"begin": 845,
											"end": 863,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 832,
											"end": 864,
											"name": "CALLDATALOAD",
											"source": 10
										},
										{
											"begin": 873,
											"end": 908,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "295"
										},
										{
											"begin": 832,
											"end": 864,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 873,
											"end": 908,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "290"
										},
										{
											"begin": 873,
											"end": 908,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 873,
											"end": 908,
											"name": "tag",
											"source": 10,
											"value": "295"
										},
										{
											"begin": 873,
											"end": 908,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 927,
											"end": 934,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 972,
											"end": 975,
											"name": "PUSH",
											"source": 10,
											"value": "7F"
										},
										{
											"begin": 957,
											"end": 976,
											"name": "DUP8",
											"source": 10
										},
										{
											"begin": 957,
											"end": 976,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 953,
											"end": 986,
											"name": "DUP9",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SGT",
											"source": -1
										},
										{
											"begin": 943,
											"end": 945,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "296"
										},
										{
											"begin": 943,
											"end": 945,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 1005,
											"end": 1011,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 997,
											"end": 1003,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 990,
											"end": 1012,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 943,
											"end": 945,
											"name": "tag",
											"source": 10,
											"value": "296"
										},
										{
											"begin": 943,
											"end": 945,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1043,
											"end": 1045,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 1037,
											"end": 1046,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 1085,
											"end": 1088,
											"name": "PUSH",
											"source": 10,
											"value": "120"
										},
										{
											"begin": 1077,
											"end": 1083,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1073,
											"end": 1089,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1155,
											"end": 1161,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1143,
											"end": 1153,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1140,
											"end": 1162,
											"name": "LT",
											"source": 10
										},
										{
											"begin": 1119,
											"end": 1137,
											"name": "PUSH",
											"source": 10,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1107,
											"end": 1117,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 1104,
											"end": 1138,
											"name": "GT",
											"source": 10
										},
										{
											"begin": 1101,
											"end": 1163,
											"name": "OR",
											"source": 10
										},
										{
											"begin": 1098,
											"end": 1100,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 1098,
											"end": 1100,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "298"
										},
										{
											"begin": 1098,
											"end": 1100,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 1166,
											"end": 1184,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "298"
										},
										{
											"begin": 1166,
											"end": 1184,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "299"
										},
										{
											"begin": 1166,
											"end": 1184,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 1166,
											"end": 1184,
											"name": "tag",
											"source": 10,
											"value": "298"
										},
										{
											"begin": 1166,
											"end": 1184,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1202,
											"end": 1204,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 1195,
											"end": 1217,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 1237,
											"end": 1243,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1278,
											"end": 1280,
											"name": "PUSH",
											"source": 10,
											"value": "60"
										},
										{
											"begin": 1263,
											"end": 1281,
											"name": "DUP10",
											"source": 10
										},
										{
											"begin": 1263,
											"end": 1281,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1296,
											"end": 1314,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 1296,
											"end": 1314,
											"name": "DUP11",
											"source": 10
										},
										{
											"begin": 1296,
											"end": 1314,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1293,
											"end": 1324,
											"name": "DUP12",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "LT",
											"source": -1
										},
										{
											"begin": 1290,
											"end": 1292,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 1290,
											"end": 1292,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "300"
										},
										{
											"begin": 1290,
											"end": 1292,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 1342,
											"end": 1348,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 1334,
											"end": 1340,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 1327,
											"end": 1349,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 1290,
											"end": 1292,
											"name": "tag",
											"source": 10,
											"value": "300"
										},
										{
											"begin": 1290,
											"end": 1292,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1369,
											"end": 1375,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 1360,
											"end": 1375,
											"name": "SWAP5",
											"source": 10
										},
										{
											"begin": 1360,
											"end": 1375,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1384,
											"end": 1549,
											"name": "tag",
											"source": 10,
											"value": "301"
										},
										{
											"begin": 1384,
											"end": 1549,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1398,
											"end": 1402,
											"name": "PUSH",
											"source": 10,
											"value": "9"
										},
										{
											"begin": 1395,
											"end": 1396,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 1392,
											"end": 1403,
											"name": "LT",
											"source": 10
										},
										{
											"begin": 1384,
											"end": 1549,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 1384,
											"end": 1549,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "303"
										},
										{
											"begin": 1384,
											"end": 1549,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 1457,
											"end": 1474,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1457,
											"end": 1474,
											"name": "CALLDATALOAD",
											"source": 10
										},
										{
											"begin": 1445,
											"end": 1475,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 1445,
											"end": 1475,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 1418,
											"end": 1419,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 1411,
											"end": 1420,
											"name": "SWAP5",
											"source": 10
										},
										{
											"begin": 1411,
											"end": 1420,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1411,
											"end": 1420,
											"name": "SWAP5",
											"source": 10
										},
										{
											"begin": 1411,
											"end": 1420,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1411,
											"end": 1420,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 1495,
											"end": 1507,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1495,
											"end": 1507,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 1495,
											"end": 1507,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1495,
											"end": 1507,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1527,
											"end": 1539,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 1527,
											"end": 1539,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1384,
											"end": 1549,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "301"
										},
										{
											"begin": 1384,
											"end": 1549,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 1384,
											"end": 1549,
											"name": "tag",
											"source": 10,
											"value": "303"
										},
										{
											"begin": 1384,
											"end": 1549,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1388,
											"end": 1391,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1388,
											"end": 1391,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1568,
											"end": 1574,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1558,
											"end": 1574,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 1558,
											"end": 1574,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1558,
											"end": 1574,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1558,
											"end": 1574,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1558,
											"end": 1574,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 456,
											"end": 1580,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 456,
											"end": 1580,
											"name": "SWAP6",
											"source": 10
										},
										{
											"begin": 456,
											"end": 1580,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 456,
											"end": 1580,
											"name": "SWAP5",
											"source": 10
										},
										{
											"begin": 456,
											"end": 1580,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 456,
											"end": 1580,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 456,
											"end": 1580,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 456,
											"end": 1580,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 1585,
											"end": 1882,
											"name": "tag",
											"source": 10,
											"value": "182"
										},
										{
											"begin": 1585,
											"end": 1882,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1585,
											"end": 1882,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1705,
											"end": 1707,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 1693,
											"end": 1702,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 1684,
											"end": 1691,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 1680,
											"end": 1703,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 1676,
											"end": 1708,
											"name": "SLT",
											"source": 10
										},
										{
											"begin": 1673,
											"end": 1675,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 1673,
											"end": 1675,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "305"
										},
										{
											"begin": 1673,
											"end": 1675,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 1726,
											"end": 1732,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1718,
											"end": 1724,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1711,
											"end": 1733,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 1673,
											"end": 1675,
											"name": "tag",
											"source": 10,
											"value": "305"
										},
										{
											"begin": 1673,
											"end": 1675,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1763,
											"end": 1772,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1757,
											"end": 1773,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 1816,
											"end": 1821,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1809,
											"end": 1822,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 1802,
											"end": 1823,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 1795,
											"end": 1800,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1792,
											"end": 1824,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 1782,
											"end": 1784,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "289"
										},
										{
											"begin": 1782,
											"end": 1784,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 1843,
											"end": 1849,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1835,
											"end": 1841,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 1828,
											"end": 1850,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 1887,
											"end": 2077,
											"name": "tag",
											"source": 10,
											"value": "82"
										},
										{
											"begin": 1887,
											"end": 2077,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1887,
											"end": 2077,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1999,
											"end": 2001,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 1987,
											"end": 1996,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 1978,
											"end": 1985,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 1974,
											"end": 1997,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 1970,
											"end": 2002,
											"name": "SLT",
											"source": 10
										},
										{
											"begin": 1967,
											"end": 1969,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 1967,
											"end": 1969,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "308"
										},
										{
											"begin": 1967,
											"end": 1969,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 2020,
											"end": 2026,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 2012,
											"end": 2018,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 2005,
											"end": 2027,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 1967,
											"end": 1969,
											"name": "tag",
											"source": 10,
											"value": "308"
										},
										{
											"begin": 1967,
											"end": 1969,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2048,
											"end": 2071,
											"name": "CALLDATALOAD",
											"source": 10
										},
										{
											"begin": 2048,
											"end": 2071,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 1957,
											"end": 2077,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1957,
											"end": 2077,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 2082,
											"end": 2276,
											"name": "tag",
											"source": 10,
											"value": "129"
										},
										{
											"begin": 2082,
											"end": 2276,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2082,
											"end": 2276,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 2205,
											"end": 2207,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 2193,
											"end": 2202,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 2184,
											"end": 2191,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 2180,
											"end": 2203,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 2176,
											"end": 2208,
											"name": "SLT",
											"source": 10
										},
										{
											"begin": 2173,
											"end": 2175,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 2173,
											"end": 2175,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "310"
										},
										{
											"begin": 2173,
											"end": 2175,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 2226,
											"end": 2232,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 2218,
											"end": 2224,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 2211,
											"end": 2233,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 2173,
											"end": 2175,
											"name": "tag",
											"source": 10,
											"value": "310"
										},
										{
											"begin": 2173,
											"end": 2175,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2254,
											"end": 2270,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 2254,
											"end": 2270,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 2163,
											"end": 2276,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2163,
											"end": 2276,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 2281,
											"end": 2711,
											"name": "tag",
											"source": 10,
											"value": "267"
										},
										{
											"begin": 2281,
											"end": 2711,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2281,
											"end": 2711,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 2448,
											"end": 2454,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 2442,
											"end": 2455,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 2473,
											"end": 2476,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 2485,
											"end": 2614,
											"name": "tag",
											"source": 10,
											"value": "312"
										},
										{
											"begin": 2485,
											"end": 2614,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2499,
											"end": 2505,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 2496,
											"end": 2497,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 2493,
											"end": 2506,
											"name": "LT",
											"source": 10
										},
										{
											"begin": 2485,
											"end": 2614,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 2485,
											"end": 2614,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "314"
										},
										{
											"begin": 2485,
											"end": 2614,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 2597,
											"end": 2601,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 2581,
											"end": 2595,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 2581,
											"end": 2595,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 2581,
											"end": 2595,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 2577,
											"end": 2602,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 2577,
											"end": 2602,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 2571,
											"end": 2603,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 2558,
											"end": 2569,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 2558,
											"end": 2569,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 2558,
											"end": 2569,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 2551,
											"end": 2604,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 2514,
											"end": 2526,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 2485,
											"end": 2614,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "312"
										},
										{
											"begin": 2485,
											"end": 2614,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 2485,
											"end": 2614,
											"name": "tag",
											"source": 10,
											"value": "314"
										},
										{
											"begin": 2485,
											"end": 2614,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2632,
											"end": 2638,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 2629,
											"end": 2630,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 2626,
											"end": 2639,
											"name": "GT",
											"source": 10
										},
										{
											"begin": 2623,
											"end": 2625,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 2623,
											"end": 2625,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "315"
										},
										{
											"begin": 2623,
											"end": 2625,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 2667,
											"end": 2670,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 2658,
											"end": 2664,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 2653,
											"end": 2656,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 2649,
											"end": 2665,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 2642,
											"end": 2671,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 2623,
											"end": 2625,
											"name": "tag",
											"source": 10,
											"value": "315"
										},
										{
											"begin": 2623,
											"end": 2625,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2689,
											"end": 2705,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 2689,
											"end": 2705,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 2689,
											"end": 2705,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 2689,
											"end": 2705,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 2689,
											"end": 2705,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 2418,
											"end": 2711,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2418,
											"end": 2711,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 2716,
											"end": 2919,
											"name": "tag",
											"source": 10,
											"value": "61"
										},
										{
											"begin": 2716,
											"end": 2919,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2880,
											"end": 2912,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 2880,
											"end": 2912,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 2880,
											"end": 2912,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 2880,
											"end": 2912,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 2862,
											"end": 2913,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 2862,
											"end": 2913,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 2850,
											"end": 2852,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 2835,
											"end": 2853,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 2835,
											"end": 2853,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 2817,
											"end": 2919,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 2924,
											"end": 4012,
											"name": "tag",
											"source": 10,
											"value": "32"
										},
										{
											"begin": 2924,
											"end": 4012,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3473,
											"end": 3488,
											"name": "SWAP13",
											"source": 10
										},
										{
											"begin": 3473,
											"end": 3488,
											"name": "DUP14",
											"source": 10
										},
										{
											"begin": 3473,
											"end": 3488,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 3455,
											"end": 3489,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 3455,
											"end": 3489,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 3525,
											"end": 3540,
											"name": "SWAP11",
											"source": 10
										},
										{
											"begin": 3525,
											"end": 3540,
											"name": "DUP13",
											"source": 10
										},
										{
											"begin": 3525,
											"end": 3540,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 3520,
											"end": 3522,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 3505,
											"end": 3523,
											"name": "DUP13",
											"source": 10
										},
										{
											"begin": 3505,
											"end": 3523,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 3498,
											"end": 3541,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 3577,
											"end": 3592,
											"name": "SWAP9",
											"source": 10
										},
										{
											"begin": 3577,
											"end": 3592,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 3577,
											"end": 3592,
											"name": "SWAP11",
											"source": 10
										},
										{
											"begin": 3577,
											"end": 3592,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 3572,
											"end": 3574,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 3557,
											"end": 3575,
											"name": "DUP11",
											"source": 10
										},
										{
											"begin": 3557,
											"end": 3575,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 3550,
											"end": 3593,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 3624,
											"end": 3626,
											"name": "PUSH",
											"source": 10,
											"value": "60"
										},
										{
											"begin": 3609,
											"end": 3627,
											"name": "DUP10",
											"source": 10
										},
										{
											"begin": 3609,
											"end": 3627,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 3602,
											"end": 3636,
											"name": "SWAP7",
											"source": 10
										},
										{
											"begin": 3602,
											"end": 3636,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 3602,
											"end": 3636,
											"name": "SWAP7",
											"source": 10
										},
										{
											"begin": 3602,
											"end": 3636,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 3667,
											"end": 3670,
											"name": "PUSH",
											"source": 10,
											"value": "80"
										},
										{
											"begin": 3652,
											"end": 3671,
											"name": "DUP9",
											"source": 10
										},
										{
											"begin": 3652,
											"end": 3671,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 3645,
											"end": 3680,
											"name": "SWAP5",
											"source": 10
										},
										{
											"begin": 3645,
											"end": 3680,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 3645,
											"end": 3680,
											"name": "SWAP5",
											"source": 10
										},
										{
											"begin": 3645,
											"end": 3680,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 3435,
											"end": 3438,
											"name": "PUSH",
											"source": 10,
											"value": "A0"
										},
										{
											"begin": 3696,
											"end": 3715,
											"name": "DUP8",
											"source": 10
										},
										{
											"begin": 3696,
											"end": 3715,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 3689,
											"end": 3724,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 3689,
											"end": 3724,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 3689,
											"end": 3724,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 3689,
											"end": 3724,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 3755,
											"end": 3758,
											"name": "PUSH",
											"source": 10,
											"value": "C0"
										},
										{
											"begin": 3740,
											"end": 3759,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 3740,
											"end": 3759,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 3733,
											"end": 3768,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 3799,
											"end": 3802,
											"name": "PUSH",
											"source": 10,
											"value": "E0"
										},
										{
											"begin": 3784,
											"end": 3803,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 3784,
											"end": 3803,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 3777,
											"end": 3812,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 3843,
											"end": 3846,
											"name": "PUSH",
											"source": 10,
											"value": "100"
										},
										{
											"begin": 3828,
											"end": 3847,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 3828,
											"end": 3847,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 3821,
											"end": 3856,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 3887,
											"end": 3890,
											"name": "PUSH",
											"source": 10,
											"value": "120"
										},
										{
											"begin": 3872,
											"end": 3891,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 3872,
											"end": 3891,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 3865,
											"end": 3900,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 3944,
											"end": 3959,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 3944,
											"end": 3959,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 3937,
											"end": 3960,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 3931,
											"end": 3934,
											"name": "PUSH",
											"source": 10,
											"value": "140"
										},
										{
											"begin": 3916,
											"end": 3935,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 3916,
											"end": 3935,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 3909,
											"end": 3961,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 3992,
											"end": 3995,
											"name": "PUSH",
											"source": 10,
											"value": "160"
										},
										{
											"begin": 3977,
											"end": 3996,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 3977,
											"end": 3996,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 3970,
											"end": 4006,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 3970,
											"end": 4006,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 3970,
											"end": 4006,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 3970,
											"end": 4006,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 3404,
											"end": 3407,
											"name": "PUSH",
											"source": 10,
											"value": "180"
										},
										{
											"begin": 3389,
											"end": 3408,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 3389,
											"end": 3408,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 3371,
											"end": 4012,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 4017,
											"end": 4392,
											"name": "tag",
											"source": 10,
											"value": "265"
										},
										{
											"begin": 4017,
											"end": 4392,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4275,
											"end": 4290,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 4275,
											"end": 4290,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 4275,
											"end": 4290,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 4257,
											"end": 4291,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 4257,
											"end": 4291,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 4327,
											"end": 4342,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 4327,
											"end": 4342,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 4327,
											"end": 4342,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 4327,
											"end": 4342,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 4322,
											"end": 4324,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 4307,
											"end": 4325,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 4307,
											"end": 4325,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 4300,
											"end": 4343,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 4374,
											"end": 4376,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 4359,
											"end": 4377,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 4359,
											"end": 4377,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 4352,
											"end": 4386,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 4352,
											"end": 4386,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 4352,
											"end": 4386,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 4352,
											"end": 4386,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 4207,
											"end": 4209,
											"name": "PUSH",
											"source": 10,
											"value": "60"
										},
										{
											"begin": 4192,
											"end": 4210,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 4192,
											"end": 4210,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 4174,
											"end": 4392,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 4397,
											"end": 4671,
											"name": "tag",
											"source": 10,
											"value": "177"
										},
										{
											"begin": 4397,
											"end": 4671,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4589,
											"end": 4621,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 4589,
											"end": 4621,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 4589,
											"end": 4621,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 4589,
											"end": 4621,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 4571,
											"end": 4622,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 4571,
											"end": 4622,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 4653,
											"end": 4655,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 4638,
											"end": 4656,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 4638,
											"end": 4656,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 4631,
											"end": 4665,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 4559,
											"end": 4561,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 4544,
											"end": 4562,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 4544,
											"end": 4562,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 4526,
											"end": 4671,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 4676,
											"end": 4863,
											"name": "tag",
											"source": 10,
											"value": "88"
										},
										{
											"begin": 4676,
											"end": 4863,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 4841,
											"end": 4855,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 4841,
											"end": 4855,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 4834,
											"end": 4856,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 4816,
											"end": 4857,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 4816,
											"end": 4857,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 4804,
											"end": 4806,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 4789,
											"end": 4807,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 4789,
											"end": 4807,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 4771,
											"end": 4863,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 5090,
											"end": 5441,
											"name": "tag",
											"source": 10,
											"value": "164"
										},
										{
											"begin": 5090,
											"end": 5441,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 5292,
											"end": 5294,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 5274,
											"end": 5295,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 5274,
											"end": 5295,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 5274,
											"end": 5295,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 5331,
											"end": 5333,
											"name": "PUSH",
											"source": 10,
											"value": "1B"
										},
										{
											"begin": 5311,
											"end": 5329,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 5311,
											"end": 5329,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 5311,
											"end": 5329,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 5304,
											"end": 5334,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 5370,
											"end": 5399,
											"name": "PUSH",
											"source": 10,
											"value": "416C6C20746F6B656E20686173206265656E2077697468647261770000000000"
										},
										{
											"begin": 5365,
											"end": 5367,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 5350,
											"end": 5368,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 5350,
											"end": 5368,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 5343,
											"end": 5400,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 5432,
											"end": 5434,
											"name": "PUSH",
											"source": 10,
											"value": "60"
										},
										{
											"begin": 5417,
											"end": 5435,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 5417,
											"end": 5435,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 5264,
											"end": 5441,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 5446,
											"end": 5848,
											"name": "tag",
											"source": 10,
											"value": "248"
										},
										{
											"begin": 5446,
											"end": 5848,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 5648,
											"end": 5650,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 5630,
											"end": 5651,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 5630,
											"end": 5651,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 5630,
											"end": 5651,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 5687,
											"end": 5689,
											"name": "PUSH",
											"source": 10,
											"value": "26"
										},
										{
											"begin": 5667,
											"end": 5685,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 5667,
											"end": 5685,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 5667,
											"end": 5685,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 5660,
											"end": 5690,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 5726,
											"end": 5760,
											"name": "PUSH",
											"source": 10,
											"value": "4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061"
										},
										{
											"begin": 5721,
											"end": 5723,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 5706,
											"end": 5724,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 5706,
											"end": 5724,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 5699,
											"end": 5761,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "646472657373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5792,
											"end": 5794,
											"name": "PUSH",
											"source": 10,
											"value": "60"
										},
										{
											"begin": 5777,
											"end": 5795,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 5777,
											"end": 5795,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 5770,
											"end": 5806,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 5838,
											"end": 5841,
											"name": "PUSH",
											"source": 10,
											"value": "80"
										},
										{
											"begin": 5823,
											"end": 5842,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 5823,
											"end": 5842,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 5620,
											"end": 5848,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 5853,
											"end": 6191,
											"name": "tag",
											"source": 10,
											"value": "196"
										},
										{
											"begin": 5853,
											"end": 6191,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 6055,
											"end": 6057,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 6037,
											"end": 6058,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 6037,
											"end": 6058,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 6037,
											"end": 6058,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 6094,
											"end": 6096,
											"name": "PUSH",
											"source": 10,
											"value": "E"
										},
										{
											"begin": 6074,
											"end": 6092,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 6074,
											"end": 6092,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 6074,
											"end": 6092,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 6067,
											"end": 6097,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "4F766572666C6F772076616C7565"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "90"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 6128,
											"end": 6130,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 6113,
											"end": 6131,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 6113,
											"end": 6131,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 6106,
											"end": 6150,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 6182,
											"end": 6184,
											"name": "PUSH",
											"source": 10,
											"value": "60"
										},
										{
											"begin": 6167,
											"end": 6185,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 6167,
											"end": 6185,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 6027,
											"end": 6191,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 6196,
											"end": 6530,
											"name": "tag",
											"source": 10,
											"value": "190"
										},
										{
											"begin": 6196,
											"end": 6530,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 6398,
											"end": 6400,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 6380,
											"end": 6401,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 6380,
											"end": 6401,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 6380,
											"end": 6401,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 6437,
											"end": 6439,
											"name": "PUSH",
											"source": 10,
											"value": "A"
										},
										{
											"begin": 6417,
											"end": 6435,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 6417,
											"end": 6435,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 6417,
											"end": 6435,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 6410,
											"end": 6440,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "4E6F7420616374697665"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "B0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 6471,
											"end": 6473,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 6456,
											"end": 6474,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 6456,
											"end": 6474,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 6449,
											"end": 6489,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 6521,
											"end": 6523,
											"name": "PUSH",
											"source": 10,
											"value": "60"
										},
										{
											"begin": 6506,
											"end": 6524,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 6506,
											"end": 6524,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 6370,
											"end": 6530,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 6535,
											"end": 6875,
											"name": "tag",
											"source": 10,
											"value": "193"
										},
										{
											"begin": 6535,
											"end": 6875,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 6737,
											"end": 6739,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 6719,
											"end": 6740,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 6719,
											"end": 6740,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 6719,
											"end": 6740,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 6776,
											"end": 6778,
											"name": "PUSH",
											"source": 10,
											"value": "10"
										},
										{
											"begin": 6756,
											"end": 6774,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 6756,
											"end": 6774,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 6756,
											"end": 6774,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 6749,
											"end": 6779,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "4E6F7420656E6F7567682076616C7565"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "80"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 6810,
											"end": 6812,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 6795,
											"end": 6813,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 6795,
											"end": 6813,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 6788,
											"end": 6834,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 6866,
											"end": 6868,
											"name": "PUSH",
											"source": 10,
											"value": "60"
										},
										{
											"begin": 6851,
											"end": 6869,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 6851,
											"end": 6869,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 6709,
											"end": 6875,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 6880,
											"end": 7216,
											"name": "tag",
											"source": 10,
											"value": "159"
										},
										{
											"begin": 6880,
											"end": 7216,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 7082,
											"end": 7084,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 7064,
											"end": 7085,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 7064,
											"end": 7085,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 7064,
											"end": 7085,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 7121,
											"end": 7123,
											"name": "PUSH",
											"source": 10,
											"value": "C"
										},
										{
											"begin": 7101,
											"end": 7119,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 7101,
											"end": 7119,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 7101,
											"end": 7119,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 7094,
											"end": 7124,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "53616C652073756365737373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7155,
											"end": 7157,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 7140,
											"end": 7158,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 7140,
											"end": 7158,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 7133,
											"end": 7175,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 7207,
											"end": 7209,
											"name": "PUSH",
											"source": 10,
											"value": "60"
										},
										{
											"begin": 7192,
											"end": 7210,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 7192,
											"end": 7210,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 7054,
											"end": 7216,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 7221,
											"end": 7577,
											"name": "tag",
											"source": 10,
											"value": "116"
										},
										{
											"begin": 7221,
											"end": 7577,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 7423,
											"end": 7425,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 7405,
											"end": 7426,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 7405,
											"end": 7426,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 7405,
											"end": 7426,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 7442,
											"end": 7460,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 7442,
											"end": 7460,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 7442,
											"end": 7460,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 7435,
											"end": 7465,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 7501,
											"end": 7535,
											"name": "PUSH",
											"source": 10,
											"value": "4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572"
										},
										{
											"begin": 7496,
											"end": 7498,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 7481,
											"end": 7499,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 7481,
											"end": 7499,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 7474,
											"end": 7536,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 7568,
											"end": 7570,
											"name": "PUSH",
											"source": 10,
											"value": "60"
										},
										{
											"begin": 7553,
											"end": 7571,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 7553,
											"end": 7571,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 7395,
											"end": 7577,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 7582,
											"end": 7985,
											"name": "tag",
											"source": 10,
											"value": "167"
										},
										{
											"begin": 7582,
											"end": 7985,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 7784,
											"end": 7786,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 7766,
											"end": 7787,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 7766,
											"end": 7787,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 7766,
											"end": 7787,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 7823,
											"end": 7825,
											"name": "PUSH",
											"source": 10,
											"value": "27"
										},
										{
											"begin": 7803,
											"end": 7821,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 7803,
											"end": 7821,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 7803,
											"end": 7821,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 7796,
											"end": 7826,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 7862,
											"end": 7896,
											"name": "PUSH",
											"source": 10,
											"value": "596F7520776974686472617720616C6C206F722068617665206E6F7420626F75"
										},
										{
											"begin": 7857,
											"end": 7859,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 7842,
											"end": 7860,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 7842,
											"end": 7860,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 7835,
											"end": 7897,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "19DA1D081E595D"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "CA"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7928,
											"end": 7930,
											"name": "PUSH",
											"source": 10,
											"value": "60"
										},
										{
											"begin": 7913,
											"end": 7931,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 7913,
											"end": 7931,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 7906,
											"end": 7943,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 7975,
											"end": 7978,
											"name": "PUSH",
											"source": 10,
											"value": "80"
										},
										{
											"begin": 7960,
											"end": 7979,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 7960,
											"end": 7979,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 7756,
											"end": 7985,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 7990,
											"end": 8390,
											"name": "tag",
											"source": 10,
											"value": "276"
										},
										{
											"begin": 7990,
											"end": 8390,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 8192,
											"end": 8194,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 8174,
											"end": 8195,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 8174,
											"end": 8195,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 8174,
											"end": 8195,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 8231,
											"end": 8233,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 8211,
											"end": 8229,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 8211,
											"end": 8229,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 8211,
											"end": 8229,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 8204,
											"end": 8234,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 8270,
											"end": 8304,
											"name": "PUSH",
											"source": 10,
											"value": "5472616E7366657248656C7065723A205452414E534645525F46524F4D5F4641"
										},
										{
											"begin": 8265,
											"end": 8267,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 8250,
											"end": 8268,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 8250,
											"end": 8268,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 8243,
											"end": 8305,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "12531151"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 8336,
											"end": 8338,
											"name": "PUSH",
											"source": 10,
											"value": "60"
										},
										{
											"begin": 8321,
											"end": 8339,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 8321,
											"end": 8339,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 8314,
											"end": 8348,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 8380,
											"end": 8383,
											"name": "PUSH",
											"source": 10,
											"value": "80"
										},
										{
											"begin": 8365,
											"end": 8384,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 8365,
											"end": 8384,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 8164,
											"end": 8390,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 8395,
											"end": 8750,
											"name": "tag",
											"source": 10,
											"value": "154"
										},
										{
											"begin": 8395,
											"end": 8750,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 8597,
											"end": 8599,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 8579,
											"end": 8600,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 8579,
											"end": 8600,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 8579,
											"end": 8600,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 8636,
											"end": 8638,
											"name": "PUSH",
											"source": 10,
											"value": "1F"
										},
										{
											"begin": 8616,
											"end": 8634,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 8616,
											"end": 8634,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 8616,
											"end": 8634,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 8609,
											"end": 8639,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 8675,
											"end": 8708,
											"name": "PUSH",
											"source": 10,
											"value": "5265656E7472616E637947756172643A207265656E7472616E742063616C6C00"
										},
										{
											"begin": 8670,
											"end": 8672,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 8655,
											"end": 8673,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 8655,
											"end": 8673,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 8648,
											"end": 8709,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 8741,
											"end": 8743,
											"name": "PUSH",
											"source": 10,
											"value": "60"
										},
										{
											"begin": 8726,
											"end": 8744,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 8726,
											"end": 8744,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 8569,
											"end": 8750,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 8755,
											"end": 9094,
											"name": "tag",
											"source": 10,
											"value": "209"
										},
										{
											"begin": 8755,
											"end": 9094,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 8957,
											"end": 8959,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 8939,
											"end": 8960,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 8939,
											"end": 8960,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 8939,
											"end": 8960,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 8996,
											"end": 8998,
											"name": "PUSH",
											"source": 10,
											"value": "F"
										},
										{
											"begin": 8976,
											"end": 8994,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 8976,
											"end": 8994,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 8976,
											"end": 8994,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 8969,
											"end": 8999,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "53616C652069732073756363657373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "88"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 9030,
											"end": 9032,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 9015,
											"end": 9033,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 9015,
											"end": 9033,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 9008,
											"end": 9053,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 9085,
											"end": 9087,
											"name": "PUSH",
											"source": 10,
											"value": "60"
										},
										{
											"begin": 9070,
											"end": 9088,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 9070,
											"end": 9088,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 8929,
											"end": 9094,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 9099,
											"end": 9276,
											"name": "tag",
											"source": 10,
											"value": "37"
										},
										{
											"begin": 9099,
											"end": 9276,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 9245,
											"end": 9270,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 9245,
											"end": 9270,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 9245,
											"end": 9270,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 9233,
											"end": 9235,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 9218,
											"end": 9236,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 9218,
											"end": 9236,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 9200,
											"end": 9276,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 9281,
											"end": 9529,
											"name": "tag",
											"source": 10,
											"value": "27"
										},
										{
											"begin": 9281,
											"end": 9529,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 9455,
											"end": 9480,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 9455,
											"end": 9480,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 9455,
											"end": 9480,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 9511,
											"end": 9513,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 9496,
											"end": 9514,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 9496,
											"end": 9514,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 9489,
											"end": 9523,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 9443,
											"end": 9445,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 9428,
											"end": 9446,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 9428,
											"end": 9446,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 9410,
											"end": 9529,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 9534,
											"end": 10089,
											"name": "tag",
											"source": 10,
											"value": "94"
										},
										{
											"begin": 9534,
											"end": 10089,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 9809,
											"end": 9834,
											"name": "SWAP6",
											"source": 10
										},
										{
											"begin": 9809,
											"end": 9834,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 9809,
											"end": 9834,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 9865,
											"end": 9867,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 9850,
											"end": 9868,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 9850,
											"end": 9868,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 9843,
											"end": 9877,
											"name": "SWAP5",
											"source": 10
										},
										{
											"begin": 9843,
											"end": 9877,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 9843,
											"end": 9877,
											"name": "SWAP5",
											"source": 10
										},
										{
											"begin": 9843,
											"end": 9877,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 9908,
											"end": 9910,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 9893,
											"end": 9911,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 9893,
											"end": 9911,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 9886,
											"end": 9920,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 9886,
											"end": 9920,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 9886,
											"end": 9920,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 9886,
											"end": 9920,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 9951,
											"end": 9953,
											"name": "PUSH",
											"source": 10,
											"value": "60"
										},
										{
											"begin": 9936,
											"end": 9954,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 9936,
											"end": 9954,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 9929,
											"end": 9963,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 10007,
											"end": 10021,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 10000,
											"end": 10022,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 9994,
											"end": 9997,
											"name": "PUSH",
											"source": 10,
											"value": "80"
										},
										{
											"begin": 9979,
											"end": 9998,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 9979,
											"end": 9998,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 9972,
											"end": 10023,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 10067,
											"end": 10081,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 10060,
											"end": 10082,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 10054,
											"end": 10057,
											"name": "PUSH",
											"source": 10,
											"value": "A0"
										},
										{
											"begin": 10039,
											"end": 10058,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 10039,
											"end": 10058,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 10032,
											"end": 10083,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 9796,
											"end": 9799,
											"name": "PUSH",
											"source": 10,
											"value": "C0"
										},
										{
											"begin": 9781,
											"end": 9800,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 9781,
											"end": 9800,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 9763,
											"end": 10089,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 10094,
											"end": 10629,
											"name": "tag",
											"source": 10,
											"value": "74"
										},
										{
											"begin": 10094,
											"end": 10629,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 10381,
											"end": 10406,
											"name": "SWAP6",
											"source": 10
										},
										{
											"begin": 10381,
											"end": 10406,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 10381,
											"end": 10406,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 10437,
											"end": 10439,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 10422,
											"end": 10440,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 10422,
											"end": 10440,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 10415,
											"end": 10449,
											"name": "SWAP5",
											"source": 10
										},
										{
											"begin": 10415,
											"end": 10449,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 10415,
											"end": 10449,
											"name": "SWAP5",
											"source": 10
										},
										{
											"begin": 10415,
											"end": 10449,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 10480,
											"end": 10482,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 10465,
											"end": 10483,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 10465,
											"end": 10483,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 10458,
											"end": 10492,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 10458,
											"end": 10492,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 10458,
											"end": 10492,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 10458,
											"end": 10492,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 10523,
											"end": 10525,
											"name": "PUSH",
											"source": 10,
											"value": "60"
										},
										{
											"begin": 10508,
											"end": 10526,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 10508,
											"end": 10526,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 10501,
											"end": 10535,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 10566,
											"end": 10569,
											"name": "PUSH",
											"source": 10,
											"value": "80"
										},
										{
											"begin": 10551,
											"end": 10570,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 10551,
											"end": 10570,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 10544,
											"end": 10579,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 10610,
											"end": 10613,
											"name": "PUSH",
											"source": 10,
											"value": "A0"
										},
										{
											"begin": 10595,
											"end": 10614,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 10595,
											"end": 10614,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 10588,
											"end": 10623,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 10368,
											"end": 10371,
											"name": "PUSH",
											"source": 10,
											"value": "C0"
										},
										{
											"begin": 10353,
											"end": 10372,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 10353,
											"end": 10372,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 10335,
											"end": 10629,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 10634,
											"end": 10762,
											"name": "tag",
											"source": 10,
											"value": "174"
										},
										{
											"begin": 10634,
											"end": 10762,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 10634,
											"end": 10762,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 10705,
											"end": 10706,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 10701,
											"end": 10707,
											"name": "NOT",
											"source": 10
										},
										{
											"begin": 10698,
											"end": 10699,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 10695,
											"end": 10708,
											"name": "GT",
											"source": 10
										},
										{
											"begin": 10692,
											"end": 10694,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 10692,
											"end": 10694,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "339"
										},
										{
											"begin": 10692,
											"end": 10694,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 10711,
											"end": 10729,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "339"
										},
										{
											"begin": 10711,
											"end": 10729,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "340"
										},
										{
											"begin": 10711,
											"end": 10729,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 10711,
											"end": 10729,
											"name": "tag",
											"source": 10,
											"value": "339"
										},
										{
											"begin": 10711,
											"end": 10729,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 10747,
											"end": 10756,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 10747,
											"end": 10756,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 10682,
											"end": 10762,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 10767,
											"end": 10984,
											"name": "tag",
											"source": 10,
											"value": "262"
										},
										{
											"begin": 10767,
											"end": 10984,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 10767,
											"end": 10984,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 10833,
											"end": 10834,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 10823,
											"end": 10825,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "342"
										},
										{
											"begin": 10823,
											"end": 10825,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "4E487B71"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 10858,
											"end": 10889,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 10858,
											"end": 10889,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 10912,
											"end": 10916,
											"name": "PUSH",
											"source": 10,
											"value": "12"
										},
										{
											"begin": 10909,
											"end": 10910,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 10902,
											"end": 10917,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 10940,
											"end": 10944,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 10865,
											"end": 10866,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 10930,
											"end": 10945,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 10823,
											"end": 10825,
											"name": "tag",
											"source": 10,
											"value": "342"
										},
										{
											"begin": 10823,
											"end": 10825,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 10969,
											"end": 10978,
											"name": "DIV",
											"source": 10
										},
										{
											"begin": 10969,
											"end": 10978,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 10813,
											"end": 10984,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 10989,
											"end": 11442,
											"name": "tag",
											"source": 10,
											"value": "343"
										},
										{
											"begin": 10989,
											"end": 11442,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 11085,
											"end": 11091,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 11108,
											"end": 11113,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 11122,
											"end": 11436,
											"name": "tag",
											"source": 10,
											"value": "345"
										},
										{
											"begin": 11122,
											"end": 11436,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 11171,
											"end": 11172,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 11208,
											"end": 11210,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 11198,
											"end": 11206,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 11195,
											"end": 11211,
											"name": "GT",
											"source": 10
										},
										{
											"begin": 11185,
											"end": 11187,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "348"
										},
										{
											"begin": 11185,
											"end": 11187,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 11215,
											"end": 11220,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 11215,
											"end": 11220,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "347"
										},
										{
											"begin": 11215,
											"end": 11220,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 11185,
											"end": 11187,
											"name": "tag",
											"source": 10,
											"value": "348"
										},
										{
											"begin": 11185,
											"end": 11187,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 11256,
											"end": 11260,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 11251,
											"end": 11254,
											"name": "DUP8",
											"source": 10
										},
										{
											"begin": 11247,
											"end": 11261,
											"name": "DIV",
											"source": 10
										},
										{
											"begin": 11241,
											"end": 11245,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 11238,
											"end": 11262,
											"name": "GT",
											"source": 10
										},
										{
											"begin": 11235,
											"end": 11237,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 11235,
											"end": 11237,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "350"
										},
										{
											"begin": 11235,
											"end": 11237,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 11265,
											"end": 11283,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "350"
										},
										{
											"begin": 11265,
											"end": 11283,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "340"
										},
										{
											"begin": 11265,
											"end": 11283,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 11265,
											"end": 11283,
											"name": "tag",
											"source": 10,
											"value": "350"
										},
										{
											"begin": 11265,
											"end": 11283,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 11315,
											"end": 11317,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 11305,
											"end": 11313,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 11301,
											"end": 11318,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 11298,
											"end": 11300,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 11298,
											"end": 11300,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "351"
										},
										{
											"begin": 11298,
											"end": 11300,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 11330,
											"end": 11346,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 11330,
											"end": 11346,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 11330,
											"end": 11346,
											"name": "MUL",
											"source": 10
										},
										{
											"begin": 11330,
											"end": 11346,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 11298,
											"end": 11300,
											"name": "tag",
											"source": 10,
											"value": "351"
										},
										{
											"begin": 11298,
											"end": 11300,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 11409,
											"end": 11426,
											"name": "SWAP5",
											"source": 10
										},
										{
											"begin": 11409,
											"end": 11426,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 11409,
											"end": 11426,
											"name": "SWAP5",
											"source": 10
										},
										{
											"begin": 11409,
											"end": 11426,
											"name": "SHR",
											"source": 10
										},
										{
											"begin": 11409,
											"end": 11426,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 11369,
											"end": 11384,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 11369,
											"end": 11384,
											"name": "MUL",
											"source": 10
										},
										{
											"begin": 11122,
											"end": 11436,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "345"
										},
										{
											"begin": 11122,
											"end": 11436,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 11122,
											"end": 11436,
											"name": "tag",
											"source": 10,
											"value": "347"
										},
										{
											"begin": 11122,
											"end": 11436,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 11066,
											"end": 11442,
											"name": "SWAP5",
											"source": 10
										},
										{
											"begin": 11066,
											"end": 11442,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 11066,
											"end": 11442,
											"name": "SWAP5",
											"source": 10
										},
										{
											"begin": 11066,
											"end": 11442,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 11066,
											"end": 11442,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 11066,
											"end": 11442,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 11066,
											"end": 11442,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 11066,
											"end": 11442,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 11447,
											"end": 11586,
											"name": "tag",
											"source": 10,
											"value": "131"
										},
										{
											"begin": 11447,
											"end": 11586,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 11447,
											"end": 11586,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 11536,
											"end": 11580,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "252"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 11563,
											"end": 11571,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 11557,
											"end": 11561,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 11591,
											"end": 12513,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 11675,
											"end": 11683,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 11665,
											"end": 11667,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "356"
										},
										{
											"begin": 11665,
											"end": 11667,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 11716,
											"end": 11717,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 11730,
											"end": 11735,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "289"
										},
										{
											"begin": 11730,
											"end": 11735,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 11665,
											"end": 11667,
											"name": "tag",
											"source": 10,
											"value": "356"
										},
										{
											"begin": 11665,
											"end": 11667,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 11764,
											"end": 11768,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 11754,
											"end": 11756,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "357"
										},
										{
											"begin": 11754,
											"end": 11756,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 11801,
											"end": 11802,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 11815,
											"end": 11820,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "289"
										},
										{
											"begin": 11815,
											"end": 11820,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 11754,
											"end": 11756,
											"name": "tag",
											"source": 10,
											"value": "357"
										},
										{
											"begin": 11754,
											"end": 11756,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 11846,
											"end": 11850,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 11864,
											"end": 11865,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 11859,
											"end": 11918,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 11859,
											"end": 11918,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 11859,
											"end": 11918,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "359"
										},
										{
											"begin": 11859,
											"end": 11918,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 11932,
											"end": 11933,
											"name": "PUSH",
											"source": 10,
											"value": "2"
										},
										{
											"begin": 11927,
											"end": 12110,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 11927,
											"end": 12110,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 11927,
											"end": 12110,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "360"
										},
										{
											"begin": 11927,
											"end": 12110,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 11839,
											"end": 12110,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "358"
										},
										{
											"begin": 11839,
											"end": 12110,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 11859,
											"end": 11918,
											"name": "tag",
											"source": 10,
											"value": "359"
										},
										{
											"begin": 11859,
											"end": 11918,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 11889,
											"end": 11890,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 11880,
											"end": 11890,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 11880,
											"end": 11890,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 11903,
											"end": 11908,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 11903,
											"end": 11908,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "289"
										},
										{
											"begin": 11903,
											"end": 11908,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 11927,
											"end": 12110,
											"name": "tag",
											"source": 10,
											"value": "360"
										},
										{
											"begin": 11927,
											"end": 12110,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 11964,
											"end": 11967,
											"name": "PUSH",
											"source": 10,
											"value": "FF"
										},
										{
											"begin": 11954,
											"end": 11962,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 11951,
											"end": 11968,
											"name": "GT",
											"source": 10
										},
										{
											"begin": 11948,
											"end": 11950,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 11948,
											"end": 11950,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "362"
										},
										{
											"begin": 11948,
											"end": 11950,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 11971,
											"end": 11989,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "362"
										},
										{
											"begin": 11971,
											"end": 11989,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "340"
										},
										{
											"begin": 11971,
											"end": 11989,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 11971,
											"end": 11989,
											"name": "tag",
											"source": 10,
											"value": "362"
										},
										{
											"begin": 11971,
											"end": 11989,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 12027,
											"end": 12028,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 12017,
											"end": 12025,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 12013,
											"end": 12029,
											"name": "SHL",
											"source": 10
										},
										{
											"begin": 12004,
											"end": 12029,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 12004,
											"end": 12029,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 12055,
											"end": 12058,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 12048,
											"end": 12053,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 12045,
											"end": 12059,
											"name": "GT",
											"source": 10
										},
										{
											"begin": 12042,
											"end": 12044,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 12042,
											"end": 12044,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "364"
										},
										{
											"begin": 12042,
											"end": 12044,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 12062,
											"end": 12080,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "364"
										},
										{
											"begin": 12062,
											"end": 12080,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "340"
										},
										{
											"begin": 12062,
											"end": 12080,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 12062,
											"end": 12080,
											"name": "tag",
											"source": 10,
											"value": "364"
										},
										{
											"begin": 12062,
											"end": 12080,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 12095,
											"end": 12100,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 12095,
											"end": 12100,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "289"
										},
										{
											"begin": 12095,
											"end": 12100,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 11839,
											"end": 12110,
											"name": "tag",
											"source": 10,
											"value": "358"
										},
										{
											"begin": 11839,
											"end": 12110,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 11839,
											"end": 12110,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 12194,
											"end": 12196,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 12184,
											"end": 12192,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 12181,
											"end": 12197,
											"name": "LT",
											"source": 10
										},
										{
											"begin": 12175,
											"end": 12178,
											"name": "PUSH",
											"source": 10,
											"value": "133"
										},
										{
											"begin": 12169,
											"end": 12173,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 12166,
											"end": 12179,
											"name": "LT",
											"source": 10
										},
										{
											"begin": 12162,
											"end": 12198,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 12156,
											"end": 12158,
											"name": "PUSH",
											"source": 10,
											"value": "4E"
										},
										{
											"begin": 12146,
											"end": 12154,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 12143,
											"end": 12159,
											"name": "LT",
											"source": 10
										},
										{
											"begin": 12138,
											"end": 12140,
											"name": "PUSH",
											"source": 10,
											"value": "B"
										},
										{
											"begin": 12132,
											"end": 12136,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 12129,
											"end": 12141,
											"name": "LT",
											"source": 10
										},
										{
											"begin": 12125,
											"end": 12160,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 12122,
											"end": 12199,
											"name": "OR",
											"source": 10
										},
										{
											"begin": 12119,
											"end": 12121,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 12119,
											"end": 12121,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "365"
										},
										{
											"begin": 12119,
											"end": 12121,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 12231,
											"end": 12250,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 12231,
											"end": 12250,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 12231,
											"end": 12250,
											"name": "EXP",
											"source": 10
										},
										{
											"begin": 12266,
											"end": 12280,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 12266,
											"end": 12280,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 12266,
											"end": 12280,
											"name": "GT",
											"source": 10
										},
										{
											"begin": 12263,
											"end": 12265,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 12263,
											"end": 12265,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "367"
										},
										{
											"begin": 12263,
											"end": 12265,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 12283,
											"end": 12301,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "367"
										},
										{
											"begin": 12283,
											"end": 12301,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "340"
										},
										{
											"begin": 12283,
											"end": 12301,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 12283,
											"end": 12301,
											"name": "tag",
											"source": 10,
											"value": "367"
										},
										{
											"begin": 12283,
											"end": 12301,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 12316,
											"end": 12321,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "289"
										},
										{
											"begin": 12316,
											"end": 12321,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 12119,
											"end": 12121,
											"name": "tag",
											"source": 10,
											"value": "365"
										},
										{
											"begin": 12119,
											"end": 12121,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 12363,
											"end": 12405,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "368"
										},
										{
											"begin": 12401,
											"end": 12404,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 12391,
											"end": 12399,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 12385,
											"end": 12389,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 12382,
											"end": 12383,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 12363,
											"end": 12405,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "343"
										},
										{
											"begin": 12363,
											"end": 12405,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 12363,
											"end": 12405,
											"name": "tag",
											"source": 10,
											"value": "368"
										},
										{
											"begin": 12363,
											"end": 12405,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 12438,
											"end": 12444,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 12433,
											"end": 12436,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 12429,
											"end": 12445,
											"name": "DIV",
											"source": 10
										},
										{
											"begin": 12420,
											"end": 12427,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 12417,
											"end": 12446,
											"name": "GT",
											"source": 10
										},
										{
											"begin": 12414,
											"end": 12416,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 12414,
											"end": 12416,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "370"
										},
										{
											"begin": 12414,
											"end": 12416,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 12449,
											"end": 12467,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "370"
										},
										{
											"begin": 12449,
											"end": 12467,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "340"
										},
										{
											"begin": 12449,
											"end": 12467,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 12449,
											"end": 12467,
											"name": "tag",
											"source": 10,
											"value": "370"
										},
										{
											"begin": 12449,
											"end": 12467,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 12487,
											"end": 12507,
											"name": "MUL",
											"source": 10
										},
										{
											"begin": 12487,
											"end": 12507,
											"name": "SWAP5",
											"source": 10
										},
										{
											"begin": 11655,
											"end": 12513,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 11655,
											"end": 12513,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 12518,
											"end": 12686,
											"name": "tag",
											"source": 10,
											"value": "134"
										},
										{
											"begin": 12518,
											"end": 12686,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 12518,
											"end": 12686,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 12624,
											"end": 12625,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 12620,
											"end": 12621,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 12616,
											"end": 12622,
											"name": "NOT",
											"source": 10
										},
										{
											"begin": 12612,
											"end": 12626,
											"name": "DIV",
											"source": 10
										},
										{
											"begin": 12609,
											"end": 12610,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 12606,
											"end": 12627,
											"name": "GT",
											"source": 10
										},
										{
											"begin": 12601,
											"end": 12602,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 12594,
											"end": 12603,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 12587,
											"end": 12604,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 12583,
											"end": 12628,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 12580,
											"end": 12582,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 12580,
											"end": 12582,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "373"
										},
										{
											"begin": 12580,
											"end": 12582,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 12631,
											"end": 12649,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "373"
										},
										{
											"begin": 12631,
											"end": 12649,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "340"
										},
										{
											"begin": 12631,
											"end": 12649,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 12631,
											"end": 12649,
											"name": "tag",
											"source": 10,
											"value": "373"
										},
										{
											"begin": 12631,
											"end": 12649,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 12671,
											"end": 12680,
											"name": "MUL",
											"source": 10
										},
										{
											"begin": 12671,
											"end": 12680,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 12570,
											"end": 12686,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 12691,
											"end": 12816,
											"name": "tag",
											"source": 10,
											"value": "161"
										},
										{
											"begin": 12691,
											"end": 12816,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 12691,
											"end": 12816,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 12759,
											"end": 12760,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 12756,
											"end": 12757,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 12753,
											"end": 12761,
											"name": "LT",
											"source": 10
										},
										{
											"begin": 12750,
											"end": 12752,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 12750,
											"end": 12752,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "376"
										},
										{
											"begin": 12750,
											"end": 12752,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 12764,
											"end": 12782,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "376"
										},
										{
											"begin": 12764,
											"end": 12782,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "340"
										},
										{
											"begin": 12764,
											"end": 12782,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 12764,
											"end": 12782,
											"name": "tag",
											"source": 10,
											"value": "376"
										},
										{
											"begin": 12764,
											"end": 12782,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 12801,
											"end": 12810,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 12801,
											"end": 12810,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 12740,
											"end": 12816,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 12821,
											"end": 12956,
											"name": "tag",
											"source": 10,
											"value": "222"
										},
										{
											"begin": 12821,
											"end": 12956,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 12821,
											"end": 12956,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 12881,
											"end": 12898,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 12881,
											"end": 12898,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 12878,
											"end": 12880,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 12878,
											"end": 12880,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "379"
										},
										{
											"begin": 12878,
											"end": 12880,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 12901,
											"end": 12919,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "379"
										},
										{
											"begin": 12901,
											"end": 12919,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "340"
										},
										{
											"begin": 12901,
											"end": 12919,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 12901,
											"end": 12919,
											"name": "tag",
											"source": 10,
											"value": "379"
										},
										{
											"begin": 12901,
											"end": 12919,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 12948,
											"end": 12949,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 12937,
											"end": 12950,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 12937,
											"end": 12950,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 12868,
											"end": 12956,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 12961,
											"end": 13088,
											"name": "tag",
											"source": 10,
											"value": "340"
										},
										{
											"begin": 12961,
											"end": 13088,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 13022,
											"end": 13032,
											"name": "PUSH",
											"source": 10,
											"value": "4E487B71"
										},
										{
											"begin": 13017,
											"end": 13020,
											"name": "PUSH",
											"source": 10,
											"value": "E0"
										},
										{
											"begin": 13013,
											"end": 13033,
											"name": "SHL",
											"source": 10
										},
										{
											"begin": 13010,
											"end": 13011,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 13003,
											"end": 13034,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 13053,
											"end": 13057,
											"name": "PUSH",
											"source": 10,
											"value": "11"
										},
										{
											"begin": 13050,
											"end": 13051,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 13043,
											"end": 13058,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 13077,
											"end": 13081,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 13074,
											"end": 13075,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 13067,
											"end": 13082,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 13093,
											"end": 13220,
											"name": "tag",
											"source": 10,
											"value": "299"
										},
										{
											"begin": 13093,
											"end": 13220,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 13154,
											"end": 13164,
											"name": "PUSH",
											"source": 10,
											"value": "4E487B71"
										},
										{
											"begin": 13149,
											"end": 13152,
											"name": "PUSH",
											"source": 10,
											"value": "E0"
										},
										{
											"begin": 13145,
											"end": 13165,
											"name": "SHL",
											"source": 10
										},
										{
											"begin": 13142,
											"end": 13143,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 13135,
											"end": 13166,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 13185,
											"end": 13189,
											"name": "PUSH",
											"source": 10,
											"value": "41"
										},
										{
											"begin": 13182,
											"end": 13183,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 13175,
											"end": 13190,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 13209,
											"end": 13213,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 13206,
											"end": 13207,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 13199,
											"end": 13214,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 13225,
											"end": 13358,
											"name": "tag",
											"source": 10,
											"value": "290"
										},
										{
											"begin": 13225,
											"end": 13358,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 13302,
											"end": 13333,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 13302,
											"end": 13333,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 13292,
											"end": 13334,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 13292,
											"end": 13334,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 13282,
											"end": 13284,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "122"
										},
										{
											"begin": 13282,
											"end": 13284,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 13348,
											"end": 13349,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 13345,
											"end": 13346,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 13338,
											"end": 13350,
											"name": "REVERT",
											"source": 10
										}
									]
								}
							}
						},
						"methodIdentifiers": {
							"WETH()": "ad5c4648",
							"backToken()": "861faf5f",
							"buyerInfo(address)": "e2d3f423",
							"checkAdminAddress()": "cad5b0f7",
							"deposit(uint256)": "b6b55f25",
							"feeAnyone()": "3b5ef2ad",
							"getBalance(address)": "f8b2cb4f",
							"initialSaleInfor(address,address,address,uint256[9])": "8f1eae4c",
							"owner()": "8da5cb5b",
							"presaleStatus()": "acfb2355",
							"renounceOwnership()": "715018a6",
							"saleInfor()": "18856a2f",
							"saleTotalSupply()": "12e5d0b9",
							"status()": "200d2ed2",
							"totalFee()": "1df4ccfc",
							"transferOwnership(address)": "f2fde38b",
							"userClaimEmergency()": "ab33985a",
							"userFee(address)": "56c5f349"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"backToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"buyerInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"baseDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenOwner\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastWithDraw\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalTokenWithDraw\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isRefund\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isClaim\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkAdminAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeAnyone\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_presaleOwner\",\"type\":\"address\"},{\"internalType\":\"contract ERC20\",\"name\":\"_saleToken\",\"type\":\"address\"},{\"internalType\":\"contract ERC20\",\"name\":\"_baseTOken\",\"type\":\"address\"},{\"internalType\":\"uint256[9]\",\"name\":\"datas\",\"type\":\"uint256[9]\"}],\"name\":\"initialSaleInfor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleStatus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalBaseCollected\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalTokenSold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalTokenWithDraw\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBaseWithDraw\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numberBuyer\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saleInfor\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"presaleOwner\",\"type\":\"address\"},{\"internalType\":\"contract ERC20\",\"name\":\"saleToken\",\"type\":\"address\"},{\"internalType\":\"contract ERC20\",\"name\":\"baseToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startSale\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endSale\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minSpendPerBuyer\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSpendPerBuyer\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"refundFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimFee\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"saleIsBaseToken\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amountTokenForSale\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saleTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"hardCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"softCap\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"status\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"userClaimEmergency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"Ethereum/Presale.sol\":\"Presale\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"ERC20/ERC20.sol\":{\"keccak256\":\"0x06de64a6e4f0f98aaf7bc91b3826b714e7ce7827a08da3031f8f2f91c14c5687\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://79cb85a1ebbc907f8b80a26cfce98cd61eb1dfc5dbed47f2cc5f6e7a3e87d2db\",\"dweb:/ipfs/QmWzRXkG6oFwtNiGz98zduSDVYhnTKkCE5YMTVE15fBFse\"]},\"ERC20/IERC20.sol\":{\"keccak256\":\"0x62e7e272bf9d2c10b294645ea698d7fc41dadc18146ac88e9b9cc18514faacc1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e09024b0f1ddb94bdc13008d4c221747b1a6f1e07b0ca599d8d213925982af34\",\"dweb:/ipfs/QmcL6X4KCFc45tk5xSEgBDFUrsKap8G74aJtti5sUYzYCL\"]},\"ERC20/IERC20Metadata.sol\":{\"keccak256\":\"0x2095e6b6cd9fc67a55c1dce6c4a4282036fef487baf848e399adc2f571f6c47b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bbdbc5c7af217e674e7c45ab729cf3ffe1c2756c4438e5818f39f30266b836e2\",\"dweb:/ipfs/QmPkmQQ6bAVYGRKR1KMqRhU1kPL49aFc5zqCLmJZEMsavE\"]},\"Ethereum/Presale.sol\":{\"keccak256\":\"0x236622fe25812d8ab0de028a2d0a2e71e50f05923f9f0be91fc1ec75f22d1804\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://926f63172153b546f251697b0e672172c5244c7e3b3f9c59539f580ede55e948\",\"dweb:/ipfs/QmNiH2aTnw8L7axBtqTjqrhMP5YALuF4BJrEuparqMejQi\"]},\"Utils/Context.sol\":{\"keccak256\":\"0x81d5fc973a522c8909d60be6a201869d46aa47b030b8813f60616404628c2b94\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9755b505799e622d964a843a8ed1fd60fedffca230178e5cb95ae9280df4dcd2\",\"dweb:/ipfs/QmRkhUYUUgRZ2QYJjmtQct2ubyYwS3bdUMhbuFYM12VfYn\"]},\"Utils/EnumerableSet.sol\":{\"keccak256\":\"0x8adfeb5c886c6a727bdeac6db8e78f418e09f16f7c941c7111125b59ec2fd838\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://632e2346228015ce98183a0f0658057a9f2ae8b8d25b639eb9303e8e0ea34957\",\"dweb:/ipfs/QmPY3nbe3JhMsgyHJTtXRkLTioW997Bvizt23mPNKKGSgu\"]},\"Utils/Ownable.sol\":{\"keccak256\":\"0x5eeb86897007c578f301464fceac720c7330486c54ae85c0c09068b46197cfb9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://edefd9ff4f087a3016763a687eaae449c0e8f6dcda9d86032a49de900f129050\",\"dweb:/ipfs/Qmc4adiPdGKgEJLxqgd8JuKkwrNBNtB78kkGinnnuUnyJN\"]},\"Utils/ReentrancyGuard.sol\":{\"keccak256\":\"0x5531a4a8604939470e38d88dbb16a35c38cf17a3d66393fe9c73b5da561615df\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d0fd4ce017408e0e7cda8bb02298443533e2fbb261878df176374bee5c3e4adf\",\"dweb:/ipfs/QmPhT3sFavHxyWopC7f1Ukzw1TDmmkzr5te24Btuvunpz1\"]},\"Utils/SafeMath.sol\":{\"keccak256\":\"0xdc9b51d94a1db880c1f2e722af561c28c41100eea201b1ae5e77eb7c4250e389\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0b69f7fb378dcfd4aff8ba0547a575485d2d4bb567381e3bf8c593b63272ffc0\",\"dweb:/ipfs/QmaEo28ZDAnpDvpQRRt7Qc8bF5QgJAnTEE4TxYnJS8YmnN\"]},\"Utils/TransferHelper.sol\":{\"keccak256\":\"0xf64de8bda44d6e6a0ef231b637d0d6c78522fd561464c547eeca34f1a8e0482c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d36e8e7a9c1c50e24298b33bbde7e9d74998b58c889b706c80f95d130952d9e7\",\"dweb:/ipfs/QmP5sAxCH4LFZFJ9uxtFdCdZ3DPJJfv1iU6cHY19urExxw\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 2129,
								"contract": "Ethereum/Presale.sol:Presale",
								"label": "_status",
								"offset": 0,
								"slot": "0",
								"type": "t_uint256"
							},
							{
								"astId": 2021,
								"contract": "Ethereum/Presale.sol:Presale",
								"label": "_owner",
								"offset": 0,
								"slot": "1",
								"type": "t_address"
							},
							{
								"astId": 774,
								"contract": "Ethereum/Presale.sol:Presale",
								"label": "buyerInfo",
								"offset": 0,
								"slot": "2",
								"type": "t_mapping(t_address,t_struct(BuyerInfo)753_storage)"
							},
							{
								"astId": 778,
								"contract": "Ethereum/Presale.sol:Presale",
								"label": "userFee",
								"offset": 0,
								"slot": "3",
								"type": "t_mapping(t_address,t_uint256)"
							},
							{
								"astId": 781,
								"contract": "Ethereum/Presale.sol:Presale",
								"label": "presaleStatus",
								"offset": 0,
								"slot": "4",
								"type": "t_struct(PresaleStatus)769_storage"
							},
							{
								"astId": 784,
								"contract": "Ethereum/Presale.sol:Presale",
								"label": "saleTotalSupply",
								"offset": 0,
								"slot": "11",
								"type": "t_struct(SaleTotalSupply)740_storage"
							},
							{
								"astId": 787,
								"contract": "Ethereum/Presale.sol:Presale",
								"label": "saleInfor",
								"offset": 0,
								"slot": "13",
								"type": "t_struct(SaleInfor)735_storage"
							},
							{
								"astId": 790,
								"contract": "Ethereum/Presale.sol:Presale",
								"label": "WETH",
								"offset": 0,
								"slot": "25",
								"type": "t_contract(IERC20)663"
							},
							{
								"astId": 792,
								"contract": "Ethereum/Presale.sol:Presale",
								"label": "feeAnyone",
								"offset": 0,
								"slot": "26",
								"type": "t_uint256"
							},
							{
								"astId": 795,
								"contract": "Ethereum/Presale.sol:Presale",
								"label": "admins",
								"offset": 0,
								"slot": "27",
								"type": "t_struct(AddressSet)1726_storage"
							},
							{
								"astId": 797,
								"contract": "Ethereum/Presale.sol:Presale",
								"label": "totalFee",
								"offset": 0,
								"slot": "29",
								"type": "t_uint256"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_address_payable": {
								"encoding": "inplace",
								"label": "address payable",
								"numberOfBytes": "20"
							},
							"t_array(t_address)dyn_storage": {
								"base": "t_address",
								"encoding": "dynamic_array",
								"label": "address[]",
								"numberOfBytes": "32"
							},
							"t_array(t_bytes32)dyn_storage": {
								"base": "t_bytes32",
								"encoding": "dynamic_array",
								"label": "bytes32[]",
								"numberOfBytes": "32"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_bytes32": {
								"encoding": "inplace",
								"label": "bytes32",
								"numberOfBytes": "32"
							},
							"t_contract(ERC20)585": {
								"encoding": "inplace",
								"label": "contract ERC20",
								"numberOfBytes": "20"
							},
							"t_contract(IERC20)663": {
								"encoding": "inplace",
								"label": "contract IERC20",
								"numberOfBytes": "20"
							},
							"t_mapping(t_address,t_struct(BuyerInfo)753_storage)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => struct Presale.BuyerInfo)",
								"numberOfBytes": "32",
								"value": "t_struct(BuyerInfo)753_storage"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_mapping(t_bytes32,t_uint256)": {
								"encoding": "mapping",
								"key": "t_bytes32",
								"label": "mapping(bytes32 => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_struct(AddressSet)1726_storage": {
								"encoding": "inplace",
								"label": "struct EnumerableSet.AddressSet",
								"members": [
									{
										"astId": 1725,
										"contract": "Ethereum/Presale.sol:Presale",
										"label": "_inner",
										"offset": 0,
										"slot": "0",
										"type": "t_struct(Set)1425_storage"
									}
								],
								"numberOfBytes": "64"
							},
							"t_struct(BuyerInfo)753_storage": {
								"encoding": "inplace",
								"label": "struct Presale.BuyerInfo",
								"members": [
									{
										"astId": 742,
										"contract": "Ethereum/Presale.sol:Presale",
										"label": "baseDeposit",
										"offset": 0,
										"slot": "0",
										"type": "t_uint256"
									},
									{
										"astId": 744,
										"contract": "Ethereum/Presale.sol:Presale",
										"label": "tokenOwner",
										"offset": 0,
										"slot": "1",
										"type": "t_uint256"
									},
									{
										"astId": 746,
										"contract": "Ethereum/Presale.sol:Presale",
										"label": "lastWithDraw",
										"offset": 0,
										"slot": "2",
										"type": "t_uint256"
									},
									{
										"astId": 748,
										"contract": "Ethereum/Presale.sol:Presale",
										"label": "totalTokenWithDraw",
										"offset": 0,
										"slot": "3",
										"type": "t_uint256"
									},
									{
										"astId": 750,
										"contract": "Ethereum/Presale.sol:Presale",
										"label": "isRefund",
										"offset": 0,
										"slot": "4",
										"type": "t_bool"
									},
									{
										"astId": 752,
										"contract": "Ethereum/Presale.sol:Presale",
										"label": "isClaim",
										"offset": 1,
										"slot": "4",
										"type": "t_bool"
									}
								],
								"numberOfBytes": "160"
							},
							"t_struct(PresaleStatus)769_storage": {
								"encoding": "inplace",
								"label": "struct Presale.PresaleStatus",
								"members": [
									{
										"astId": 755,
										"contract": "Ethereum/Presale.sol:Presale",
										"label": "totalBaseCollected",
										"offset": 0,
										"slot": "0",
										"type": "t_uint256"
									},
									{
										"astId": 757,
										"contract": "Ethereum/Presale.sol:Presale",
										"label": "totalTokenSold",
										"offset": 0,
										"slot": "1",
										"type": "t_uint256"
									},
									{
										"astId": 759,
										"contract": "Ethereum/Presale.sol:Presale",
										"label": "totalTokenWithDraw",
										"offset": 0,
										"slot": "2",
										"type": "t_uint256"
									},
									{
										"astId": 761,
										"contract": "Ethereum/Presale.sol:Presale",
										"label": "totalBaseWithDraw",
										"offset": 0,
										"slot": "3",
										"type": "t_uint256"
									},
									{
										"astId": 763,
										"contract": "Ethereum/Presale.sol:Presale",
										"label": "numberBuyer",
										"offset": 0,
										"slot": "4",
										"type": "t_uint256"
									},
									{
										"astId": 765,
										"contract": "Ethereum/Presale.sol:Presale",
										"label": "totalFee",
										"offset": 0,
										"slot": "5",
										"type": "t_uint256"
									},
									{
										"astId": 768,
										"contract": "Ethereum/Presale.sol:Presale",
										"label": "admin",
										"offset": 0,
										"slot": "6",
										"type": "t_array(t_address)dyn_storage"
									}
								],
								"numberOfBytes": "224"
							},
							"t_struct(SaleInfor)735_storage": {
								"encoding": "inplace",
								"label": "struct Presale.SaleInfor",
								"members": [
									{
										"astId": 710,
										"contract": "Ethereum/Presale.sol:Presale",
										"label": "presaleOwner",
										"offset": 0,
										"slot": "0",
										"type": "t_address_payable"
									},
									{
										"astId": 713,
										"contract": "Ethereum/Presale.sol:Presale",
										"label": "saleToken",
										"offset": 0,
										"slot": "1",
										"type": "t_contract(ERC20)585"
									},
									{
										"astId": 716,
										"contract": "Ethereum/Presale.sol:Presale",
										"label": "baseToken",
										"offset": 0,
										"slot": "2",
										"type": "t_contract(ERC20)585"
									},
									{
										"astId": 718,
										"contract": "Ethereum/Presale.sol:Presale",
										"label": "tokenPrice",
										"offset": 0,
										"slot": "3",
										"type": "t_uint256"
									},
									{
										"astId": 720,
										"contract": "Ethereum/Presale.sol:Presale",
										"label": "startSale",
										"offset": 0,
										"slot": "4",
										"type": "t_uint256"
									},
									{
										"astId": 722,
										"contract": "Ethereum/Presale.sol:Presale",
										"label": "endSale",
										"offset": 0,
										"slot": "5",
										"type": "t_uint256"
									},
									{
										"astId": 724,
										"contract": "Ethereum/Presale.sol:Presale",
										"label": "minSpendPerBuyer",
										"offset": 0,
										"slot": "6",
										"type": "t_uint256"
									},
									{
										"astId": 726,
										"contract": "Ethereum/Presale.sol:Presale",
										"label": "maxSpendPerBuyer",
										"offset": 0,
										"slot": "7",
										"type": "t_uint256"
									},
									{
										"astId": 728,
										"contract": "Ethereum/Presale.sol:Presale",
										"label": "refundFee",
										"offset": 0,
										"slot": "8",
										"type": "t_uint256"
									},
									{
										"astId": 730,
										"contract": "Ethereum/Presale.sol:Presale",
										"label": "claimFee",
										"offset": 0,
										"slot": "9",
										"type": "t_uint256"
									},
									{
										"astId": 732,
										"contract": "Ethereum/Presale.sol:Presale",
										"label": "saleIsBaseToken",
										"offset": 0,
										"slot": "10",
										"type": "t_bool"
									},
									{
										"astId": 734,
										"contract": "Ethereum/Presale.sol:Presale",
										"label": "amountTokenForSale",
										"offset": 0,
										"slot": "11",
										"type": "t_uint256"
									}
								],
								"numberOfBytes": "384"
							},
							"t_struct(SaleTotalSupply)740_storage": {
								"encoding": "inplace",
								"label": "struct Presale.SaleTotalSupply",
								"members": [
									{
										"astId": 737,
										"contract": "Ethereum/Presale.sol:Presale",
										"label": "hardCap",
										"offset": 0,
										"slot": "0",
										"type": "t_uint256"
									},
									{
										"astId": 739,
										"contract": "Ethereum/Presale.sol:Presale",
										"label": "softCap",
										"offset": 0,
										"slot": "1",
										"type": "t_uint256"
									}
								],
								"numberOfBytes": "64"
							},
							"t_struct(Set)1425_storage": {
								"encoding": "inplace",
								"label": "struct EnumerableSet.Set",
								"members": [
									{
										"astId": 1420,
										"contract": "Ethereum/Presale.sol:Presale",
										"label": "_values",
										"offset": 0,
										"slot": "0",
										"type": "t_array(t_bytes32)dyn_storage"
									},
									{
										"astId": 1424,
										"contract": "Ethereum/Presale.sol:Presale",
										"label": "_indexes",
										"offset": 0,
										"slot": "1",
										"type": "t_mapping(t_bytes32,t_uint256)"
									}
								],
								"numberOfBytes": "64"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"Utils/Context.sol": {
				"Context": {
					"abi": [],
					"devdoc": {
						"details": "Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"Utils/Context.sol\":\"Context\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"Utils/Context.sol\":{\"keccak256\":\"0x81d5fc973a522c8909d60be6a201869d46aa47b030b8813f60616404628c2b94\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9755b505799e622d964a843a8ed1fd60fedffca230178e5cb95ae9280df4dcd2\",\"dweb:/ipfs/QmRkhUYUUgRZ2QYJjmtQct2ubyYwS3bdUMhbuFYM12VfYn\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"Utils/EnumerableSet.sol": {
				"EnumerableSet": {
					"abi": [],
					"devdoc": {
						"details": "Library for managing https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive types. Sets have the following properties: - Elements are added, removed, and checked for existence in constant time (O(1)). - Elements are enumerated in O(n). No guarantees are made on the ordering. ``` contract Example {     // Add the library methods     using EnumerableSet for EnumerableSet.AddressSet;     // Declare a set state variable     EnumerableSet.AddressSet private mySet; } ``` As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`) and `uint256` (`UintSet`) are supported. [WARNING] ====  Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable.  See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.  In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet. ====",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"Utils/EnumerableSet.sol\":1265:13048  library EnumerableSet {\r... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"Utils/EnumerableSet.sol\":1265:13048  library EnumerableSet {\r... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa264697066735822122099883a82806e44a2d2c439fdbd9ef9453412b7925c6e0a68c790248a005674c164736f6c63430008000033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122099883a82806e44a2d2c439fdbd9ef9453412b7925c6e0a68c790248a005674c164736f6c63430008000033",
							"opcodes": "PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP10 DUP9 GASPRICE DUP3 DUP1 PUSH15 0x44A2D2C439FDBD9EF9453412B7925C PUSH15 0xA68C790248A005674C164736F6C63 NUMBER STOP ADDMOD STOP STOP CALLER ",
							"sourceMap": "1265:11783:5:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;1265:11783:5;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122099883a82806e44a2d2c439fdbd9ef9453412b7925c6e0a68c790248a005674c164736f6c63430008000033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP10 DUP9 GASPRICE DUP3 DUP1 PUSH15 0x44A2D2C439FDBD9EF9453412B7925C PUSH15 0xA68C790248A005674C164736F6C63 NUMBER STOP ADDMOD STOP STOP CALLER ",
							"sourceMap": "1265:11783:5:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "103",
								"totalCost": "17303"
							},
							"internal": {
								"_add(struct EnumerableSet.Set storage pointer,bytes32)": "infinite",
								"_at(struct EnumerableSet.Set storage pointer,uint256)": "infinite",
								"_contains(struct EnumerableSet.Set storage pointer,bytes32)": "infinite",
								"_length(struct EnumerableSet.Set storage pointer)": "infinite",
								"_remove(struct EnumerableSet.Set storage pointer,bytes32)": "infinite",
								"_values(struct EnumerableSet.Set storage pointer)": "infinite",
								"add(struct EnumerableSet.AddressSet storage pointer,address)": "infinite",
								"add(struct EnumerableSet.Bytes32Set storage pointer,bytes32)": "infinite",
								"add(struct EnumerableSet.UintSet storage pointer,uint256)": "infinite",
								"at(struct EnumerableSet.AddressSet storage pointer,uint256)": "infinite",
								"at(struct EnumerableSet.Bytes32Set storage pointer,uint256)": "infinite",
								"at(struct EnumerableSet.UintSet storage pointer,uint256)": "infinite",
								"contains(struct EnumerableSet.AddressSet storage pointer,address)": "infinite",
								"contains(struct EnumerableSet.Bytes32Set storage pointer,bytes32)": "infinite",
								"contains(struct EnumerableSet.UintSet storage pointer,uint256)": "infinite",
								"length(struct EnumerableSet.AddressSet storage pointer)": "infinite",
								"length(struct EnumerableSet.Bytes32Set storage pointer)": "infinite",
								"length(struct EnumerableSet.UintSet storage pointer)": "infinite",
								"remove(struct EnumerableSet.AddressSet storage pointer,address)": "infinite",
								"remove(struct EnumerableSet.Bytes32Set storage pointer,bytes32)": "infinite",
								"remove(struct EnumerableSet.UintSet storage pointer,uint256)": "infinite",
								"values(struct EnumerableSet.AddressSet storage pointer)": "infinite",
								"values(struct EnumerableSet.Bytes32Set storage pointer)": "infinite",
								"values(struct EnumerableSet.UintSet storage pointer)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 1265,
									"end": 13048,
									"name": "PUSH #[$]",
									"source": 5,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1265,
									"end": 13048,
									"name": "PUSH [$]",
									"source": 5,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1265,
									"end": 13048,
									"name": "PUSH",
									"source": 5,
									"value": "B"
								},
								{
									"begin": 1265,
									"end": 13048,
									"name": "DUP3",
									"source": 5
								},
								{
									"begin": 1265,
									"end": 13048,
									"name": "DUP3",
									"source": 5
								},
								{
									"begin": 1265,
									"end": 13048,
									"name": "DUP3",
									"source": 5
								},
								{
									"begin": 1265,
									"end": 13048,
									"name": "CODECOPY",
									"source": 5
								},
								{
									"begin": 1265,
									"end": 13048,
									"name": "DUP1",
									"source": 5
								},
								{
									"begin": 1265,
									"end": 13048,
									"name": "MLOAD",
									"source": 5
								},
								{
									"begin": 1265,
									"end": 13048,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 1265,
									"end": 13048,
									"name": "BYTE",
									"source": 5
								},
								{
									"begin": 1265,
									"end": 13048,
									"name": "PUSH",
									"source": 5,
									"value": "73"
								},
								{
									"begin": 1265,
									"end": 13048,
									"name": "EQ",
									"source": 5
								},
								{
									"begin": 1265,
									"end": 13048,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "1"
								},
								{
									"begin": 1265,
									"end": 13048,
									"name": "JUMPI",
									"source": 5
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 1265,
									"end": 13048,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 1265,
									"end": 13048,
									"name": "MSTORE",
									"source": 5
								},
								{
									"begin": 1265,
									"end": 13048,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 1265,
									"end": 13048,
									"name": "PUSH",
									"source": 5,
									"value": "4"
								},
								{
									"begin": 1265,
									"end": 13048,
									"name": "MSTORE",
									"source": 5
								},
								{
									"begin": 1265,
									"end": 13048,
									"name": "PUSH",
									"source": 5,
									"value": "24"
								},
								{
									"begin": 1265,
									"end": 13048,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 1265,
									"end": 13048,
									"name": "REVERT",
									"source": 5
								},
								{
									"begin": 1265,
									"end": 13048,
									"name": "tag",
									"source": 5,
									"value": "1"
								},
								{
									"begin": 1265,
									"end": 13048,
									"name": "JUMPDEST",
									"source": 5
								},
								{
									"begin": 1265,
									"end": 13048,
									"name": "ADDRESS",
									"source": 5
								},
								{
									"begin": 1265,
									"end": 13048,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 1265,
									"end": 13048,
									"name": "MSTORE",
									"source": 5
								},
								{
									"begin": 1265,
									"end": 13048,
									"name": "PUSH",
									"source": 5,
									"value": "73"
								},
								{
									"begin": 1265,
									"end": 13048,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 1265,
									"end": 13048,
									"name": "MSTORE8",
									"source": 5
								},
								{
									"begin": 1265,
									"end": 13048,
									"name": "DUP3",
									"source": 5
								},
								{
									"begin": 1265,
									"end": 13048,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 1265,
									"end": 13048,
									"name": "RETURN",
									"source": 5
								}
							],
							".data": {
								"0": {
									".auxdata": "a264697066735822122099883a82806e44a2d2c439fdbd9ef9453412b7925c6e0a68c790248a005674c164736f6c63430008000033",
									".code": [
										{
											"begin": 1265,
											"end": 13048,
											"name": "PUSHDEPLOYADDRESS",
											"source": 5
										},
										{
											"begin": 1265,
											"end": 13048,
											"name": "ADDRESS",
											"source": 5
										},
										{
											"begin": 1265,
											"end": 13048,
											"name": "EQ",
											"source": 5
										},
										{
											"begin": 1265,
											"end": 13048,
											"name": "PUSH",
											"source": 5,
											"value": "80"
										},
										{
											"begin": 1265,
											"end": 13048,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 1265,
											"end": 13048,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 1265,
											"end": 13048,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 1265,
											"end": 13048,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 1265,
											"end": 13048,
											"name": "REVERT",
											"source": 5
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Library for managing https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive types. Sets have the following properties: - Elements are added, removed, and checked for existence in constant time (O(1)). - Elements are enumerated in O(n). No guarantees are made on the ordering. ``` contract Example {     // Add the library methods     using EnumerableSet for EnumerableSet.AddressSet;     // Declare a set state variable     EnumerableSet.AddressSet private mySet; } ``` As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`) and `uint256` (`UintSet`) are supported. [WARNING] ====  Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable.  See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.  In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet. ====\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"Utils/EnumerableSet.sol\":\"EnumerableSet\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"Utils/EnumerableSet.sol\":{\"keccak256\":\"0x8adfeb5c886c6a727bdeac6db8e78f418e09f16f7c941c7111125b59ec2fd838\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://632e2346228015ce98183a0f0658057a9f2ae8b8d25b639eb9303e8e0ea34957\",\"dweb:/ipfs/QmPY3nbe3JhMsgyHJTtXRkLTioW997Bvizt23mPNKKGSgu\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"Utils/Ownable.sol": {
				"Ownable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.",
						"kind": "dev",
						"methods": {
							"constructor": {
								"details": "Initializes the contract setting the deployer as the initial owner."
							},
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"owner()": "8da5cb5b",
							"renounceOwnership()": "715018a6",
							"transferOwnership(address)": "f2fde38b"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the contract setting the deployer as the initial owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"Utils/Ownable.sol\":\"Ownable\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"Utils/Context.sol\":{\"keccak256\":\"0x81d5fc973a522c8909d60be6a201869d46aa47b030b8813f60616404628c2b94\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9755b505799e622d964a843a8ed1fd60fedffca230178e5cb95ae9280df4dcd2\",\"dweb:/ipfs/QmRkhUYUUgRZ2QYJjmtQct2ubyYwS3bdUMhbuFYM12VfYn\"]},\"Utils/Ownable.sol\":{\"keccak256\":\"0x5eeb86897007c578f301464fceac720c7330486c54ae85c0c09068b46197cfb9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://edefd9ff4f087a3016763a687eaae449c0e8f6dcda9d86032a49de900f129050\",\"dweb:/ipfs/Qmc4adiPdGKgEJLxqgd8JuKkwrNBNtB78kkGinnnuUnyJN\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 2021,
								"contract": "Utils/Ownable.sol:Ownable",
								"label": "_owner",
								"offset": 0,
								"slot": "0",
								"type": "t_address"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"Utils/ReentrancyGuard.sol": {
				"ReentrancyGuard": {
					"abi": [],
					"devdoc": {
						"details": "Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"Utils/ReentrancyGuard.sol\":\"ReentrancyGuard\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"Utils/ReentrancyGuard.sol\":{\"keccak256\":\"0x5531a4a8604939470e38d88dbb16a35c38cf17a3d66393fe9c73b5da561615df\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d0fd4ce017408e0e7cda8bb02298443533e2fbb261878df176374bee5c3e4adf\",\"dweb:/ipfs/QmPhT3sFavHxyWopC7f1Ukzw1TDmmkzr5te24Btuvunpz1\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 2129,
								"contract": "Utils/ReentrancyGuard.sol:ReentrancyGuard",
								"label": "_status",
								"offset": 0,
								"slot": "0",
								"type": "t_uint256"
							}
						],
						"types": {
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"Utils/SafeMath.sol": {
				"SafeMath": {
					"abi": [],
					"devdoc": {
						"details": "Wrappers over Solidity's arithmetic operations. NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler now has built in overflow checking.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"Utils/SafeMath.sol\":497:7008  library SafeMath {\r... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"Utils/SafeMath.sol\":497:7008  library SafeMath {\r... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220edbf4d4d7e7ccafd89a9ca3de703d2a1d53ced9153f26c5bed53e07c1fa1691564736f6c63430008000033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220edbf4d4d7e7ccafd89a9ca3de703d2a1d53ced9153f26c5bed53e07c1fa1691564736f6c63430008000033",
							"opcodes": "PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xED 0xBF 0x4D 0x4D PUSH31 0x7CCAFD89A9CA3DE703D2A1D53CED9153F26C5BED53E07C1FA1691564736F6C PUSH4 0x43000800 STOP CALLER ",
							"sourceMap": "497:6511:8:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;497:6511:8;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220edbf4d4d7e7ccafd89a9ca3de703d2a1d53ced9153f26c5bed53e07c1fa1691564736f6c63430008000033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xED 0xBF 0x4D 0x4D PUSH31 0x7CCAFD89A9CA3DE703D2A1D53CED9153F26C5BED53E07C1FA1691564736F6C PUSH4 0x43000800 STOP CALLER ",
							"sourceMap": "497:6511:8:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "103",
								"totalCost": "17303"
							},
							"internal": {
								"add(uint256,uint256)": "infinite",
								"div(uint256,uint256)": "infinite",
								"div(uint256,uint256,string memory)": "infinite",
								"mod(uint256,uint256)": "infinite",
								"mod(uint256,uint256,string memory)": "infinite",
								"mul(uint256,uint256)": "infinite",
								"sub(uint256,uint256)": "infinite",
								"sub(uint256,uint256,string memory)": "infinite",
								"tryAdd(uint256,uint256)": "infinite",
								"tryDiv(uint256,uint256)": "infinite",
								"tryMod(uint256,uint256)": "infinite",
								"tryMul(uint256,uint256)": "infinite",
								"trySub(uint256,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 497,
									"end": 7008,
									"name": "PUSH #[$]",
									"source": 8,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 497,
									"end": 7008,
									"name": "PUSH [$]",
									"source": 8,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 497,
									"end": 7008,
									"name": "PUSH",
									"source": 8,
									"value": "B"
								},
								{
									"begin": 497,
									"end": 7008,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 497,
									"end": 7008,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 497,
									"end": 7008,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 497,
									"end": 7008,
									"name": "CODECOPY",
									"source": 8
								},
								{
									"begin": 497,
									"end": 7008,
									"name": "DUP1",
									"source": 8
								},
								{
									"begin": 497,
									"end": 7008,
									"name": "MLOAD",
									"source": 8
								},
								{
									"begin": 497,
									"end": 7008,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 497,
									"end": 7008,
									"name": "BYTE",
									"source": 8
								},
								{
									"begin": 497,
									"end": 7008,
									"name": "PUSH",
									"source": 8,
									"value": "73"
								},
								{
									"begin": 497,
									"end": 7008,
									"name": "EQ",
									"source": 8
								},
								{
									"begin": 497,
									"end": 7008,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "1"
								},
								{
									"begin": 497,
									"end": 7008,
									"name": "JUMPI",
									"source": 8
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 497,
									"end": 7008,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 497,
									"end": 7008,
									"name": "MSTORE",
									"source": 8
								},
								{
									"begin": 497,
									"end": 7008,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 497,
									"end": 7008,
									"name": "PUSH",
									"source": 8,
									"value": "4"
								},
								{
									"begin": 497,
									"end": 7008,
									"name": "MSTORE",
									"source": 8
								},
								{
									"begin": 497,
									"end": 7008,
									"name": "PUSH",
									"source": 8,
									"value": "24"
								},
								{
									"begin": 497,
									"end": 7008,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 497,
									"end": 7008,
									"name": "REVERT",
									"source": 8
								},
								{
									"begin": 497,
									"end": 7008,
									"name": "tag",
									"source": 8,
									"value": "1"
								},
								{
									"begin": 497,
									"end": 7008,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 497,
									"end": 7008,
									"name": "ADDRESS",
									"source": 8
								},
								{
									"begin": 497,
									"end": 7008,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 497,
									"end": 7008,
									"name": "MSTORE",
									"source": 8
								},
								{
									"begin": 497,
									"end": 7008,
									"name": "PUSH",
									"source": 8,
									"value": "73"
								},
								{
									"begin": 497,
									"end": 7008,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 497,
									"end": 7008,
									"name": "MSTORE8",
									"source": 8
								},
								{
									"begin": 497,
									"end": 7008,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 497,
									"end": 7008,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 497,
									"end": 7008,
									"name": "RETURN",
									"source": 8
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220edbf4d4d7e7ccafd89a9ca3de703d2a1d53ced9153f26c5bed53e07c1fa1691564736f6c63430008000033",
									".code": [
										{
											"begin": 497,
											"end": 7008,
											"name": "PUSHDEPLOYADDRESS",
											"source": 8
										},
										{
											"begin": 497,
											"end": 7008,
											"name": "ADDRESS",
											"source": 8
										},
										{
											"begin": 497,
											"end": 7008,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 497,
											"end": 7008,
											"name": "PUSH",
											"source": 8,
											"value": "80"
										},
										{
											"begin": 497,
											"end": 7008,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 497,
											"end": 7008,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 497,
											"end": 7008,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 497,
											"end": 7008,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 497,
											"end": 7008,
											"name": "REVERT",
											"source": 8
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Wrappers over Solidity's arithmetic operations. NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler now has built in overflow checking.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"Utils/SafeMath.sol\":\"SafeMath\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"Utils/SafeMath.sol\":{\"keccak256\":\"0xdc9b51d94a1db880c1f2e722af561c28c41100eea201b1ae5e77eb7c4250e389\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0b69f7fb378dcfd4aff8ba0547a575485d2d4bb567381e3bf8c593b63272ffc0\",\"dweb:/ipfs/QmaEo28ZDAnpDvpQRRt7Qc8bF5QgJAnTEE4TxYnJS8YmnN\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"Utils/TransferHelper.sol": {
				"TransferHelper": {
					"abi": [],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"Utils/TransferHelper.sol\":244:2097  library TransferHelper {\r... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"Utils/TransferHelper.sol\":244:2097  library TransferHelper {\r... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220c20db4cde50e8afc2637dce24314546700d5394066bc38bcfb3ce60da99e79bf64736f6c63430008000033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220c20db4cde50e8afc2637dce24314546700d5394066bc38bcfb3ce60da99e79bf64736f6c63430008000033",
							"opcodes": "PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC2 0xD 0xB4 0xCD 0xE5 0xE DUP11 0xFC 0x26 CALLDATACOPY 0xDC 0xE2 NUMBER EQ SLOAD PUSH8 0xD5394066BC38BC 0xFB EXTCODECOPY 0xE6 0xD 0xA9 SWAP15 PUSH26 0xBF64736F6C634300080000330000000000000000000000000000 ",
							"sourceMap": "244:1853:9:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;244:1853:9;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220c20db4cde50e8afc2637dce24314546700d5394066bc38bcfb3ce60da99e79bf64736f6c63430008000033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC2 0xD 0xB4 0xCD 0xE5 0xE DUP11 0xFC 0x26 CALLDATACOPY 0xDC 0xE2 NUMBER EQ SLOAD PUSH8 0xD5394066BC38BC 0xFB EXTCODECOPY 0xE6 0xD 0xA9 SWAP15 PUSH26 0xBF64736F6C634300080000330000000000000000000000000000 ",
							"sourceMap": "244:1853:9:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "103",
								"totalCost": "17303"
							},
							"internal": {
								"safeApprove(address,address,uint256)": "infinite",
								"safeTransfer(address,address,uint256)": "infinite",
								"safeTransferBaseToken(address,address payable,uint256,bool)": "infinite",
								"safeTransferFrom(address,address,address,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 244,
									"end": 2097,
									"name": "PUSH #[$]",
									"source": 9,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 244,
									"end": 2097,
									"name": "PUSH [$]",
									"source": 9,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 244,
									"end": 2097,
									"name": "PUSH",
									"source": 9,
									"value": "B"
								},
								{
									"begin": 244,
									"end": 2097,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 244,
									"end": 2097,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 244,
									"end": 2097,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 244,
									"end": 2097,
									"name": "CODECOPY",
									"source": 9
								},
								{
									"begin": 244,
									"end": 2097,
									"name": "DUP1",
									"source": 9
								},
								{
									"begin": 244,
									"end": 2097,
									"name": "MLOAD",
									"source": 9
								},
								{
									"begin": 244,
									"end": 2097,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 244,
									"end": 2097,
									"name": "BYTE",
									"source": 9
								},
								{
									"begin": 244,
									"end": 2097,
									"name": "PUSH",
									"source": 9,
									"value": "73"
								},
								{
									"begin": 244,
									"end": 2097,
									"name": "EQ",
									"source": 9
								},
								{
									"begin": 244,
									"end": 2097,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "1"
								},
								{
									"begin": 244,
									"end": 2097,
									"name": "JUMPI",
									"source": 9
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 244,
									"end": 2097,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 244,
									"end": 2097,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 244,
									"end": 2097,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 244,
									"end": 2097,
									"name": "PUSH",
									"source": 9,
									"value": "4"
								},
								{
									"begin": 244,
									"end": 2097,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 244,
									"end": 2097,
									"name": "PUSH",
									"source": 9,
									"value": "24"
								},
								{
									"begin": 244,
									"end": 2097,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 244,
									"end": 2097,
									"name": "REVERT",
									"source": 9
								},
								{
									"begin": 244,
									"end": 2097,
									"name": "tag",
									"source": 9,
									"value": "1"
								},
								{
									"begin": 244,
									"end": 2097,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 244,
									"end": 2097,
									"name": "ADDRESS",
									"source": 9
								},
								{
									"begin": 244,
									"end": 2097,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 244,
									"end": 2097,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 244,
									"end": 2097,
									"name": "PUSH",
									"source": 9,
									"value": "73"
								},
								{
									"begin": 244,
									"end": 2097,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 244,
									"end": 2097,
									"name": "MSTORE8",
									"source": 9
								},
								{
									"begin": 244,
									"end": 2097,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 244,
									"end": 2097,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 244,
									"end": 2097,
									"name": "RETURN",
									"source": 9
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220c20db4cde50e8afc2637dce24314546700d5394066bc38bcfb3ce60da99e79bf64736f6c63430008000033",
									".code": [
										{
											"begin": 244,
											"end": 2097,
											"name": "PUSHDEPLOYADDRESS",
											"source": 9
										},
										{
											"begin": 244,
											"end": 2097,
											"name": "ADDRESS",
											"source": 9
										},
										{
											"begin": 244,
											"end": 2097,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 244,
											"end": 2097,
											"name": "PUSH",
											"source": 9,
											"value": "80"
										},
										{
											"begin": 244,
											"end": 2097,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 244,
											"end": 2097,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 244,
											"end": 2097,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 244,
											"end": 2097,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 244,
											"end": 2097,
											"name": "REVERT",
											"source": 9
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"helper methods for interacting with ERC20 tokens that do not consistently return true/false with the addition of a transfer function to send eth or an erc20 token\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"Utils/TransferHelper.sol\":\"TransferHelper\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"Utils/TransferHelper.sol\":{\"keccak256\":\"0xf64de8bda44d6e6a0ef231b637d0d6c78522fd561464c547eeca34f1a8e0482c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d36e8e7a9c1c50e24298b33bbde7e9d74998b58c889b706c80f95d130952d9e7\",\"dweb:/ipfs/QmP5sAxCH4LFZFJ9uxtFdCdZ3DPJJfv1iU6cHY19urExxw\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"notice": "helper methods for interacting with ERC20 tokens that do not consistently return true/false with the addition of a transfer function to send eth or an erc20 token",
						"version": 1
					}
				}
			}
		},
		"errors": [
			{
				"component": "general",
				"errorCode": "8261",
				"formattedMessage": "Warning: Variable is shadowed in inline assembly by an instruction of the same name\n   --> Utils/EnumerableSet.sol:166:5:\n    |\n166 |     function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n    |     ^ (Relevant source part starts here and spans across multiple lines).\n\n",
				"message": "Variable is shadowed in inline assembly by an instruction of the same name",
				"severity": "warning",
				"sourceLocation": {
					"end": 6108,
					"file": "Utils/EnumerableSet.sol",
					"start": 5983
				},
				"type": "Warning"
			},
			{
				"component": "general",
				"errorCode": "8261",
				"formattedMessage": "Warning: Variable is shadowed in inline assembly by an instruction of the same name\n   --> Utils/EnumerableSet.sol:232:5:\n    |\n232 |     function add(AddressSet storage set, address value) internal returns (bool) {\n    |     ^ (Relevant source part starts here and spans across multiple lines).\n\n",
				"message": "Variable is shadowed in inline assembly by an instruction of the same name",
				"severity": "warning",
				"sourceLocation": {
					"end": 8411,
					"file": "Utils/EnumerableSet.sol",
					"start": 8259
				},
				"type": "Warning"
			},
			{
				"component": "general",
				"errorCode": "8261",
				"formattedMessage": "Warning: Variable is shadowed in inline assembly by an instruction of the same name\n   --> Utils/EnumerableSet.sol:306:5:\n    |\n306 |     function add(UintSet storage set, uint256 value) internal returns (bool) {\n    |     ^ (Relevant source part starts here and spans across multiple lines).\n\n",
				"message": "Variable is shadowed in inline assembly by an instruction of the same name",
				"severity": "warning",
				"sourceLocation": {
					"end": 10952,
					"file": "Utils/EnumerableSet.sol",
					"start": 10821
				},
				"type": "Warning"
			},
			{
				"component": "general",
				"errorCode": "8261",
				"formattedMessage": "Warning: Variable is shadowed in inline assembly by an instruction of the same name\n   --> Utils/EnumerableSet.sol:166:5:\n    |\n166 |     function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n    |     ^ (Relevant source part starts here and spans across multiple lines).\n\n",
				"message": "Variable is shadowed in inline assembly by an instruction of the same name",
				"severity": "warning",
				"sourceLocation": {
					"end": 6108,
					"file": "Utils/EnumerableSet.sol",
					"start": 5983
				},
				"type": "Warning"
			},
			{
				"component": "general",
				"errorCode": "8261",
				"formattedMessage": "Warning: Variable is shadowed in inline assembly by an instruction of the same name\n   --> Utils/EnumerableSet.sol:232:5:\n    |\n232 |     function add(AddressSet storage set, address value) internal returns (bool) {\n    |     ^ (Relevant source part starts here and spans across multiple lines).\n\n",
				"message": "Variable is shadowed in inline assembly by an instruction of the same name",
				"severity": "warning",
				"sourceLocation": {
					"end": 8411,
					"file": "Utils/EnumerableSet.sol",
					"start": 8259
				},
				"type": "Warning"
			},
			{
				"component": "general",
				"errorCode": "8261",
				"formattedMessage": "Warning: Variable is shadowed in inline assembly by an instruction of the same name\n   --> Utils/EnumerableSet.sol:306:5:\n    |\n306 |     function add(UintSet storage set, uint256 value) internal returns (bool) {\n    |     ^ (Relevant source part starts here and spans across multiple lines).\n\n",
				"message": "Variable is shadowed in inline assembly by an instruction of the same name",
				"severity": "warning",
				"sourceLocation": {
					"end": 10952,
					"file": "Utils/EnumerableSet.sol",
					"start": 10821
				},
				"type": "Warning"
			},
			{
				"component": "general",
				"errorCode": "2072",
				"formattedMessage": "Warning: Unused local variable.\n   --> Ethereum/Presale.sol:182:9:\n    |\n182 |         uint256 feeClaimToken = buyer.tokenOwner - amountClaim;\n    |         ^^^^^^^^^^^^^^^^^^^^^\n\n",
				"message": "Unused local variable.",
				"severity": "warning",
				"sourceLocation": {
					"end": 6657,
					"file": "Ethereum/Presale.sol",
					"start": 6636
				},
				"type": "Warning"
			}
		],
		"sources": {
			"ERC20/ERC20.sol": {
				"ast": {
					"absolutePath": "ERC20/ERC20.sol",
					"exportedSymbols": {
						"Context": [
							1414
						],
						"ERC20": [
							585
						],
						"IERC20": [
							663
						],
						"IERC20Metadata": [
							688
						]
					},
					"id": 586,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "108:23:0"
						},
						{
							"absolutePath": "ERC20/IERC20.sol",
							"file": "./IERC20.sol",
							"id": 2,
							"nodeType": "ImportDirective",
							"scope": 586,
							"sourceUnit": 664,
							"src": "135:22:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "ERC20/IERC20Metadata.sol",
							"file": "./IERC20Metadata.sol",
							"id": 3,
							"nodeType": "ImportDirective",
							"scope": 586,
							"sourceUnit": 689,
							"src": "159:30:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "Utils/Context.sol",
							"file": "../Utils/Context.sol",
							"id": 4,
							"nodeType": "ImportDirective",
							"scope": 586,
							"sourceUnit": 1415,
							"src": "191:30:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 6,
										"name": "Context",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1414,
										"src": "1442:7:0"
									},
									"id": 7,
									"nodeType": "InheritanceSpecifier",
									"src": "1442:7:0"
								},
								{
									"baseName": {
										"id": 8,
										"name": "IERC20",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 663,
										"src": "1451:6:0"
									},
									"id": 9,
									"nodeType": "InheritanceSpecifier",
									"src": "1451:6:0"
								},
								{
									"baseName": {
										"id": 10,
										"name": "IERC20Metadata",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 688,
										"src": "1459:14:0"
									},
									"id": 11,
									"nodeType": "InheritanceSpecifier",
									"src": "1459:14:0"
								}
							],
							"contractDependencies": [
								663,
								688,
								1414
							],
							"contractKind": "contract",
							"documentation": {
								"id": 5,
								"nodeType": "StructuredDocumentation",
								"src": "225:1197:0",
								"text": " @dev Implementation of the {IERC20} interface.\nz\n This implementation is agnostic to the way tokens are created. This means\n that a supply mechanism has to be added in a derived contract using {_mint}.\n For a generic mechanism see {ERC20PresetMinterPauser}.\n TIP: For a detailed writeup see our guide\n https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n to implement supply mechanisms].\n We have followed general OpenZeppelin Contracts guidelines: functions revert\n instead returning `false` on failure. This behavior is nonetheless\n conventional and does not conflict with the expectations of ERC20\n applications.\n Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n This allows applications to reconstruct the allowance for all accounts just\n by listening to said events. Other implementations of the EIP may not emit\n these events, as it isn't required by the specification.\n Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n functions have been added to mitigate the well-known issues around setting\n allowances. See {IERC20-approve}."
							},
							"fullyImplemented": true,
							"id": 585,
							"linearizedBaseContracts": [
								585,
								688,
								663,
								1414
							],
							"name": "ERC20",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 15,
									"mutability": "mutable",
									"name": "_balances",
									"nodeType": "VariableDeclaration",
									"scope": 585,
									"src": "1481:45:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
										"typeString": "mapping(address => uint256)"
									},
									"typeName": {
										"id": 14,
										"keyType": {
											"id": 12,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1489:7:0",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "1481:27:0",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
											"typeString": "mapping(address => uint256)"
										},
										"valueType": {
											"id": 13,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "1500:7:0",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 21,
									"mutability": "mutable",
									"name": "_allowances",
									"nodeType": "VariableDeclaration",
									"scope": 585,
									"src": "1535:67:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
										"typeString": "mapping(address => mapping(address => uint256))"
									},
									"typeName": {
										"id": 20,
										"keyType": {
											"id": 16,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1543:7:0",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "1535:47:0",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
											"typeString": "mapping(address => mapping(address => uint256))"
										},
										"valueType": {
											"id": 19,
											"keyType": {
												"id": 17,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "1562:7:0",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"nodeType": "Mapping",
											"src": "1554:27:0",
											"typeDescriptions": {
												"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
												"typeString": "mapping(address => uint256)"
											},
											"valueType": {
												"id": 18,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1573:7:0",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											}
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 23,
									"mutability": "mutable",
									"name": "_totalSupply",
									"nodeType": "VariableDeclaration",
									"scope": 585,
									"src": "1611:28:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 22,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1611:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 25,
									"mutability": "mutable",
									"name": "_name",
									"nodeType": "VariableDeclaration",
									"scope": 585,
									"src": "1648:20:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_string_storage",
										"typeString": "string"
									},
									"typeName": {
										"id": 24,
										"name": "string",
										"nodeType": "ElementaryTypeName",
										"src": "1648:6:0",
										"typeDescriptions": {
											"typeIdentifier": "t_string_storage_ptr",
											"typeString": "string"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 27,
									"mutability": "mutable",
									"name": "_symbol",
									"nodeType": "VariableDeclaration",
									"scope": 585,
									"src": "1675:22:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_string_storage",
										"typeString": "string"
									},
									"typeName": {
										"id": 26,
										"name": "string",
										"nodeType": "ElementaryTypeName",
										"src": "1675:6:0",
										"typeDescriptions": {
											"typeIdentifier": "t_string_storage_ptr",
											"typeString": "string"
										}
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 43,
										"nodeType": "Block",
										"src": "2074:60:0",
										"statements": [
											{
												"expression": {
													"id": 37,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 35,
														"name": "_name",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 25,
														"src": "2085:5:0",
														"typeDescriptions": {
															"typeIdentifier": "t_string_storage",
															"typeString": "string storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 36,
														"name": "name_",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 30,
														"src": "2093:5:0",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string memory"
														}
													},
													"src": "2085:13:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"id": 38,
												"nodeType": "ExpressionStatement",
												"src": "2085:13:0"
											},
											{
												"expression": {
													"id": 41,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 39,
														"name": "_symbol",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 27,
														"src": "2109:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_string_storage",
															"typeString": "string storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 40,
														"name": "symbol_",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 32,
														"src": "2119:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string memory"
														}
													},
													"src": "2109:17:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"id": 42,
												"nodeType": "ExpressionStatement",
												"src": "2109:17:0"
											}
										]
									},
									"documentation": {
										"id": 28,
										"nodeType": "StructuredDocumentation",
										"src": "1706:306:0",
										"text": " @dev Sets the values for {name} and {symbol}.\n The default value of {decimals} is 18. To select a different value for\n {decimals} you should overload it.\n All two of these values are immutable: they can only be set once during\n construction."
									},
									"id": 44,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 33,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 30,
												"mutability": "mutable",
												"name": "name_",
												"nodeType": "VariableDeclaration",
												"scope": 44,
												"src": "2030:19:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 29,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2030:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 32,
												"mutability": "mutable",
												"name": "symbol_",
												"nodeType": "VariableDeclaration",
												"scope": 44,
												"src": "2051:21:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 31,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2051:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2029:44:0"
									},
									"returnParameters": {
										"id": 34,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2074:0:0"
									},
									"scope": 585,
									"src": "2018:116:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										675
									],
									"body": {
										"id": 53,
										"nodeType": "Block",
										"src": "2273:31:0",
										"statements": [
											{
												"expression": {
													"id": 51,
													"name": "_name",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 25,
													"src": "2291:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"functionReturnParameters": 50,
												"id": 52,
												"nodeType": "Return",
												"src": "2284:12:0"
											}
										]
									},
									"documentation": {
										"id": 45,
										"nodeType": "StructuredDocumentation",
										"src": "2142:56:0",
										"text": " @dev Returns the name of the token."
									},
									"functionSelector": "06fdde03",
									"id": 54,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "name",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 47,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "2240:8:0"
									},
									"parameters": {
										"id": 46,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2217:2:0"
									},
									"returnParameters": {
										"id": 50,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 49,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 54,
												"src": "2258:13:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 48,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2258:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2257:15:0"
									},
									"scope": 585,
									"src": "2204:100:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										681
									],
									"body": {
										"id": 63,
										"nodeType": "Block",
										"src": "2494:33:0",
										"statements": [
											{
												"expression": {
													"id": 61,
													"name": "_symbol",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 27,
													"src": "2512:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"functionReturnParameters": 60,
												"id": 62,
												"nodeType": "Return",
												"src": "2505:14:0"
											}
										]
									},
									"documentation": {
										"id": 55,
										"nodeType": "StructuredDocumentation",
										"src": "2312:105:0",
										"text": " @dev Returns the symbol of the token, usually a shorter version of the\n name."
									},
									"functionSelector": "95d89b41",
									"id": 64,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "symbol",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 57,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "2461:8:0"
									},
									"parameters": {
										"id": 56,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2438:2:0"
									},
									"returnParameters": {
										"id": 60,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 59,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 64,
												"src": "2479:13:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 58,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2479:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2478:15:0"
									},
									"scope": 585,
									"src": "2423:104:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										687
									],
									"body": {
										"id": 73,
										"nodeType": "Block",
										"src": "3233:28:0",
										"statements": [
											{
												"expression": {
													"hexValue": "3138",
													"id": 71,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "3251:2:0",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_18_by_1",
														"typeString": "int_const 18"
													},
													"value": "18"
												},
												"functionReturnParameters": 70,
												"id": 72,
												"nodeType": "Return",
												"src": "3244:9:0"
											}
										]
									},
									"documentation": {
										"id": 65,
										"nodeType": "StructuredDocumentation",
										"src": "2535:625:0",
										"text": " @dev Returns the number of decimals used to get its user representation.\n For example, if `decimals` equals `2`, a balance of `505` tokens should\n be displayed to a user as `5.05` (`505 / 10 ** 2`).\n Tokens usually opt for a value of 18, imitating the relationship between\n Ether and Wei. This is the value {ERC20} uses, unless this function is\n overridden;\n NOTE: This information is only used for _display_ purposes: it in\n no way affects any of the arithmetic of the contract, including\n {IERC20-balanceOf} and {IERC20-transfer}."
									},
									"functionSelector": "313ce567",
									"id": 74,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "decimals",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 67,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "3206:8:0"
									},
									"parameters": {
										"id": 66,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3183:2:0"
									},
									"returnParameters": {
										"id": 70,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 69,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 74,
												"src": "3224:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 68,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3224:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3223:9:0"
									},
									"scope": 585,
									"src": "3166:95:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										612
									],
									"body": {
										"id": 83,
										"nodeType": "Block",
										"src": "3396:38:0",
										"statements": [
											{
												"expression": {
													"id": 81,
													"name": "_totalSupply",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 23,
													"src": "3414:12:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 80,
												"id": 82,
												"nodeType": "Return",
												"src": "3407:19:0"
											}
										]
									},
									"documentation": {
										"id": 75,
										"nodeType": "StructuredDocumentation",
										"src": "3269:51:0",
										"text": " @dev See {IERC20-totalSupply}."
									},
									"functionSelector": "18160ddd",
									"id": 84,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 77,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "3369:8:0"
									},
									"parameters": {
										"id": 76,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3346:2:0"
									},
									"returnParameters": {
										"id": 80,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 79,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 84,
												"src": "3387:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 78,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3387:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3386:9:0"
									},
									"scope": 585,
									"src": "3326:108:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										620
									],
									"body": {
										"id": 97,
										"nodeType": "Block",
										"src": "3580:44:0",
										"statements": [
											{
												"expression": {
													"baseExpression": {
														"id": 93,
														"name": "_balances",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 15,
														"src": "3598:9:0",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 95,
													"indexExpression": {
														"id": 94,
														"name": "account",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 87,
														"src": "3608:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "3598:18:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 92,
												"id": 96,
												"nodeType": "Return",
												"src": "3591:25:0"
											}
										]
									},
									"documentation": {
										"id": 85,
										"nodeType": "StructuredDocumentation",
										"src": "3442:49:0",
										"text": " @dev See {IERC20-balanceOf}."
									},
									"functionSelector": "70a08231",
									"id": 98,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 89,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "3553:8:0"
									},
									"parameters": {
										"id": 88,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 87,
												"mutability": "mutable",
												"name": "account",
												"nodeType": "VariableDeclaration",
												"scope": 98,
												"src": "3516:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 86,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3516:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3515:17:0"
									},
									"returnParameters": {
										"id": 92,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 91,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 98,
												"src": "3571:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 90,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3571:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3570:9:0"
									},
									"scope": 585,
									"src": "3497:127:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										630
									],
									"body": {
										"id": 122,
										"nodeType": "Block",
										"src": "3915:108:0",
										"statements": [
											{
												"assignments": [
													110
												],
												"declarations": [
													{
														"constant": false,
														"id": 110,
														"mutability": "mutable",
														"name": "owner",
														"nodeType": "VariableDeclaration",
														"scope": 122,
														"src": "3926:13:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 109,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "3926:7:0",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 113,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 111,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1404,
														"src": "3942:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 112,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3942:12:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3926:28:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 115,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 110,
															"src": "3975:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 116,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 101,
															"src": "3982:2:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 117,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 103,
															"src": "3986:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 114,
														"name": "_transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 346,
														"src": "3965:9:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 118,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3965:28:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 119,
												"nodeType": "ExpressionStatement",
												"src": "3965:28:0"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 120,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "4011:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 108,
												"id": 121,
												"nodeType": "Return",
												"src": "4004:11:0"
											}
										]
									},
									"documentation": {
										"id": 99,
										"nodeType": "StructuredDocumentation",
										"src": "3632:192:0",
										"text": " @dev See {IERC20-transfer}.\n Requirements:\n - `to` cannot be the zero address.\n - the caller must have a balance of at least `amount`."
									},
									"functionSelector": "a9059cbb",
									"id": 123,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 105,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "3891:8:0"
									},
									"parameters": {
										"id": 104,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 101,
												"mutability": "mutable",
												"name": "to",
												"nodeType": "VariableDeclaration",
												"scope": 123,
												"src": "3848:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 100,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3848:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 103,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 123,
												"src": "3860:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 102,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3860:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3847:28:0"
									},
									"returnParameters": {
										"id": 108,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 107,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 123,
												"src": "3909:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 106,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "3909:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3908:6:0"
									},
									"scope": 585,
									"src": "3830:193:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										640
									],
									"body": {
										"id": 140,
										"nodeType": "Block",
										"src": "4184:53:0",
										"statements": [
											{
												"expression": {
													"baseExpression": {
														"baseExpression": {
															"id": 134,
															"name": "_allowances",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 21,
															"src": "4202:11:0",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
																"typeString": "mapping(address => mapping(address => uint256))"
															}
														},
														"id": 136,
														"indexExpression": {
															"id": 135,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 126,
															"src": "4214:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "4202:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 138,
													"indexExpression": {
														"id": 137,
														"name": "spender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 128,
														"src": "4221:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "4202:27:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 133,
												"id": 139,
												"nodeType": "Return",
												"src": "4195:34:0"
											}
										]
									},
									"documentation": {
										"id": 124,
										"nodeType": "StructuredDocumentation",
										"src": "4031:49:0",
										"text": " @dev See {IERC20-allowance}."
									},
									"functionSelector": "dd62ed3e",
									"id": 141,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 130,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "4157:8:0"
									},
									"parameters": {
										"id": 129,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 126,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 141,
												"src": "4105:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 125,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4105:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 128,
												"mutability": "mutable",
												"name": "spender",
												"nodeType": "VariableDeclaration",
												"scope": 141,
												"src": "4120:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 127,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4120:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4104:32:0"
									},
									"returnParameters": {
										"id": 133,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 132,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 141,
												"src": "4175:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 131,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4175:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4174:9:0"
									},
									"scope": 585,
									"src": "4086:151:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										650
									],
									"body": {
										"id": 165,
										"nodeType": "Block",
										"src": "4646:112:0",
										"statements": [
											{
												"assignments": [
													153
												],
												"declarations": [
													{
														"constant": false,
														"id": 153,
														"mutability": "mutable",
														"name": "owner",
														"nodeType": "VariableDeclaration",
														"scope": 165,
														"src": "4657:13:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 152,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "4657:7:0",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 156,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 154,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1404,
														"src": "4673:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 155,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4673:12:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4657:28:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 158,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 153,
															"src": "4705:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 159,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 144,
															"src": "4712:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 160,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 146,
															"src": "4721:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 157,
														"name": "_approve",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 519,
														"src": "4696:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 161,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4696:32:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 162,
												"nodeType": "ExpressionStatement",
												"src": "4696:32:0"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 163,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "4746:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 151,
												"id": 164,
												"nodeType": "Return",
												"src": "4739:11:0"
											}
										]
									},
									"documentation": {
										"id": 142,
										"nodeType": "StructuredDocumentation",
										"src": "4245:306:0",
										"text": " @dev See {IERC20-approve}.\n NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n `transferFrom`. This is semantically equivalent to an infinite approval.\n Requirements:\n - `spender` cannot be the zero address."
									},
									"functionSelector": "095ea7b3",
									"id": 166,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 148,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "4622:8:0"
									},
									"parameters": {
										"id": 147,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 144,
												"mutability": "mutable",
												"name": "spender",
												"nodeType": "VariableDeclaration",
												"scope": 166,
												"src": "4574:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 143,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4574:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 146,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 166,
												"src": "4591:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 145,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4591:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4573:33:0"
									},
									"returnParameters": {
										"id": 151,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 150,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 166,
												"src": "4640:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 149,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4640:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4639:6:0"
									},
									"scope": 585,
									"src": "4557:201:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										662
									],
									"body": {
										"id": 198,
										"nodeType": "Block",
										"src": "5475:158:0",
										"statements": [
											{
												"assignments": [
													180
												],
												"declarations": [
													{
														"constant": false,
														"id": 180,
														"mutability": "mutable",
														"name": "spender",
														"nodeType": "VariableDeclaration",
														"scope": 198,
														"src": "5486:15:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 179,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "5486:7:0",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 183,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 181,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1404,
														"src": "5504:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 182,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5504:12:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5486:30:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 185,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 169,
															"src": "5543:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 186,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 180,
															"src": "5549:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 187,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 173,
															"src": "5558:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 184,
														"name": "_spendAllowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 562,
														"src": "5527:15:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 188,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5527:38:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 189,
												"nodeType": "ExpressionStatement",
												"src": "5527:38:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 191,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 169,
															"src": "5586:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 192,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 171,
															"src": "5592:2:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 193,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 173,
															"src": "5596:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 190,
														"name": "_transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 346,
														"src": "5576:9:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 194,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5576:27:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 195,
												"nodeType": "ExpressionStatement",
												"src": "5576:27:0"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 196,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "5621:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 178,
												"id": 197,
												"nodeType": "Return",
												"src": "5614:11:0"
											}
										]
									},
									"documentation": {
										"id": 167,
										"nodeType": "StructuredDocumentation",
										"src": "4766:566:0",
										"text": " @dev See {IERC20-transferFrom}.\n Emits an {Approval} event indicating the updated allowance. This is not\n required by the EIP. See the note at the beginning of {ERC20}.\n NOTE: Does not update the allowance if the current allowance\n is the maximum `uint256`.\n Requirements:\n - `from` and `to` cannot be the zero address.\n - `from` must have a balance of at least `amount`.\n - the caller must have allowance for ``from``'s tokens of at least\n `amount`."
									},
									"functionSelector": "23b872dd",
									"id": 199,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 175,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "5451:8:0"
									},
									"parameters": {
										"id": 174,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 169,
												"mutability": "mutable",
												"name": "from",
												"nodeType": "VariableDeclaration",
												"scope": 199,
												"src": "5370:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 168,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5370:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 171,
												"mutability": "mutable",
												"name": "to",
												"nodeType": "VariableDeclaration",
												"scope": 199,
												"src": "5393:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 170,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5393:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 173,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 199,
												"src": "5414:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 172,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5414:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5359:76:0"
									},
									"returnParameters": {
										"id": 178,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 177,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 199,
												"src": "5469:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 176,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "5469:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5468:6:0"
									},
									"scope": 585,
									"src": "5338:295:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 227,
										"nodeType": "Block",
										"src": "6136:144:0",
										"statements": [
											{
												"assignments": [
													210
												],
												"declarations": [
													{
														"constant": false,
														"id": 210,
														"mutability": "mutable",
														"name": "owner",
														"nodeType": "VariableDeclaration",
														"scope": 227,
														"src": "6147:13:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 209,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "6147:7:0",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 213,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 211,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1404,
														"src": "6163:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 212,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6163:12:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6147:28:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 215,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 210,
															"src": "6195:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 216,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 202,
															"src": "6202:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 222,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [
																	{
																		"id": 218,
																		"name": "owner",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 210,
																		"src": "6221:5:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 219,
																		"name": "spender",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 202,
																		"src": "6228:7:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 217,
																	"name": "allowance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 141,
																	"src": "6211:9:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$returns$_t_uint256_$",
																		"typeString": "function (address,address) view returns (uint256)"
																	}
																},
																"id": 220,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "6211:25:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"id": 221,
																"name": "addedValue",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 204,
																"src": "6239:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "6211:38:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 214,
														"name": "_approve",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 519,
														"src": "6186:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 223,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6186:64:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 224,
												"nodeType": "ExpressionStatement",
												"src": "6186:64:0"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 225,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "6268:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 208,
												"id": 226,
												"nodeType": "Return",
												"src": "6261:11:0"
											}
										]
									},
									"documentation": {
										"id": 200,
										"nodeType": "StructuredDocumentation",
										"src": "5641:395:0",
										"text": " @dev Atomically increases the allowance granted to `spender` by the caller.\n This is an alternative to {approve} that can be used as a mitigation for\n problems described in {IERC20-approve}.\n Emits an {Approval} event indicating the updated allowance.\n Requirements:\n - `spender` cannot be the zero address."
									},
									"functionSelector": "39509351",
									"id": 228,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "increaseAllowance",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 205,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 202,
												"mutability": "mutable",
												"name": "spender",
												"nodeType": "VariableDeclaration",
												"scope": 228,
												"src": "6069:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 201,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6069:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 204,
												"mutability": "mutable",
												"name": "addedValue",
												"nodeType": "VariableDeclaration",
												"scope": 228,
												"src": "6086:18:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 203,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6086:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6068:37:0"
									},
									"returnParameters": {
										"id": 208,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 207,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 228,
												"src": "6130:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 206,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "6130:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6129:6:0"
									},
									"scope": 585,
									"src": "6042:238:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 268,
										"nodeType": "Block",
										"src": "6882:337:0",
										"statements": [
											{
												"assignments": [
													239
												],
												"declarations": [
													{
														"constant": false,
														"id": 239,
														"mutability": "mutable",
														"name": "owner",
														"nodeType": "VariableDeclaration",
														"scope": 268,
														"src": "6893:13:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 238,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "6893:7:0",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 242,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 240,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1404,
														"src": "6909:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 241,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6909:12:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6893:28:0"
											},
											{
												"assignments": [
													244
												],
												"declarations": [
													{
														"constant": false,
														"id": 244,
														"mutability": "mutable",
														"name": "currentAllowance",
														"nodeType": "VariableDeclaration",
														"scope": 268,
														"src": "6932:24:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 243,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "6932:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 249,
												"initialValue": {
													"arguments": [
														{
															"id": 246,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 239,
															"src": "6969:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 247,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 231,
															"src": "6976:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 245,
														"name": "allowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 141,
														"src": "6959:9:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address,address) view returns (uint256)"
														}
													},
													"id": 248,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6959:25:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6932:52:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 253,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 251,
																"name": "currentAllowance",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 244,
																"src": "7003:16:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 252,
																"name": "subtractedValue",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 233,
																"src": "7023:15:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7003:35:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f",
															"id": 254,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "7040:39:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8",
																"typeString": "literal_string \"ERC20: decreased allowance below zero\""
															},
															"value": "ERC20: decreased allowance below zero"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8",
																"typeString": "literal_string \"ERC20: decreased allowance below zero\""
															}
														],
														"id": 250,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "6995:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 255,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6995:85:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 256,
												"nodeType": "ExpressionStatement",
												"src": "6995:85:0"
											},
											{
												"id": 265,
												"nodeType": "UncheckedBlock",
												"src": "7091:97:0",
												"statements": [
													{
														"expression": {
															"arguments": [
																{
																	"id": 258,
																	"name": "owner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 239,
																	"src": "7125:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 259,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 231,
																	"src": "7132:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 262,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 260,
																		"name": "currentAllowance",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 244,
																		"src": "7141:16:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "-",
																	"rightExpression": {
																		"id": 261,
																		"name": "subtractedValue",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 233,
																		"src": "7160:15:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "7141:34:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 257,
																"name": "_approve",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 519,
																"src": "7116:8:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
																	"typeString": "function (address,address,uint256)"
																}
															},
															"id": 263,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "7116:60:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$__$",
																"typeString": "tuple()"
															}
														},
														"id": 264,
														"nodeType": "ExpressionStatement",
														"src": "7116:60:0"
													}
												]
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 266,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "7207:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 237,
												"id": 267,
												"nodeType": "Return",
												"src": "7200:11:0"
											}
										]
									},
									"documentation": {
										"id": 229,
										"nodeType": "StructuredDocumentation",
										"src": "6288:489:0",
										"text": " @dev Atomically decreases the allowance granted to `spender` by the caller.\n This is an alternative to {approve} that can be used as a mitigation for\n problems described in {IERC20-approve}.\n Emits an {Approval} event indicating the updated allowance.\n Requirements:\n - `spender` cannot be the zero address.\n - `spender` must have allowance for the caller of at least\n `subtractedValue`."
									},
									"functionSelector": "a457c2d7",
									"id": 269,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "decreaseAllowance",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 234,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 231,
												"mutability": "mutable",
												"name": "spender",
												"nodeType": "VariableDeclaration",
												"scope": 269,
												"src": "6810:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 230,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6810:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 233,
												"mutability": "mutable",
												"name": "subtractedValue",
												"nodeType": "VariableDeclaration",
												"scope": 269,
												"src": "6827:23:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 232,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6827:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6809:42:0"
									},
									"returnParameters": {
										"id": 237,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 236,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 269,
												"src": "6876:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 235,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "6876:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6875:6:0"
									},
									"scope": 585,
									"src": "6783:436:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 345,
										"nodeType": "Block",
										"src": "7810:559:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 285,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 280,
																"name": "from",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 272,
																"src": "7829:4:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 283,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "7845:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 282,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "7837:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 281,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "7837:7:0",
																		"typeDescriptions": {}
																	}
																},
																"id": 284,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7837:10:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "7829:18:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a207472616e736665722066726f6d20746865207a65726f2061646472657373",
															"id": 286,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "7849:39:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea",
																"typeString": "literal_string \"ERC20: transfer from the zero address\""
															},
															"value": "ERC20: transfer from the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea",
																"typeString": "literal_string \"ERC20: transfer from the zero address\""
															}
														],
														"id": 279,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "7821:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 287,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7821:68:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 288,
												"nodeType": "ExpressionStatement",
												"src": "7821:68:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 295,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 290,
																"name": "to",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 274,
																"src": "7908:2:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 293,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "7922:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 292,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "7914:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 291,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "7914:7:0",
																		"typeDescriptions": {}
																	}
																},
																"id": 294,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7914:10:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "7908:16:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a207472616e7366657220746f20746865207a65726f2061646472657373",
															"id": 296,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "7926:37:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f",
																"typeString": "literal_string \"ERC20: transfer to the zero address\""
															},
															"value": "ERC20: transfer to the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f",
																"typeString": "literal_string \"ERC20: transfer to the zero address\""
															}
														],
														"id": 289,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "7900:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 297,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7900:64:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 298,
												"nodeType": "ExpressionStatement",
												"src": "7900:64:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 300,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 272,
															"src": "7998:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 301,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 274,
															"src": "8004:2:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 302,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 276,
															"src": "8008:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 299,
														"name": "_beforeTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 573,
														"src": "7977:20:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 303,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7977:38:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 304,
												"nodeType": "ExpressionStatement",
												"src": "7977:38:0"
											},
											{
												"assignments": [
													306
												],
												"declarations": [
													{
														"constant": false,
														"id": 306,
														"mutability": "mutable",
														"name": "fromBalance",
														"nodeType": "VariableDeclaration",
														"scope": 345,
														"src": "8028:19:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 305,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "8028:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 310,
												"initialValue": {
													"baseExpression": {
														"id": 307,
														"name": "_balances",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 15,
														"src": "8050:9:0",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 309,
													"indexExpression": {
														"id": 308,
														"name": "from",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 272,
														"src": "8060:4:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "8050:15:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "8028:37:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 314,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 312,
																"name": "fromBalance",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 306,
																"src": "8084:11:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 313,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 276,
																"src": "8099:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "8084:21:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e6365",
															"id": 315,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "8107:40:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6",
																"typeString": "literal_string \"ERC20: transfer amount exceeds balance\""
															},
															"value": "ERC20: transfer amount exceeds balance"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6",
																"typeString": "literal_string \"ERC20: transfer amount exceeds balance\""
															}
														],
														"id": 311,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "8076:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 316,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8076:72:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 317,
												"nodeType": "ExpressionStatement",
												"src": "8076:72:0"
											},
											{
												"id": 326,
												"nodeType": "UncheckedBlock",
												"src": "8159:75:0",
												"statements": [
													{
														"expression": {
															"id": 324,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"baseExpression": {
																	"id": 318,
																	"name": "_balances",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 15,
																	"src": "8184:9:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 320,
																"indexExpression": {
																	"id": 319,
																	"name": "from",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 272,
																	"src": "8194:4:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"nodeType": "IndexAccess",
																"src": "8184:15:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 323,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 321,
																	"name": "fromBalance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 306,
																	"src": "8202:11:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"id": 322,
																	"name": "amount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 276,
																	"src": "8216:6:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "8202:20:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "8184:38:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 325,
														"nodeType": "ExpressionStatement",
														"src": "8184:38:0"
													}
												]
											},
											{
												"expression": {
													"id": 331,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 327,
															"name": "_balances",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 15,
															"src": "8244:9:0",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 329,
														"indexExpression": {
															"id": 328,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 274,
															"src": "8254:2:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "8244:13:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"id": 330,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 276,
														"src": "8261:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "8244:23:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 332,
												"nodeType": "ExpressionStatement",
												"src": "8244:23:0"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 334,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 272,
															"src": "8294:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 335,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 274,
															"src": "8300:2:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 336,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 276,
															"src": "8304:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 333,
														"name": "Transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 597,
														"src": "8285:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 337,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8285:26:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 338,
												"nodeType": "EmitStatement",
												"src": "8280:31:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 340,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 272,
															"src": "8344:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 341,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 274,
															"src": "8350:2:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 342,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 276,
															"src": "8354:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 339,
														"name": "_afterTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 584,
														"src": "8324:19:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 343,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8324:37:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 344,
												"nodeType": "ExpressionStatement",
												"src": "8324:37:0"
											}
										]
									},
									"documentation": {
										"id": 270,
										"nodeType": "StructuredDocumentation",
										"src": "7227:465:0",
										"text": " @dev Moves `amount` of tokens from `sender` to `recipient`.\n This internal function is equivalent to {transfer}, and can be used to\n e.g. implement automatic token fees, slashing mechanisms, etc.\n Emits a {Transfer} event.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `from` must have a balance of at least `amount`."
									},
									"id": 346,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_transfer",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 277,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 272,
												"mutability": "mutable",
												"name": "from",
												"nodeType": "VariableDeclaration",
												"scope": 346,
												"src": "7727:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 271,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7727:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 274,
												"mutability": "mutable",
												"name": "to",
												"nodeType": "VariableDeclaration",
												"scope": 346,
												"src": "7750:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 273,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7750:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 276,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 346,
												"src": "7771:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 275,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7771:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7716:76:0"
									},
									"returnParameters": {
										"id": 278,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7810:0:0"
									},
									"scope": 585,
									"src": "7698:671:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 401,
										"nodeType": "Block",
										"src": "8721:334:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 360,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 355,
																"name": "account",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 349,
																"src": "8740:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 358,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "8759:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 357,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "8751:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 356,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "8751:7:0",
																		"typeDescriptions": {}
																	}
																},
																"id": 359,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8751:10:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "8740:21:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a206d696e7420746f20746865207a65726f2061646472657373",
															"id": 361,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "8763:33:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e",
																"typeString": "literal_string \"ERC20: mint to the zero address\""
															},
															"value": "ERC20: mint to the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e",
																"typeString": "literal_string \"ERC20: mint to the zero address\""
															}
														],
														"id": 354,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "8732:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 362,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8732:65:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 363,
												"nodeType": "ExpressionStatement",
												"src": "8732:65:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 367,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8839:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 366,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "8831:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 365,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "8831:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 368,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8831:10:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 369,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 349,
															"src": "8843:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 370,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 351,
															"src": "8852:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 364,
														"name": "_beforeTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 573,
														"src": "8810:20:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 371,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8810:49:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 372,
												"nodeType": "ExpressionStatement",
												"src": "8810:49:0"
											},
											{
												"expression": {
													"id": 375,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 373,
														"name": "_totalSupply",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 23,
														"src": "8872:12:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"id": 374,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 351,
														"src": "8888:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "8872:22:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 376,
												"nodeType": "ExpressionStatement",
												"src": "8872:22:0"
											},
											{
												"expression": {
													"id": 381,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 377,
															"name": "_balances",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 15,
															"src": "8905:9:0",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 379,
														"indexExpression": {
															"id": 378,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 349,
															"src": "8915:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "8905:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"id": 380,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 351,
														"src": "8927:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "8905:28:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 382,
												"nodeType": "ExpressionStatement",
												"src": "8905:28:0"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 386,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8966:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 385,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "8958:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 384,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "8958:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 387,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8958:10:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 388,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 349,
															"src": "8970:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 389,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 351,
															"src": "8979:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 383,
														"name": "Transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 597,
														"src": "8949:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 390,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8949:37:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 391,
												"nodeType": "EmitStatement",
												"src": "8944:42:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 395,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9027:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 394,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "9019:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 393,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "9019:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 396,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9019:10:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 397,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 349,
															"src": "9031:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 398,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 351,
															"src": "9040:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 392,
														"name": "_afterTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 584,
														"src": "8999:19:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 399,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8999:48:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 400,
												"nodeType": "ExpressionStatement",
												"src": "8999:48:0"
											}
										]
									},
									"documentation": {
										"id": 347,
										"nodeType": "StructuredDocumentation",
										"src": "8377:273:0",
										"text": "@dev Creates `amount` tokens and assigns them to `account`, increasing\n the total supply.\n Emits a {Transfer} event with `from` set to the zero address.\n Requirements:\n - `account` cannot be the zero address."
									},
									"id": 402,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_mint",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 352,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 349,
												"mutability": "mutable",
												"name": "account",
												"nodeType": "VariableDeclaration",
												"scope": 402,
												"src": "8671:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 348,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8671:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 351,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 402,
												"src": "8688:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 350,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8688:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8670:33:0"
									},
									"returnParameters": {
										"id": 353,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8721:0:0"
									},
									"scope": 585,
									"src": "8656:399:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 473,
										"nodeType": "Block",
										"src": "9453:526:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 416,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 411,
																"name": "account",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 405,
																"src": "9472:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 414,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "9491:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 413,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "9483:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 412,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "9483:7:0",
																		"typeDescriptions": {}
																	}
																},
																"id": 415,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "9483:10:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "9472:21:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a206275726e2066726f6d20746865207a65726f2061646472657373",
															"id": 417,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "9495:35:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f",
																"typeString": "literal_string \"ERC20: burn from the zero address\""
															},
															"value": "ERC20: burn from the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f",
																"typeString": "literal_string \"ERC20: burn from the zero address\""
															}
														],
														"id": 410,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "9464:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 418,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9464:67:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 419,
												"nodeType": "ExpressionStatement",
												"src": "9464:67:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 421,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 405,
															"src": "9565:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 424,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9582:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 423,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "9574:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 422,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "9574:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 425,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9574:10:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 426,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 407,
															"src": "9586:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 420,
														"name": "_beforeTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 573,
														"src": "9544:20:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 427,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9544:49:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 428,
												"nodeType": "ExpressionStatement",
												"src": "9544:49:0"
											},
											{
												"assignments": [
													430
												],
												"declarations": [
													{
														"constant": false,
														"id": 430,
														"mutability": "mutable",
														"name": "accountBalance",
														"nodeType": "VariableDeclaration",
														"scope": 473,
														"src": "9606:22:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 429,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "9606:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 434,
												"initialValue": {
													"baseExpression": {
														"id": 431,
														"name": "_balances",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 15,
														"src": "9631:9:0",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 433,
													"indexExpression": {
														"id": 432,
														"name": "account",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 405,
														"src": "9641:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "9631:18:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "9606:43:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 438,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 436,
																"name": "accountBalance",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 430,
																"src": "9668:14:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 437,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 407,
																"src": "9686:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "9668:24:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a206275726e20616d6f756e7420657863656564732062616c616e6365",
															"id": 439,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "9694:36:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd",
																"typeString": "literal_string \"ERC20: burn amount exceeds balance\""
															},
															"value": "ERC20: burn amount exceeds balance"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd",
																"typeString": "literal_string \"ERC20: burn amount exceeds balance\""
															}
														],
														"id": 435,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "9660:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 440,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9660:71:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 441,
												"nodeType": "ExpressionStatement",
												"src": "9660:71:0"
											},
											{
												"id": 450,
												"nodeType": "UncheckedBlock",
												"src": "9742:81:0",
												"statements": [
													{
														"expression": {
															"id": 448,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"baseExpression": {
																	"id": 442,
																	"name": "_balances",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 15,
																	"src": "9767:9:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 444,
																"indexExpression": {
																	"id": 443,
																	"name": "account",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 405,
																	"src": "9777:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"nodeType": "IndexAccess",
																"src": "9767:18:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 447,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 445,
																	"name": "accountBalance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 430,
																	"src": "9788:14:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"id": 446,
																	"name": "amount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 407,
																	"src": "9805:6:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "9788:23:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "9767:44:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 449,
														"nodeType": "ExpressionStatement",
														"src": "9767:44:0"
													}
												]
											},
											{
												"expression": {
													"id": 453,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 451,
														"name": "_totalSupply",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 23,
														"src": "9833:12:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "-=",
													"rightHandSide": {
														"id": 452,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 407,
														"src": "9849:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "9833:22:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 454,
												"nodeType": "ExpressionStatement",
												"src": "9833:22:0"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 456,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 405,
															"src": "9882:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 459,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9899:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 458,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "9891:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 457,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "9891:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 460,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9891:10:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 461,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 407,
															"src": "9903:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 455,
														"name": "Transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 597,
														"src": "9873:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 462,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9873:37:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 463,
												"nodeType": "EmitStatement",
												"src": "9868:42:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 465,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 405,
															"src": "9943:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 468,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9960:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 467,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "9952:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 466,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "9952:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 469,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9952:10:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 470,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 407,
															"src": "9964:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 464,
														"name": "_afterTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 584,
														"src": "9923:19:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 471,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9923:48:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 472,
												"nodeType": "ExpressionStatement",
												"src": "9923:48:0"
											}
										]
									},
									"documentation": {
										"id": 403,
										"nodeType": "StructuredDocumentation",
										"src": "9063:319:0",
										"text": " @dev Destroys `amount` tokens from `account`, reducing the\n total supply.\n Emits a {Transfer} event with `to` set to the zero address.\n Requirements:\n - `account` cannot be the zero address.\n - `account` must have at least `amount` tokens."
									},
									"id": 474,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_burn",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 408,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 405,
												"mutability": "mutable",
												"name": "account",
												"nodeType": "VariableDeclaration",
												"scope": 474,
												"src": "9403:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 404,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9403:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 407,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 474,
												"src": "9420:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 406,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9420:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9402:33:0"
									},
									"returnParameters": {
										"id": 409,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9453:0:0"
									},
									"scope": 585,
									"src": "9388:591:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 518,
										"nodeType": "Block",
										"src": "10534:263:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 490,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 485,
																"name": "owner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 477,
																"src": "10553:5:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 488,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "10570:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 487,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "10562:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 486,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "10562:7:0",
																		"typeDescriptions": {}
																	}
																},
																"id": 489,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "10562:10:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "10553:19:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a20617070726f76652066726f6d20746865207a65726f2061646472657373",
															"id": 491,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "10574:38:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208",
																"typeString": "literal_string \"ERC20: approve from the zero address\""
															},
															"value": "ERC20: approve from the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208",
																"typeString": "literal_string \"ERC20: approve from the zero address\""
															}
														],
														"id": 484,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "10545:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 492,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10545:68:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 493,
												"nodeType": "ExpressionStatement",
												"src": "10545:68:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 500,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 495,
																"name": "spender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 479,
																"src": "10632:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 498,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "10651:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 497,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "10643:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 496,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "10643:7:0",
																		"typeDescriptions": {}
																	}
																},
																"id": 499,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "10643:10:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "10632:21:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a20617070726f766520746f20746865207a65726f2061646472657373",
															"id": 501,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "10655:36:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029",
																"typeString": "literal_string \"ERC20: approve to the zero address\""
															},
															"value": "ERC20: approve to the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029",
																"typeString": "literal_string \"ERC20: approve to the zero address\""
															}
														],
														"id": 494,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "10624:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 502,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10624:68:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 503,
												"nodeType": "ExpressionStatement",
												"src": "10624:68:0"
											},
											{
												"expression": {
													"id": 510,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"baseExpression": {
																"id": 504,
																"name": "_allowances",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 21,
																"src": "10705:11:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
																	"typeString": "mapping(address => mapping(address => uint256))"
																}
															},
															"id": 507,
															"indexExpression": {
																"id": 505,
																"name": "owner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 477,
																"src": "10717:5:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "10705:18:0",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 508,
														"indexExpression": {
															"id": 506,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 479,
															"src": "10724:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "10705:27:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 509,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 481,
														"src": "10735:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "10705:36:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 511,
												"nodeType": "ExpressionStatement",
												"src": "10705:36:0"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 513,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 477,
															"src": "10766:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 514,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 479,
															"src": "10773:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 515,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 481,
															"src": "10782:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 512,
														"name": "Approval",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 606,
														"src": "10757:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 516,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10757:32:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 517,
												"nodeType": "EmitStatement",
												"src": "10752:37:0"
											}
										]
									},
									"documentation": {
										"id": 475,
										"nodeType": "StructuredDocumentation",
										"src": "9987:424:0",
										"text": " @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n This internal function is equivalent to `approve`, and can be used to\n e.g. set automatic allowances for certain subsystems, etc.\n Emits an {Approval} event.\n Requirements:\n - `owner` cannot be the zero address.\n - `spender` cannot be the zero address."
									},
									"id": 519,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_approve",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 482,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 477,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 519,
												"src": "10445:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 476,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10445:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 479,
												"mutability": "mutable",
												"name": "spender",
												"nodeType": "VariableDeclaration",
												"scope": 519,
												"src": "10469:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 478,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10469:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 481,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 519,
												"src": "10495:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 480,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10495:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10434:82:0"
									},
									"returnParameters": {
										"id": 483,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10534:0:0"
									},
									"scope": 585,
									"src": "10417:380:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 561,
										"nodeType": "Block",
										"src": "11212:329:0",
										"statements": [
											{
												"assignments": [
													530
												],
												"declarations": [
													{
														"constant": false,
														"id": 530,
														"mutability": "mutable",
														"name": "currentAllowance",
														"nodeType": "VariableDeclaration",
														"scope": 561,
														"src": "11223:24:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 529,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "11223:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 535,
												"initialValue": {
													"arguments": [
														{
															"id": 532,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 522,
															"src": "11260:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 533,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 524,
															"src": "11267:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 531,
														"name": "allowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 141,
														"src": "11250:9:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address,address) view returns (uint256)"
														}
													},
													"id": 534,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "11250:25:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "11223:52:0"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 542,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 536,
														"name": "currentAllowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 530,
														"src": "11290:16:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"expression": {
															"arguments": [
																{
																	"id": 539,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "11315:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint256_$",
																		"typeString": "type(uint256)"
																	},
																	"typeName": {
																		"id": 538,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "11315:7:0",
																		"typeDescriptions": {}
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_type$_t_uint256_$",
																		"typeString": "type(uint256)"
																	}
																],
																"id": 537,
																"name": "type",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967269,
																"src": "11310:4:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																	"typeString": "function () pure"
																}
															},
															"id": 540,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "11310:13:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_magic_meta_type_t_uint256",
																"typeString": "type(uint256)"
															}
														},
														"id": 541,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberName": "max",
														"nodeType": "MemberAccess",
														"src": "11310:17:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "11290:37:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 560,
												"nodeType": "IfStatement",
												"src": "11286:248:0",
												"trueBody": {
													"id": 559,
													"nodeType": "Block",
													"src": "11329:205:0",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 546,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 544,
																			"name": "currentAllowance",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 530,
																			"src": "11352:16:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": ">=",
																		"rightExpression": {
																			"id": 545,
																			"name": "amount",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 526,
																			"src": "11372:6:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "11352:26:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	{
																		"hexValue": "45524332303a20696e73756666696369656e7420616c6c6f77616e6365",
																		"id": 547,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "11380:31:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe",
																			"typeString": "literal_string \"ERC20: insufficient allowance\""
																		},
																		"value": "ERC20: insufficient allowance"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		{
																			"typeIdentifier": "t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe",
																			"typeString": "literal_string \"ERC20: insufficient allowance\""
																		}
																	],
																	"id": 543,
																	"name": "require",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967278,
																		4294967278
																	],
																	"referencedDeclaration": 4294967278,
																	"src": "11344:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bool,string memory) pure"
																	}
																},
																"id": 548,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "11344:68:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 549,
															"nodeType": "ExpressionStatement",
															"src": "11344:68:0"
														},
														{
															"id": 558,
															"nodeType": "UncheckedBlock",
															"src": "11427:96:0",
															"statements": [
																{
																	"expression": {
																		"arguments": [
																			{
																				"id": 551,
																				"name": "owner",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 522,
																				"src": "11465:5:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			{
																				"id": 552,
																				"name": "spender",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 524,
																				"src": "11472:7:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			{
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 555,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 553,
																					"name": "currentAllowance",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 530,
																					"src": "11481:16:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "-",
																				"rightExpression": {
																					"id": 554,
																					"name": "amount",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 526,
																					"src": "11500:6:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "11481:25:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				},
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				},
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			],
																			"id": 550,
																			"name": "_approve",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 519,
																			"src": "11456:8:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
																				"typeString": "function (address,address,uint256)"
																			}
																		},
																		"id": 556,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "11456:51:0",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_tuple$__$",
																			"typeString": "tuple()"
																		}
																	},
																	"id": 557,
																	"nodeType": "ExpressionStatement",
																	"src": "11456:51:0"
																}
															]
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 520,
										"nodeType": "StructuredDocumentation",
										"src": "10805:277:0",
										"text": " @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n Does not update the allowance amount in case of infinite allowance.\n Revert if not enough allowance is available.\n Might emit an {Approval} event."
									},
									"id": 562,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_spendAllowance",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 527,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 522,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 562,
												"src": "11123:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 521,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "11123:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 524,
												"mutability": "mutable",
												"name": "spender",
												"nodeType": "VariableDeclaration",
												"scope": 562,
												"src": "11147:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 523,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "11147:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 526,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 562,
												"src": "11173:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 525,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11173:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11112:82:0"
									},
									"returnParameters": {
										"id": 528,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "11212:0:0"
									},
									"scope": 585,
									"src": "11088:453:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 572,
										"nodeType": "Block",
										"src": "12264:2:0",
										"statements": []
									},
									"documentation": {
										"id": 563,
										"nodeType": "StructuredDocumentation",
										"src": "11549:586:0",
										"text": " @dev Hook that is called before any transfer of tokens. This includes\n minting and burning.\n Calling conditions:\n - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n will be transferred to `to`.\n - when `from` is zero, `amount` tokens will be minted for `to`.\n - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n - `from` and `to` are never both zero.\n To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]."
									},
									"id": 573,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_beforeTokenTransfer",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 570,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 565,
												"mutability": "mutable",
												"name": "from",
												"nodeType": "VariableDeclaration",
												"scope": 573,
												"src": "12181:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 564,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "12181:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 567,
												"mutability": "mutable",
												"name": "to",
												"nodeType": "VariableDeclaration",
												"scope": 573,
												"src": "12204:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 566,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "12204:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 569,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 573,
												"src": "12225:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 568,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12225:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12170:76:0"
									},
									"returnParameters": {
										"id": 571,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "12264:0:0"
									},
									"scope": 585,
									"src": "12141:125:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 583,
										"nodeType": "Block",
										"src": "12992:2:0",
										"statements": []
									},
									"documentation": {
										"id": 574,
										"nodeType": "StructuredDocumentation",
										"src": "12274:590:0",
										"text": " @dev Hook that is called after any transfer of tokens. This includes\n minting and burning.\n Calling conditions:\n - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n has been transferred to `to`.\n - when `from` is zero, `amount` tokens have been minted for `to`.\n - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n - `from` and `to` are never both zero.\n To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]."
									},
									"id": 584,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_afterTokenTransfer",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 581,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 576,
												"mutability": "mutable",
												"name": "from",
												"nodeType": "VariableDeclaration",
												"scope": 584,
												"src": "12909:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 575,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "12909:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 578,
												"mutability": "mutable",
												"name": "to",
												"nodeType": "VariableDeclaration",
												"scope": 584,
												"src": "12932:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 577,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "12932:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 580,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 584,
												"src": "12953:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 579,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12953:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12898:76:0"
									},
									"returnParameters": {
										"id": 582,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "12992:0:0"
									},
									"scope": 585,
									"src": "12870:124:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 586,
							"src": "1424:11573:0"
						}
					],
					"src": "108:12889:0"
				},
				"id": 0
			},
			"ERC20/IERC20.sol": {
				"ast": {
					"absolutePath": "ERC20/IERC20.sol",
					"exportedSymbols": {
						"IERC20": [
							663
						]
					},
					"id": 664,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 587,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "109:23:1"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 588,
								"nodeType": "StructuredDocumentation",
								"src": "136:72:1",
								"text": " @dev Interface of the ERC20 standard as defined in the EIP."
							},
							"fullyImplemented": false,
							"id": 663,
							"linearizedBaseContracts": [
								663
							],
							"name": "IERC20",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 589,
										"nodeType": "StructuredDocumentation",
										"src": "234:163:1",
										"text": " @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."
									},
									"id": 597,
									"name": "Transfer",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 596,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 591,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nodeType": "VariableDeclaration",
												"scope": 597,
												"src": "418:20:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 590,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "418:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 593,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nodeType": "VariableDeclaration",
												"scope": 597,
												"src": "440:18:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 592,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "440:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 595,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 597,
												"src": "460:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 594,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "460:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "417:57:1"
									},
									"src": "403:72:1"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 598,
										"nodeType": "StructuredDocumentation",
										"src": "483:151:1",
										"text": " @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."
									},
									"id": 606,
									"name": "Approval",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 605,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 600,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 606,
												"src": "655:21:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 599,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "655:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 602,
												"indexed": true,
												"mutability": "mutable",
												"name": "spender",
												"nodeType": "VariableDeclaration",
												"scope": 606,
												"src": "678:23:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 601,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "678:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 604,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 606,
												"src": "703:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 603,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "703:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "654:63:1"
									},
									"src": "640:78:1"
								},
								{
									"documentation": {
										"id": 607,
										"nodeType": "StructuredDocumentation",
										"src": "726:68:1",
										"text": " @dev Returns the amount of tokens in existence."
									},
									"functionSelector": "18160ddd",
									"id": 612,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 608,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "820:2:1"
									},
									"returnParameters": {
										"id": 611,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 610,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 612,
												"src": "846:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 609,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "846:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "845:9:1"
									},
									"scope": 663,
									"src": "800:55:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 613,
										"nodeType": "StructuredDocumentation",
										"src": "863:74:1",
										"text": " @dev Returns the amount of tokens owned by `account`."
									},
									"functionSelector": "70a08231",
									"id": 620,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 616,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 615,
												"mutability": "mutable",
												"name": "account",
												"nodeType": "VariableDeclaration",
												"scope": 620,
												"src": "962:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 614,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "962:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "961:17:1"
									},
									"returnParameters": {
										"id": 619,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 618,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 620,
												"src": "1002:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 617,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1002:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1001:9:1"
									},
									"scope": 663,
									"src": "943:68:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 621,
										"nodeType": "StructuredDocumentation",
										"src": "1027:208:1",
										"text": " @dev Moves `amount` tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "a9059cbb",
									"id": 630,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 626,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 623,
												"mutability": "mutable",
												"name": "to",
												"nodeType": "VariableDeclaration",
												"scope": 630,
												"src": "1259:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 622,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1259:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 625,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 630,
												"src": "1271:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 624,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1271:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1258:28:1"
									},
									"returnParameters": {
										"id": 629,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 628,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 630,
												"src": "1305:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 627,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1305:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1304:6:1"
									},
									"scope": 663,
									"src": "1241:70:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 631,
										"nodeType": "StructuredDocumentation",
										"src": "1319:270:1",
										"text": " @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."
									},
									"functionSelector": "dd62ed3e",
									"id": 640,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 636,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 633,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 640,
												"src": "1614:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 632,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1614:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 635,
												"mutability": "mutable",
												"name": "spender",
												"nodeType": "VariableDeclaration",
												"scope": 640,
												"src": "1629:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 634,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1629:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1613:32:1"
									},
									"returnParameters": {
										"id": 639,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 638,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 640,
												"src": "1669:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 637,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1669:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1668:9:1"
									},
									"scope": 663,
									"src": "1595:83:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 641,
										"nodeType": "StructuredDocumentation",
										"src": "1686:655:1",
										"text": " @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."
									},
									"functionSelector": "095ea7b3",
									"id": 650,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 646,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 643,
												"mutability": "mutable",
												"name": "spender",
												"nodeType": "VariableDeclaration",
												"scope": 650,
												"src": "2364:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 642,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2364:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 645,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 650,
												"src": "2381:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 644,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2381:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2363:33:1"
									},
									"returnParameters": {
										"id": 649,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 648,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 650,
												"src": "2415:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 647,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2415:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2414:6:1"
									},
									"scope": 663,
									"src": "2347:74:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 651,
										"nodeType": "StructuredDocumentation",
										"src": "2429:295:1",
										"text": " @dev Moves `amount` tokens from `from` to `to` using the\n allowance mechanism. `amount` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "23b872dd",
									"id": 662,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 658,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 653,
												"mutability": "mutable",
												"name": "from",
												"nodeType": "VariableDeclaration",
												"scope": 662,
												"src": "2762:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 652,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2762:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 655,
												"mutability": "mutable",
												"name": "to",
												"nodeType": "VariableDeclaration",
												"scope": 662,
												"src": "2785:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 654,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2785:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 657,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 662,
												"src": "2806:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 656,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2806:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2751:76:1"
									},
									"returnParameters": {
										"id": 661,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 660,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 662,
												"src": "2846:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 659,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2846:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2845:6:1"
									},
									"scope": 663,
									"src": "2730:122:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 664,
							"src": "210:2645:1"
						}
					],
					"src": "109:2748:1"
				},
				"id": 1
			},
			"ERC20/IERC20Metadata.sol": {
				"ast": {
					"absolutePath": "ERC20/IERC20Metadata.sol",
					"exportedSymbols": {
						"IERC20": [
							663
						],
						"IERC20Metadata": [
							688
						]
					},
					"id": 689,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 665,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "113:23:2"
						},
						{
							"absolutePath": "ERC20/IERC20.sol",
							"file": "./IERC20.sol",
							"id": 666,
							"nodeType": "ImportDirective",
							"scope": 689,
							"sourceUnit": 664,
							"src": "140:22:2",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 668,
										"name": "IERC20",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 663,
										"src": "316:6:2"
									},
									"id": 669,
									"nodeType": "InheritanceSpecifier",
									"src": "316:6:2"
								}
							],
							"contractDependencies": [
								663
							],
							"contractKind": "interface",
							"documentation": {
								"id": 667,
								"nodeType": "StructuredDocumentation",
								"src": "166:120:2",
								"text": " @dev Interface for the optional metadata functions from the ERC20 standard.\n _Available since v4.1._"
							},
							"fullyImplemented": false,
							"id": 688,
							"linearizedBaseContracts": [
								688,
								663
							],
							"name": "IERC20Metadata",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 670,
										"nodeType": "StructuredDocumentation",
										"src": "330:56:2",
										"text": " @dev Returns the name of the token."
									},
									"functionSelector": "06fdde03",
									"id": 675,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "name",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 671,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "405:2:2"
									},
									"returnParameters": {
										"id": 674,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 673,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 675,
												"src": "431:13:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 672,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "431:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "430:15:2"
									},
									"scope": 688,
									"src": "392:54:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 676,
										"nodeType": "StructuredDocumentation",
										"src": "454:58:2",
										"text": " @dev Returns the symbol of the token."
									},
									"functionSelector": "95d89b41",
									"id": 681,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "symbol",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 677,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "533:2:2"
									},
									"returnParameters": {
										"id": 680,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 679,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 681,
												"src": "559:13:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 678,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "559:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "558:15:2"
									},
									"scope": 688,
									"src": "518:56:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 682,
										"nodeType": "StructuredDocumentation",
										"src": "582:67:2",
										"text": " @dev Returns the decimals places of the token."
									},
									"functionSelector": "313ce567",
									"id": 687,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "decimals",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 683,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "672:2:2"
									},
									"returnParameters": {
										"id": 686,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 685,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 687,
												"src": "698:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 684,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "698:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "697:9:2"
									},
									"scope": 688,
									"src": "655:52:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 689,
							"src": "288:422:2"
						}
					],
					"src": "113:599:2"
				},
				"id": 2
			},
			"Ethereum/Presale.sol": {
				"ast": {
					"absolutePath": "Ethereum/Presale.sol",
					"exportedSymbols": {
						"Context": [
							1414
						],
						"ERC20": [
							585
						],
						"EnumerableSet": [
							2013
						],
						"IERC20": [
							663
						],
						"IERC20Metadata": [
							688
						],
						"Ownable": [
							2118
						],
						"Presale": [
							1392
						],
						"ReentrancyGuard": [
							2158
						],
						"SafeMath": [
							2470
						],
						"TransferHelper": [
							2662
						]
					},
					"id": 1393,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 690,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "93:23:3"
						},
						{
							"absolutePath": "ERC20/ERC20.sol",
							"file": "../ERC20/ERC20.sol",
							"id": 691,
							"nodeType": "ImportDirective",
							"scope": 1393,
							"sourceUnit": 586,
							"src": "120:28:3",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "Utils/ReentrancyGuard.sol",
							"file": "../Utils/ReentrancyGuard.sol",
							"id": 692,
							"nodeType": "ImportDirective",
							"scope": 1393,
							"sourceUnit": 2159,
							"src": "150:38:3",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "Utils/TransferHelper.sol",
							"file": "../Utils/TransferHelper.sol",
							"id": 693,
							"nodeType": "ImportDirective",
							"scope": 1393,
							"sourceUnit": 2663,
							"src": "190:37:3",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "Utils/EnumerableSet.sol",
							"file": "../Utils/EnumerableSet.sol",
							"id": 694,
							"nodeType": "ImportDirective",
							"scope": 1393,
							"sourceUnit": 2014,
							"src": "229:36:3",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "Utils/Ownable.sol",
							"file": "../Utils/Ownable.sol",
							"id": 695,
							"nodeType": "ImportDirective",
							"scope": 1393,
							"sourceUnit": 2119,
							"src": "267:30:3",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "Utils/Context.sol",
							"file": "../Utils/Context.sol",
							"id": 696,
							"nodeType": "ImportDirective",
							"scope": 1393,
							"sourceUnit": 1415,
							"src": "299:30:3",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "Utils/SafeMath.sol",
							"file": "../Utils/SafeMath.sol",
							"id": 697,
							"nodeType": "ImportDirective",
							"scope": 1393,
							"sourceUnit": 2471,
							"src": "331:31:3",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 698,
										"name": "ReentrancyGuard",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 2158,
										"src": "390:15:3"
									},
									"id": 699,
									"nodeType": "InheritanceSpecifier",
									"src": "390:15:3"
								},
								{
									"baseName": {
										"id": 700,
										"name": "Ownable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 2118,
										"src": "407:7:3"
									},
									"id": 701,
									"nodeType": "InheritanceSpecifier",
									"src": "407:7:3"
								}
							],
							"contractDependencies": [
								1414,
								2118,
								2158
							],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 1392,
							"linearizedBaseContracts": [
								1392,
								2118,
								1414,
								2158
							],
							"name": "Presale",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"id": 705,
									"libraryName": {
										"id": 702,
										"name": "EnumerableSet",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 2013,
										"src": "427:13:3"
									},
									"nodeType": "UsingForDirective",
									"src": "421:49:3",
									"typeName": {
										"id": 704,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 703,
											"name": "EnumerableSet.AddressSet",
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 1726,
											"src": "445:24:3"
										},
										"referencedDeclaration": 1726,
										"src": "445:24:3",
										"typeDescriptions": {
											"typeIdentifier": "t_struct$_AddressSet_$1726_storage_ptr",
											"typeString": "struct EnumerableSet.AddressSet"
										}
									}
								},
								{
									"id": 708,
									"libraryName": {
										"id": 706,
										"name": "SafeMath",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 2470,
										"src": "482:8:3"
									},
									"nodeType": "UsingForDirective",
									"src": "476:27:3",
									"typeName": {
										"id": 707,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "495:7:3",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									}
								},
								{
									"canonicalName": "Presale.SaleInfor",
									"id": 735,
									"members": [
										{
											"constant": false,
											"id": 710,
											"mutability": "mutable",
											"name": "presaleOwner",
											"nodeType": "VariableDeclaration",
											"scope": 735,
											"src": "539:28:3",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address_payable",
												"typeString": "address payable"
											},
											"typeName": {
												"id": 709,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "539:15:3",
												"stateMutability": "payable",
												"typeDescriptions": {
													"typeIdentifier": "t_address_payable",
													"typeString": "address payable"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 713,
											"mutability": "mutable",
											"name": "saleToken",
											"nodeType": "VariableDeclaration",
											"scope": 735,
											"src": "578:15:3",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_contract$_ERC20_$585",
												"typeString": "contract ERC20"
											},
											"typeName": {
												"id": 712,
												"nodeType": "UserDefinedTypeName",
												"pathNode": {
													"id": 711,
													"name": "ERC20",
													"nodeType": "IdentifierPath",
													"referencedDeclaration": 585,
													"src": "578:5:3"
												},
												"referencedDeclaration": 585,
												"src": "578:5:3",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ERC20_$585",
													"typeString": "contract ERC20"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 716,
											"mutability": "mutable",
											"name": "baseToken",
											"nodeType": "VariableDeclaration",
											"scope": 735,
											"src": "604:15:3",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_contract$_ERC20_$585",
												"typeString": "contract ERC20"
											},
											"typeName": {
												"id": 715,
												"nodeType": "UserDefinedTypeName",
												"pathNode": {
													"id": 714,
													"name": "ERC20",
													"nodeType": "IdentifierPath",
													"referencedDeclaration": 585,
													"src": "604:5:3"
												},
												"referencedDeclaration": 585,
												"src": "604:5:3",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ERC20_$585",
													"typeString": "contract ERC20"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 718,
											"mutability": "mutable",
											"name": "tokenPrice",
											"nodeType": "VariableDeclaration",
											"scope": 735,
											"src": "630:18:3",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 717,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "630:7:3",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 720,
											"mutability": "mutable",
											"name": "startSale",
											"nodeType": "VariableDeclaration",
											"scope": 735,
											"src": "659:17:3",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 719,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "659:7:3",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 722,
											"mutability": "mutable",
											"name": "endSale",
											"nodeType": "VariableDeclaration",
											"scope": 735,
											"src": "687:15:3",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 721,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "687:7:3",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 724,
											"mutability": "mutable",
											"name": "minSpendPerBuyer",
											"nodeType": "VariableDeclaration",
											"scope": 735,
											"src": "713:24:3",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 723,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "713:7:3",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 726,
											"mutability": "mutable",
											"name": "maxSpendPerBuyer",
											"nodeType": "VariableDeclaration",
											"scope": 735,
											"src": "748:24:3",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 725,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "748:7:3",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 728,
											"mutability": "mutable",
											"name": "refundFee",
											"nodeType": "VariableDeclaration",
											"scope": 735,
											"src": "783:17:3",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 727,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "783:7:3",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 730,
											"mutability": "mutable",
											"name": "claimFee",
											"nodeType": "VariableDeclaration",
											"scope": 735,
											"src": "811:16:3",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 729,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "811:7:3",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 732,
											"mutability": "mutable",
											"name": "saleIsBaseToken",
											"nodeType": "VariableDeclaration",
											"scope": 735,
											"src": "838:20:3",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bool",
												"typeString": "bool"
											},
											"typeName": {
												"id": 731,
												"name": "bool",
												"nodeType": "ElementaryTypeName",
												"src": "838:4:3",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 734,
											"mutability": "mutable",
											"name": "amountTokenForSale",
											"nodeType": "VariableDeclaration",
											"scope": 735,
											"src": "869:26:3",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 733,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "869:7:3",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "SaleInfor",
									"nodeType": "StructDefinition",
									"scope": 1392,
									"src": "511:392:3",
									"visibility": "public"
								},
								{
									"canonicalName": "Presale.SaleTotalSupply",
									"id": 740,
									"members": [
										{
											"constant": false,
											"id": 737,
											"mutability": "mutable",
											"name": "hardCap",
											"nodeType": "VariableDeclaration",
											"scope": 740,
											"src": "949:15:3",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 736,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "949:7:3",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 739,
											"mutability": "mutable",
											"name": "softCap",
											"nodeType": "VariableDeclaration",
											"scope": 740,
											"src": "975:15:3",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 738,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "975:7:3",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "SaleTotalSupply",
									"nodeType": "StructDefinition",
									"scope": 1392,
									"src": "915:83:3",
									"visibility": "public"
								},
								{
									"canonicalName": "Presale.BuyerInfo",
									"id": 753,
									"members": [
										{
											"constant": false,
											"id": 742,
											"mutability": "mutable",
											"name": "baseDeposit",
											"nodeType": "VariableDeclaration",
											"scope": 753,
											"src": "1034:19:3",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 741,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1034:7:3",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 744,
											"mutability": "mutable",
											"name": "tokenOwner",
											"nodeType": "VariableDeclaration",
											"scope": 753,
											"src": "1064:18:3",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 743,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1064:7:3",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 746,
											"mutability": "mutable",
											"name": "lastWithDraw",
											"nodeType": "VariableDeclaration",
											"scope": 753,
											"src": "1093:20:3",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 745,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1093:7:3",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 748,
											"mutability": "mutable",
											"name": "totalTokenWithDraw",
											"nodeType": "VariableDeclaration",
											"scope": 753,
											"src": "1124:26:3",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 747,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1124:7:3",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 750,
											"mutability": "mutable",
											"name": "isRefund",
											"nodeType": "VariableDeclaration",
											"scope": 753,
											"src": "1161:13:3",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bool",
												"typeString": "bool"
											},
											"typeName": {
												"id": 749,
												"name": "bool",
												"nodeType": "ElementaryTypeName",
												"src": "1161:4:3",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 752,
											"mutability": "mutable",
											"name": "isClaim",
											"nodeType": "VariableDeclaration",
											"scope": 753,
											"src": "1185:12:3",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bool",
												"typeString": "bool"
											},
											"typeName": {
												"id": 751,
												"name": "bool",
												"nodeType": "ElementaryTypeName",
												"src": "1185:4:3",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "BuyerInfo",
									"nodeType": "StructDefinition",
									"scope": 1392,
									"src": "1006:199:3",
									"visibility": "public"
								},
								{
									"canonicalName": "Presale.PresaleStatus",
									"id": 769,
									"members": [
										{
											"constant": false,
											"id": 755,
											"mutability": "mutable",
											"name": "totalBaseCollected",
											"nodeType": "VariableDeclaration",
											"scope": 769,
											"src": "1245:26:3",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 754,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1245:7:3",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 757,
											"mutability": "mutable",
											"name": "totalTokenSold",
											"nodeType": "VariableDeclaration",
											"scope": 769,
											"src": "1282:22:3",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 756,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1282:7:3",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 759,
											"mutability": "mutable",
											"name": "totalTokenWithDraw",
											"nodeType": "VariableDeclaration",
											"scope": 769,
											"src": "1315:26:3",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 758,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1315:7:3",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 761,
											"mutability": "mutable",
											"name": "totalBaseWithDraw",
											"nodeType": "VariableDeclaration",
											"scope": 769,
											"src": "1352:25:3",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 760,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1352:7:3",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 763,
											"mutability": "mutable",
											"name": "numberBuyer",
											"nodeType": "VariableDeclaration",
											"scope": 769,
											"src": "1388:19:3",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 762,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1388:7:3",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 765,
											"mutability": "mutable",
											"name": "totalFee",
											"nodeType": "VariableDeclaration",
											"scope": 769,
											"src": "1418:16:3",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 764,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1418:7:3",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 768,
											"mutability": "mutable",
											"name": "admin",
											"nodeType": "VariableDeclaration",
											"scope": 769,
											"src": "1445:15:3",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
												"typeString": "address[]"
											},
											"typeName": {
												"baseType": {
													"id": 766,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1445:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 767,
												"nodeType": "ArrayTypeName",
												"src": "1445:9:3",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
													"typeString": "address[]"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "PresaleStatus",
									"nodeType": "StructDefinition",
									"scope": 1392,
									"src": "1213:255:3",
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "e2d3f423",
									"id": 774,
									"mutability": "mutable",
									"name": "buyerInfo",
									"nodeType": "VariableDeclaration",
									"scope": 1392,
									"src": "1480:46:3",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_struct$_BuyerInfo_$753_storage_$",
										"typeString": "mapping(address => struct Presale.BuyerInfo)"
									},
									"typeName": {
										"id": 773,
										"keyType": {
											"id": 770,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1488:7:3",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "1480:29:3",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_struct$_BuyerInfo_$753_storage_$",
											"typeString": "mapping(address => struct Presale.BuyerInfo)"
										},
										"valueType": {
											"id": 772,
											"nodeType": "UserDefinedTypeName",
											"pathNode": {
												"id": 771,
												"name": "BuyerInfo",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 753,
												"src": "1499:9:3"
											},
											"referencedDeclaration": 753,
											"src": "1499:9:3",
											"typeDescriptions": {
												"typeIdentifier": "t_struct$_BuyerInfo_$753_storage_ptr",
												"typeString": "struct Presale.BuyerInfo"
											}
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "56c5f349",
									"id": 778,
									"mutability": "mutable",
									"name": "userFee",
									"nodeType": "VariableDeclaration",
									"scope": 1392,
									"src": "1533:42:3",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
										"typeString": "mapping(address => uint256)"
									},
									"typeName": {
										"id": 777,
										"keyType": {
											"id": 775,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1541:7:3",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "1533:27:3",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
											"typeString": "mapping(address => uint256)"
										},
										"valueType": {
											"id": 776,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "1552:7:3",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "acfb2355",
									"id": 781,
									"mutability": "mutable",
									"name": "presaleStatus",
									"nodeType": "VariableDeclaration",
									"scope": 1392,
									"src": "1582:34:3",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_struct$_PresaleStatus_$769_storage",
										"typeString": "struct Presale.PresaleStatus"
									},
									"typeName": {
										"id": 780,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 779,
											"name": "PresaleStatus",
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 769,
											"src": "1582:13:3"
										},
										"referencedDeclaration": 769,
										"src": "1582:13:3",
										"typeDescriptions": {
											"typeIdentifier": "t_struct$_PresaleStatus_$769_storage_ptr",
											"typeString": "struct Presale.PresaleStatus"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "12e5d0b9",
									"id": 784,
									"mutability": "mutable",
									"name": "saleTotalSupply",
									"nodeType": "VariableDeclaration",
									"scope": 1392,
									"src": "1623:38:3",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_struct$_SaleTotalSupply_$740_storage",
										"typeString": "struct Presale.SaleTotalSupply"
									},
									"typeName": {
										"id": 783,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 782,
											"name": "SaleTotalSupply",
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 740,
											"src": "1623:15:3"
										},
										"referencedDeclaration": 740,
										"src": "1623:15:3",
										"typeDescriptions": {
											"typeIdentifier": "t_struct$_SaleTotalSupply_$740_storage_ptr",
											"typeString": "struct Presale.SaleTotalSupply"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "18856a2f",
									"id": 787,
									"mutability": "mutable",
									"name": "saleInfor",
									"nodeType": "VariableDeclaration",
									"scope": 1392,
									"src": "1668:26:3",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_struct$_SaleInfor_$735_storage",
										"typeString": "struct Presale.SaleInfor"
									},
									"typeName": {
										"id": 786,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 785,
											"name": "SaleInfor",
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 735,
											"src": "1668:9:3"
										},
										"referencedDeclaration": 735,
										"src": "1668:9:3",
										"typeDescriptions": {
											"typeIdentifier": "t_struct$_SaleInfor_$735_storage_ptr",
											"typeString": "struct Presale.SaleInfor"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "ad5c4648",
									"id": 790,
									"mutability": "mutable",
									"name": "WETH",
									"nodeType": "VariableDeclaration",
									"scope": 1392,
									"src": "1701:18:3",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_contract$_IERC20_$663",
										"typeString": "contract IERC20"
									},
									"typeName": {
										"id": 789,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 788,
											"name": "IERC20",
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 663,
											"src": "1701:6:3"
										},
										"referencedDeclaration": 663,
										"src": "1701:6:3",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IERC20_$663",
											"typeString": "contract IERC20"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "3b5ef2ad",
									"id": 792,
									"mutability": "mutable",
									"name": "feeAnyone",
									"nodeType": "VariableDeclaration",
									"scope": 1392,
									"src": "1726:24:3",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 791,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1726:7:3",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"id": 795,
									"mutability": "mutable",
									"name": "admins",
									"nodeType": "VariableDeclaration",
									"scope": 1392,
									"src": "1757:39:3",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_struct$_AddressSet_$1726_storage",
										"typeString": "struct EnumerableSet.AddressSet"
									},
									"typeName": {
										"id": 794,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 793,
											"name": "EnumerableSet.AddressSet",
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 1726,
											"src": "1757:24:3"
										},
										"referencedDeclaration": 1726,
										"src": "1757:24:3",
										"typeDescriptions": {
											"typeIdentifier": "t_struct$_AddressSet_$1726_storage_ptr",
											"typeString": "struct EnumerableSet.AddressSet"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"functionSelector": "1df4ccfc",
									"id": 797,
									"mutability": "mutable",
									"name": "totalFee",
									"nodeType": "VariableDeclaration",
									"scope": 1392,
									"src": "1804:23:3",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 796,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1804:7:3",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "public"
								},
								{
									"body": {
										"id": 809,
										"nodeType": "Block",
										"src": "1857:82:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"arguments": [],
																	"expression": {
																		"argumentTypes": [],
																		"id": 802,
																		"name": "_msgSender",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1404,
																		"src": "1892:10:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																			"typeString": "function () view returns (address)"
																		}
																	},
																	"id": 803,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "1892:12:3",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"expression": {
																	"id": 800,
																	"name": "admins",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 795,
																	"src": "1876:6:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_AddressSet_$1726_storage",
																		"typeString": "struct EnumerableSet.AddressSet storage ref"
																	}
																},
																"id": 801,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "contains",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 1807,
																"src": "1876:15:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$_t_struct$_AddressSet_$1726_storage_ptr_$_t_address_$returns$_t_bool_$bound_to$_t_struct$_AddressSet_$1726_storage_ptr_$",
																	"typeString": "function (struct EnumerableSet.AddressSet storage pointer,address) view returns (bool)"
																}
															},
															"id": 804,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1876:29:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4e6f742061646d696e",
															"id": 805,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1907:11:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_fa7e120cf98867f00c0ac28b387a73caec64b93b1889065f7b4c5e5232c0bad6",
																"typeString": "literal_string \"Not admin\""
															},
															"value": "Not admin"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_fa7e120cf98867f00c0ac28b387a73caec64b93b1889065f7b4c5e5232c0bad6",
																"typeString": "literal_string \"Not admin\""
															}
														],
														"id": 799,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1868:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 806,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1868:51:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 807,
												"nodeType": "ExpressionStatement",
												"src": "1868:51:3"
											},
											{
												"id": 808,
												"nodeType": "PlaceholderStatement",
												"src": "1930:1:3"
											}
										]
									},
									"id": 810,
									"name": "onlyAdmin",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 798,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1854:2:3"
									},
									"src": "1836:103:3",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 822,
										"nodeType": "Block",
										"src": "1972:96:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 817,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 813,
																	"name": "_msgSender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1404,
																	"src": "1991:10:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																		"typeString": "function () view returns (address)"
																	}
																},
																"id": 814,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1991:12:3",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"expression": {
																	"id": 815,
																	"name": "saleInfor",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 787,
																	"src": "2007:9:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_SaleInfor_$735_storage",
																		"typeString": "struct Presale.SaleInfor storage ref"
																	}
																},
																"id": 816,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "presaleOwner",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 710,
																"src": "2007:22:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"src": "1991:38:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4e6f742073616c65206f776e6572",
															"id": 818,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2031:16:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_d260997bd85ce88e5fe3a090aa0509f0362655b7ef85530ca7ca41b7767ad72f",
																"typeString": "literal_string \"Not sale owner\""
															},
															"value": "Not sale owner"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_d260997bd85ce88e5fe3a090aa0509f0362655b7ef85530ca7ca41b7767ad72f",
																"typeString": "literal_string \"Not sale owner\""
															}
														],
														"id": 812,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1983:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 819,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1983:65:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 820,
												"nodeType": "ExpressionStatement",
												"src": "1983:65:3"
											},
											{
												"id": 821,
												"nodeType": "PlaceholderStatement",
												"src": "2059:1:3"
											}
										]
									},
									"id": 823,
									"name": "onlySaleOwner",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 811,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1969:2:3"
									},
									"src": "1947:121:3",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 848,
										"nodeType": "Block",
										"src": "2098:230:3",
										"statements": [
											{
												"expression": {
													"id": 830,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 826,
														"name": "WETH",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 790,
														"src": "2109:4:3",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IERC20_$663",
															"typeString": "contract IERC20"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"hexValue": "307863373738343137453036333134313133394663653031303938323738303134304161306344354162",
																"id": 828,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2122:42:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																},
																"value": "0xc778417E063141139Fce010982780140Aa0cD5Ab"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															],
															"id": 827,
															"name": "ERC20",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 585,
															"src": "2116:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_ERC20_$585_$",
																"typeString": "type(contract ERC20)"
															}
														},
														"id": 829,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2116:49:3",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_ERC20_$585",
															"typeString": "contract ERC20"
														}
													},
													"src": "2109:56:3",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$663",
														"typeString": "contract IERC20"
													}
												},
												"id": 831,
												"nodeType": "ExpressionStatement",
												"src": "2109:56:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"hexValue": "307836436362343165656441356130373330373646334537644331363134433138356235664134316544",
															"id": 835,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2187:42:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"value": "0x6Ccb41eedA5a073076F3E7dC1614C185b5fA41eD"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"expression": {
															"id": 832,
															"name": "admins",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 795,
															"src": "2176:6:3",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_AddressSet_$1726_storage",
																"typeString": "struct EnumerableSet.AddressSet storage ref"
															}
														},
														"id": 834,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "add",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1753,
														"src": "2176:10:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_struct$_AddressSet_$1726_storage_ptr_$_t_address_$returns$_t_bool_$bound_to$_t_struct$_AddressSet_$1726_storage_ptr_$",
															"typeString": "function (struct EnumerableSet.AddressSet storage pointer,address) returns (bool)"
														}
													},
													"id": 836,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2176:54:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 837,
												"nodeType": "ExpressionStatement",
												"src": "2176:54:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"hexValue": "307834663042313262424634304663313832353539383232413562316442364433346462433345303136",
															"id": 841,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2252:42:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"value": "0x4f0B12bBF40Fc182559822A5b1dB6D34dbC3E016"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"expression": {
															"id": 838,
															"name": "admins",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 795,
															"src": "2241:6:3",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_AddressSet_$1726_storage",
																"typeString": "struct EnumerableSet.AddressSet storage ref"
															}
														},
														"id": 840,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "add",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1753,
														"src": "2241:10:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_struct$_AddressSet_$1726_storage_ptr_$_t_address_$returns$_t_bool_$bound_to$_t_struct$_AddressSet_$1726_storage_ptr_$",
															"typeString": "function (struct EnumerableSet.AddressSet storage pointer,address) returns (bool)"
														}
													},
													"id": 842,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2241:54:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 843,
												"nodeType": "ExpressionStatement",
												"src": "2241:54:3"
											},
											{
												"expression": {
													"id": 846,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 844,
														"name": "feeAnyone",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 792,
														"src": "2306:9:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "3230",
														"id": 845,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2318:2:3",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_20_by_1",
															"typeString": "int_const 20"
														},
														"value": "20"
													},
													"src": "2306:14:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 847,
												"nodeType": "ExpressionStatement",
												"src": "2306:14:3"
											}
										]
									},
									"id": 849,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 824,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2087:2:3"
									},
									"returnParameters": {
										"id": 825,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2098:0:3"
									},
									"scope": 1392,
									"src": "2076:252:3",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1004,
										"nodeType": "Block",
										"src": "2506:815:3",
										"statements": [
											{
												"expression": {
													"id": 868,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 864,
															"name": "saleInfor",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 787,
															"src": "2517:9:3",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_SaleInfor_$735_storage",
																"typeString": "struct Presale.SaleInfor storage ref"
															}
														},
														"id": 866,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "presaleOwner",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 710,
														"src": "2517:22:3",
														"typeDescriptions": {
															"typeIdentifier": "t_address_payable",
															"typeString": "address payable"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 867,
														"name": "_presaleOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 851,
														"src": "2542:13:3",
														"typeDescriptions": {
															"typeIdentifier": "t_address_payable",
															"typeString": "address payable"
														}
													},
													"src": "2517:38:3",
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"id": 869,
												"nodeType": "ExpressionStatement",
												"src": "2517:38:3"
											},
											{
												"expression": {
													"id": 874,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 870,
															"name": "saleInfor",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 787,
															"src": "2566:9:3",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_SaleInfor_$735_storage",
																"typeString": "struct Presale.SaleInfor storage ref"
															}
														},
														"id": 872,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "saleToken",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 713,
														"src": "2566:19:3",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_ERC20_$585",
															"typeString": "contract ERC20"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 873,
														"name": "_saleToken",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 854,
														"src": "2588:10:3",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_ERC20_$585",
															"typeString": "contract ERC20"
														}
													},
													"src": "2566:32:3",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ERC20_$585",
														"typeString": "contract ERC20"
													}
												},
												"id": 875,
												"nodeType": "ExpressionStatement",
												"src": "2566:32:3"
											},
											{
												"expression": {
													"id": 880,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 876,
															"name": "saleInfor",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 787,
															"src": "2609:9:3",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_SaleInfor_$735_storage",
																"typeString": "struct Presale.SaleInfor storage ref"
															}
														},
														"id": 878,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "baseToken",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 716,
														"src": "2609:19:3",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_ERC20_$585",
															"typeString": "contract ERC20"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 879,
														"name": "_baseTOken",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 857,
														"src": "2631:10:3",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_ERC20_$585",
															"typeString": "contract ERC20"
														}
													},
													"src": "2609:32:3",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ERC20_$585",
														"typeString": "contract ERC20"
													}
												},
												"id": 881,
												"nodeType": "ExpressionStatement",
												"src": "2609:32:3"
											},
											{
												"expression": {
													"id": 900,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 882,
															"name": "saleInfor",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 787,
															"src": "2652:9:3",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_SaleInfor_$735_storage",
																"typeString": "struct Presale.SaleInfor storage ref"
															}
														},
														"id": 884,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "tokenPrice",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 718,
														"src": "2652:20:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 899,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"baseExpression": {
																"id": 885,
																"name": "datas",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 861,
																"src": "2675:5:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_array$_t_uint256_$9_memory_ptr",
																	"typeString": "uint256[9] memory"
																}
															},
															"id": 887,
															"indexExpression": {
																"hexValue": "30",
																"id": 886,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2681:1:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "2675:8:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "*",
														"rightExpression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 898,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"hexValue": "3130",
																"id": 888,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2686:2:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_10_by_1",
																	"typeString": "int_const 10"
																},
																"value": "10"
															},
															"nodeType": "BinaryOperation",
															"operator": "**",
															"rightExpression": {
																"arguments": [
																	{
																		"arguments": [],
																		"expression": {
																			"argumentTypes": [],
																			"expression": {
																				"arguments": [
																					{
																						"expression": {
																							"id": 892,
																							"name": "saleInfor",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 787,
																							"src": "2705:9:3",
																							"typeDescriptions": {
																								"typeIdentifier": "t_struct$_SaleInfor_$735_storage",
																								"typeString": "struct Presale.SaleInfor storage ref"
																							}
																						},
																						"id": 893,
																						"isConstant": false,
																						"isLValue": true,
																						"isPure": false,
																						"lValueRequested": false,
																						"memberName": "saleToken",
																						"nodeType": "MemberAccess",
																						"referencedDeclaration": 713,
																						"src": "2705:19:3",
																						"typeDescriptions": {
																							"typeIdentifier": "t_contract$_ERC20_$585",
																							"typeString": "contract ERC20"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_contract$_ERC20_$585",
																							"typeString": "contract ERC20"
																						}
																					],
																					"id": 891,
																					"name": "ERC20",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 585,
																					"src": "2699:5:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_contract$_ERC20_$585_$",
																						"typeString": "type(contract ERC20)"
																					}
																				},
																				"id": 894,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "typeConversion",
																				"lValueRequested": false,
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "2699:26:3",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_contract$_ERC20_$585",
																					"typeString": "contract ERC20"
																				}
																			},
																			"id": 895,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberName": "decimals",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 74,
																			"src": "2699:35:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_external_view$__$returns$_t_uint256_$",
																				"typeString": "function () view external returns (uint256)"
																			}
																		},
																		"id": 896,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "2699:37:3",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 890,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "2691:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint256_$",
																		"typeString": "type(uint256)"
																	},
																	"typeName": {
																		"id": 889,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "2691:7:3",
																		"typeDescriptions": {}
																	}
																},
																"id": 897,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2691:46:3",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2686:51:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "2675:62:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2652:85:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 901,
												"nodeType": "ExpressionStatement",
												"src": "2652:85:3"
											},
											{
												"expression": {
													"id": 908,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 902,
															"name": "saleInfor",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 787,
															"src": "2748:9:3",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_SaleInfor_$735_storage",
																"typeString": "struct Presale.SaleInfor storage ref"
															}
														},
														"id": 904,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "startSale",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 720,
														"src": "2748:19:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"baseExpression": {
															"id": 905,
															"name": "datas",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 861,
															"src": "2770:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_uint256_$9_memory_ptr",
																"typeString": "uint256[9] memory"
															}
														},
														"id": 907,
														"indexExpression": {
															"hexValue": "31",
															"id": 906,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2776:1:3",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "2770:8:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2748:30:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 909,
												"nodeType": "ExpressionStatement",
												"src": "2748:30:3"
											},
											{
												"expression": {
													"id": 916,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 910,
															"name": "saleInfor",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 787,
															"src": "2789:9:3",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_SaleInfor_$735_storage",
																"typeString": "struct Presale.SaleInfor storage ref"
															}
														},
														"id": 912,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "endSale",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 722,
														"src": "2789:17:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"baseExpression": {
															"id": 913,
															"name": "datas",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 861,
															"src": "2809:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_uint256_$9_memory_ptr",
																"typeString": "uint256[9] memory"
															}
														},
														"id": 915,
														"indexExpression": {
															"hexValue": "32",
															"id": 914,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2815:1:3",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_2_by_1",
																"typeString": "int_const 2"
															},
															"value": "2"
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "2809:8:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2789:28:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 917,
												"nodeType": "ExpressionStatement",
												"src": "2789:28:3"
											},
											{
												"expression": {
													"id": 924,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 918,
															"name": "saleInfor",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 787,
															"src": "2828:9:3",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_SaleInfor_$735_storage",
																"typeString": "struct Presale.SaleInfor storage ref"
															}
														},
														"id": 920,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "minSpendPerBuyer",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 724,
														"src": "2828:26:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"baseExpression": {
															"id": 921,
															"name": "datas",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 861,
															"src": "2857:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_uint256_$9_memory_ptr",
																"typeString": "uint256[9] memory"
															}
														},
														"id": 923,
														"indexExpression": {
															"hexValue": "33",
															"id": 922,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2863:1:3",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_3_by_1",
																"typeString": "int_const 3"
															},
															"value": "3"
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "2857:8:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2828:37:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 925,
												"nodeType": "ExpressionStatement",
												"src": "2828:37:3"
											},
											{
												"expression": {
													"id": 944,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 926,
															"name": "saleInfor",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 787,
															"src": "2876:9:3",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_SaleInfor_$735_storage",
																"typeString": "struct Presale.SaleInfor storage ref"
															}
														},
														"id": 928,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "maxSpendPerBuyer",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 726,
														"src": "2876:26:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 943,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"baseExpression": {
																"id": 929,
																"name": "datas",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 861,
																"src": "2905:5:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_array$_t_uint256_$9_memory_ptr",
																	"typeString": "uint256[9] memory"
																}
															},
															"id": 931,
															"indexExpression": {
																"hexValue": "34",
																"id": 930,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2911:1:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_4_by_1",
																	"typeString": "int_const 4"
																},
																"value": "4"
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "2905:8:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "*",
														"rightExpression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 942,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"hexValue": "3130",
																"id": 932,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2916:2:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_10_by_1",
																	"typeString": "int_const 10"
																},
																"value": "10"
															},
															"nodeType": "BinaryOperation",
															"operator": "**",
															"rightExpression": {
																"arguments": [
																	{
																		"arguments": [],
																		"expression": {
																			"argumentTypes": [],
																			"expression": {
																				"arguments": [
																					{
																						"expression": {
																							"id": 936,
																							"name": "saleInfor",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 787,
																							"src": "2935:9:3",
																							"typeDescriptions": {
																								"typeIdentifier": "t_struct$_SaleInfor_$735_storage",
																								"typeString": "struct Presale.SaleInfor storage ref"
																							}
																						},
																						"id": 937,
																						"isConstant": false,
																						"isLValue": true,
																						"isPure": false,
																						"lValueRequested": false,
																						"memberName": "baseToken",
																						"nodeType": "MemberAccess",
																						"referencedDeclaration": 716,
																						"src": "2935:19:3",
																						"typeDescriptions": {
																							"typeIdentifier": "t_contract$_ERC20_$585",
																							"typeString": "contract ERC20"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_contract$_ERC20_$585",
																							"typeString": "contract ERC20"
																						}
																					],
																					"id": 935,
																					"name": "ERC20",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 585,
																					"src": "2929:5:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_contract$_ERC20_$585_$",
																						"typeString": "type(contract ERC20)"
																					}
																				},
																				"id": 938,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "typeConversion",
																				"lValueRequested": false,
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "2929:26:3",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_contract$_ERC20_$585",
																					"typeString": "contract ERC20"
																				}
																			},
																			"id": 939,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberName": "decimals",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 74,
																			"src": "2929:35:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_external_view$__$returns$_t_uint256_$",
																				"typeString": "function () view external returns (uint256)"
																			}
																		},
																		"id": 940,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "2929:37:3",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 934,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "2921:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint256_$",
																		"typeString": "type(uint256)"
																	},
																	"typeName": {
																		"id": 933,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "2921:7:3",
																		"typeDescriptions": {}
																	}
																},
																"id": 941,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2921:46:3",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2916:51:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "2905:62:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2876:91:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 945,
												"nodeType": "ExpressionStatement",
												"src": "2876:91:3"
											},
											{
												"expression": {
													"id": 952,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 946,
															"name": "saleInfor",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 787,
															"src": "2978:9:3",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_SaleInfor_$735_storage",
																"typeString": "struct Presale.SaleInfor storage ref"
															}
														},
														"id": 948,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "refundFee",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 728,
														"src": "2978:19:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"baseExpression": {
															"id": 949,
															"name": "datas",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 861,
															"src": "3000:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_uint256_$9_memory_ptr",
																"typeString": "uint256[9] memory"
															}
														},
														"id": 951,
														"indexExpression": {
															"hexValue": "35",
															"id": 950,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3006:1:3",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_5_by_1",
																"typeString": "int_const 5"
															},
															"value": "5"
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "3000:8:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2978:30:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 953,
												"nodeType": "ExpressionStatement",
												"src": "2978:30:3"
											},
											{
												"expression": {
													"id": 960,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 954,
															"name": "saleInfor",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 787,
															"src": "3019:9:3",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_SaleInfor_$735_storage",
																"typeString": "struct Presale.SaleInfor storage ref"
															}
														},
														"id": 956,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "claimFee",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 730,
														"src": "3019:18:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"baseExpression": {
															"id": 957,
															"name": "datas",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 861,
															"src": "3040:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_uint256_$9_memory_ptr",
																"typeString": "uint256[9] memory"
															}
														},
														"id": 959,
														"indexExpression": {
															"hexValue": "36",
															"id": 958,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3046:1:3",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_6_by_1",
																"typeString": "int_const 6"
															},
															"value": "6"
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "3040:8:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3019:29:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 961,
												"nodeType": "ExpressionStatement",
												"src": "3019:29:3"
											},
											{
												"expression": {
													"id": 968,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 962,
															"name": "saleTotalSupply",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 784,
															"src": "3059:15:3",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_SaleTotalSupply_$740_storage",
																"typeString": "struct Presale.SaleTotalSupply storage ref"
															}
														},
														"id": 964,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "hardCap",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 737,
														"src": "3059:23:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"baseExpression": {
															"id": 965,
															"name": "datas",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 861,
															"src": "3085:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_uint256_$9_memory_ptr",
																"typeString": "uint256[9] memory"
															}
														},
														"id": 967,
														"indexExpression": {
															"hexValue": "37",
															"id": 966,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3091:1:3",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_7_by_1",
																"typeString": "int_const 7"
															},
															"value": "7"
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "3085:8:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3059:34:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 969,
												"nodeType": "ExpressionStatement",
												"src": "3059:34:3"
											},
											{
												"expression": {
													"id": 976,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 970,
															"name": "saleTotalSupply",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 784,
															"src": "3104:15:3",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_SaleTotalSupply_$740_storage",
																"typeString": "struct Presale.SaleTotalSupply storage ref"
															}
														},
														"id": 972,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "softCap",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 739,
														"src": "3104:23:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"baseExpression": {
															"id": 973,
															"name": "datas",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 861,
															"src": "3130:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_uint256_$9_memory_ptr",
																"typeString": "uint256[9] memory"
															}
														},
														"id": 975,
														"indexExpression": {
															"hexValue": "38",
															"id": 974,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3136:1:3",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_8_by_1",
																"typeString": "int_const 8"
															},
															"value": "8"
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "3130:8:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3104:34:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 977,
												"nodeType": "ExpressionStatement",
												"src": "3104:34:3"
											},
											{
												"expression": {
													"id": 991,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 978,
															"name": "saleInfor",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 787,
															"src": "3149:9:3",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_SaleInfor_$735_storage",
																"typeString": "struct Presale.SaleInfor storage ref"
															}
														},
														"id": 980,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "saleIsBaseToken",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 732,
														"src": "3149:25:3",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"commonType": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"id": 990,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"arguments": [
																{
																	"id": 983,
																	"name": "WETH",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 790,
																	"src": "3185:4:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$663",
																		"typeString": "contract IERC20"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_IERC20_$663",
																		"typeString": "contract IERC20"
																	}
																],
																"id": 982,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "3177:7:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 981,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "3177:7:3",
																	"typeDescriptions": {}
																}
															},
															"id": 984,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3177:13:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"arguments": [
																{
																	"expression": {
																		"id": 987,
																		"name": "saleInfor",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 787,
																		"src": "3202:9:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_SaleInfor_$735_storage",
																			"typeString": "struct Presale.SaleInfor storage ref"
																		}
																	},
																	"id": 988,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "baseToken",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 716,
																	"src": "3202:19:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_ERC20_$585",
																		"typeString": "contract ERC20"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_ERC20_$585",
																		"typeString": "contract ERC20"
																	}
																],
																"id": 986,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "3194:7:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 985,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "3194:7:3",
																	"typeDescriptions": {}
																}
															},
															"id": 989,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3194:28:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"src": "3177:45:3",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "3149:73:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 992,
												"nodeType": "ExpressionStatement",
												"src": "3149:73:3"
											},
											{
												"expression": {
													"id": 1002,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 993,
															"name": "saleInfor",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 787,
															"src": "3233:9:3",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_SaleInfor_$735_storage",
																"typeString": "struct Presale.SaleInfor storage ref"
															}
														},
														"id": 995,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "amountTokenForSale",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 734,
														"src": "3233:28:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"expression": {
																	"id": 999,
																	"name": "saleTotalSupply",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 784,
																	"src": "3289:15:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_SaleTotalSupply_$740_storage",
																		"typeString": "struct Presale.SaleTotalSupply storage ref"
																	}
																},
																"id": 1000,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "hardCap",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 737,
																"src": "3289:23:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"expression": {
																"expression": {
																	"id": 996,
																	"name": "saleInfor",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 787,
																	"src": "3264:9:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_SaleInfor_$735_storage",
																		"typeString": "struct Presale.SaleInfor storage ref"
																	}
																},
																"id": 997,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "tokenPrice",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 718,
																"src": "3264:20:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 998,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "mul",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 2364,
															"src": "3264:24:3",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																"typeString": "function (uint256,uint256) pure returns (uint256)"
															}
														},
														"id": 1001,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3264:49:3",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3233:80:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1003,
												"nodeType": "ExpressionStatement",
												"src": "3233:80:3"
											}
										]
									},
									"functionSelector": "8f1eae4c",
									"id": 1005,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "initialSaleInfor",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 862,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 851,
												"mutability": "mutable",
												"name": "_presaleOwner",
												"nodeType": "VariableDeclaration",
												"scope": 1005,
												"src": "2372:29:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address_payable",
													"typeString": "address payable"
												},
												"typeName": {
													"id": 850,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2372:15:3",
													"stateMutability": "payable",
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 854,
												"mutability": "mutable",
												"name": "_saleToken",
												"nodeType": "VariableDeclaration",
												"scope": 1005,
												"src": "2412:16:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ERC20_$585",
													"typeString": "contract ERC20"
												},
												"typeName": {
													"id": 853,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 852,
														"name": "ERC20",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 585,
														"src": "2412:5:3"
													},
													"referencedDeclaration": 585,
													"src": "2412:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ERC20_$585",
														"typeString": "contract ERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 857,
												"mutability": "mutable",
												"name": "_baseTOken",
												"nodeType": "VariableDeclaration",
												"scope": 1005,
												"src": "2439:16:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ERC20_$585",
													"typeString": "contract ERC20"
												},
												"typeName": {
													"id": 856,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 855,
														"name": "ERC20",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 585,
														"src": "2439:5:3"
													},
													"referencedDeclaration": 585,
													"src": "2439:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ERC20_$585",
														"typeString": "contract ERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 861,
												"mutability": "mutable",
												"name": "datas",
												"nodeType": "VariableDeclaration",
												"scope": 1005,
												"src": "2466:23:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$9_memory_ptr",
													"typeString": "uint256[9]"
												},
												"typeName": {
													"baseType": {
														"id": 858,
														"name": "uint256",
														"nodeType": "ElementaryTypeName",
														"src": "2466:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 860,
													"length": {
														"hexValue": "39",
														"id": 859,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2474:1:3",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_9_by_1",
															"typeString": "int_const 9"
														},
														"value": "9"
													},
													"nodeType": "ArrayTypeName",
													"src": "2466:10:3",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$9_storage_ptr",
														"typeString": "uint256[9]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2361:135:3"
									},
									"returnParameters": {
										"id": 863,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2506:0:3"
									},
									"scope": 1392,
									"src": "2336:985:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1032,
										"nodeType": "Block",
										"src": "3377:290:3",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1014,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 1010,
															"name": "block",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967292,
															"src": "3391:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_block",
																"typeString": "block"
															}
														},
														"id": 1011,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "timestamp",
														"nodeType": "MemberAccess",
														"src": "3391:15:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"expression": {
															"id": 1012,
															"name": "saleInfor",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 787,
															"src": "3409:9:3",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_SaleInfor_$735_storage",
																"typeString": "struct Presale.SaleInfor storage ref"
															}
														},
														"id": 1013,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "startSale",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 720,
														"src": "3409:19:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3391:37:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 1030,
													"nodeType": "Block",
													"src": "3483:177:3",
													"statements": [
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1022,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"expression": {
																		"id": 1018,
																		"name": "block",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967292,
																		"src": "3501:5:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_block",
																			"typeString": "block"
																		}
																	},
																	"id": 1019,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "timestamp",
																	"nodeType": "MemberAccess",
																	"src": "3501:15:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">",
																"rightExpression": {
																	"expression": {
																		"id": 1020,
																		"name": "saleInfor",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 787,
																		"src": "3519:9:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_SaleInfor_$735_storage",
																			"typeString": "struct Presale.SaleInfor storage ref"
																		}
																	},
																	"id": 1021,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "endSale",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 722,
																	"src": "3519:17:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "3501:35:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"falseBody": {
																"id": 1028,
																"nodeType": "Block",
																"src": "3596:53:3",
																"statements": [
																	{
																		"expression": {
																			"hexValue": "31",
																			"id": 1026,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "3622:1:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"functionReturnParameters": 1009,
																		"id": 1027,
																		"nodeType": "Return",
																		"src": "3615:8:3"
																	}
																]
															},
															"id": 1029,
															"nodeType": "IfStatement",
															"src": "3498:151:3",
															"trueBody": {
																"id": 1025,
																"nodeType": "Block",
																"src": "3538:54:3",
																"statements": [
																	{
																		"expression": {
																			"hexValue": "32",
																			"id": 1023,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "3564:1:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_2_by_1",
																				"typeString": "int_const 2"
																			},
																			"value": "2"
																		},
																		"functionReturnParameters": 1009,
																		"id": 1024,
																		"nodeType": "Return",
																		"src": "3557:8:3"
																	}
																]
															}
														}
													]
												},
												"id": 1031,
												"nodeType": "IfStatement",
												"src": "3388:272:3",
												"trueBody": {
													"id": 1017,
													"nodeType": "Block",
													"src": "3430:49:3",
													"statements": [
														{
															"expression": {
																"hexValue": "30",
																"id": 1015,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "3452:1:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"functionReturnParameters": 1009,
															"id": 1016,
															"nodeType": "Return",
															"src": "3445:8:3"
														}
													]
												}
											}
										]
									},
									"functionSelector": "200d2ed2",
									"id": 1033,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "status",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1006,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3345:2:3"
									},
									"returnParameters": {
										"id": 1009,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1008,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1033,
												"src": "3368:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1007,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3368:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3367:9:3"
									},
									"scope": 1392,
									"src": "3330:337:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1044,
										"nodeType": "Block",
										"src": "3731:55:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 1040,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1404,
																"src": "3765:10:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 1041,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3765:12:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"expression": {
															"id": 1038,
															"name": "admins",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 795,
															"src": "3749:6:3",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_AddressSet_$1726_storage",
																"typeString": "struct EnumerableSet.AddressSet storage ref"
															}
														},
														"id": 1039,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "contains",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1807,
														"src": "3749:15:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_struct$_AddressSet_$1726_storage_ptr_$_t_address_$returns$_t_bool_$bound_to$_t_struct$_AddressSet_$1726_storage_ptr_$",
															"typeString": "function (struct EnumerableSet.AddressSet storage pointer,address) view returns (bool)"
														}
													},
													"id": 1042,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3749:29:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 1037,
												"id": 1043,
												"nodeType": "Return",
												"src": "3742:36:3"
											}
										]
									},
									"functionSelector": "cad5b0f7",
									"id": 1045,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "checkAdminAddress",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1034,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3702:2:3"
									},
									"returnParameters": {
										"id": 1037,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1036,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1045,
												"src": "3725:4:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1035,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "3725:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3724:6:3"
									},
									"scope": 1392,
									"src": "3676:110:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1269,
										"nodeType": "Block",
										"src": "3858:2061:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1056,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 1053,
																	"name": "status",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1033,
																	"src": "3877:6:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
																		"typeString": "function () view returns (uint256)"
																	}
																},
																"id": 1054,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3877:8:3",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "31",
																"id": 1055,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "3889:1:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1_by_1",
																	"typeString": "int_const 1"
																},
																"value": "1"
															},
															"src": "3877:13:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4e6f7420616374697665",
															"id": 1057,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3892:12:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_4f4071cacb98a73fb0fb3325a9a9a07b87a20a90340fd79a56fa9441c16f3367",
																"typeString": "literal_string \"Not active\""
															},
															"value": "Not active"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_4f4071cacb98a73fb0fb3325a9a9a07b87a20a90340fd79a56fa9441c16f3367",
																"typeString": "literal_string \"Not active\""
															}
														],
														"id": 1052,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "3869:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1058,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3869:36:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1059,
												"nodeType": "ExpressionStatement",
												"src": "3869:36:3"
											},
											{
												"assignments": [
													1062
												],
												"declarations": [
													{
														"constant": false,
														"id": 1062,
														"mutability": "mutable",
														"name": "buyer",
														"nodeType": "VariableDeclaration",
														"scope": 1269,
														"src": "3926:23:3",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_BuyerInfo_$753_storage_ptr",
															"typeString": "struct Presale.BuyerInfo"
														},
														"typeName": {
															"id": 1061,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 1060,
																"name": "BuyerInfo",
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 753,
																"src": "3926:9:3"
															},
															"referencedDeclaration": 753,
															"src": "3926:9:3",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_BuyerInfo_$753_storage_ptr",
																"typeString": "struct Presale.BuyerInfo"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1067,
												"initialValue": {
													"baseExpression": {
														"id": 1063,
														"name": "buyerInfo",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 774,
														"src": "3952:9:3",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_struct$_BuyerInfo_$753_storage_$",
															"typeString": "mapping(address => struct Presale.BuyerInfo storage ref)"
														}
													},
													"id": 1066,
													"indexExpression": {
														"expression": {
															"id": 1064,
															"name": "msg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967281,
															"src": "3962:3:3",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_message",
																"typeString": "msg"
															}
														},
														"id": 1065,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "sender",
														"nodeType": "MemberAccess",
														"src": "3962:10:3",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "3952:21:3",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_BuyerInfo_$753_storage",
														"typeString": "struct Presale.BuyerInfo storage ref"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3926:47:3"
											},
											{
												"assignments": [
													1069
												],
												"declarations": [
													{
														"constant": false,
														"id": 1069,
														"mutability": "mutable",
														"name": "amount_in",
														"nodeType": "VariableDeclaration",
														"scope": 1269,
														"src": "3984:17:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1068,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "3984:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1071,
												"initialValue": {
													"id": 1070,
													"name": "_amount",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1047,
													"src": "4004:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3984:27:3"
											},
											{
												"assignments": [
													1073
												],
												"declarations": [
													{
														"constant": false,
														"id": 1073,
														"mutability": "mutable",
														"name": "real_amount_in",
														"nodeType": "VariableDeclaration",
														"scope": 1269,
														"src": "4022:22:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1072,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "4022:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1075,
												"initialValue": {
													"id": 1074,
													"name": "amount_in",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1069,
													"src": "4047:9:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4022:34:3"
											},
											{
												"assignments": [
													1077
												],
												"declarations": [
													{
														"constant": false,
														"id": 1077,
														"mutability": "mutable",
														"name": "fee",
														"nodeType": "VariableDeclaration",
														"scope": 1269,
														"src": "4067:11:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1076,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "4067:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1079,
												"initialValue": {
													"hexValue": "30",
													"id": 1078,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "4081:1:3",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4067:15:3"
											},
											{
												"assignments": [
													1081
												],
												"declarations": [
													{
														"constant": false,
														"id": 1081,
														"mutability": "mutable",
														"name": "fullPercenFee",
														"nodeType": "VariableDeclaration",
														"scope": 1269,
														"src": "4093:21:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1080,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "4093:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1083,
												"initialValue": {
													"hexValue": "31303030",
													"id": 1082,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "4117:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_1000_by_1",
														"typeString": "int_const 1000"
													},
													"value": "1000"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4093:28:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1088,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1085,
																"name": "real_amount_in",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1073,
																"src": "4140:14:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"expression": {
																	"id": 1086,
																	"name": "saleInfor",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 787,
																	"src": "4158:9:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_SaleInfor_$735_storage",
																		"typeString": "struct Presale.SaleInfor storage ref"
																	}
																},
																"id": 1087,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "minSpendPerBuyer",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 724,
																"src": "4158:26:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "4140:44:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4e6f7420656e6f7567682076616c7565",
															"id": 1089,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4204:18:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_8254a19c2218e87bd65e7d451e5bbd6df57ba9f73035118b8f47be7b5659ddde",
																"typeString": "literal_string \"Not enough value\""
															},
															"value": "Not enough value"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_8254a19c2218e87bd65e7d451e5bbd6df57ba9f73035118b8f47be7b5659ddde",
																"typeString": "literal_string \"Not enough value\""
															}
														],
														"id": 1084,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "4132:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1090,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4132:101:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1091,
												"nodeType": "ExpressionStatement",
												"src": "4132:101:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1096,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1093,
																"name": "real_amount_in",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1073,
																"src": "4252:14:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<=",
															"rightExpression": {
																"expression": {
																	"id": 1094,
																	"name": "saleInfor",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 787,
																	"src": "4270:9:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_SaleInfor_$735_storage",
																		"typeString": "struct Presale.SaleInfor storage ref"
																	}
																},
																"id": 1095,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "maxSpendPerBuyer",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 726,
																"src": "4270:26:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "4252:44:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4f766572666c6f772076616c7565",
															"id": 1097,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4316:16:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_48cc793e3ea877d6bf034b11f4c6d0d583dd24a0f1374daf495701b65f42f81c",
																"typeString": "literal_string \"Overflow value\""
															},
															"value": "Overflow value"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_48cc793e3ea877d6bf034b11f4c6d0d583dd24a0f1374daf495701b65f42f81c",
																"typeString": "literal_string \"Overflow value\""
															}
														],
														"id": 1092,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "4244:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1098,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4244:99:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1099,
												"nodeType": "ExpressionStatement",
												"src": "4244:99:3"
											},
											{
												"condition": {
													"id": 1102,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "!",
													"prefix": true,
													"src": "4357:20:3",
													"subExpression": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 1100,
															"name": "checkAdminAddress",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1045,
															"src": "4358:17:3",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$__$returns$_t_bool_$",
																"typeString": "function () view returns (bool)"
															}
														},
														"id": 1101,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "4358:19:3",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1125,
												"nodeType": "IfStatement",
												"src": "4354:266:3",
												"trueBody": {
													"id": 1124,
													"nodeType": "Block",
													"src": "4379:241:3",
													"statements": [
														{
															"expression": {
																"id": 1116,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 1103,
																	"name": "real_amount_in",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1073,
																	"src": "4394:14:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"arguments": [
																		{
																			"id": 1114,
																			"name": "fullPercenFee",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1081,
																			"src": "4530:13:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"expression": {
																			"components": [
																				{
																					"arguments": [
																						{
																							"id": 1110,
																							"name": "real_amount_in",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 1073,
																							"src": "4478:14:3",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						}
																					],
																					"expression": {
																						"argumentTypes": [
																							{
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						],
																						"expression": {
																							"components": [
																								{
																									"arguments": [
																										{
																											"id": 1106,
																											"name": "feeAnyone",
																											"nodeType": "Identifier",
																											"overloadedDeclarations": [],
																											"referencedDeclaration": 792,
																											"src": "4431:9:3",
																											"typeDescriptions": {
																												"typeIdentifier": "t_uint256",
																												"typeString": "uint256"
																											}
																										}
																									],
																									"expression": {
																										"argumentTypes": [
																											{
																												"typeIdentifier": "t_uint256",
																												"typeString": "uint256"
																											}
																										],
																										"expression": {
																											"id": 1104,
																											"name": "fullPercenFee",
																											"nodeType": "Identifier",
																											"overloadedDeclarations": [],
																											"referencedDeclaration": 1081,
																											"src": "4413:13:3",
																											"typeDescriptions": {
																												"typeIdentifier": "t_uint256",
																												"typeString": "uint256"
																											}
																										},
																										"id": 1105,
																										"isConstant": false,
																										"isLValue": false,
																										"isPure": false,
																										"lValueRequested": false,
																										"memberName": "sub",
																										"nodeType": "MemberAccess",
																										"referencedDeclaration": 2349,
																										"src": "4413:17:3",
																										"typeDescriptions": {
																											"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																											"typeString": "function (uint256,uint256) pure returns (uint256)"
																										}
																									},
																									"id": 1107,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": false,
																									"kind": "functionCall",
																									"lValueRequested": false,
																									"names": [],
																									"nodeType": "FunctionCall",
																									"src": "4413:28:3",
																									"tryCall": false,
																									"typeDescriptions": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									}
																								}
																							],
																							"id": 1108,
																							"isConstant": false,
																							"isInlineArray": false,
																							"isLValue": false,
																							"isPure": false,
																							"lValueRequested": false,
																							"nodeType": "TupleExpression",
																							"src": "4412:30:3",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						},
																						"id": 1109,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"memberName": "mul",
																						"nodeType": "MemberAccess",
																						"referencedDeclaration": 2364,
																						"src": "4412:65:3",
																						"typeDescriptions": {
																							"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																							"typeString": "function (uint256,uint256) pure returns (uint256)"
																						}
																					},
																					"id": 1111,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"kind": "functionCall",
																					"lValueRequested": false,
																					"names": [],
																					"nodeType": "FunctionCall",
																					"src": "4412:81:3",
																					"tryCall": false,
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"id": 1112,
																			"isConstant": false,
																			"isInlineArray": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "TupleExpression",
																			"src": "4411:83:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"id": 1113,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "div",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 2379,
																		"src": "4411:118:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																			"typeString": "function (uint256,uint256) pure returns (uint256)"
																		}
																	},
																	"id": 1115,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "4411:133:3",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "4394:150:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1117,
															"nodeType": "ExpressionStatement",
															"src": "4394:150:3"
														},
														{
															"expression": {
																"id": 1122,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 1118,
																	"name": "fee",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1077,
																	"src": "4559:3:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1121,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 1119,
																		"name": "amount_in",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1069,
																		"src": "4565:9:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "-",
																	"rightExpression": {
																		"id": 1120,
																		"name": "real_amount_in",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1073,
																		"src": "4577:14:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "4565:26:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "4559:32:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1123,
															"nodeType": "ExpressionStatement",
															"src": "4559:32:3"
														}
													]
												}
											},
											{
												"assignments": [
													1127
												],
												"declarations": [
													{
														"constant": false,
														"id": 1127,
														"mutability": "mutable",
														"name": "remainingByUser",
														"nodeType": "VariableDeclaration",
														"scope": 1269,
														"src": "4630:23:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1126,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "4630:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1133,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1132,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 1128,
															"name": "saleInfor",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 787,
															"src": "4656:9:3",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_SaleInfor_$735_storage",
																"typeString": "struct Presale.SaleInfor storage ref"
															}
														},
														"id": 1129,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "maxSpendPerBuyer",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 726,
														"src": "4656:26:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "-",
													"rightExpression": {
														"expression": {
															"id": 1130,
															"name": "buyer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1062,
															"src": "4685:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_BuyerInfo_$753_storage_ptr",
																"typeString": "struct Presale.BuyerInfo storage pointer"
															}
														},
														"id": 1131,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "baseDeposit",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 742,
														"src": "4685:17:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "4656:46:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4630:72:3"
											},
											{
												"assignments": [
													1135
												],
												"declarations": [
													{
														"constant": false,
														"id": 1135,
														"mutability": "mutable",
														"name": "remainingByPool",
														"nodeType": "VariableDeclaration",
														"scope": 1269,
														"src": "4713:23:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1134,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "4713:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1141,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1140,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 1136,
															"name": "saleInfor",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 787,
															"src": "4739:9:3",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_SaleInfor_$735_storage",
																"typeString": "struct Presale.SaleInfor storage ref"
															}
														},
														"id": 1137,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "amountTokenForSale",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 734,
														"src": "4739:28:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "-",
													"rightExpression": {
														"expression": {
															"id": 1138,
															"name": "presaleStatus",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 781,
															"src": "4770:13:3",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_PresaleStatus_$769_storage",
																"typeString": "struct Presale.PresaleStatus storage ref"
															}
														},
														"id": 1139,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "totalBaseCollected",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 755,
														"src": "4770:32:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "4739:63:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4713:89:3"
											},
											{
												"assignments": [
													1143
												],
												"declarations": [
													{
														"constant": false,
														"id": 1143,
														"mutability": "mutable",
														"name": "allowance",
														"nodeType": "VariableDeclaration",
														"scope": 1269,
														"src": "4813:17:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1142,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "4813:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1150,
												"initialValue": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1146,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1144,
															"name": "remainingByUser",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1127,
															"src": "4833:15:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": ">",
														"rightExpression": {
															"id": 1145,
															"name": "remainingByPool",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1135,
															"src": "4851:15:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "4833:33:3",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"id": 1148,
														"name": "remainingByUser",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1127,
														"src": "4887:15:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1149,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "4833:69:3",
													"trueExpression": {
														"id": 1147,
														"name": "remainingByPool",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1135,
														"src": "4869:15:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4813:89:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1154,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1152,
																"name": "real_amount_in",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1073,
																"src": "4921:14:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<",
															"rightExpression": {
																"id": 1153,
																"name": "allowance",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1143,
																"src": "4938:9:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "4921:26:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "53616c652069732073756363657373",
															"id": 1155,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4949:17:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_f04f9a30ea5d365bfb2900741297979fe0df33fc47f4cd4f9a152dc08b22c374",
																"typeString": "literal_string \"Sale is success\""
															},
															"value": "Sale is success"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_f04f9a30ea5d365bfb2900741297979fe0df33fc47f4cd4f9a152dc08b22c374",
																"typeString": "literal_string \"Sale is success\""
															}
														],
														"id": 1151,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "4913:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1156,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4913:54:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1157,
												"nodeType": "ExpressionStatement",
												"src": "4913:54:3"
											},
											{
												"assignments": [
													1159
												],
												"declarations": [
													{
														"constant": false,
														"id": 1159,
														"mutability": "mutable",
														"name": "tokenSold",
														"nodeType": "VariableDeclaration",
														"scope": 1269,
														"src": "4978:17:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1158,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "4978:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1179,
												"initialValue": {
													"components": [
														{
															"arguments": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1176,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"hexValue": "3130",
																		"id": 1166,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "5104:2:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_10_by_1",
																			"typeString": "int_const 10"
																		},
																		"value": "10"
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "**",
																	"rightExpression": {
																		"arguments": [
																			{
																				"arguments": [],
																				"expression": {
																					"argumentTypes": [],
																					"expression": {
																						"arguments": [
																							{
																								"expression": {
																									"id": 1170,
																									"name": "saleInfor",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 787,
																									"src": "5124:9:3",
																									"typeDescriptions": {
																										"typeIdentifier": "t_struct$_SaleInfor_$735_storage",
																										"typeString": "struct Presale.SaleInfor storage ref"
																									}
																								},
																								"id": 1171,
																								"isConstant": false,
																								"isLValue": true,
																								"isPure": false,
																								"lValueRequested": false,
																								"memberName": "baseToken",
																								"nodeType": "MemberAccess",
																								"referencedDeclaration": 716,
																								"src": "5124:19:3",
																								"typeDescriptions": {
																									"typeIdentifier": "t_contract$_ERC20_$585",
																									"typeString": "contract ERC20"
																								}
																							}
																						],
																						"expression": {
																							"argumentTypes": [
																								{
																									"typeIdentifier": "t_contract$_ERC20_$585",
																									"typeString": "contract ERC20"
																								}
																							],
																							"id": 1169,
																							"name": "ERC20",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 585,
																							"src": "5118:5:3",
																							"typeDescriptions": {
																								"typeIdentifier": "t_type$_t_contract$_ERC20_$585_$",
																								"typeString": "type(contract ERC20)"
																							}
																						},
																						"id": 1172,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"kind": "typeConversion",
																						"lValueRequested": false,
																						"names": [],
																						"nodeType": "FunctionCall",
																						"src": "5118:26:3",
																						"tryCall": false,
																						"typeDescriptions": {
																							"typeIdentifier": "t_contract$_ERC20_$585",
																							"typeString": "contract ERC20"
																						}
																					},
																					"id": 1173,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"memberName": "decimals",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 74,
																					"src": "5118:35:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_external_view$__$returns$_t_uint256_$",
																						"typeString": "function () view external returns (uint256)"
																					}
																				},
																				"id": 1174,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "5118:37:3",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			],
																			"id": 1168,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "5110:7:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_uint256_$",
																				"typeString": "type(uint256)"
																			},
																			"typeName": {
																				"id": 1167,
																				"name": "uint256",
																				"nodeType": "ElementaryTypeName",
																				"src": "5110:7:3",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 1175,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "5110:46:3",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "5104:52:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"arguments": [
																		{
																			"expression": {
																				"id": 1162,
																				"name": "saleInfor",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 787,
																				"src": "5048:9:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_struct$_SaleInfor_$735_storage",
																					"typeString": "struct Presale.SaleInfor storage ref"
																				}
																			},
																			"id": 1163,
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberName": "tokenPrice",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 718,
																			"src": "5048:20:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"expression": {
																			"id": 1160,
																			"name": "real_amount_in",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1073,
																			"src": "4999:14:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"id": 1161,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "mul",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 2364,
																		"src": "4999:48:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																			"typeString": "function (uint256,uint256) pure returns (uint256)"
																		}
																	},
																	"id": 1164,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "4999:70:3",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"id": 1165,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "div",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2379,
																"src": "4999:104:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																	"typeString": "function (uint256,uint256) pure returns (uint256)"
																}
															},
															"id": 1177,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4999:158:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"id": 1178,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "4998:160:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4978:180:3"
											},
											{
												"expression": {
													"id": 1184,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 1180,
															"name": "buyer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1062,
															"src": "5186:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_BuyerInfo_$753_storage_ptr",
																"typeString": "struct Presale.BuyerInfo storage pointer"
															}
														},
														"id": 1182,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "baseDeposit",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 742,
														"src": "5186:17:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"id": 1183,
														"name": "amount_in",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1069,
														"src": "5207:9:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "5186:30:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1185,
												"nodeType": "ExpressionStatement",
												"src": "5186:30:3"
											},
											{
												"expression": {
													"id": 1190,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 1186,
															"name": "buyer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1062,
															"src": "5227:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_BuyerInfo_$753_storage_ptr",
																"typeString": "struct Presale.BuyerInfo storage pointer"
															}
														},
														"id": 1188,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "tokenOwner",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 744,
														"src": "5227:16:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"id": 1189,
														"name": "tokenSold",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1159,
														"src": "5247:9:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "5227:29:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1191,
												"nodeType": "ExpressionStatement",
												"src": "5227:29:3"
											},
											{
												"expression": {
													"id": 1196,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 1192,
															"name": "presaleStatus",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 781,
															"src": "5267:13:3",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_PresaleStatus_$769_storage",
																"typeString": "struct Presale.PresaleStatus storage ref"
															}
														},
														"id": 1194,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "totalBaseCollected",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 755,
														"src": "5267:32:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"id": 1195,
														"name": "real_amount_in",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1073,
														"src": "5303:14:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "5267:50:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1197,
												"nodeType": "ExpressionStatement",
												"src": "5267:50:3"
											},
											{
												"expression": {
													"id": 1202,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 1198,
															"name": "presaleStatus",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 781,
															"src": "5328:13:3",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_PresaleStatus_$769_storage",
																"typeString": "struct Presale.PresaleStatus storage ref"
															}
														},
														"id": 1200,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "totalTokenSold",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 757,
														"src": "5328:28:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"id": 1201,
														"name": "tokenSold",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1159,
														"src": "5360:9:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "5328:41:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1203,
												"nodeType": "ExpressionStatement",
												"src": "5328:41:3"
											},
											{
												"expression": {
													"id": 1207,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "++",
													"prefix": false,
													"src": "5380:27:3",
													"subExpression": {
														"expression": {
															"id": 1204,
															"name": "presaleStatus",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 781,
															"src": "5380:13:3",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_PresaleStatus_$769_storage",
																"typeString": "struct Presale.PresaleStatus storage ref"
															}
														},
														"id": 1206,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "numberBuyer",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 763,
														"src": "5380:25:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1208,
												"nodeType": "ExpressionStatement",
												"src": "5380:27:3"
											},
											{
												"expression": {
													"id": 1214,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 1209,
															"name": "userFee",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 778,
															"src": "5418:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 1212,
														"indexExpression": {
															"expression": {
																"id": 1210,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "5426:3:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1211,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "5426:10:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "5418:19:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"id": 1213,
														"name": "fee",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1077,
														"src": "5441:3:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "5418:26:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1215,
												"nodeType": "ExpressionStatement",
												"src": "5418:26:3"
											},
											{
												"expression": {
													"id": 1218,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1216,
														"name": "totalFee",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 797,
														"src": "5455:8:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"id": 1217,
														"name": "fee",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1077,
														"src": "5467:3:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "5455:15:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1219,
												"nodeType": "ExpressionStatement",
												"src": "5455:15:3"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 1228,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 1220,
															"name": "saleInfor",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 787,
															"src": "5486:9:3",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_SaleInfor_$735_storage",
																"typeString": "struct Presale.SaleInfor storage ref"
															}
														},
														"id": 1221,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "saleIsBaseToken",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 732,
														"src": "5486:25:3",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1227,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1224,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1222,
																"name": "real_amount_in",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1073,
																"src": "5515:14:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"id": 1223,
																"name": "fee",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1077,
																"src": "5532:3:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5515:20:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "<",
														"rightExpression": {
															"expression": {
																"id": 1225,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "5538:3:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1226,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "value",
															"nodeType": "MemberAccess",
															"src": "5538:9:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "5515:32:3",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "5486:61:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1244,
												"nodeType": "IfStatement",
												"src": "5483:155:3",
												"trueBody": {
													"id": 1243,
													"nodeType": "Block",
													"src": "5549:89:3",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1240,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 1238,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"expression": {
																					"id": 1235,
																					"name": "msg",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 4294967281,
																					"src": "5593:3:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_magic_message",
																						"typeString": "msg"
																					}
																				},
																				"id": 1236,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "value",
																				"nodeType": "MemberAccess",
																				"src": "5593:9:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "-",
																			"rightExpression": {
																				"id": 1237,
																				"name": "real_amount_in",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1073,
																				"src": "5605:14:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "5593:26:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "-",
																		"rightExpression": {
																			"id": 1239,
																			"name": "fee",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1077,
																			"src": "5622:3:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "5593:32:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"arguments": [
																			{
																				"expression": {
																					"id": 1231,
																					"name": "msg",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 4294967281,
																					"src": "5572:3:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_magic_message",
																						"typeString": "msg"
																					}
																				},
																				"id": 1232,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "sender",
																				"nodeType": "MemberAccess",
																				"src": "5572:10:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			],
																			"id": 1230,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "5564:8:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_payable_$",
																				"typeString": "type(address payable)"
																			},
																			"typeName": {
																				"id": 1229,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "5564:8:3",
																				"stateMutability": "payable",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 1233,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "5564:19:3",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address_payable",
																			"typeString": "address payable"
																		}
																	},
																	"id": 1234,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "transfer",
																	"nodeType": "MemberAccess",
																	"src": "5564:28:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_transfer_nonpayable$_t_uint256_$returns$__$",
																		"typeString": "function (uint256)"
																	}
																},
																"id": 1241,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "5564:62:3",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1242,
															"nodeType": "ExpressionStatement",
															"src": "5564:62:3"
														}
													]
												}
											},
											{
												"condition": {
													"id": 1247,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "!",
													"prefix": true,
													"src": "5652:26:3",
													"subExpression": {
														"expression": {
															"id": 1245,
															"name": "saleInfor",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 787,
															"src": "5653:9:3",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_SaleInfor_$735_storage",
																"typeString": "struct Presale.SaleInfor storage ref"
															}
														},
														"id": 1246,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "saleIsBaseToken",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 732,
														"src": "5653:25:3",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1268,
												"nodeType": "IfStatement",
												"src": "5649:251:3",
												"trueBody": {
													"id": 1267,
													"nodeType": "Block",
													"src": "5680:220:3",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"expression": {
																					"id": 1253,
																					"name": "saleInfor",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 787,
																					"src": "5753:9:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_struct$_SaleInfor_$735_storage",
																						"typeString": "struct Presale.SaleInfor storage ref"
																					}
																				},
																				"id": 1254,
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "baseToken",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 716,
																				"src": "5753:19:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_contract$_ERC20_$585",
																					"typeString": "contract ERC20"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_contract$_ERC20_$585",
																					"typeString": "contract ERC20"
																				}
																			],
																			"id": 1252,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "5745:7:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 1251,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "5745:7:3",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 1255,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "5745:28:3",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"expression": {
																			"id": 1256,
																			"name": "msg",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967281,
																			"src": "5792:3:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_message",
																				"typeString": "msg"
																			}
																		},
																		"id": 1257,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "sender",
																		"nodeType": "MemberAccess",
																		"src": "5792:10:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"arguments": [
																			{
																				"id": 1260,
																				"name": "this",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4294967268,
																				"src": "5829:4:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_contract$_Presale_$1392",
																					"typeString": "contract Presale"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_contract$_Presale_$1392",
																					"typeString": "contract Presale"
																				}
																			],
																			"id": 1259,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "5821:7:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 1258,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "5821:7:3",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 1261,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "5821:13:3",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1264,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1262,
																			"name": "real_amount_in",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1073,
																			"src": "5853:14:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "+",
																		"rightExpression": {
																			"id": 1263,
																			"name": "fee",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1077,
																			"src": "5870:3:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "5853:20:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"id": 1248,
																		"name": "TransferHelper",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2662,
																		"src": "5695:14:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_contract$_TransferHelper_$2662_$",
																			"typeString": "type(library TransferHelper)"
																		}
																	},
																	"id": 1250,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "safeTransferFrom",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 2605,
																	"src": "5695:31:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_uint256_$returns$__$",
																		"typeString": "function (address,address,address,uint256)"
																	}
																},
																"id": 1265,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "5695:193:3",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1266,
															"nodeType": "ExpressionStatement",
															"src": "5695:193:3"
														}
													]
												}
											}
										]
									},
									"functionSelector": "b6b55f25",
									"id": 1270,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1050,
											"modifierName": {
												"id": 1049,
												"name": "nonReentrant",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 2157,
												"src": "3845:12:3"
											},
											"nodeType": "ModifierInvocation",
											"src": "3845:12:3"
										}
									],
									"name": "deposit",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1048,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1047,
												"mutability": "mutable",
												"name": "_amount",
												"nodeType": "VariableDeclaration",
												"scope": 1270,
												"src": "3811:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1046,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3811:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3810:17:3"
									},
									"returnParameters": {
										"id": 1051,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3858:0:3"
									},
									"scope": 1392,
									"src": "3794:2125:3",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1362,
										"nodeType": "Block",
										"src": "5979:832:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1279,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 1276,
																	"name": "status",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1033,
																	"src": "5998:6:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
																		"typeString": "function () view returns (uint256)"
																	}
																},
																"id": 1277,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "5998:8:3",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "31",
																"id": 1278,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "6010:1:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1_by_1",
																	"typeString": "int_const 1"
																},
																"value": "1"
															},
															"src": "5998:13:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "53616c652073756365737373",
															"id": 1280,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6013:14:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_889f3e86a9951bfad2140f6dc5924dd7f98edb776cbbf33fc4908c6b5d4cff41",
																"typeString": "literal_string \"Sale sucesss\""
															},
															"value": "Sale sucesss"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_889f3e86a9951bfad2140f6dc5924dd7f98edb776cbbf33fc4908c6b5d4cff41",
																"typeString": "literal_string \"Sale sucesss\""
															}
														],
														"id": 1275,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "5990:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1281,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5990:38:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1282,
												"nodeType": "ExpressionStatement",
												"src": "5990:38:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1290,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1288,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"expression": {
																		"id": 1284,
																		"name": "presaleStatus",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 781,
																		"src": "6048:13:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_PresaleStatus_$769_storage",
																			"typeString": "struct Presale.PresaleStatus storage ref"
																		}
																	},
																	"id": 1285,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "totalTokenSold",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 757,
																	"src": "6048:28:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"expression": {
																		"id": 1286,
																		"name": "presaleStatus",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 781,
																		"src": "6079:13:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_PresaleStatus_$769_storage",
																			"typeString": "struct Presale.PresaleStatus storage ref"
																		}
																	},
																	"id": 1287,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "totalTokenWithDraw",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 759,
																	"src": "6079:32:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "6048:63:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 1289,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "6114:1:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "6048:67:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416c6c20746f6b656e20686173206265656e207769746864726177",
															"id": 1291,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6134:29:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_1a08ca9b2c061630f3688e7825008183e816899b30fb4092678404714b0570be",
																"typeString": "literal_string \"All token has been withdraw\""
															},
															"value": "All token has been withdraw"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_1a08ca9b2c061630f3688e7825008183e816899b30fb4092678404714b0570be",
																"typeString": "literal_string \"All token has been withdraw\""
															}
														],
														"id": 1283,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "6040:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1292,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6040:134:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1293,
												"nodeType": "ExpressionStatement",
												"src": "6040:134:3"
											},
											{
												"assignments": [
													1296
												],
												"declarations": [
													{
														"constant": false,
														"id": 1296,
														"mutability": "mutable",
														"name": "buyer",
														"nodeType": "VariableDeclaration",
														"scope": 1362,
														"src": "6185:23:3",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_BuyerInfo_$753_storage_ptr",
															"typeString": "struct Presale.BuyerInfo"
														},
														"typeName": {
															"id": 1295,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 1294,
																"name": "BuyerInfo",
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 753,
																"src": "6185:9:3"
															},
															"referencedDeclaration": 753,
															"src": "6185:9:3",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_BuyerInfo_$753_storage_ptr",
																"typeString": "struct Presale.BuyerInfo"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1301,
												"initialValue": {
													"baseExpression": {
														"id": 1297,
														"name": "buyerInfo",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 774,
														"src": "6211:9:3",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_struct$_BuyerInfo_$753_storage_$",
															"typeString": "mapping(address => struct Presale.BuyerInfo storage ref)"
														}
													},
													"id": 1300,
													"indexExpression": {
														"expression": {
															"id": 1298,
															"name": "msg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967281,
															"src": "6221:3:3",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_message",
																"typeString": "msg"
															}
														},
														"id": 1299,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "sender",
														"nodeType": "MemberAccess",
														"src": "6221:10:3",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "6211:21:3",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_BuyerInfo_$753_storage",
														"typeString": "struct Presale.BuyerInfo storage ref"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6185:47:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1306,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 1303,
																	"name": "buyer",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1296,
																	"src": "6251:5:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_BuyerInfo_$753_storage_ptr",
																		"typeString": "struct Presale.BuyerInfo storage pointer"
																	}
																},
																"id": 1304,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "tokenOwner",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 744,
																"src": "6251:16:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 1305,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "6270:1:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "6251:20:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "596f7520776974686472617720616c6c206f722068617665206e6f7420626f7567687420796574",
															"id": 1307,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6273:41:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_dd6d59c83c1bd1de3b78051d04016b176b56ee6f6028c113e575cf17865caf0f",
																"typeString": "literal_string \"You withdraw all or have not bought yet\""
															},
															"value": "You withdraw all or have not bought yet"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_dd6d59c83c1bd1de3b78051d04016b176b56ee6f6028c113e575cf17865caf0f",
																"typeString": "literal_string \"You withdraw all or have not bought yet\""
															}
														],
														"id": 1302,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "6243:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1308,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6243:72:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1309,
												"nodeType": "ExpressionStatement",
												"src": "6243:72:3"
											},
											{
												"assignments": [
													1311
												],
												"declarations": [
													{
														"constant": false,
														"id": 1311,
														"mutability": "mutable",
														"name": "amountClaim",
														"nodeType": "VariableDeclaration",
														"scope": 1362,
														"src": "6409:19:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1310,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "6409:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1332,
												"initialValue": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "31303030",
																	"id": 1329,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "6561:4:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1000_by_1",
																		"typeString": "int_const 1000"
																	},
																	"value": "1000"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_1000_by_1",
																		"typeString": "int_const 1000"
																	}
																],
																"id": 1328,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "6553:7:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_uint256_$",
																	"typeString": "type(uint256)"
																},
																"typeName": {
																	"id": 1327,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "6553:7:3",
																	"typeDescriptions": {}
																}
															},
															"id": 1330,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "6553:13:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"components": [
																{
																	"arguments": [
																		{
																			"expression": {
																				"id": 1322,
																				"name": "buyer",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1296,
																				"src": "6503:5:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_struct$_BuyerInfo_$753_storage_ptr",
																					"typeString": "struct Presale.BuyerInfo storage pointer"
																				}
																			},
																			"id": 1323,
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberName": "tokenOwner",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 744,
																			"src": "6503:16:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"expression": {
																			"components": [
																				{
																					"arguments": [
																						{
																							"expression": {
																								"id": 1317,
																								"name": "saleInfor",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 787,
																								"src": "6451:9:3",
																								"typeDescriptions": {
																									"typeIdentifier": "t_struct$_SaleInfor_$735_storage",
																									"typeString": "struct Presale.SaleInfor storage ref"
																								}
																							},
																							"id": 1318,
																							"isConstant": false,
																							"isLValue": true,
																							"isPure": false,
																							"lValueRequested": false,
																							"memberName": "claimFee",
																							"nodeType": "MemberAccess",
																							"referencedDeclaration": 730,
																							"src": "6451:18:3",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						}
																					],
																					"expression": {
																						"argumentTypes": [
																							{
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						],
																						"expression": {
																							"arguments": [
																								{
																									"hexValue": "31303030",
																									"id": 1314,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": true,
																									"kind": "number",
																									"lValueRequested": false,
																									"nodeType": "Literal",
																									"src": "6441:4:3",
																									"typeDescriptions": {
																										"typeIdentifier": "t_rational_1000_by_1",
																										"typeString": "int_const 1000"
																									},
																									"value": "1000"
																								}
																							],
																							"expression": {
																								"argumentTypes": [
																									{
																										"typeIdentifier": "t_rational_1000_by_1",
																										"typeString": "int_const 1000"
																									}
																								],
																								"id": 1313,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": true,
																								"lValueRequested": false,
																								"nodeType": "ElementaryTypeNameExpression",
																								"src": "6433:7:3",
																								"typeDescriptions": {
																									"typeIdentifier": "t_type$_t_uint256_$",
																									"typeString": "type(uint256)"
																								},
																								"typeName": {
																									"id": 1312,
																									"name": "uint256",
																									"nodeType": "ElementaryTypeName",
																									"src": "6433:7:3",
																									"typeDescriptions": {}
																								}
																							},
																							"id": 1315,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"kind": "typeConversion",
																							"lValueRequested": false,
																							"names": [],
																							"nodeType": "FunctionCall",
																							"src": "6433:13:3",
																							"tryCall": false,
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						},
																						"id": 1316,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"memberName": "sub",
																						"nodeType": "MemberAccess",
																						"referencedDeclaration": 2349,
																						"src": "6433:17:3",
																						"typeDescriptions": {
																							"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																							"typeString": "function (uint256,uint256) pure returns (uint256)"
																						}
																					},
																					"id": 1319,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"kind": "functionCall",
																					"lValueRequested": false,
																					"names": [],
																					"nodeType": "FunctionCall",
																					"src": "6433:37:3",
																					"tryCall": false,
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"id": 1320,
																			"isConstant": false,
																			"isInlineArray": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "TupleExpression",
																			"src": "6432:39:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"id": 1321,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "mul",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 2364,
																		"src": "6432:70:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																			"typeString": "function (uint256,uint256) pure returns (uint256)"
																		}
																	},
																	"id": 1324,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "6432:88:3",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 1325,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "6431:90:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 1326,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "div",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 2379,
														"src": "6431:121:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
															"typeString": "function (uint256,uint256) pure returns (uint256)"
														}
													},
													"id": 1331,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6431:136:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6409:158:3"
											},
											{
												"expression": {
													"id": 1337,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 1333,
															"name": "presaleStatus",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 781,
															"src": "6578:13:3",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_PresaleStatus_$769_storage",
																"typeString": "struct Presale.PresaleStatus storage ref"
															}
														},
														"id": 1335,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "totalTokenWithDraw",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 759,
														"src": "6578:32:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"id": 1336,
														"name": "amountClaim",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1311,
														"src": "6614:11:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "6578:47:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1338,
												"nodeType": "ExpressionStatement",
												"src": "6578:47:3"
											},
											{
												"assignments": [
													1340
												],
												"declarations": [
													{
														"constant": false,
														"id": 1340,
														"mutability": "mutable",
														"name": "feeClaimToken",
														"nodeType": "VariableDeclaration",
														"scope": 1362,
														"src": "6636:21:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1339,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "6636:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1345,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1344,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 1341,
															"name": "buyer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1296,
															"src": "6660:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_BuyerInfo_$753_storage_ptr",
																"typeString": "struct Presale.BuyerInfo storage pointer"
															}
														},
														"id": 1342,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "tokenOwner",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 744,
														"src": "6660:16:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "-",
													"rightExpression": {
														"id": 1343,
														"name": "amountClaim",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1311,
														"src": "6679:11:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "6660:30:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6636:54:3"
											},
											{
												"expression": {
													"id": 1350,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 1346,
															"name": "buyer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1296,
															"src": "6701:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_BuyerInfo_$753_storage_ptr",
																"typeString": "struct Presale.BuyerInfo storage pointer"
															}
														},
														"id": 1348,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "tokenOwner",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 744,
														"src": "6701:16:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1349,
														"name": "amountClaim",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1311,
														"src": "6720:11:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "6701:30:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1351,
												"nodeType": "ExpressionStatement",
												"src": "6701:30:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 1357,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "6779:3:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1358,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "6779:10:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1359,
															"name": "amountClaim",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1311,
															"src": "6791:11:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"arguments": [
																{
																	"expression": {
																		"id": 1353,
																		"name": "saleInfor",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 787,
																		"src": "6749:9:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_SaleInfor_$735_storage",
																			"typeString": "struct Presale.SaleInfor storage ref"
																		}
																	},
																	"id": 1354,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "saleToken",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 713,
																	"src": "6749:19:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_ERC20_$585",
																		"typeString": "contract ERC20"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_ERC20_$585",
																		"typeString": "contract ERC20"
																	}
																],
																"id": 1352,
																"name": "ERC20",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 585,
																"src": "6743:5:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_ERC20_$585_$",
																	"typeString": "type(contract ERC20)"
																}
															},
															"id": 1355,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "6743:26:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_ERC20_$585",
																"typeString": "contract ERC20"
															}
														},
														"id": 1356,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "transfer",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 123,
														"src": "6743:35:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
															"typeString": "function (address,uint256) external returns (bool)"
														}
													},
													"id": 1360,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6743:60:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1361,
												"nodeType": "ExpressionStatement",
												"src": "6743:60:3"
											}
										]
									},
									"functionSelector": "ab33985a",
									"id": 1363,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1273,
											"modifierName": {
												"id": 1272,
												"name": "nonReentrant",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 2157,
												"src": "5966:12:3"
											},
											"nodeType": "ModifierInvocation",
											"src": "5966:12:3"
										}
									],
									"name": "userClaimEmergency",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1271,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5954:2:3"
									},
									"returnParameters": {
										"id": 1274,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5979:0:3"
									},
									"scope": 1392,
									"src": "5927:884:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1373,
										"nodeType": "Block",
										"src": "6888:42:3",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 1370,
														"name": "_address",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1365,
														"src": "6906:8:3",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"id": 1371,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "balance",
													"nodeType": "MemberAccess",
													"src": "6906:16:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1369,
												"id": 1372,
												"nodeType": "Return",
												"src": "6899:23:3"
											}
										]
									},
									"functionSelector": "f8b2cb4f",
									"id": 1374,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getBalance",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1366,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1365,
												"mutability": "mutable",
												"name": "_address",
												"nodeType": "VariableDeclaration",
												"scope": 1374,
												"src": "6839:16:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1364,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6839:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6838:18:3"
									},
									"returnParameters": {
										"id": 1369,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1368,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1374,
												"src": "6879:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1367,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6879:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6878:9:3"
									},
									"scope": 1392,
									"src": "6819:111:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1390,
										"nodeType": "Block",
										"src": "6979:70:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 1385,
																		"name": "this",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967268,
																		"src": "7027:4:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_Presale_$1392",
																			"typeString": "contract Presale"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_Presale_$1392",
																			"typeString": "contract Presale"
																		}
																	],
																	"id": 1384,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "7019:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 1383,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "7019:7:3",
																		"typeDescriptions": {}
																	}
																},
																"id": 1386,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7019:13:3",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 1387,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "balance",
															"nodeType": "MemberAccess",
															"src": "7019:21:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"arguments": [
																{
																	"expression": {
																		"id": 1379,
																		"name": "msg",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967281,
																		"src": "6998:3:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_message",
																			"typeString": "msg"
																		}
																	},
																	"id": 1380,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "sender",
																	"nodeType": "MemberAccess",
																	"src": "6998:10:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 1378,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "6990:8:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_payable_$",
																	"typeString": "type(address payable)"
																},
																"typeName": {
																	"id": 1377,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "6990:8:3",
																	"stateMutability": "payable",
																	"typeDescriptions": {}
																}
															},
															"id": 1381,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "6990:19:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														"id": 1382,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "transfer",
														"nodeType": "MemberAccess",
														"src": "6990:28:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_transfer_nonpayable$_t_uint256_$returns$__$",
															"typeString": "function (uint256)"
														}
													},
													"id": 1388,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6990:51:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1389,
												"nodeType": "ExpressionStatement",
												"src": "6990:51:3"
											}
										]
									},
									"functionSelector": "861faf5f",
									"id": 1391,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "backToken",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1375,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6959:2:3"
									},
									"returnParameters": {
										"id": 1376,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6979:0:3"
									},
									"scope": 1392,
									"src": "6941:108:3",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1393,
							"src": "370:6682:3"
						}
					],
					"src": "93:6959:3"
				},
				"id": 3
			},
			"Utils/Context.sol": {
				"ast": {
					"absolutePath": "Utils/Context.sol",
					"exportedSymbols": {
						"Context": [
							1414
						]
					},
					"id": 1415,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1394,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "89:23:4"
						},
						{
							"abstract": true,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 1395,
								"nodeType": "StructuredDocumentation",
								"src": "116:505:4",
								"text": " @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."
							},
							"fullyImplemented": true,
							"id": 1414,
							"linearizedBaseContracts": [
								1414
							],
							"name": "Context",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 1403,
										"nodeType": "Block",
										"src": "718:36:4",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 1400,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "736:3:4",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 1401,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "sender",
													"nodeType": "MemberAccess",
													"src": "736:10:4",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 1399,
												"id": 1402,
												"nodeType": "Return",
												"src": "729:17:4"
											}
										]
									},
									"id": 1404,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgSender",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1396,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "675:2:4"
									},
									"returnParameters": {
										"id": 1399,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1398,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1404,
												"src": "709:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1397,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "709:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "708:9:4"
									},
									"scope": 1414,
									"src": "656:98:4",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1412,
										"nodeType": "Block",
										"src": "829:34:4",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 1409,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "847:3:4",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 1410,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "data",
													"nodeType": "MemberAccess",
													"src": "847:8:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_calldata_ptr",
														"typeString": "bytes calldata"
													}
												},
												"functionReturnParameters": 1408,
												"id": 1411,
												"nodeType": "Return",
												"src": "840:15:4"
											}
										]
									},
									"id": 1413,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgData",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1405,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "779:2:4"
									},
									"returnParameters": {
										"id": 1408,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1407,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1413,
												"src": "813:14:4",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1406,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "813:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "812:16:4"
									},
									"scope": 1414,
									"src": "762:101:4",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 1415,
							"src": "623:243:4"
						}
					],
					"src": "89:779:4"
				},
				"id": 4
			},
			"Utils/EnumerableSet.sol": {
				"ast": {
					"absolutePath": "Utils/EnumerableSet.sol",
					"exportedSymbols": {
						"EnumerableSet": [
							2013
						]
					},
					"id": 2014,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1416,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "118:23:5"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 1417,
								"nodeType": "StructuredDocumentation",
								"src": "145:1118:5",
								"text": " @dev Library for managing\n https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n types.\n Sets have the following properties:\n - Elements are added, removed, and checked for existence in constant time\n (O(1)).\n - Elements are enumerated in O(n). No guarantees are made on the ordering.\n ```\n contract Example {\n     // Add the library methods\n     using EnumerableSet for EnumerableSet.AddressSet;\n     // Declare a set state variable\n     EnumerableSet.AddressSet private mySet;\n }\n ```\n As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n and `uint256` (`UintSet`) are supported.\n [WARNING]\n ====\n  Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable.\n  See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n  In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet.\n ===="
							},
							"fullyImplemented": true,
							"id": 2013,
							"linearizedBaseContracts": [
								2013
							],
							"name": "EnumerableSet",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"canonicalName": "EnumerableSet.Set",
									"id": 1425,
									"members": [
										{
											"constant": false,
											"id": 1420,
											"mutability": "mutable",
											"name": "_values",
											"nodeType": "VariableDeclaration",
											"scope": 1425,
											"src": "1799:17:5",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
												"typeString": "bytes32[]"
											},
											"typeName": {
												"baseType": {
													"id": 1418,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1799:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"id": 1419,
												"nodeType": "ArrayTypeName",
												"src": "1799:9:5",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
													"typeString": "bytes32[]"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1424,
											"mutability": "mutable",
											"name": "_indexes",
											"nodeType": "VariableDeclaration",
											"scope": 1425,
											"src": "1952:36:5",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
												"typeString": "mapping(bytes32 => uint256)"
											},
											"typeName": {
												"id": 1423,
												"keyType": {
													"id": 1421,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1960:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"nodeType": "Mapping",
												"src": "1952:27:5",
												"typeDescriptions": {
													"typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
													"typeString": "mapping(bytes32 => uint256)"
												},
												"valueType": {
													"id": 1422,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1971:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												}
											},
											"visibility": "internal"
										}
									],
									"name": "Set",
									"nodeType": "StructDefinition",
									"scope": 2013,
									"src": "1743:253:5",
									"visibility": "public"
								},
								{
									"body": {
										"id": 1466,
										"nodeType": "Block",
										"src": "2243:345:5",
										"statements": [
											{
												"condition": {
													"id": 1440,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "!",
													"prefix": true,
													"src": "2258:22:5",
													"subExpression": {
														"arguments": [
															{
																"id": 1437,
																"name": "set",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1429,
																"src": "2269:3:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Set_$1425_storage_ptr",
																	"typeString": "struct EnumerableSet.Set storage pointer"
																}
															},
															{
																"id": 1438,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1431,
																"src": "2274:5:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_struct$_Set_$1425_storage_ptr",
																	"typeString": "struct EnumerableSet.Set storage pointer"
																},
																{
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															],
															"id": 1436,
															"name": "_contains",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1570,
															"src": "2259:9:5",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$_t_struct$_Set_$1425_storage_ptr_$_t_bytes32_$returns$_t_bool_$",
																"typeString": "function (struct EnumerableSet.Set storage pointer,bytes32) view returns (bool)"
															}
														},
														"id": 1439,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2259:21:5",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 1464,
													"nodeType": "Block",
													"src": "2542:39:5",
													"statements": [
														{
															"expression": {
																"hexValue": "66616c7365",
																"id": 1462,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2564:5:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "false"
															},
															"functionReturnParameters": 1435,
															"id": 1463,
															"nodeType": "Return",
															"src": "2557:12:5"
														}
													]
												},
												"id": 1465,
												"nodeType": "IfStatement",
												"src": "2254:327:5",
												"trueBody": {
													"id": 1461,
													"nodeType": "Block",
													"src": "2282:254:5",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 1446,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1431,
																		"src": "2314:5:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	],
																	"expression": {
																		"expression": {
																			"id": 1441,
																			"name": "set",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1429,
																			"src": "2297:3:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_Set_$1425_storage_ptr",
																				"typeString": "struct EnumerableSet.Set storage pointer"
																			}
																		},
																		"id": 1444,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "_values",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 1420,
																		"src": "2297:11:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_bytes32_$dyn_storage",
																			"typeString": "bytes32[] storage ref"
																		}
																	},
																	"id": 1445,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "push",
																	"nodeType": "MemberAccess",
																	"src": "2297:16:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_arraypush_nonpayable$_t_bytes32_$returns$__$",
																		"typeString": "function (bytes32)"
																	}
																},
																"id": 1447,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2297:23:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1448,
															"nodeType": "ExpressionStatement",
															"src": "2297:23:5"
														},
														{
															"expression": {
																"id": 1457,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"baseExpression": {
																		"expression": {
																			"id": 1449,
																			"name": "set",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1429,
																			"src": "2458:3:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_Set_$1425_storage_ptr",
																				"typeString": "struct EnumerableSet.Set storage pointer"
																			}
																		},
																		"id": 1452,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "_indexes",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 1424,
																		"src": "2458:12:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
																			"typeString": "mapping(bytes32 => uint256)"
																		}
																	},
																	"id": 1453,
																	"indexExpression": {
																		"id": 1451,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1431,
																		"src": "2471:5:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"nodeType": "IndexAccess",
																	"src": "2458:19:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"expression": {
																		"expression": {
																			"id": 1454,
																			"name": "set",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1429,
																			"src": "2480:3:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_Set_$1425_storage_ptr",
																				"typeString": "struct EnumerableSet.Set storage pointer"
																			}
																		},
																		"id": 1455,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "_values",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 1420,
																		"src": "2480:11:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_bytes32_$dyn_storage",
																			"typeString": "bytes32[] storage ref"
																		}
																	},
																	"id": 1456,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "length",
																	"nodeType": "MemberAccess",
																	"src": "2480:18:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "2458:40:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1458,
															"nodeType": "ExpressionStatement",
															"src": "2458:40:5"
														},
														{
															"expression": {
																"hexValue": "74727565",
																"id": 1459,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2520:4:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "true"
															},
															"functionReturnParameters": 1435,
															"id": 1460,
															"nodeType": "Return",
															"src": "2513:11:5"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1426,
										"nodeType": "StructuredDocumentation",
										"src": "2004:164:5",
										"text": " @dev Add a value to a set. O(1).\n Returns true if the value was added to the set, that is if it was not\n already present."
									},
									"id": 1467,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_add",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1432,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1429,
												"mutability": "mutable",
												"name": "set",
												"nodeType": "VariableDeclaration",
												"scope": 1467,
												"src": "2188:15:5",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Set_$1425_storage_ptr",
													"typeString": "struct EnumerableSet.Set"
												},
												"typeName": {
													"id": 1428,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1427,
														"name": "Set",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1425,
														"src": "2188:3:5"
													},
													"referencedDeclaration": 1425,
													"src": "2188:3:5",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Set_$1425_storage_ptr",
														"typeString": "struct EnumerableSet.Set"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1431,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 1467,
												"src": "2205:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1430,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2205:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2187:32:5"
									},
									"returnParameters": {
										"id": 1435,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1434,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1467,
												"src": "2237:4:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1433,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2237:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2236:6:5"
									},
									"scope": 2013,
									"src": "2174:414:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 1550,
										"nodeType": "Block",
										"src": "2836:1348:5",
										"statements": [
											{
												"assignments": [
													1479
												],
												"declarations": [
													{
														"constant": false,
														"id": 1479,
														"mutability": "mutable",
														"name": "valueIndex",
														"nodeType": "VariableDeclaration",
														"scope": 1550,
														"src": "2948:18:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1478,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2948:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1484,
												"initialValue": {
													"baseExpression": {
														"expression": {
															"id": 1480,
															"name": "set",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1471,
															"src": "2969:3:5",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Set_$1425_storage_ptr",
																"typeString": "struct EnumerableSet.Set storage pointer"
															}
														},
														"id": 1481,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "_indexes",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1424,
														"src": "2969:12:5",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
															"typeString": "mapping(bytes32 => uint256)"
														}
													},
													"id": 1483,
													"indexExpression": {
														"id": 1482,
														"name": "value",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1473,
														"src": "2982:5:5",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "2969:19:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2948:40:5"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1487,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1485,
														"name": "valueIndex",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1479,
														"src": "3005:10:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 1486,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3019:1:5",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "3005:15:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 1548,
													"nodeType": "Block",
													"src": "4138:39:5",
													"statements": [
														{
															"expression": {
																"hexValue": "66616c7365",
																"id": 1546,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "4160:5:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "false"
															},
															"functionReturnParameters": 1477,
															"id": 1547,
															"nodeType": "Return",
															"src": "4153:12:5"
														}
													]
												},
												"id": 1549,
												"nodeType": "IfStatement",
												"src": "3001:1176:5",
												"trueBody": {
													"id": 1545,
													"nodeType": "Block",
													"src": "3022:1110:5",
													"statements": [
														{
															"assignments": [
																1489
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1489,
																	"mutability": "mutable",
																	"name": "toDeleteIndex",
																	"nodeType": "VariableDeclaration",
																	"scope": 1545,
																	"src": "3380:21:5",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 1488,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "3380:7:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1493,
															"initialValue": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1492,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1490,
																	"name": "valueIndex",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1479,
																	"src": "3404:10:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 1491,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "3417:1:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "3404:14:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "3380:38:5"
														},
														{
															"assignments": [
																1495
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1495,
																	"mutability": "mutable",
																	"name": "lastIndex",
																	"nodeType": "VariableDeclaration",
																	"scope": 1545,
																	"src": "3433:17:5",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 1494,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "3433:7:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1501,
															"initialValue": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1500,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"expression": {
																		"expression": {
																			"id": 1496,
																			"name": "set",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1471,
																			"src": "3453:3:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_Set_$1425_storage_ptr",
																				"typeString": "struct EnumerableSet.Set storage pointer"
																			}
																		},
																		"id": 1497,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "_values",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 1420,
																		"src": "3453:11:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_bytes32_$dyn_storage",
																			"typeString": "bytes32[] storage ref"
																		}
																	},
																	"id": 1498,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "length",
																	"nodeType": "MemberAccess",
																	"src": "3453:18:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 1499,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "3474:1:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "3453:22:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "3433:42:5"
														},
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1504,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1502,
																	"name": "lastIndex",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1495,
																	"src": "3496:9:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "!=",
																"rightExpression": {
																	"id": 1503,
																	"name": "toDeleteIndex",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1489,
																	"src": "3509:13:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "3496:26:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 1529,
															"nodeType": "IfStatement",
															"src": "3492:405:5",
															"trueBody": {
																"id": 1528,
																"nodeType": "Block",
																"src": "3524:373:5",
																"statements": [
																	{
																		"assignments": [
																			1506
																		],
																		"declarations": [
																			{
																				"constant": false,
																				"id": 1506,
																				"mutability": "mutable",
																				"name": "lastValue",
																				"nodeType": "VariableDeclaration",
																				"scope": 1528,
																				"src": "3543:17:5",
																				"stateVariable": false,
																				"storageLocation": "default",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes32",
																					"typeString": "bytes32"
																				},
																				"typeName": {
																					"id": 1505,
																					"name": "bytes32",
																					"nodeType": "ElementaryTypeName",
																					"src": "3543:7:5",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bytes32",
																						"typeString": "bytes32"
																					}
																				},
																				"visibility": "internal"
																			}
																		],
																		"id": 1511,
																		"initialValue": {
																			"baseExpression": {
																				"expression": {
																					"id": 1507,
																					"name": "set",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1471,
																					"src": "3563:3:5",
																					"typeDescriptions": {
																						"typeIdentifier": "t_struct$_Set_$1425_storage_ptr",
																						"typeString": "struct EnumerableSet.Set storage pointer"
																					}
																				},
																				"id": 1508,
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "_values",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 1420,
																				"src": "3563:11:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_array$_t_bytes32_$dyn_storage",
																					"typeString": "bytes32[] storage ref"
																				}
																			},
																			"id": 1510,
																			"indexExpression": {
																				"id": 1509,
																				"name": "lastIndex",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1495,
																				"src": "3575:9:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "IndexAccess",
																			"src": "3563:22:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		},
																		"nodeType": "VariableDeclarationStatement",
																		"src": "3543:42:5"
																	},
																	{
																		"expression": {
																			"id": 1518,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftHandSide": {
																				"baseExpression": {
																					"expression": {
																						"id": 1512,
																						"name": "set",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1471,
																						"src": "3688:3:5",
																						"typeDescriptions": {
																							"typeIdentifier": "t_struct$_Set_$1425_storage_ptr",
																							"typeString": "struct EnumerableSet.Set storage pointer"
																						}
																					},
																					"id": 1515,
																					"isConstant": false,
																					"isLValue": true,
																					"isPure": false,
																					"lValueRequested": false,
																					"memberName": "_values",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 1420,
																					"src": "3688:11:5",
																					"typeDescriptions": {
																						"typeIdentifier": "t_array$_t_bytes32_$dyn_storage",
																						"typeString": "bytes32[] storage ref"
																					}
																				},
																				"id": 1516,
																				"indexExpression": {
																					"id": 1514,
																					"name": "toDeleteIndex",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1489,
																					"src": "3700:13:5",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": true,
																				"nodeType": "IndexAccess",
																				"src": "3688:26:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes32",
																					"typeString": "bytes32"
																				}
																			},
																			"nodeType": "Assignment",
																			"operator": "=",
																			"rightHandSide": {
																				"id": 1517,
																				"name": "lastValue",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1506,
																				"src": "3717:9:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes32",
																					"typeString": "bytes32"
																				}
																			},
																			"src": "3688:38:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		},
																		"id": 1519,
																		"nodeType": "ExpressionStatement",
																		"src": "3688:38:5"
																	},
																	{
																		"expression": {
																			"id": 1526,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftHandSide": {
																				"baseExpression": {
																					"expression": {
																						"id": 1520,
																						"name": "set",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1471,
																						"src": "3802:3:5",
																						"typeDescriptions": {
																							"typeIdentifier": "t_struct$_Set_$1425_storage_ptr",
																							"typeString": "struct EnumerableSet.Set storage pointer"
																						}
																					},
																					"id": 1523,
																					"isConstant": false,
																					"isLValue": true,
																					"isPure": false,
																					"lValueRequested": false,
																					"memberName": "_indexes",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 1424,
																					"src": "3802:12:5",
																					"typeDescriptions": {
																						"typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
																						"typeString": "mapping(bytes32 => uint256)"
																					}
																				},
																				"id": 1524,
																				"indexExpression": {
																					"id": 1522,
																					"name": "lastValue",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1506,
																					"src": "3815:9:5",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bytes32",
																						"typeString": "bytes32"
																					}
																				},
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": true,
																				"nodeType": "IndexAccess",
																				"src": "3802:23:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "Assignment",
																			"operator": "=",
																			"rightHandSide": {
																				"id": 1525,
																				"name": "valueIndex",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1479,
																				"src": "3828:10:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "3802:36:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"id": 1527,
																		"nodeType": "ExpressionStatement",
																		"src": "3802:36:5"
																	}
																]
															}
														},
														{
															"expression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"expression": {
																		"expression": {
																			"id": 1530,
																			"name": "set",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1471,
																			"src": "3978:3:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_Set_$1425_storage_ptr",
																				"typeString": "struct EnumerableSet.Set storage pointer"
																			}
																		},
																		"id": 1533,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "_values",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 1420,
																		"src": "3978:11:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_bytes32_$dyn_storage",
																			"typeString": "bytes32[] storage ref"
																		}
																	},
																	"id": 1534,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "pop",
																	"nodeType": "MemberAccess",
																	"src": "3978:15:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_arraypop_nonpayable$__$returns$__$",
																		"typeString": "function ()"
																	}
																},
																"id": 1535,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3978:17:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1536,
															"nodeType": "ExpressionStatement",
															"src": "3978:17:5"
														},
														{
															"expression": {
																"id": 1541,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "UnaryOperation",
																"operator": "delete",
																"prefix": true,
																"src": "4066:26:5",
																"subExpression": {
																	"baseExpression": {
																		"expression": {
																			"id": 1537,
																			"name": "set",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1471,
																			"src": "4073:3:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_Set_$1425_storage_ptr",
																				"typeString": "struct EnumerableSet.Set storage pointer"
																			}
																		},
																		"id": 1538,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "_indexes",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 1424,
																		"src": "4073:12:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
																			"typeString": "mapping(bytes32 => uint256)"
																		}
																	},
																	"id": 1540,
																	"indexExpression": {
																		"id": 1539,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1473,
																		"src": "4086:5:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"nodeType": "IndexAccess",
																	"src": "4073:19:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1542,
															"nodeType": "ExpressionStatement",
															"src": "4066:26:5"
														},
														{
															"expression": {
																"hexValue": "74727565",
																"id": 1543,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "4116:4:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "true"
															},
															"functionReturnParameters": 1477,
															"id": 1544,
															"nodeType": "Return",
															"src": "4109:11:5"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1468,
										"nodeType": "StructuredDocumentation",
										"src": "2596:162:5",
										"text": " @dev Removes a value from a set. O(1).\n Returns true if the value was removed from the set, that is if it was\n present."
									},
									"id": 1551,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_remove",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1474,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1471,
												"mutability": "mutable",
												"name": "set",
												"nodeType": "VariableDeclaration",
												"scope": 1551,
												"src": "2781:15:5",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Set_$1425_storage_ptr",
													"typeString": "struct EnumerableSet.Set"
												},
												"typeName": {
													"id": 1470,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1469,
														"name": "Set",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1425,
														"src": "2781:3:5"
													},
													"referencedDeclaration": 1425,
													"src": "2781:3:5",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Set_$1425_storage_ptr",
														"typeString": "struct EnumerableSet.Set"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1473,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 1551,
												"src": "2798:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1472,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2798:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2780:32:5"
									},
									"returnParameters": {
										"id": 1477,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1476,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1551,
												"src": "2830:4:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1475,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2830:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2829:6:5"
									},
									"scope": 2013,
									"src": "2764:1420:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 1569,
										"nodeType": "Block",
										"src": "4349:50:5",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1567,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"baseExpression": {
															"expression": {
																"id": 1562,
																"name": "set",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1555,
																"src": "4367:3:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Set_$1425_storage_ptr",
																	"typeString": "struct EnumerableSet.Set storage pointer"
																}
															},
															"id": 1563,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "_indexes",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1424,
															"src": "4367:12:5",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
																"typeString": "mapping(bytes32 => uint256)"
															}
														},
														"id": 1565,
														"indexExpression": {
															"id": 1564,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1557,
															"src": "4380:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "4367:19:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 1566,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "4390:1:5",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "4367:24:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 1561,
												"id": 1568,
												"nodeType": "Return",
												"src": "4360:31:5"
											}
										]
									},
									"documentation": {
										"id": 1552,
										"nodeType": "StructuredDocumentation",
										"src": "4192:72:5",
										"text": " @dev Returns true if the value is in the set. O(1)."
									},
									"id": 1570,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_contains",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1558,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1555,
												"mutability": "mutable",
												"name": "set",
												"nodeType": "VariableDeclaration",
												"scope": 1570,
												"src": "4289:15:5",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Set_$1425_storage_ptr",
													"typeString": "struct EnumerableSet.Set"
												},
												"typeName": {
													"id": 1554,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1553,
														"name": "Set",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1425,
														"src": "4289:3:5"
													},
													"referencedDeclaration": 1425,
													"src": "4289:3:5",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Set_$1425_storage_ptr",
														"typeString": "struct EnumerableSet.Set"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1557,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 1570,
												"src": "4306:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1556,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4306:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4288:32:5"
									},
									"returnParameters": {
										"id": 1561,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1560,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1570,
												"src": "4343:4:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1559,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4343:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4342:6:5"
									},
									"scope": 2013,
									"src": "4270:129:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 1583,
										"nodeType": "Block",
										"src": "4550:44:5",
										"statements": [
											{
												"expression": {
													"expression": {
														"expression": {
															"id": 1579,
															"name": "set",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1574,
															"src": "4568:3:5",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Set_$1425_storage_ptr",
																"typeString": "struct EnumerableSet.Set storage pointer"
															}
														},
														"id": 1580,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "_values",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1420,
														"src": "4568:11:5",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_bytes32_$dyn_storage",
															"typeString": "bytes32[] storage ref"
														}
													},
													"id": 1581,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "length",
													"nodeType": "MemberAccess",
													"src": "4568:18:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1578,
												"id": 1582,
												"nodeType": "Return",
												"src": "4561:25:5"
											}
										]
									},
									"documentation": {
										"id": 1571,
										"nodeType": "StructuredDocumentation",
										"src": "4407:72:5",
										"text": " @dev Returns the number of values on the set. O(1)."
									},
									"id": 1584,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_length",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1575,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1574,
												"mutability": "mutable",
												"name": "set",
												"nodeType": "VariableDeclaration",
												"scope": 1584,
												"src": "4502:15:5",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Set_$1425_storage_ptr",
													"typeString": "struct EnumerableSet.Set"
												},
												"typeName": {
													"id": 1573,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1572,
														"name": "Set",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1425,
														"src": "4502:3:5"
													},
													"referencedDeclaration": 1425,
													"src": "4502:3:5",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Set_$1425_storage_ptr",
														"typeString": "struct EnumerableSet.Set"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4501:17:5"
									},
									"returnParameters": {
										"id": 1578,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1577,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1584,
												"src": "4541:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1576,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4541:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4540:9:5"
									},
									"scope": 2013,
									"src": "4485:109:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 1600,
										"nodeType": "Block",
										"src": "5024:44:5",
										"statements": [
											{
												"expression": {
													"baseExpression": {
														"expression": {
															"id": 1595,
															"name": "set",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1588,
															"src": "5042:3:5",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Set_$1425_storage_ptr",
																"typeString": "struct EnumerableSet.Set storage pointer"
															}
														},
														"id": 1596,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "_values",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1420,
														"src": "5042:11:5",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_bytes32_$dyn_storage",
															"typeString": "bytes32[] storage ref"
														}
													},
													"id": 1598,
													"indexExpression": {
														"id": 1597,
														"name": "index",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1590,
														"src": "5054:5:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "5042:18:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"functionReturnParameters": 1594,
												"id": 1599,
												"nodeType": "Return",
												"src": "5035:25:5"
											}
										]
									},
									"documentation": {
										"id": 1585,
										"nodeType": "StructuredDocumentation",
										"src": "4602:340:5",
										"text": " @dev Returns the value stored at position `index` in the set. O(1).\n Note that there are no guarantees on the ordering of values inside the\n array, and it may change when more values are added or removed.\n Requirements:\n - `index` must be strictly less than {length}."
									},
									"id": 1601,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_at",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1591,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1588,
												"mutability": "mutable",
												"name": "set",
												"nodeType": "VariableDeclaration",
												"scope": 1601,
												"src": "4961:15:5",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Set_$1425_storage_ptr",
													"typeString": "struct EnumerableSet.Set"
												},
												"typeName": {
													"id": 1587,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1586,
														"name": "Set",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1425,
														"src": "4961:3:5"
													},
													"referencedDeclaration": 1425,
													"src": "4961:3:5",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Set_$1425_storage_ptr",
														"typeString": "struct EnumerableSet.Set"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1590,
												"mutability": "mutable",
												"name": "index",
												"nodeType": "VariableDeclaration",
												"scope": 1601,
												"src": "4978:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1589,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4978:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4960:32:5"
									},
									"returnParameters": {
										"id": 1594,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1593,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1601,
												"src": "5015:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1592,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "5015:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5014:9:5"
									},
									"scope": 2013,
									"src": "4948:120:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 1614,
										"nodeType": "Block",
										"src": "5692:37:5",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 1611,
														"name": "set",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1605,
														"src": "5710:3:5",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Set_$1425_storage_ptr",
															"typeString": "struct EnumerableSet.Set storage pointer"
														}
													},
													"id": 1612,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "_values",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 1420,
													"src": "5710:11:5",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage",
														"typeString": "bytes32[] storage ref"
													}
												},
												"functionReturnParameters": 1610,
												"id": 1613,
												"nodeType": "Return",
												"src": "5703:18:5"
											}
										]
									},
									"documentation": {
										"id": 1602,
										"nodeType": "StructuredDocumentation",
										"src": "5076:536:5",
										"text": " @dev Return the entire set in an array\n WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n this function has an unbounded cost, and using it as part of a state-changing function may render the function\n uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block."
									},
									"id": 1615,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_values",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1606,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1605,
												"mutability": "mutable",
												"name": "set",
												"nodeType": "VariableDeclaration",
												"scope": 1615,
												"src": "5635:15:5",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Set_$1425_storage_ptr",
													"typeString": "struct EnumerableSet.Set"
												},
												"typeName": {
													"id": 1604,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1603,
														"name": "Set",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1425,
														"src": "5635:3:5"
													},
													"referencedDeclaration": 1425,
													"src": "5635:3:5",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Set_$1425_storage_ptr",
														"typeString": "struct EnumerableSet.Set"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5634:17:5"
									},
									"returnParameters": {
										"id": 1610,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1609,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1615,
												"src": "5674:16:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 1607,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "5674:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 1608,
													"nodeType": "ArrayTypeName",
													"src": "5674:9:5",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5673:18:5"
									},
									"scope": 2013,
									"src": "5618:111:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "private"
								},
								{
									"canonicalName": "EnumerableSet.Bytes32Set",
									"id": 1619,
									"members": [
										{
											"constant": false,
											"id": 1618,
											"mutability": "mutable",
											"name": "_inner",
											"nodeType": "VariableDeclaration",
											"scope": 1619,
											"src": "5787:10:5",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_struct$_Set_$1425_storage_ptr",
												"typeString": "struct EnumerableSet.Set"
											},
											"typeName": {
												"id": 1617,
												"nodeType": "UserDefinedTypeName",
												"pathNode": {
													"id": 1616,
													"name": "Set",
													"nodeType": "IdentifierPath",
													"referencedDeclaration": 1425,
													"src": "5787:3:5"
												},
												"referencedDeclaration": 1425,
												"src": "5787:3:5",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Set_$1425_storage_ptr",
													"typeString": "struct EnumerableSet.Set"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "Bytes32Set",
									"nodeType": "StructDefinition",
									"scope": 2013,
									"src": "5758:47:5",
									"visibility": "public"
								},
								{
									"body": {
										"id": 1636,
										"nodeType": "Block",
										"src": "6059:49:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 1631,
																"name": "set",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1623,
																"src": "6082:3:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Bytes32Set_$1619_storage_ptr",
																	"typeString": "struct EnumerableSet.Bytes32Set storage pointer"
																}
															},
															"id": 1632,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "_inner",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1618,
															"src": "6082:10:5",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Set_$1425_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															}
														},
														{
															"id": 1633,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1625,
															"src": "6094:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_struct$_Set_$1425_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 1630,
														"name": "_add",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1467,
														"src": "6077:4:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_struct$_Set_$1425_storage_ptr_$_t_bytes32_$returns$_t_bool_$",
															"typeString": "function (struct EnumerableSet.Set storage pointer,bytes32) returns (bool)"
														}
													},
													"id": 1634,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6077:23:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 1629,
												"id": 1635,
												"nodeType": "Return",
												"src": "6070:30:5"
											}
										]
									},
									"documentation": {
										"id": 1620,
										"nodeType": "StructuredDocumentation",
										"src": "5813:164:5",
										"text": " @dev Add a value to a set. O(1).\n Returns true if the value was added to the set, that is if it was not\n already present."
									},
									"id": 1637,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "add",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1626,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1623,
												"mutability": "mutable",
												"name": "set",
												"nodeType": "VariableDeclaration",
												"scope": 1637,
												"src": "5996:22:5",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Bytes32Set_$1619_storage_ptr",
													"typeString": "struct EnumerableSet.Bytes32Set"
												},
												"typeName": {
													"id": 1622,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1621,
														"name": "Bytes32Set",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1619,
														"src": "5996:10:5"
													},
													"referencedDeclaration": 1619,
													"src": "5996:10:5",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Bytes32Set_$1619_storage_ptr",
														"typeString": "struct EnumerableSet.Bytes32Set"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1625,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 1637,
												"src": "6020:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1624,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "6020:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5995:39:5"
									},
									"returnParameters": {
										"id": 1629,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1628,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1637,
												"src": "6053:4:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1627,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "6053:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6052:6:5"
									},
									"scope": 2013,
									"src": "5983:125:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1654,
										"nodeType": "Block",
										"src": "6363:52:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 1649,
																"name": "set",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1641,
																"src": "6389:3:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Bytes32Set_$1619_storage_ptr",
																	"typeString": "struct EnumerableSet.Bytes32Set storage pointer"
																}
															},
															"id": 1650,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "_inner",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1618,
															"src": "6389:10:5",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Set_$1425_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															}
														},
														{
															"id": 1651,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1643,
															"src": "6401:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_struct$_Set_$1425_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 1648,
														"name": "_remove",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1551,
														"src": "6381:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_struct$_Set_$1425_storage_ptr_$_t_bytes32_$returns$_t_bool_$",
															"typeString": "function (struct EnumerableSet.Set storage pointer,bytes32) returns (bool)"
														}
													},
													"id": 1652,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6381:26:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 1647,
												"id": 1653,
												"nodeType": "Return",
												"src": "6374:33:5"
											}
										]
									},
									"documentation": {
										"id": 1638,
										"nodeType": "StructuredDocumentation",
										"src": "6116:162:5",
										"text": " @dev Removes a value from a set. O(1).\n Returns true if the value was removed from the set, that is if it was\n present."
									},
									"id": 1655,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "remove",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1644,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1641,
												"mutability": "mutable",
												"name": "set",
												"nodeType": "VariableDeclaration",
												"scope": 1655,
												"src": "6300:22:5",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Bytes32Set_$1619_storage_ptr",
													"typeString": "struct EnumerableSet.Bytes32Set"
												},
												"typeName": {
													"id": 1640,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1639,
														"name": "Bytes32Set",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1619,
														"src": "6300:10:5"
													},
													"referencedDeclaration": 1619,
													"src": "6300:10:5",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Bytes32Set_$1619_storage_ptr",
														"typeString": "struct EnumerableSet.Bytes32Set"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1643,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 1655,
												"src": "6324:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1642,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "6324:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6299:39:5"
									},
									"returnParameters": {
										"id": 1647,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1646,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1655,
												"src": "6357:4:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1645,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "6357:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6356:6:5"
									},
									"scope": 2013,
									"src": "6284:131:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1672,
										"nodeType": "Block",
										"src": "6587:54:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 1667,
																"name": "set",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1659,
																"src": "6615:3:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Bytes32Set_$1619_storage_ptr",
																	"typeString": "struct EnumerableSet.Bytes32Set storage pointer"
																}
															},
															"id": 1668,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "_inner",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1618,
															"src": "6615:10:5",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Set_$1425_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															}
														},
														{
															"id": 1669,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1661,
															"src": "6627:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_struct$_Set_$1425_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 1666,
														"name": "_contains",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1570,
														"src": "6605:9:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_struct$_Set_$1425_storage_ptr_$_t_bytes32_$returns$_t_bool_$",
															"typeString": "function (struct EnumerableSet.Set storage pointer,bytes32) view returns (bool)"
														}
													},
													"id": 1670,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6605:28:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 1665,
												"id": 1671,
												"nodeType": "Return",
												"src": "6598:35:5"
											}
										]
									},
									"documentation": {
										"id": 1656,
										"nodeType": "StructuredDocumentation",
										"src": "6423:72:5",
										"text": " @dev Returns true if the value is in the set. O(1)."
									},
									"id": 1673,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "contains",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1662,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1659,
												"mutability": "mutable",
												"name": "set",
												"nodeType": "VariableDeclaration",
												"scope": 1673,
												"src": "6519:22:5",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Bytes32Set_$1619_storage_ptr",
													"typeString": "struct EnumerableSet.Bytes32Set"
												},
												"typeName": {
													"id": 1658,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1657,
														"name": "Bytes32Set",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1619,
														"src": "6519:10:5"
													},
													"referencedDeclaration": 1619,
													"src": "6519:10:5",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Bytes32Set_$1619_storage_ptr",
														"typeString": "struct EnumerableSet.Bytes32Set"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1661,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 1673,
												"src": "6543:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1660,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "6543:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6518:39:5"
									},
									"returnParameters": {
										"id": 1665,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1664,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1673,
												"src": "6581:4:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1663,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "6581:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6580:6:5"
									},
									"scope": 2013,
									"src": "6501:140:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1687,
										"nodeType": "Block",
										"src": "6799:45:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 1683,
																"name": "set",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1677,
																"src": "6825:3:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Bytes32Set_$1619_storage_ptr",
																	"typeString": "struct EnumerableSet.Bytes32Set storage pointer"
																}
															},
															"id": 1684,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "_inner",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1618,
															"src": "6825:10:5",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Set_$1425_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_struct$_Set_$1425_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															}
														],
														"id": 1682,
														"name": "_length",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1584,
														"src": "6817:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_struct$_Set_$1425_storage_ptr_$returns$_t_uint256_$",
															"typeString": "function (struct EnumerableSet.Set storage pointer) view returns (uint256)"
														}
													},
													"id": 1685,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6817:19:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1681,
												"id": 1686,
												"nodeType": "Return",
												"src": "6810:26:5"
											}
										]
									},
									"documentation": {
										"id": 1674,
										"nodeType": "StructuredDocumentation",
										"src": "6649:72:5",
										"text": " @dev Returns the number of values in the set. O(1)."
									},
									"id": 1688,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "length",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1678,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1677,
												"mutability": "mutable",
												"name": "set",
												"nodeType": "VariableDeclaration",
												"scope": 1688,
												"src": "6743:22:5",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Bytes32Set_$1619_storage_ptr",
													"typeString": "struct EnumerableSet.Bytes32Set"
												},
												"typeName": {
													"id": 1676,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1675,
														"name": "Bytes32Set",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1619,
														"src": "6743:10:5"
													},
													"referencedDeclaration": 1619,
													"src": "6743:10:5",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Bytes32Set_$1619_storage_ptr",
														"typeString": "struct EnumerableSet.Bytes32Set"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6742:24:5"
									},
									"returnParameters": {
										"id": 1681,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1680,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1688,
												"src": "6790:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1679,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6790:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6789:9:5"
									},
									"scope": 2013,
									"src": "6727:117:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1705,
										"nodeType": "Block",
										"src": "7281:48:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 1700,
																"name": "set",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1692,
																"src": "7303:3:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Bytes32Set_$1619_storage_ptr",
																	"typeString": "struct EnumerableSet.Bytes32Set storage pointer"
																}
															},
															"id": 1701,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "_inner",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1618,
															"src": "7303:10:5",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Set_$1425_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															}
														},
														{
															"id": 1702,
															"name": "index",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1694,
															"src": "7315:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_struct$_Set_$1425_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1699,
														"name": "_at",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1601,
														"src": "7299:3:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_struct$_Set_$1425_storage_ptr_$_t_uint256_$returns$_t_bytes32_$",
															"typeString": "function (struct EnumerableSet.Set storage pointer,uint256) view returns (bytes32)"
														}
													},
													"id": 1703,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7299:22:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"functionReturnParameters": 1698,
												"id": 1704,
												"nodeType": "Return",
												"src": "7292:29:5"
											}
										]
									},
									"documentation": {
										"id": 1689,
										"nodeType": "StructuredDocumentation",
										"src": "6852:340:5",
										"text": " @dev Returns the value stored at position `index` in the set. O(1).\n Note that there are no guarantees on the ordering of values inside the\n array, and it may change when more values are added or removed.\n Requirements:\n - `index` must be strictly less than {length}."
									},
									"id": 1706,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "at",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1695,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1692,
												"mutability": "mutable",
												"name": "set",
												"nodeType": "VariableDeclaration",
												"scope": 1706,
												"src": "7210:22:5",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Bytes32Set_$1619_storage_ptr",
													"typeString": "struct EnumerableSet.Bytes32Set"
												},
												"typeName": {
													"id": 1691,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1690,
														"name": "Bytes32Set",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1619,
														"src": "7210:10:5"
													},
													"referencedDeclaration": 1619,
													"src": "7210:10:5",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Bytes32Set_$1619_storage_ptr",
														"typeString": "struct EnumerableSet.Bytes32Set"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1694,
												"mutability": "mutable",
												"name": "index",
												"nodeType": "VariableDeclaration",
												"scope": 1706,
												"src": "7234:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1693,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7234:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7209:39:5"
									},
									"returnParameters": {
										"id": 1698,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1697,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1706,
												"src": "7272:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1696,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "7272:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7271:9:5"
									},
									"scope": 2013,
									"src": "7198:131:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1721,
										"nodeType": "Block",
										"src": "7960:45:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 1717,
																"name": "set",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1710,
																"src": "7986:3:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Bytes32Set_$1619_storage_ptr",
																	"typeString": "struct EnumerableSet.Bytes32Set storage pointer"
																}
															},
															"id": 1718,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "_inner",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1618,
															"src": "7986:10:5",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Set_$1425_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_struct$_Set_$1425_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															}
														],
														"id": 1716,
														"name": "_values",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1615,
														"src": "7978:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_struct$_Set_$1425_storage_ptr_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$",
															"typeString": "function (struct EnumerableSet.Set storage pointer) view returns (bytes32[] memory)"
														}
													},
													"id": 1719,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7978:19:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
														"typeString": "bytes32[] memory"
													}
												},
												"functionReturnParameters": 1715,
												"id": 1720,
												"nodeType": "Return",
												"src": "7971:26:5"
											}
										]
									},
									"documentation": {
										"id": 1707,
										"nodeType": "StructuredDocumentation",
										"src": "7337:536:5",
										"text": " @dev Return the entire set in an array\n WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n this function has an unbounded cost, and using it as part of a state-changing function may render the function\n uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block."
									},
									"id": 1722,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "values",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1711,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1710,
												"mutability": "mutable",
												"name": "set",
												"nodeType": "VariableDeclaration",
												"scope": 1722,
												"src": "7895:22:5",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Bytes32Set_$1619_storage_ptr",
													"typeString": "struct EnumerableSet.Bytes32Set"
												},
												"typeName": {
													"id": 1709,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1708,
														"name": "Bytes32Set",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1619,
														"src": "7895:10:5"
													},
													"referencedDeclaration": 1619,
													"src": "7895:10:5",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Bytes32Set_$1619_storage_ptr",
														"typeString": "struct EnumerableSet.Bytes32Set"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7894:24:5"
									},
									"returnParameters": {
										"id": 1715,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1714,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1722,
												"src": "7942:16:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 1712,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "7942:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 1713,
													"nodeType": "ArrayTypeName",
													"src": "7942:9:5",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7941:18:5"
									},
									"scope": 2013,
									"src": "7879:126:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"canonicalName": "EnumerableSet.AddressSet",
									"id": 1726,
									"members": [
										{
											"constant": false,
											"id": 1725,
											"mutability": "mutable",
											"name": "_inner",
											"nodeType": "VariableDeclaration",
											"scope": 1726,
											"src": "8063:10:5",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_struct$_Set_$1425_storage_ptr",
												"typeString": "struct EnumerableSet.Set"
											},
											"typeName": {
												"id": 1724,
												"nodeType": "UserDefinedTypeName",
												"pathNode": {
													"id": 1723,
													"name": "Set",
													"nodeType": "IdentifierPath",
													"referencedDeclaration": 1425,
													"src": "8063:3:5"
												},
												"referencedDeclaration": 1425,
												"src": "8063:3:5",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Set_$1425_storage_ptr",
													"typeString": "struct EnumerableSet.Set"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "AddressSet",
									"nodeType": "StructDefinition",
									"scope": 2013,
									"src": "8034:47:5",
									"visibility": "public"
								},
								{
									"body": {
										"id": 1752,
										"nodeType": "Block",
										"src": "8335:76:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 1738,
																"name": "set",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1730,
																"src": "8358:3:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_AddressSet_$1726_storage_ptr",
																	"typeString": "struct EnumerableSet.AddressSet storage pointer"
																}
															},
															"id": 1739,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "_inner",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1725,
															"src": "8358:10:5",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Set_$1425_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															}
														},
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"arguments": [
																				{
																					"id": 1746,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1732,
																					"src": "8394:5:5",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				],
																				"id": 1745,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "8386:7:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_uint160_$",
																					"typeString": "type(uint160)"
																				},
																				"typeName": {
																					"id": 1744,
																					"name": "uint160",
																					"nodeType": "ElementaryTypeName",
																					"src": "8386:7:5",
																					"typeDescriptions": {}
																				}
																			},
																			"id": 1747,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "typeConversion",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "8386:14:5",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint160",
																				"typeString": "uint160"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint160",
																				"typeString": "uint160"
																			}
																		],
																		"id": 1743,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "8378:7:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_uint256_$",
																			"typeString": "type(uint256)"
																		},
																		"typeName": {
																			"id": 1742,
																			"name": "uint256",
																			"nodeType": "ElementaryTypeName",
																			"src": "8378:7:5",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 1748,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "8378:23:5",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 1741,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "8370:7:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_bytes32_$",
																	"typeString": "type(bytes32)"
																},
																"typeName": {
																	"id": 1740,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "8370:7:5",
																	"typeDescriptions": {}
																}
															},
															"id": 1749,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8370:32:5",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_struct$_Set_$1425_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 1737,
														"name": "_add",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1467,
														"src": "8353:4:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_struct$_Set_$1425_storage_ptr_$_t_bytes32_$returns$_t_bool_$",
															"typeString": "function (struct EnumerableSet.Set storage pointer,bytes32) returns (bool)"
														}
													},
													"id": 1750,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8353:50:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 1736,
												"id": 1751,
												"nodeType": "Return",
												"src": "8346:57:5"
											}
										]
									},
									"documentation": {
										"id": 1727,
										"nodeType": "StructuredDocumentation",
										"src": "8089:164:5",
										"text": " @dev Add a value to a set. O(1).\n Returns true if the value was added to the set, that is if it was not\n already present."
									},
									"id": 1753,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "add",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1733,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1730,
												"mutability": "mutable",
												"name": "set",
												"nodeType": "VariableDeclaration",
												"scope": 1753,
												"src": "8272:22:5",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_AddressSet_$1726_storage_ptr",
													"typeString": "struct EnumerableSet.AddressSet"
												},
												"typeName": {
													"id": 1729,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1728,
														"name": "AddressSet",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1726,
														"src": "8272:10:5"
													},
													"referencedDeclaration": 1726,
													"src": "8272:10:5",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_AddressSet_$1726_storage_ptr",
														"typeString": "struct EnumerableSet.AddressSet"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1732,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 1753,
												"src": "8296:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1731,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8296:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8271:39:5"
									},
									"returnParameters": {
										"id": 1736,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1735,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1753,
												"src": "8329:4:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1734,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "8329:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8328:6:5"
									},
									"scope": 2013,
									"src": "8259:152:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1779,
										"nodeType": "Block",
										"src": "8666:79:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 1765,
																"name": "set",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1757,
																"src": "8692:3:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_AddressSet_$1726_storage_ptr",
																	"typeString": "struct EnumerableSet.AddressSet storage pointer"
																}
															},
															"id": 1766,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "_inner",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1725,
															"src": "8692:10:5",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Set_$1425_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															}
														},
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"arguments": [
																				{
																					"id": 1773,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1759,
																					"src": "8728:5:5",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				],
																				"id": 1772,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "8720:7:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_uint160_$",
																					"typeString": "type(uint160)"
																				},
																				"typeName": {
																					"id": 1771,
																					"name": "uint160",
																					"nodeType": "ElementaryTypeName",
																					"src": "8720:7:5",
																					"typeDescriptions": {}
																				}
																			},
																			"id": 1774,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "typeConversion",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "8720:14:5",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint160",
																				"typeString": "uint160"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint160",
																				"typeString": "uint160"
																			}
																		],
																		"id": 1770,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "8712:7:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_uint256_$",
																			"typeString": "type(uint256)"
																		},
																		"typeName": {
																			"id": 1769,
																			"name": "uint256",
																			"nodeType": "ElementaryTypeName",
																			"src": "8712:7:5",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 1775,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "8712:23:5",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 1768,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "8704:7:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_bytes32_$",
																	"typeString": "type(bytes32)"
																},
																"typeName": {
																	"id": 1767,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "8704:7:5",
																	"typeDescriptions": {}
																}
															},
															"id": 1776,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8704:32:5",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_struct$_Set_$1425_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 1764,
														"name": "_remove",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1551,
														"src": "8684:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_struct$_Set_$1425_storage_ptr_$_t_bytes32_$returns$_t_bool_$",
															"typeString": "function (struct EnumerableSet.Set storage pointer,bytes32) returns (bool)"
														}
													},
													"id": 1777,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8684:53:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 1763,
												"id": 1778,
												"nodeType": "Return",
												"src": "8677:60:5"
											}
										]
									},
									"documentation": {
										"id": 1754,
										"nodeType": "StructuredDocumentation",
										"src": "8419:162:5",
										"text": " @dev Removes a value from a set. O(1).\n Returns true if the value was removed from the set, that is if it was\n present."
									},
									"id": 1780,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "remove",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1760,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1757,
												"mutability": "mutable",
												"name": "set",
												"nodeType": "VariableDeclaration",
												"scope": 1780,
												"src": "8603:22:5",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_AddressSet_$1726_storage_ptr",
													"typeString": "struct EnumerableSet.AddressSet"
												},
												"typeName": {
													"id": 1756,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1755,
														"name": "AddressSet",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1726,
														"src": "8603:10:5"
													},
													"referencedDeclaration": 1726,
													"src": "8603:10:5",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_AddressSet_$1726_storage_ptr",
														"typeString": "struct EnumerableSet.AddressSet"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1759,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 1780,
												"src": "8627:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1758,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8627:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8602:39:5"
									},
									"returnParameters": {
										"id": 1763,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1762,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1780,
												"src": "8660:4:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1761,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "8660:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8659:6:5"
									},
									"scope": 2013,
									"src": "8587:158:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1806,
										"nodeType": "Block",
										"src": "8917:81:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 1792,
																"name": "set",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1784,
																"src": "8945:3:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_AddressSet_$1726_storage_ptr",
																	"typeString": "struct EnumerableSet.AddressSet storage pointer"
																}
															},
															"id": 1793,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "_inner",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1725,
															"src": "8945:10:5",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Set_$1425_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															}
														},
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"arguments": [
																				{
																					"id": 1800,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1786,
																					"src": "8981:5:5",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				],
																				"id": 1799,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "8973:7:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_uint160_$",
																					"typeString": "type(uint160)"
																				},
																				"typeName": {
																					"id": 1798,
																					"name": "uint160",
																					"nodeType": "ElementaryTypeName",
																					"src": "8973:7:5",
																					"typeDescriptions": {}
																				}
																			},
																			"id": 1801,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "typeConversion",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "8973:14:5",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint160",
																				"typeString": "uint160"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint160",
																				"typeString": "uint160"
																			}
																		],
																		"id": 1797,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "8965:7:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_uint256_$",
																			"typeString": "type(uint256)"
																		},
																		"typeName": {
																			"id": 1796,
																			"name": "uint256",
																			"nodeType": "ElementaryTypeName",
																			"src": "8965:7:5",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 1802,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "8965:23:5",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 1795,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "8957:7:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_bytes32_$",
																	"typeString": "type(bytes32)"
																},
																"typeName": {
																	"id": 1794,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "8957:7:5",
																	"typeDescriptions": {}
																}
															},
															"id": 1803,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8957:32:5",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_struct$_Set_$1425_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 1791,
														"name": "_contains",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1570,
														"src": "8935:9:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_struct$_Set_$1425_storage_ptr_$_t_bytes32_$returns$_t_bool_$",
															"typeString": "function (struct EnumerableSet.Set storage pointer,bytes32) view returns (bool)"
														}
													},
													"id": 1804,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8935:55:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 1790,
												"id": 1805,
												"nodeType": "Return",
												"src": "8928:62:5"
											}
										]
									},
									"documentation": {
										"id": 1781,
										"nodeType": "StructuredDocumentation",
										"src": "8753:72:5",
										"text": " @dev Returns true if the value is in the set. O(1)."
									},
									"id": 1807,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "contains",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1787,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1784,
												"mutability": "mutable",
												"name": "set",
												"nodeType": "VariableDeclaration",
												"scope": 1807,
												"src": "8849:22:5",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_AddressSet_$1726_storage_ptr",
													"typeString": "struct EnumerableSet.AddressSet"
												},
												"typeName": {
													"id": 1783,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1782,
														"name": "AddressSet",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1726,
														"src": "8849:10:5"
													},
													"referencedDeclaration": 1726,
													"src": "8849:10:5",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_AddressSet_$1726_storage_ptr",
														"typeString": "struct EnumerableSet.AddressSet"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1786,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 1807,
												"src": "8873:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1785,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8873:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8848:39:5"
									},
									"returnParameters": {
										"id": 1790,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1789,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1807,
												"src": "8911:4:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1788,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "8911:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8910:6:5"
									},
									"scope": 2013,
									"src": "8831:167:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1821,
										"nodeType": "Block",
										"src": "9156:45:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 1817,
																"name": "set",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1811,
																"src": "9182:3:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_AddressSet_$1726_storage_ptr",
																	"typeString": "struct EnumerableSet.AddressSet storage pointer"
																}
															},
															"id": 1818,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "_inner",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1725,
															"src": "9182:10:5",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Set_$1425_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_struct$_Set_$1425_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															}
														],
														"id": 1816,
														"name": "_length",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1584,
														"src": "9174:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_struct$_Set_$1425_storage_ptr_$returns$_t_uint256_$",
															"typeString": "function (struct EnumerableSet.Set storage pointer) view returns (uint256)"
														}
													},
													"id": 1819,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9174:19:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1815,
												"id": 1820,
												"nodeType": "Return",
												"src": "9167:26:5"
											}
										]
									},
									"documentation": {
										"id": 1808,
										"nodeType": "StructuredDocumentation",
										"src": "9006:72:5",
										"text": " @dev Returns the number of values in the set. O(1)."
									},
									"id": 1822,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "length",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1812,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1811,
												"mutability": "mutable",
												"name": "set",
												"nodeType": "VariableDeclaration",
												"scope": 1822,
												"src": "9100:22:5",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_AddressSet_$1726_storage_ptr",
													"typeString": "struct EnumerableSet.AddressSet"
												},
												"typeName": {
													"id": 1810,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1809,
														"name": "AddressSet",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1726,
														"src": "9100:10:5"
													},
													"referencedDeclaration": 1726,
													"src": "9100:10:5",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_AddressSet_$1726_storage_ptr",
														"typeString": "struct EnumerableSet.AddressSet"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9099:24:5"
									},
									"returnParameters": {
										"id": 1815,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1814,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1822,
												"src": "9147:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1813,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9147:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9146:9:5"
									},
									"scope": 2013,
									"src": "9084:117:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1848,
										"nodeType": "Block",
										"src": "9638:75:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"arguments": [
																				{
																					"expression": {
																						"id": 1840,
																						"name": "set",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1826,
																						"src": "9684:3:5",
																						"typeDescriptions": {
																							"typeIdentifier": "t_struct$_AddressSet_$1726_storage_ptr",
																							"typeString": "struct EnumerableSet.AddressSet storage pointer"
																						}
																					},
																					"id": 1841,
																					"isConstant": false,
																					"isLValue": true,
																					"isPure": false,
																					"lValueRequested": false,
																					"memberName": "_inner",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 1725,
																					"src": "9684:10:5",
																					"typeDescriptions": {
																						"typeIdentifier": "t_struct$_Set_$1425_storage",
																						"typeString": "struct EnumerableSet.Set storage ref"
																					}
																				},
																				{
																					"id": 1842,
																					"name": "index",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1828,
																					"src": "9696:5:5",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_struct$_Set_$1425_storage",
																						"typeString": "struct EnumerableSet.Set storage ref"
																					},
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				],
																				"id": 1839,
																				"name": "_at",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1601,
																				"src": "9680:3:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_internal_view$_t_struct$_Set_$1425_storage_ptr_$_t_uint256_$returns$_t_bytes32_$",
																					"typeString": "function (struct EnumerableSet.Set storage pointer,uint256) view returns (bytes32)"
																				}
																			},
																			"id": 1843,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "9680:22:5",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		],
																		"id": 1838,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "9672:7:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_uint256_$",
																			"typeString": "type(uint256)"
																		},
																		"typeName": {
																			"id": 1837,
																			"name": "uint256",
																			"nodeType": "ElementaryTypeName",
																			"src": "9672:7:5",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 1844,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "9672:31:5",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 1836,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "9664:7:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_uint160_$",
																	"typeString": "type(uint160)"
																},
																"typeName": {
																	"id": 1835,
																	"name": "uint160",
																	"nodeType": "ElementaryTypeName",
																	"src": "9664:7:5",
																	"typeDescriptions": {}
																}
															},
															"id": 1845,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9664:40:5",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint160",
																"typeString": "uint160"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint160",
																"typeString": "uint160"
															}
														],
														"id": 1834,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "9656:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_address_$",
															"typeString": "type(address)"
														},
														"typeName": {
															"id": 1833,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "9656:7:5",
															"typeDescriptions": {}
														}
													},
													"id": 1846,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9656:49:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 1832,
												"id": 1847,
												"nodeType": "Return",
												"src": "9649:56:5"
											}
										]
									},
									"documentation": {
										"id": 1823,
										"nodeType": "StructuredDocumentation",
										"src": "9209:340:5",
										"text": " @dev Returns the value stored at position `index` in the set. O(1).\n Note that there are no guarantees on the ordering of values inside the\n array, and it may change when more values are added or removed.\n Requirements:\n - `index` must be strictly less than {length}."
									},
									"id": 1849,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "at",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1829,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1826,
												"mutability": "mutable",
												"name": "set",
												"nodeType": "VariableDeclaration",
												"scope": 1849,
												"src": "9567:22:5",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_AddressSet_$1726_storage_ptr",
													"typeString": "struct EnumerableSet.AddressSet"
												},
												"typeName": {
													"id": 1825,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1824,
														"name": "AddressSet",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1726,
														"src": "9567:10:5"
													},
													"referencedDeclaration": 1726,
													"src": "9567:10:5",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_AddressSet_$1726_storage_ptr",
														"typeString": "struct EnumerableSet.AddressSet"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1828,
												"mutability": "mutable",
												"name": "index",
												"nodeType": "VariableDeclaration",
												"scope": 1849,
												"src": "9591:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1827,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9591:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9566:39:5"
									},
									"returnParameters": {
										"id": 1832,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1831,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1849,
												"src": "9629:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1830,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9629:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9628:9:5"
									},
									"scope": 2013,
									"src": "9555:158:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1878,
										"nodeType": "Block",
										"src": "10344:229:5",
										"statements": [
											{
												"assignments": [
													1863
												],
												"declarations": [
													{
														"constant": false,
														"id": 1863,
														"mutability": "mutable",
														"name": "store",
														"nodeType": "VariableDeclaration",
														"scope": 1878,
														"src": "10355:22:5",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
															"typeString": "bytes32[]"
														},
														"typeName": {
															"baseType": {
																"id": 1861,
																"name": "bytes32",
																"nodeType": "ElementaryTypeName",
																"src": "10355:7:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"id": 1862,
															"nodeType": "ArrayTypeName",
															"src": "10355:9:5",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
																"typeString": "bytes32[]"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1868,
												"initialValue": {
													"arguments": [
														{
															"expression": {
																"id": 1865,
																"name": "set",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1853,
																"src": "10388:3:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_AddressSet_$1726_storage_ptr",
																	"typeString": "struct EnumerableSet.AddressSet storage pointer"
																}
															},
															"id": 1866,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "_inner",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1725,
															"src": "10388:10:5",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Set_$1425_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_struct$_Set_$1425_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															}
														],
														"id": 1864,
														"name": "_values",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1615,
														"src": "10380:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_struct$_Set_$1425_storage_ptr_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$",
															"typeString": "function (struct EnumerableSet.Set storage pointer) view returns (bytes32[] memory)"
														}
													},
													"id": 1867,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10380:19:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
														"typeString": "bytes32[] memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "10355:44:5"
											},
											{
												"assignments": [
													1873
												],
												"declarations": [
													{
														"constant": false,
														"id": 1873,
														"mutability": "mutable",
														"name": "result",
														"nodeType": "VariableDeclaration",
														"scope": 1878,
														"src": "10410:23:5",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
															"typeString": "address[]"
														},
														"typeName": {
															"baseType": {
																"id": 1871,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "10410:7:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 1872,
															"nodeType": "ArrayTypeName",
															"src": "10410:9:5",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
																"typeString": "address[]"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1874,
												"nodeType": "VariableDeclarationStatement",
												"src": "10410:23:5"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "10499:41:5",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "10514:15:5",
															"value": {
																"name": "store",
																"nodeType": "YulIdentifier",
																"src": "10524:5:5"
															},
															"variableNames": [
																{
																	"name": "result",
																	"nodeType": "YulIdentifier",
																	"src": "10514:6:5"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 1873,
														"isOffset": false,
														"isSlot": false,
														"src": "10514:6:5",
														"valueSize": 1
													},
													{
														"declaration": 1863,
														"isOffset": false,
														"isSlot": false,
														"src": "10524:5:5",
														"valueSize": 1
													}
												],
												"id": 1875,
												"nodeType": "InlineAssembly",
												"src": "10490:50:5"
											},
											{
												"expression": {
													"id": 1876,
													"name": "result",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1873,
													"src": "10559:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
														"typeString": "address[] memory"
													}
												},
												"functionReturnParameters": 1858,
												"id": 1877,
												"nodeType": "Return",
												"src": "10552:13:5"
											}
										]
									},
									"documentation": {
										"id": 1850,
										"nodeType": "StructuredDocumentation",
										"src": "9721:536:5",
										"text": " @dev Return the entire set in an array\n WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n this function has an unbounded cost, and using it as part of a state-changing function may render the function\n uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block."
									},
									"id": 1879,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "values",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1854,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1853,
												"mutability": "mutable",
												"name": "set",
												"nodeType": "VariableDeclaration",
												"scope": 1879,
												"src": "10279:22:5",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_AddressSet_$1726_storage_ptr",
													"typeString": "struct EnumerableSet.AddressSet"
												},
												"typeName": {
													"id": 1852,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1851,
														"name": "AddressSet",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1726,
														"src": "10279:10:5"
													},
													"referencedDeclaration": 1726,
													"src": "10279:10:5",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_AddressSet_$1726_storage_ptr",
														"typeString": "struct EnumerableSet.AddressSet"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10278:24:5"
									},
									"returnParameters": {
										"id": 1858,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1857,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1879,
												"src": "10326:16:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
													"typeString": "address[]"
												},
												"typeName": {
													"baseType": {
														"id": 1855,
														"name": "address",
														"nodeType": "ElementaryTypeName",
														"src": "10326:7:5",
														"stateMutability": "nonpayable",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"id": 1856,
													"nodeType": "ArrayTypeName",
													"src": "10326:9:5",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
														"typeString": "address[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10325:18:5"
									},
									"scope": 2013,
									"src": "10263:310:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"canonicalName": "EnumerableSet.UintSet",
									"id": 1883,
									"members": [
										{
											"constant": false,
											"id": 1882,
											"mutability": "mutable",
											"name": "_inner",
											"nodeType": "VariableDeclaration",
											"scope": 1883,
											"src": "10625:10:5",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_struct$_Set_$1425_storage_ptr",
												"typeString": "struct EnumerableSet.Set"
											},
											"typeName": {
												"id": 1881,
												"nodeType": "UserDefinedTypeName",
												"pathNode": {
													"id": 1880,
													"name": "Set",
													"nodeType": "IdentifierPath",
													"referencedDeclaration": 1425,
													"src": "10625:3:5"
												},
												"referencedDeclaration": 1425,
												"src": "10625:3:5",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Set_$1425_storage_ptr",
													"typeString": "struct EnumerableSet.Set"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "UintSet",
									"nodeType": "StructDefinition",
									"scope": 2013,
									"src": "10599:44:5",
									"visibility": "public"
								},
								{
									"body": {
										"id": 1903,
										"nodeType": "Block",
										"src": "10894:58:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 1895,
																"name": "set",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1887,
																"src": "10917:3:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_UintSet_$1883_storage_ptr",
																	"typeString": "struct EnumerableSet.UintSet storage pointer"
																}
															},
															"id": 1896,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "_inner",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1882,
															"src": "10917:10:5",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Set_$1425_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															}
														},
														{
															"arguments": [
																{
																	"id": 1899,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1889,
																	"src": "10937:5:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 1898,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "10929:7:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_bytes32_$",
																	"typeString": "type(bytes32)"
																},
																"typeName": {
																	"id": 1897,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "10929:7:5",
																	"typeDescriptions": {}
																}
															},
															"id": 1900,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "10929:14:5",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_struct$_Set_$1425_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 1894,
														"name": "_add",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1467,
														"src": "10912:4:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_struct$_Set_$1425_storage_ptr_$_t_bytes32_$returns$_t_bool_$",
															"typeString": "function (struct EnumerableSet.Set storage pointer,bytes32) returns (bool)"
														}
													},
													"id": 1901,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10912:32:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 1893,
												"id": 1902,
												"nodeType": "Return",
												"src": "10905:39:5"
											}
										]
									},
									"documentation": {
										"id": 1884,
										"nodeType": "StructuredDocumentation",
										"src": "10651:164:5",
										"text": " @dev Add a value to a set. O(1).\n Returns true if the value was added to the set, that is if it was not\n already present."
									},
									"id": 1904,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "add",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1890,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1887,
												"mutability": "mutable",
												"name": "set",
												"nodeType": "VariableDeclaration",
												"scope": 1904,
												"src": "10834:19:5",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_UintSet_$1883_storage_ptr",
													"typeString": "struct EnumerableSet.UintSet"
												},
												"typeName": {
													"id": 1886,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1885,
														"name": "UintSet",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1883,
														"src": "10834:7:5"
													},
													"referencedDeclaration": 1883,
													"src": "10834:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_UintSet_$1883_storage_ptr",
														"typeString": "struct EnumerableSet.UintSet"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1889,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 1904,
												"src": "10855:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1888,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10855:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10833:36:5"
									},
									"returnParameters": {
										"id": 1893,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1892,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1904,
												"src": "10888:4:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1891,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "10888:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10887:6:5"
									},
									"scope": 2013,
									"src": "10821:131:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1924,
										"nodeType": "Block",
										"src": "11204:61:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 1916,
																"name": "set",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1908,
																"src": "11230:3:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_UintSet_$1883_storage_ptr",
																	"typeString": "struct EnumerableSet.UintSet storage pointer"
																}
															},
															"id": 1917,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "_inner",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1882,
															"src": "11230:10:5",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Set_$1425_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															}
														},
														{
															"arguments": [
																{
																	"id": 1920,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1910,
																	"src": "11250:5:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 1919,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "11242:7:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_bytes32_$",
																	"typeString": "type(bytes32)"
																},
																"typeName": {
																	"id": 1918,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "11242:7:5",
																	"typeDescriptions": {}
																}
															},
															"id": 1921,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "11242:14:5",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_struct$_Set_$1425_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 1915,
														"name": "_remove",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1551,
														"src": "11222:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_struct$_Set_$1425_storage_ptr_$_t_bytes32_$returns$_t_bool_$",
															"typeString": "function (struct EnumerableSet.Set storage pointer,bytes32) returns (bool)"
														}
													},
													"id": 1922,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "11222:35:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 1914,
												"id": 1923,
												"nodeType": "Return",
												"src": "11215:42:5"
											}
										]
									},
									"documentation": {
										"id": 1905,
										"nodeType": "StructuredDocumentation",
										"src": "10960:162:5",
										"text": " @dev Removes a value from a set. O(1).\n Returns true if the value was removed from the set, that is if it was\n present."
									},
									"id": 1925,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "remove",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1911,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1908,
												"mutability": "mutable",
												"name": "set",
												"nodeType": "VariableDeclaration",
												"scope": 1925,
												"src": "11144:19:5",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_UintSet_$1883_storage_ptr",
													"typeString": "struct EnumerableSet.UintSet"
												},
												"typeName": {
													"id": 1907,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1906,
														"name": "UintSet",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1883,
														"src": "11144:7:5"
													},
													"referencedDeclaration": 1883,
													"src": "11144:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_UintSet_$1883_storage_ptr",
														"typeString": "struct EnumerableSet.UintSet"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1910,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 1925,
												"src": "11165:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1909,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11165:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11143:36:5"
									},
									"returnParameters": {
										"id": 1914,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1913,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1925,
												"src": "11198:4:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1912,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "11198:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11197:6:5"
									},
									"scope": 2013,
									"src": "11128:137:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1945,
										"nodeType": "Block",
										"src": "11434:63:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 1937,
																"name": "set",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1929,
																"src": "11462:3:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_UintSet_$1883_storage_ptr",
																	"typeString": "struct EnumerableSet.UintSet storage pointer"
																}
															},
															"id": 1938,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "_inner",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1882,
															"src": "11462:10:5",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Set_$1425_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															}
														},
														{
															"arguments": [
																{
																	"id": 1941,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1931,
																	"src": "11482:5:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 1940,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "11474:7:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_bytes32_$",
																	"typeString": "type(bytes32)"
																},
																"typeName": {
																	"id": 1939,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "11474:7:5",
																	"typeDescriptions": {}
																}
															},
															"id": 1942,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "11474:14:5",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_struct$_Set_$1425_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 1936,
														"name": "_contains",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1570,
														"src": "11452:9:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_struct$_Set_$1425_storage_ptr_$_t_bytes32_$returns$_t_bool_$",
															"typeString": "function (struct EnumerableSet.Set storage pointer,bytes32) view returns (bool)"
														}
													},
													"id": 1943,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "11452:37:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 1935,
												"id": 1944,
												"nodeType": "Return",
												"src": "11445:44:5"
											}
										]
									},
									"documentation": {
										"id": 1926,
										"nodeType": "StructuredDocumentation",
										"src": "11273:72:5",
										"text": " @dev Returns true if the value is in the set. O(1)."
									},
									"id": 1946,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "contains",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1932,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1929,
												"mutability": "mutable",
												"name": "set",
												"nodeType": "VariableDeclaration",
												"scope": 1946,
												"src": "11369:19:5",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_UintSet_$1883_storage_ptr",
													"typeString": "struct EnumerableSet.UintSet"
												},
												"typeName": {
													"id": 1928,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1927,
														"name": "UintSet",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1883,
														"src": "11369:7:5"
													},
													"referencedDeclaration": 1883,
													"src": "11369:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_UintSet_$1883_storage_ptr",
														"typeString": "struct EnumerableSet.UintSet"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1931,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 1946,
												"src": "11390:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1930,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11390:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11368:36:5"
									},
									"returnParameters": {
										"id": 1935,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1934,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1946,
												"src": "11428:4:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1933,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "11428:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11427:6:5"
									},
									"scope": 2013,
									"src": "11351:146:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1960,
										"nodeType": "Block",
										"src": "11652:45:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 1956,
																"name": "set",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1950,
																"src": "11678:3:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_UintSet_$1883_storage_ptr",
																	"typeString": "struct EnumerableSet.UintSet storage pointer"
																}
															},
															"id": 1957,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "_inner",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1882,
															"src": "11678:10:5",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Set_$1425_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_struct$_Set_$1425_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															}
														],
														"id": 1955,
														"name": "_length",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1584,
														"src": "11670:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_struct$_Set_$1425_storage_ptr_$returns$_t_uint256_$",
															"typeString": "function (struct EnumerableSet.Set storage pointer) view returns (uint256)"
														}
													},
													"id": 1958,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "11670:19:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1954,
												"id": 1959,
												"nodeType": "Return",
												"src": "11663:26:5"
											}
										]
									},
									"documentation": {
										"id": 1947,
										"nodeType": "StructuredDocumentation",
										"src": "11505:72:5",
										"text": " @dev Returns the number of values on the set. O(1)."
									},
									"id": 1961,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "length",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1951,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1950,
												"mutability": "mutable",
												"name": "set",
												"nodeType": "VariableDeclaration",
												"scope": 1961,
												"src": "11599:19:5",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_UintSet_$1883_storage_ptr",
													"typeString": "struct EnumerableSet.UintSet"
												},
												"typeName": {
													"id": 1949,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1948,
														"name": "UintSet",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1883,
														"src": "11599:7:5"
													},
													"referencedDeclaration": 1883,
													"src": "11599:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_UintSet_$1883_storage_ptr",
														"typeString": "struct EnumerableSet.UintSet"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11598:21:5"
									},
									"returnParameters": {
										"id": 1954,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1953,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1961,
												"src": "11643:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1952,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11643:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11642:9:5"
									},
									"scope": 2013,
									"src": "11583:114:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1981,
										"nodeType": "Block",
										"src": "12131:57:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"expression": {
																		"id": 1975,
																		"name": "set",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1965,
																		"src": "12161:3:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_UintSet_$1883_storage_ptr",
																			"typeString": "struct EnumerableSet.UintSet storage pointer"
																		}
																	},
																	"id": 1976,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "_inner",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 1882,
																	"src": "12161:10:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Set_$1425_storage",
																		"typeString": "struct EnumerableSet.Set storage ref"
																	}
																},
																{
																	"id": 1977,
																	"name": "index",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1967,
																	"src": "12173:5:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_struct$_Set_$1425_storage",
																		"typeString": "struct EnumerableSet.Set storage ref"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 1974,
																"name": "_at",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1601,
																"src": "12157:3:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$_t_struct$_Set_$1425_storage_ptr_$_t_uint256_$returns$_t_bytes32_$",
																	"typeString": "function (struct EnumerableSet.Set storage pointer,uint256) view returns (bytes32)"
																}
															},
															"id": 1978,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "12157:22:5",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 1973,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "12149:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_uint256_$",
															"typeString": "type(uint256)"
														},
														"typeName": {
															"id": 1972,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "12149:7:5",
															"typeDescriptions": {}
														}
													},
													"id": 1979,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "12149:31:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1971,
												"id": 1980,
												"nodeType": "Return",
												"src": "12142:38:5"
											}
										]
									},
									"documentation": {
										"id": 1962,
										"nodeType": "StructuredDocumentation",
										"src": "11705:340:5",
										"text": " @dev Returns the value stored at position `index` in the set. O(1).\n Note that there are no guarantees on the ordering of values inside the\n array, and it may change when more values are added or removed.\n Requirements:\n - `index` must be strictly less than {length}."
									},
									"id": 1982,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "at",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1968,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1965,
												"mutability": "mutable",
												"name": "set",
												"nodeType": "VariableDeclaration",
												"scope": 1982,
												"src": "12063:19:5",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_UintSet_$1883_storage_ptr",
													"typeString": "struct EnumerableSet.UintSet"
												},
												"typeName": {
													"id": 1964,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1963,
														"name": "UintSet",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1883,
														"src": "12063:7:5"
													},
													"referencedDeclaration": 1883,
													"src": "12063:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_UintSet_$1883_storage_ptr",
														"typeString": "struct EnumerableSet.UintSet"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1967,
												"mutability": "mutable",
												"name": "index",
												"nodeType": "VariableDeclaration",
												"scope": 1982,
												"src": "12084:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1966,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12084:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12062:36:5"
									},
									"returnParameters": {
										"id": 1971,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1970,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1982,
												"src": "12122:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1969,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12122:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12121:9:5"
									},
									"scope": 2013,
									"src": "12051:137:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2011,
										"nodeType": "Block",
										"src": "12816:229:5",
										"statements": [
											{
												"assignments": [
													1996
												],
												"declarations": [
													{
														"constant": false,
														"id": 1996,
														"mutability": "mutable",
														"name": "store",
														"nodeType": "VariableDeclaration",
														"scope": 2011,
														"src": "12827:22:5",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
															"typeString": "bytes32[]"
														},
														"typeName": {
															"baseType": {
																"id": 1994,
																"name": "bytes32",
																"nodeType": "ElementaryTypeName",
																"src": "12827:7:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"id": 1995,
															"nodeType": "ArrayTypeName",
															"src": "12827:9:5",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
																"typeString": "bytes32[]"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2001,
												"initialValue": {
													"arguments": [
														{
															"expression": {
																"id": 1998,
																"name": "set",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1986,
																"src": "12860:3:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_UintSet_$1883_storage_ptr",
																	"typeString": "struct EnumerableSet.UintSet storage pointer"
																}
															},
															"id": 1999,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "_inner",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1882,
															"src": "12860:10:5",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Set_$1425_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_struct$_Set_$1425_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															}
														],
														"id": 1997,
														"name": "_values",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1615,
														"src": "12852:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_struct$_Set_$1425_storage_ptr_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$",
															"typeString": "function (struct EnumerableSet.Set storage pointer) view returns (bytes32[] memory)"
														}
													},
													"id": 2000,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "12852:19:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
														"typeString": "bytes32[] memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "12827:44:5"
											},
											{
												"assignments": [
													2006
												],
												"declarations": [
													{
														"constant": false,
														"id": 2006,
														"mutability": "mutable",
														"name": "result",
														"nodeType": "VariableDeclaration",
														"scope": 2011,
														"src": "12882:23:5",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
															"typeString": "uint256[]"
														},
														"typeName": {
															"baseType": {
																"id": 2004,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "12882:7:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 2005,
															"nodeType": "ArrayTypeName",
															"src": "12882:9:5",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
																"typeString": "uint256[]"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2007,
												"nodeType": "VariableDeclarationStatement",
												"src": "12882:23:5"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "12971:41:5",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "12986:15:5",
															"value": {
																"name": "store",
																"nodeType": "YulIdentifier",
																"src": "12996:5:5"
															},
															"variableNames": [
																{
																	"name": "result",
																	"nodeType": "YulIdentifier",
																	"src": "12986:6:5"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 2006,
														"isOffset": false,
														"isSlot": false,
														"src": "12986:6:5",
														"valueSize": 1
													},
													{
														"declaration": 1996,
														"isOffset": false,
														"isSlot": false,
														"src": "12996:5:5",
														"valueSize": 1
													}
												],
												"id": 2008,
												"nodeType": "InlineAssembly",
												"src": "12962:50:5"
											},
											{
												"expression": {
													"id": 2009,
													"name": "result",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 2006,
													"src": "13031:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
														"typeString": "uint256[] memory"
													}
												},
												"functionReturnParameters": 1991,
												"id": 2010,
												"nodeType": "Return",
												"src": "13024:13:5"
											}
										]
									},
									"documentation": {
										"id": 1983,
										"nodeType": "StructuredDocumentation",
										"src": "12196:536:5",
										"text": " @dev Return the entire set in an array\n WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n this function has an unbounded cost, and using it as part of a state-changing function may render the function\n uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block."
									},
									"id": 2012,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "values",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1987,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1986,
												"mutability": "mutable",
												"name": "set",
												"nodeType": "VariableDeclaration",
												"scope": 2012,
												"src": "12754:19:5",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_UintSet_$1883_storage_ptr",
													"typeString": "struct EnumerableSet.UintSet"
												},
												"typeName": {
													"id": 1985,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1984,
														"name": "UintSet",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1883,
														"src": "12754:7:5"
													},
													"referencedDeclaration": 1883,
													"src": "12754:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_UintSet_$1883_storage_ptr",
														"typeString": "struct EnumerableSet.UintSet"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12753:21:5"
									},
									"returnParameters": {
										"id": 1991,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1990,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 2012,
												"src": "12798:16:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
													"typeString": "uint256[]"
												},
												"typeName": {
													"baseType": {
														"id": 1988,
														"name": "uint256",
														"nodeType": "ElementaryTypeName",
														"src": "12798:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1989,
													"nodeType": "ArrayTypeName",
													"src": "12798:9:5",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
														"typeString": "uint256[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12797:18:5"
									},
									"scope": 2013,
									"src": "12738:307:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 2014,
							"src": "1265:11783:5"
						}
					],
					"src": "118:12930:5"
				},
				"id": 5
			},
			"Utils/Ownable.sol": {
				"ast": {
					"absolutePath": "Utils/Ownable.sol",
					"exportedSymbols": {
						"Context": [
							1414
						],
						"Ownable": [
							2118
						]
					},
					"id": 2119,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2015,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "90:23:6"
						},
						{
							"absolutePath": "Utils/Context.sol",
							"file": "./Context.sol",
							"id": 2016,
							"nodeType": "ImportDirective",
							"scope": 2119,
							"sourceUnit": 1415,
							"src": "117:23:6",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 2018,
										"name": "Context",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1414,
										"src": "680:7:6"
									},
									"id": 2019,
									"nodeType": "InheritanceSpecifier",
									"src": "680:7:6"
								}
							],
							"contractDependencies": [
								1414
							],
							"contractKind": "contract",
							"documentation": {
								"id": 2017,
								"nodeType": "StructuredDocumentation",
								"src": "144:505:6",
								"text": " @dev Contract module which provides a basic access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n By default, the owner account will be the one that deploys the contract. This\n can later be changed with {transferOwnership}.\n This module is used through inheritance. It will make available the modifier\n `onlyOwner`, which can be applied to your functions to restrict their use to\n the owner."
							},
							"fullyImplemented": true,
							"id": 2118,
							"linearizedBaseContracts": [
								2118,
								1414
							],
							"name": "Ownable",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 2021,
									"mutability": "mutable",
									"name": "_owner",
									"nodeType": "VariableDeclaration",
									"scope": 2118,
									"src": "695:22:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 2020,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "695:7:6",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "private"
								},
								{
									"anonymous": false,
									"id": 2027,
									"name": "OwnershipTransferred",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 2026,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2023,
												"indexed": true,
												"mutability": "mutable",
												"name": "previousOwner",
												"nodeType": "VariableDeclaration",
												"scope": 2027,
												"src": "753:29:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2022,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "753:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2025,
												"indexed": true,
												"mutability": "mutable",
												"name": "newOwner",
												"nodeType": "VariableDeclaration",
												"scope": 2027,
												"src": "784:24:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2024,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "784:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "752:57:6"
									},
									"src": "726:84:6"
								},
								{
									"body": {
										"id": 2036,
										"nodeType": "Block",
										"src": "931:51:6",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 2032,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1404,
																"src": "961:10:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 2033,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "961:12:6",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 2031,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2117,
														"src": "942:18:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 2034,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "942:32:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2035,
												"nodeType": "ExpressionStatement",
												"src": "942:32:6"
											}
										]
									},
									"documentation": {
										"id": 2028,
										"nodeType": "StructuredDocumentation",
										"src": "818:93:6",
										"text": " @dev Initializes the contract setting the deployer as the initial owner."
									},
									"id": 2037,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2029,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "928:2:6"
									},
									"returnParameters": {
										"id": 2030,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "931:0:6"
									},
									"scope": 2118,
									"src": "917:65:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2045,
										"nodeType": "Block",
										"src": "1118:32:6",
										"statements": [
											{
												"expression": {
													"id": 2043,
													"name": "_owner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 2021,
													"src": "1136:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 2042,
												"id": 2044,
												"nodeType": "Return",
												"src": "1129:13:6"
											}
										]
									},
									"documentation": {
										"id": 2038,
										"nodeType": "StructuredDocumentation",
										"src": "990:67:6",
										"text": " @dev Returns the address of the current owner."
									},
									"functionSelector": "8da5cb5b",
									"id": 2046,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "owner",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2039,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1077:2:6"
									},
									"returnParameters": {
										"id": 2042,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2041,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 2046,
												"src": "1109:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2040,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1109:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1108:9:6"
									},
									"scope": 2118,
									"src": "1063:87:6",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 2059,
										"nodeType": "Block",
										"src": "1264:99:6",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 2054,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 2050,
																	"name": "owner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2046,
																	"src": "1283:5:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																		"typeString": "function () view returns (address)"
																	}
																},
																"id": 2051,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1283:7:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 2052,
																	"name": "_msgSender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1404,
																	"src": "1294:10:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																		"typeString": "function () view returns (address)"
																	}
																},
																"id": 2053,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1294:12:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "1283:23:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572",
															"id": 2055,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1308:34:6",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe",
																"typeString": "literal_string \"Ownable: caller is not the owner\""
															},
															"value": "Ownable: caller is not the owner"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe",
																"typeString": "literal_string \"Ownable: caller is not the owner\""
															}
														],
														"id": 2049,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1275:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 2056,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1275:68:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2057,
												"nodeType": "ExpressionStatement",
												"src": "1275:68:6"
											},
											{
												"id": 2058,
												"nodeType": "PlaceholderStatement",
												"src": "1354:1:6"
											}
										]
									},
									"documentation": {
										"id": 2047,
										"nodeType": "StructuredDocumentation",
										"src": "1158:79:6",
										"text": " @dev Throws if called by any account other than the owner."
									},
									"id": 2060,
									"name": "onlyOwner",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 2048,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1261:2:6"
									},
									"src": "1243:120:6",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2073,
										"nodeType": "Block",
										"src": "1768:49:6",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 2069,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1806:1:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 2068,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "1798:7:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 2067,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "1798:7:6",
																	"typeDescriptions": {}
																}
															},
															"id": 2070,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1798:10:6",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 2066,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2117,
														"src": "1779:18:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 2071,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1779:30:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2072,
												"nodeType": "ExpressionStatement",
												"src": "1779:30:6"
											}
										]
									},
									"documentation": {
										"id": 2061,
										"nodeType": "StructuredDocumentation",
										"src": "1371:337:6",
										"text": " @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions anymore. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby removing any functionality that is only available to the owner."
									},
									"functionSelector": "715018a6",
									"id": 2074,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 2064,
											"modifierName": {
												"id": 2063,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 2060,
												"src": "1758:9:6"
											},
											"nodeType": "ModifierInvocation",
											"src": "1758:9:6"
										}
									],
									"name": "renounceOwnership",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2062,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1740:2:6"
									},
									"returnParameters": {
										"id": 2065,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1768:0:6"
									},
									"scope": 2118,
									"src": "1714:103:6",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 2096,
										"nodeType": "Block",
										"src": "2042:131:6",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 2088,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2083,
																"name": "newOwner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2077,
																"src": "2061:8:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 2086,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2081:1:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 2085,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "2073:7:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 2084,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "2073:7:6",
																		"typeDescriptions": {}
																	}
																},
																"id": 2087,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2073:10:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "2061:22:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373",
															"id": 2089,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2085:40:6",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe",
																"typeString": "literal_string \"Ownable: new owner is the zero address\""
															},
															"value": "Ownable: new owner is the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe",
																"typeString": "literal_string \"Ownable: new owner is the zero address\""
															}
														],
														"id": 2082,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2053:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 2090,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2053:73:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2091,
												"nodeType": "ExpressionStatement",
												"src": "2053:73:6"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 2093,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2077,
															"src": "2156:8:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 2092,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2117,
														"src": "2137:18:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 2094,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2137:28:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2095,
												"nodeType": "ExpressionStatement",
												"src": "2137:28:6"
											}
										]
									},
									"documentation": {
										"id": 2075,
										"nodeType": "StructuredDocumentation",
										"src": "1825:141:6",
										"text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."
									},
									"functionSelector": "f2fde38b",
									"id": 2097,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 2080,
											"modifierName": {
												"id": 2079,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 2060,
												"src": "2032:9:6"
											},
											"nodeType": "ModifierInvocation",
											"src": "2032:9:6"
										}
									],
									"name": "transferOwnership",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2078,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2077,
												"mutability": "mutable",
												"name": "newOwner",
												"nodeType": "VariableDeclaration",
												"scope": 2097,
												"src": "1999:16:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2076,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1999:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1998:18:6"
									},
									"returnParameters": {
										"id": 2081,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2042:0:6"
									},
									"scope": 2118,
									"src": "1972:201:6",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 2116,
										"nodeType": "Block",
										"src": "2396:128:6",
										"statements": [
											{
												"assignments": [
													2104
												],
												"declarations": [
													{
														"constant": false,
														"id": 2104,
														"mutability": "mutable",
														"name": "oldOwner",
														"nodeType": "VariableDeclaration",
														"scope": 2116,
														"src": "2407:16:6",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 2103,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "2407:7:6",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2106,
												"initialValue": {
													"id": 2105,
													"name": "_owner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 2021,
													"src": "2426:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2407:25:6"
											},
											{
												"expression": {
													"id": 2109,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2107,
														"name": "_owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2021,
														"src": "2443:6:6",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 2108,
														"name": "newOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2100,
														"src": "2452:8:6",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "2443:17:6",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 2110,
												"nodeType": "ExpressionStatement",
												"src": "2443:17:6"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 2112,
															"name": "oldOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2104,
															"src": "2497:8:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2113,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2100,
															"src": "2507:8:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 2111,
														"name": "OwnershipTransferred",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2027,
														"src": "2476:20:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
															"typeString": "function (address,address)"
														}
													},
													"id": 2114,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2476:40:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2115,
												"nodeType": "EmitStatement",
												"src": "2471:45:6"
											}
										]
									},
									"documentation": {
										"id": 2098,
										"nodeType": "StructuredDocumentation",
										"src": "2181:146:6",
										"text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Internal function without access restriction."
									},
									"id": 2117,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_transferOwnership",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2101,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2100,
												"mutability": "mutable",
												"name": "newOwner",
												"nodeType": "VariableDeclaration",
												"scope": 2117,
												"src": "2361:16:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2099,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2361:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2360:18:6"
									},
									"returnParameters": {
										"id": 2102,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2396:0:6"
									},
									"scope": 2118,
									"src": "2333:191:6",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 2119,
							"src": "651:1876:6"
						}
					],
					"src": "90:2437:6"
				},
				"id": 6
			},
			"Utils/ReentrancyGuard.sol": {
				"ast": {
					"absolutePath": "Utils/ReentrancyGuard.sol",
					"exportedSymbols": {
						"ReentrancyGuard": [
							2158
						]
					},
					"id": 2159,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2120,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "100:23:7"
						},
						{
							"abstract": true,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 2121,
								"nodeType": "StructuredDocumentation",
								"src": "127:765:7",
								"text": " @dev Contract module that helps prevent reentrant calls to a function.\n Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n available, which can be applied to functions to make sure there are no nested\n (reentrant) calls to them.\n Note that because there is a single `nonReentrant` guard, functions marked as\n `nonReentrant` may not call one another. This can be worked around by making\n those functions `private`, and then adding `external` `nonReentrant` entry\n points to them.\n TIP: If you would like to learn more about reentrancy and alternative ways\n to protect against it, check out our blog post\n https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul]."
							},
							"fullyImplemented": true,
							"id": 2158,
							"linearizedBaseContracts": [
								2158
							],
							"name": "ReentrancyGuard",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": true,
									"id": 2124,
									"mutability": "constant",
									"name": "_NOT_ENTERED",
									"nodeType": "VariableDeclaration",
									"scope": 2158,
									"src": "1694:41:7",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 2122,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1694:7:7",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "31",
										"id": 2123,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "1734:1:7",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_1_by_1",
											"typeString": "int_const 1"
										},
										"value": "1"
									},
									"visibility": "private"
								},
								{
									"constant": true,
									"id": 2127,
									"mutability": "constant",
									"name": "_ENTERED",
									"nodeType": "VariableDeclaration",
									"scope": 2158,
									"src": "1742:37:7",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 2125,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1742:7:7",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "32",
										"id": 2126,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "1778:1:7",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_2_by_1",
											"typeString": "int_const 2"
										},
										"value": "2"
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 2129,
									"mutability": "mutable",
									"name": "_status",
									"nodeType": "VariableDeclaration",
									"scope": 2158,
									"src": "1788:23:7",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 2128,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1788:7:7",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 2136,
										"nodeType": "Block",
										"src": "1834:41:7",
										"statements": [
											{
												"expression": {
													"id": 2134,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2132,
														"name": "_status",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2129,
														"src": "1845:7:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 2133,
														"name": "_NOT_ENTERED",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2124,
														"src": "1855:12:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1845:22:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 2135,
												"nodeType": "ExpressionStatement",
												"src": "1845:22:7"
											}
										]
									},
									"id": 2137,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2130,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1831:2:7"
									},
									"returnParameters": {
										"id": 2131,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1834:0:7"
									},
									"scope": 2158,
									"src": "1820:55:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2156,
										"nodeType": "Block",
										"src": "2285:433:7",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2143,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2141,
																"name": "_status",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2129,
																"src": "2376:7:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"id": 2142,
																"name": "_ENTERED",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2127,
																"src": "2387:8:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2376:19:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "5265656e7472616e637947756172643a207265656e7472616e742063616c6c",
															"id": 2144,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2397:33:7",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619",
																"typeString": "literal_string \"ReentrancyGuard: reentrant call\""
															},
															"value": "ReentrancyGuard: reentrant call"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619",
																"typeString": "literal_string \"ReentrancyGuard: reentrant call\""
															}
														],
														"id": 2140,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2368:7:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 2145,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2368:63:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2146,
												"nodeType": "ExpressionStatement",
												"src": "2368:63:7"
											},
											{
												"expression": {
													"id": 2149,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2147,
														"name": "_status",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2129,
														"src": "2509:7:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 2148,
														"name": "_ENTERED",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2127,
														"src": "2519:8:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2509:18:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 2150,
												"nodeType": "ExpressionStatement",
												"src": "2509:18:7"
											},
											{
												"id": 2151,
												"nodeType": "PlaceholderStatement",
												"src": "2540:1:7"
											},
											{
												"expression": {
													"id": 2154,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2152,
														"name": "_status",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2129,
														"src": "2688:7:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 2153,
														"name": "_NOT_ENTERED",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2124,
														"src": "2698:12:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2688:22:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 2155,
												"nodeType": "ExpressionStatement",
												"src": "2688:22:7"
											}
										]
									},
									"documentation": {
										"id": 2138,
										"nodeType": "StructuredDocumentation",
										"src": "1883:372:7",
										"text": " @dev Prevents a contract from calling itself, directly or indirectly.\n Calling a `nonReentrant` function from another `nonReentrant`\n function is not supported. It is possible to prevent this from happening\n by making the `nonReentrant` function external, and making it call a\n `private` function that does the actual work."
									},
									"id": 2157,
									"name": "nonReentrant",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 2139,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2282:2:7"
									},
									"src": "2261:457:7",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 2159,
							"src": "894:1827:7"
						}
					],
					"src": "100:2621:7"
				},
				"id": 7
			},
			"Utils/SafeMath.sol": {
				"ast": {
					"absolutePath": "Utils/SafeMath.sol",
					"exportedSymbols": {
						"SafeMath": [
							2470
						]
					},
					"id": 2471,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2160,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "110:23:8"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 2161,
								"nodeType": "StructuredDocumentation",
								"src": "294:201:8",
								"text": " @dev Wrappers over Solidity's arithmetic operations.\n NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n now has built in overflow checking."
							},
							"fullyImplemented": true,
							"id": 2470,
							"linearizedBaseContracts": [
								2470
							],
							"name": "SafeMath",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 2192,
										"nodeType": "Block",
										"src": "738:146:8",
										"statements": [
											{
												"id": 2191,
												"nodeType": "UncheckedBlock",
												"src": "749:128:8",
												"statements": [
													{
														"assignments": [
															2174
														],
														"declarations": [
															{
																"constant": false,
																"id": 2174,
																"mutability": "mutable",
																"name": "c",
																"nodeType": "VariableDeclaration",
																"scope": 2191,
																"src": "774:9:8",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 2173,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "774:7:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2178,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2177,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2175,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2164,
																"src": "786:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"id": 2176,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2166,
																"src": "790:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "786:5:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "774:17:8"
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2181,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2179,
																"name": "c",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2174,
																"src": "810:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<",
															"rightExpression": {
																"id": 2180,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2164,
																"src": "814:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "810:5:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2186,
														"nodeType": "IfStatement",
														"src": "806:28:8",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "66616c7365",
																		"id": 2182,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "825:5:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "false"
																	},
																	{
																		"hexValue": "30",
																		"id": 2183,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "832:1:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 2184,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "824:10:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 2172,
															"id": 2185,
															"nodeType": "Return",
															"src": "817:17:8"
														}
													},
													{
														"expression": {
															"components": [
																{
																	"hexValue": "74727565",
																	"id": 2187,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "857:4:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																{
																	"id": 2188,
																	"name": "c",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2174,
																	"src": "863:1:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 2189,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "856:9:8",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
																"typeString": "tuple(bool,uint256)"
															}
														},
														"functionReturnParameters": 2172,
														"id": 2190,
														"nodeType": "Return",
														"src": "849:16:8"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2162,
										"nodeType": "StructuredDocumentation",
										"src": "521:135:8",
										"text": " @dev Returns the addition of two unsigned integers, with an overflow flag.\n _Available since v3.4._"
									},
									"id": 2193,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryAdd",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2167,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2164,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 2193,
												"src": "678:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2163,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "678:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2166,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 2193,
												"src": "689:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2165,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "689:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "677:22:8"
									},
									"returnParameters": {
										"id": 2172,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2169,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 2193,
												"src": "723:4:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2168,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "723:4:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2171,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 2193,
												"src": "729:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2170,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "729:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "722:15:8"
									},
									"scope": 2470,
									"src": "662:222:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2220,
										"nodeType": "Block",
										"src": "1112:118:8",
										"statements": [
											{
												"id": 2219,
												"nodeType": "UncheckedBlock",
												"src": "1123:100:8",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2207,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2205,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2198,
																"src": "1152:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"id": 2206,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2196,
																"src": "1156:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1152:5:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2212,
														"nodeType": "IfStatement",
														"src": "1148:28:8",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "66616c7365",
																		"id": 2208,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1167:5:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "false"
																	},
																	{
																		"hexValue": "30",
																		"id": 2209,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1174:1:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 2210,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1166:10:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 2204,
															"id": 2211,
															"nodeType": "Return",
															"src": "1159:17:8"
														}
													},
													{
														"expression": {
															"components": [
																{
																	"hexValue": "74727565",
																	"id": 2213,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1199:4:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2216,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2214,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2196,
																		"src": "1205:1:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "-",
																	"rightExpression": {
																		"id": 2215,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2198,
																		"src": "1209:1:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "1205:5:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 2217,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "1198:13:8",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
																"typeString": "tuple(bool,uint256)"
															}
														},
														"functionReturnParameters": 2204,
														"id": 2218,
														"nodeType": "Return",
														"src": "1191:20:8"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2194,
										"nodeType": "StructuredDocumentation",
										"src": "892:138:8",
										"text": " @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n _Available since v3.4._"
									},
									"id": 2221,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "trySub",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2199,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2196,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 2221,
												"src": "1052:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2195,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1052:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2198,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 2221,
												"src": "1063:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2197,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1063:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1051:22:8"
									},
									"returnParameters": {
										"id": 2204,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2201,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 2221,
												"src": "1097:4:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2200,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1097:4:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2203,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 2221,
												"src": "1103:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2202,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1103:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1096:15:8"
									},
									"scope": 2470,
									"src": "1036:194:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2262,
										"nodeType": "Block",
										"src": "1461:427:8",
										"statements": [
											{
												"id": 2261,
												"nodeType": "UncheckedBlock",
												"src": "1472:409:8",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2235,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2233,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2224,
																"src": "1734:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "30",
																"id": 2234,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1739:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "1734:6:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2240,
														"nodeType": "IfStatement",
														"src": "1730:28:8",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "74727565",
																		"id": 2236,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1750:4:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "true"
																	},
																	{
																		"hexValue": "30",
																		"id": 2237,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1756:1:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 2238,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1749:9:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 2232,
															"id": 2239,
															"nodeType": "Return",
															"src": "1742:16:8"
														}
													},
													{
														"assignments": [
															2242
														],
														"declarations": [
															{
																"constant": false,
																"id": 2242,
																"mutability": "mutable",
																"name": "c",
																"nodeType": "VariableDeclaration",
																"scope": 2261,
																"src": "1773:9:8",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 2241,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "1773:7:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2246,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2245,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2243,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2224,
																"src": "1785:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "*",
															"rightExpression": {
																"id": 2244,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2226,
																"src": "1789:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1785:5:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "1773:17:8"
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2251,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2249,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2247,
																	"name": "c",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2242,
																	"src": "1809:1:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "/",
																"rightExpression": {
																	"id": 2248,
																	"name": "a",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2224,
																	"src": "1813:1:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "1809:5:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"id": 2250,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2226,
																"src": "1818:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1809:10:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2256,
														"nodeType": "IfStatement",
														"src": "1805:33:8",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "66616c7365",
																		"id": 2252,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1829:5:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "false"
																	},
																	{
																		"hexValue": "30",
																		"id": 2253,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1836:1:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 2254,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1828:10:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 2232,
															"id": 2255,
															"nodeType": "Return",
															"src": "1821:17:8"
														}
													},
													{
														"expression": {
															"components": [
																{
																	"hexValue": "74727565",
																	"id": 2257,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1861:4:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																{
																	"id": 2258,
																	"name": "c",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2242,
																	"src": "1867:1:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 2259,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "1860:9:8",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
																"typeString": "tuple(bool,uint256)"
															}
														},
														"functionReturnParameters": 2232,
														"id": 2260,
														"nodeType": "Return",
														"src": "1853:16:8"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2222,
										"nodeType": "StructuredDocumentation",
										"src": "1238:141:8",
										"text": " @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n _Available since v3.4._"
									},
									"id": 2263,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryMul",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2227,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2224,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 2263,
												"src": "1401:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2223,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1401:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2226,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 2263,
												"src": "1412:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2225,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1412:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1400:22:8"
									},
									"returnParameters": {
										"id": 2232,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2229,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 2263,
												"src": "1446:4:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2228,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1446:4:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2231,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 2263,
												"src": "1452:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2230,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1452:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1445:15:8"
									},
									"scope": 2470,
									"src": "1385:503:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2290,
										"nodeType": "Block",
										"src": "2120:119:8",
										"statements": [
											{
												"id": 2289,
												"nodeType": "UncheckedBlock",
												"src": "2131:101:8",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2277,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2275,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2268,
																"src": "2160:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "30",
																"id": 2276,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2165:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "2160:6:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2282,
														"nodeType": "IfStatement",
														"src": "2156:29:8",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "66616c7365",
																		"id": 2278,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2176:5:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "false"
																	},
																	{
																		"hexValue": "30",
																		"id": 2279,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2183:1:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 2280,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2175:10:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 2274,
															"id": 2281,
															"nodeType": "Return",
															"src": "2168:17:8"
														}
													},
													{
														"expression": {
															"components": [
																{
																	"hexValue": "74727565",
																	"id": 2283,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2208:4:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2286,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2284,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2266,
																		"src": "2214:1:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "/",
																	"rightExpression": {
																		"id": 2285,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2268,
																		"src": "2218:1:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "2214:5:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 2287,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "2207:13:8",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
																"typeString": "tuple(bool,uint256)"
															}
														},
														"functionReturnParameters": 2274,
														"id": 2288,
														"nodeType": "Return",
														"src": "2200:20:8"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2264,
										"nodeType": "StructuredDocumentation",
										"src": "1896:142:8",
										"text": " @dev Returns the division of two unsigned integers, with a division by zero flag.\n _Available since v3.4._"
									},
									"id": 2291,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryDiv",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2269,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2266,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 2291,
												"src": "2060:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2265,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2060:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2268,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 2291,
												"src": "2071:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2267,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2071:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2059:22:8"
									},
									"returnParameters": {
										"id": 2274,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2271,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 2291,
												"src": "2105:4:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2270,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2105:4:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2273,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 2291,
												"src": "2111:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2272,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2111:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2104:15:8"
									},
									"scope": 2470,
									"src": "2044:195:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2318,
										"nodeType": "Block",
										"src": "2481:119:8",
										"statements": [
											{
												"id": 2317,
												"nodeType": "UncheckedBlock",
												"src": "2492:101:8",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2305,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2303,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2296,
																"src": "2521:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "30",
																"id": 2304,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2526:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "2521:6:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2310,
														"nodeType": "IfStatement",
														"src": "2517:29:8",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "66616c7365",
																		"id": 2306,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2537:5:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "false"
																	},
																	{
																		"hexValue": "30",
																		"id": 2307,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2544:1:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 2308,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2536:10:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 2302,
															"id": 2309,
															"nodeType": "Return",
															"src": "2529:17:8"
														}
													},
													{
														"expression": {
															"components": [
																{
																	"hexValue": "74727565",
																	"id": 2311,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2569:4:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2314,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2312,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2294,
																		"src": "2575:1:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "%",
																	"rightExpression": {
																		"id": 2313,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2296,
																		"src": "2579:1:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "2575:5:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 2315,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "2568:13:8",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
																"typeString": "tuple(bool,uint256)"
															}
														},
														"functionReturnParameters": 2302,
														"id": 2316,
														"nodeType": "Return",
														"src": "2561:20:8"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2292,
										"nodeType": "StructuredDocumentation",
										"src": "2247:152:8",
										"text": " @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n _Available since v3.4._"
									},
									"id": 2319,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryMod",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2297,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2294,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 2319,
												"src": "2421:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2293,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2421:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2296,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 2319,
												"src": "2432:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2295,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2432:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2420:22:8"
									},
									"returnParameters": {
										"id": 2302,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2299,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 2319,
												"src": "2466:4:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2298,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2466:4:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2301,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 2319,
												"src": "2472:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2300,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2472:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2465:15:8"
									},
									"scope": 2470,
									"src": "2405:195:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2333,
										"nodeType": "Block",
										"src": "2914:31:8",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2331,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2329,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2322,
														"src": "2932:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"id": 2330,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2324,
														"src": "2936:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2932:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2328,
												"id": 2332,
												"nodeType": "Return",
												"src": "2925:12:8"
											}
										]
									},
									"documentation": {
										"id": 2320,
										"nodeType": "StructuredDocumentation",
										"src": "2608:233:8",
										"text": " @dev Returns the addition of two unsigned integers, reverting on\n overflow.\n Counterpart to Solidity's `+` operator.\n Requirements:\n - Addition cannot overflow."
									},
									"id": 2334,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "add",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2325,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2322,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 2334,
												"src": "2860:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2321,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2860:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2324,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 2334,
												"src": "2871:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2323,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2871:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2859:22:8"
									},
									"returnParameters": {
										"id": 2328,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2327,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 2334,
												"src": "2905:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2326,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2905:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2904:9:8"
									},
									"scope": 2470,
									"src": "2847:98:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2348,
										"nodeType": "Block",
										"src": "3295:31:8",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2346,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2344,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2337,
														"src": "3313:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "-",
													"rightExpression": {
														"id": 2345,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2339,
														"src": "3317:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3313:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2343,
												"id": 2347,
												"nodeType": "Return",
												"src": "3306:12:8"
											}
										]
									},
									"documentation": {
										"id": 2335,
										"nodeType": "StructuredDocumentation",
										"src": "2953:269:8",
										"text": " @dev Returns the subtraction of two unsigned integers, reverting on\n overflow (when the result is negative).\n Counterpart to Solidity's `-` operator.\n Requirements:\n - Subtraction cannot overflow."
									},
									"id": 2349,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sub",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2340,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2337,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 2349,
												"src": "3241:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2336,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3241:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2339,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 2349,
												"src": "3252:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2338,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3252:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3240:22:8"
									},
									"returnParameters": {
										"id": 2343,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2342,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 2349,
												"src": "3286:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2341,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3286:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3285:9:8"
									},
									"scope": 2470,
									"src": "3228:98:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2363,
										"nodeType": "Block",
										"src": "3652:31:8",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2361,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2359,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2352,
														"src": "3670:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "*",
													"rightExpression": {
														"id": 2360,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2354,
														"src": "3674:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3670:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2358,
												"id": 2362,
												"nodeType": "Return",
												"src": "3663:12:8"
											}
										]
									},
									"documentation": {
										"id": 2350,
										"nodeType": "StructuredDocumentation",
										"src": "3334:245:8",
										"text": " @dev Returns the multiplication of two unsigned integers, reverting on\n overflow.\n Counterpart to Solidity's `*` operator.\n Requirements:\n - Multiplication cannot overflow."
									},
									"id": 2364,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mul",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2355,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2352,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 2364,
												"src": "3598:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2351,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3598:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2354,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 2364,
												"src": "3609:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2353,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3609:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3597:22:8"
									},
									"returnParameters": {
										"id": 2358,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2357,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 2364,
												"src": "3643:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2356,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3643:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3642:9:8"
									},
									"scope": 2470,
									"src": "3585:98:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2378,
										"nodeType": "Block",
										"src": "4051:31:8",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2376,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2374,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2367,
														"src": "4069:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "/",
													"rightExpression": {
														"id": 2375,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2369,
														"src": "4073:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "4069:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2373,
												"id": 2377,
												"nodeType": "Return",
												"src": "4062:12:8"
											}
										]
									},
									"documentation": {
										"id": 2365,
										"nodeType": "StructuredDocumentation",
										"src": "3691:287:8",
										"text": " @dev Returns the integer division of two unsigned integers, reverting on\n division by zero. The result is rounded towards zero.\n Counterpart to Solidity's `/` operator.\n Requirements:\n - The divisor cannot be zero."
									},
									"id": 2379,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "div",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2370,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2367,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 2379,
												"src": "3997:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2366,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3997:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2369,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 2379,
												"src": "4008:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2368,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4008:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3996:22:8"
									},
									"returnParameters": {
										"id": 2373,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2372,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 2379,
												"src": "4042:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2371,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4042:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4041:9:8"
									},
									"scope": 2470,
									"src": "3984:98:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2393,
										"nodeType": "Block",
										"src": "4616:31:8",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2391,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2389,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2382,
														"src": "4634:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "%",
													"rightExpression": {
														"id": 2390,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2384,
														"src": "4638:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "4634:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2388,
												"id": 2392,
												"nodeType": "Return",
												"src": "4627:12:8"
											}
										]
									},
									"documentation": {
										"id": 2380,
										"nodeType": "StructuredDocumentation",
										"src": "4090:453:8",
										"text": " @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n reverting when dividing by zero.\n Counterpart to Solidity's `%` operator. This function uses a `revert`\n opcode (which leaves remaining gas untouched) while Solidity uses an\n invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."
									},
									"id": 2394,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mod",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2385,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2382,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 2394,
												"src": "4562:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2381,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4562:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2384,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 2394,
												"src": "4573:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2383,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4573:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4561:22:8"
									},
									"returnParameters": {
										"id": 2388,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2387,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 2394,
												"src": "4607:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2386,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4607:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4606:9:8"
									},
									"scope": 2470,
									"src": "4549:98:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2418,
										"nodeType": "Block",
										"src": "5255:111:8",
										"statements": [
											{
												"id": 2417,
												"nodeType": "UncheckedBlock",
												"src": "5266:93:8",
												"statements": [
													{
														"expression": {
															"arguments": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2409,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2407,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2399,
																		"src": "5299:1:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "<=",
																	"rightExpression": {
																		"id": 2408,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2397,
																		"src": "5304:1:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "5299:6:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																{
																	"id": 2410,
																	"name": "errorMessage",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2401,
																	"src": "5307:12:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	{
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																],
																"id": 2406,
																"name": "require",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	4294967278,
																	4294967278
																],
																"referencedDeclaration": 4294967278,
																"src": "5291:7:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																	"typeString": "function (bool,string memory) pure"
																}
															},
															"id": 2411,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5291:29:8",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$__$",
																"typeString": "tuple()"
															}
														},
														"id": 2412,
														"nodeType": "ExpressionStatement",
														"src": "5291:29:8"
													},
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2415,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2413,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2397,
																"src": "5342:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "-",
															"rightExpression": {
																"id": 2414,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2399,
																"src": "5346:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5342:5:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 2405,
														"id": 2416,
														"nodeType": "Return",
														"src": "5335:12:8"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2395,
										"nodeType": "StructuredDocumentation",
										"src": "4655:465:8",
										"text": " @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n overflow (when the result is negative).\n CAUTION: This function is deprecated because it requires allocating memory for the error\n message unnecessarily. For custom revert reasons use {trySub}.\n Counterpart to Solidity's `-` operator.\n Requirements:\n - Subtraction cannot overflow."
									},
									"id": 2419,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sub",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2402,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2397,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 2419,
												"src": "5149:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2396,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5149:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2399,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 2419,
												"src": "5169:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2398,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5169:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2401,
												"mutability": "mutable",
												"name": "errorMessage",
												"nodeType": "VariableDeclaration",
												"scope": 2419,
												"src": "5189:26:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 2400,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "5189:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5138:84:8"
									},
									"returnParameters": {
										"id": 2405,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2404,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 2419,
												"src": "5246:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2403,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5246:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5245:9:8"
									},
									"scope": 2470,
									"src": "5126:240:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2443,
										"nodeType": "Block",
										"src": "5993:110:8",
										"statements": [
											{
												"id": 2442,
												"nodeType": "UncheckedBlock",
												"src": "6004:92:8",
												"statements": [
													{
														"expression": {
															"arguments": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2434,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2432,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2424,
																		"src": "6037:1:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": ">",
																	"rightExpression": {
																		"hexValue": "30",
																		"id": 2433,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "6041:1:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	},
																	"src": "6037:5:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																{
																	"id": 2435,
																	"name": "errorMessage",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2426,
																	"src": "6044:12:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	{
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																],
																"id": 2431,
																"name": "require",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	4294967278,
																	4294967278
																],
																"referencedDeclaration": 4294967278,
																"src": "6029:7:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																	"typeString": "function (bool,string memory) pure"
																}
															},
															"id": 2436,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "6029:28:8",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$__$",
																"typeString": "tuple()"
															}
														},
														"id": 2437,
														"nodeType": "ExpressionStatement",
														"src": "6029:28:8"
													},
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2440,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2438,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2422,
																"src": "6079:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "/",
															"rightExpression": {
																"id": 2439,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2424,
																"src": "6083:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "6079:5:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 2430,
														"id": 2441,
														"nodeType": "Return",
														"src": "6072:12:8"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2420,
										"nodeType": "StructuredDocumentation",
										"src": "5374:484:8",
										"text": " @dev Returns the integer division of two unsigned integers, reverting with custom message on\n division by zero. The result is rounded towards zero.\n Counterpart to Solidity's `/` operator. Note: this function uses a\n `revert` opcode (which leaves remaining gas untouched) while Solidity\n uses an invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."
									},
									"id": 2444,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "div",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2427,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2422,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 2444,
												"src": "5887:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2421,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5887:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2424,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 2444,
												"src": "5907:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2423,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5907:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2426,
												"mutability": "mutable",
												"name": "errorMessage",
												"nodeType": "VariableDeclaration",
												"scope": 2444,
												"src": "5927:26:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 2425,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "5927:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5876:84:8"
									},
									"returnParameters": {
										"id": 2430,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2429,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 2444,
												"src": "5984:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2428,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5984:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5983:9:8"
									},
									"scope": 2470,
									"src": "5864:239:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2468,
										"nodeType": "Block",
										"src": "6895:110:8",
										"statements": [
											{
												"id": 2467,
												"nodeType": "UncheckedBlock",
												"src": "6906:92:8",
												"statements": [
													{
														"expression": {
															"arguments": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2459,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2457,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2449,
																		"src": "6939:1:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": ">",
																	"rightExpression": {
																		"hexValue": "30",
																		"id": 2458,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "6943:1:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	},
																	"src": "6939:5:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																{
																	"id": 2460,
																	"name": "errorMessage",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2451,
																	"src": "6946:12:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	{
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																],
																"id": 2456,
																"name": "require",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	4294967278,
																	4294967278
																],
																"referencedDeclaration": 4294967278,
																"src": "6931:7:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																	"typeString": "function (bool,string memory) pure"
																}
															},
															"id": 2461,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "6931:28:8",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$__$",
																"typeString": "tuple()"
															}
														},
														"id": 2462,
														"nodeType": "ExpressionStatement",
														"src": "6931:28:8"
													},
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2465,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2463,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2447,
																"src": "6981:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "%",
															"rightExpression": {
																"id": 2464,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2449,
																"src": "6985:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "6981:5:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 2455,
														"id": 2466,
														"nodeType": "Return",
														"src": "6974:12:8"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2445,
										"nodeType": "StructuredDocumentation",
										"src": "6111:649:8",
										"text": " @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n reverting with custom message when dividing by zero.\n CAUTION: This function is deprecated because it requires allocating memory for the error\n message unnecessarily. For custom revert reasons use {tryMod}.\n Counterpart to Solidity's `%` operator. This function uses a `revert`\n opcode (which leaves remaining gas untouched) while Solidity uses an\n invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."
									},
									"id": 2469,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mod",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2452,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2447,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 2469,
												"src": "6789:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2446,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6789:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2449,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 2469,
												"src": "6809:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2448,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6809:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2451,
												"mutability": "mutable",
												"name": "errorMessage",
												"nodeType": "VariableDeclaration",
												"scope": 2469,
												"src": "6829:26:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 2450,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "6829:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6778:84:8"
									},
									"returnParameters": {
										"id": 2455,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2454,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 2469,
												"src": "6886:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2453,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6886:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6885:9:8"
									},
									"scope": 2470,
									"src": "6766:239:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 2471,
							"src": "497:6511:8"
						}
					],
					"src": "110:6898:8"
				},
				"id": 8
			},
			"Utils/TransferHelper.sol": {
				"ast": {
					"absolutePath": "Utils/TransferHelper.sol",
					"exportedSymbols": {
						"TransferHelper": [
							2662
						]
					},
					"id": 2663,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2472,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "35:23:9"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 2473,
								"nodeType": "StructuredDocumentation",
								"src": "62:180:9",
								"text": "helper methods for interacting with ERC20 tokens that do not consistently return true/false\nwith the addition of a transfer function to send eth or an erc20 token"
							},
							"fullyImplemented": true,
							"id": 2662,
							"linearizedBaseContracts": [
								2662
							],
							"name": "TransferHelper",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 2515,
										"nodeType": "Block",
										"src": "380:284:9",
										"statements": [
											{
												"assignments": [
													2483,
													2485
												],
												"declarations": [
													{
														"constant": false,
														"id": 2483,
														"mutability": "mutable",
														"name": "success",
														"nodeType": "VariableDeclaration",
														"scope": 2515,
														"src": "392:12:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 2482,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "392:4:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 2485,
														"mutability": "mutable",
														"name": "data",
														"nodeType": "VariableDeclaration",
														"scope": 2515,
														"src": "406:17:9",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 2484,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "406:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2495,
												"initialValue": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30783039356561376233",
																	"id": 2490,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "475:10:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_157198259_by_1",
																		"typeString": "int_const 157198259"
																	},
																	"value": "0x095ea7b3"
																},
																{
																	"id": 2491,
																	"name": "to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2477,
																	"src": "487:2:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 2492,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2479,
																	"src": "491:5:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_157198259_by_1",
																		"typeString": "int_const 157198259"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 2488,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "452:3:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 2489,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"src": "452:22:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 2493,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "452:45:9",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"id": 2486,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2475,
															"src": "427:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 2487,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "call",
														"nodeType": "MemberAccess",
														"src": "427:10:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 2494,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "427:81:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "391:117:9"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 2511,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2497,
																"name": "success",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2483,
																"src": "541:7:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "&&",
															"rightExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"id": 2509,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 2501,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"expression": {
																					"id": 2498,
																					"name": "data",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2485,
																					"src": "553:4:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bytes_memory_ptr",
																						"typeString": "bytes memory"
																					}
																				},
																				"id": 2499,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "length",
																				"nodeType": "MemberAccess",
																				"src": "553:11:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "==",
																			"rightExpression": {
																				"hexValue": "30",
																				"id": 2500,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "568:1:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			},
																			"src": "553:16:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "||",
																		"rightExpression": {
																			"arguments": [
																				{
																					"id": 2504,
																					"name": "data",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2485,
																					"src": "584:4:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bytes_memory_ptr",
																						"typeString": "bytes memory"
																					}
																				},
																				{
																					"components": [
																						{
																							"id": 2506,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"lValueRequested": false,
																							"nodeType": "ElementaryTypeNameExpression",
																							"src": "591:4:9",
																							"typeDescriptions": {
																								"typeIdentifier": "t_type$_t_bool_$",
																								"typeString": "type(bool)"
																							},
																							"typeName": {
																								"id": 2505,
																								"name": "bool",
																								"nodeType": "ElementaryTypeName",
																								"src": "591:4:9",
																								"typeDescriptions": {}
																							}
																						}
																					],
																					"id": 2507,
																					"isConstant": false,
																					"isInlineArray": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"nodeType": "TupleExpression",
																					"src": "590:6:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_bool_$",
																						"typeString": "type(bool)"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_bytes_memory_ptr",
																						"typeString": "bytes memory"
																					},
																					{
																						"typeIdentifier": "t_type$_t_bool_$",
																						"typeString": "type(bool)"
																					}
																				],
																				"expression": {
																					"id": 2502,
																					"name": "abi",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 4294967295,
																					"src": "573:3:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_magic_abi",
																						"typeString": "abi"
																					}
																				},
																				"id": 2503,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"memberName": "decode",
																				"nodeType": "MemberAccess",
																				"src": "573:10:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_abidecode_pure$__$returns$__$",
																					"typeString": "function () pure"
																				}
																			},
																			"id": 2508,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "573:24:9",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"src": "553:44:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	}
																],
																"id": 2510,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "552:46:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "541:57:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "5472616e7366657248656c7065723a20415050524f56455f4641494c4544",
															"id": 2512,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "613:32:9",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_3e27be550bb5367a6d8a8b2dd8b5c52ee0710d2d5b26de50062207957ab5bd00",
																"typeString": "literal_string \"TransferHelper: APPROVE_FAILED\""
															},
															"value": "TransferHelper: APPROVE_FAILED"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_3e27be550bb5367a6d8a8b2dd8b5c52ee0710d2d5b26de50062207957ab5bd00",
																"typeString": "literal_string \"TransferHelper: APPROVE_FAILED\""
															}
														],
														"id": 2496,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "519:7:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 2513,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "519:137:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2514,
												"nodeType": "ExpressionStatement",
												"src": "519:137:9"
											}
										]
									},
									"id": 2516,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeApprove",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2480,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2475,
												"mutability": "mutable",
												"name": "token",
												"nodeType": "VariableDeclaration",
												"scope": 2516,
												"src": "305:13:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2474,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "305:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2477,
												"mutability": "mutable",
												"name": "to",
												"nodeType": "VariableDeclaration",
												"scope": 2516,
												"src": "329:10:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2476,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "329:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2479,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 2516,
												"src": "350:13:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2478,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "350:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "294:76:9"
									},
									"returnParameters": {
										"id": 2481,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "380:0:9"
									},
									"scope": 2662,
									"src": "274:390:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2558,
										"nodeType": "Block",
										"src": "780:285:9",
										"statements": [
											{
												"assignments": [
													2526,
													2528
												],
												"declarations": [
													{
														"constant": false,
														"id": 2526,
														"mutability": "mutable",
														"name": "success",
														"nodeType": "VariableDeclaration",
														"scope": 2558,
														"src": "792:12:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 2525,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "792:4:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 2528,
														"mutability": "mutable",
														"name": "data",
														"nodeType": "VariableDeclaration",
														"scope": 2558,
														"src": "806:17:9",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 2527,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "806:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2538,
												"initialValue": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30786139303539636262",
																	"id": 2533,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "875:10:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2835717307_by_1",
																		"typeString": "int_const 2835717307"
																	},
																	"value": "0xa9059cbb"
																},
																{
																	"id": 2534,
																	"name": "to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2520,
																	"src": "887:2:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 2535,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2522,
																	"src": "891:5:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_2835717307_by_1",
																		"typeString": "int_const 2835717307"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 2531,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "852:3:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 2532,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"src": "852:22:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 2536,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "852:45:9",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"id": 2529,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2518,
															"src": "827:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 2530,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "call",
														"nodeType": "MemberAccess",
														"src": "827:10:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 2537,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "827:81:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "791:117:9"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 2554,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2540,
																"name": "success",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2526,
																"src": "941:7:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "&&",
															"rightExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"id": 2552,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 2544,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"expression": {
																					"id": 2541,
																					"name": "data",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2528,
																					"src": "953:4:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bytes_memory_ptr",
																						"typeString": "bytes memory"
																					}
																				},
																				"id": 2542,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "length",
																				"nodeType": "MemberAccess",
																				"src": "953:11:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "==",
																			"rightExpression": {
																				"hexValue": "30",
																				"id": 2543,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "968:1:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			},
																			"src": "953:16:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "||",
																		"rightExpression": {
																			"arguments": [
																				{
																					"id": 2547,
																					"name": "data",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2528,
																					"src": "984:4:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bytes_memory_ptr",
																						"typeString": "bytes memory"
																					}
																				},
																				{
																					"components": [
																						{
																							"id": 2549,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"lValueRequested": false,
																							"nodeType": "ElementaryTypeNameExpression",
																							"src": "991:4:9",
																							"typeDescriptions": {
																								"typeIdentifier": "t_type$_t_bool_$",
																								"typeString": "type(bool)"
																							},
																							"typeName": {
																								"id": 2548,
																								"name": "bool",
																								"nodeType": "ElementaryTypeName",
																								"src": "991:4:9",
																								"typeDescriptions": {}
																							}
																						}
																					],
																					"id": 2550,
																					"isConstant": false,
																					"isInlineArray": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"nodeType": "TupleExpression",
																					"src": "990:6:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_bool_$",
																						"typeString": "type(bool)"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_bytes_memory_ptr",
																						"typeString": "bytes memory"
																					},
																					{
																						"typeIdentifier": "t_type$_t_bool_$",
																						"typeString": "type(bool)"
																					}
																				],
																				"expression": {
																					"id": 2545,
																					"name": "abi",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 4294967295,
																					"src": "973:3:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_magic_abi",
																						"typeString": "abi"
																					}
																				},
																				"id": 2546,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"memberName": "decode",
																				"nodeType": "MemberAccess",
																				"src": "973:10:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_abidecode_pure$__$returns$__$",
																					"typeString": "function () pure"
																				}
																			},
																			"id": 2551,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "973:24:9",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"src": "953:44:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	}
																],
																"id": 2553,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "952:46:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "941:57:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "5472616e7366657248656c7065723a205452414e534645525f4641494c4544",
															"id": 2555,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1013:33:9",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_05d7eee434319ef96b9de8eaf182057f1e6a6441451c0ddc676469e4b256f426",
																"typeString": "literal_string \"TransferHelper: TRANSFER_FAILED\""
															},
															"value": "TransferHelper: TRANSFER_FAILED"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_05d7eee434319ef96b9de8eaf182057f1e6a6441451c0ddc676469e4b256f426",
																"typeString": "literal_string \"TransferHelper: TRANSFER_FAILED\""
															}
														],
														"id": 2539,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "919:7:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 2556,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "919:138:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2557,
												"nodeType": "ExpressionStatement",
												"src": "919:138:9"
											}
										]
									},
									"id": 2559,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransfer",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2523,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2518,
												"mutability": "mutable",
												"name": "token",
												"nodeType": "VariableDeclaration",
												"scope": 2559,
												"src": "705:13:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2517,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "705:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2520,
												"mutability": "mutable",
												"name": "to",
												"nodeType": "VariableDeclaration",
												"scope": 2559,
												"src": "729:10:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2519,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "729:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2522,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 2559,
												"src": "750:13:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2521,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "750:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "694:76:9"
									},
									"returnParameters": {
										"id": 2524,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "780:0:9"
									},
									"scope": 2662,
									"src": "673:392:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2604,
										"nodeType": "Block",
										"src": "1207:296:9",
										"statements": [
											{
												"assignments": [
													2571,
													2573
												],
												"declarations": [
													{
														"constant": false,
														"id": 2571,
														"mutability": "mutable",
														"name": "success",
														"nodeType": "VariableDeclaration",
														"scope": 2604,
														"src": "1219:12:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 2570,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "1219:4:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 2573,
														"mutability": "mutable",
														"name": "data",
														"nodeType": "VariableDeclaration",
														"scope": 2604,
														"src": "1233:17:9",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 2572,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "1233:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2584,
												"initialValue": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30783233623837326464",
																	"id": 2578,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1302:10:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_599290589_by_1",
																		"typeString": "int_const 599290589"
																	},
																	"value": "0x23b872dd"
																},
																{
																	"id": 2579,
																	"name": "from",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2563,
																	"src": "1314:4:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 2580,
																	"name": "to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2565,
																	"src": "1320:2:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 2581,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2567,
																	"src": "1324:5:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_599290589_by_1",
																		"typeString": "int_const 599290589"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 2576,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "1279:3:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 2577,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"src": "1279:22:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 2582,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1279:51:9",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"id": 2574,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2561,
															"src": "1254:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 2575,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "call",
														"nodeType": "MemberAccess",
														"src": "1254:10:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 2583,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1254:87:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1218:123:9"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 2600,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2586,
																"name": "success",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2571,
																"src": "1374:7:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "&&",
															"rightExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"id": 2598,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 2590,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"expression": {
																					"id": 2587,
																					"name": "data",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2573,
																					"src": "1386:4:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bytes_memory_ptr",
																						"typeString": "bytes memory"
																					}
																				},
																				"id": 2588,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "length",
																				"nodeType": "MemberAccess",
																				"src": "1386:11:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "==",
																			"rightExpression": {
																				"hexValue": "30",
																				"id": 2589,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "1401:1:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			},
																			"src": "1386:16:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "||",
																		"rightExpression": {
																			"arguments": [
																				{
																					"id": 2593,
																					"name": "data",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2573,
																					"src": "1417:4:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bytes_memory_ptr",
																						"typeString": "bytes memory"
																					}
																				},
																				{
																					"components": [
																						{
																							"id": 2595,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"lValueRequested": false,
																							"nodeType": "ElementaryTypeNameExpression",
																							"src": "1424:4:9",
																							"typeDescriptions": {
																								"typeIdentifier": "t_type$_t_bool_$",
																								"typeString": "type(bool)"
																							},
																							"typeName": {
																								"id": 2594,
																								"name": "bool",
																								"nodeType": "ElementaryTypeName",
																								"src": "1424:4:9",
																								"typeDescriptions": {}
																							}
																						}
																					],
																					"id": 2596,
																					"isConstant": false,
																					"isInlineArray": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"nodeType": "TupleExpression",
																					"src": "1423:6:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_bool_$",
																						"typeString": "type(bool)"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_bytes_memory_ptr",
																						"typeString": "bytes memory"
																					},
																					{
																						"typeIdentifier": "t_type$_t_bool_$",
																						"typeString": "type(bool)"
																					}
																				],
																				"expression": {
																					"id": 2591,
																					"name": "abi",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 4294967295,
																					"src": "1406:3:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_magic_abi",
																						"typeString": "abi"
																					}
																				},
																				"id": 2592,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"memberName": "decode",
																				"nodeType": "MemberAccess",
																				"src": "1406:10:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_abidecode_pure$__$returns$__$",
																					"typeString": "function () pure"
																				}
																			},
																			"id": 2597,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "1406:24:9",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"src": "1386:44:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	}
																],
																"id": 2599,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1385:46:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "1374:57:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "5472616e7366657248656c7065723a205452414e534645525f46524f4d5f4641494c4544",
															"id": 2601,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1446:38:9",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_eb2904bf3c0c9ae693b53eb0188a703c388998a9c405b7965ca678cef9a51d18",
																"typeString": "literal_string \"TransferHelper: TRANSFER_FROM_FAILED\""
															},
															"value": "TransferHelper: TRANSFER_FROM_FAILED"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_eb2904bf3c0c9ae693b53eb0188a703c388998a9c405b7965ca678cef9a51d18",
																"typeString": "literal_string \"TransferHelper: TRANSFER_FROM_FAILED\""
															}
														],
														"id": 2585,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1352:7:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 2602,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1352:143:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2603,
												"nodeType": "ExpressionStatement",
												"src": "1352:143:9"
											}
										]
									},
									"id": 2605,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferFrom",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2568,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2561,
												"mutability": "mutable",
												"name": "token",
												"nodeType": "VariableDeclaration",
												"scope": 2605,
												"src": "1109:13:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2560,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1109:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2563,
												"mutability": "mutable",
												"name": "from",
												"nodeType": "VariableDeclaration",
												"scope": 2605,
												"src": "1133:12:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2562,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1133:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2565,
												"mutability": "mutable",
												"name": "to",
												"nodeType": "VariableDeclaration",
												"scope": 2605,
												"src": "1156:10:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2564,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1156:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2567,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 2605,
												"src": "1177:13:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2566,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1177:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1098:99:9"
									},
									"returnParameters": {
										"id": 2569,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1207:0:9"
									},
									"scope": 2662,
									"src": "1073:430:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2660,
										"nodeType": "Block",
										"src": "1694:400:9",
										"statements": [
											{
												"condition": {
													"id": 2617,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "!",
													"prefix": true,
													"src": "1709:8:9",
													"subExpression": {
														"id": 2616,
														"name": "isERC20",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2613,
														"src": "1710:7:9",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 2658,
													"nodeType": "Block",
													"src": "1770:317:9",
													"statements": [
														{
															"assignments": [
																2626,
																2628
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 2626,
																	"mutability": "mutable",
																	"name": "success",
																	"nodeType": "VariableDeclaration",
																	"scope": 2658,
																	"src": "1786:12:9",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"typeName": {
																		"id": 2625,
																		"name": "bool",
																		"nodeType": "ElementaryTypeName",
																		"src": "1786:4:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"visibility": "internal"
																},
																{
																	"constant": false,
																	"id": 2628,
																	"mutability": "mutable",
																	"name": "data",
																	"nodeType": "VariableDeclaration",
																	"scope": 2658,
																	"src": "1800:17:9",
																	"stateVariable": false,
																	"storageLocation": "memory",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes"
																	},
																	"typeName": {
																		"id": 2627,
																		"name": "bytes",
																		"nodeType": "ElementaryTypeName",
																		"src": "1800:5:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_storage_ptr",
																			"typeString": "bytes"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 2638,
															"initialValue": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30786139303539636262",
																				"id": 2633,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "1873:10:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_2835717307_by_1",
																					"typeString": "int_const 2835717307"
																				},
																				"value": "0xa9059cbb"
																			},
																			{
																				"id": 2634,
																				"name": "to",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2609,
																				"src": "1885:2:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address_payable",
																					"typeString": "address payable"
																				}
																			},
																			{
																				"id": 2635,
																				"name": "value",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2611,
																				"src": "1889:5:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_2835717307_by_1",
																					"typeString": "int_const 2835717307"
																				},
																				{
																					"typeIdentifier": "t_address_payable",
																					"typeString": "address payable"
																				},
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			],
																			"expression": {
																				"id": 2631,
																				"name": "abi",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4294967295,
																				"src": "1850:3:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_magic_abi",
																					"typeString": "abi"
																				}
																			},
																			"id": 2632,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"memberName": "encodeWithSelector",
																			"nodeType": "MemberAccess",
																			"src": "1850:22:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																				"typeString": "function (bytes4) pure returns (bytes memory)"
																			}
																		},
																		"id": 2636,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "1850:45:9",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	],
																	"expression": {
																		"id": 2629,
																		"name": "token",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2607,
																		"src": "1821:5:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"id": 2630,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "call",
																	"nodeType": "MemberAccess",
																	"src": "1821:10:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																		"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
																	}
																},
																"id": 2637,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1821:89:9",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
																	"typeString": "tuple(bool,bytes memory)"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "1785:125:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"id": 2654,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 2640,
																			"name": "success",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2626,
																			"src": "1951:7:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "&&",
																		"rightExpression": {
																			"components": [
																				{
																					"commonType": {
																						"typeIdentifier": "t_bool",
																						"typeString": "bool"
																					},
																					"id": 2652,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"commonType": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						},
																						"id": 2644,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"leftExpression": {
																							"expression": {
																								"id": 2641,
																								"name": "data",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 2628,
																								"src": "1963:4:9",
																								"typeDescriptions": {
																									"typeIdentifier": "t_bytes_memory_ptr",
																									"typeString": "bytes memory"
																								}
																							},
																							"id": 2642,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": false,
																							"lValueRequested": false,
																							"memberName": "length",
																							"nodeType": "MemberAccess",
																							"src": "1963:11:9",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						},
																						"nodeType": "BinaryOperation",
																						"operator": "==",
																						"rightExpression": {
																							"hexValue": "30",
																							"id": 2643,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"kind": "number",
																							"lValueRequested": false,
																							"nodeType": "Literal",
																							"src": "1978:1:9",
																							"typeDescriptions": {
																								"typeIdentifier": "t_rational_0_by_1",
																								"typeString": "int_const 0"
																							},
																							"value": "0"
																						},
																						"src": "1963:16:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_bool",
																							"typeString": "bool"
																						}
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "||",
																					"rightExpression": {
																						"arguments": [
																							{
																								"id": 2647,
																								"name": "data",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 2628,
																								"src": "1994:4:9",
																								"typeDescriptions": {
																									"typeIdentifier": "t_bytes_memory_ptr",
																									"typeString": "bytes memory"
																								}
																							},
																							{
																								"components": [
																									{
																										"id": 2649,
																										"isConstant": false,
																										"isLValue": false,
																										"isPure": true,
																										"lValueRequested": false,
																										"nodeType": "ElementaryTypeNameExpression",
																										"src": "2001:4:9",
																										"typeDescriptions": {
																											"typeIdentifier": "t_type$_t_bool_$",
																											"typeString": "type(bool)"
																										},
																										"typeName": {
																											"id": 2648,
																											"name": "bool",
																											"nodeType": "ElementaryTypeName",
																											"src": "2001:4:9",
																											"typeDescriptions": {}
																										}
																									}
																								],
																								"id": 2650,
																								"isConstant": false,
																								"isInlineArray": false,
																								"isLValue": false,
																								"isPure": true,
																								"lValueRequested": false,
																								"nodeType": "TupleExpression",
																								"src": "2000:6:9",
																								"typeDescriptions": {
																									"typeIdentifier": "t_type$_t_bool_$",
																									"typeString": "type(bool)"
																								}
																							}
																						],
																						"expression": {
																							"argumentTypes": [
																								{
																									"typeIdentifier": "t_bytes_memory_ptr",
																									"typeString": "bytes memory"
																								},
																								{
																									"typeIdentifier": "t_type$_t_bool_$",
																									"typeString": "type(bool)"
																								}
																							],
																							"expression": {
																								"id": 2645,
																								"name": "abi",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 4294967295,
																								"src": "1983:3:9",
																								"typeDescriptions": {
																									"typeIdentifier": "t_magic_abi",
																									"typeString": "abi"
																								}
																							},
																							"id": 2646,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"lValueRequested": false,
																							"memberName": "decode",
																							"nodeType": "MemberAccess",
																							"src": "1983:10:9",
																							"typeDescriptions": {
																								"typeIdentifier": "t_function_abidecode_pure$__$returns$__$",
																								"typeString": "function () pure"
																							}
																						},
																						"id": 2651,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"kind": "functionCall",
																						"lValueRequested": false,
																						"names": [],
																						"nodeType": "FunctionCall",
																						"src": "1983:24:9",
																						"tryCall": false,
																						"typeDescriptions": {
																							"typeIdentifier": "t_bool",
																							"typeString": "bool"
																						}
																					},
																					"src": "1963:44:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bool",
																						"typeString": "bool"
																					}
																				}
																			],
																			"id": 2653,
																			"isConstant": false,
																			"isInlineArray": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "TupleExpression",
																			"src": "1962:46:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"src": "1951:57:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	{
																		"hexValue": "5472616e7366657248656c7065723a205452414e534645525f4641494c4544",
																		"id": 2655,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2027:33:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_05d7eee434319ef96b9de8eaf182057f1e6a6441451c0ddc676469e4b256f426",
																			"typeString": "literal_string \"TransferHelper: TRANSFER_FAILED\""
																		},
																		"value": "TransferHelper: TRANSFER_FAILED"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		{
																			"typeIdentifier": "t_stringliteral_05d7eee434319ef96b9de8eaf182057f1e6a6441451c0ddc676469e4b256f426",
																			"typeString": "literal_string \"TransferHelper: TRANSFER_FAILED\""
																		}
																	],
																	"id": 2639,
																	"name": "require",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967278,
																		4294967278
																	],
																	"referencedDeclaration": 4294967278,
																	"src": "1925:7:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bool,string memory) pure"
																	}
																},
																"id": 2656,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1925:150:9",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 2657,
															"nodeType": "ExpressionStatement",
															"src": "1925:150:9"
														}
													]
												},
												"id": 2659,
												"nodeType": "IfStatement",
												"src": "1705:382:9",
												"trueBody": {
													"id": 2624,
													"nodeType": "Block",
													"src": "1719:45:9",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 2621,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2611,
																		"src": "1746:5:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"id": 2618,
																		"name": "to",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2609,
																		"src": "1734:2:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address_payable",
																			"typeString": "address payable"
																		}
																	},
																	"id": 2620,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "transfer",
																	"nodeType": "MemberAccess",
																	"src": "1734:11:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_transfer_nonpayable$_t_uint256_$returns$__$",
																		"typeString": "function (uint256)"
																	}
																},
																"id": 2622,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1734:18:9",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 2623,
															"nodeType": "ExpressionStatement",
															"src": "1734:18:9"
														}
													]
												}
											}
										]
									},
									"id": 2661,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferBaseToken",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2614,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2607,
												"mutability": "mutable",
												"name": "token",
												"nodeType": "VariableDeclaration",
												"scope": 2661,
												"src": "1588:13:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2606,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1588:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2609,
												"mutability": "mutable",
												"name": "to",
												"nodeType": "VariableDeclaration",
												"scope": 2661,
												"src": "1612:18:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address_payable",
													"typeString": "address payable"
												},
												"typeName": {
													"id": 2608,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1612:15:9",
													"stateMutability": "payable",
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2611,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 2661,
												"src": "1641:13:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2610,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1641:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2613,
												"mutability": "mutable",
												"name": "isERC20",
												"nodeType": "VariableDeclaration",
												"scope": 2661,
												"src": "1665:12:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2612,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1665:4:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1577:107:9"
									},
									"returnParameters": {
										"id": 2615,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1694:0:9"
									},
									"scope": 2662,
									"src": "1547:547:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 2663,
							"src": "244:1853:9"
						}
					],
					"src": "35:2064:9"
				},
				"id": 9
			}
		}
	}
}