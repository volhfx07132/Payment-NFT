{
	"id": "efef8d40d4590a8f05a4983405094660",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.7",
	"solcLongVersion": "0.8.7+commit.e28d00a7",
	"input": {
		"language": "Solidity",
		"sources": {
			"ERC20/ERC20Upgradeable.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/ERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./IERC20Upgradeable.sol\";\r\nimport \"./IERC20MetadataUpgradeable.sol\";\r\nimport \"../../Utils/ContextUpgradeable.sol\";\r\nimport \"../../Utils/Initializable.sol\";\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\r\n * instead returning `false` on failure. This behavior is nonetheless\r\n * conventional and does not conflict with the expectations of ERC20\r\n * applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * The default value of {decimals} is 18. To select a different value for\r\n     * {decimals} you should overload it.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\r\n        __ERC20_init_unchained(name_, symbol_);\r\n    }\r\n\r\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n     * overridden;\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _transfer(owner, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\r\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * NOTE: Does not update the allowance if the current allowance\r\n     * is the maximum `uint256`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` and `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``from``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(owner, spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\r\n     *\r\n     * This internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, amount);\r\n\r\n        uint256 fromBalance = _balances[from];\r\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[from] = fromBalance - amount;\r\n        }\r\n        _balances[to] += amount;\r\n\r\n        emit Transfer(from, to, amount);\r\n\r\n        _afterTokenTransfer(from, to, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n        }\r\n        _totalSupply -= amount;\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\r\n     *\r\n     * Does not update the allowance amount in case of infinite allowance.\r\n     * Revert if not enough allowance is available.\r\n     *\r\n     * Might emit an {Approval} event.\r\n     */\r\n    function _spendAllowance(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * has been transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @dev This empty reserved space is put in place to allow future versions to add new\r\n     * variables without shifting down storage in the inheritance chain.\r\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\r\n     */\r\n    uint256[45] private __gap;\r\n}"
			},
			"Utils/Initializable.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\r\n\r\npragma solidity ^0.8.2;\r\n\r\nimport \"./AddressUpgradeable.sol\";\r\n\r\n/**\r\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\r\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\r\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\r\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\r\n *\r\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\r\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\r\n * case an upgrade adds a module that needs to be initialized.\r\n *\r\n * For example:\r\n *\r\n * [.hljs-theme-light.nopadding]\r\n * ```\r\n * contract MyToken is ERC20Upgradeable {\r\n *     function initialize() initializer public {\r\n *         __ERC20_init(\"MyToken\", \"MTK\");\r\n *     }\r\n * }\r\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\r\n *     function initializeV2() reinitializer(2) public {\r\n *         __ERC20Permit_init(\"MyToken\");\r\n *     }\r\n * }\r\n * ```\r\n *\r\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\r\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\r\n *\r\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\r\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\r\n *\r\n * [CAUTION]\r\n * ====\r\n * Avoid leaving a contract uninitialized.\r\n *\r\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\r\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\r\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\r\n *\r\n * [.hljs-theme-light.nopadding]\r\n * ```\r\n * /// @custom:oz-upgrades-unsafe-allow constructor\r\n * constructor() {\r\n *     _disableInitializers();\r\n * }\r\n * ```\r\n * ====\r\n */\r\nabstract contract Initializable {\r\n    /**\r\n     * @dev Indicates that the contract has been initialized.\r\n     * @custom:oz-retyped-from bool\r\n     */\r\n    uint8 private _initialized;\r\n\r\n    /**\r\n     * @dev Indicates that the contract is in the process of being initialized.\r\n     */\r\n    bool private _initializing;\r\n\r\n    /**\r\n     * @dev Triggered when the contract has been initialized or reinitialized.\r\n     */\r\n    event Initialized(uint8 version);\r\n\r\n    /**\r\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\r\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\r\n     */\r\n    modifier initializer() {\r\n        bool isTopLevelCall = _setInitializedVersion(1);\r\n        if (isTopLevelCall) {\r\n            _initializing = true;\r\n        }\r\n        _;\r\n        if (isTopLevelCall) {\r\n            _initializing = false;\r\n            emit Initialized(1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\r\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\r\n     * used to initialize parent contracts.\r\n     *\r\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\r\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\r\n     * initialization.\r\n     *\r\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\r\n     * a contract, executing them in the right order is up to the developer or operator.\r\n     */\r\n    modifier reinitializer(uint8 version) {\r\n        bool isTopLevelCall = _setInitializedVersion(version);\r\n        if (isTopLevelCall) {\r\n            _initializing = true;\r\n        }\r\n        _;\r\n        if (isTopLevelCall) {\r\n            _initializing = false;\r\n            emit Initialized(version);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\r\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\r\n     */\r\n    modifier onlyInitializing() {\r\n        require(_initializing, \"Initializable: contract is not initializing\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\r\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\r\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\r\n     * through proxies.\r\n     */\r\n    function _disableInitializers() internal virtual {\r\n        _setInitializedVersion(type(uint8).max);\r\n    }\r\n\r\n    function _setInitializedVersion(uint8 version) private returns (bool) {\r\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\r\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\r\n        // of initializers, because in other contexts the contract may have been reentered.\r\n        if (_initializing) {\r\n            require(\r\n                version == 1 && !AddressUpgradeable.isContract(address(this)),\r\n                \"Initializable: contract is already initialized\"\r\n            );\r\n            return false;\r\n        } else {\r\n            require(_initialized < version, \"Initializable: contract is already initialized\");\r\n            _initialized = version;\r\n            return true;\r\n        }\r\n    }\r\n}"
			},
			"Utils/ContextUpgradeable.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\nimport \"./Initializable.sol\";\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract ContextUpgradeable is Initializable {\r\n    function __Context_init() internal onlyInitializing {\r\n    }\r\n\r\n    function __Context_init_unchained() internal onlyInitializing {\r\n    }\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n\r\n    /**\r\n     * @dev This empty reserved space is put in place to allow future versions to add new\r\n     * variables without shifting down storage in the inheritance chain.\r\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\r\n     */\r\n    uint256[50] private __gap;\r\n}\r\n"
			},
			"ERC20/IERC20MetadataUpgradeable.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./IERC20Upgradeable.sol\";\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n"
			},
			"ERC20/IERC20Upgradeable.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20Upgradeable {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n"
			},
			"Utils/AddressUpgradeable.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\r\n\r\npragma solidity ^0.8.1;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary AddressUpgradeable {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			}
		}
	},
	"output": {
		"contracts": {
			"ERC20/ERC20Upgradeable.sol": {
				"ERC20Upgradeable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "version",
									"type": "uint8"
								}
							],
							"name": "Initialized",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "subtractedValue",
									"type": "uint256"
								}
							],
							"name": "decreaseAllowance",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "addedValue",
									"type": "uint256"
								}
							],
							"name": "increaseAllowance",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Implementation of the {IERC20} interface. This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. For a generic mechanism see {ERC20PresetMinterPauser}. TIP: For a detailed writeup see our guide https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. We have followed general OpenZeppelin Contracts guidelines: functions revert instead returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC20 applications. Additionally, an {Approval} event is emitted on calls to {transferFrom}. This allows applications to reconstruct the allowance for all accounts just by listening to said events. Other implementations of the EIP may not emit these events, as it isn't required by the specification. Finally, the non-standard {decreaseAllowance} and {increaseAllowance} functions have been added to mitigate the well-known issues around setting allowances. See {IERC20-approve}.",
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "See {IERC20-allowance}."
							},
							"approve(address,uint256)": {
								"details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
							},
							"balanceOf(address)": {
								"details": "See {IERC20-balanceOf}."
							},
							"decimals()": {
								"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
							},
							"decreaseAllowance(address,uint256)": {
								"details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
							},
							"increaseAllowance(address,uint256)": {
								"details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"symbol()": {
								"details": "Returns the symbol of the token, usually a shorter version of the name."
							},
							"totalSupply()": {
								"details": "See {IERC20-totalSupply}."
							},
							"transfer(address,uint256)": {
								"details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."
							},
							"transferFrom(address,address,uint256)": {
								"details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
							}
						},
						"stateVariables": {
							"__gap": {
								"details": "This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"ERC20/ERC20Upgradeable.sol\":1500:13631  contract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\r... */\n  mstore(0x40, 0x80)\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"ERC20/ERC20Upgradeable.sol\":1500:13631  contract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\r... */\n      mstore(0x40, 0x80)\n      callvalue\n      dup1\n      iszero\n      tag_1\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_1:\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x39509351\n      gt\n      tag_14\n      jumpi\n      dup1\n      0x39509351\n      eq\n      tag_8\n      jumpi\n      dup1\n      0x70a08231\n      eq\n      tag_9\n      jumpi\n      dup1\n      0x95d89b41\n      eq\n      tag_10\n      jumpi\n      dup1\n      0xa457c2d7\n      eq\n      tag_11\n      jumpi\n      dup1\n      0xa9059cbb\n      eq\n      tag_12\n      jumpi\n      dup1\n      0xdd62ed3e\n      eq\n      tag_13\n      jumpi\n      jump(tag_2)\n    tag_14:\n      dup1\n      0x06fdde03\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x095ea7b3\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x18160ddd\n      eq\n      tag_5\n      jumpi\n      dup1\n      0x23b872dd\n      eq\n      tag_6\n      jumpi\n      dup1\n      0x313ce567\n      eq\n      tag_7\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"ERC20/ERC20Upgradeable.sol\":2542:2642  function name() public view virtual override returns (string memory) {\r... */\n    tag_3:\n      tag_15\n      tag_16\n      jump\t// in\n    tag_15:\n      mload(0x40)\n      tag_17\n      swap2\n      swap1\n      tag_18\n      jump\t// in\n    tag_17:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"ERC20/ERC20Upgradeable.sol\":4893:5094  function approve(address spender, uint256 amount) public virtual override returns (bool) {\r... */\n    tag_4:\n      tag_19\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_20\n      swap2\n      swap1\n      tag_21\n      jump\t// in\n    tag_20:\n      tag_22\n      jump\t// in\n    tag_19:\n      mload(0x40)\n      tag_23\n      swap2\n      swap1\n      tag_24\n      jump\t// in\n    tag_23:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"ERC20/ERC20Upgradeable.sol\":3662:3770  function totalSupply() public view virtual override returns (uint256) {\r... */\n    tag_5:\n      tag_25\n      tag_26\n      jump\t// in\n    tag_25:\n      mload(0x40)\n      tag_27\n      swap2\n      swap1\n      tag_28\n      jump\t// in\n    tag_27:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"ERC20/ERC20Upgradeable.sol\":5674:5969  function transferFrom(\r... */\n    tag_6:\n      tag_29\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_30\n      swap2\n      swap1\n      tag_31\n      jump\t// in\n    tag_30:\n      tag_32\n      jump\t// in\n    tag_29:\n      mload(0x40)\n      tag_33\n      swap2\n      swap1\n      tag_24\n      jump\t// in\n    tag_33:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"ERC20/ERC20Upgradeable.sol\":3504:3597  function decimals() public view virtual override returns (uint8) {\r... */\n    tag_7:\n      tag_34\n      tag_35\n      jump\t// in\n    tag_34:\n      mload(0x40)\n      tag_36\n      swap2\n      swap1\n      tag_37\n      jump\t// in\n    tag_36:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"ERC20/ERC20Upgradeable.sol\":6378:6616  function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r... */\n    tag_8:\n      tag_38\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_39\n      swap2\n      swap1\n      tag_21\n      jump\t// in\n    tag_39:\n      tag_40\n      jump\t// in\n    tag_38:\n      mload(0x40)\n      tag_41\n      swap2\n      swap1\n      tag_24\n      jump\t// in\n    tag_41:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"ERC20/ERC20Upgradeable.sol\":3833:3960  function balanceOf(address account) public view virtual override returns (uint256) {\r... */\n    tag_9:\n      tag_42\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_43\n      swap2\n      swap1\n      tag_44\n      jump\t// in\n    tag_43:\n      tag_45\n      jump\t// in\n    tag_42:\n      mload(0x40)\n      tag_46\n      swap2\n      swap1\n      tag_28\n      jump\t// in\n    tag_46:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"ERC20/ERC20Upgradeable.sol\":2761:2865  function symbol() public view virtual override returns (string memory) {\r... */\n    tag_10:\n      tag_47\n      tag_48\n      jump\t// in\n    tag_47:\n      mload(0x40)\n      tag_49\n      swap2\n      swap1\n      tag_18\n      jump\t// in\n    tag_49:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"ERC20/ERC20Upgradeable.sol\":7119:7555  function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r... */\n    tag_11:\n      tag_50\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_51\n      swap2\n      swap1\n      tag_21\n      jump\t// in\n    tag_51:\n      tag_52\n      jump\t// in\n    tag_50:\n      mload(0x40)\n      tag_53\n      swap2\n      swap1\n      tag_24\n      jump\t// in\n    tag_53:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"ERC20/ERC20Upgradeable.sol\":4166:4359  function transfer(address to, uint256 amount) public virtual override returns (bool) {\r... */\n    tag_12:\n      tag_54\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_55\n      swap2\n      swap1\n      tag_21\n      jump\t// in\n    tag_55:\n      tag_56\n      jump\t// in\n    tag_54:\n      mload(0x40)\n      tag_57\n      swap2\n      swap1\n      tag_24\n      jump\t// in\n    tag_57:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"ERC20/ERC20Upgradeable.sol\":4422:4573  function allowance(address owner, address spender) public view virtual override returns (uint256) {\r... */\n    tag_13:\n      tag_58\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_59\n      swap2\n      swap1\n      tag_60\n      jump\t// in\n    tag_59:\n      tag_61\n      jump\t// in\n    tag_58:\n      mload(0x40)\n      tag_62\n      swap2\n      swap1\n      tag_28\n      jump\t// in\n    tag_62:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"ERC20/ERC20Upgradeable.sol\":2542:2642  function name() public view virtual override returns (string memory) {\r... */\n    tag_16:\n        /* \"ERC20/ERC20Upgradeable.sol\":2596:2609  string memory */\n      0x60\n        /* \"ERC20/ERC20Upgradeable.sol\":2629:2634  _name */\n      0x36\n        /* \"ERC20/ERC20Upgradeable.sol\":2622:2634  return _name */\n      dup1\n      sload\n      tag_64\n      swap1\n      tag_65\n      jump\t// in\n    tag_64:\n      dup1\n      0x1f\n      add\n      0x20\n      dup1\n      swap2\n      div\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      dup3\n      dup1\n      sload\n      tag_66\n      swap1\n      tag_65\n      jump\t// in\n    tag_66:\n      dup1\n      iszero\n      tag_67\n      jumpi\n      dup1\n      0x1f\n      lt\n      tag_68\n      jumpi\n      0x0100\n      dup1\n      dup4\n      sload\n      div\n      mul\n      dup4\n      mstore\n      swap2\n      0x20\n      add\n      swap2\n      jump(tag_67)\n    tag_68:\n      dup3\n      add\n      swap2\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      swap1\n    tag_69:\n      dup2\n      sload\n      dup2\n      mstore\n      swap1\n      0x01\n      add\n      swap1\n      0x20\n      add\n      dup1\n      dup4\n      gt\n      tag_69\n      jumpi\n      dup3\n      swap1\n      sub\n      0x1f\n      and\n      dup3\n      add\n      swap2\n    tag_67:\n      pop\n      pop\n      pop\n      pop\n      pop\n      swap1\n      pop\n        /* \"ERC20/ERC20Upgradeable.sol\":2542:2642  function name() public view virtual override returns (string memory) {\r... */\n      swap1\n      jump\t// out\n        /* \"ERC20/ERC20Upgradeable.sol\":4893:5094  function approve(address spender, uint256 amount) public virtual override returns (bool) {\r... */\n    tag_22:\n        /* \"ERC20/ERC20Upgradeable.sol\":4976:4980  bool */\n      0x00\n        /* \"ERC20/ERC20Upgradeable.sol\":4993:5006  address owner */\n      dup1\n        /* \"ERC20/ERC20Upgradeable.sol\":5009:5021  _msgSender() */\n      tag_71\n        /* \"ERC20/ERC20Upgradeable.sol\":5009:5019  _msgSender */\n      tag_72\n        /* \"ERC20/ERC20Upgradeable.sol\":5009:5021  _msgSender() */\n      jump\t// in\n    tag_71:\n        /* \"ERC20/ERC20Upgradeable.sol\":4993:5021  address owner = _msgSender() */\n      swap1\n      pop\n        /* \"ERC20/ERC20Upgradeable.sol\":5032:5064  _approve(owner, spender, amount) */\n      tag_73\n        /* \"ERC20/ERC20Upgradeable.sol\":5041:5046  owner */\n      dup2\n        /* \"ERC20/ERC20Upgradeable.sol\":5048:5055  spender */\n      dup6\n        /* \"ERC20/ERC20Upgradeable.sol\":5057:5063  amount */\n      dup6\n        /* \"ERC20/ERC20Upgradeable.sol\":5032:5040  _approve */\n      tag_74\n        /* \"ERC20/ERC20Upgradeable.sol\":5032:5064  _approve(owner, spender, amount) */\n      jump\t// in\n    tag_73:\n        /* \"ERC20/ERC20Upgradeable.sol\":5082:5086  true */\n      0x01\n        /* \"ERC20/ERC20Upgradeable.sol\":5075:5086  return true */\n      swap2\n      pop\n      pop\n        /* \"ERC20/ERC20Upgradeable.sol\":4893:5094  function approve(address spender, uint256 amount) public virtual override returns (bool) {\r... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"ERC20/ERC20Upgradeable.sol\":3662:3770  function totalSupply() public view virtual override returns (uint256) {\r... */\n    tag_26:\n        /* \"ERC20/ERC20Upgradeable.sol\":3723:3730  uint256 */\n      0x00\n        /* \"ERC20/ERC20Upgradeable.sol\":3750:3762  _totalSupply */\n      sload(0x35)\n        /* \"ERC20/ERC20Upgradeable.sol\":3743:3762  return _totalSupply */\n      swap1\n      pop\n        /* \"ERC20/ERC20Upgradeable.sol\":3662:3770  function totalSupply() public view virtual override returns (uint256) {\r... */\n      swap1\n      jump\t// out\n        /* \"ERC20/ERC20Upgradeable.sol\":5674:5969  function transferFrom(\r... */\n    tag_32:\n        /* \"ERC20/ERC20Upgradeable.sol\":5805:5809  bool */\n      0x00\n        /* \"ERC20/ERC20Upgradeable.sol\":5822:5837  address spender */\n      dup1\n        /* \"ERC20/ERC20Upgradeable.sol\":5840:5852  _msgSender() */\n      tag_77\n        /* \"ERC20/ERC20Upgradeable.sol\":5840:5850  _msgSender */\n      tag_72\n        /* \"ERC20/ERC20Upgradeable.sol\":5840:5852  _msgSender() */\n      jump\t// in\n    tag_77:\n        /* \"ERC20/ERC20Upgradeable.sol\":5822:5852  address spender = _msgSender() */\n      swap1\n      pop\n        /* \"ERC20/ERC20Upgradeable.sol\":5863:5901  _spendAllowance(from, spender, amount) */\n      tag_78\n        /* \"ERC20/ERC20Upgradeable.sol\":5879:5883  from */\n      dup6\n        /* \"ERC20/ERC20Upgradeable.sol\":5885:5892  spender */\n      dup3\n        /* \"ERC20/ERC20Upgradeable.sol\":5894:5900  amount */\n      dup6\n        /* \"ERC20/ERC20Upgradeable.sol\":5863:5878  _spendAllowance */\n      tag_79\n        /* \"ERC20/ERC20Upgradeable.sol\":5863:5901  _spendAllowance(from, spender, amount) */\n      jump\t// in\n    tag_78:\n        /* \"ERC20/ERC20Upgradeable.sol\":5912:5939  _transfer(from, to, amount) */\n      tag_80\n        /* \"ERC20/ERC20Upgradeable.sol\":5922:5926  from */\n      dup6\n        /* \"ERC20/ERC20Upgradeable.sol\":5928:5930  to */\n      dup6\n        /* \"ERC20/ERC20Upgradeable.sol\":5932:5938  amount */\n      dup6\n        /* \"ERC20/ERC20Upgradeable.sol\":5912:5921  _transfer */\n      tag_81\n        /* \"ERC20/ERC20Upgradeable.sol\":5912:5939  _transfer(from, to, amount) */\n      jump\t// in\n    tag_80:\n        /* \"ERC20/ERC20Upgradeable.sol\":5957:5961  true */\n      0x01\n        /* \"ERC20/ERC20Upgradeable.sol\":5950:5961  return true */\n      swap2\n      pop\n      pop\n        /* \"ERC20/ERC20Upgradeable.sol\":5674:5969  function transferFrom(\r... */\n      swap4\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"ERC20/ERC20Upgradeable.sol\":3504:3597  function decimals() public view virtual override returns (uint8) {\r... */\n    tag_35:\n        /* \"ERC20/ERC20Upgradeable.sol\":3562:3567  uint8 */\n      0x00\n        /* \"ERC20/ERC20Upgradeable.sol\":3587:3589  18 */\n      0x12\n        /* \"ERC20/ERC20Upgradeable.sol\":3580:3589  return 18 */\n      swap1\n      pop\n        /* \"ERC20/ERC20Upgradeable.sol\":3504:3597  function decimals() public view virtual override returns (uint8) {\r... */\n      swap1\n      jump\t// out\n        /* \"ERC20/ERC20Upgradeable.sol\":6378:6616  function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r... */\n    tag_40:\n        /* \"ERC20/ERC20Upgradeable.sol\":6466:6470  bool */\n      0x00\n        /* \"ERC20/ERC20Upgradeable.sol\":6483:6496  address owner */\n      dup1\n        /* \"ERC20/ERC20Upgradeable.sol\":6499:6511  _msgSender() */\n      tag_84\n        /* \"ERC20/ERC20Upgradeable.sol\":6499:6509  _msgSender */\n      tag_72\n        /* \"ERC20/ERC20Upgradeable.sol\":6499:6511  _msgSender() */\n      jump\t// in\n    tag_84:\n        /* \"ERC20/ERC20Upgradeable.sol\":6483:6511  address owner = _msgSender() */\n      swap1\n      pop\n        /* \"ERC20/ERC20Upgradeable.sol\":6522:6586  _approve(owner, spender, allowance(owner, spender) + addedValue) */\n      tag_85\n        /* \"ERC20/ERC20Upgradeable.sol\":6531:6536  owner */\n      dup2\n        /* \"ERC20/ERC20Upgradeable.sol\":6538:6545  spender */\n      dup6\n        /* \"ERC20/ERC20Upgradeable.sol\":6575:6585  addedValue */\n      dup6\n        /* \"ERC20/ERC20Upgradeable.sol\":6547:6572  allowance(owner, spender) */\n      tag_86\n        /* \"ERC20/ERC20Upgradeable.sol\":6557:6562  owner */\n      dup6\n        /* \"ERC20/ERC20Upgradeable.sol\":6564:6571  spender */\n      dup10\n        /* \"ERC20/ERC20Upgradeable.sol\":6547:6556  allowance */\n      tag_61\n        /* \"ERC20/ERC20Upgradeable.sol\":6547:6572  allowance(owner, spender) */\n      jump\t// in\n    tag_86:\n        /* \"ERC20/ERC20Upgradeable.sol\":6547:6585  allowance(owner, spender) + addedValue */\n      tag_87\n      swap2\n      swap1\n      tag_88\n      jump\t// in\n    tag_87:\n        /* \"ERC20/ERC20Upgradeable.sol\":6522:6530  _approve */\n      tag_74\n        /* \"ERC20/ERC20Upgradeable.sol\":6522:6586  _approve(owner, spender, allowance(owner, spender) + addedValue) */\n      jump\t// in\n    tag_85:\n        /* \"ERC20/ERC20Upgradeable.sol\":6604:6608  true */\n      0x01\n        /* \"ERC20/ERC20Upgradeable.sol\":6597:6608  return true */\n      swap2\n      pop\n      pop\n        /* \"ERC20/ERC20Upgradeable.sol\":6378:6616  function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"ERC20/ERC20Upgradeable.sol\":3833:3960  function balanceOf(address account) public view virtual override returns (uint256) {\r... */\n    tag_45:\n        /* \"ERC20/ERC20Upgradeable.sol\":3907:3914  uint256 */\n      0x00\n        /* \"ERC20/ERC20Upgradeable.sol\":3934:3943  _balances */\n      0x33\n        /* \"ERC20/ERC20Upgradeable.sol\":3934:3952  _balances[account] */\n      0x00\n        /* \"ERC20/ERC20Upgradeable.sol\":3944:3951  account */\n      dup4\n        /* \"ERC20/ERC20Upgradeable.sol\":3934:3952  _balances[account] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      sload\n        /* \"ERC20/ERC20Upgradeable.sol\":3927:3952  return _balances[account] */\n      swap1\n      pop\n        /* \"ERC20/ERC20Upgradeable.sol\":3833:3960  function balanceOf(address account) public view virtual override returns (uint256) {\r... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"ERC20/ERC20Upgradeable.sol\":2761:2865  function symbol() public view virtual override returns (string memory) {\r... */\n    tag_48:\n        /* \"ERC20/ERC20Upgradeable.sol\":2817:2830  string memory */\n      0x60\n        /* \"ERC20/ERC20Upgradeable.sol\":2850:2857  _symbol */\n      0x37\n        /* \"ERC20/ERC20Upgradeable.sol\":2843:2857  return _symbol */\n      dup1\n      sload\n      tag_91\n      swap1\n      tag_65\n      jump\t// in\n    tag_91:\n      dup1\n      0x1f\n      add\n      0x20\n      dup1\n      swap2\n      div\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      dup3\n      dup1\n      sload\n      tag_92\n      swap1\n      tag_65\n      jump\t// in\n    tag_92:\n      dup1\n      iszero\n      tag_93\n      jumpi\n      dup1\n      0x1f\n      lt\n      tag_94\n      jumpi\n      0x0100\n      dup1\n      dup4\n      sload\n      div\n      mul\n      dup4\n      mstore\n      swap2\n      0x20\n      add\n      swap2\n      jump(tag_93)\n    tag_94:\n      dup3\n      add\n      swap2\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      swap1\n    tag_95:\n      dup2\n      sload\n      dup2\n      mstore\n      swap1\n      0x01\n      add\n      swap1\n      0x20\n      add\n      dup1\n      dup4\n      gt\n      tag_95\n      jumpi\n      dup3\n      swap1\n      sub\n      0x1f\n      and\n      dup3\n      add\n      swap2\n    tag_93:\n      pop\n      pop\n      pop\n      pop\n      pop\n      swap1\n      pop\n        /* \"ERC20/ERC20Upgradeable.sol\":2761:2865  function symbol() public view virtual override returns (string memory) {\r... */\n      swap1\n      jump\t// out\n        /* \"ERC20/ERC20Upgradeable.sol\":7119:7555  function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r... */\n    tag_52:\n        /* \"ERC20/ERC20Upgradeable.sol\":7212:7216  bool */\n      0x00\n        /* \"ERC20/ERC20Upgradeable.sol\":7229:7242  address owner */\n      dup1\n        /* \"ERC20/ERC20Upgradeable.sol\":7245:7257  _msgSender() */\n      tag_97\n        /* \"ERC20/ERC20Upgradeable.sol\":7245:7255  _msgSender */\n      tag_72\n        /* \"ERC20/ERC20Upgradeable.sol\":7245:7257  _msgSender() */\n      jump\t// in\n    tag_97:\n        /* \"ERC20/ERC20Upgradeable.sol\":7229:7257  address owner = _msgSender() */\n      swap1\n      pop\n        /* \"ERC20/ERC20Upgradeable.sol\":7268:7292  uint256 currentAllowance */\n      0x00\n        /* \"ERC20/ERC20Upgradeable.sol\":7295:7320  allowance(owner, spender) */\n      tag_98\n        /* \"ERC20/ERC20Upgradeable.sol\":7305:7310  owner */\n      dup3\n        /* \"ERC20/ERC20Upgradeable.sol\":7312:7319  spender */\n      dup7\n        /* \"ERC20/ERC20Upgradeable.sol\":7295:7304  allowance */\n      tag_61\n        /* \"ERC20/ERC20Upgradeable.sol\":7295:7320  allowance(owner, spender) */\n      jump\t// in\n    tag_98:\n        /* \"ERC20/ERC20Upgradeable.sol\":7268:7320  uint256 currentAllowance = allowance(owner, spender) */\n      swap1\n      pop\n        /* \"ERC20/ERC20Upgradeable.sol\":7359:7374  subtractedValue */\n      dup4\n        /* \"ERC20/ERC20Upgradeable.sol\":7339:7355  currentAllowance */\n      dup2\n        /* \"ERC20/ERC20Upgradeable.sol\":7339:7374  currentAllowance >= subtractedValue */\n      lt\n      iszero\n        /* \"ERC20/ERC20Upgradeable.sol\":7331:7416  require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\") */\n      tag_99\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_100\n      swap1\n      tag_101\n      jump\t// in\n    tag_100:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_99:\n        /* \"ERC20/ERC20Upgradeable.sol\":7452:7512  _approve(owner, spender, currentAllowance - subtractedValue) */\n      tag_102\n        /* \"ERC20/ERC20Upgradeable.sol\":7461:7466  owner */\n      dup3\n        /* \"ERC20/ERC20Upgradeable.sol\":7468:7475  spender */\n      dup7\n        /* \"ERC20/ERC20Upgradeable.sol\":7496:7511  subtractedValue */\n      dup7\n        /* \"ERC20/ERC20Upgradeable.sol\":7477:7493  currentAllowance */\n      dup5\n        /* \"ERC20/ERC20Upgradeable.sol\":7477:7511  currentAllowance - subtractedValue */\n      sub\n        /* \"ERC20/ERC20Upgradeable.sol\":7452:7460  _approve */\n      tag_74\n        /* \"ERC20/ERC20Upgradeable.sol\":7452:7512  _approve(owner, spender, currentAllowance - subtractedValue) */\n      jump\t// in\n    tag_102:\n        /* \"ERC20/ERC20Upgradeable.sol\":7543:7547  true */\n      0x01\n        /* \"ERC20/ERC20Upgradeable.sol\":7536:7547  return true */\n      swap3\n      pop\n      pop\n      pop\n        /* \"ERC20/ERC20Upgradeable.sol\":7119:7555  function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"ERC20/ERC20Upgradeable.sol\":4166:4359  function transfer(address to, uint256 amount) public virtual override returns (bool) {\r... */\n    tag_56:\n        /* \"ERC20/ERC20Upgradeable.sol\":4245:4249  bool */\n      0x00\n        /* \"ERC20/ERC20Upgradeable.sol\":4262:4275  address owner */\n      dup1\n        /* \"ERC20/ERC20Upgradeable.sol\":4278:4290  _msgSender() */\n      tag_104\n        /* \"ERC20/ERC20Upgradeable.sol\":4278:4288  _msgSender */\n      tag_72\n        /* \"ERC20/ERC20Upgradeable.sol\":4278:4290  _msgSender() */\n      jump\t// in\n    tag_104:\n        /* \"ERC20/ERC20Upgradeable.sol\":4262:4290  address owner = _msgSender() */\n      swap1\n      pop\n        /* \"ERC20/ERC20Upgradeable.sol\":4301:4329  _transfer(owner, to, amount) */\n      tag_105\n        /* \"ERC20/ERC20Upgradeable.sol\":4311:4316  owner */\n      dup2\n        /* \"ERC20/ERC20Upgradeable.sol\":4318:4320  to */\n      dup6\n        /* \"ERC20/ERC20Upgradeable.sol\":4322:4328  amount */\n      dup6\n        /* \"ERC20/ERC20Upgradeable.sol\":4301:4310  _transfer */\n      tag_81\n        /* \"ERC20/ERC20Upgradeable.sol\":4301:4329  _transfer(owner, to, amount) */\n      jump\t// in\n    tag_105:\n        /* \"ERC20/ERC20Upgradeable.sol\":4347:4351  true */\n      0x01\n        /* \"ERC20/ERC20Upgradeable.sol\":4340:4351  return true */\n      swap2\n      pop\n      pop\n        /* \"ERC20/ERC20Upgradeable.sol\":4166:4359  function transfer(address to, uint256 amount) public virtual override returns (bool) {\r... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"ERC20/ERC20Upgradeable.sol\":4422:4573  function allowance(address owner, address spender) public view virtual override returns (uint256) {\r... */\n    tag_61:\n        /* \"ERC20/ERC20Upgradeable.sol\":4511:4518  uint256 */\n      0x00\n        /* \"ERC20/ERC20Upgradeable.sol\":4538:4549  _allowances */\n      0x34\n        /* \"ERC20/ERC20Upgradeable.sol\":4538:4556  _allowances[owner] */\n      0x00\n        /* \"ERC20/ERC20Upgradeable.sol\":4550:4555  owner */\n      dup5\n        /* \"ERC20/ERC20Upgradeable.sol\":4538:4556  _allowances[owner] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"ERC20/ERC20Upgradeable.sol\":4538:4565  _allowances[owner][spender] */\n      0x00\n        /* \"ERC20/ERC20Upgradeable.sol\":4557:4564  spender */\n      dup4\n        /* \"ERC20/ERC20Upgradeable.sol\":4538:4565  _allowances[owner][spender] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      sload\n        /* \"ERC20/ERC20Upgradeable.sol\":4531:4565  return _allowances[owner][spender] */\n      swap1\n      pop\n        /* \"ERC20/ERC20Upgradeable.sol\":4422:4573  function allowance(address owner, address spender) public view virtual override returns (uint256) {\r... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"Utils/ContextUpgradeable.sol\":859:957  function _msgSender() internal view virtual returns (address) {\r... */\n    tag_72:\n        /* \"Utils/ContextUpgradeable.sol\":912:919  address */\n      0x00\n        /* \"Utils/ContextUpgradeable.sol\":939:949  msg.sender */\n      caller\n        /* \"Utils/ContextUpgradeable.sol\":932:949  return msg.sender */\n      swap1\n      pop\n        /* \"Utils/ContextUpgradeable.sol\":859:957  function _msgSender() internal view virtual returns (address) {\r... */\n      swap1\n      jump\t// out\n        /* \"ERC20/ERC20Upgradeable.sol\":10753:11133  function _approve(\r... */\n    tag_74:\n        /* \"ERC20/ERC20Upgradeable.sol\":10906:10907  0 */\n      0x00\n        /* \"ERC20/ERC20Upgradeable.sol\":10889:10908  owner != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"ERC20/ERC20Upgradeable.sol\":10889:10894  owner */\n      dup4\n        /* \"ERC20/ERC20Upgradeable.sol\":10889:10908  owner != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n      iszero\n        /* \"ERC20/ERC20Upgradeable.sol\":10881:10949  require(owner != address(0), \"ERC20: approve from the zero address\") */\n      tag_109\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_110\n      swap1\n      tag_111\n      jump\t// in\n    tag_110:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_109:\n        /* \"ERC20/ERC20Upgradeable.sol\":10987:10988  0 */\n      0x00\n        /* \"ERC20/ERC20Upgradeable.sol\":10968:10989  spender != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"ERC20/ERC20Upgradeable.sol\":10968:10975  spender */\n      dup3\n        /* \"ERC20/ERC20Upgradeable.sol\":10968:10989  spender != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n      iszero\n        /* \"ERC20/ERC20Upgradeable.sol\":10960:11028  require(spender != address(0), \"ERC20: approve to the zero address\") */\n      tag_112\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_113\n      swap1\n      tag_114\n      jump\t// in\n    tag_113:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_112:\n        /* \"ERC20/ERC20Upgradeable.sol\":11071:11077  amount */\n      dup1\n        /* \"ERC20/ERC20Upgradeable.sol\":11041:11052  _allowances */\n      0x34\n        /* \"ERC20/ERC20Upgradeable.sol\":11041:11059  _allowances[owner] */\n      0x00\n        /* \"ERC20/ERC20Upgradeable.sol\":11053:11058  owner */\n      dup6\n        /* \"ERC20/ERC20Upgradeable.sol\":11041:11059  _allowances[owner] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"ERC20/ERC20Upgradeable.sol\":11041:11068  _allowances[owner][spender] */\n      0x00\n        /* \"ERC20/ERC20Upgradeable.sol\":11060:11067  spender */\n      dup5\n        /* \"ERC20/ERC20Upgradeable.sol\":11041:11068  _allowances[owner][spender] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"ERC20/ERC20Upgradeable.sol\":11041:11077  _allowances[owner][spender] = amount */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"ERC20/ERC20Upgradeable.sol\":11109:11116  spender */\n      dup2\n        /* \"ERC20/ERC20Upgradeable.sol\":11093:11125  Approval(owner, spender, amount) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"ERC20/ERC20Upgradeable.sol\":11102:11107  owner */\n      dup4\n        /* \"ERC20/ERC20Upgradeable.sol\":11093:11125  Approval(owner, spender, amount) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925\n        /* \"ERC20/ERC20Upgradeable.sol\":11118:11124  amount */\n      dup4\n        /* \"ERC20/ERC20Upgradeable.sol\":11093:11125  Approval(owner, spender, amount) */\n      mload(0x40)\n      tag_115\n      swap2\n      swap1\n      tag_28\n      jump\t// in\n    tag_115:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"ERC20/ERC20Upgradeable.sol\":10753:11133  function _approve(\r... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"ERC20/ERC20Upgradeable.sol\":11424:11877  function _spendAllowance(\r... */\n    tag_79:\n        /* \"ERC20/ERC20Upgradeable.sol\":11559:11583  uint256 currentAllowance */\n      0x00\n        /* \"ERC20/ERC20Upgradeable.sol\":11586:11611  allowance(owner, spender) */\n      tag_117\n        /* \"ERC20/ERC20Upgradeable.sol\":11596:11601  owner */\n      dup5\n        /* \"ERC20/ERC20Upgradeable.sol\":11603:11610  spender */\n      dup5\n        /* \"ERC20/ERC20Upgradeable.sol\":11586:11595  allowance */\n      tag_61\n        /* \"ERC20/ERC20Upgradeable.sol\":11586:11611  allowance(owner, spender) */\n      jump\t// in\n    tag_117:\n        /* \"ERC20/ERC20Upgradeable.sol\":11559:11611  uint256 currentAllowance = allowance(owner, spender) */\n      swap1\n      pop\n        /* \"ERC20/ERC20Upgradeable.sol\":11646:11663  type(uint256).max */\n      0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n        /* \"ERC20/ERC20Upgradeable.sol\":11626:11642  currentAllowance */\n      dup2\n        /* \"ERC20/ERC20Upgradeable.sol\":11626:11663  currentAllowance != type(uint256).max */\n      eq\n        /* \"ERC20/ERC20Upgradeable.sol\":11622:11870  if (currentAllowance != type(uint256).max) {\r... */\n      tag_118\n      jumpi\n        /* \"ERC20/ERC20Upgradeable.sol\":11708:11714  amount */\n      dup2\n        /* \"ERC20/ERC20Upgradeable.sol\":11688:11704  currentAllowance */\n      dup2\n        /* \"ERC20/ERC20Upgradeable.sol\":11688:11714  currentAllowance >= amount */\n      lt\n      iszero\n        /* \"ERC20/ERC20Upgradeable.sol\":11680:11748  require(currentAllowance >= amount, \"ERC20: insufficient allowance\") */\n      tag_119\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_120\n      swap1\n      tag_121\n      jump\t// in\n    tag_120:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_119:\n        /* \"ERC20/ERC20Upgradeable.sol\":11792:11843  _approve(owner, spender, currentAllowance - amount) */\n      tag_122\n        /* \"ERC20/ERC20Upgradeable.sol\":11801:11806  owner */\n      dup5\n        /* \"ERC20/ERC20Upgradeable.sol\":11808:11815  spender */\n      dup5\n        /* \"ERC20/ERC20Upgradeable.sol\":11836:11842  amount */\n      dup5\n        /* \"ERC20/ERC20Upgradeable.sol\":11817:11833  currentAllowance */\n      dup5\n        /* \"ERC20/ERC20Upgradeable.sol\":11817:11842  currentAllowance - amount */\n      sub\n        /* \"ERC20/ERC20Upgradeable.sol\":11792:11800  _approve */\n      tag_74\n        /* \"ERC20/ERC20Upgradeable.sol\":11792:11843  _approve(owner, spender, currentAllowance - amount) */\n      jump\t// in\n    tag_122:\n        /* \"ERC20/ERC20Upgradeable.sol\":11622:11870  if (currentAllowance != type(uint256).max) {\r... */\n    tag_118:\n        /* \"ERC20/ERC20Upgradeable.sol\":11548:11877  {\r... */\n      pop\n        /* \"ERC20/ERC20Upgradeable.sol\":11424:11877  function _spendAllowance(\r... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"ERC20/ERC20Upgradeable.sol\":8034:8705  function _transfer(\r... */\n    tag_81:\n        /* \"ERC20/ERC20Upgradeable.sol\":8181:8182  0 */\n      0x00\n        /* \"ERC20/ERC20Upgradeable.sol\":8165:8183  from != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"ERC20/ERC20Upgradeable.sol\":8165:8169  from */\n      dup4\n        /* \"ERC20/ERC20Upgradeable.sol\":8165:8183  from != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n      iszero\n        /* \"ERC20/ERC20Upgradeable.sol\":8157:8225  require(from != address(0), \"ERC20: transfer from the zero address\") */\n      tag_124\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_125\n      swap1\n      tag_126\n      jump\t// in\n    tag_125:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_124:\n        /* \"ERC20/ERC20Upgradeable.sol\":8258:8259  0 */\n      0x00\n        /* \"ERC20/ERC20Upgradeable.sol\":8244:8260  to != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"ERC20/ERC20Upgradeable.sol\":8244:8246  to */\n      dup3\n        /* \"ERC20/ERC20Upgradeable.sol\":8244:8260  to != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n      iszero\n        /* \"ERC20/ERC20Upgradeable.sol\":8236:8300  require(to != address(0), \"ERC20: transfer to the zero address\") */\n      tag_127\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_128\n      swap1\n      tag_129\n      jump\t// in\n    tag_128:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_127:\n        /* \"ERC20/ERC20Upgradeable.sol\":8313:8351  _beforeTokenTransfer(from, to, amount) */\n      tag_130\n        /* \"ERC20/ERC20Upgradeable.sol\":8334:8338  from */\n      dup4\n        /* \"ERC20/ERC20Upgradeable.sol\":8340:8342  to */\n      dup4\n        /* \"ERC20/ERC20Upgradeable.sol\":8344:8350  amount */\n      dup4\n        /* \"ERC20/ERC20Upgradeable.sol\":8313:8333  _beforeTokenTransfer */\n      tag_131\n        /* \"ERC20/ERC20Upgradeable.sol\":8313:8351  _beforeTokenTransfer(from, to, amount) */\n      jump\t// in\n    tag_130:\n        /* \"ERC20/ERC20Upgradeable.sol\":8364:8383  uint256 fromBalance */\n      0x00\n        /* \"ERC20/ERC20Upgradeable.sol\":8386:8395  _balances */\n      0x33\n        /* \"ERC20/ERC20Upgradeable.sol\":8386:8401  _balances[from] */\n      0x00\n        /* \"ERC20/ERC20Upgradeable.sol\":8396:8400  from */\n      dup6\n        /* \"ERC20/ERC20Upgradeable.sol\":8386:8401  _balances[from] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      sload\n        /* \"ERC20/ERC20Upgradeable.sol\":8364:8401  uint256 fromBalance = _balances[from] */\n      swap1\n      pop\n        /* \"ERC20/ERC20Upgradeable.sol\":8435:8441  amount */\n      dup2\n        /* \"ERC20/ERC20Upgradeable.sol\":8420:8431  fromBalance */\n      dup2\n        /* \"ERC20/ERC20Upgradeable.sol\":8420:8441  fromBalance >= amount */\n      lt\n      iszero\n        /* \"ERC20/ERC20Upgradeable.sol\":8412:8484  require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\") */\n      tag_132\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_133\n      swap1\n      tag_134\n      jump\t// in\n    tag_133:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_132:\n        /* \"ERC20/ERC20Upgradeable.sol\":8552:8558  amount */\n      dup2\n        /* \"ERC20/ERC20Upgradeable.sol\":8538:8549  fromBalance */\n      dup2\n        /* \"ERC20/ERC20Upgradeable.sol\":8538:8558  fromBalance - amount */\n      sub\n        /* \"ERC20/ERC20Upgradeable.sol\":8520:8529  _balances */\n      0x33\n        /* \"ERC20/ERC20Upgradeable.sol\":8520:8535  _balances[from] */\n      0x00\n        /* \"ERC20/ERC20Upgradeable.sol\":8530:8534  from */\n      dup7\n        /* \"ERC20/ERC20Upgradeable.sol\":8520:8535  _balances[from] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"ERC20/ERC20Upgradeable.sol\":8520:8558  _balances[from] = fromBalance - amount */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"ERC20/ERC20Upgradeable.sol\":8597:8603  amount */\n      dup2\n        /* \"ERC20/ERC20Upgradeable.sol\":8580:8589  _balances */\n      0x33\n        /* \"ERC20/ERC20Upgradeable.sol\":8580:8593  _balances[to] */\n      0x00\n        /* \"ERC20/ERC20Upgradeable.sol\":8590:8592  to */\n      dup6\n        /* \"ERC20/ERC20Upgradeable.sol\":8580:8593  _balances[to] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      0x00\n        /* \"ERC20/ERC20Upgradeable.sol\":8580:8603  _balances[to] += amount */\n      dup3\n      dup3\n      sload\n      tag_135\n      swap2\n      swap1\n      tag_88\n      jump\t// in\n    tag_135:\n      swap3\n      pop\n      pop\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"ERC20/ERC20Upgradeable.sol\":8636:8638  to */\n      dup3\n        /* \"ERC20/ERC20Upgradeable.sol\":8621:8647  Transfer(from, to, amount) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"ERC20/ERC20Upgradeable.sol\":8630:8634  from */\n      dup5\n        /* \"ERC20/ERC20Upgradeable.sol\":8621:8647  Transfer(from, to, amount) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\n        /* \"ERC20/ERC20Upgradeable.sol\":8640:8646  amount */\n      dup5\n        /* \"ERC20/ERC20Upgradeable.sol\":8621:8647  Transfer(from, to, amount) */\n      mload(0x40)\n      tag_136\n      swap2\n      swap1\n      tag_28\n      jump\t// in\n    tag_136:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"ERC20/ERC20Upgradeable.sol\":8660:8697  _afterTokenTransfer(from, to, amount) */\n      tag_137\n        /* \"ERC20/ERC20Upgradeable.sol\":8680:8684  from */\n      dup5\n        /* \"ERC20/ERC20Upgradeable.sol\":8686:8688  to */\n      dup5\n        /* \"ERC20/ERC20Upgradeable.sol\":8690:8696  amount */\n      dup5\n        /* \"ERC20/ERC20Upgradeable.sol\":8660:8679  _afterTokenTransfer */\n      tag_138\n        /* \"ERC20/ERC20Upgradeable.sol\":8660:8697  _afterTokenTransfer(from, to, amount) */\n      jump\t// in\n    tag_137:\n        /* \"ERC20/ERC20Upgradeable.sol\":8146:8705  {\r... */\n      pop\n        /* \"ERC20/ERC20Upgradeable.sol\":8034:8705  function _transfer(\r... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"ERC20/ERC20Upgradeable.sol\":12477:12602  function _beforeTokenTransfer(\r... */\n    tag_131:\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"ERC20/ERC20Upgradeable.sol\":13206:13330  function _afterTokenTransfer(\r... */\n    tag_138:\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":7:146   */\n    tag_142:\n        /* \"#utility.yul\":53:58   */\n      0x00\n        /* \"#utility.yul\":91:97   */\n      dup2\n        /* \"#utility.yul\":78:98   */\n      calldataload\n        /* \"#utility.yul\":69:98   */\n      swap1\n      pop\n        /* \"#utility.yul\":107:140   */\n      tag_144\n        /* \"#utility.yul\":134:139   */\n      dup2\n        /* \"#utility.yul\":107:140   */\n      tag_145\n      jump\t// in\n    tag_144:\n        /* \"#utility.yul\":7:146   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":152:291   */\n    tag_146:\n        /* \"#utility.yul\":198:203   */\n      0x00\n        /* \"#utility.yul\":236:242   */\n      dup2\n        /* \"#utility.yul\":223:243   */\n      calldataload\n        /* \"#utility.yul\":214:243   */\n      swap1\n      pop\n        /* \"#utility.yul\":252:285   */\n      tag_148\n        /* \"#utility.yul\":279:284   */\n      dup2\n        /* \"#utility.yul\":252:285   */\n      tag_149\n      jump\t// in\n    tag_148:\n        /* \"#utility.yul\":152:291   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":297:626   */\n    tag_44:\n        /* \"#utility.yul\":356:362   */\n      0x00\n        /* \"#utility.yul\":405:407   */\n      0x20\n        /* \"#utility.yul\":393:402   */\n      dup3\n        /* \"#utility.yul\":384:391   */\n      dup5\n        /* \"#utility.yul\":380:403   */\n      sub\n        /* \"#utility.yul\":376:408   */\n      slt\n        /* \"#utility.yul\":373:492   */\n      iszero\n      tag_151\n      jumpi\n        /* \"#utility.yul\":411:490   */\n      tag_152\n      tag_153\n      jump\t// in\n    tag_152:\n        /* \"#utility.yul\":373:492   */\n    tag_151:\n        /* \"#utility.yul\":531:532   */\n      0x00\n        /* \"#utility.yul\":556:609   */\n      tag_154\n        /* \"#utility.yul\":601:608   */\n      dup5\n        /* \"#utility.yul\":592:598   */\n      dup3\n        /* \"#utility.yul\":581:590   */\n      dup6\n        /* \"#utility.yul\":577:599   */\n      add\n        /* \"#utility.yul\":556:609   */\n      tag_142\n      jump\t// in\n    tag_154:\n        /* \"#utility.yul\":546:609   */\n      swap2\n      pop\n        /* \"#utility.yul\":502:619   */\n      pop\n        /* \"#utility.yul\":297:626   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":632:1106   */\n    tag_60:\n        /* \"#utility.yul\":700:706   */\n      0x00\n        /* \"#utility.yul\":708:714   */\n      dup1\n        /* \"#utility.yul\":757:759   */\n      0x40\n        /* \"#utility.yul\":745:754   */\n      dup4\n        /* \"#utility.yul\":736:743   */\n      dup6\n        /* \"#utility.yul\":732:755   */\n      sub\n        /* \"#utility.yul\":728:760   */\n      slt\n        /* \"#utility.yul\":725:844   */\n      iszero\n      tag_156\n      jumpi\n        /* \"#utility.yul\":763:842   */\n      tag_157\n      tag_153\n      jump\t// in\n    tag_157:\n        /* \"#utility.yul\":725:844   */\n    tag_156:\n        /* \"#utility.yul\":883:884   */\n      0x00\n        /* \"#utility.yul\":908:961   */\n      tag_158\n        /* \"#utility.yul\":953:960   */\n      dup6\n        /* \"#utility.yul\":944:950   */\n      dup3\n        /* \"#utility.yul\":933:942   */\n      dup7\n        /* \"#utility.yul\":929:951   */\n      add\n        /* \"#utility.yul\":908:961   */\n      tag_142\n      jump\t// in\n    tag_158:\n        /* \"#utility.yul\":898:961   */\n      swap3\n      pop\n        /* \"#utility.yul\":854:971   */\n      pop\n        /* \"#utility.yul\":1010:1012   */\n      0x20\n        /* \"#utility.yul\":1036:1089   */\n      tag_159\n        /* \"#utility.yul\":1081:1088   */\n      dup6\n        /* \"#utility.yul\":1072:1078   */\n      dup3\n        /* \"#utility.yul\":1061:1070   */\n      dup7\n        /* \"#utility.yul\":1057:1079   */\n      add\n        /* \"#utility.yul\":1036:1089   */\n      tag_142\n      jump\t// in\n    tag_159:\n        /* \"#utility.yul\":1026:1089   */\n      swap2\n      pop\n        /* \"#utility.yul\":981:1099   */\n      pop\n        /* \"#utility.yul\":632:1106   */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1112:1731   */\n    tag_31:\n        /* \"#utility.yul\":1189:1195   */\n      0x00\n        /* \"#utility.yul\":1197:1203   */\n      dup1\n        /* \"#utility.yul\":1205:1211   */\n      0x00\n        /* \"#utility.yul\":1254:1256   */\n      0x60\n        /* \"#utility.yul\":1242:1251   */\n      dup5\n        /* \"#utility.yul\":1233:1240   */\n      dup7\n        /* \"#utility.yul\":1229:1252   */\n      sub\n        /* \"#utility.yul\":1225:1257   */\n      slt\n        /* \"#utility.yul\":1222:1341   */\n      iszero\n      tag_161\n      jumpi\n        /* \"#utility.yul\":1260:1339   */\n      tag_162\n      tag_153\n      jump\t// in\n    tag_162:\n        /* \"#utility.yul\":1222:1341   */\n    tag_161:\n        /* \"#utility.yul\":1380:1381   */\n      0x00\n        /* \"#utility.yul\":1405:1458   */\n      tag_163\n        /* \"#utility.yul\":1450:1457   */\n      dup7\n        /* \"#utility.yul\":1441:1447   */\n      dup3\n        /* \"#utility.yul\":1430:1439   */\n      dup8\n        /* \"#utility.yul\":1426:1448   */\n      add\n        /* \"#utility.yul\":1405:1458   */\n      tag_142\n      jump\t// in\n    tag_163:\n        /* \"#utility.yul\":1395:1458   */\n      swap4\n      pop\n        /* \"#utility.yul\":1351:1468   */\n      pop\n        /* \"#utility.yul\":1507:1509   */\n      0x20\n        /* \"#utility.yul\":1533:1586   */\n      tag_164\n        /* \"#utility.yul\":1578:1585   */\n      dup7\n        /* \"#utility.yul\":1569:1575   */\n      dup3\n        /* \"#utility.yul\":1558:1567   */\n      dup8\n        /* \"#utility.yul\":1554:1576   */\n      add\n        /* \"#utility.yul\":1533:1586   */\n      tag_142\n      jump\t// in\n    tag_164:\n        /* \"#utility.yul\":1523:1586   */\n      swap3\n      pop\n        /* \"#utility.yul\":1478:1596   */\n      pop\n        /* \"#utility.yul\":1635:1637   */\n      0x40\n        /* \"#utility.yul\":1661:1714   */\n      tag_165\n        /* \"#utility.yul\":1706:1713   */\n      dup7\n        /* \"#utility.yul\":1697:1703   */\n      dup3\n        /* \"#utility.yul\":1686:1695   */\n      dup8\n        /* \"#utility.yul\":1682:1704   */\n      add\n        /* \"#utility.yul\":1661:1714   */\n      tag_146\n      jump\t// in\n    tag_165:\n        /* \"#utility.yul\":1651:1714   */\n      swap2\n      pop\n        /* \"#utility.yul\":1606:1724   */\n      pop\n        /* \"#utility.yul\":1112:1731   */\n      swap3\n      pop\n      swap3\n      pop\n      swap3\n      jump\t// out\n        /* \"#utility.yul\":1737:2211   */\n    tag_21:\n        /* \"#utility.yul\":1805:1811   */\n      0x00\n        /* \"#utility.yul\":1813:1819   */\n      dup1\n        /* \"#utility.yul\":1862:1864   */\n      0x40\n        /* \"#utility.yul\":1850:1859   */\n      dup4\n        /* \"#utility.yul\":1841:1848   */\n      dup6\n        /* \"#utility.yul\":1837:1860   */\n      sub\n        /* \"#utility.yul\":1833:1865   */\n      slt\n        /* \"#utility.yul\":1830:1949   */\n      iszero\n      tag_167\n      jumpi\n        /* \"#utility.yul\":1868:1947   */\n      tag_168\n      tag_153\n      jump\t// in\n    tag_168:\n        /* \"#utility.yul\":1830:1949   */\n    tag_167:\n        /* \"#utility.yul\":1988:1989   */\n      0x00\n        /* \"#utility.yul\":2013:2066   */\n      tag_169\n        /* \"#utility.yul\":2058:2065   */\n      dup6\n        /* \"#utility.yul\":2049:2055   */\n      dup3\n        /* \"#utility.yul\":2038:2047   */\n      dup7\n        /* \"#utility.yul\":2034:2056   */\n      add\n        /* \"#utility.yul\":2013:2066   */\n      tag_142\n      jump\t// in\n    tag_169:\n        /* \"#utility.yul\":2003:2066   */\n      swap3\n      pop\n        /* \"#utility.yul\":1959:2076   */\n      pop\n        /* \"#utility.yul\":2115:2117   */\n      0x20\n        /* \"#utility.yul\":2141:2194   */\n      tag_170\n        /* \"#utility.yul\":2186:2193   */\n      dup6\n        /* \"#utility.yul\":2177:2183   */\n      dup3\n        /* \"#utility.yul\":2166:2175   */\n      dup7\n        /* \"#utility.yul\":2162:2184   */\n      add\n        /* \"#utility.yul\":2141:2194   */\n      tag_146\n      jump\t// in\n    tag_170:\n        /* \"#utility.yul\":2131:2194   */\n      swap2\n      pop\n        /* \"#utility.yul\":2086:2204   */\n      pop\n        /* \"#utility.yul\":1737:2211   */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2217:2326   */\n    tag_171:\n        /* \"#utility.yul\":2298:2319   */\n      tag_173\n        /* \"#utility.yul\":2313:2318   */\n      dup2\n        /* \"#utility.yul\":2298:2319   */\n      tag_174\n      jump\t// in\n    tag_173:\n        /* \"#utility.yul\":2293:2296   */\n      dup3\n        /* \"#utility.yul\":2286:2320   */\n      mstore\n        /* \"#utility.yul\":2217:2326   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2332:2696   */\n    tag_175:\n        /* \"#utility.yul\":2420:2423   */\n      0x00\n        /* \"#utility.yul\":2448:2487   */\n      tag_177\n        /* \"#utility.yul\":2481:2486   */\n      dup3\n        /* \"#utility.yul\":2448:2487   */\n      tag_178\n      jump\t// in\n    tag_177:\n        /* \"#utility.yul\":2503:2574   */\n      tag_179\n        /* \"#utility.yul\":2567:2573   */\n      dup2\n        /* \"#utility.yul\":2562:2565   */\n      dup6\n        /* \"#utility.yul\":2503:2574   */\n      tag_180\n      jump\t// in\n    tag_179:\n        /* \"#utility.yul\":2496:2574   */\n      swap4\n      pop\n        /* \"#utility.yul\":2583:2635   */\n      tag_181\n        /* \"#utility.yul\":2628:2634   */\n      dup2\n        /* \"#utility.yul\":2623:2626   */\n      dup6\n        /* \"#utility.yul\":2616:2620   */\n      0x20\n        /* \"#utility.yul\":2609:2614   */\n      dup7\n        /* \"#utility.yul\":2605:2621   */\n      add\n        /* \"#utility.yul\":2583:2635   */\n      tag_182\n      jump\t// in\n    tag_181:\n        /* \"#utility.yul\":2660:2689   */\n      tag_183\n        /* \"#utility.yul\":2682:2688   */\n      dup2\n        /* \"#utility.yul\":2660:2689   */\n      tag_184\n      jump\t// in\n    tag_183:\n        /* \"#utility.yul\":2655:2658   */\n      dup5\n        /* \"#utility.yul\":2651:2690   */\n      add\n        /* \"#utility.yul\":2644:2690   */\n      swap2\n      pop\n        /* \"#utility.yul\":2424:2696   */\n      pop\n        /* \"#utility.yul\":2332:2696   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2702:3068   */\n    tag_185:\n        /* \"#utility.yul\":2844:2847   */\n      0x00\n        /* \"#utility.yul\":2865:2932   */\n      tag_187\n        /* \"#utility.yul\":2929:2931   */\n      0x23\n        /* \"#utility.yul\":2924:2927   */\n      dup4\n        /* \"#utility.yul\":2865:2932   */\n      tag_180\n      jump\t// in\n    tag_187:\n        /* \"#utility.yul\":2858:2932   */\n      swap2\n      pop\n        /* \"#utility.yul\":2941:3034   */\n      tag_188\n        /* \"#utility.yul\":3030:3033   */\n      dup3\n        /* \"#utility.yul\":2941:3034   */\n      tag_189\n      jump\t// in\n    tag_188:\n        /* \"#utility.yul\":3059:3061   */\n      0x40\n        /* \"#utility.yul\":3054:3057   */\n      dup3\n        /* \"#utility.yul\":3050:3062   */\n      add\n        /* \"#utility.yul\":3043:3062   */\n      swap1\n      pop\n        /* \"#utility.yul\":2702:3068   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3074:3440   */\n    tag_190:\n        /* \"#utility.yul\":3216:3219   */\n      0x00\n        /* \"#utility.yul\":3237:3304   */\n      tag_192\n        /* \"#utility.yul\":3301:3303   */\n      0x22\n        /* \"#utility.yul\":3296:3299   */\n      dup4\n        /* \"#utility.yul\":3237:3304   */\n      tag_180\n      jump\t// in\n    tag_192:\n        /* \"#utility.yul\":3230:3304   */\n      swap2\n      pop\n        /* \"#utility.yul\":3313:3406   */\n      tag_193\n        /* \"#utility.yul\":3402:3405   */\n      dup3\n        /* \"#utility.yul\":3313:3406   */\n      tag_194\n      jump\t// in\n    tag_193:\n        /* \"#utility.yul\":3431:3433   */\n      0x40\n        /* \"#utility.yul\":3426:3429   */\n      dup3\n        /* \"#utility.yul\":3422:3434   */\n      add\n        /* \"#utility.yul\":3415:3434   */\n      swap1\n      pop\n        /* \"#utility.yul\":3074:3440   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3446:3812   */\n    tag_195:\n        /* \"#utility.yul\":3588:3591   */\n      0x00\n        /* \"#utility.yul\":3609:3676   */\n      tag_197\n        /* \"#utility.yul\":3673:3675   */\n      0x1d\n        /* \"#utility.yul\":3668:3671   */\n      dup4\n        /* \"#utility.yul\":3609:3676   */\n      tag_180\n      jump\t// in\n    tag_197:\n        /* \"#utility.yul\":3602:3676   */\n      swap2\n      pop\n        /* \"#utility.yul\":3685:3778   */\n      tag_198\n        /* \"#utility.yul\":3774:3777   */\n      dup3\n        /* \"#utility.yul\":3685:3778   */\n      tag_199\n      jump\t// in\n    tag_198:\n        /* \"#utility.yul\":3803:3805   */\n      0x20\n        /* \"#utility.yul\":3798:3801   */\n      dup3\n        /* \"#utility.yul\":3794:3806   */\n      add\n        /* \"#utility.yul\":3787:3806   */\n      swap1\n      pop\n        /* \"#utility.yul\":3446:3812   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3818:4184   */\n    tag_200:\n        /* \"#utility.yul\":3960:3963   */\n      0x00\n        /* \"#utility.yul\":3981:4048   */\n      tag_202\n        /* \"#utility.yul\":4045:4047   */\n      0x26\n        /* \"#utility.yul\":4040:4043   */\n      dup4\n        /* \"#utility.yul\":3981:4048   */\n      tag_180\n      jump\t// in\n    tag_202:\n        /* \"#utility.yul\":3974:4048   */\n      swap2\n      pop\n        /* \"#utility.yul\":4057:4150   */\n      tag_203\n        /* \"#utility.yul\":4146:4149   */\n      dup3\n        /* \"#utility.yul\":4057:4150   */\n      tag_204\n      jump\t// in\n    tag_203:\n        /* \"#utility.yul\":4175:4177   */\n      0x40\n        /* \"#utility.yul\":4170:4173   */\n      dup3\n        /* \"#utility.yul\":4166:4178   */\n      add\n        /* \"#utility.yul\":4159:4178   */\n      swap1\n      pop\n        /* \"#utility.yul\":3818:4184   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4190:4556   */\n    tag_205:\n        /* \"#utility.yul\":4332:4335   */\n      0x00\n        /* \"#utility.yul\":4353:4420   */\n      tag_207\n        /* \"#utility.yul\":4417:4419   */\n      0x25\n        /* \"#utility.yul\":4412:4415   */\n      dup4\n        /* \"#utility.yul\":4353:4420   */\n      tag_180\n      jump\t// in\n    tag_207:\n        /* \"#utility.yul\":4346:4420   */\n      swap2\n      pop\n        /* \"#utility.yul\":4429:4522   */\n      tag_208\n        /* \"#utility.yul\":4518:4521   */\n      dup3\n        /* \"#utility.yul\":4429:4522   */\n      tag_209\n      jump\t// in\n    tag_208:\n        /* \"#utility.yul\":4547:4549   */\n      0x40\n        /* \"#utility.yul\":4542:4545   */\n      dup3\n        /* \"#utility.yul\":4538:4550   */\n      add\n        /* \"#utility.yul\":4531:4550   */\n      swap1\n      pop\n        /* \"#utility.yul\":4190:4556   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4562:4928   */\n    tag_210:\n        /* \"#utility.yul\":4704:4707   */\n      0x00\n        /* \"#utility.yul\":4725:4792   */\n      tag_212\n        /* \"#utility.yul\":4789:4791   */\n      0x24\n        /* \"#utility.yul\":4784:4787   */\n      dup4\n        /* \"#utility.yul\":4725:4792   */\n      tag_180\n      jump\t// in\n    tag_212:\n        /* \"#utility.yul\":4718:4792   */\n      swap2\n      pop\n        /* \"#utility.yul\":4801:4894   */\n      tag_213\n        /* \"#utility.yul\":4890:4893   */\n      dup3\n        /* \"#utility.yul\":4801:4894   */\n      tag_214\n      jump\t// in\n    tag_213:\n        /* \"#utility.yul\":4919:4921   */\n      0x40\n        /* \"#utility.yul\":4914:4917   */\n      dup3\n        /* \"#utility.yul\":4910:4922   */\n      add\n        /* \"#utility.yul\":4903:4922   */\n      swap1\n      pop\n        /* \"#utility.yul\":4562:4928   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4934:5300   */\n    tag_215:\n        /* \"#utility.yul\":5076:5079   */\n      0x00\n        /* \"#utility.yul\":5097:5164   */\n      tag_217\n        /* \"#utility.yul\":5161:5163   */\n      0x25\n        /* \"#utility.yul\":5156:5159   */\n      dup4\n        /* \"#utility.yul\":5097:5164   */\n      tag_180\n      jump\t// in\n    tag_217:\n        /* \"#utility.yul\":5090:5164   */\n      swap2\n      pop\n        /* \"#utility.yul\":5173:5266   */\n      tag_218\n        /* \"#utility.yul\":5262:5265   */\n      dup3\n        /* \"#utility.yul\":5173:5266   */\n      tag_219\n      jump\t// in\n    tag_218:\n        /* \"#utility.yul\":5291:5293   */\n      0x40\n        /* \"#utility.yul\":5286:5289   */\n      dup3\n        /* \"#utility.yul\":5282:5294   */\n      add\n        /* \"#utility.yul\":5275:5294   */\n      swap1\n      pop\n        /* \"#utility.yul\":4934:5300   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5306:5424   */\n    tag_220:\n        /* \"#utility.yul\":5393:5417   */\n      tag_222\n        /* \"#utility.yul\":5411:5416   */\n      dup2\n        /* \"#utility.yul\":5393:5417   */\n      tag_223\n      jump\t// in\n    tag_222:\n        /* \"#utility.yul\":5388:5391   */\n      dup3\n        /* \"#utility.yul\":5381:5418   */\n      mstore\n        /* \"#utility.yul\":5306:5424   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5430:5542   */\n    tag_224:\n        /* \"#utility.yul\":5513:5535   */\n      tag_226\n        /* \"#utility.yul\":5529:5534   */\n      dup2\n        /* \"#utility.yul\":5513:5535   */\n      tag_227\n      jump\t// in\n    tag_226:\n        /* \"#utility.yul\":5508:5511   */\n      dup3\n        /* \"#utility.yul\":5501:5536   */\n      mstore\n        /* \"#utility.yul\":5430:5542   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5548:5758   */\n    tag_24:\n        /* \"#utility.yul\":5635:5639   */\n      0x00\n        /* \"#utility.yul\":5673:5675   */\n      0x20\n        /* \"#utility.yul\":5662:5671   */\n      dup3\n        /* \"#utility.yul\":5658:5676   */\n      add\n        /* \"#utility.yul\":5650:5676   */\n      swap1\n      pop\n        /* \"#utility.yul\":5686:5751   */\n      tag_229\n        /* \"#utility.yul\":5748:5749   */\n      0x00\n        /* \"#utility.yul\":5737:5746   */\n      dup4\n        /* \"#utility.yul\":5733:5750   */\n      add\n        /* \"#utility.yul\":5724:5730   */\n      dup5\n        /* \"#utility.yul\":5686:5751   */\n      tag_171\n      jump\t// in\n    tag_229:\n        /* \"#utility.yul\":5548:5758   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5764:6077   */\n    tag_18:\n        /* \"#utility.yul\":5877:5881   */\n      0x00\n        /* \"#utility.yul\":5915:5917   */\n      0x20\n        /* \"#utility.yul\":5904:5913   */\n      dup3\n        /* \"#utility.yul\":5900:5918   */\n      add\n        /* \"#utility.yul\":5892:5918   */\n      swap1\n      pop\n        /* \"#utility.yul\":5964:5973   */\n      dup2\n        /* \"#utility.yul\":5958:5962   */\n      dup2\n        /* \"#utility.yul\":5954:5974   */\n      sub\n        /* \"#utility.yul\":5950:5951   */\n      0x00\n        /* \"#utility.yul\":5939:5948   */\n      dup4\n        /* \"#utility.yul\":5935:5952   */\n      add\n        /* \"#utility.yul\":5928:5975   */\n      mstore\n        /* \"#utility.yul\":5992:6070   */\n      tag_231\n        /* \"#utility.yul\":6065:6069   */\n      dup2\n        /* \"#utility.yul\":6056:6062   */\n      dup5\n        /* \"#utility.yul\":5992:6070   */\n      tag_175\n      jump\t// in\n    tag_231:\n        /* \"#utility.yul\":5984:6070   */\n      swap1\n      pop\n        /* \"#utility.yul\":5764:6077   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6083:6502   */\n    tag_129:\n        /* \"#utility.yul\":6249:6253   */\n      0x00\n        /* \"#utility.yul\":6287:6289   */\n      0x20\n        /* \"#utility.yul\":6276:6285   */\n      dup3\n        /* \"#utility.yul\":6272:6290   */\n      add\n        /* \"#utility.yul\":6264:6290   */\n      swap1\n      pop\n        /* \"#utility.yul\":6336:6345   */\n      dup2\n        /* \"#utility.yul\":6330:6334   */\n      dup2\n        /* \"#utility.yul\":6326:6346   */\n      sub\n        /* \"#utility.yul\":6322:6323   */\n      0x00\n        /* \"#utility.yul\":6311:6320   */\n      dup4\n        /* \"#utility.yul\":6307:6324   */\n      add\n        /* \"#utility.yul\":6300:6347   */\n      mstore\n        /* \"#utility.yul\":6364:6495   */\n      tag_233\n        /* \"#utility.yul\":6490:6494   */\n      dup2\n        /* \"#utility.yul\":6364:6495   */\n      tag_185\n      jump\t// in\n    tag_233:\n        /* \"#utility.yul\":6356:6495   */\n      swap1\n      pop\n        /* \"#utility.yul\":6083:6502   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6508:6927   */\n    tag_114:\n        /* \"#utility.yul\":6674:6678   */\n      0x00\n        /* \"#utility.yul\":6712:6714   */\n      0x20\n        /* \"#utility.yul\":6701:6710   */\n      dup3\n        /* \"#utility.yul\":6697:6715   */\n      add\n        /* \"#utility.yul\":6689:6715   */\n      swap1\n      pop\n        /* \"#utility.yul\":6761:6770   */\n      dup2\n        /* \"#utility.yul\":6755:6759   */\n      dup2\n        /* \"#utility.yul\":6751:6771   */\n      sub\n        /* \"#utility.yul\":6747:6748   */\n      0x00\n        /* \"#utility.yul\":6736:6745   */\n      dup4\n        /* \"#utility.yul\":6732:6749   */\n      add\n        /* \"#utility.yul\":6725:6772   */\n      mstore\n        /* \"#utility.yul\":6789:6920   */\n      tag_235\n        /* \"#utility.yul\":6915:6919   */\n      dup2\n        /* \"#utility.yul\":6789:6920   */\n      tag_190\n      jump\t// in\n    tag_235:\n        /* \"#utility.yul\":6781:6920   */\n      swap1\n      pop\n        /* \"#utility.yul\":6508:6927   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6933:7352   */\n    tag_121:\n        /* \"#utility.yul\":7099:7103   */\n      0x00\n        /* \"#utility.yul\":7137:7139   */\n      0x20\n        /* \"#utility.yul\":7126:7135   */\n      dup3\n        /* \"#utility.yul\":7122:7140   */\n      add\n        /* \"#utility.yul\":7114:7140   */\n      swap1\n      pop\n        /* \"#utility.yul\":7186:7195   */\n      dup2\n        /* \"#utility.yul\":7180:7184   */\n      dup2\n        /* \"#utility.yul\":7176:7196   */\n      sub\n        /* \"#utility.yul\":7172:7173   */\n      0x00\n        /* \"#utility.yul\":7161:7170   */\n      dup4\n        /* \"#utility.yul\":7157:7174   */\n      add\n        /* \"#utility.yul\":7150:7197   */\n      mstore\n        /* \"#utility.yul\":7214:7345   */\n      tag_237\n        /* \"#utility.yul\":7340:7344   */\n      dup2\n        /* \"#utility.yul\":7214:7345   */\n      tag_195\n      jump\t// in\n    tag_237:\n        /* \"#utility.yul\":7206:7345   */\n      swap1\n      pop\n        /* \"#utility.yul\":6933:7352   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":7358:7777   */\n    tag_134:\n        /* \"#utility.yul\":7524:7528   */\n      0x00\n        /* \"#utility.yul\":7562:7564   */\n      0x20\n        /* \"#utility.yul\":7551:7560   */\n      dup3\n        /* \"#utility.yul\":7547:7565   */\n      add\n        /* \"#utility.yul\":7539:7565   */\n      swap1\n      pop\n        /* \"#utility.yul\":7611:7620   */\n      dup2\n        /* \"#utility.yul\":7605:7609   */\n      dup2\n        /* \"#utility.yul\":7601:7621   */\n      sub\n        /* \"#utility.yul\":7597:7598   */\n      0x00\n        /* \"#utility.yul\":7586:7595   */\n      dup4\n        /* \"#utility.yul\":7582:7599   */\n      add\n        /* \"#utility.yul\":7575:7622   */\n      mstore\n        /* \"#utility.yul\":7639:7770   */\n      tag_239\n        /* \"#utility.yul\":7765:7769   */\n      dup2\n        /* \"#utility.yul\":7639:7770   */\n      tag_200\n      jump\t// in\n    tag_239:\n        /* \"#utility.yul\":7631:7770   */\n      swap1\n      pop\n        /* \"#utility.yul\":7358:7777   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":7783:8202   */\n    tag_126:\n        /* \"#utility.yul\":7949:7953   */\n      0x00\n        /* \"#utility.yul\":7987:7989   */\n      0x20\n        /* \"#utility.yul\":7976:7985   */\n      dup3\n        /* \"#utility.yul\":7972:7990   */\n      add\n        /* \"#utility.yul\":7964:7990   */\n      swap1\n      pop\n        /* \"#utility.yul\":8036:8045   */\n      dup2\n        /* \"#utility.yul\":8030:8034   */\n      dup2\n        /* \"#utility.yul\":8026:8046   */\n      sub\n        /* \"#utility.yul\":8022:8023   */\n      0x00\n        /* \"#utility.yul\":8011:8020   */\n      dup4\n        /* \"#utility.yul\":8007:8024   */\n      add\n        /* \"#utility.yul\":8000:8047   */\n      mstore\n        /* \"#utility.yul\":8064:8195   */\n      tag_241\n        /* \"#utility.yul\":8190:8194   */\n      dup2\n        /* \"#utility.yul\":8064:8195   */\n      tag_205\n      jump\t// in\n    tag_241:\n        /* \"#utility.yul\":8056:8195   */\n      swap1\n      pop\n        /* \"#utility.yul\":7783:8202   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":8208:8627   */\n    tag_111:\n        /* \"#utility.yul\":8374:8378   */\n      0x00\n        /* \"#utility.yul\":8412:8414   */\n      0x20\n        /* \"#utility.yul\":8401:8410   */\n      dup3\n        /* \"#utility.yul\":8397:8415   */\n      add\n        /* \"#utility.yul\":8389:8415   */\n      swap1\n      pop\n        /* \"#utility.yul\":8461:8470   */\n      dup2\n        /* \"#utility.yul\":8455:8459   */\n      dup2\n        /* \"#utility.yul\":8451:8471   */\n      sub\n        /* \"#utility.yul\":8447:8448   */\n      0x00\n        /* \"#utility.yul\":8436:8445   */\n      dup4\n        /* \"#utility.yul\":8432:8449   */\n      add\n        /* \"#utility.yul\":8425:8472   */\n      mstore\n        /* \"#utility.yul\":8489:8620   */\n      tag_243\n        /* \"#utility.yul\":8615:8619   */\n      dup2\n        /* \"#utility.yul\":8489:8620   */\n      tag_210\n      jump\t// in\n    tag_243:\n        /* \"#utility.yul\":8481:8620   */\n      swap1\n      pop\n        /* \"#utility.yul\":8208:8627   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":8633:9052   */\n    tag_101:\n        /* \"#utility.yul\":8799:8803   */\n      0x00\n        /* \"#utility.yul\":8837:8839   */\n      0x20\n        /* \"#utility.yul\":8826:8835   */\n      dup3\n        /* \"#utility.yul\":8822:8840   */\n      add\n        /* \"#utility.yul\":8814:8840   */\n      swap1\n      pop\n        /* \"#utility.yul\":8886:8895   */\n      dup2\n        /* \"#utility.yul\":8880:8884   */\n      dup2\n        /* \"#utility.yul\":8876:8896   */\n      sub\n        /* \"#utility.yul\":8872:8873   */\n      0x00\n        /* \"#utility.yul\":8861:8870   */\n      dup4\n        /* \"#utility.yul\":8857:8874   */\n      add\n        /* \"#utility.yul\":8850:8897   */\n      mstore\n        /* \"#utility.yul\":8914:9045   */\n      tag_245\n        /* \"#utility.yul\":9040:9044   */\n      dup2\n        /* \"#utility.yul\":8914:9045   */\n      tag_215\n      jump\t// in\n    tag_245:\n        /* \"#utility.yul\":8906:9045   */\n      swap1\n      pop\n        /* \"#utility.yul\":8633:9052   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":9058:9280   */\n    tag_28:\n        /* \"#utility.yul\":9151:9155   */\n      0x00\n        /* \"#utility.yul\":9189:9191   */\n      0x20\n        /* \"#utility.yul\":9178:9187   */\n      dup3\n        /* \"#utility.yul\":9174:9192   */\n      add\n        /* \"#utility.yul\":9166:9192   */\n      swap1\n      pop\n        /* \"#utility.yul\":9202:9273   */\n      tag_247\n        /* \"#utility.yul\":9270:9271   */\n      0x00\n        /* \"#utility.yul\":9259:9268   */\n      dup4\n        /* \"#utility.yul\":9255:9272   */\n      add\n        /* \"#utility.yul\":9246:9252   */\n      dup5\n        /* \"#utility.yul\":9202:9273   */\n      tag_220\n      jump\t// in\n    tag_247:\n        /* \"#utility.yul\":9058:9280   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":9286:9500   */\n    tag_37:\n        /* \"#utility.yul\":9375:9379   */\n      0x00\n        /* \"#utility.yul\":9413:9415   */\n      0x20\n        /* \"#utility.yul\":9402:9411   */\n      dup3\n        /* \"#utility.yul\":9398:9416   */\n      add\n        /* \"#utility.yul\":9390:9416   */\n      swap1\n      pop\n        /* \"#utility.yul\":9426:9493   */\n      tag_249\n        /* \"#utility.yul\":9490:9491   */\n      0x00\n        /* \"#utility.yul\":9479:9488   */\n      dup4\n        /* \"#utility.yul\":9475:9492   */\n      add\n        /* \"#utility.yul\":9466:9472   */\n      dup5\n        /* \"#utility.yul\":9426:9493   */\n      tag_224\n      jump\t// in\n    tag_249:\n        /* \"#utility.yul\":9286:9500   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":9587:9686   */\n    tag_178:\n        /* \"#utility.yul\":9639:9645   */\n      0x00\n        /* \"#utility.yul\":9673:9678   */\n      dup2\n        /* \"#utility.yul\":9667:9679   */\n      mload\n        /* \"#utility.yul\":9657:9679   */\n      swap1\n      pop\n        /* \"#utility.yul\":9587:9686   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":9692:9861   */\n    tag_180:\n        /* \"#utility.yul\":9776:9787   */\n      0x00\n        /* \"#utility.yul\":9810:9816   */\n      dup3\n        /* \"#utility.yul\":9805:9808   */\n      dup3\n        /* \"#utility.yul\":9798:9817   */\n      mstore\n        /* \"#utility.yul\":9850:9854   */\n      0x20\n        /* \"#utility.yul\":9845:9848   */\n      dup3\n        /* \"#utility.yul\":9841:9855   */\n      add\n        /* \"#utility.yul\":9826:9855   */\n      swap1\n      pop\n        /* \"#utility.yul\":9692:9861   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":9867:10172   */\n    tag_88:\n        /* \"#utility.yul\":9907:9910   */\n      0x00\n        /* \"#utility.yul\":9926:9946   */\n      tag_255\n        /* \"#utility.yul\":9944:9945   */\n      dup3\n        /* \"#utility.yul\":9926:9946   */\n      tag_223\n      jump\t// in\n    tag_255:\n        /* \"#utility.yul\":9921:9946   */\n      swap2\n      pop\n        /* \"#utility.yul\":9960:9980   */\n      tag_256\n        /* \"#utility.yul\":9978:9979   */\n      dup4\n        /* \"#utility.yul\":9960:9980   */\n      tag_223\n      jump\t// in\n    tag_256:\n        /* \"#utility.yul\":9955:9980   */\n      swap3\n      pop\n        /* \"#utility.yul\":10114:10115   */\n      dup3\n        /* \"#utility.yul\":10046:10112   */\n      0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n        /* \"#utility.yul\":10042:10116   */\n      sub\n        /* \"#utility.yul\":10039:10040   */\n      dup3\n        /* \"#utility.yul\":10036:10117   */\n      gt\n        /* \"#utility.yul\":10033:10140   */\n      iszero\n      tag_257\n      jumpi\n        /* \"#utility.yul\":10120:10138   */\n      tag_258\n      tag_259\n      jump\t// in\n    tag_258:\n        /* \"#utility.yul\":10033:10140   */\n    tag_257:\n        /* \"#utility.yul\":10164:10165   */\n      dup3\n        /* \"#utility.yul\":10161:10162   */\n      dup3\n        /* \"#utility.yul\":10157:10166   */\n      add\n        /* \"#utility.yul\":10150:10166   */\n      swap1\n      pop\n        /* \"#utility.yul\":9867:10172   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":10178:10274   */\n    tag_260:\n        /* \"#utility.yul\":10215:10222   */\n      0x00\n        /* \"#utility.yul\":10244:10268   */\n      tag_262\n        /* \"#utility.yul\":10262:10267   */\n      dup3\n        /* \"#utility.yul\":10244:10268   */\n      tag_263\n      jump\t// in\n    tag_262:\n        /* \"#utility.yul\":10233:10268   */\n      swap1\n      pop\n        /* \"#utility.yul\":10178:10274   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":10280:10370   */\n    tag_174:\n        /* \"#utility.yul\":10314:10321   */\n      0x00\n        /* \"#utility.yul\":10357:10362   */\n      dup2\n        /* \"#utility.yul\":10350:10363   */\n      iszero\n        /* \"#utility.yul\":10343:10364   */\n      iszero\n        /* \"#utility.yul\":10332:10364   */\n      swap1\n      pop\n        /* \"#utility.yul\":10280:10370   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":10376:10502   */\n    tag_263:\n        /* \"#utility.yul\":10413:10420   */\n      0x00\n        /* \"#utility.yul\":10453:10495   */\n      0xffffffffffffffffffffffffffffffffffffffff\n        /* \"#utility.yul\":10446:10451   */\n      dup3\n        /* \"#utility.yul\":10442:10496   */\n      and\n        /* \"#utility.yul\":10431:10496   */\n      swap1\n      pop\n        /* \"#utility.yul\":10376:10502   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":10508:10585   */\n    tag_223:\n        /* \"#utility.yul\":10545:10552   */\n      0x00\n        /* \"#utility.yul\":10574:10579   */\n      dup2\n        /* \"#utility.yul\":10563:10579   */\n      swap1\n      pop\n        /* \"#utility.yul\":10508:10585   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":10591:10677   */\n    tag_227:\n        /* \"#utility.yul\":10626:10633   */\n      0x00\n        /* \"#utility.yul\":10666:10670   */\n      0xff\n        /* \"#utility.yul\":10659:10664   */\n      dup3\n        /* \"#utility.yul\":10655:10671   */\n      and\n        /* \"#utility.yul\":10644:10671   */\n      swap1\n      pop\n        /* \"#utility.yul\":10591:10677   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":10683:10990   */\n    tag_182:\n        /* \"#utility.yul\":10751:10752   */\n      0x00\n        /* \"#utility.yul\":10761:10874   */\n    tag_269:\n        /* \"#utility.yul\":10775:10781   */\n      dup4\n        /* \"#utility.yul\":10772:10773   */\n      dup2\n        /* \"#utility.yul\":10769:10782   */\n      lt\n        /* \"#utility.yul\":10761:10874   */\n      iszero\n      tag_271\n      jumpi\n        /* \"#utility.yul\":10860:10861   */\n      dup1\n        /* \"#utility.yul\":10855:10858   */\n      dup3\n        /* \"#utility.yul\":10851:10862   */\n      add\n        /* \"#utility.yul\":10845:10863   */\n      mload\n        /* \"#utility.yul\":10841:10842   */\n      dup2\n        /* \"#utility.yul\":10836:10839   */\n      dup5\n        /* \"#utility.yul\":10832:10843   */\n      add\n        /* \"#utility.yul\":10825:10864   */\n      mstore\n        /* \"#utility.yul\":10797:10799   */\n      0x20\n        /* \"#utility.yul\":10794:10795   */\n      dup2\n        /* \"#utility.yul\":10790:10800   */\n      add\n        /* \"#utility.yul\":10785:10800   */\n      swap1\n      pop\n        /* \"#utility.yul\":10761:10874   */\n      jump(tag_269)\n    tag_271:\n        /* \"#utility.yul\":10892:10898   */\n      dup4\n        /* \"#utility.yul\":10889:10890   */\n      dup2\n        /* \"#utility.yul\":10886:10899   */\n      gt\n        /* \"#utility.yul\":10883:10984   */\n      iszero\n      tag_272\n      jumpi\n        /* \"#utility.yul\":10972:10973   */\n      0x00\n        /* \"#utility.yul\":10963:10969   */\n      dup5\n        /* \"#utility.yul\":10958:10961   */\n      dup5\n        /* \"#utility.yul\":10954:10970   */\n      add\n        /* \"#utility.yul\":10947:10974   */\n      mstore\n        /* \"#utility.yul\":10883:10984   */\n    tag_272:\n        /* \"#utility.yul\":10732:10990   */\n      pop\n        /* \"#utility.yul\":10683:10990   */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":10996:11316   */\n    tag_65:\n        /* \"#utility.yul\":11040:11046   */\n      0x00\n        /* \"#utility.yul\":11077:11078   */\n      0x02\n        /* \"#utility.yul\":11071:11075   */\n      dup3\n        /* \"#utility.yul\":11067:11079   */\n      div\n        /* \"#utility.yul\":11057:11079   */\n      swap1\n      pop\n        /* \"#utility.yul\":11124:11125   */\n      0x01\n        /* \"#utility.yul\":11118:11122   */\n      dup3\n        /* \"#utility.yul\":11114:11126   */\n      and\n        /* \"#utility.yul\":11145:11163   */\n      dup1\n        /* \"#utility.yul\":11135:11216   */\n      tag_274\n      jumpi\n        /* \"#utility.yul\":11201:11205   */\n      0x7f\n        /* \"#utility.yul\":11193:11199   */\n      dup3\n        /* \"#utility.yul\":11189:11206   */\n      and\n        /* \"#utility.yul\":11179:11206   */\n      swap2\n      pop\n        /* \"#utility.yul\":11135:11216   */\n    tag_274:\n        /* \"#utility.yul\":11263:11265   */\n      0x20\n        /* \"#utility.yul\":11255:11261   */\n      dup3\n        /* \"#utility.yul\":11252:11266   */\n      lt\n        /* \"#utility.yul\":11232:11250   */\n      dup2\n        /* \"#utility.yul\":11229:11267   */\n      eq\n        /* \"#utility.yul\":11226:11310   */\n      iszero\n      tag_275\n      jumpi\n        /* \"#utility.yul\":11282:11300   */\n      tag_276\n      tag_277\n      jump\t// in\n    tag_276:\n        /* \"#utility.yul\":11226:11310   */\n    tag_275:\n        /* \"#utility.yul\":11047:11316   */\n      pop\n        /* \"#utility.yul\":10996:11316   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":11322:11502   */\n    tag_259:\n        /* \"#utility.yul\":11370:11447   */\n      0x4e487b7100000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":11367:11368   */\n      0x00\n        /* \"#utility.yul\":11360:11448   */\n      mstore\n        /* \"#utility.yul\":11467:11471   */\n      0x11\n        /* \"#utility.yul\":11464:11465   */\n      0x04\n        /* \"#utility.yul\":11457:11472   */\n      mstore\n        /* \"#utility.yul\":11491:11495   */\n      0x24\n        /* \"#utility.yul\":11488:11489   */\n      0x00\n        /* \"#utility.yul\":11481:11496   */\n      revert\n        /* \"#utility.yul\":11508:11688   */\n    tag_277:\n        /* \"#utility.yul\":11556:11633   */\n      0x4e487b7100000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":11553:11554   */\n      0x00\n        /* \"#utility.yul\":11546:11634   */\n      mstore\n        /* \"#utility.yul\":11653:11657   */\n      0x22\n        /* \"#utility.yul\":11650:11651   */\n      0x04\n        /* \"#utility.yul\":11643:11658   */\n      mstore\n        /* \"#utility.yul\":11677:11681   */\n      0x24\n        /* \"#utility.yul\":11674:11675   */\n      0x00\n        /* \"#utility.yul\":11667:11682   */\n      revert\n        /* \"#utility.yul\":11817:11934   */\n    tag_153:\n        /* \"#utility.yul\":11926:11927   */\n      0x00\n        /* \"#utility.yul\":11923:11924   */\n      dup1\n        /* \"#utility.yul\":11916:11928   */\n      revert\n        /* \"#utility.yul\":11940:12042   */\n    tag_184:\n        /* \"#utility.yul\":11981:11987   */\n      0x00\n        /* \"#utility.yul\":12032:12034   */\n      0x1f\n        /* \"#utility.yul\":12028:12035   */\n      not\n        /* \"#utility.yul\":12023:12025   */\n      0x1f\n        /* \"#utility.yul\":12016:12021   */\n      dup4\n        /* \"#utility.yul\":12012:12026   */\n      add\n        /* \"#utility.yul\":12008:12036   */\n      and\n        /* \"#utility.yul\":11998:12036   */\n      swap1\n      pop\n        /* \"#utility.yul\":11940:12042   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":12048:12270   */\n    tag_189:\n        /* \"#utility.yul\":12188:12222   */\n      0x45524332303a207472616e7366657220746f20746865207a65726f2061646472\n        /* \"#utility.yul\":12184:12185   */\n      0x00\n        /* \"#utility.yul\":12176:12182   */\n      dup3\n        /* \"#utility.yul\":12172:12186   */\n      add\n        /* \"#utility.yul\":12165:12223   */\n      mstore\n        /* \"#utility.yul\":12257:12262   */\n      0x6573730000000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":12252:12254   */\n      0x20\n        /* \"#utility.yul\":12244:12250   */\n      dup3\n        /* \"#utility.yul\":12240:12255   */\n      add\n        /* \"#utility.yul\":12233:12263   */\n      mstore\n        /* \"#utility.yul\":12048:12270   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":12276:12497   */\n    tag_194:\n        /* \"#utility.yul\":12416:12450   */\n      0x45524332303a20617070726f766520746f20746865207a65726f206164647265\n        /* \"#utility.yul\":12412:12413   */\n      0x00\n        /* \"#utility.yul\":12404:12410   */\n      dup3\n        /* \"#utility.yul\":12400:12414   */\n      add\n        /* \"#utility.yul\":12393:12451   */\n      mstore\n        /* \"#utility.yul\":12485:12489   */\n      0x7373000000000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":12480:12482   */\n      0x20\n        /* \"#utility.yul\":12472:12478   */\n      dup3\n        /* \"#utility.yul\":12468:12483   */\n      add\n        /* \"#utility.yul\":12461:12490   */\n      mstore\n        /* \"#utility.yul\":12276:12497   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":12503:12682   */\n    tag_199:\n        /* \"#utility.yul\":12643:12674   */\n      0x45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000\n        /* \"#utility.yul\":12639:12640   */\n      0x00\n        /* \"#utility.yul\":12631:12637   */\n      dup3\n        /* \"#utility.yul\":12627:12641   */\n      add\n        /* \"#utility.yul\":12620:12675   */\n      mstore\n        /* \"#utility.yul\":12503:12682   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":12688:12913   */\n    tag_204:\n        /* \"#utility.yul\":12828:12862   */\n      0x45524332303a207472616e7366657220616d6f756e7420657863656564732062\n        /* \"#utility.yul\":12824:12825   */\n      0x00\n        /* \"#utility.yul\":12816:12822   */\n      dup3\n        /* \"#utility.yul\":12812:12826   */\n      add\n        /* \"#utility.yul\":12805:12863   */\n      mstore\n        /* \"#utility.yul\":12897:12905   */\n      0x616c616e63650000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":12892:12894   */\n      0x20\n        /* \"#utility.yul\":12884:12890   */\n      dup3\n        /* \"#utility.yul\":12880:12895   */\n      add\n        /* \"#utility.yul\":12873:12906   */\n      mstore\n        /* \"#utility.yul\":12688:12913   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":12919:13143   */\n    tag_209:\n        /* \"#utility.yul\":13059:13093   */\n      0x45524332303a207472616e736665722066726f6d20746865207a65726f206164\n        /* \"#utility.yul\":13055:13056   */\n      0x00\n        /* \"#utility.yul\":13047:13053   */\n      dup3\n        /* \"#utility.yul\":13043:13057   */\n      add\n        /* \"#utility.yul\":13036:13094   */\n      mstore\n        /* \"#utility.yul\":13128:13135   */\n      0x6472657373000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":13123:13125   */\n      0x20\n        /* \"#utility.yul\":13115:13121   */\n      dup3\n        /* \"#utility.yul\":13111:13126   */\n      add\n        /* \"#utility.yul\":13104:13136   */\n      mstore\n        /* \"#utility.yul\":12919:13143   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":13149:13372   */\n    tag_214:\n        /* \"#utility.yul\":13289:13323   */\n      0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464\n        /* \"#utility.yul\":13285:13286   */\n      0x00\n        /* \"#utility.yul\":13277:13283   */\n      dup3\n        /* \"#utility.yul\":13273:13287   */\n      add\n        /* \"#utility.yul\":13266:13324   */\n      mstore\n        /* \"#utility.yul\":13358:13364   */\n      0x7265737300000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":13353:13355   */\n      0x20\n        /* \"#utility.yul\":13345:13351   */\n      dup3\n        /* \"#utility.yul\":13341:13356   */\n      add\n        /* \"#utility.yul\":13334:13365   */\n      mstore\n        /* \"#utility.yul\":13149:13372   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":13378:13602   */\n    tag_219:\n        /* \"#utility.yul\":13518:13552   */\n      0x45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77\n        /* \"#utility.yul\":13514:13515   */\n      0x00\n        /* \"#utility.yul\":13506:13512   */\n      dup3\n        /* \"#utility.yul\":13502:13516   */\n      add\n        /* \"#utility.yul\":13495:13553   */\n      mstore\n        /* \"#utility.yul\":13587:13594   */\n      0x207a65726f000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":13582:13584   */\n      0x20\n        /* \"#utility.yul\":13574:13580   */\n      dup3\n        /* \"#utility.yul\":13570:13585   */\n      add\n        /* \"#utility.yul\":13563:13595   */\n      mstore\n        /* \"#utility.yul\":13378:13602   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":13608:13730   */\n    tag_145:\n        /* \"#utility.yul\":13681:13705   */\n      tag_292\n        /* \"#utility.yul\":13699:13704   */\n      dup2\n        /* \"#utility.yul\":13681:13705   */\n      tag_260\n      jump\t// in\n    tag_292:\n        /* \"#utility.yul\":13674:13679   */\n      dup2\n        /* \"#utility.yul\":13671:13706   */\n      eq\n        /* \"#utility.yul\":13661:13724   */\n      tag_293\n      jumpi\n        /* \"#utility.yul\":13720:13721   */\n      0x00\n        /* \"#utility.yul\":13717:13718   */\n      dup1\n        /* \"#utility.yul\":13710:13722   */\n      revert\n        /* \"#utility.yul\":13661:13724   */\n    tag_293:\n        /* \"#utility.yul\":13608:13730   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":13736:13858   */\n    tag_149:\n        /* \"#utility.yul\":13809:13833   */\n      tag_295\n        /* \"#utility.yul\":13827:13832   */\n      dup2\n        /* \"#utility.yul\":13809:13833   */\n      tag_223\n      jump\t// in\n    tag_295:\n        /* \"#utility.yul\":13802:13807   */\n      dup2\n        /* \"#utility.yul\":13799:13834   */\n      eq\n        /* \"#utility.yul\":13789:13852   */\n      tag_296\n      jumpi\n        /* \"#utility.yul\":13848:13849   */\n      0x00\n        /* \"#utility.yul\":13845:13846   */\n      dup1\n        /* \"#utility.yul\":13838:13850   */\n      revert\n        /* \"#utility.yul\":13789:13852   */\n    tag_296:\n        /* \"#utility.yul\":13736:13858   */\n      pop\n      jump\t// out\n\n    auxdata: 0xa264697066735822122062dbf59ade107786d1f70754e60260c226abb9247426681ee5c7f06416e441e864736f6c63430008070033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b5061126c806100206000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c80633950935111610071578063395093511461016857806370a082311461019857806395d89b41146101c8578063a457c2d7146101e6578063a9059cbb14610216578063dd62ed3e14610246576100a9565b806306fdde03146100ae578063095ea7b3146100cc57806318160ddd146100fc57806323b872dd1461011a578063313ce5671461014a575b600080fd5b6100b6610276565b6040516100c39190610d2d565b60405180910390f35b6100e660048036038101906100e19190610b77565b610308565b6040516100f39190610d12565b60405180910390f35b61010461032b565b6040516101119190610e2f565b60405180910390f35b610134600480360381019061012f9190610b24565b610335565b6040516101419190610d12565b60405180910390f35b610152610364565b60405161015f9190610e4a565b60405180910390f35b610182600480360381019061017d9190610b77565b61036d565b60405161018f9190610d12565b60405180910390f35b6101b260048036038101906101ad9190610ab7565b6103a4565b6040516101bf9190610e2f565b60405180910390f35b6101d06103ed565b6040516101dd9190610d2d565b60405180910390f35b61020060048036038101906101fb9190610b77565b61047f565b60405161020d9190610d12565b60405180910390f35b610230600480360381019061022b9190610b77565b6104f6565b60405161023d9190610d12565b60405180910390f35b610260600480360381019061025b9190610ae4565b610519565b60405161026d9190610e2f565b60405180910390f35b60606036805461028590610f5f565b80601f01602080910402602001604051908101604052809291908181526020018280546102b190610f5f565b80156102fe5780601f106102d3576101008083540402835291602001916102fe565b820191906000526020600020905b8154815290600101906020018083116102e157829003601f168201915b5050505050905090565b6000806103136105a0565b90506103208185856105a8565b600191505092915050565b6000603554905090565b6000806103406105a0565b905061034d858285610773565b6103588585856107ff565b60019150509392505050565b60006012905090565b6000806103786105a0565b905061039981858561038a8589610519565b6103949190610e81565b6105a8565b600191505092915050565b6000603360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6060603780546103fc90610f5f565b80601f016020809104026020016040519081016040528092919081815260200182805461042890610f5f565b80156104755780601f1061044a57610100808354040283529160200191610475565b820191906000526020600020905b81548152906001019060200180831161045857829003601f168201915b5050505050905090565b60008061048a6105a0565b905060006104988286610519565b9050838110156104dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104d490610e0f565b60405180910390fd5b6104ea82868684036105a8565b60019250505092915050565b6000806105016105a0565b905061050e8185856107ff565b600191505092915050565b6000603460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610618576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060f90610def565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610688576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067f90610d6f565b60405180910390fd5b80603460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040516107669190610e2f565b60405180910390a3505050565b600061077f8484610519565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146107f957818110156107eb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107e290610d8f565b60405180910390fd5b6107f884848484036105a8565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561086f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161086690610dcf565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156108df576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108d690610d4f565b60405180910390fd5b6108ea838383610a83565b6000603360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015610971576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161096890610daf565b60405180910390fd5b818103603360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081603360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610a069190610e81565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610a6a9190610e2f565b60405180910390a3610a7d848484610a88565b50505050565b505050565b505050565b600081359050610a9c81611208565b92915050565b600081359050610ab18161121f565b92915050565b600060208284031215610acd57610acc610fef565b5b6000610adb84828501610a8d565b91505092915050565b60008060408385031215610afb57610afa610fef565b5b6000610b0985828601610a8d565b9250506020610b1a85828601610a8d565b9150509250929050565b600080600060608486031215610b3d57610b3c610fef565b5b6000610b4b86828701610a8d565b9350506020610b5c86828701610a8d565b9250506040610b6d86828701610aa2565b9150509250925092565b60008060408385031215610b8e57610b8d610fef565b5b6000610b9c85828601610a8d565b9250506020610bad85828601610aa2565b9150509250929050565b610bc081610ee9565b82525050565b6000610bd182610e65565b610bdb8185610e70565b9350610beb818560208601610f2c565b610bf481610ff4565b840191505092915050565b6000610c0c602383610e70565b9150610c1782611005565b604082019050919050565b6000610c2f602283610e70565b9150610c3a82611054565b604082019050919050565b6000610c52601d83610e70565b9150610c5d826110a3565b602082019050919050565b6000610c75602683610e70565b9150610c80826110cc565b604082019050919050565b6000610c98602583610e70565b9150610ca38261111b565b604082019050919050565b6000610cbb602483610e70565b9150610cc68261116a565b604082019050919050565b6000610cde602583610e70565b9150610ce9826111b9565b604082019050919050565b610cfd81610f15565b82525050565b610d0c81610f1f565b82525050565b6000602082019050610d276000830184610bb7565b92915050565b60006020820190508181036000830152610d478184610bc6565b905092915050565b60006020820190508181036000830152610d6881610bff565b9050919050565b60006020820190508181036000830152610d8881610c22565b9050919050565b60006020820190508181036000830152610da881610c45565b9050919050565b60006020820190508181036000830152610dc881610c68565b9050919050565b60006020820190508181036000830152610de881610c8b565b9050919050565b60006020820190508181036000830152610e0881610cae565b9050919050565b60006020820190508181036000830152610e2881610cd1565b9050919050565b6000602082019050610e446000830184610cf4565b92915050565b6000602082019050610e5f6000830184610d03565b92915050565b600081519050919050565b600082825260208201905092915050565b6000610e8c82610f15565b9150610e9783610f15565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610ecc57610ecb610f91565b5b828201905092915050565b6000610ee282610ef5565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60005b83811015610f4a578082015181840152602081019050610f2f565b83811115610f59576000848401525b50505050565b60006002820490506001821680610f7757607f821691505b60208210811415610f8b57610f8a610fc0565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600080fd5b6000601f19601f8301169050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000600082015250565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b61121181610ed7565b811461121c57600080fd5b50565b61122881610f15565b811461123357600080fd5b5056fea264697066735822122062dbf59ade107786d1f70754e60260c226abb9247426681ee5c7f06416e441e864736f6c63430008070033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x126C DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xA9 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x39509351 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x168 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x198 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x1C8 JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x1E6 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x216 JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x246 JUMPI PUSH2 0xA9 JUMP JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0xAE JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0xCC JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0xFC JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x11A JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x14A JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB6 PUSH2 0x276 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xC3 SWAP2 SWAP1 PUSH2 0xD2D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xE6 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xE1 SWAP2 SWAP1 PUSH2 0xB77 JUMP JUMPDEST PUSH2 0x308 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xF3 SWAP2 SWAP1 PUSH2 0xD12 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x104 PUSH2 0x32B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x111 SWAP2 SWAP1 PUSH2 0xE2F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x134 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x12F SWAP2 SWAP1 PUSH2 0xB24 JUMP JUMPDEST PUSH2 0x335 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x141 SWAP2 SWAP1 PUSH2 0xD12 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x152 PUSH2 0x364 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x15F SWAP2 SWAP1 PUSH2 0xE4A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x182 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x17D SWAP2 SWAP1 PUSH2 0xB77 JUMP JUMPDEST PUSH2 0x36D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x18F SWAP2 SWAP1 PUSH2 0xD12 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1B2 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1AD SWAP2 SWAP1 PUSH2 0xAB7 JUMP JUMPDEST PUSH2 0x3A4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1BF SWAP2 SWAP1 PUSH2 0xE2F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1D0 PUSH2 0x3ED JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1DD SWAP2 SWAP1 PUSH2 0xD2D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x200 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1FB SWAP2 SWAP1 PUSH2 0xB77 JUMP JUMPDEST PUSH2 0x47F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x20D SWAP2 SWAP1 PUSH2 0xD12 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x230 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x22B SWAP2 SWAP1 PUSH2 0xB77 JUMP JUMPDEST PUSH2 0x4F6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x23D SWAP2 SWAP1 PUSH2 0xD12 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x260 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x25B SWAP2 SWAP1 PUSH2 0xAE4 JUMP JUMPDEST PUSH2 0x519 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x26D SWAP2 SWAP1 PUSH2 0xE2F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x60 PUSH1 0x36 DUP1 SLOAD PUSH2 0x285 SWAP1 PUSH2 0xF5F JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x2B1 SWAP1 PUSH2 0xF5F JUMP JUMPDEST DUP1 ISZERO PUSH2 0x2FE JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x2D3 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x2FE JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x2E1 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x313 PUSH2 0x5A0 JUMP JUMPDEST SWAP1 POP PUSH2 0x320 DUP2 DUP6 DUP6 PUSH2 0x5A8 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x35 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x340 PUSH2 0x5A0 JUMP JUMPDEST SWAP1 POP PUSH2 0x34D DUP6 DUP3 DUP6 PUSH2 0x773 JUMP JUMPDEST PUSH2 0x358 DUP6 DUP6 DUP6 PUSH2 0x7FF JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x12 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x378 PUSH2 0x5A0 JUMP JUMPDEST SWAP1 POP PUSH2 0x399 DUP2 DUP6 DUP6 PUSH2 0x38A DUP6 DUP10 PUSH2 0x519 JUMP JUMPDEST PUSH2 0x394 SWAP2 SWAP1 PUSH2 0xE81 JUMP JUMPDEST PUSH2 0x5A8 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x37 DUP1 SLOAD PUSH2 0x3FC SWAP1 PUSH2 0xF5F JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x428 SWAP1 PUSH2 0xF5F JUMP JUMPDEST DUP1 ISZERO PUSH2 0x475 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x44A JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x475 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x458 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x48A PUSH2 0x5A0 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x498 DUP3 DUP7 PUSH2 0x519 JUMP JUMPDEST SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0x4DD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4D4 SWAP1 PUSH2 0xE0F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x4EA DUP3 DUP7 DUP7 DUP5 SUB PUSH2 0x5A8 JUMP JUMPDEST PUSH1 0x1 SWAP3 POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x501 PUSH2 0x5A0 JUMP JUMPDEST SWAP1 POP PUSH2 0x50E DUP2 DUP6 DUP6 PUSH2 0x7FF JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x34 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x618 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x60F SWAP1 PUSH2 0xDEF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x688 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x67F SWAP1 PUSH2 0xD6F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x34 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 DUP4 PUSH1 0x40 MLOAD PUSH2 0x766 SWAP2 SWAP1 PUSH2 0xE2F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x77F DUP5 DUP5 PUSH2 0x519 JUMP JUMPDEST SWAP1 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 EQ PUSH2 0x7F9 JUMPI DUP2 DUP2 LT ISZERO PUSH2 0x7EB JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x7E2 SWAP1 PUSH2 0xD8F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x7F8 DUP5 DUP5 DUP5 DUP5 SUB PUSH2 0x5A8 JUMP JUMPDEST JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x86F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x866 SWAP1 PUSH2 0xDCF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x8DF JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8D6 SWAP1 PUSH2 0xD4F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x8EA DUP4 DUP4 DUP4 PUSH2 0xA83 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP DUP2 DUP2 LT ISZERO PUSH2 0x971 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x968 SWAP1 PUSH2 0xDAF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 DUP2 SUB PUSH1 0x33 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP2 PUSH1 0x33 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0xA06 SWAP2 SWAP1 PUSH2 0xE81 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP5 PUSH1 0x40 MLOAD PUSH2 0xA6A SWAP2 SWAP1 PUSH2 0xE2F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0xA7D DUP5 DUP5 DUP5 PUSH2 0xA88 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST POP POP POP JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xA9C DUP2 PUSH2 0x1208 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xAB1 DUP2 PUSH2 0x121F JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xACD JUMPI PUSH2 0xACC PUSH2 0xFEF JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xADB DUP5 DUP3 DUP6 ADD PUSH2 0xA8D JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xAFB JUMPI PUSH2 0xAFA PUSH2 0xFEF JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xB09 DUP6 DUP3 DUP7 ADD PUSH2 0xA8D JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0xB1A DUP6 DUP3 DUP7 ADD PUSH2 0xA8D JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xB3D JUMPI PUSH2 0xB3C PUSH2 0xFEF JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xB4B DUP7 DUP3 DUP8 ADD PUSH2 0xA8D JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0xB5C DUP7 DUP3 DUP8 ADD PUSH2 0xA8D JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0xB6D DUP7 DUP3 DUP8 ADD PUSH2 0xAA2 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xB8E JUMPI PUSH2 0xB8D PUSH2 0xFEF JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xB9C DUP6 DUP3 DUP7 ADD PUSH2 0xA8D JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0xBAD DUP6 DUP3 DUP7 ADD PUSH2 0xAA2 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH2 0xBC0 DUP2 PUSH2 0xEE9 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xBD1 DUP3 PUSH2 0xE65 JUMP JUMPDEST PUSH2 0xBDB DUP2 DUP6 PUSH2 0xE70 JUMP JUMPDEST SWAP4 POP PUSH2 0xBEB DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0xF2C JUMP JUMPDEST PUSH2 0xBF4 DUP2 PUSH2 0xFF4 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC0C PUSH1 0x23 DUP4 PUSH2 0xE70 JUMP JUMPDEST SWAP2 POP PUSH2 0xC17 DUP3 PUSH2 0x1005 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC2F PUSH1 0x22 DUP4 PUSH2 0xE70 JUMP JUMPDEST SWAP2 POP PUSH2 0xC3A DUP3 PUSH2 0x1054 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC52 PUSH1 0x1D DUP4 PUSH2 0xE70 JUMP JUMPDEST SWAP2 POP PUSH2 0xC5D DUP3 PUSH2 0x10A3 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC75 PUSH1 0x26 DUP4 PUSH2 0xE70 JUMP JUMPDEST SWAP2 POP PUSH2 0xC80 DUP3 PUSH2 0x10CC JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC98 PUSH1 0x25 DUP4 PUSH2 0xE70 JUMP JUMPDEST SWAP2 POP PUSH2 0xCA3 DUP3 PUSH2 0x111B JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xCBB PUSH1 0x24 DUP4 PUSH2 0xE70 JUMP JUMPDEST SWAP2 POP PUSH2 0xCC6 DUP3 PUSH2 0x116A JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xCDE PUSH1 0x25 DUP4 PUSH2 0xE70 JUMP JUMPDEST SWAP2 POP PUSH2 0xCE9 DUP3 PUSH2 0x11B9 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xCFD DUP2 PUSH2 0xF15 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0xD0C DUP2 PUSH2 0xF1F JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xD27 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xBB7 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xD47 DUP2 DUP5 PUSH2 0xBC6 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xD68 DUP2 PUSH2 0xBFF JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xD88 DUP2 PUSH2 0xC22 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xDA8 DUP2 PUSH2 0xC45 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xDC8 DUP2 PUSH2 0xC68 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xDE8 DUP2 PUSH2 0xC8B JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xE08 DUP2 PUSH2 0xCAE JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xE28 DUP2 PUSH2 0xCD1 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xE44 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xCF4 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xE5F PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xD03 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xE8C DUP3 PUSH2 0xF15 JUMP JUMPDEST SWAP2 POP PUSH2 0xE97 DUP4 PUSH2 0xF15 JUMP JUMPDEST SWAP3 POP DUP3 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SUB DUP3 GT ISZERO PUSH2 0xECC JUMPI PUSH2 0xECB PUSH2 0xF91 JUMP JUMPDEST JUMPDEST DUP3 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xEE2 DUP3 PUSH2 0xEF5 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xF4A JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0xF2F JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0xF59 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0xF77 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0xF8B JUMPI PUSH2 0xF8A PUSH2 0xFC0 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6573730000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7373000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x616C616E63650000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6472657373000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7265737300000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x207A65726F000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH2 0x1211 DUP2 PUSH2 0xED7 JUMP JUMPDEST DUP2 EQ PUSH2 0x121C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x1228 DUP2 PUSH2 0xF15 JUMP JUMPDEST DUP2 EQ PUSH2 0x1233 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH3 0xDBF59A 0xDE LT PUSH24 0x86D1F70754E60260C226ABB9247426681EE5C7F06416E441 0xE8 PUSH5 0x736F6C6343 STOP ADDMOD SMOD STOP CALLER ",
							"sourceMap": "1500:12131:0:-:0;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {
								"@_afterTokenTransfer_604": {
									"entryPoint": 2696,
									"id": 604,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_approve_539": {
									"entryPoint": 1448,
									"id": 539,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_beforeTokenTransfer_593": {
									"entryPoint": 2691,
									"id": 593,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_msgSender_983": {
									"entryPoint": 1440,
									"id": 983,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_spendAllowance_582": {
									"entryPoint": 1907,
									"id": 582,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_transfer_366": {
									"entryPoint": 2047,
									"id": 366,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@allowance_161": {
									"entryPoint": 1305,
									"id": 161,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@approve_186": {
									"entryPoint": 776,
									"id": 186,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@balanceOf_118": {
									"entryPoint": 932,
									"id": 118,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@decimals_94": {
									"entryPoint": 868,
									"id": 94,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@decreaseAllowance_289": {
									"entryPoint": 1151,
									"id": 289,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@increaseAllowance_248": {
									"entryPoint": 877,
									"id": 248,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@name_74": {
									"entryPoint": 630,
									"id": 74,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@symbol_84": {
									"entryPoint": 1005,
									"id": 84,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@totalSupply_104": {
									"entryPoint": 811,
									"id": 104,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@transferFrom_219": {
									"entryPoint": 821,
									"id": 219,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"@transfer_143": {
									"entryPoint": 1270,
									"id": 143,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_t_address": {
									"entryPoint": 2701,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_t_uint256": {
									"entryPoint": 2722,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_address": {
									"entryPoint": 2743,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_addresst_address": {
									"entryPoint": 2788,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_decode_tuple_t_addresst_addresst_uint256": {
									"entryPoint": 2852,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 3
								},
								"abi_decode_tuple_t_addresst_uint256": {
									"entryPoint": 2935,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_encode_t_bool_to_t_bool_fromStack": {
									"entryPoint": 2999,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack": {
									"entryPoint": 3014,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f_to_t_string_memory_ptr_fromStack": {
									"entryPoint": 3071,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029_to_t_string_memory_ptr_fromStack": {
									"entryPoint": 3106,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe_to_t_string_memory_ptr_fromStack": {
									"entryPoint": 3141,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6_to_t_string_memory_ptr_fromStack": {
									"entryPoint": 3176,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea_to_t_string_memory_ptr_fromStack": {
									"entryPoint": 3211,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208_to_t_string_memory_ptr_fromStack": {
									"entryPoint": 3246,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8_to_t_string_memory_ptr_fromStack": {
									"entryPoint": 3281,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_t_uint256_to_t_uint256_fromStack": {
									"entryPoint": 3316,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_t_uint8_to_t_uint8_fromStack": {
									"entryPoint": 3331,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed": {
									"entryPoint": 3346,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 3373,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 3407,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 3439,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 3471,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 3503,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 3535,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 3567,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 3599,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
									"entryPoint": 3631,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed": {
									"entryPoint": 3658,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"allocate_unbounded": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"array_length_t_string_memory_ptr": {
									"entryPoint": 3685,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"array_storeLengthForEncoding_t_string_memory_ptr_fromStack": {
									"entryPoint": 3696,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_add_t_uint256": {
									"entryPoint": 3713,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"cleanup_t_address": {
									"entryPoint": 3799,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_bool": {
									"entryPoint": 3817,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_uint160": {
									"entryPoint": 3829,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_uint256": {
									"entryPoint": 3861,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_uint8": {
									"entryPoint": 3871,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"copy_memory_to_memory": {
									"entryPoint": 3884,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"extract_byte_array_length": {
									"entryPoint": 3935,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"panic_error_0x11": {
									"entryPoint": 3985,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"panic_error_0x22": {
									"entryPoint": 4032,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b": {
									"entryPoint": 4079,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"round_up_to_mul_of_32": {
									"entryPoint": 4084,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"store_literal_in_memory_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f": {
									"entryPoint": 4101,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"store_literal_in_memory_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029": {
									"entryPoint": 4180,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"store_literal_in_memory_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe": {
									"entryPoint": 4259,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"store_literal_in_memory_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6": {
									"entryPoint": 4300,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"store_literal_in_memory_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea": {
									"entryPoint": 4379,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"store_literal_in_memory_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208": {
									"entryPoint": 4458,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"store_literal_in_memory_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8": {
									"entryPoint": 4537,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"validator_revert_t_address": {
									"entryPoint": 4616,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"validator_revert_t_uint256": {
									"entryPoint": 4639,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:13861:6",
										"statements": [
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "59:87:6",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "69:29:6",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "91:6:6"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "78:12:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "78:20:6"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "69:5:6"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "134:5:6"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "107:26:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "107:33:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "107:33:6"
														}
													]
												},
												"name": "abi_decode_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "37:6:6",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "45:3:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "53:5:6",
														"type": ""
													}
												],
												"src": "7:139:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "204:87:6",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "214:29:6",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "236:6:6"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "223:12:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "223:20:6"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "214:5:6"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "279:5:6"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "252:26:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "252:33:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "252:33:6"
														}
													]
												},
												"name": "abi_decode_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "182:6:6",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "190:3:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "198:5:6",
														"type": ""
													}
												],
												"src": "152:139:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "363:263:6",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "409:83:6",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "411:77:6"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "411:79:6"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "411:79:6"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "384:7:6"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "393:9:6"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "380:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "380:23:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "405:2:6",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "376:3:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "376:32:6"
															},
															"nodeType": "YulIf",
															"src": "373:119:6"
														},
														{
															"nodeType": "YulBlock",
															"src": "502:117:6",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "517:15:6",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "531:1:6",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "521:6:6",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "546:63:6",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "581:9:6"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "592:6:6"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "577:3:6"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "577:22:6"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "601:7:6"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "556:20:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "556:53:6"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "546:6:6"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "333:9:6",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "344:7:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "356:6:6",
														"type": ""
													}
												],
												"src": "297:329:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "715:391:6",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "761:83:6",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "763:77:6"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "763:79:6"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "763:79:6"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "736:7:6"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "745:9:6"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "732:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "732:23:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "757:2:6",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "728:3:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "728:32:6"
															},
															"nodeType": "YulIf",
															"src": "725:119:6"
														},
														{
															"nodeType": "YulBlock",
															"src": "854:117:6",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "869:15:6",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "883:1:6",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "873:6:6",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "898:63:6",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "933:9:6"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "944:6:6"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "929:3:6"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "929:22:6"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "953:7:6"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "908:20:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "908:53:6"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "898:6:6"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "981:118:6",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "996:16:6",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1010:2:6",
																		"type": "",
																		"value": "32"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "1000:6:6",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "1026:63:6",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "1061:9:6"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "1072:6:6"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "1057:3:6"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1057:22:6"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1081:7:6"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "1036:20:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1036:53:6"
																	},
																	"variableNames": [
																		{
																			"name": "value1",
																			"nodeType": "YulIdentifier",
																			"src": "1026:6:6"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "677:9:6",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "688:7:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "700:6:6",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "708:6:6",
														"type": ""
													}
												],
												"src": "632:474:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1212:519:6",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1258:83:6",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "1260:77:6"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1260:79:6"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1260:79:6"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1233:7:6"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1242:9:6"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1229:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1229:23:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1254:2:6",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1225:3:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "1225:32:6"
															},
															"nodeType": "YulIf",
															"src": "1222:119:6"
														},
														{
															"nodeType": "YulBlock",
															"src": "1351:117:6",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "1366:15:6",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1380:1:6",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "1370:6:6",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "1395:63:6",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "1430:9:6"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "1441:6:6"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "1426:3:6"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1426:22:6"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1450:7:6"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "1405:20:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1405:53:6"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "1395:6:6"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "1478:118:6",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "1493:16:6",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1507:2:6",
																		"type": "",
																		"value": "32"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "1497:6:6",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "1523:63:6",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "1558:9:6"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "1569:6:6"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "1554:3:6"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1554:22:6"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1578:7:6"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "1533:20:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1533:53:6"
																	},
																	"variableNames": [
																		{
																			"name": "value1",
																			"nodeType": "YulIdentifier",
																			"src": "1523:6:6"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "1606:118:6",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "1621:16:6",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1635:2:6",
																		"type": "",
																		"value": "64"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "1625:6:6",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "1651:63:6",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "1686:9:6"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "1697:6:6"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "1682:3:6"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1682:22:6"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1706:7:6"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "1661:20:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1661:53:6"
																	},
																	"variableNames": [
																		{
																			"name": "value2",
																			"nodeType": "YulIdentifier",
																			"src": "1651:6:6"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_addresst_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1166:9:6",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1177:7:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1189:6:6",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "1197:6:6",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "1205:6:6",
														"type": ""
													}
												],
												"src": "1112:619:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1820:391:6",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1866:83:6",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "1868:77:6"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1868:79:6"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1868:79:6"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1841:7:6"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1850:9:6"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1837:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1837:23:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1862:2:6",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1833:3:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "1833:32:6"
															},
															"nodeType": "YulIf",
															"src": "1830:119:6"
														},
														{
															"nodeType": "YulBlock",
															"src": "1959:117:6",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "1974:15:6",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1988:1:6",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "1978:6:6",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "2003:63:6",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "2038:9:6"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "2049:6:6"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "2034:3:6"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2034:22:6"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2058:7:6"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "2013:20:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2013:53:6"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "2003:6:6"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "2086:118:6",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "2101:16:6",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2115:2:6",
																		"type": "",
																		"value": "32"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "2105:6:6",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "2131:63:6",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "2166:9:6"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "2177:6:6"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "2162:3:6"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2162:22:6"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2186:7:6"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "2141:20:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2141:53:6"
																	},
																	"variableNames": [
																		{
																			"name": "value1",
																			"nodeType": "YulIdentifier",
																			"src": "2131:6:6"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1782:9:6",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1793:7:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1805:6:6",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "1813:6:6",
														"type": ""
													}
												],
												"src": "1737:474:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2276:50:6",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "2293:3:6"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "2313:5:6"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_bool",
																			"nodeType": "YulIdentifier",
																			"src": "2298:14:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2298:21:6"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2286:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "2286:34:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2286:34:6"
														}
													]
												},
												"name": "abi_encode_t_bool_to_t_bool_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "2264:5:6",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "2271:3:6",
														"type": ""
													}
												],
												"src": "2217:109:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2424:272:6",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "2434:53:6",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "2481:5:6"
																	}
																],
																"functionName": {
																	"name": "array_length_t_string_memory_ptr",
																	"nodeType": "YulIdentifier",
																	"src": "2448:32:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "2448:39:6"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "2438:6:6",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "2496:78:6",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "2562:3:6"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "2567:6:6"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "2503:58:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "2503:71:6"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "2496:3:6"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "2609:5:6"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2616:4:6",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2605:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2605:16:6"
																	},
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "2623:3:6"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "2628:6:6"
																	}
																],
																"functionName": {
																	"name": "copy_memory_to_memory",
																	"nodeType": "YulIdentifier",
																	"src": "2583:21:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "2583:52:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2583:52:6"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2644:46:6",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "2655:3:6"
																	},
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "2682:6:6"
																			}
																		],
																		"functionName": {
																			"name": "round_up_to_mul_of_32",
																			"nodeType": "YulIdentifier",
																			"src": "2660:21:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2660:29:6"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2651:3:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "2651:39:6"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "2644:3:6"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "2405:5:6",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "2412:3:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "2420:3:6",
														"type": ""
													}
												],
												"src": "2332:364:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2848:220:6",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2858:74:6",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "2924:3:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2929:2:6",
																		"type": "",
																		"value": "35"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "2865:58:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "2865:67:6"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "2858:3:6"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "3030:3:6"
																	}
																],
																"functionName": {
																	"name": "store_literal_in_memory_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f",
																	"nodeType": "YulIdentifier",
																	"src": "2941:88:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "2941:93:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2941:93:6"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3043:19:6",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "3054:3:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3059:2:6",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3050:3:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "3050:12:6"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "3043:3:6"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "2836:3:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "2844:3:6",
														"type": ""
													}
												],
												"src": "2702:366:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3220:220:6",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3230:74:6",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "3296:3:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3301:2:6",
																		"type": "",
																		"value": "34"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "3237:58:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "3237:67:6"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "3230:3:6"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "3402:3:6"
																	}
																],
																"functionName": {
																	"name": "store_literal_in_memory_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029",
																	"nodeType": "YulIdentifier",
																	"src": "3313:88:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "3313:93:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3313:93:6"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3415:19:6",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "3426:3:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3431:2:6",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3422:3:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "3422:12:6"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "3415:3:6"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "3208:3:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "3216:3:6",
														"type": ""
													}
												],
												"src": "3074:366:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3592:220:6",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3602:74:6",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "3668:3:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3673:2:6",
																		"type": "",
																		"value": "29"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "3609:58:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "3609:67:6"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "3602:3:6"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "3774:3:6"
																	}
																],
																"functionName": {
																	"name": "store_literal_in_memory_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe",
																	"nodeType": "YulIdentifier",
																	"src": "3685:88:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "3685:93:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3685:93:6"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3787:19:6",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "3798:3:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3803:2:6",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3794:3:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "3794:12:6"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "3787:3:6"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "3580:3:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "3588:3:6",
														"type": ""
													}
												],
												"src": "3446:366:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3964:220:6",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3974:74:6",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "4040:3:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4045:2:6",
																		"type": "",
																		"value": "38"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "3981:58:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "3981:67:6"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "3974:3:6"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "4146:3:6"
																	}
																],
																"functionName": {
																	"name": "store_literal_in_memory_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6",
																	"nodeType": "YulIdentifier",
																	"src": "4057:88:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "4057:93:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4057:93:6"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4159:19:6",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "4170:3:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4175:2:6",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4166:3:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "4166:12:6"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "4159:3:6"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "3952:3:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "3960:3:6",
														"type": ""
													}
												],
												"src": "3818:366:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4336:220:6",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "4346:74:6",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "4412:3:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4417:2:6",
																		"type": "",
																		"value": "37"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "4353:58:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "4353:67:6"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "4346:3:6"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "4518:3:6"
																	}
																],
																"functionName": {
																	"name": "store_literal_in_memory_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea",
																	"nodeType": "YulIdentifier",
																	"src": "4429:88:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "4429:93:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4429:93:6"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4531:19:6",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "4542:3:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4547:2:6",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4538:3:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "4538:12:6"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "4531:3:6"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "4324:3:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "4332:3:6",
														"type": ""
													}
												],
												"src": "4190:366:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4708:220:6",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "4718:74:6",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "4784:3:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4789:2:6",
																		"type": "",
																		"value": "36"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "4725:58:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "4725:67:6"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "4718:3:6"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "4890:3:6"
																	}
																],
																"functionName": {
																	"name": "store_literal_in_memory_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208",
																	"nodeType": "YulIdentifier",
																	"src": "4801:88:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "4801:93:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4801:93:6"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4903:19:6",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "4914:3:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4919:2:6",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4910:3:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "4910:12:6"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "4903:3:6"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "4696:3:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "4704:3:6",
														"type": ""
													}
												],
												"src": "4562:366:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5080:220:6",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "5090:74:6",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "5156:3:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5161:2:6",
																		"type": "",
																		"value": "37"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "5097:58:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "5097:67:6"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "5090:3:6"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "5262:3:6"
																	}
																],
																"functionName": {
																	"name": "store_literal_in_memory_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8",
																	"nodeType": "YulIdentifier",
																	"src": "5173:88:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "5173:93:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5173:93:6"
														},
														{
															"nodeType": "YulAssignment",
															"src": "5275:19:6",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "5286:3:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5291:2:6",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5282:3:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "5282:12:6"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "5275:3:6"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "5068:3:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "5076:3:6",
														"type": ""
													}
												],
												"src": "4934:366:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5371:53:6",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "5388:3:6"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "5411:5:6"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "5393:17:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5393:24:6"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5381:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "5381:37:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5381:37:6"
														}
													]
												},
												"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "5359:5:6",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "5366:3:6",
														"type": ""
													}
												],
												"src": "5306:118:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5491:51:6",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "5508:3:6"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "5529:5:6"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_uint8",
																			"nodeType": "YulIdentifier",
																			"src": "5513:15:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5513:22:6"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5501:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "5501:35:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5501:35:6"
														}
													]
												},
												"name": "abi_encode_t_uint8_to_t_uint8_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "5479:5:6",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "5486:3:6",
														"type": ""
													}
												],
												"src": "5430:112:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5640:118:6",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "5650:26:6",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5662:9:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5673:2:6",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5658:3:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "5658:18:6"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "5650:4:6"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "5724:6:6"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5737:9:6"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5748:1:6",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5733:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5733:17:6"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_bool_to_t_bool_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "5686:37:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "5686:65:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5686:65:6"
														}
													]
												},
												"name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5612:9:6",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "5624:6:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "5635:4:6",
														"type": ""
													}
												],
												"src": "5548:210:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5882:195:6",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "5892:26:6",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5904:9:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5915:2:6",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5900:3:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "5900:18:6"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "5892:4:6"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5939:9:6"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5950:1:6",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5935:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5935:17:6"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "5958:4:6"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5964:9:6"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "5954:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5954:20:6"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5928:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "5928:47:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5928:47:6"
														},
														{
															"nodeType": "YulAssignment",
															"src": "5984:86:6",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "6056:6:6"
																	},
																	{
																		"name": "tail",
																		"nodeType": "YulIdentifier",
																		"src": "6065:4:6"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "5992:63:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "5992:78:6"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "5984:4:6"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5854:9:6",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "5866:6:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "5877:4:6",
														"type": ""
													}
												],
												"src": "5764:313:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6254:248:6",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "6264:26:6",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6276:9:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6287:2:6",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "6272:3:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "6272:18:6"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "6264:4:6"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6311:9:6"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6322:1:6",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6307:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6307:17:6"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "6330:4:6"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6336:9:6"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "6326:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6326:20:6"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6300:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "6300:47:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6300:47:6"
														},
														{
															"nodeType": "YulAssignment",
															"src": "6356:139:6",
															"value": {
																"arguments": [
																	{
																		"name": "tail",
																		"nodeType": "YulIdentifier",
																		"src": "6490:4:6"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f_to_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "6364:124:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "6364:131:6"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "6356:4:6"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "6234:9:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "6249:4:6",
														"type": ""
													}
												],
												"src": "6083:419:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6679:248:6",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "6689:26:6",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6701:9:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6712:2:6",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "6697:3:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "6697:18:6"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "6689:4:6"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6736:9:6"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6747:1:6",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6732:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6732:17:6"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "6755:4:6"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6761:9:6"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "6751:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6751:20:6"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6725:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "6725:47:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6725:47:6"
														},
														{
															"nodeType": "YulAssignment",
															"src": "6781:139:6",
															"value": {
																"arguments": [
																	{
																		"name": "tail",
																		"nodeType": "YulIdentifier",
																		"src": "6915:4:6"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029_to_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "6789:124:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "6789:131:6"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "6781:4:6"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "6659:9:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "6674:4:6",
														"type": ""
													}
												],
												"src": "6508:419:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7104:248:6",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "7114:26:6",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7126:9:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7137:2:6",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "7122:3:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "7122:18:6"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "7114:4:6"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7161:9:6"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7172:1:6",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7157:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7157:17:6"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "7180:4:6"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7186:9:6"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "7176:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7176:20:6"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7150:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "7150:47:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7150:47:6"
														},
														{
															"nodeType": "YulAssignment",
															"src": "7206:139:6",
															"value": {
																"arguments": [
																	{
																		"name": "tail",
																		"nodeType": "YulIdentifier",
																		"src": "7340:4:6"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe_to_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "7214:124:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "7214:131:6"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "7206:4:6"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "7084:9:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "7099:4:6",
														"type": ""
													}
												],
												"src": "6933:419:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7529:248:6",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "7539:26:6",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7551:9:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7562:2:6",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "7547:3:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "7547:18:6"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "7539:4:6"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7586:9:6"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7597:1:6",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7582:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7582:17:6"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "7605:4:6"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7611:9:6"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "7601:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7601:20:6"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7575:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "7575:47:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7575:47:6"
														},
														{
															"nodeType": "YulAssignment",
															"src": "7631:139:6",
															"value": {
																"arguments": [
																	{
																		"name": "tail",
																		"nodeType": "YulIdentifier",
																		"src": "7765:4:6"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6_to_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "7639:124:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "7639:131:6"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "7631:4:6"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "7509:9:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "7524:4:6",
														"type": ""
													}
												],
												"src": "7358:419:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7954:248:6",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "7964:26:6",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7976:9:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7987:2:6",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "7972:3:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "7972:18:6"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "7964:4:6"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8011:9:6"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8022:1:6",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8007:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8007:17:6"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "8030:4:6"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8036:9:6"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "8026:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8026:20:6"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8000:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "8000:47:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8000:47:6"
														},
														{
															"nodeType": "YulAssignment",
															"src": "8056:139:6",
															"value": {
																"arguments": [
																	{
																		"name": "tail",
																		"nodeType": "YulIdentifier",
																		"src": "8190:4:6"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea_to_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "8064:124:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "8064:131:6"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "8056:4:6"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "7934:9:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "7949:4:6",
														"type": ""
													}
												],
												"src": "7783:419:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8379:248:6",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "8389:26:6",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "8401:9:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8412:2:6",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "8397:3:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "8397:18:6"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "8389:4:6"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8436:9:6"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8447:1:6",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8432:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8432:17:6"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "8455:4:6"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8461:9:6"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "8451:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8451:20:6"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8425:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "8425:47:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8425:47:6"
														},
														{
															"nodeType": "YulAssignment",
															"src": "8481:139:6",
															"value": {
																"arguments": [
																	{
																		"name": "tail",
																		"nodeType": "YulIdentifier",
																		"src": "8615:4:6"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208_to_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "8489:124:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "8489:131:6"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "8481:4:6"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "8359:9:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "8374:4:6",
														"type": ""
													}
												],
												"src": "8208:419:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8804:248:6",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "8814:26:6",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "8826:9:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8837:2:6",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "8822:3:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "8822:18:6"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "8814:4:6"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8861:9:6"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8872:1:6",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8857:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8857:17:6"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "8880:4:6"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8886:9:6"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "8876:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8876:20:6"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8850:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "8850:47:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8850:47:6"
														},
														{
															"nodeType": "YulAssignment",
															"src": "8906:139:6",
															"value": {
																"arguments": [
																	{
																		"name": "tail",
																		"nodeType": "YulIdentifier",
																		"src": "9040:4:6"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8_to_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "8914:124:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "8914:131:6"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "8906:4:6"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "8784:9:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "8799:4:6",
														"type": ""
													}
												],
												"src": "8633:419:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9156:124:6",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "9166:26:6",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "9178:9:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9189:2:6",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "9174:3:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "9174:18:6"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "9166:4:6"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "9246:6:6"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9259:9:6"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9270:1:6",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9255:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9255:17:6"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "9202:43:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "9202:71:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9202:71:6"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "9128:9:6",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "9140:6:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "9151:4:6",
														"type": ""
													}
												],
												"src": "9058:222:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9380:120:6",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "9390:26:6",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "9402:9:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9413:2:6",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "9398:3:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "9398:18:6"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "9390:4:6"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "9466:6:6"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9479:9:6"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9490:1:6",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9475:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9475:17:6"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint8_to_t_uint8_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "9426:39:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "9426:67:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9426:67:6"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "9352:9:6",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "9364:6:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "9375:4:6",
														"type": ""
													}
												],
												"src": "9286:214:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9546:35:6",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "9556:19:6",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9572:2:6",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "9566:5:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "9566:9:6"
															},
															"variableNames": [
																{
																	"name": "memPtr",
																	"nodeType": "YulIdentifier",
																	"src": "9556:6:6"
																}
															]
														}
													]
												},
												"name": "allocate_unbounded",
												"nodeType": "YulFunctionDefinition",
												"returnVariables": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "9539:6:6",
														"type": ""
													}
												],
												"src": "9506:75:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9646:40:6",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "9657:22:6",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "9673:5:6"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "9667:5:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "9667:12:6"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nodeType": "YulIdentifier",
																	"src": "9657:6:6"
																}
															]
														}
													]
												},
												"name": "array_length_t_string_memory_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "9629:5:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "9639:6:6",
														"type": ""
													}
												],
												"src": "9587:99:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9788:73:6",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "9805:3:6"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "9810:6:6"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9798:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "9798:19:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9798:19:6"
														},
														{
															"nodeType": "YulAssignment",
															"src": "9826:29:6",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "9845:3:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9850:4:6",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "9841:3:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "9841:14:6"
															},
															"variableNames": [
																{
																	"name": "updated_pos",
																	"nodeType": "YulIdentifier",
																	"src": "9826:11:6"
																}
															]
														}
													]
												},
												"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "9760:3:6",
														"type": ""
													},
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "9765:6:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "updated_pos",
														"nodeType": "YulTypedName",
														"src": "9776:11:6",
														"type": ""
													}
												],
												"src": "9692:169:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9911:261:6",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "9921:25:6",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "9944:1:6"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "9926:17:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "9926:20:6"
															},
															"variableNames": [
																{
																	"name": "x",
																	"nodeType": "YulIdentifier",
																	"src": "9921:1:6"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "9955:25:6",
															"value": {
																"arguments": [
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "9978:1:6"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "9960:17:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "9960:20:6"
															},
															"variableNames": [
																{
																	"name": "y",
																	"nodeType": "YulIdentifier",
																	"src": "9955:1:6"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "10118:22:6",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "10120:16:6"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "10120:18:6"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "10120:18:6"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "10039:1:6"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10046:66:6",
																				"type": "",
																				"value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
																			},
																			{
																				"name": "y",
																				"nodeType": "YulIdentifier",
																				"src": "10114:1:6"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "10042:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10042:74:6"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "10036:2:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "10036:81:6"
															},
															"nodeType": "YulIf",
															"src": "10033:107:6"
														},
														{
															"nodeType": "YulAssignment",
															"src": "10150:16:6",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "10161:1:6"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "10164:1:6"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "10157:3:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "10157:9:6"
															},
															"variableNames": [
																{
																	"name": "sum",
																	"nodeType": "YulIdentifier",
																	"src": "10150:3:6"
																}
															]
														}
													]
												},
												"name": "checked_add_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "9898:1:6",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "9901:1:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "sum",
														"nodeType": "YulTypedName",
														"src": "9907:3:6",
														"type": ""
													}
												],
												"src": "9867:305:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10223:51:6",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "10233:35:6",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "10262:5:6"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint160",
																	"nodeType": "YulIdentifier",
																	"src": "10244:17:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "10244:24:6"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "10233:7:6"
																}
															]
														}
													]
												},
												"name": "cleanup_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "10205:5:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "10215:7:6",
														"type": ""
													}
												],
												"src": "10178:96:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10322:48:6",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "10332:32:6",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "10357:5:6"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "10350:6:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10350:13:6"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "10343:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "10343:21:6"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "10332:7:6"
																}
															]
														}
													]
												},
												"name": "cleanup_t_bool",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "10304:5:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "10314:7:6",
														"type": ""
													}
												],
												"src": "10280:90:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10421:81:6",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "10431:65:6",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "10446:5:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10453:42:6",
																		"type": "",
																		"value": "0xffffffffffffffffffffffffffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "10442:3:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "10442:54:6"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "10431:7:6"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint160",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "10403:5:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "10413:7:6",
														"type": ""
													}
												],
												"src": "10376:126:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10553:32:6",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "10563:16:6",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "10574:5:6"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "10563:7:6"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "10535:5:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "10545:7:6",
														"type": ""
													}
												],
												"src": "10508:77:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10634:43:6",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "10644:27:6",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "10659:5:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10666:4:6",
																		"type": "",
																		"value": "0xff"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "10655:3:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "10655:16:6"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "10644:7:6"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint8",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "10616:5:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "10626:7:6",
														"type": ""
													}
												],
												"src": "10591:86:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10732:258:6",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "10742:10:6",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "10751:1:6",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "i",
																	"nodeType": "YulTypedName",
																	"src": "10746:1:6",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "10811:63:6",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "dst",
																							"nodeType": "YulIdentifier",
																							"src": "10836:3:6"
																						},
																						{
																							"name": "i",
																							"nodeType": "YulIdentifier",
																							"src": "10841:1:6"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "10832:3:6"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "10832:11:6"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "src",
																									"nodeType": "YulIdentifier",
																									"src": "10855:3:6"
																								},
																								{
																									"name": "i",
																									"nodeType": "YulIdentifier",
																									"src": "10860:1:6"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "10851:3:6"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "10851:11:6"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nodeType": "YulIdentifier",
																						"src": "10845:5:6"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "10845:18:6"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "10825:6:6"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "10825:39:6"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "10825:39:6"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "10772:1:6"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "10775:6:6"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "10769:2:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "10769:13:6"
															},
															"nodeType": "YulForLoop",
															"post": {
																"nodeType": "YulBlock",
																"src": "10783:19:6",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "10785:15:6",
																		"value": {
																			"arguments": [
																				{
																					"name": "i",
																					"nodeType": "YulIdentifier",
																					"src": "10794:1:6"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "10797:2:6",
																					"type": "",
																					"value": "32"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "10790:3:6"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "10790:10:6"
																		},
																		"variableNames": [
																			{
																				"name": "i",
																				"nodeType": "YulIdentifier",
																				"src": "10785:1:6"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nodeType": "YulBlock",
																"src": "10765:3:6",
																"statements": []
															},
															"src": "10761:113:6"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "10908:76:6",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "dst",
																							"nodeType": "YulIdentifier",
																							"src": "10958:3:6"
																						},
																						{
																							"name": "length",
																							"nodeType": "YulIdentifier",
																							"src": "10963:6:6"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "10954:3:6"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "10954:16:6"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "10972:1:6",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "10947:6:6"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "10947:27:6"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "10947:27:6"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "10889:1:6"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "10892:6:6"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "10886:2:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "10886:13:6"
															},
															"nodeType": "YulIf",
															"src": "10883:101:6"
														}
													]
												},
												"name": "copy_memory_to_memory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "src",
														"nodeType": "YulTypedName",
														"src": "10714:3:6",
														"type": ""
													},
													{
														"name": "dst",
														"nodeType": "YulTypedName",
														"src": "10719:3:6",
														"type": ""
													},
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "10724:6:6",
														"type": ""
													}
												],
												"src": "10683:307:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11047:269:6",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "11057:22:6",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "11071:4:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11077:1:6",
																		"type": "",
																		"value": "2"
																	}
																],
																"functionName": {
																	"name": "div",
																	"nodeType": "YulIdentifier",
																	"src": "11067:3:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "11067:12:6"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nodeType": "YulIdentifier",
																	"src": "11057:6:6"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "11088:38:6",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "11118:4:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11124:1:6",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "11114:3:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "11114:12:6"
															},
															"variables": [
																{
																	"name": "outOfPlaceEncoding",
																	"nodeType": "YulTypedName",
																	"src": "11092:18:6",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "11165:51:6",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "11179:27:6",
																		"value": {
																			"arguments": [
																				{
																					"name": "length",
																					"nodeType": "YulIdentifier",
																					"src": "11193:6:6"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "11201:4:6",
																					"type": "",
																					"value": "0x7f"
																				}
																			],
																			"functionName": {
																				"name": "and",
																				"nodeType": "YulIdentifier",
																				"src": "11189:3:6"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "11189:17:6"
																		},
																		"variableNames": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "11179:6:6"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "11145:18:6"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "11138:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "11138:26:6"
															},
															"nodeType": "YulIf",
															"src": "11135:81:6"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "11268:42:6",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x22",
																				"nodeType": "YulIdentifier",
																				"src": "11282:16:6"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "11282:18:6"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "11282:18:6"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "11232:18:6"
																	},
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "11255:6:6"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11263:2:6",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nodeType": "YulIdentifier",
																			"src": "11252:2:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11252:14:6"
																	}
																],
																"functionName": {
																	"name": "eq",
																	"nodeType": "YulIdentifier",
																	"src": "11229:2:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "11229:38:6"
															},
															"nodeType": "YulIf",
															"src": "11226:84:6"
														}
													]
												},
												"name": "extract_byte_array_length",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "data",
														"nodeType": "YulTypedName",
														"src": "11031:4:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "11040:6:6",
														"type": ""
													}
												],
												"src": "10996:320:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11350:152:6",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11367:1:6",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11370:77:6",
																		"type": "",
																		"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11360:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "11360:88:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11360:88:6"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11464:1:6",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11467:4:6",
																		"type": "",
																		"value": "0x11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11457:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "11457:15:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11457:15:6"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11488:1:6",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11491:4:6",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "11481:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "11481:15:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11481:15:6"
														}
													]
												},
												"name": "panic_error_0x11",
												"nodeType": "YulFunctionDefinition",
												"src": "11322:180:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11536:152:6",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11553:1:6",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11556:77:6",
																		"type": "",
																		"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11546:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "11546:88:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11546:88:6"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11650:1:6",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11653:4:6",
																		"type": "",
																		"value": "0x22"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11643:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "11643:15:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11643:15:6"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11674:1:6",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11677:4:6",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "11667:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "11667:15:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11667:15:6"
														}
													]
												},
												"name": "panic_error_0x22",
												"nodeType": "YulFunctionDefinition",
												"src": "11508:180:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11783:28:6",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11800:1:6",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11803:1:6",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "11793:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "11793:12:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11793:12:6"
														}
													]
												},
												"name": "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
												"nodeType": "YulFunctionDefinition",
												"src": "11694:117:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11906:28:6",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11923:1:6",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11926:1:6",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "11916:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "11916:12:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11916:12:6"
														}
													]
												},
												"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
												"nodeType": "YulFunctionDefinition",
												"src": "11817:117:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11988:54:6",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "11998:38:6",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "12016:5:6"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "12023:2:6",
																				"type": "",
																				"value": "31"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "12012:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12012:14:6"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "12032:2:6",
																				"type": "",
																				"value": "31"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nodeType": "YulIdentifier",
																			"src": "12028:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12028:7:6"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "12008:3:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "12008:28:6"
															},
															"variableNames": [
																{
																	"name": "result",
																	"nodeType": "YulIdentifier",
																	"src": "11998:6:6"
																}
															]
														}
													]
												},
												"name": "round_up_to_mul_of_32",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "11971:5:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "result",
														"nodeType": "YulTypedName",
														"src": "11981:6:6",
														"type": ""
													}
												],
												"src": "11940:102:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "12154:116:6",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "12176:6:6"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "12184:1:6",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "12172:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12172:14:6"
																	},
																	{
																		"hexValue": "45524332303a207472616e7366657220746f20746865207a65726f2061646472",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "12188:34:6",
																		"type": "",
																		"value": "ERC20: transfer to the zero addr"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "12165:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "12165:58:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12165:58:6"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "12244:6:6"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "12252:2:6",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "12240:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12240:15:6"
																	},
																	{
																		"hexValue": "657373",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "12257:5:6",
																		"type": "",
																		"value": "ess"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "12233:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "12233:30:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12233:30:6"
														}
													]
												},
												"name": "store_literal_in_memory_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "12146:6:6",
														"type": ""
													}
												],
												"src": "12048:222:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "12382:115:6",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "12404:6:6"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "12412:1:6",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "12400:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12400:14:6"
																	},
																	{
																		"hexValue": "45524332303a20617070726f766520746f20746865207a65726f206164647265",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "12416:34:6",
																		"type": "",
																		"value": "ERC20: approve to the zero addre"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "12393:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "12393:58:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12393:58:6"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "12472:6:6"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "12480:2:6",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "12468:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12468:15:6"
																	},
																	{
																		"hexValue": "7373",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "12485:4:6",
																		"type": "",
																		"value": "ss"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "12461:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "12461:29:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12461:29:6"
														}
													]
												},
												"name": "store_literal_in_memory_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "12374:6:6",
														"type": ""
													}
												],
												"src": "12276:221:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "12609:73:6",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "12631:6:6"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "12639:1:6",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "12627:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12627:14:6"
																	},
																	{
																		"hexValue": "45524332303a20696e73756666696369656e7420616c6c6f77616e6365",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "12643:31:6",
																		"type": "",
																		"value": "ERC20: insufficient allowance"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "12620:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "12620:55:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12620:55:6"
														}
													]
												},
												"name": "store_literal_in_memory_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "12601:6:6",
														"type": ""
													}
												],
												"src": "12503:179:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "12794:119:6",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "12816:6:6"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "12824:1:6",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "12812:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12812:14:6"
																	},
																	{
																		"hexValue": "45524332303a207472616e7366657220616d6f756e7420657863656564732062",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "12828:34:6",
																		"type": "",
																		"value": "ERC20: transfer amount exceeds b"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "12805:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "12805:58:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12805:58:6"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "12884:6:6"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "12892:2:6",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "12880:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12880:15:6"
																	},
																	{
																		"hexValue": "616c616e6365",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "12897:8:6",
																		"type": "",
																		"value": "alance"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "12873:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "12873:33:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12873:33:6"
														}
													]
												},
												"name": "store_literal_in_memory_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "12786:6:6",
														"type": ""
													}
												],
												"src": "12688:225:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "13025:118:6",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "13047:6:6"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "13055:1:6",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "13043:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13043:14:6"
																	},
																	{
																		"hexValue": "45524332303a207472616e736665722066726f6d20746865207a65726f206164",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "13059:34:6",
																		"type": "",
																		"value": "ERC20: transfer from the zero ad"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "13036:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "13036:58:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13036:58:6"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "13115:6:6"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "13123:2:6",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "13111:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13111:15:6"
																	},
																	{
																		"hexValue": "6472657373",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "13128:7:6",
																		"type": "",
																		"value": "dress"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "13104:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "13104:32:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13104:32:6"
														}
													]
												},
												"name": "store_literal_in_memory_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "13017:6:6",
														"type": ""
													}
												],
												"src": "12919:224:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "13255:117:6",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "13277:6:6"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "13285:1:6",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "13273:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13273:14:6"
																	},
																	{
																		"hexValue": "45524332303a20617070726f76652066726f6d20746865207a65726f20616464",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "13289:34:6",
																		"type": "",
																		"value": "ERC20: approve from the zero add"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "13266:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "13266:58:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13266:58:6"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "13345:6:6"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "13353:2:6",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "13341:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13341:15:6"
																	},
																	{
																		"hexValue": "72657373",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "13358:6:6",
																		"type": "",
																		"value": "ress"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "13334:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "13334:31:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13334:31:6"
														}
													]
												},
												"name": "store_literal_in_memory_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "13247:6:6",
														"type": ""
													}
												],
												"src": "13149:223:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "13484:118:6",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "13506:6:6"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "13514:1:6",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "13502:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13502:14:6"
																	},
																	{
																		"hexValue": "45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "13518:34:6",
																		"type": "",
																		"value": "ERC20: decreased allowance below"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "13495:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "13495:58:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13495:58:6"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "13574:6:6"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "13582:2:6",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "13570:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13570:15:6"
																	},
																	{
																		"hexValue": "207a65726f",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "13587:7:6",
																		"type": "",
																		"value": " zero"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "13563:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "13563:32:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13563:32:6"
														}
													]
												},
												"name": "store_literal_in_memory_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "13476:6:6",
														"type": ""
													}
												],
												"src": "13378:224:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "13651:79:6",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "13708:16:6",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "13717:1:6",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "13720:1:6",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "13710:6:6"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "13710:12:6"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "13710:12:6"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "13674:5:6"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "13699:5:6"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_address",
																					"nodeType": "YulIdentifier",
																					"src": "13681:17:6"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "13681:24:6"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "13671:2:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13671:35:6"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "13664:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "13664:43:6"
															},
															"nodeType": "YulIf",
															"src": "13661:63:6"
														}
													]
												},
												"name": "validator_revert_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "13644:5:6",
														"type": ""
													}
												],
												"src": "13608:122:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "13779:79:6",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "13836:16:6",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "13845:1:6",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "13848:1:6",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "13838:6:6"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "13838:12:6"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "13838:12:6"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "13802:5:6"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "13827:5:6"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_uint256",
																					"nodeType": "YulIdentifier",
																					"src": "13809:17:6"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "13809:24:6"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "13799:2:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13799:35:6"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "13792:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "13792:43:6"
															},
															"nodeType": "YulIf",
															"src": "13789:63:6"
														}
													]
												},
												"name": "validator_revert_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "13772:5:6",
														"type": ""
													}
												],
												"src": "13736:122:6"
											}
										]
									},
									"contents": "{\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_t_uint256(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2 {\n        if slt(sub(dataEnd, headStart), 96) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_bool_to_t_bool_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bool(value))\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 35)\n        store_literal_in_memory_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 34)\n        store_literal_in_memory_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 29)\n        store_literal_in_memory_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 38)\n        store_literal_in_memory_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 37)\n        store_literal_in_memory_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 36)\n        store_literal_in_memory_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 37)\n        store_literal_in_memory_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_t_uint8_to_t_uint8_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint8(value))\n    }\n\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bool_to_t_bool_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value0,  tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint8_to_t_uint8_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function array_length_t_string_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function checked_add_t_uint256(x, y) -> sum {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n\n        // overflow, if x > (maxValue - y)\n        if gt(x, sub(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, y)) { panic_error_0x11() }\n\n        sum := add(x, y)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function cleanup_t_bool(value) -> cleaned {\n        cleaned := iszero(iszero(value))\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function cleanup_t_uint8(value) -> cleaned {\n        cleaned := and(value, 0xff)\n    }\n\n    function copy_memory_to_memory(src, dst, length) {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        if gt(i, length)\n        {\n            // clear end\n            mstore(add(dst, length), 0)\n        }\n    }\n\n    function extract_byte_array_length(data) -> length {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) {\n            length := and(length, 0x7f)\n        }\n\n        if eq(outOfPlaceEncoding, lt(length, 32)) {\n            panic_error_0x22()\n        }\n    }\n\n    function panic_error_0x11() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n\n    function panic_error_0x22() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x22)\n        revert(0, 0x24)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function store_literal_in_memory_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC20: transfer to the zero addr\")\n\n        mstore(add(memPtr, 32), \"ess\")\n\n    }\n\n    function store_literal_in_memory_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC20: approve to the zero addre\")\n\n        mstore(add(memPtr, 32), \"ss\")\n\n    }\n\n    function store_literal_in_memory_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC20: insufficient allowance\")\n\n    }\n\n    function store_literal_in_memory_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC20: transfer amount exceeds b\")\n\n        mstore(add(memPtr, 32), \"alance\")\n\n    }\n\n    function store_literal_in_memory_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC20: transfer from the zero ad\")\n\n        mstore(add(memPtr, 32), \"dress\")\n\n    }\n\n    function store_literal_in_memory_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC20: approve from the zero add\")\n\n        mstore(add(memPtr, 32), \"ress\")\n\n    }\n\n    function store_literal_in_memory_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC20: decreased allowance below\")\n\n        mstore(add(memPtr, 32), \" zero\")\n\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n}\n",
									"id": 6,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b50600436106100a95760003560e01c80633950935111610071578063395093511461016857806370a082311461019857806395d89b41146101c8578063a457c2d7146101e6578063a9059cbb14610216578063dd62ed3e14610246576100a9565b806306fdde03146100ae578063095ea7b3146100cc57806318160ddd146100fc57806323b872dd1461011a578063313ce5671461014a575b600080fd5b6100b6610276565b6040516100c39190610d2d565b60405180910390f35b6100e660048036038101906100e19190610b77565b610308565b6040516100f39190610d12565b60405180910390f35b61010461032b565b6040516101119190610e2f565b60405180910390f35b610134600480360381019061012f9190610b24565b610335565b6040516101419190610d12565b60405180910390f35b610152610364565b60405161015f9190610e4a565b60405180910390f35b610182600480360381019061017d9190610b77565b61036d565b60405161018f9190610d12565b60405180910390f35b6101b260048036038101906101ad9190610ab7565b6103a4565b6040516101bf9190610e2f565b60405180910390f35b6101d06103ed565b6040516101dd9190610d2d565b60405180910390f35b61020060048036038101906101fb9190610b77565b61047f565b60405161020d9190610d12565b60405180910390f35b610230600480360381019061022b9190610b77565b6104f6565b60405161023d9190610d12565b60405180910390f35b610260600480360381019061025b9190610ae4565b610519565b60405161026d9190610e2f565b60405180910390f35b60606036805461028590610f5f565b80601f01602080910402602001604051908101604052809291908181526020018280546102b190610f5f565b80156102fe5780601f106102d3576101008083540402835291602001916102fe565b820191906000526020600020905b8154815290600101906020018083116102e157829003601f168201915b5050505050905090565b6000806103136105a0565b90506103208185856105a8565b600191505092915050565b6000603554905090565b6000806103406105a0565b905061034d858285610773565b6103588585856107ff565b60019150509392505050565b60006012905090565b6000806103786105a0565b905061039981858561038a8589610519565b6103949190610e81565b6105a8565b600191505092915050565b6000603360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6060603780546103fc90610f5f565b80601f016020809104026020016040519081016040528092919081815260200182805461042890610f5f565b80156104755780601f1061044a57610100808354040283529160200191610475565b820191906000526020600020905b81548152906001019060200180831161045857829003601f168201915b5050505050905090565b60008061048a6105a0565b905060006104988286610519565b9050838110156104dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104d490610e0f565b60405180910390fd5b6104ea82868684036105a8565b60019250505092915050565b6000806105016105a0565b905061050e8185856107ff565b600191505092915050565b6000603460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610618576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060f90610def565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610688576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067f90610d6f565b60405180910390fd5b80603460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040516107669190610e2f565b60405180910390a3505050565b600061077f8484610519565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146107f957818110156107eb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107e290610d8f565b60405180910390fd5b6107f884848484036105a8565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561086f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161086690610dcf565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156108df576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108d690610d4f565b60405180910390fd5b6108ea838383610a83565b6000603360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015610971576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161096890610daf565b60405180910390fd5b818103603360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081603360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610a069190610e81565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610a6a9190610e2f565b60405180910390a3610a7d848484610a88565b50505050565b505050565b505050565b600081359050610a9c81611208565b92915050565b600081359050610ab18161121f565b92915050565b600060208284031215610acd57610acc610fef565b5b6000610adb84828501610a8d565b91505092915050565b60008060408385031215610afb57610afa610fef565b5b6000610b0985828601610a8d565b9250506020610b1a85828601610a8d565b9150509250929050565b600080600060608486031215610b3d57610b3c610fef565b5b6000610b4b86828701610a8d565b9350506020610b5c86828701610a8d565b9250506040610b6d86828701610aa2565b9150509250925092565b60008060408385031215610b8e57610b8d610fef565b5b6000610b9c85828601610a8d565b9250506020610bad85828601610aa2565b9150509250929050565b610bc081610ee9565b82525050565b6000610bd182610e65565b610bdb8185610e70565b9350610beb818560208601610f2c565b610bf481610ff4565b840191505092915050565b6000610c0c602383610e70565b9150610c1782611005565b604082019050919050565b6000610c2f602283610e70565b9150610c3a82611054565b604082019050919050565b6000610c52601d83610e70565b9150610c5d826110a3565b602082019050919050565b6000610c75602683610e70565b9150610c80826110cc565b604082019050919050565b6000610c98602583610e70565b9150610ca38261111b565b604082019050919050565b6000610cbb602483610e70565b9150610cc68261116a565b604082019050919050565b6000610cde602583610e70565b9150610ce9826111b9565b604082019050919050565b610cfd81610f15565b82525050565b610d0c81610f1f565b82525050565b6000602082019050610d276000830184610bb7565b92915050565b60006020820190508181036000830152610d478184610bc6565b905092915050565b60006020820190508181036000830152610d6881610bff565b9050919050565b60006020820190508181036000830152610d8881610c22565b9050919050565b60006020820190508181036000830152610da881610c45565b9050919050565b60006020820190508181036000830152610dc881610c68565b9050919050565b60006020820190508181036000830152610de881610c8b565b9050919050565b60006020820190508181036000830152610e0881610cae565b9050919050565b60006020820190508181036000830152610e2881610cd1565b9050919050565b6000602082019050610e446000830184610cf4565b92915050565b6000602082019050610e5f6000830184610d03565b92915050565b600081519050919050565b600082825260208201905092915050565b6000610e8c82610f15565b9150610e9783610f15565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610ecc57610ecb610f91565b5b828201905092915050565b6000610ee282610ef5565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60005b83811015610f4a578082015181840152602081019050610f2f565b83811115610f59576000848401525b50505050565b60006002820490506001821680610f7757607f821691505b60208210811415610f8b57610f8a610fc0565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600080fd5b6000601f19601f8301169050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000600082015250565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b61121181610ed7565b811461121c57600080fd5b50565b61122881610f15565b811461123357600080fd5b5056fea264697066735822122062dbf59ade107786d1f70754e60260c226abb9247426681ee5c7f06416e441e864736f6c63430008070033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xA9 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x39509351 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x168 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x198 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x1C8 JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x1E6 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x216 JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x246 JUMPI PUSH2 0xA9 JUMP JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0xAE JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0xCC JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0xFC JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x11A JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x14A JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB6 PUSH2 0x276 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xC3 SWAP2 SWAP1 PUSH2 0xD2D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xE6 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xE1 SWAP2 SWAP1 PUSH2 0xB77 JUMP JUMPDEST PUSH2 0x308 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xF3 SWAP2 SWAP1 PUSH2 0xD12 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x104 PUSH2 0x32B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x111 SWAP2 SWAP1 PUSH2 0xE2F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x134 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x12F SWAP2 SWAP1 PUSH2 0xB24 JUMP JUMPDEST PUSH2 0x335 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x141 SWAP2 SWAP1 PUSH2 0xD12 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x152 PUSH2 0x364 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x15F SWAP2 SWAP1 PUSH2 0xE4A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x182 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x17D SWAP2 SWAP1 PUSH2 0xB77 JUMP JUMPDEST PUSH2 0x36D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x18F SWAP2 SWAP1 PUSH2 0xD12 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1B2 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1AD SWAP2 SWAP1 PUSH2 0xAB7 JUMP JUMPDEST PUSH2 0x3A4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1BF SWAP2 SWAP1 PUSH2 0xE2F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1D0 PUSH2 0x3ED JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1DD SWAP2 SWAP1 PUSH2 0xD2D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x200 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1FB SWAP2 SWAP1 PUSH2 0xB77 JUMP JUMPDEST PUSH2 0x47F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x20D SWAP2 SWAP1 PUSH2 0xD12 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x230 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x22B SWAP2 SWAP1 PUSH2 0xB77 JUMP JUMPDEST PUSH2 0x4F6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x23D SWAP2 SWAP1 PUSH2 0xD12 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x260 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x25B SWAP2 SWAP1 PUSH2 0xAE4 JUMP JUMPDEST PUSH2 0x519 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x26D SWAP2 SWAP1 PUSH2 0xE2F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x60 PUSH1 0x36 DUP1 SLOAD PUSH2 0x285 SWAP1 PUSH2 0xF5F JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x2B1 SWAP1 PUSH2 0xF5F JUMP JUMPDEST DUP1 ISZERO PUSH2 0x2FE JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x2D3 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x2FE JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x2E1 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x313 PUSH2 0x5A0 JUMP JUMPDEST SWAP1 POP PUSH2 0x320 DUP2 DUP6 DUP6 PUSH2 0x5A8 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x35 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x340 PUSH2 0x5A0 JUMP JUMPDEST SWAP1 POP PUSH2 0x34D DUP6 DUP3 DUP6 PUSH2 0x773 JUMP JUMPDEST PUSH2 0x358 DUP6 DUP6 DUP6 PUSH2 0x7FF JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x12 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x378 PUSH2 0x5A0 JUMP JUMPDEST SWAP1 POP PUSH2 0x399 DUP2 DUP6 DUP6 PUSH2 0x38A DUP6 DUP10 PUSH2 0x519 JUMP JUMPDEST PUSH2 0x394 SWAP2 SWAP1 PUSH2 0xE81 JUMP JUMPDEST PUSH2 0x5A8 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x37 DUP1 SLOAD PUSH2 0x3FC SWAP1 PUSH2 0xF5F JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x428 SWAP1 PUSH2 0xF5F JUMP JUMPDEST DUP1 ISZERO PUSH2 0x475 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x44A JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x475 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x458 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x48A PUSH2 0x5A0 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x498 DUP3 DUP7 PUSH2 0x519 JUMP JUMPDEST SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0x4DD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4D4 SWAP1 PUSH2 0xE0F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x4EA DUP3 DUP7 DUP7 DUP5 SUB PUSH2 0x5A8 JUMP JUMPDEST PUSH1 0x1 SWAP3 POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x501 PUSH2 0x5A0 JUMP JUMPDEST SWAP1 POP PUSH2 0x50E DUP2 DUP6 DUP6 PUSH2 0x7FF JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x34 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x618 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x60F SWAP1 PUSH2 0xDEF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x688 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x67F SWAP1 PUSH2 0xD6F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x34 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 DUP4 PUSH1 0x40 MLOAD PUSH2 0x766 SWAP2 SWAP1 PUSH2 0xE2F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x77F DUP5 DUP5 PUSH2 0x519 JUMP JUMPDEST SWAP1 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 EQ PUSH2 0x7F9 JUMPI DUP2 DUP2 LT ISZERO PUSH2 0x7EB JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x7E2 SWAP1 PUSH2 0xD8F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x7F8 DUP5 DUP5 DUP5 DUP5 SUB PUSH2 0x5A8 JUMP JUMPDEST JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x86F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x866 SWAP1 PUSH2 0xDCF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x8DF JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8D6 SWAP1 PUSH2 0xD4F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x8EA DUP4 DUP4 DUP4 PUSH2 0xA83 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP DUP2 DUP2 LT ISZERO PUSH2 0x971 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x968 SWAP1 PUSH2 0xDAF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 DUP2 SUB PUSH1 0x33 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP2 PUSH1 0x33 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0xA06 SWAP2 SWAP1 PUSH2 0xE81 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP5 PUSH1 0x40 MLOAD PUSH2 0xA6A SWAP2 SWAP1 PUSH2 0xE2F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0xA7D DUP5 DUP5 DUP5 PUSH2 0xA88 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST POP POP POP JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xA9C DUP2 PUSH2 0x1208 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xAB1 DUP2 PUSH2 0x121F JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xACD JUMPI PUSH2 0xACC PUSH2 0xFEF JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xADB DUP5 DUP3 DUP6 ADD PUSH2 0xA8D JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xAFB JUMPI PUSH2 0xAFA PUSH2 0xFEF JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xB09 DUP6 DUP3 DUP7 ADD PUSH2 0xA8D JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0xB1A DUP6 DUP3 DUP7 ADD PUSH2 0xA8D JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xB3D JUMPI PUSH2 0xB3C PUSH2 0xFEF JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xB4B DUP7 DUP3 DUP8 ADD PUSH2 0xA8D JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0xB5C DUP7 DUP3 DUP8 ADD PUSH2 0xA8D JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0xB6D DUP7 DUP3 DUP8 ADD PUSH2 0xAA2 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xB8E JUMPI PUSH2 0xB8D PUSH2 0xFEF JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xB9C DUP6 DUP3 DUP7 ADD PUSH2 0xA8D JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0xBAD DUP6 DUP3 DUP7 ADD PUSH2 0xAA2 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH2 0xBC0 DUP2 PUSH2 0xEE9 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xBD1 DUP3 PUSH2 0xE65 JUMP JUMPDEST PUSH2 0xBDB DUP2 DUP6 PUSH2 0xE70 JUMP JUMPDEST SWAP4 POP PUSH2 0xBEB DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0xF2C JUMP JUMPDEST PUSH2 0xBF4 DUP2 PUSH2 0xFF4 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC0C PUSH1 0x23 DUP4 PUSH2 0xE70 JUMP JUMPDEST SWAP2 POP PUSH2 0xC17 DUP3 PUSH2 0x1005 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC2F PUSH1 0x22 DUP4 PUSH2 0xE70 JUMP JUMPDEST SWAP2 POP PUSH2 0xC3A DUP3 PUSH2 0x1054 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC52 PUSH1 0x1D DUP4 PUSH2 0xE70 JUMP JUMPDEST SWAP2 POP PUSH2 0xC5D DUP3 PUSH2 0x10A3 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC75 PUSH1 0x26 DUP4 PUSH2 0xE70 JUMP JUMPDEST SWAP2 POP PUSH2 0xC80 DUP3 PUSH2 0x10CC JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC98 PUSH1 0x25 DUP4 PUSH2 0xE70 JUMP JUMPDEST SWAP2 POP PUSH2 0xCA3 DUP3 PUSH2 0x111B JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xCBB PUSH1 0x24 DUP4 PUSH2 0xE70 JUMP JUMPDEST SWAP2 POP PUSH2 0xCC6 DUP3 PUSH2 0x116A JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xCDE PUSH1 0x25 DUP4 PUSH2 0xE70 JUMP JUMPDEST SWAP2 POP PUSH2 0xCE9 DUP3 PUSH2 0x11B9 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xCFD DUP2 PUSH2 0xF15 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0xD0C DUP2 PUSH2 0xF1F JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xD27 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xBB7 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xD47 DUP2 DUP5 PUSH2 0xBC6 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xD68 DUP2 PUSH2 0xBFF JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xD88 DUP2 PUSH2 0xC22 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xDA8 DUP2 PUSH2 0xC45 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xDC8 DUP2 PUSH2 0xC68 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xDE8 DUP2 PUSH2 0xC8B JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xE08 DUP2 PUSH2 0xCAE JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xE28 DUP2 PUSH2 0xCD1 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xE44 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xCF4 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xE5F PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xD03 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xE8C DUP3 PUSH2 0xF15 JUMP JUMPDEST SWAP2 POP PUSH2 0xE97 DUP4 PUSH2 0xF15 JUMP JUMPDEST SWAP3 POP DUP3 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SUB DUP3 GT ISZERO PUSH2 0xECC JUMPI PUSH2 0xECB PUSH2 0xF91 JUMP JUMPDEST JUMPDEST DUP3 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xEE2 DUP3 PUSH2 0xEF5 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xF4A JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0xF2F JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0xF59 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0xF77 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0xF8B JUMPI PUSH2 0xF8A PUSH2 0xFC0 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6573730000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7373000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x616C616E63650000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6472657373000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7265737300000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x207A65726F000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH2 0x1211 DUP2 PUSH2 0xED7 JUMP JUMPDEST DUP2 EQ PUSH2 0x121C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x1228 DUP2 PUSH2 0xF15 JUMP JUMPDEST DUP2 EQ PUSH2 0x1233 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH3 0xDBF59A 0xDE LT PUSH24 0x86D1F70754E60260C226ABB9247426681EE5C7F06416E441 0xE8 PUSH5 0x736F6C6343 STOP ADDMOD SMOD STOP CALLER ",
							"sourceMap": "1500:12131:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2542:100;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4893:201;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3662:108;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;5674:295;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3504:93;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;6378:238;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3833:127;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2761:104;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;7119:436;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4166:193;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4422:151;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2542:100;2596:13;2629:5;2622:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2542:100;:::o;4893:201::-;4976:4;4993:13;5009:12;:10;:12::i;:::-;4993:28;;5032:32;5041:5;5048:7;5057:6;5032:8;:32::i;:::-;5082:4;5075:11;;;4893:201;;;;:::o;3662:108::-;3723:7;3750:12;;3743:19;;3662:108;:::o;5674:295::-;5805:4;5822:15;5840:12;:10;:12::i;:::-;5822:30;;5863:38;5879:4;5885:7;5894:6;5863:15;:38::i;:::-;5912:27;5922:4;5928:2;5932:6;5912:9;:27::i;:::-;5957:4;5950:11;;;5674:295;;;;;:::o;3504:93::-;3562:5;3587:2;3580:9;;3504:93;:::o;6378:238::-;6466:4;6483:13;6499:12;:10;:12::i;:::-;6483:28;;6522:64;6531:5;6538:7;6575:10;6547:25;6557:5;6564:7;6547:9;:25::i;:::-;:38;;;;:::i;:::-;6522:8;:64::i;:::-;6604:4;6597:11;;;6378:238;;;;:::o;3833:127::-;3907:7;3934:9;:18;3944:7;3934:18;;;;;;;;;;;;;;;;3927:25;;3833:127;;;:::o;2761:104::-;2817:13;2850:7;2843:14;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2761:104;:::o;7119:436::-;7212:4;7229:13;7245:12;:10;:12::i;:::-;7229:28;;7268:24;7295:25;7305:5;7312:7;7295:9;:25::i;:::-;7268:52;;7359:15;7339:16;:35;;7331:85;;;;;;;;;;;;:::i;:::-;;;;;;;;;7452:60;7461:5;7468:7;7496:15;7477:16;:34;7452:8;:60::i;:::-;7543:4;7536:11;;;;7119:436;;;;:::o;4166:193::-;4245:4;4262:13;4278:12;:10;:12::i;:::-;4262:28;;4301;4311:5;4318:2;4322:6;4301:9;:28::i;:::-;4347:4;4340:11;;;4166:193;;;;:::o;4422:151::-;4511:7;4538:11;:18;4550:5;4538:18;;;;;;;;;;;;;;;:27;4557:7;4538:27;;;;;;;;;;;;;;;;4531:34;;4422:151;;;;:::o;859:98:4:-;912:7;939:10;932:17;;859:98;:::o;10753:380:0:-;10906:1;10889:19;;:5;:19;;;;10881:68;;;;;;;;;;;;:::i;:::-;;;;;;;;;10987:1;10968:21;;:7;:21;;;;10960:68;;;;;;;;;;;;:::i;:::-;;;;;;;;;11071:6;11041:11;:18;11053:5;11041:18;;;;;;;;;;;;;;;:27;11060:7;11041:27;;;;;;;;;;;;;;;:36;;;;11109:7;11093:32;;11102:5;11093:32;;;11118:6;11093:32;;;;;;:::i;:::-;;;;;;;;10753:380;;;:::o;11424:453::-;11559:24;11586:25;11596:5;11603:7;11586:9;:25::i;:::-;11559:52;;11646:17;11626:16;:37;11622:248;;11708:6;11688:16;:26;;11680:68;;;;;;;;;;;;:::i;:::-;;;;;;;;;11792:51;11801:5;11808:7;11836:6;11817:16;:25;11792:8;:51::i;:::-;11622:248;11548:329;11424:453;;;:::o;8034:671::-;8181:1;8165:18;;:4;:18;;;;8157:68;;;;;;;;;;;;:::i;:::-;;;;;;;;;8258:1;8244:16;;:2;:16;;;;8236:64;;;;;;;;;;;;:::i;:::-;;;;;;;;;8313:38;8334:4;8340:2;8344:6;8313:20;:38::i;:::-;8364:19;8386:9;:15;8396:4;8386:15;;;;;;;;;;;;;;;;8364:37;;8435:6;8420:11;:21;;8412:72;;;;;;;;;;;;:::i;:::-;;;;;;;;;8552:6;8538:11;:20;8520:9;:15;8530:4;8520:15;;;;;;;;;;;;;;;:38;;;;8597:6;8580:9;:13;8590:2;8580:13;;;;;;;;;;;;;;;;:23;;;;;;;:::i;:::-;;;;;;;;8636:2;8621:26;;8630:4;8621:26;;;8640:6;8621:26;;;;;;:::i;:::-;;;;;;;;8660:37;8680:4;8686:2;8690:6;8660:19;:37::i;:::-;8146:559;8034:671;;;:::o;12477:125::-;;;;:::o;13206:124::-;;;;:::o;7:139:6:-;53:5;91:6;78:20;69:29;;107:33;134:5;107:33;:::i;:::-;7:139;;;;:::o;152:::-;198:5;236:6;223:20;214:29;;252:33;279:5;252:33;:::i;:::-;152:139;;;;:::o;297:329::-;356:6;405:2;393:9;384:7;380:23;376:32;373:119;;;411:79;;:::i;:::-;373:119;531:1;556:53;601:7;592:6;581:9;577:22;556:53;:::i;:::-;546:63;;502:117;297:329;;;;:::o;632:474::-;700:6;708;757:2;745:9;736:7;732:23;728:32;725:119;;;763:79;;:::i;:::-;725:119;883:1;908:53;953:7;944:6;933:9;929:22;908:53;:::i;:::-;898:63;;854:117;1010:2;1036:53;1081:7;1072:6;1061:9;1057:22;1036:53;:::i;:::-;1026:63;;981:118;632:474;;;;;:::o;1112:619::-;1189:6;1197;1205;1254:2;1242:9;1233:7;1229:23;1225:32;1222:119;;;1260:79;;:::i;:::-;1222:119;1380:1;1405:53;1450:7;1441:6;1430:9;1426:22;1405:53;:::i;:::-;1395:63;;1351:117;1507:2;1533:53;1578:7;1569:6;1558:9;1554:22;1533:53;:::i;:::-;1523:63;;1478:118;1635:2;1661:53;1706:7;1697:6;1686:9;1682:22;1661:53;:::i;:::-;1651:63;;1606:118;1112:619;;;;;:::o;1737:474::-;1805:6;1813;1862:2;1850:9;1841:7;1837:23;1833:32;1830:119;;;1868:79;;:::i;:::-;1830:119;1988:1;2013:53;2058:7;2049:6;2038:9;2034:22;2013:53;:::i;:::-;2003:63;;1959:117;2115:2;2141:53;2186:7;2177:6;2166:9;2162:22;2141:53;:::i;:::-;2131:63;;2086:118;1737:474;;;;;:::o;2217:109::-;2298:21;2313:5;2298:21;:::i;:::-;2293:3;2286:34;2217:109;;:::o;2332:364::-;2420:3;2448:39;2481:5;2448:39;:::i;:::-;2503:71;2567:6;2562:3;2503:71;:::i;:::-;2496:78;;2583:52;2628:6;2623:3;2616:4;2609:5;2605:16;2583:52;:::i;:::-;2660:29;2682:6;2660:29;:::i;:::-;2655:3;2651:39;2644:46;;2424:272;2332:364;;;;:::o;2702:366::-;2844:3;2865:67;2929:2;2924:3;2865:67;:::i;:::-;2858:74;;2941:93;3030:3;2941:93;:::i;:::-;3059:2;3054:3;3050:12;3043:19;;2702:366;;;:::o;3074:::-;3216:3;3237:67;3301:2;3296:3;3237:67;:::i;:::-;3230:74;;3313:93;3402:3;3313:93;:::i;:::-;3431:2;3426:3;3422:12;3415:19;;3074:366;;;:::o;3446:::-;3588:3;3609:67;3673:2;3668:3;3609:67;:::i;:::-;3602:74;;3685:93;3774:3;3685:93;:::i;:::-;3803:2;3798:3;3794:12;3787:19;;3446:366;;;:::o;3818:::-;3960:3;3981:67;4045:2;4040:3;3981:67;:::i;:::-;3974:74;;4057:93;4146:3;4057:93;:::i;:::-;4175:2;4170:3;4166:12;4159:19;;3818:366;;;:::o;4190:::-;4332:3;4353:67;4417:2;4412:3;4353:67;:::i;:::-;4346:74;;4429:93;4518:3;4429:93;:::i;:::-;4547:2;4542:3;4538:12;4531:19;;4190:366;;;:::o;4562:::-;4704:3;4725:67;4789:2;4784:3;4725:67;:::i;:::-;4718:74;;4801:93;4890:3;4801:93;:::i;:::-;4919:2;4914:3;4910:12;4903:19;;4562:366;;;:::o;4934:::-;5076:3;5097:67;5161:2;5156:3;5097:67;:::i;:::-;5090:74;;5173:93;5262:3;5173:93;:::i;:::-;5291:2;5286:3;5282:12;5275:19;;4934:366;;;:::o;5306:118::-;5393:24;5411:5;5393:24;:::i;:::-;5388:3;5381:37;5306:118;;:::o;5430:112::-;5513:22;5529:5;5513:22;:::i;:::-;5508:3;5501:35;5430:112;;:::o;5548:210::-;5635:4;5673:2;5662:9;5658:18;5650:26;;5686:65;5748:1;5737:9;5733:17;5724:6;5686:65;:::i;:::-;5548:210;;;;:::o;5764:313::-;5877:4;5915:2;5904:9;5900:18;5892:26;;5964:9;5958:4;5954:20;5950:1;5939:9;5935:17;5928:47;5992:78;6065:4;6056:6;5992:78;:::i;:::-;5984:86;;5764:313;;;;:::o;6083:419::-;6249:4;6287:2;6276:9;6272:18;6264:26;;6336:9;6330:4;6326:20;6322:1;6311:9;6307:17;6300:47;6364:131;6490:4;6364:131;:::i;:::-;6356:139;;6083:419;;;:::o;6508:::-;6674:4;6712:2;6701:9;6697:18;6689:26;;6761:9;6755:4;6751:20;6747:1;6736:9;6732:17;6725:47;6789:131;6915:4;6789:131;:::i;:::-;6781:139;;6508:419;;;:::o;6933:::-;7099:4;7137:2;7126:9;7122:18;7114:26;;7186:9;7180:4;7176:20;7172:1;7161:9;7157:17;7150:47;7214:131;7340:4;7214:131;:::i;:::-;7206:139;;6933:419;;;:::o;7358:::-;7524:4;7562:2;7551:9;7547:18;7539:26;;7611:9;7605:4;7601:20;7597:1;7586:9;7582:17;7575:47;7639:131;7765:4;7639:131;:::i;:::-;7631:139;;7358:419;;;:::o;7783:::-;7949:4;7987:2;7976:9;7972:18;7964:26;;8036:9;8030:4;8026:20;8022:1;8011:9;8007:17;8000:47;8064:131;8190:4;8064:131;:::i;:::-;8056:139;;7783:419;;;:::o;8208:::-;8374:4;8412:2;8401:9;8397:18;8389:26;;8461:9;8455:4;8451:20;8447:1;8436:9;8432:17;8425:47;8489:131;8615:4;8489:131;:::i;:::-;8481:139;;8208:419;;;:::o;8633:::-;8799:4;8837:2;8826:9;8822:18;8814:26;;8886:9;8880:4;8876:20;8872:1;8861:9;8857:17;8850:47;8914:131;9040:4;8914:131;:::i;:::-;8906:139;;8633:419;;;:::o;9058:222::-;9151:4;9189:2;9178:9;9174:18;9166:26;;9202:71;9270:1;9259:9;9255:17;9246:6;9202:71;:::i;:::-;9058:222;;;;:::o;9286:214::-;9375:4;9413:2;9402:9;9398:18;9390:26;;9426:67;9490:1;9479:9;9475:17;9466:6;9426:67;:::i;:::-;9286:214;;;;:::o;9587:99::-;9639:6;9673:5;9667:12;9657:22;;9587:99;;;:::o;9692:169::-;9776:11;9810:6;9805:3;9798:19;9850:4;9845:3;9841:14;9826:29;;9692:169;;;;:::o;9867:305::-;9907:3;9926:20;9944:1;9926:20;:::i;:::-;9921:25;;9960:20;9978:1;9960:20;:::i;:::-;9955:25;;10114:1;10046:66;10042:74;10039:1;10036:81;10033:107;;;10120:18;;:::i;:::-;10033:107;10164:1;10161;10157:9;10150:16;;9867:305;;;;:::o;10178:96::-;10215:7;10244:24;10262:5;10244:24;:::i;:::-;10233:35;;10178:96;;;:::o;10280:90::-;10314:7;10357:5;10350:13;10343:21;10332:32;;10280:90;;;:::o;10376:126::-;10413:7;10453:42;10446:5;10442:54;10431:65;;10376:126;;;:::o;10508:77::-;10545:7;10574:5;10563:16;;10508:77;;;:::o;10591:86::-;10626:7;10666:4;10659:5;10655:16;10644:27;;10591:86;;;:::o;10683:307::-;10751:1;10761:113;10775:6;10772:1;10769:13;10761:113;;;10860:1;10855:3;10851:11;10845:18;10841:1;10836:3;10832:11;10825:39;10797:2;10794:1;10790:10;10785:15;;10761:113;;;10892:6;10889:1;10886:13;10883:101;;;10972:1;10963:6;10958:3;10954:16;10947:27;10883:101;10732:258;10683:307;;;:::o;10996:320::-;11040:6;11077:1;11071:4;11067:12;11057:22;;11124:1;11118:4;11114:12;11145:18;11135:81;;11201:4;11193:6;11189:17;11179:27;;11135:81;11263:2;11255:6;11252:14;11232:18;11229:38;11226:84;;;11282:18;;:::i;:::-;11226:84;11047:269;10996:320;;;:::o;11322:180::-;11370:77;11367:1;11360:88;11467:4;11464:1;11457:15;11491:4;11488:1;11481:15;11508:180;11556:77;11553:1;11546:88;11653:4;11650:1;11643:15;11677:4;11674:1;11667:15;11817:117;11926:1;11923;11916:12;11940:102;11981:6;12032:2;12028:7;12023:2;12016:5;12012:14;12008:28;11998:38;;11940:102;;;:::o;12048:222::-;12188:34;12184:1;12176:6;12172:14;12165:58;12257:5;12252:2;12244:6;12240:15;12233:30;12048:222;:::o;12276:221::-;12416:34;12412:1;12404:6;12400:14;12393:58;12485:4;12480:2;12472:6;12468:15;12461:29;12276:221;:::o;12503:179::-;12643:31;12639:1;12631:6;12627:14;12620:55;12503:179;:::o;12688:225::-;12828:34;12824:1;12816:6;12812:14;12805:58;12897:8;12892:2;12884:6;12880:15;12873:33;12688:225;:::o;12919:224::-;13059:34;13055:1;13047:6;13043:14;13036:58;13128:7;13123:2;13115:6;13111:15;13104:32;12919:224;:::o;13149:223::-;13289:34;13285:1;13277:6;13273:14;13266:58;13358:6;13353:2;13345:6;13341:15;13334:31;13149:223;:::o;13378:224::-;13518:34;13514:1;13506:6;13502:14;13495:58;13587:7;13582:2;13574:6;13570:15;13563:32;13378:224;:::o;13608:122::-;13681:24;13699:5;13681:24;:::i;:::-;13674:5;13671:35;13661:63;;13720:1;13717;13710:12;13661:63;13608:122;:::o;13736:::-;13809:24;13827:5;13809:24;:::i;:::-;13802:5;13799:35;13789:63;;13848:1;13845;13838:12;13789:63;13736:122;:::o"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "943200",
								"executionCost": "981",
								"totalCost": "944181"
							},
							"external": {
								"allowance(address,address)": "infinite",
								"approve(address,uint256)": "infinite",
								"balanceOf(address)": "2863",
								"decimals()": "432",
								"decreaseAllowance(address,uint256)": "infinite",
								"increaseAllowance(address,uint256)": "infinite",
								"name()": "infinite",
								"symbol()": "infinite",
								"totalSupply()": "2482",
								"transfer(address,uint256)": "infinite",
								"transferFrom(address,address,uint256)": "infinite"
							},
							"internal": {
								"__ERC20_init(string memory,string memory)": "infinite",
								"__ERC20_init_unchained(string memory,string memory)": "infinite",
								"_afterTokenTransfer(address,address,uint256)": "15",
								"_approve(address,address,uint256)": "infinite",
								"_beforeTokenTransfer(address,address,uint256)": "15",
								"_burn(address,uint256)": "infinite",
								"_mint(address,uint256)": "infinite",
								"_spendAllowance(address,address,uint256)": "infinite",
								"_transfer(address,address,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 1500,
									"end": 13631,
									"name": "PUSH",
									"source": 0,
									"value": "80"
								},
								{
									"begin": 1500,
									"end": 13631,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 1500,
									"end": 13631,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 1500,
									"end": 13631,
									"name": "CALLVALUE",
									"source": 0
								},
								{
									"begin": 1500,
									"end": 13631,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 1500,
									"end": 13631,
									"name": "ISZERO",
									"source": 0
								},
								{
									"begin": 1500,
									"end": 13631,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 1500,
									"end": 13631,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": 1500,
									"end": 13631,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 1500,
									"end": 13631,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 1500,
									"end": 13631,
									"name": "REVERT",
									"source": 0
								},
								{
									"begin": 1500,
									"end": 13631,
									"name": "tag",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 1500,
									"end": 13631,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 1500,
									"end": 13631,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 1500,
									"end": 13631,
									"name": "PUSH #[$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1500,
									"end": 13631,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 1500,
									"end": 13631,
									"name": "PUSH [$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1500,
									"end": 13631,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 1500,
									"end": 13631,
									"name": "CODECOPY",
									"source": 0
								},
								{
									"begin": 1500,
									"end": 13631,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 1500,
									"end": 13631,
									"name": "RETURN",
									"source": 0
								}
							],
							".data": {
								"0": {
									".auxdata": "a264697066735822122062dbf59ade107786d1f70754e60260c226abb9247426681ee5c7f06416e441e864736f6c63430008070033",
									".code": [
										{
											"begin": 1500,
											"end": 13631,
											"name": "PUSH",
											"source": 0,
											"value": "80"
										},
										{
											"begin": 1500,
											"end": 13631,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1500,
											"end": 13631,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1500,
											"end": 13631,
											"name": "CALLVALUE",
											"source": 0
										},
										{
											"begin": 1500,
											"end": 13631,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1500,
											"end": 13631,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 1500,
											"end": 13631,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 1500,
											"end": 13631,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1500,
											"end": 13631,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1500,
											"end": 13631,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1500,
											"end": 13631,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 1500,
											"end": 13631,
											"name": "tag",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 1500,
											"end": 13631,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1500,
											"end": 13631,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1500,
											"end": 13631,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1500,
											"end": 13631,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 1500,
											"end": 13631,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 1500,
											"end": 13631,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 1500,
											"end": 13631,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1500,
											"end": 13631,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1500,
											"end": 13631,
											"name": "CALLDATALOAD",
											"source": 0
										},
										{
											"begin": 1500,
											"end": 13631,
											"name": "PUSH",
											"source": 0,
											"value": "E0"
										},
										{
											"begin": 1500,
											"end": 13631,
											"name": "SHR",
											"source": 0
										},
										{
											"begin": 1500,
											"end": 13631,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1500,
											"end": 13631,
											"name": "PUSH",
											"source": 0,
											"value": "39509351"
										},
										{
											"begin": 1500,
											"end": 13631,
											"name": "GT",
											"source": 0
										},
										{
											"begin": 1500,
											"end": 13631,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "14"
										},
										{
											"begin": 1500,
											"end": 13631,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1500,
											"end": 13631,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1500,
											"end": 13631,
											"name": "PUSH",
											"source": 0,
											"value": "39509351"
										},
										{
											"begin": 1500,
											"end": 13631,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1500,
											"end": 13631,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "8"
										},
										{
											"begin": 1500,
											"end": 13631,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1500,
											"end": 13631,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1500,
											"end": 13631,
											"name": "PUSH",
											"source": 0,
											"value": "70A08231"
										},
										{
											"begin": 1500,
											"end": 13631,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1500,
											"end": 13631,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "9"
										},
										{
											"begin": 1500,
											"end": 13631,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1500,
											"end": 13631,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1500,
											"end": 13631,
											"name": "PUSH",
											"source": 0,
											"value": "95D89B41"
										},
										{
											"begin": 1500,
											"end": 13631,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1500,
											"end": 13631,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "10"
										},
										{
											"begin": 1500,
											"end": 13631,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1500,
											"end": 13631,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1500,
											"end": 13631,
											"name": "PUSH",
											"source": 0,
											"value": "A457C2D7"
										},
										{
											"begin": 1500,
											"end": 13631,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1500,
											"end": 13631,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "11"
										},
										{
											"begin": 1500,
											"end": 13631,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1500,
											"end": 13631,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1500,
											"end": 13631,
											"name": "PUSH",
											"source": 0,
											"value": "A9059CBB"
										},
										{
											"begin": 1500,
											"end": 13631,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1500,
											"end": 13631,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "12"
										},
										{
											"begin": 1500,
											"end": 13631,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1500,
											"end": 13631,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1500,
											"end": 13631,
											"name": "PUSH",
											"source": 0,
											"value": "DD62ED3E"
										},
										{
											"begin": 1500,
											"end": 13631,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1500,
											"end": 13631,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "13"
										},
										{
											"begin": 1500,
											"end": 13631,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1500,
											"end": 13631,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 1500,
											"end": 13631,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1500,
											"end": 13631,
											"name": "tag",
											"source": 0,
											"value": "14"
										},
										{
											"begin": 1500,
											"end": 13631,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1500,
											"end": 13631,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1500,
											"end": 13631,
											"name": "PUSH",
											"source": 0,
											"value": "6FDDE03"
										},
										{
											"begin": 1500,
											"end": 13631,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1500,
											"end": 13631,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "3"
										},
										{
											"begin": 1500,
											"end": 13631,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1500,
											"end": 13631,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1500,
											"end": 13631,
											"name": "PUSH",
											"source": 0,
											"value": "95EA7B3"
										},
										{
											"begin": 1500,
											"end": 13631,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1500,
											"end": 13631,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1500,
											"end": 13631,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1500,
											"end": 13631,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1500,
											"end": 13631,
											"name": "PUSH",
											"source": 0,
											"value": "18160DDD"
										},
										{
											"begin": 1500,
											"end": 13631,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1500,
											"end": 13631,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "5"
										},
										{
											"begin": 1500,
											"end": 13631,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1500,
											"end": 13631,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1500,
											"end": 13631,
											"name": "PUSH",
											"source": 0,
											"value": "23B872DD"
										},
										{
											"begin": 1500,
											"end": 13631,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1500,
											"end": 13631,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "6"
										},
										{
											"begin": 1500,
											"end": 13631,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1500,
											"end": 13631,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1500,
											"end": 13631,
											"name": "PUSH",
											"source": 0,
											"value": "313CE567"
										},
										{
											"begin": 1500,
											"end": 13631,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1500,
											"end": 13631,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "7"
										},
										{
											"begin": 1500,
											"end": 13631,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1500,
											"end": 13631,
											"name": "tag",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 1500,
											"end": 13631,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1500,
											"end": 13631,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1500,
											"end": 13631,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1500,
											"end": 13631,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 2542,
											"end": 2642,
											"name": "tag",
											"source": 0,
											"value": "3"
										},
										{
											"begin": 2542,
											"end": 2642,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2542,
											"end": 2642,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "15"
										},
										{
											"begin": 2542,
											"end": 2642,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "16"
										},
										{
											"begin": 2542,
											"end": 2642,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2542,
											"end": 2642,
											"name": "tag",
											"source": 0,
											"value": "15"
										},
										{
											"begin": 2542,
											"end": 2642,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2542,
											"end": 2642,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2542,
											"end": 2642,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2542,
											"end": 2642,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "17"
										},
										{
											"begin": 2542,
											"end": 2642,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2542,
											"end": 2642,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2542,
											"end": 2642,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "18"
										},
										{
											"begin": 2542,
											"end": 2642,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2542,
											"end": 2642,
											"name": "tag",
											"source": 0,
											"value": "17"
										},
										{
											"begin": 2542,
											"end": 2642,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2542,
											"end": 2642,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2542,
											"end": 2642,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2542,
											"end": 2642,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2542,
											"end": 2642,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2542,
											"end": 2642,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 2542,
											"end": 2642,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2542,
											"end": 2642,
											"name": "RETURN",
											"source": 0
										},
										{
											"begin": 4893,
											"end": 5094,
											"name": "tag",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 4893,
											"end": 5094,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4893,
											"end": 5094,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "19"
										},
										{
											"begin": 4893,
											"end": 5094,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 4893,
											"end": 5094,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 4893,
											"end": 5094,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 4893,
											"end": 5094,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 4893,
											"end": 5094,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 4893,
											"end": 5094,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 4893,
											"end": 5094,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4893,
											"end": 5094,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 4893,
											"end": 5094,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 4893,
											"end": 5094,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4893,
											"end": 5094,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "21"
										},
										{
											"begin": 4893,
											"end": 5094,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 4893,
											"end": 5094,
											"name": "tag",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 4893,
											"end": 5094,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4893,
											"end": 5094,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "22"
										},
										{
											"begin": 4893,
											"end": 5094,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 4893,
											"end": 5094,
											"name": "tag",
											"source": 0,
											"value": "19"
										},
										{
											"begin": 4893,
											"end": 5094,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4893,
											"end": 5094,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 4893,
											"end": 5094,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 4893,
											"end": 5094,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "23"
										},
										{
											"begin": 4893,
											"end": 5094,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 4893,
											"end": 5094,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4893,
											"end": 5094,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "24"
										},
										{
											"begin": 4893,
											"end": 5094,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 4893,
											"end": 5094,
											"name": "tag",
											"source": 0,
											"value": "23"
										},
										{
											"begin": 4893,
											"end": 5094,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4893,
											"end": 5094,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 4893,
											"end": 5094,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 4893,
											"end": 5094,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 4893,
											"end": 5094,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 4893,
											"end": 5094,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 4893,
											"end": 5094,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4893,
											"end": 5094,
											"name": "RETURN",
											"source": 0
										},
										{
											"begin": 3662,
											"end": 3770,
											"name": "tag",
											"source": 0,
											"value": "5"
										},
										{
											"begin": 3662,
											"end": 3770,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3662,
											"end": 3770,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "25"
										},
										{
											"begin": 3662,
											"end": 3770,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "26"
										},
										{
											"begin": 3662,
											"end": 3770,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 3662,
											"end": 3770,
											"name": "tag",
											"source": 0,
											"value": "25"
										},
										{
											"begin": 3662,
											"end": 3770,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3662,
											"end": 3770,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 3662,
											"end": 3770,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 3662,
											"end": 3770,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "27"
										},
										{
											"begin": 3662,
											"end": 3770,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 3662,
											"end": 3770,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3662,
											"end": 3770,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "28"
										},
										{
											"begin": 3662,
											"end": 3770,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 3662,
											"end": 3770,
											"name": "tag",
											"source": 0,
											"value": "27"
										},
										{
											"begin": 3662,
											"end": 3770,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3662,
											"end": 3770,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 3662,
											"end": 3770,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 3662,
											"end": 3770,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 3662,
											"end": 3770,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 3662,
											"end": 3770,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 3662,
											"end": 3770,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3662,
											"end": 3770,
											"name": "RETURN",
											"source": 0
										},
										{
											"begin": 5674,
											"end": 5969,
											"name": "tag",
											"source": 0,
											"value": "6"
										},
										{
											"begin": 5674,
											"end": 5969,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5674,
											"end": 5969,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "29"
										},
										{
											"begin": 5674,
											"end": 5969,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 5674,
											"end": 5969,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 5674,
											"end": 5969,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 5674,
											"end": 5969,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 5674,
											"end": 5969,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 5674,
											"end": 5969,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 5674,
											"end": 5969,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 5674,
											"end": 5969,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "30"
										},
										{
											"begin": 5674,
											"end": 5969,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 5674,
											"end": 5969,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 5674,
											"end": 5969,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "31"
										},
										{
											"begin": 5674,
											"end": 5969,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 5674,
											"end": 5969,
											"name": "tag",
											"source": 0,
											"value": "30"
										},
										{
											"begin": 5674,
											"end": 5969,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5674,
											"end": 5969,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "32"
										},
										{
											"begin": 5674,
											"end": 5969,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 5674,
											"end": 5969,
											"name": "tag",
											"source": 0,
											"value": "29"
										},
										{
											"begin": 5674,
											"end": 5969,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5674,
											"end": 5969,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 5674,
											"end": 5969,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 5674,
											"end": 5969,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "33"
										},
										{
											"begin": 5674,
											"end": 5969,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 5674,
											"end": 5969,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 5674,
											"end": 5969,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "24"
										},
										{
											"begin": 5674,
											"end": 5969,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 5674,
											"end": 5969,
											"name": "tag",
											"source": 0,
											"value": "33"
										},
										{
											"begin": 5674,
											"end": 5969,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5674,
											"end": 5969,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 5674,
											"end": 5969,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 5674,
											"end": 5969,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 5674,
											"end": 5969,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 5674,
											"end": 5969,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 5674,
											"end": 5969,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 5674,
											"end": 5969,
											"name": "RETURN",
											"source": 0
										},
										{
											"begin": 3504,
											"end": 3597,
											"name": "tag",
											"source": 0,
											"value": "7"
										},
										{
											"begin": 3504,
											"end": 3597,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3504,
											"end": 3597,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "34"
										},
										{
											"begin": 3504,
											"end": 3597,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "35"
										},
										{
											"begin": 3504,
											"end": 3597,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 3504,
											"end": 3597,
											"name": "tag",
											"source": 0,
											"value": "34"
										},
										{
											"begin": 3504,
											"end": 3597,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3504,
											"end": 3597,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 3504,
											"end": 3597,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 3504,
											"end": 3597,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "36"
										},
										{
											"begin": 3504,
											"end": 3597,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 3504,
											"end": 3597,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3504,
											"end": 3597,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "37"
										},
										{
											"begin": 3504,
											"end": 3597,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 3504,
											"end": 3597,
											"name": "tag",
											"source": 0,
											"value": "36"
										},
										{
											"begin": 3504,
											"end": 3597,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3504,
											"end": 3597,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 3504,
											"end": 3597,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 3504,
											"end": 3597,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 3504,
											"end": 3597,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 3504,
											"end": 3597,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 3504,
											"end": 3597,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3504,
											"end": 3597,
											"name": "RETURN",
											"source": 0
										},
										{
											"begin": 6378,
											"end": 6616,
											"name": "tag",
											"source": 0,
											"value": "8"
										},
										{
											"begin": 6378,
											"end": 6616,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 6378,
											"end": 6616,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "38"
										},
										{
											"begin": 6378,
											"end": 6616,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 6378,
											"end": 6616,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 6378,
											"end": 6616,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 6378,
											"end": 6616,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 6378,
											"end": 6616,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 6378,
											"end": 6616,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 6378,
											"end": 6616,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 6378,
											"end": 6616,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "39"
										},
										{
											"begin": 6378,
											"end": 6616,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 6378,
											"end": 6616,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 6378,
											"end": 6616,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "21"
										},
										{
											"begin": 6378,
											"end": 6616,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 6378,
											"end": 6616,
											"name": "tag",
											"source": 0,
											"value": "39"
										},
										{
											"begin": 6378,
											"end": 6616,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 6378,
											"end": 6616,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 6378,
											"end": 6616,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 6378,
											"end": 6616,
											"name": "tag",
											"source": 0,
											"value": "38"
										},
										{
											"begin": 6378,
											"end": 6616,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 6378,
											"end": 6616,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 6378,
											"end": 6616,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 6378,
											"end": 6616,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "41"
										},
										{
											"begin": 6378,
											"end": 6616,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 6378,
											"end": 6616,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 6378,
											"end": 6616,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "24"
										},
										{
											"begin": 6378,
											"end": 6616,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 6378,
											"end": 6616,
											"name": "tag",
											"source": 0,
											"value": "41"
										},
										{
											"begin": 6378,
											"end": 6616,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 6378,
											"end": 6616,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 6378,
											"end": 6616,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 6378,
											"end": 6616,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 6378,
											"end": 6616,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 6378,
											"end": 6616,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 6378,
											"end": 6616,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 6378,
											"end": 6616,
											"name": "RETURN",
											"source": 0
										},
										{
											"begin": 3833,
											"end": 3960,
											"name": "tag",
											"source": 0,
											"value": "9"
										},
										{
											"begin": 3833,
											"end": 3960,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3833,
											"end": 3960,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "42"
										},
										{
											"begin": 3833,
											"end": 3960,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 3833,
											"end": 3960,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 3833,
											"end": 3960,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 3833,
											"end": 3960,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 3833,
											"end": 3960,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 3833,
											"end": 3960,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 3833,
											"end": 3960,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3833,
											"end": 3960,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "43"
										},
										{
											"begin": 3833,
											"end": 3960,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 3833,
											"end": 3960,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3833,
											"end": 3960,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "44"
										},
										{
											"begin": 3833,
											"end": 3960,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 3833,
											"end": 3960,
											"name": "tag",
											"source": 0,
											"value": "43"
										},
										{
											"begin": 3833,
											"end": 3960,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3833,
											"end": 3960,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "45"
										},
										{
											"begin": 3833,
											"end": 3960,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 3833,
											"end": 3960,
											"name": "tag",
											"source": 0,
											"value": "42"
										},
										{
											"begin": 3833,
											"end": 3960,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3833,
											"end": 3960,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 3833,
											"end": 3960,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 3833,
											"end": 3960,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "46"
										},
										{
											"begin": 3833,
											"end": 3960,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 3833,
											"end": 3960,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3833,
											"end": 3960,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "28"
										},
										{
											"begin": 3833,
											"end": 3960,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 3833,
											"end": 3960,
											"name": "tag",
											"source": 0,
											"value": "46"
										},
										{
											"begin": 3833,
											"end": 3960,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3833,
											"end": 3960,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 3833,
											"end": 3960,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 3833,
											"end": 3960,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 3833,
											"end": 3960,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 3833,
											"end": 3960,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 3833,
											"end": 3960,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3833,
											"end": 3960,
											"name": "RETURN",
											"source": 0
										},
										{
											"begin": 2761,
											"end": 2865,
											"name": "tag",
											"source": 0,
											"value": "10"
										},
										{
											"begin": 2761,
											"end": 2865,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2761,
											"end": 2865,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "47"
										},
										{
											"begin": 2761,
											"end": 2865,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "48"
										},
										{
											"begin": 2761,
											"end": 2865,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2761,
											"end": 2865,
											"name": "tag",
											"source": 0,
											"value": "47"
										},
										{
											"begin": 2761,
											"end": 2865,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2761,
											"end": 2865,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2761,
											"end": 2865,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2761,
											"end": 2865,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "49"
										},
										{
											"begin": 2761,
											"end": 2865,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2761,
											"end": 2865,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2761,
											"end": 2865,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "18"
										},
										{
											"begin": 2761,
											"end": 2865,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2761,
											"end": 2865,
											"name": "tag",
											"source": 0,
											"value": "49"
										},
										{
											"begin": 2761,
											"end": 2865,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2761,
											"end": 2865,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2761,
											"end": 2865,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2761,
											"end": 2865,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2761,
											"end": 2865,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2761,
											"end": 2865,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 2761,
											"end": 2865,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2761,
											"end": 2865,
											"name": "RETURN",
											"source": 0
										},
										{
											"begin": 7119,
											"end": 7555,
											"name": "tag",
											"source": 0,
											"value": "11"
										},
										{
											"begin": 7119,
											"end": 7555,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 7119,
											"end": 7555,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "50"
										},
										{
											"begin": 7119,
											"end": 7555,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 7119,
											"end": 7555,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 7119,
											"end": 7555,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 7119,
											"end": 7555,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 7119,
											"end": 7555,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 7119,
											"end": 7555,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 7119,
											"end": 7555,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 7119,
											"end": 7555,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "51"
										},
										{
											"begin": 7119,
											"end": 7555,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 7119,
											"end": 7555,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 7119,
											"end": 7555,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "21"
										},
										{
											"begin": 7119,
											"end": 7555,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 7119,
											"end": 7555,
											"name": "tag",
											"source": 0,
											"value": "51"
										},
										{
											"begin": 7119,
											"end": 7555,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 7119,
											"end": 7555,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "52"
										},
										{
											"begin": 7119,
											"end": 7555,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 7119,
											"end": 7555,
											"name": "tag",
											"source": 0,
											"value": "50"
										},
										{
											"begin": 7119,
											"end": 7555,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 7119,
											"end": 7555,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 7119,
											"end": 7555,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 7119,
											"end": 7555,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "53"
										},
										{
											"begin": 7119,
											"end": 7555,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 7119,
											"end": 7555,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 7119,
											"end": 7555,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "24"
										},
										{
											"begin": 7119,
											"end": 7555,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 7119,
											"end": 7555,
											"name": "tag",
											"source": 0,
											"value": "53"
										},
										{
											"begin": 7119,
											"end": 7555,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 7119,
											"end": 7555,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 7119,
											"end": 7555,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 7119,
											"end": 7555,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 7119,
											"end": 7555,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 7119,
											"end": 7555,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 7119,
											"end": 7555,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 7119,
											"end": 7555,
											"name": "RETURN",
											"source": 0
										},
										{
											"begin": 4166,
											"end": 4359,
											"name": "tag",
											"source": 0,
											"value": "12"
										},
										{
											"begin": 4166,
											"end": 4359,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4166,
											"end": 4359,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "54"
										},
										{
											"begin": 4166,
											"end": 4359,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 4166,
											"end": 4359,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 4166,
											"end": 4359,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 4166,
											"end": 4359,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 4166,
											"end": 4359,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 4166,
											"end": 4359,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 4166,
											"end": 4359,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4166,
											"end": 4359,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "55"
										},
										{
											"begin": 4166,
											"end": 4359,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 4166,
											"end": 4359,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4166,
											"end": 4359,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "21"
										},
										{
											"begin": 4166,
											"end": 4359,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 4166,
											"end": 4359,
											"name": "tag",
											"source": 0,
											"value": "55"
										},
										{
											"begin": 4166,
											"end": 4359,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4166,
											"end": 4359,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "56"
										},
										{
											"begin": 4166,
											"end": 4359,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 4166,
											"end": 4359,
											"name": "tag",
											"source": 0,
											"value": "54"
										},
										{
											"begin": 4166,
											"end": 4359,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4166,
											"end": 4359,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 4166,
											"end": 4359,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 4166,
											"end": 4359,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "57"
										},
										{
											"begin": 4166,
											"end": 4359,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 4166,
											"end": 4359,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4166,
											"end": 4359,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "24"
										},
										{
											"begin": 4166,
											"end": 4359,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 4166,
											"end": 4359,
											"name": "tag",
											"source": 0,
											"value": "57"
										},
										{
											"begin": 4166,
											"end": 4359,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4166,
											"end": 4359,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 4166,
											"end": 4359,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 4166,
											"end": 4359,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 4166,
											"end": 4359,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 4166,
											"end": 4359,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 4166,
											"end": 4359,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4166,
											"end": 4359,
											"name": "RETURN",
											"source": 0
										},
										{
											"begin": 4422,
											"end": 4573,
											"name": "tag",
											"source": 0,
											"value": "13"
										},
										{
											"begin": 4422,
											"end": 4573,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4422,
											"end": 4573,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "58"
										},
										{
											"begin": 4422,
											"end": 4573,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 4422,
											"end": 4573,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 4422,
											"end": 4573,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 4422,
											"end": 4573,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 4422,
											"end": 4573,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 4422,
											"end": 4573,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 4422,
											"end": 4573,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4422,
											"end": 4573,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "59"
										},
										{
											"begin": 4422,
											"end": 4573,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 4422,
											"end": 4573,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4422,
											"end": 4573,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "60"
										},
										{
											"begin": 4422,
											"end": 4573,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 4422,
											"end": 4573,
											"name": "tag",
											"source": 0,
											"value": "59"
										},
										{
											"begin": 4422,
											"end": 4573,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4422,
											"end": 4573,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "61"
										},
										{
											"begin": 4422,
											"end": 4573,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 4422,
											"end": 4573,
											"name": "tag",
											"source": 0,
											"value": "58"
										},
										{
											"begin": 4422,
											"end": 4573,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4422,
											"end": 4573,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 4422,
											"end": 4573,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 4422,
											"end": 4573,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "62"
										},
										{
											"begin": 4422,
											"end": 4573,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 4422,
											"end": 4573,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4422,
											"end": 4573,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "28"
										},
										{
											"begin": 4422,
											"end": 4573,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 4422,
											"end": 4573,
											"name": "tag",
											"source": 0,
											"value": "62"
										},
										{
											"begin": 4422,
											"end": 4573,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4422,
											"end": 4573,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 4422,
											"end": 4573,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 4422,
											"end": 4573,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 4422,
											"end": 4573,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 4422,
											"end": 4573,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 4422,
											"end": 4573,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4422,
											"end": 4573,
											"name": "RETURN",
											"source": 0
										},
										{
											"begin": 2542,
											"end": 2642,
											"name": "tag",
											"source": 0,
											"value": "16"
										},
										{
											"begin": 2542,
											"end": 2642,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2596,
											"end": 2609,
											"name": "PUSH",
											"source": 0,
											"value": "60"
										},
										{
											"begin": 2629,
											"end": 2634,
											"name": "PUSH",
											"source": 0,
											"value": "36"
										},
										{
											"begin": 2622,
											"end": 2634,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2622,
											"end": 2634,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 2622,
											"end": 2634,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "64"
										},
										{
											"begin": 2622,
											"end": 2634,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2622,
											"end": 2634,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "65"
										},
										{
											"begin": 2622,
											"end": 2634,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2622,
											"end": 2634,
											"name": "tag",
											"source": 0,
											"value": "64"
										},
										{
											"begin": 2622,
											"end": 2634,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2622,
											"end": 2634,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2622,
											"end": 2634,
											"name": "PUSH",
											"source": 0,
											"value": "1F"
										},
										{
											"begin": 2622,
											"end": 2634,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2622,
											"end": 2634,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 2622,
											"end": 2634,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2622,
											"end": 2634,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2622,
											"end": 2634,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": 2622,
											"end": 2634,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 2622,
											"end": 2634,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 2622,
											"end": 2634,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2622,
											"end": 2634,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2622,
											"end": 2634,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2622,
											"end": 2634,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2622,
											"end": 2634,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2622,
											"end": 2634,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2622,
											"end": 2634,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2622,
											"end": 2634,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2622,
											"end": 2634,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2622,
											"end": 2634,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 2622,
											"end": 2634,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2622,
											"end": 2634,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2622,
											"end": 2634,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2622,
											"end": 2634,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2622,
											"end": 2634,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2622,
											"end": 2634,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 2622,
											"end": 2634,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2622,
											"end": 2634,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 2622,
											"end": 2634,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2622,
											"end": 2634,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 2622,
											"end": 2634,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "66"
										},
										{
											"begin": 2622,
											"end": 2634,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2622,
											"end": 2634,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "65"
										},
										{
											"begin": 2622,
											"end": 2634,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2622,
											"end": 2634,
											"name": "tag",
											"source": 0,
											"value": "66"
										},
										{
											"begin": 2622,
											"end": 2634,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2622,
											"end": 2634,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2622,
											"end": 2634,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 2622,
											"end": 2634,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "67"
										},
										{
											"begin": 2622,
											"end": 2634,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 2622,
											"end": 2634,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2622,
											"end": 2634,
											"name": "PUSH",
											"source": 0,
											"value": "1F"
										},
										{
											"begin": 2622,
											"end": 2634,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 2622,
											"end": 2634,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "68"
										},
										{
											"begin": 2622,
											"end": 2634,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 2622,
											"end": 2634,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 2622,
											"end": 2634,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2622,
											"end": 2634,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 2622,
											"end": 2634,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 2622,
											"end": 2634,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": 2622,
											"end": 2634,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 2622,
											"end": 2634,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 2622,
											"end": 2634,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2622,
											"end": 2634,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2622,
											"end": 2634,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 2622,
											"end": 2634,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2622,
											"end": 2634,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2622,
											"end": 2634,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "67"
										},
										{
											"begin": 2622,
											"end": 2634,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 2622,
											"end": 2634,
											"name": "tag",
											"source": 0,
											"value": "68"
										},
										{
											"begin": 2622,
											"end": 2634,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2622,
											"end": 2634,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 2622,
											"end": 2634,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2622,
											"end": 2634,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2622,
											"end": 2634,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2622,
											"end": 2634,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2622,
											"end": 2634,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2622,
											"end": 2634,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 2622,
											"end": 2634,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2622,
											"end": 2634,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 2622,
											"end": 2634,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2622,
											"end": 2634,
											"name": "tag",
											"source": 0,
											"value": "69"
										},
										{
											"begin": 2622,
											"end": 2634,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2622,
											"end": 2634,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2622,
											"end": 2634,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 2622,
											"end": 2634,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2622,
											"end": 2634,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2622,
											"end": 2634,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2622,
											"end": 2634,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 2622,
											"end": 2634,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2622,
											"end": 2634,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2622,
											"end": 2634,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 2622,
											"end": 2634,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2622,
											"end": 2634,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2622,
											"end": 2634,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 2622,
											"end": 2634,
											"name": "GT",
											"source": 0
										},
										{
											"begin": 2622,
											"end": 2634,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "69"
										},
										{
											"begin": 2622,
											"end": 2634,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 2622,
											"end": 2634,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 2622,
											"end": 2634,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2622,
											"end": 2634,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 2622,
											"end": 2634,
											"name": "PUSH",
											"source": 0,
											"value": "1F"
										},
										{
											"begin": 2622,
											"end": 2634,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2622,
											"end": 2634,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 2622,
											"end": 2634,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2622,
											"end": 2634,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2622,
											"end": 2634,
											"name": "tag",
											"source": 0,
											"value": "67"
										},
										{
											"begin": 2622,
											"end": 2634,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2622,
											"end": 2634,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2622,
											"end": 2634,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2622,
											"end": 2634,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2622,
											"end": 2634,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2622,
											"end": 2634,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2622,
											"end": 2634,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2622,
											"end": 2634,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2542,
											"end": 2642,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2542,
											"end": 2642,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 4893,
											"end": 5094,
											"name": "tag",
											"source": 0,
											"value": "22"
										},
										{
											"begin": 4893,
											"end": 5094,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4976,
											"end": 4980,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 4993,
											"end": 5006,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 5009,
											"end": 5021,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "71"
										},
										{
											"begin": 5009,
											"end": 5019,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "72"
										},
										{
											"begin": 5009,
											"end": 5021,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 5009,
											"end": 5021,
											"name": "tag",
											"source": 0,
											"value": "71"
										},
										{
											"begin": 5009,
											"end": 5021,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4993,
											"end": 5021,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4993,
											"end": 5021,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 5032,
											"end": 5064,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "73"
										},
										{
											"begin": 5041,
											"end": 5046,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 5048,
											"end": 5055,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 5057,
											"end": 5063,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 5032,
											"end": 5040,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "74"
										},
										{
											"begin": 5032,
											"end": 5064,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 5032,
											"end": 5064,
											"name": "tag",
											"source": 0,
											"value": "73"
										},
										{
											"begin": 5032,
											"end": 5064,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5082,
											"end": 5086,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 5075,
											"end": 5086,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 5075,
											"end": 5086,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 5075,
											"end": 5086,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 4893,
											"end": 5094,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 4893,
											"end": 5094,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 4893,
											"end": 5094,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 4893,
											"end": 5094,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 4893,
											"end": 5094,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 3662,
											"end": 3770,
											"name": "tag",
											"source": 0,
											"value": "26"
										},
										{
											"begin": 3662,
											"end": 3770,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3723,
											"end": 3730,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 3750,
											"end": 3762,
											"name": "PUSH",
											"source": 0,
											"value": "35"
										},
										{
											"begin": 3750,
											"end": 3762,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 3743,
											"end": 3762,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3743,
											"end": 3762,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 3662,
											"end": 3770,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3662,
											"end": 3770,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 5674,
											"end": 5969,
											"name": "tag",
											"source": 0,
											"value": "32"
										},
										{
											"begin": 5674,
											"end": 5969,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5805,
											"end": 5809,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 5822,
											"end": 5837,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 5840,
											"end": 5852,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "77"
										},
										{
											"begin": 5840,
											"end": 5850,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "72"
										},
										{
											"begin": 5840,
											"end": 5852,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 5840,
											"end": 5852,
											"name": "tag",
											"source": 0,
											"value": "77"
										},
										{
											"begin": 5840,
											"end": 5852,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5822,
											"end": 5852,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 5822,
											"end": 5852,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 5863,
											"end": 5901,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "78"
										},
										{
											"begin": 5879,
											"end": 5883,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 5885,
											"end": 5892,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 5894,
											"end": 5900,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 5863,
											"end": 5878,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "79"
										},
										{
											"begin": 5863,
											"end": 5901,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 5863,
											"end": 5901,
											"name": "tag",
											"source": 0,
											"value": "78"
										},
										{
											"begin": 5863,
											"end": 5901,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5912,
											"end": 5939,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "80"
										},
										{
											"begin": 5922,
											"end": 5926,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 5928,
											"end": 5930,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 5932,
											"end": 5938,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 5912,
											"end": 5921,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "81"
										},
										{
											"begin": 5912,
											"end": 5939,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 5912,
											"end": 5939,
											"name": "tag",
											"source": 0,
											"value": "80"
										},
										{
											"begin": 5912,
											"end": 5939,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5957,
											"end": 5961,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 5950,
											"end": 5961,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 5950,
											"end": 5961,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 5950,
											"end": 5961,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 5674,
											"end": 5969,
											"name": "SWAP4",
											"source": 0
										},
										{
											"begin": 5674,
											"end": 5969,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 5674,
											"end": 5969,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 5674,
											"end": 5969,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 5674,
											"end": 5969,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 5674,
											"end": 5969,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 3504,
											"end": 3597,
											"name": "tag",
											"source": 0,
											"value": "35"
										},
										{
											"begin": 3504,
											"end": 3597,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3562,
											"end": 3567,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 3587,
											"end": 3589,
											"name": "PUSH",
											"source": 0,
											"value": "12"
										},
										{
											"begin": 3580,
											"end": 3589,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3580,
											"end": 3589,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 3504,
											"end": 3597,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3504,
											"end": 3597,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 6378,
											"end": 6616,
											"name": "tag",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 6378,
											"end": 6616,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 6466,
											"end": 6470,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 6483,
											"end": 6496,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 6499,
											"end": 6511,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "84"
										},
										{
											"begin": 6499,
											"end": 6509,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "72"
										},
										{
											"begin": 6499,
											"end": 6511,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 6499,
											"end": 6511,
											"name": "tag",
											"source": 0,
											"value": "84"
										},
										{
											"begin": 6499,
											"end": 6511,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 6483,
											"end": 6511,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 6483,
											"end": 6511,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 6522,
											"end": 6586,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "85"
										},
										{
											"begin": 6531,
											"end": 6536,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 6538,
											"end": 6545,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 6575,
											"end": 6585,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 6547,
											"end": 6572,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "86"
										},
										{
											"begin": 6557,
											"end": 6562,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 6564,
											"end": 6571,
											"name": "DUP10",
											"source": 0
										},
										{
											"begin": 6547,
											"end": 6556,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "61"
										},
										{
											"begin": 6547,
											"end": 6572,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 6547,
											"end": 6572,
											"name": "tag",
											"source": 0,
											"value": "86"
										},
										{
											"begin": 6547,
											"end": 6572,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 6547,
											"end": 6585,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "87"
										},
										{
											"begin": 6547,
											"end": 6585,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 6547,
											"end": 6585,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 6547,
											"end": 6585,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "88"
										},
										{
											"begin": 6547,
											"end": 6585,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 6547,
											"end": 6585,
											"name": "tag",
											"source": 0,
											"value": "87"
										},
										{
											"begin": 6547,
											"end": 6585,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 6522,
											"end": 6530,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "74"
										},
										{
											"begin": 6522,
											"end": 6586,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 6522,
											"end": 6586,
											"name": "tag",
											"source": 0,
											"value": "85"
										},
										{
											"begin": 6522,
											"end": 6586,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 6604,
											"end": 6608,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 6597,
											"end": 6608,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 6597,
											"end": 6608,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 6597,
											"end": 6608,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 6378,
											"end": 6616,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 6378,
											"end": 6616,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 6378,
											"end": 6616,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 6378,
											"end": 6616,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 6378,
											"end": 6616,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 3833,
											"end": 3960,
											"name": "tag",
											"source": 0,
											"value": "45"
										},
										{
											"begin": 3833,
											"end": 3960,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3907,
											"end": 3914,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 3934,
											"end": 3943,
											"name": "PUSH",
											"source": 0,
											"value": "33"
										},
										{
											"begin": 3934,
											"end": 3952,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 3944,
											"end": 3951,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 3934,
											"end": 3952,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3934,
											"end": 3952,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 3934,
											"end": 3952,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3934,
											"end": 3952,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 3934,
											"end": 3952,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 3934,
											"end": 3952,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 3934,
											"end": 3952,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 3934,
											"end": 3952,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 3934,
											"end": 3952,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3934,
											"end": 3952,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 3934,
											"end": 3952,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 3934,
											"end": 3952,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 3934,
											"end": 3952,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 3934,
											"end": 3952,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 3934,
											"end": 3952,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 3934,
											"end": 3952,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 3927,
											"end": 3952,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3927,
											"end": 3952,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 3833,
											"end": 3960,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 3833,
											"end": 3960,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3833,
											"end": 3960,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 3833,
											"end": 3960,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 2761,
											"end": 2865,
											"name": "tag",
											"source": 0,
											"value": "48"
										},
										{
											"begin": 2761,
											"end": 2865,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2817,
											"end": 2830,
											"name": "PUSH",
											"source": 0,
											"value": "60"
										},
										{
											"begin": 2850,
											"end": 2857,
											"name": "PUSH",
											"source": 0,
											"value": "37"
										},
										{
											"begin": 2843,
											"end": 2857,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2843,
											"end": 2857,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 2843,
											"end": 2857,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "91"
										},
										{
											"begin": 2843,
											"end": 2857,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2843,
											"end": 2857,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "65"
										},
										{
											"begin": 2843,
											"end": 2857,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2843,
											"end": 2857,
											"name": "tag",
											"source": 0,
											"value": "91"
										},
										{
											"begin": 2843,
											"end": 2857,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2843,
											"end": 2857,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2843,
											"end": 2857,
											"name": "PUSH",
											"source": 0,
											"value": "1F"
										},
										{
											"begin": 2843,
											"end": 2857,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2843,
											"end": 2857,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 2843,
											"end": 2857,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2843,
											"end": 2857,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2843,
											"end": 2857,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": 2843,
											"end": 2857,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 2843,
											"end": 2857,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 2843,
											"end": 2857,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2843,
											"end": 2857,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2843,
											"end": 2857,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2843,
											"end": 2857,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2843,
											"end": 2857,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2843,
											"end": 2857,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2843,
											"end": 2857,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2843,
											"end": 2857,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2843,
											"end": 2857,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2843,
											"end": 2857,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 2843,
											"end": 2857,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2843,
											"end": 2857,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2843,
											"end": 2857,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2843,
											"end": 2857,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2843,
											"end": 2857,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2843,
											"end": 2857,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 2843,
											"end": 2857,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2843,
											"end": 2857,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 2843,
											"end": 2857,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2843,
											"end": 2857,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 2843,
											"end": 2857,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "92"
										},
										{
											"begin": 2843,
											"end": 2857,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2843,
											"end": 2857,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "65"
										},
										{
											"begin": 2843,
											"end": 2857,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2843,
											"end": 2857,
											"name": "tag",
											"source": 0,
											"value": "92"
										},
										{
											"begin": 2843,
											"end": 2857,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2843,
											"end": 2857,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2843,
											"end": 2857,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 2843,
											"end": 2857,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "93"
										},
										{
											"begin": 2843,
											"end": 2857,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 2843,
											"end": 2857,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2843,
											"end": 2857,
											"name": "PUSH",
											"source": 0,
											"value": "1F"
										},
										{
											"begin": 2843,
											"end": 2857,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 2843,
											"end": 2857,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "94"
										},
										{
											"begin": 2843,
											"end": 2857,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 2843,
											"end": 2857,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 2843,
											"end": 2857,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2843,
											"end": 2857,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 2843,
											"end": 2857,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 2843,
											"end": 2857,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": 2843,
											"end": 2857,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 2843,
											"end": 2857,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 2843,
											"end": 2857,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2843,
											"end": 2857,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2843,
											"end": 2857,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 2843,
											"end": 2857,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2843,
											"end": 2857,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2843,
											"end": 2857,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "93"
										},
										{
											"begin": 2843,
											"end": 2857,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 2843,
											"end": 2857,
											"name": "tag",
											"source": 0,
											"value": "94"
										},
										{
											"begin": 2843,
											"end": 2857,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2843,
											"end": 2857,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 2843,
											"end": 2857,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2843,
											"end": 2857,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2843,
											"end": 2857,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2843,
											"end": 2857,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2843,
											"end": 2857,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2843,
											"end": 2857,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 2843,
											"end": 2857,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2843,
											"end": 2857,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 2843,
											"end": 2857,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2843,
											"end": 2857,
											"name": "tag",
											"source": 0,
											"value": "95"
										},
										{
											"begin": 2843,
											"end": 2857,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2843,
											"end": 2857,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2843,
											"end": 2857,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 2843,
											"end": 2857,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2843,
											"end": 2857,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2843,
											"end": 2857,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2843,
											"end": 2857,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 2843,
											"end": 2857,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2843,
											"end": 2857,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2843,
											"end": 2857,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 2843,
											"end": 2857,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2843,
											"end": 2857,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2843,
											"end": 2857,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 2843,
											"end": 2857,
											"name": "GT",
											"source": 0
										},
										{
											"begin": 2843,
											"end": 2857,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "95"
										},
										{
											"begin": 2843,
											"end": 2857,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 2843,
											"end": 2857,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 2843,
											"end": 2857,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2843,
											"end": 2857,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 2843,
											"end": 2857,
											"name": "PUSH",
											"source": 0,
											"value": "1F"
										},
										{
											"begin": 2843,
											"end": 2857,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2843,
											"end": 2857,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 2843,
											"end": 2857,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2843,
											"end": 2857,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2843,
											"end": 2857,
											"name": "tag",
											"source": 0,
											"value": "93"
										},
										{
											"begin": 2843,
											"end": 2857,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2843,
											"end": 2857,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2843,
											"end": 2857,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2843,
											"end": 2857,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2843,
											"end": 2857,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2843,
											"end": 2857,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2843,
											"end": 2857,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2843,
											"end": 2857,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2761,
											"end": 2865,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2761,
											"end": 2865,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 7119,
											"end": 7555,
											"name": "tag",
											"source": 0,
											"value": "52"
										},
										{
											"begin": 7119,
											"end": 7555,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 7212,
											"end": 7216,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 7229,
											"end": 7242,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 7245,
											"end": 7257,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "97"
										},
										{
											"begin": 7245,
											"end": 7255,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "72"
										},
										{
											"begin": 7245,
											"end": 7257,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 7245,
											"end": 7257,
											"name": "tag",
											"source": 0,
											"value": "97"
										},
										{
											"begin": 7245,
											"end": 7257,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 7229,
											"end": 7257,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 7229,
											"end": 7257,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 7268,
											"end": 7292,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 7295,
											"end": 7320,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "98"
										},
										{
											"begin": 7305,
											"end": 7310,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 7312,
											"end": 7319,
											"name": "DUP7",
											"source": 0
										},
										{
											"begin": 7295,
											"end": 7304,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "61"
										},
										{
											"begin": 7295,
											"end": 7320,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 7295,
											"end": 7320,
											"name": "tag",
											"source": 0,
											"value": "98"
										},
										{
											"begin": 7295,
											"end": 7320,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 7268,
											"end": 7320,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 7268,
											"end": 7320,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 7359,
											"end": 7374,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 7339,
											"end": 7355,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 7339,
											"end": 7374,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 7339,
											"end": 7374,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 7331,
											"end": 7416,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "99"
										},
										{
											"begin": 7331,
											"end": 7416,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 7331,
											"end": 7416,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 7331,
											"end": 7416,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 7331,
											"end": 7416,
											"name": "PUSH",
											"source": 0,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 7331,
											"end": 7416,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 7331,
											"end": 7416,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 7331,
											"end": 7416,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 7331,
											"end": 7416,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 7331,
											"end": 7416,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 7331,
											"end": 7416,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 7331,
											"end": 7416,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "101"
										},
										{
											"begin": 7331,
											"end": 7416,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 7331,
											"end": 7416,
											"name": "tag",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 7331,
											"end": 7416,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 7331,
											"end": 7416,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 7331,
											"end": 7416,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 7331,
											"end": 7416,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 7331,
											"end": 7416,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 7331,
											"end": 7416,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 7331,
											"end": 7416,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 7331,
											"end": 7416,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 7331,
											"end": 7416,
											"name": "tag",
											"source": 0,
											"value": "99"
										},
										{
											"begin": 7331,
											"end": 7416,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 7452,
											"end": 7512,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "102"
										},
										{
											"begin": 7461,
											"end": 7466,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 7468,
											"end": 7475,
											"name": "DUP7",
											"source": 0
										},
										{
											"begin": 7496,
											"end": 7511,
											"name": "DUP7",
											"source": 0
										},
										{
											"begin": 7477,
											"end": 7493,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 7477,
											"end": 7511,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 7452,
											"end": 7460,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "74"
										},
										{
											"begin": 7452,
											"end": 7512,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 7452,
											"end": 7512,
											"name": "tag",
											"source": 0,
											"value": "102"
										},
										{
											"begin": 7452,
											"end": 7512,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 7543,
											"end": 7547,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 7536,
											"end": 7547,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 7536,
											"end": 7547,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 7536,
											"end": 7547,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 7536,
											"end": 7547,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 7119,
											"end": 7555,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 7119,
											"end": 7555,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 7119,
											"end": 7555,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 7119,
											"end": 7555,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 7119,
											"end": 7555,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 4166,
											"end": 4359,
											"name": "tag",
											"source": 0,
											"value": "56"
										},
										{
											"begin": 4166,
											"end": 4359,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4245,
											"end": 4249,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 4262,
											"end": 4275,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 4278,
											"end": 4290,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "104"
										},
										{
											"begin": 4278,
											"end": 4288,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "72"
										},
										{
											"begin": 4278,
											"end": 4290,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 4278,
											"end": 4290,
											"name": "tag",
											"source": 0,
											"value": "104"
										},
										{
											"begin": 4278,
											"end": 4290,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4262,
											"end": 4290,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4262,
											"end": 4290,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 4301,
											"end": 4329,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "105"
										},
										{
											"begin": 4311,
											"end": 4316,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 4318,
											"end": 4320,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 4322,
											"end": 4328,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 4301,
											"end": 4310,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "81"
										},
										{
											"begin": 4301,
											"end": 4329,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 4301,
											"end": 4329,
											"name": "tag",
											"source": 0,
											"value": "105"
										},
										{
											"begin": 4301,
											"end": 4329,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4347,
											"end": 4351,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 4340,
											"end": 4351,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 4340,
											"end": 4351,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 4340,
											"end": 4351,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 4166,
											"end": 4359,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 4166,
											"end": 4359,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 4166,
											"end": 4359,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 4166,
											"end": 4359,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 4166,
											"end": 4359,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 4422,
											"end": 4573,
											"name": "tag",
											"source": 0,
											"value": "61"
										},
										{
											"begin": 4422,
											"end": 4573,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4511,
											"end": 4518,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 4538,
											"end": 4549,
											"name": "PUSH",
											"source": 0,
											"value": "34"
										},
										{
											"begin": 4538,
											"end": 4556,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 4550,
											"end": 4555,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 4538,
											"end": 4556,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4538,
											"end": 4556,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 4538,
											"end": 4556,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4538,
											"end": 4556,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 4538,
											"end": 4556,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 4538,
											"end": 4556,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 4538,
											"end": 4556,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 4538,
											"end": 4556,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 4538,
											"end": 4556,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4538,
											"end": 4556,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 4538,
											"end": 4556,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 4538,
											"end": 4556,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 4538,
											"end": 4556,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 4538,
											"end": 4556,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 4538,
											"end": 4556,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 4538,
											"end": 4565,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 4557,
											"end": 4564,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 4538,
											"end": 4565,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4538,
											"end": 4565,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 4538,
											"end": 4565,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4538,
											"end": 4565,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 4538,
											"end": 4565,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 4538,
											"end": 4565,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 4538,
											"end": 4565,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 4538,
											"end": 4565,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 4538,
											"end": 4565,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4538,
											"end": 4565,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 4538,
											"end": 4565,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 4538,
											"end": 4565,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 4538,
											"end": 4565,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 4538,
											"end": 4565,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 4538,
											"end": 4565,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 4538,
											"end": 4565,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 4531,
											"end": 4565,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4531,
											"end": 4565,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 4422,
											"end": 4573,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 4422,
											"end": 4573,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 4422,
											"end": 4573,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 4422,
											"end": 4573,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 4422,
											"end": 4573,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 859,
											"end": 957,
											"name": "tag",
											"source": 4,
											"value": "72"
										},
										{
											"begin": 859,
											"end": 957,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 912,
											"end": 919,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 939,
											"end": 949,
											"name": "CALLER",
											"source": 4
										},
										{
											"begin": 932,
											"end": 949,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 932,
											"end": 949,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 859,
											"end": 957,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 859,
											"end": 957,
											"name": "JUMP",
											"source": 4,
											"value": "[out]"
										},
										{
											"begin": 10753,
											"end": 11133,
											"name": "tag",
											"source": 0,
											"value": "74"
										},
										{
											"begin": 10753,
											"end": 11133,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 10906,
											"end": 10907,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 10889,
											"end": 10908,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 10889,
											"end": 10908,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 10889,
											"end": 10894,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 10889,
											"end": 10908,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 10889,
											"end": 10908,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 10889,
											"end": 10908,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 10889,
											"end": 10908,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 10881,
											"end": 10949,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "109"
										},
										{
											"begin": 10881,
											"end": 10949,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 10881,
											"end": 10949,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 10881,
											"end": 10949,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 10881,
											"end": 10949,
											"name": "PUSH",
											"source": 0,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 10881,
											"end": 10949,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 10881,
											"end": 10949,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 10881,
											"end": 10949,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 10881,
											"end": 10949,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 10881,
											"end": 10949,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "110"
										},
										{
											"begin": 10881,
											"end": 10949,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 10881,
											"end": 10949,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "111"
										},
										{
											"begin": 10881,
											"end": 10949,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 10881,
											"end": 10949,
											"name": "tag",
											"source": 0,
											"value": "110"
										},
										{
											"begin": 10881,
											"end": 10949,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 10881,
											"end": 10949,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 10881,
											"end": 10949,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 10881,
											"end": 10949,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 10881,
											"end": 10949,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 10881,
											"end": 10949,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 10881,
											"end": 10949,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 10881,
											"end": 10949,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 10881,
											"end": 10949,
											"name": "tag",
											"source": 0,
											"value": "109"
										},
										{
											"begin": 10881,
											"end": 10949,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 10987,
											"end": 10988,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 10968,
											"end": 10989,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 10968,
											"end": 10989,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 10968,
											"end": 10975,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 10968,
											"end": 10989,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 10968,
											"end": 10989,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 10968,
											"end": 10989,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 10968,
											"end": 10989,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 10960,
											"end": 11028,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "112"
										},
										{
											"begin": 10960,
											"end": 11028,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 10960,
											"end": 11028,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 10960,
											"end": 11028,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 10960,
											"end": 11028,
											"name": "PUSH",
											"source": 0,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 10960,
											"end": 11028,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 10960,
											"end": 11028,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 10960,
											"end": 11028,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 10960,
											"end": 11028,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 10960,
											"end": 11028,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "113"
										},
										{
											"begin": 10960,
											"end": 11028,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 10960,
											"end": 11028,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "114"
										},
										{
											"begin": 10960,
											"end": 11028,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 10960,
											"end": 11028,
											"name": "tag",
											"source": 0,
											"value": "113"
										},
										{
											"begin": 10960,
											"end": 11028,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 10960,
											"end": 11028,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 10960,
											"end": 11028,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 10960,
											"end": 11028,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 10960,
											"end": 11028,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 10960,
											"end": 11028,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 10960,
											"end": 11028,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 10960,
											"end": 11028,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 10960,
											"end": 11028,
											"name": "tag",
											"source": 0,
											"value": "112"
										},
										{
											"begin": 10960,
											"end": 11028,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 11071,
											"end": 11077,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 11041,
											"end": 11052,
											"name": "PUSH",
											"source": 0,
											"value": "34"
										},
										{
											"begin": 11041,
											"end": 11059,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 11053,
											"end": 11058,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 11041,
											"end": 11059,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 11041,
											"end": 11059,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 11041,
											"end": 11059,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 11041,
											"end": 11059,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 11041,
											"end": 11059,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 11041,
											"end": 11059,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 11041,
											"end": 11059,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 11041,
											"end": 11059,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 11041,
											"end": 11059,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 11041,
											"end": 11059,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 11041,
											"end": 11059,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 11041,
											"end": 11059,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 11041,
											"end": 11059,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 11041,
											"end": 11059,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 11041,
											"end": 11059,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 11041,
											"end": 11068,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 11060,
											"end": 11067,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 11041,
											"end": 11068,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 11041,
											"end": 11068,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 11041,
											"end": 11068,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 11041,
											"end": 11068,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 11041,
											"end": 11068,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 11041,
											"end": 11068,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 11041,
											"end": 11068,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 11041,
											"end": 11068,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 11041,
											"end": 11068,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 11041,
											"end": 11068,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 11041,
											"end": 11068,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 11041,
											"end": 11068,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 11041,
											"end": 11068,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 11041,
											"end": 11068,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 11041,
											"end": 11068,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 11041,
											"end": 11077,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 11041,
											"end": 11077,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 11041,
											"end": 11077,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 11041,
											"end": 11077,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 11109,
											"end": 11116,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 11093,
											"end": 11125,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 11093,
											"end": 11125,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 11102,
											"end": 11107,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 11093,
											"end": 11125,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 11093,
											"end": 11125,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 11093,
											"end": 11125,
											"name": "PUSH",
											"source": 0,
											"value": "8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925"
										},
										{
											"begin": 11118,
											"end": 11124,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 11093,
											"end": 11125,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 11093,
											"end": 11125,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 11093,
											"end": 11125,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "115"
										},
										{
											"begin": 11093,
											"end": 11125,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 11093,
											"end": 11125,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 11093,
											"end": 11125,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "28"
										},
										{
											"begin": 11093,
											"end": 11125,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 11093,
											"end": 11125,
											"name": "tag",
											"source": 0,
											"value": "115"
										},
										{
											"begin": 11093,
											"end": 11125,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 11093,
											"end": 11125,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 11093,
											"end": 11125,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 11093,
											"end": 11125,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 11093,
											"end": 11125,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 11093,
											"end": 11125,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 11093,
											"end": 11125,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 11093,
											"end": 11125,
											"name": "LOG3",
											"source": 0
										},
										{
											"begin": 10753,
											"end": 11133,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 10753,
											"end": 11133,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 10753,
											"end": 11133,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 10753,
											"end": 11133,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 11424,
											"end": 11877,
											"name": "tag",
											"source": 0,
											"value": "79"
										},
										{
											"begin": 11424,
											"end": 11877,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 11559,
											"end": 11583,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 11586,
											"end": 11611,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "117"
										},
										{
											"begin": 11596,
											"end": 11601,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 11603,
											"end": 11610,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 11586,
											"end": 11595,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "61"
										},
										{
											"begin": 11586,
											"end": 11611,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 11586,
											"end": 11611,
											"name": "tag",
											"source": 0,
											"value": "117"
										},
										{
											"begin": 11586,
											"end": 11611,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 11559,
											"end": 11611,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 11559,
											"end": 11611,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 11646,
											"end": 11663,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 11626,
											"end": 11642,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 11626,
											"end": 11663,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 11622,
											"end": 11870,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "118"
										},
										{
											"begin": 11622,
											"end": 11870,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 11708,
											"end": 11714,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 11688,
											"end": 11704,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 11688,
											"end": 11714,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 11688,
											"end": 11714,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 11680,
											"end": 11748,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "119"
										},
										{
											"begin": 11680,
											"end": 11748,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 11680,
											"end": 11748,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 11680,
											"end": 11748,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 11680,
											"end": 11748,
											"name": "PUSH",
											"source": 0,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 11680,
											"end": 11748,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 11680,
											"end": 11748,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 11680,
											"end": 11748,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 11680,
											"end": 11748,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 11680,
											"end": 11748,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "120"
										},
										{
											"begin": 11680,
											"end": 11748,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 11680,
											"end": 11748,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "121"
										},
										{
											"begin": 11680,
											"end": 11748,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 11680,
											"end": 11748,
											"name": "tag",
											"source": 0,
											"value": "120"
										},
										{
											"begin": 11680,
											"end": 11748,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 11680,
											"end": 11748,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 11680,
											"end": 11748,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 11680,
											"end": 11748,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 11680,
											"end": 11748,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 11680,
											"end": 11748,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 11680,
											"end": 11748,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 11680,
											"end": 11748,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 11680,
											"end": 11748,
											"name": "tag",
											"source": 0,
											"value": "119"
										},
										{
											"begin": 11680,
											"end": 11748,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 11792,
											"end": 11843,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "122"
										},
										{
											"begin": 11801,
											"end": 11806,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 11808,
											"end": 11815,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 11836,
											"end": 11842,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 11817,
											"end": 11833,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 11817,
											"end": 11842,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 11792,
											"end": 11800,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "74"
										},
										{
											"begin": 11792,
											"end": 11843,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 11792,
											"end": 11843,
											"name": "tag",
											"source": 0,
											"value": "122"
										},
										{
											"begin": 11792,
											"end": 11843,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 11622,
											"end": 11870,
											"name": "tag",
											"source": 0,
											"value": "118"
										},
										{
											"begin": 11622,
											"end": 11870,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 11548,
											"end": 11877,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 11424,
											"end": 11877,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 11424,
											"end": 11877,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 11424,
											"end": 11877,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 11424,
											"end": 11877,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 8034,
											"end": 8705,
											"name": "tag",
											"source": 0,
											"value": "81"
										},
										{
											"begin": 8034,
											"end": 8705,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 8181,
											"end": 8182,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 8165,
											"end": 8183,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 8165,
											"end": 8183,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 8165,
											"end": 8169,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 8165,
											"end": 8183,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 8165,
											"end": 8183,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 8165,
											"end": 8183,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 8165,
											"end": 8183,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 8157,
											"end": 8225,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "124"
										},
										{
											"begin": 8157,
											"end": 8225,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 8157,
											"end": 8225,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 8157,
											"end": 8225,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 8157,
											"end": 8225,
											"name": "PUSH",
											"source": 0,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 8157,
											"end": 8225,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 8157,
											"end": 8225,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 8157,
											"end": 8225,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 8157,
											"end": 8225,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 8157,
											"end": 8225,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "125"
										},
										{
											"begin": 8157,
											"end": 8225,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 8157,
											"end": 8225,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "126"
										},
										{
											"begin": 8157,
											"end": 8225,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 8157,
											"end": 8225,
											"name": "tag",
											"source": 0,
											"value": "125"
										},
										{
											"begin": 8157,
											"end": 8225,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 8157,
											"end": 8225,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 8157,
											"end": 8225,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 8157,
											"end": 8225,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 8157,
											"end": 8225,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 8157,
											"end": 8225,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 8157,
											"end": 8225,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 8157,
											"end": 8225,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 8157,
											"end": 8225,
											"name": "tag",
											"source": 0,
											"value": "124"
										},
										{
											"begin": 8157,
											"end": 8225,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 8258,
											"end": 8259,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 8244,
											"end": 8260,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 8244,
											"end": 8260,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 8244,
											"end": 8246,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 8244,
											"end": 8260,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 8244,
											"end": 8260,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 8244,
											"end": 8260,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 8244,
											"end": 8260,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 8236,
											"end": 8300,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "127"
										},
										{
											"begin": 8236,
											"end": 8300,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 8236,
											"end": 8300,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 8236,
											"end": 8300,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 8236,
											"end": 8300,
											"name": "PUSH",
											"source": 0,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 8236,
											"end": 8300,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 8236,
											"end": 8300,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 8236,
											"end": 8300,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 8236,
											"end": 8300,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 8236,
											"end": 8300,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "128"
										},
										{
											"begin": 8236,
											"end": 8300,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 8236,
											"end": 8300,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "129"
										},
										{
											"begin": 8236,
											"end": 8300,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 8236,
											"end": 8300,
											"name": "tag",
											"source": 0,
											"value": "128"
										},
										{
											"begin": 8236,
											"end": 8300,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 8236,
											"end": 8300,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 8236,
											"end": 8300,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 8236,
											"end": 8300,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 8236,
											"end": 8300,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 8236,
											"end": 8300,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 8236,
											"end": 8300,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 8236,
											"end": 8300,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 8236,
											"end": 8300,
											"name": "tag",
											"source": 0,
											"value": "127"
										},
										{
											"begin": 8236,
											"end": 8300,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 8313,
											"end": 8351,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "130"
										},
										{
											"begin": 8334,
											"end": 8338,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 8340,
											"end": 8342,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 8344,
											"end": 8350,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 8313,
											"end": 8333,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "131"
										},
										{
											"begin": 8313,
											"end": 8351,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 8313,
											"end": 8351,
											"name": "tag",
											"source": 0,
											"value": "130"
										},
										{
											"begin": 8313,
											"end": 8351,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 8364,
											"end": 8383,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 8386,
											"end": 8395,
											"name": "PUSH",
											"source": 0,
											"value": "33"
										},
										{
											"begin": 8386,
											"end": 8401,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 8396,
											"end": 8400,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 8386,
											"end": 8401,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 8386,
											"end": 8401,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 8386,
											"end": 8401,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 8386,
											"end": 8401,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 8386,
											"end": 8401,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 8386,
											"end": 8401,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 8386,
											"end": 8401,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 8386,
											"end": 8401,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 8386,
											"end": 8401,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 8386,
											"end": 8401,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 8386,
											"end": 8401,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 8386,
											"end": 8401,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 8386,
											"end": 8401,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 8386,
											"end": 8401,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 8386,
											"end": 8401,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 8386,
											"end": 8401,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 8364,
											"end": 8401,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 8364,
											"end": 8401,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 8435,
											"end": 8441,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 8420,
											"end": 8431,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 8420,
											"end": 8441,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 8420,
											"end": 8441,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 8412,
											"end": 8484,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "132"
										},
										{
											"begin": 8412,
											"end": 8484,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 8412,
											"end": 8484,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 8412,
											"end": 8484,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 8412,
											"end": 8484,
											"name": "PUSH",
											"source": 0,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 8412,
											"end": 8484,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 8412,
											"end": 8484,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 8412,
											"end": 8484,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 8412,
											"end": 8484,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 8412,
											"end": 8484,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "133"
										},
										{
											"begin": 8412,
											"end": 8484,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 8412,
											"end": 8484,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "134"
										},
										{
											"begin": 8412,
											"end": 8484,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 8412,
											"end": 8484,
											"name": "tag",
											"source": 0,
											"value": "133"
										},
										{
											"begin": 8412,
											"end": 8484,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 8412,
											"end": 8484,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 8412,
											"end": 8484,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 8412,
											"end": 8484,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 8412,
											"end": 8484,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 8412,
											"end": 8484,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 8412,
											"end": 8484,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 8412,
											"end": 8484,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 8412,
											"end": 8484,
											"name": "tag",
											"source": 0,
											"value": "132"
										},
										{
											"begin": 8412,
											"end": 8484,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 8552,
											"end": 8558,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 8538,
											"end": 8549,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 8538,
											"end": 8558,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 8520,
											"end": 8529,
											"name": "PUSH",
											"source": 0,
											"value": "33"
										},
										{
											"begin": 8520,
											"end": 8535,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 8530,
											"end": 8534,
											"name": "DUP7",
											"source": 0
										},
										{
											"begin": 8520,
											"end": 8535,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 8520,
											"end": 8535,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 8520,
											"end": 8535,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 8520,
											"end": 8535,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 8520,
											"end": 8535,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 8520,
											"end": 8535,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 8520,
											"end": 8535,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 8520,
											"end": 8535,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 8520,
											"end": 8535,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 8520,
											"end": 8535,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 8520,
											"end": 8535,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 8520,
											"end": 8535,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 8520,
											"end": 8535,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 8520,
											"end": 8535,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 8520,
											"end": 8535,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 8520,
											"end": 8558,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 8520,
											"end": 8558,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 8520,
											"end": 8558,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 8520,
											"end": 8558,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 8597,
											"end": 8603,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 8580,
											"end": 8589,
											"name": "PUSH",
											"source": 0,
											"value": "33"
										},
										{
											"begin": 8580,
											"end": 8593,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 8590,
											"end": 8592,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 8580,
											"end": 8593,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 8580,
											"end": 8593,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 8580,
											"end": 8593,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 8580,
											"end": 8593,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 8580,
											"end": 8593,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 8580,
											"end": 8593,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 8580,
											"end": 8593,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 8580,
											"end": 8593,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 8580,
											"end": 8593,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 8580,
											"end": 8593,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 8580,
											"end": 8593,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 8580,
											"end": 8593,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 8580,
											"end": 8593,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 8580,
											"end": 8593,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 8580,
											"end": 8593,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 8580,
											"end": 8593,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 8580,
											"end": 8603,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 8580,
											"end": 8603,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 8580,
											"end": 8603,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 8580,
											"end": 8603,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "135"
										},
										{
											"begin": 8580,
											"end": 8603,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 8580,
											"end": 8603,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 8580,
											"end": 8603,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "88"
										},
										{
											"begin": 8580,
											"end": 8603,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 8580,
											"end": 8603,
											"name": "tag",
											"source": 0,
											"value": "135"
										},
										{
											"begin": 8580,
											"end": 8603,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 8580,
											"end": 8603,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 8580,
											"end": 8603,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 8580,
											"end": 8603,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 8580,
											"end": 8603,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 8580,
											"end": 8603,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 8580,
											"end": 8603,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 8580,
											"end": 8603,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 8636,
											"end": 8638,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 8621,
											"end": 8647,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 8621,
											"end": 8647,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 8630,
											"end": 8634,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 8621,
											"end": 8647,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 8621,
											"end": 8647,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 8621,
											"end": 8647,
											"name": "PUSH",
											"source": 0,
											"value": "DDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF"
										},
										{
											"begin": 8640,
											"end": 8646,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 8621,
											"end": 8647,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 8621,
											"end": 8647,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 8621,
											"end": 8647,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "136"
										},
										{
											"begin": 8621,
											"end": 8647,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 8621,
											"end": 8647,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 8621,
											"end": 8647,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "28"
										},
										{
											"begin": 8621,
											"end": 8647,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 8621,
											"end": 8647,
											"name": "tag",
											"source": 0,
											"value": "136"
										},
										{
											"begin": 8621,
											"end": 8647,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 8621,
											"end": 8647,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 8621,
											"end": 8647,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 8621,
											"end": 8647,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 8621,
											"end": 8647,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 8621,
											"end": 8647,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 8621,
											"end": 8647,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 8621,
											"end": 8647,
											"name": "LOG3",
											"source": 0
										},
										{
											"begin": 8660,
											"end": 8697,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "137"
										},
										{
											"begin": 8680,
											"end": 8684,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 8686,
											"end": 8688,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 8690,
											"end": 8696,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 8660,
											"end": 8679,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "138"
										},
										{
											"begin": 8660,
											"end": 8697,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 8660,
											"end": 8697,
											"name": "tag",
											"source": 0,
											"value": "137"
										},
										{
											"begin": 8660,
											"end": 8697,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 8146,
											"end": 8705,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 8034,
											"end": 8705,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 8034,
											"end": 8705,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 8034,
											"end": 8705,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 8034,
											"end": 8705,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 12477,
											"end": 12602,
											"name": "tag",
											"source": 0,
											"value": "131"
										},
										{
											"begin": 12477,
											"end": 12602,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 12477,
											"end": 12602,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 12477,
											"end": 12602,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 12477,
											"end": 12602,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 12477,
											"end": 12602,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 13206,
											"end": 13330,
											"name": "tag",
											"source": 0,
											"value": "138"
										},
										{
											"begin": 13206,
											"end": 13330,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 13206,
											"end": 13330,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 13206,
											"end": 13330,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 13206,
											"end": 13330,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 13206,
											"end": 13330,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 7,
											"end": 146,
											"name": "tag",
											"source": 6,
											"value": "142"
										},
										{
											"begin": 7,
											"end": 146,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 53,
											"end": 58,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 91,
											"end": 97,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 78,
											"end": 98,
											"name": "CALLDATALOAD",
											"source": 6
										},
										{
											"begin": 69,
											"end": 98,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 69,
											"end": 98,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 107,
											"end": 140,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "144"
										},
										{
											"begin": 134,
											"end": 139,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 107,
											"end": 140,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "145"
										},
										{
											"begin": 107,
											"end": 140,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 107,
											"end": 140,
											"name": "tag",
											"source": 6,
											"value": "144"
										},
										{
											"begin": 107,
											"end": 140,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 7,
											"end": 146,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 7,
											"end": 146,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 7,
											"end": 146,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 7,
											"end": 146,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 7,
											"end": 146,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 152,
											"end": 291,
											"name": "tag",
											"source": 6,
											"value": "146"
										},
										{
											"begin": 152,
											"end": 291,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 198,
											"end": 203,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 236,
											"end": 242,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 223,
											"end": 243,
											"name": "CALLDATALOAD",
											"source": 6
										},
										{
											"begin": 214,
											"end": 243,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 214,
											"end": 243,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 252,
											"end": 285,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "148"
										},
										{
											"begin": 279,
											"end": 284,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 252,
											"end": 285,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "149"
										},
										{
											"begin": 252,
											"end": 285,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 252,
											"end": 285,
											"name": "tag",
											"source": 6,
											"value": "148"
										},
										{
											"begin": 252,
											"end": 285,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 152,
											"end": 291,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 152,
											"end": 291,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 152,
											"end": 291,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 152,
											"end": 291,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 152,
											"end": 291,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 297,
											"end": 626,
											"name": "tag",
											"source": 6,
											"value": "44"
										},
										{
											"begin": 297,
											"end": 626,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 356,
											"end": 362,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 405,
											"end": 407,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 393,
											"end": 402,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 384,
											"end": 391,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 380,
											"end": 403,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 376,
											"end": 408,
											"name": "SLT",
											"source": 6
										},
										{
											"begin": 373,
											"end": 492,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 373,
											"end": 492,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "151"
										},
										{
											"begin": 373,
											"end": 492,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 411,
											"end": 490,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "152"
										},
										{
											"begin": 411,
											"end": 490,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "153"
										},
										{
											"begin": 411,
											"end": 490,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 411,
											"end": 490,
											"name": "tag",
											"source": 6,
											"value": "152"
										},
										{
											"begin": 411,
											"end": 490,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 373,
											"end": 492,
											"name": "tag",
											"source": 6,
											"value": "151"
										},
										{
											"begin": 373,
											"end": 492,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 531,
											"end": 532,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 556,
											"end": 609,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "154"
										},
										{
											"begin": 601,
											"end": 608,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 592,
											"end": 598,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 581,
											"end": 590,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 577,
											"end": 599,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 556,
											"end": 609,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "142"
										},
										{
											"begin": 556,
											"end": 609,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 556,
											"end": 609,
											"name": "tag",
											"source": 6,
											"value": "154"
										},
										{
											"begin": 556,
											"end": 609,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 546,
											"end": 609,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 546,
											"end": 609,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 502,
											"end": 619,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 297,
											"end": 626,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 297,
											"end": 626,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 297,
											"end": 626,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 297,
											"end": 626,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 297,
											"end": 626,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 632,
											"end": 1106,
											"name": "tag",
											"source": 6,
											"value": "60"
										},
										{
											"begin": 632,
											"end": 1106,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 700,
											"end": 706,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 708,
											"end": 714,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 757,
											"end": 759,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 745,
											"end": 754,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 736,
											"end": 743,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 732,
											"end": 755,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 728,
											"end": 760,
											"name": "SLT",
											"source": 6
										},
										{
											"begin": 725,
											"end": 844,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 725,
											"end": 844,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "156"
										},
										{
											"begin": 725,
											"end": 844,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 763,
											"end": 842,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "157"
										},
										{
											"begin": 763,
											"end": 842,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "153"
										},
										{
											"begin": 763,
											"end": 842,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 763,
											"end": 842,
											"name": "tag",
											"source": 6,
											"value": "157"
										},
										{
											"begin": 763,
											"end": 842,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 725,
											"end": 844,
											"name": "tag",
											"source": 6,
											"value": "156"
										},
										{
											"begin": 725,
											"end": 844,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 883,
											"end": 884,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 908,
											"end": 961,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "158"
										},
										{
											"begin": 953,
											"end": 960,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 944,
											"end": 950,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 933,
											"end": 942,
											"name": "DUP7",
											"source": 6
										},
										{
											"begin": 929,
											"end": 951,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 908,
											"end": 961,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "142"
										},
										{
											"begin": 908,
											"end": 961,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 908,
											"end": 961,
											"name": "tag",
											"source": 6,
											"value": "158"
										},
										{
											"begin": 908,
											"end": 961,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 898,
											"end": 961,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 898,
											"end": 961,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 854,
											"end": 971,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1010,
											"end": 1012,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 1036,
											"end": 1089,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "159"
										},
										{
											"begin": 1081,
											"end": 1088,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 1072,
											"end": 1078,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 1061,
											"end": 1070,
											"name": "DUP7",
											"source": 6
										},
										{
											"begin": 1057,
											"end": 1079,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 1036,
											"end": 1089,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "142"
										},
										{
											"begin": 1036,
											"end": 1089,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 1036,
											"end": 1089,
											"name": "tag",
											"source": 6,
											"value": "159"
										},
										{
											"begin": 1036,
											"end": 1089,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1026,
											"end": 1089,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 1026,
											"end": 1089,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 981,
											"end": 1099,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 632,
											"end": 1106,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 632,
											"end": 1106,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 632,
											"end": 1106,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 632,
											"end": 1106,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 632,
											"end": 1106,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 632,
											"end": 1106,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 1112,
											"end": 1731,
											"name": "tag",
											"source": 6,
											"value": "31"
										},
										{
											"begin": 1112,
											"end": 1731,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1189,
											"end": 1195,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 1197,
											"end": 1203,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1205,
											"end": 1211,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 1254,
											"end": 1256,
											"name": "PUSH",
											"source": 6,
											"value": "60"
										},
										{
											"begin": 1242,
											"end": 1251,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 1233,
											"end": 1240,
											"name": "DUP7",
											"source": 6
										},
										{
											"begin": 1229,
											"end": 1252,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 1225,
											"end": 1257,
											"name": "SLT",
											"source": 6
										},
										{
											"begin": 1222,
											"end": 1341,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 1222,
											"end": 1341,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "161"
										},
										{
											"begin": 1222,
											"end": 1341,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 1260,
											"end": 1339,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "162"
										},
										{
											"begin": 1260,
											"end": 1339,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "153"
										},
										{
											"begin": 1260,
											"end": 1339,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 1260,
											"end": 1339,
											"name": "tag",
											"source": 6,
											"value": "162"
										},
										{
											"begin": 1260,
											"end": 1339,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1222,
											"end": 1341,
											"name": "tag",
											"source": 6,
											"value": "161"
										},
										{
											"begin": 1222,
											"end": 1341,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1380,
											"end": 1381,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 1405,
											"end": 1458,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "163"
										},
										{
											"begin": 1450,
											"end": 1457,
											"name": "DUP7",
											"source": 6
										},
										{
											"begin": 1441,
											"end": 1447,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 1430,
											"end": 1439,
											"name": "DUP8",
											"source": 6
										},
										{
											"begin": 1426,
											"end": 1448,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 1405,
											"end": 1458,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "142"
										},
										{
											"begin": 1405,
											"end": 1458,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 1405,
											"end": 1458,
											"name": "tag",
											"source": 6,
											"value": "163"
										},
										{
											"begin": 1405,
											"end": 1458,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1395,
											"end": 1458,
											"name": "SWAP4",
											"source": 6
										},
										{
											"begin": 1395,
											"end": 1458,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1351,
											"end": 1468,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1507,
											"end": 1509,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 1533,
											"end": 1586,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "164"
										},
										{
											"begin": 1578,
											"end": 1585,
											"name": "DUP7",
											"source": 6
										},
										{
											"begin": 1569,
											"end": 1575,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 1558,
											"end": 1567,
											"name": "DUP8",
											"source": 6
										},
										{
											"begin": 1554,
											"end": 1576,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 1533,
											"end": 1586,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "142"
										},
										{
											"begin": 1533,
											"end": 1586,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 1533,
											"end": 1586,
											"name": "tag",
											"source": 6,
											"value": "164"
										},
										{
											"begin": 1533,
											"end": 1586,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1523,
											"end": 1586,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 1523,
											"end": 1586,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1478,
											"end": 1596,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1635,
											"end": 1637,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 1661,
											"end": 1714,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "165"
										},
										{
											"begin": 1706,
											"end": 1713,
											"name": "DUP7",
											"source": 6
										},
										{
											"begin": 1697,
											"end": 1703,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 1686,
											"end": 1695,
											"name": "DUP8",
											"source": 6
										},
										{
											"begin": 1682,
											"end": 1704,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 1661,
											"end": 1714,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "146"
										},
										{
											"begin": 1661,
											"end": 1714,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 1661,
											"end": 1714,
											"name": "tag",
											"source": 6,
											"value": "165"
										},
										{
											"begin": 1661,
											"end": 1714,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1651,
											"end": 1714,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 1651,
											"end": 1714,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1606,
											"end": 1724,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1112,
											"end": 1731,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 1112,
											"end": 1731,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1112,
											"end": 1731,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 1112,
											"end": 1731,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1112,
											"end": 1731,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 1112,
											"end": 1731,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 1737,
											"end": 2211,
											"name": "tag",
											"source": 6,
											"value": "21"
										},
										{
											"begin": 1737,
											"end": 2211,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1805,
											"end": 1811,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 1813,
											"end": 1819,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1862,
											"end": 1864,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 1850,
											"end": 1859,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 1841,
											"end": 1848,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 1837,
											"end": 1860,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 1833,
											"end": 1865,
											"name": "SLT",
											"source": 6
										},
										{
											"begin": 1830,
											"end": 1949,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 1830,
											"end": 1949,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "167"
										},
										{
											"begin": 1830,
											"end": 1949,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 1868,
											"end": 1947,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "168"
										},
										{
											"begin": 1868,
											"end": 1947,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "153"
										},
										{
											"begin": 1868,
											"end": 1947,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 1868,
											"end": 1947,
											"name": "tag",
											"source": 6,
											"value": "168"
										},
										{
											"begin": 1868,
											"end": 1947,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1830,
											"end": 1949,
											"name": "tag",
											"source": 6,
											"value": "167"
										},
										{
											"begin": 1830,
											"end": 1949,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1988,
											"end": 1989,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 2013,
											"end": 2066,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "169"
										},
										{
											"begin": 2058,
											"end": 2065,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 2049,
											"end": 2055,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 2038,
											"end": 2047,
											"name": "DUP7",
											"source": 6
										},
										{
											"begin": 2034,
											"end": 2056,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 2013,
											"end": 2066,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "142"
										},
										{
											"begin": 2013,
											"end": 2066,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 2013,
											"end": 2066,
											"name": "tag",
											"source": 6,
											"value": "169"
										},
										{
											"begin": 2013,
											"end": 2066,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2003,
											"end": 2066,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 2003,
											"end": 2066,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1959,
											"end": 2076,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 2115,
											"end": 2117,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 2141,
											"end": 2194,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "170"
										},
										{
											"begin": 2186,
											"end": 2193,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 2177,
											"end": 2183,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 2166,
											"end": 2175,
											"name": "DUP7",
											"source": 6
										},
										{
											"begin": 2162,
											"end": 2184,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 2141,
											"end": 2194,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "146"
										},
										{
											"begin": 2141,
											"end": 2194,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 2141,
											"end": 2194,
											"name": "tag",
											"source": 6,
											"value": "170"
										},
										{
											"begin": 2141,
											"end": 2194,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2131,
											"end": 2194,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 2131,
											"end": 2194,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 2086,
											"end": 2204,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1737,
											"end": 2211,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 1737,
											"end": 2211,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1737,
											"end": 2211,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 1737,
											"end": 2211,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1737,
											"end": 2211,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1737,
											"end": 2211,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 2217,
											"end": 2326,
											"name": "tag",
											"source": 6,
											"value": "171"
										},
										{
											"begin": 2217,
											"end": 2326,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2298,
											"end": 2319,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "173"
										},
										{
											"begin": 2313,
											"end": 2318,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 2298,
											"end": 2319,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "174"
										},
										{
											"begin": 2298,
											"end": 2319,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 2298,
											"end": 2319,
											"name": "tag",
											"source": 6,
											"value": "173"
										},
										{
											"begin": 2298,
											"end": 2319,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2293,
											"end": 2296,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 2286,
											"end": 2320,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 2217,
											"end": 2326,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 2217,
											"end": 2326,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 2217,
											"end": 2326,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 2332,
											"end": 2696,
											"name": "tag",
											"source": 6,
											"value": "175"
										},
										{
											"begin": 2332,
											"end": 2696,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2420,
											"end": 2423,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 2448,
											"end": 2487,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "177"
										},
										{
											"begin": 2481,
											"end": 2486,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 2448,
											"end": 2487,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "178"
										},
										{
											"begin": 2448,
											"end": 2487,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 2448,
											"end": 2487,
											"name": "tag",
											"source": 6,
											"value": "177"
										},
										{
											"begin": 2448,
											"end": 2487,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2503,
											"end": 2574,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "179"
										},
										{
											"begin": 2567,
											"end": 2573,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 2562,
											"end": 2565,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 2503,
											"end": 2574,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "180"
										},
										{
											"begin": 2503,
											"end": 2574,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 2503,
											"end": 2574,
											"name": "tag",
											"source": 6,
											"value": "179"
										},
										{
											"begin": 2503,
											"end": 2574,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2496,
											"end": 2574,
											"name": "SWAP4",
											"source": 6
										},
										{
											"begin": 2496,
											"end": 2574,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 2583,
											"end": 2635,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "181"
										},
										{
											"begin": 2628,
											"end": 2634,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 2623,
											"end": 2626,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 2616,
											"end": 2620,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 2609,
											"end": 2614,
											"name": "DUP7",
											"source": 6
										},
										{
											"begin": 2605,
											"end": 2621,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 2583,
											"end": 2635,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "182"
										},
										{
											"begin": 2583,
											"end": 2635,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 2583,
											"end": 2635,
											"name": "tag",
											"source": 6,
											"value": "181"
										},
										{
											"begin": 2583,
											"end": 2635,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2660,
											"end": 2689,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "183"
										},
										{
											"begin": 2682,
											"end": 2688,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 2660,
											"end": 2689,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "184"
										},
										{
											"begin": 2660,
											"end": 2689,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 2660,
											"end": 2689,
											"name": "tag",
											"source": 6,
											"value": "183"
										},
										{
											"begin": 2660,
											"end": 2689,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2655,
											"end": 2658,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 2651,
											"end": 2690,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 2644,
											"end": 2690,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 2644,
											"end": 2690,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 2424,
											"end": 2696,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 2332,
											"end": 2696,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 2332,
											"end": 2696,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 2332,
											"end": 2696,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 2332,
											"end": 2696,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 2332,
											"end": 2696,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 2702,
											"end": 3068,
											"name": "tag",
											"source": 6,
											"value": "185"
										},
										{
											"begin": 2702,
											"end": 3068,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2844,
											"end": 2847,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 2865,
											"end": 2932,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "187"
										},
										{
											"begin": 2929,
											"end": 2931,
											"name": "PUSH",
											"source": 6,
											"value": "23"
										},
										{
											"begin": 2924,
											"end": 2927,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 2865,
											"end": 2932,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "180"
										},
										{
											"begin": 2865,
											"end": 2932,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 2865,
											"end": 2932,
											"name": "tag",
											"source": 6,
											"value": "187"
										},
										{
											"begin": 2865,
											"end": 2932,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2858,
											"end": 2932,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 2858,
											"end": 2932,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 2941,
											"end": 3034,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "188"
										},
										{
											"begin": 3030,
											"end": 3033,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 2941,
											"end": 3034,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "189"
										},
										{
											"begin": 2941,
											"end": 3034,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 2941,
											"end": 3034,
											"name": "tag",
											"source": 6,
											"value": "188"
										},
										{
											"begin": 2941,
											"end": 3034,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3059,
											"end": 3061,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 3054,
											"end": 3057,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 3050,
											"end": 3062,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 3043,
											"end": 3062,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3043,
											"end": 3062,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 2702,
											"end": 3068,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 2702,
											"end": 3068,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2702,
											"end": 3068,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 2702,
											"end": 3068,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 3074,
											"end": 3440,
											"name": "tag",
											"source": 6,
											"value": "190"
										},
										{
											"begin": 3074,
											"end": 3440,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3216,
											"end": 3219,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 3237,
											"end": 3304,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "192"
										},
										{
											"begin": 3301,
											"end": 3303,
											"name": "PUSH",
											"source": 6,
											"value": "22"
										},
										{
											"begin": 3296,
											"end": 3299,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 3237,
											"end": 3304,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "180"
										},
										{
											"begin": 3237,
											"end": 3304,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 3237,
											"end": 3304,
											"name": "tag",
											"source": 6,
											"value": "192"
										},
										{
											"begin": 3237,
											"end": 3304,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3230,
											"end": 3304,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 3230,
											"end": 3304,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 3313,
											"end": 3406,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "193"
										},
										{
											"begin": 3402,
											"end": 3405,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 3313,
											"end": 3406,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "194"
										},
										{
											"begin": 3313,
											"end": 3406,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 3313,
											"end": 3406,
											"name": "tag",
											"source": 6,
											"value": "193"
										},
										{
											"begin": 3313,
											"end": 3406,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3431,
											"end": 3433,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 3426,
											"end": 3429,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 3422,
											"end": 3434,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 3415,
											"end": 3434,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3415,
											"end": 3434,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 3074,
											"end": 3440,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 3074,
											"end": 3440,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3074,
											"end": 3440,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 3074,
											"end": 3440,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 3446,
											"end": 3812,
											"name": "tag",
											"source": 6,
											"value": "195"
										},
										{
											"begin": 3446,
											"end": 3812,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3588,
											"end": 3591,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 3609,
											"end": 3676,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "197"
										},
										{
											"begin": 3673,
											"end": 3675,
											"name": "PUSH",
											"source": 6,
											"value": "1D"
										},
										{
											"begin": 3668,
											"end": 3671,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 3609,
											"end": 3676,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "180"
										},
										{
											"begin": 3609,
											"end": 3676,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 3609,
											"end": 3676,
											"name": "tag",
											"source": 6,
											"value": "197"
										},
										{
											"begin": 3609,
											"end": 3676,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3602,
											"end": 3676,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 3602,
											"end": 3676,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 3685,
											"end": 3778,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "198"
										},
										{
											"begin": 3774,
											"end": 3777,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 3685,
											"end": 3778,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "199"
										},
										{
											"begin": 3685,
											"end": 3778,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 3685,
											"end": 3778,
											"name": "tag",
											"source": 6,
											"value": "198"
										},
										{
											"begin": 3685,
											"end": 3778,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3803,
											"end": 3805,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 3798,
											"end": 3801,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 3794,
											"end": 3806,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 3787,
											"end": 3806,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3787,
											"end": 3806,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 3446,
											"end": 3812,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 3446,
											"end": 3812,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3446,
											"end": 3812,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 3446,
											"end": 3812,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 3818,
											"end": 4184,
											"name": "tag",
											"source": 6,
											"value": "200"
										},
										{
											"begin": 3818,
											"end": 4184,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3960,
											"end": 3963,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 3981,
											"end": 4048,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "202"
										},
										{
											"begin": 4045,
											"end": 4047,
											"name": "PUSH",
											"source": 6,
											"value": "26"
										},
										{
											"begin": 4040,
											"end": 4043,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 3981,
											"end": 4048,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "180"
										},
										{
											"begin": 3981,
											"end": 4048,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 3981,
											"end": 4048,
											"name": "tag",
											"source": 6,
											"value": "202"
										},
										{
											"begin": 3981,
											"end": 4048,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3974,
											"end": 4048,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 3974,
											"end": 4048,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 4057,
											"end": 4150,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "203"
										},
										{
											"begin": 4146,
											"end": 4149,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 4057,
											"end": 4150,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "204"
										},
										{
											"begin": 4057,
											"end": 4150,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 4057,
											"end": 4150,
											"name": "tag",
											"source": 6,
											"value": "203"
										},
										{
											"begin": 4057,
											"end": 4150,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 4175,
											"end": 4177,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 4170,
											"end": 4173,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 4166,
											"end": 4178,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 4159,
											"end": 4178,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 4159,
											"end": 4178,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 3818,
											"end": 4184,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 3818,
											"end": 4184,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3818,
											"end": 4184,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 3818,
											"end": 4184,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 4190,
											"end": 4556,
											"name": "tag",
											"source": 6,
											"value": "205"
										},
										{
											"begin": 4190,
											"end": 4556,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 4332,
											"end": 4335,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 4353,
											"end": 4420,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "207"
										},
										{
											"begin": 4417,
											"end": 4419,
											"name": "PUSH",
											"source": 6,
											"value": "25"
										},
										{
											"begin": 4412,
											"end": 4415,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 4353,
											"end": 4420,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "180"
										},
										{
											"begin": 4353,
											"end": 4420,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 4353,
											"end": 4420,
											"name": "tag",
											"source": 6,
											"value": "207"
										},
										{
											"begin": 4353,
											"end": 4420,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 4346,
											"end": 4420,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 4346,
											"end": 4420,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 4429,
											"end": 4522,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "208"
										},
										{
											"begin": 4518,
											"end": 4521,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 4429,
											"end": 4522,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "209"
										},
										{
											"begin": 4429,
											"end": 4522,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 4429,
											"end": 4522,
											"name": "tag",
											"source": 6,
											"value": "208"
										},
										{
											"begin": 4429,
											"end": 4522,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 4547,
											"end": 4549,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 4542,
											"end": 4545,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 4538,
											"end": 4550,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 4531,
											"end": 4550,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 4531,
											"end": 4550,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 4190,
											"end": 4556,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 4190,
											"end": 4556,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 4190,
											"end": 4556,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 4190,
											"end": 4556,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 4562,
											"end": 4928,
											"name": "tag",
											"source": 6,
											"value": "210"
										},
										{
											"begin": 4562,
											"end": 4928,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 4704,
											"end": 4707,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 4725,
											"end": 4792,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "212"
										},
										{
											"begin": 4789,
											"end": 4791,
											"name": "PUSH",
											"source": 6,
											"value": "24"
										},
										{
											"begin": 4784,
											"end": 4787,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 4725,
											"end": 4792,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "180"
										},
										{
											"begin": 4725,
											"end": 4792,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 4725,
											"end": 4792,
											"name": "tag",
											"source": 6,
											"value": "212"
										},
										{
											"begin": 4725,
											"end": 4792,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 4718,
											"end": 4792,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 4718,
											"end": 4792,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 4801,
											"end": 4894,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "213"
										},
										{
											"begin": 4890,
											"end": 4893,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 4801,
											"end": 4894,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "214"
										},
										{
											"begin": 4801,
											"end": 4894,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 4801,
											"end": 4894,
											"name": "tag",
											"source": 6,
											"value": "213"
										},
										{
											"begin": 4801,
											"end": 4894,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 4919,
											"end": 4921,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 4914,
											"end": 4917,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 4910,
											"end": 4922,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 4903,
											"end": 4922,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 4903,
											"end": 4922,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 4562,
											"end": 4928,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 4562,
											"end": 4928,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 4562,
											"end": 4928,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 4562,
											"end": 4928,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 4934,
											"end": 5300,
											"name": "tag",
											"source": 6,
											"value": "215"
										},
										{
											"begin": 4934,
											"end": 5300,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5076,
											"end": 5079,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 5097,
											"end": 5164,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "217"
										},
										{
											"begin": 5161,
											"end": 5163,
											"name": "PUSH",
											"source": 6,
											"value": "25"
										},
										{
											"begin": 5156,
											"end": 5159,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 5097,
											"end": 5164,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "180"
										},
										{
											"begin": 5097,
											"end": 5164,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 5097,
											"end": 5164,
											"name": "tag",
											"source": 6,
											"value": "217"
										},
										{
											"begin": 5097,
											"end": 5164,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5090,
											"end": 5164,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 5090,
											"end": 5164,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 5173,
											"end": 5266,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "218"
										},
										{
											"begin": 5262,
											"end": 5265,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 5173,
											"end": 5266,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "219"
										},
										{
											"begin": 5173,
											"end": 5266,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 5173,
											"end": 5266,
											"name": "tag",
											"source": 6,
											"value": "218"
										},
										{
											"begin": 5173,
											"end": 5266,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5291,
											"end": 5293,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 5286,
											"end": 5289,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 5282,
											"end": 5294,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5275,
											"end": 5294,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5275,
											"end": 5294,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 4934,
											"end": 5300,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 4934,
											"end": 5300,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 4934,
											"end": 5300,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 4934,
											"end": 5300,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 5306,
											"end": 5424,
											"name": "tag",
											"source": 6,
											"value": "220"
										},
										{
											"begin": 5306,
											"end": 5424,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5393,
											"end": 5417,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "222"
										},
										{
											"begin": 5411,
											"end": 5416,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 5393,
											"end": 5417,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "223"
										},
										{
											"begin": 5393,
											"end": 5417,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 5393,
											"end": 5417,
											"name": "tag",
											"source": 6,
											"value": "222"
										},
										{
											"begin": 5393,
											"end": 5417,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5388,
											"end": 5391,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 5381,
											"end": 5418,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 5306,
											"end": 5424,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 5306,
											"end": 5424,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 5306,
											"end": 5424,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 5430,
											"end": 5542,
											"name": "tag",
											"source": 6,
											"value": "224"
										},
										{
											"begin": 5430,
											"end": 5542,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5513,
											"end": 5535,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "226"
										},
										{
											"begin": 5529,
											"end": 5534,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 5513,
											"end": 5535,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "227"
										},
										{
											"begin": 5513,
											"end": 5535,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 5513,
											"end": 5535,
											"name": "tag",
											"source": 6,
											"value": "226"
										},
										{
											"begin": 5513,
											"end": 5535,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5508,
											"end": 5511,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 5501,
											"end": 5536,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 5430,
											"end": 5542,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 5430,
											"end": 5542,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 5430,
											"end": 5542,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 5548,
											"end": 5758,
											"name": "tag",
											"source": 6,
											"value": "24"
										},
										{
											"begin": 5548,
											"end": 5758,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5635,
											"end": 5639,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 5673,
											"end": 5675,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 5662,
											"end": 5671,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 5658,
											"end": 5676,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5650,
											"end": 5676,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5650,
											"end": 5676,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 5686,
											"end": 5751,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "229"
										},
										{
											"begin": 5748,
											"end": 5749,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 5737,
											"end": 5746,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 5733,
											"end": 5750,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5724,
											"end": 5730,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 5686,
											"end": 5751,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "171"
										},
										{
											"begin": 5686,
											"end": 5751,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 5686,
											"end": 5751,
											"name": "tag",
											"source": 6,
											"value": "229"
										},
										{
											"begin": 5686,
											"end": 5751,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5548,
											"end": 5758,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 5548,
											"end": 5758,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 5548,
											"end": 5758,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 5548,
											"end": 5758,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 5548,
											"end": 5758,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 5764,
											"end": 6077,
											"name": "tag",
											"source": 6,
											"value": "18"
										},
										{
											"begin": 5764,
											"end": 6077,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5877,
											"end": 5881,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 5915,
											"end": 5917,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 5904,
											"end": 5913,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 5900,
											"end": 5918,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5892,
											"end": 5918,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5892,
											"end": 5918,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 5964,
											"end": 5973,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 5958,
											"end": 5962,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 5954,
											"end": 5974,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 5950,
											"end": 5951,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 5939,
											"end": 5948,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 5935,
											"end": 5952,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5928,
											"end": 5975,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 5992,
											"end": 6070,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "231"
										},
										{
											"begin": 6065,
											"end": 6069,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 6056,
											"end": 6062,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 5992,
											"end": 6070,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "175"
										},
										{
											"begin": 5992,
											"end": 6070,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 5992,
											"end": 6070,
											"name": "tag",
											"source": 6,
											"value": "231"
										},
										{
											"begin": 5992,
											"end": 6070,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5984,
											"end": 6070,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5984,
											"end": 6070,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 5764,
											"end": 6077,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 5764,
											"end": 6077,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 5764,
											"end": 6077,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 5764,
											"end": 6077,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 5764,
											"end": 6077,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 6083,
											"end": 6502,
											"name": "tag",
											"source": 6,
											"value": "129"
										},
										{
											"begin": 6083,
											"end": 6502,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 6249,
											"end": 6253,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 6287,
											"end": 6289,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 6276,
											"end": 6285,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 6272,
											"end": 6290,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 6264,
											"end": 6290,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 6264,
											"end": 6290,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 6336,
											"end": 6345,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 6330,
											"end": 6334,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 6326,
											"end": 6346,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 6322,
											"end": 6323,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 6311,
											"end": 6320,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 6307,
											"end": 6324,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 6300,
											"end": 6347,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 6364,
											"end": 6495,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "233"
										},
										{
											"begin": 6490,
											"end": 6494,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 6364,
											"end": 6495,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "185"
										},
										{
											"begin": 6364,
											"end": 6495,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 6364,
											"end": 6495,
											"name": "tag",
											"source": 6,
											"value": "233"
										},
										{
											"begin": 6364,
											"end": 6495,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 6356,
											"end": 6495,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 6356,
											"end": 6495,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 6083,
											"end": 6502,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 6083,
											"end": 6502,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 6083,
											"end": 6502,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 6083,
											"end": 6502,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 6508,
											"end": 6927,
											"name": "tag",
											"source": 6,
											"value": "114"
										},
										{
											"begin": 6508,
											"end": 6927,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 6674,
											"end": 6678,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 6712,
											"end": 6714,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 6701,
											"end": 6710,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 6697,
											"end": 6715,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 6689,
											"end": 6715,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 6689,
											"end": 6715,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 6761,
											"end": 6770,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 6755,
											"end": 6759,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 6751,
											"end": 6771,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 6747,
											"end": 6748,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 6736,
											"end": 6745,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 6732,
											"end": 6749,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 6725,
											"end": 6772,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 6789,
											"end": 6920,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "235"
										},
										{
											"begin": 6915,
											"end": 6919,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 6789,
											"end": 6920,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "190"
										},
										{
											"begin": 6789,
											"end": 6920,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 6789,
											"end": 6920,
											"name": "tag",
											"source": 6,
											"value": "235"
										},
										{
											"begin": 6789,
											"end": 6920,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 6781,
											"end": 6920,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 6781,
											"end": 6920,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 6508,
											"end": 6927,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 6508,
											"end": 6927,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 6508,
											"end": 6927,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 6508,
											"end": 6927,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 6933,
											"end": 7352,
											"name": "tag",
											"source": 6,
											"value": "121"
										},
										{
											"begin": 6933,
											"end": 7352,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 7099,
											"end": 7103,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 7137,
											"end": 7139,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 7126,
											"end": 7135,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 7122,
											"end": 7140,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 7114,
											"end": 7140,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7114,
											"end": 7140,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 7186,
											"end": 7195,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 7180,
											"end": 7184,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 7176,
											"end": 7196,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 7172,
											"end": 7173,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 7161,
											"end": 7170,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 7157,
											"end": 7174,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 7150,
											"end": 7197,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 7214,
											"end": 7345,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "237"
										},
										{
											"begin": 7340,
											"end": 7344,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 7214,
											"end": 7345,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "195"
										},
										{
											"begin": 7214,
											"end": 7345,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 7214,
											"end": 7345,
											"name": "tag",
											"source": 6,
											"value": "237"
										},
										{
											"begin": 7214,
											"end": 7345,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 7206,
											"end": 7345,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7206,
											"end": 7345,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 6933,
											"end": 7352,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 6933,
											"end": 7352,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 6933,
											"end": 7352,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 6933,
											"end": 7352,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 7358,
											"end": 7777,
											"name": "tag",
											"source": 6,
											"value": "134"
										},
										{
											"begin": 7358,
											"end": 7777,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 7524,
											"end": 7528,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 7562,
											"end": 7564,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 7551,
											"end": 7560,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 7547,
											"end": 7565,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 7539,
											"end": 7565,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7539,
											"end": 7565,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 7611,
											"end": 7620,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 7605,
											"end": 7609,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 7601,
											"end": 7621,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 7597,
											"end": 7598,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 7586,
											"end": 7595,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 7582,
											"end": 7599,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 7575,
											"end": 7622,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 7639,
											"end": 7770,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "239"
										},
										{
											"begin": 7765,
											"end": 7769,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 7639,
											"end": 7770,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "200"
										},
										{
											"begin": 7639,
											"end": 7770,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 7639,
											"end": 7770,
											"name": "tag",
											"source": 6,
											"value": "239"
										},
										{
											"begin": 7639,
											"end": 7770,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 7631,
											"end": 7770,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7631,
											"end": 7770,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 7358,
											"end": 7777,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 7358,
											"end": 7777,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7358,
											"end": 7777,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 7358,
											"end": 7777,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 7783,
											"end": 8202,
											"name": "tag",
											"source": 6,
											"value": "126"
										},
										{
											"begin": 7783,
											"end": 8202,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 7949,
											"end": 7953,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 7987,
											"end": 7989,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 7976,
											"end": 7985,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 7972,
											"end": 7990,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 7964,
											"end": 7990,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7964,
											"end": 7990,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 8036,
											"end": 8045,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 8030,
											"end": 8034,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 8026,
											"end": 8046,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 8022,
											"end": 8023,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 8011,
											"end": 8020,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 8007,
											"end": 8024,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 8000,
											"end": 8047,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 8064,
											"end": 8195,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "241"
										},
										{
											"begin": 8190,
											"end": 8194,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 8064,
											"end": 8195,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "205"
										},
										{
											"begin": 8064,
											"end": 8195,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 8064,
											"end": 8195,
											"name": "tag",
											"source": 6,
											"value": "241"
										},
										{
											"begin": 8064,
											"end": 8195,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 8056,
											"end": 8195,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8056,
											"end": 8195,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 7783,
											"end": 8202,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 7783,
											"end": 8202,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7783,
											"end": 8202,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 7783,
											"end": 8202,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 8208,
											"end": 8627,
											"name": "tag",
											"source": 6,
											"value": "111"
										},
										{
											"begin": 8208,
											"end": 8627,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 8374,
											"end": 8378,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 8412,
											"end": 8414,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 8401,
											"end": 8410,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 8397,
											"end": 8415,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 8389,
											"end": 8415,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8389,
											"end": 8415,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 8461,
											"end": 8470,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 8455,
											"end": 8459,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 8451,
											"end": 8471,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 8447,
											"end": 8448,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 8436,
											"end": 8445,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 8432,
											"end": 8449,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 8425,
											"end": 8472,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 8489,
											"end": 8620,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "243"
										},
										{
											"begin": 8615,
											"end": 8619,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 8489,
											"end": 8620,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "210"
										},
										{
											"begin": 8489,
											"end": 8620,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 8489,
											"end": 8620,
											"name": "tag",
											"source": 6,
											"value": "243"
										},
										{
											"begin": 8489,
											"end": 8620,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 8481,
											"end": 8620,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8481,
											"end": 8620,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 8208,
											"end": 8627,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 8208,
											"end": 8627,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8208,
											"end": 8627,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 8208,
											"end": 8627,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 8633,
											"end": 9052,
											"name": "tag",
											"source": 6,
											"value": "101"
										},
										{
											"begin": 8633,
											"end": 9052,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 8799,
											"end": 8803,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 8837,
											"end": 8839,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 8826,
											"end": 8835,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 8822,
											"end": 8840,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 8814,
											"end": 8840,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8814,
											"end": 8840,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 8886,
											"end": 8895,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 8880,
											"end": 8884,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 8876,
											"end": 8896,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 8872,
											"end": 8873,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 8861,
											"end": 8870,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 8857,
											"end": 8874,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 8850,
											"end": 8897,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 8914,
											"end": 9045,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "245"
										},
										{
											"begin": 9040,
											"end": 9044,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 8914,
											"end": 9045,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "215"
										},
										{
											"begin": 8914,
											"end": 9045,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 8914,
											"end": 9045,
											"name": "tag",
											"source": 6,
											"value": "245"
										},
										{
											"begin": 8914,
											"end": 9045,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 8906,
											"end": 9045,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8906,
											"end": 9045,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 8633,
											"end": 9052,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 8633,
											"end": 9052,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8633,
											"end": 9052,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 8633,
											"end": 9052,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 9058,
											"end": 9280,
											"name": "tag",
											"source": 6,
											"value": "28"
										},
										{
											"begin": 9058,
											"end": 9280,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 9151,
											"end": 9155,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 9189,
											"end": 9191,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 9178,
											"end": 9187,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 9174,
											"end": 9192,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 9166,
											"end": 9192,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 9166,
											"end": 9192,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 9202,
											"end": 9273,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "247"
										},
										{
											"begin": 9270,
											"end": 9271,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 9259,
											"end": 9268,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 9255,
											"end": 9272,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 9246,
											"end": 9252,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 9202,
											"end": 9273,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "220"
										},
										{
											"begin": 9202,
											"end": 9273,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 9202,
											"end": 9273,
											"name": "tag",
											"source": 6,
											"value": "247"
										},
										{
											"begin": 9202,
											"end": 9273,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 9058,
											"end": 9280,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 9058,
											"end": 9280,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 9058,
											"end": 9280,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 9058,
											"end": 9280,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 9058,
											"end": 9280,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 9286,
											"end": 9500,
											"name": "tag",
											"source": 6,
											"value": "37"
										},
										{
											"begin": 9286,
											"end": 9500,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 9375,
											"end": 9379,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 9413,
											"end": 9415,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 9402,
											"end": 9411,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 9398,
											"end": 9416,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 9390,
											"end": 9416,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 9390,
											"end": 9416,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 9426,
											"end": 9493,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "249"
										},
										{
											"begin": 9490,
											"end": 9491,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 9479,
											"end": 9488,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 9475,
											"end": 9492,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 9466,
											"end": 9472,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 9426,
											"end": 9493,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "224"
										},
										{
											"begin": 9426,
											"end": 9493,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 9426,
											"end": 9493,
											"name": "tag",
											"source": 6,
											"value": "249"
										},
										{
											"begin": 9426,
											"end": 9493,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 9286,
											"end": 9500,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 9286,
											"end": 9500,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 9286,
											"end": 9500,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 9286,
											"end": 9500,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 9286,
											"end": 9500,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 9587,
											"end": 9686,
											"name": "tag",
											"source": 6,
											"value": "178"
										},
										{
											"begin": 9587,
											"end": 9686,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 9639,
											"end": 9645,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 9673,
											"end": 9678,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 9667,
											"end": 9679,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 9657,
											"end": 9679,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 9657,
											"end": 9679,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 9587,
											"end": 9686,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 9587,
											"end": 9686,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 9587,
											"end": 9686,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 9587,
											"end": 9686,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 9692,
											"end": 9861,
											"name": "tag",
											"source": 6,
											"value": "180"
										},
										{
											"begin": 9692,
											"end": 9861,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 9776,
											"end": 9787,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 9810,
											"end": 9816,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 9805,
											"end": 9808,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 9798,
											"end": 9817,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 9850,
											"end": 9854,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 9845,
											"end": 9848,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 9841,
											"end": 9855,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 9826,
											"end": 9855,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 9826,
											"end": 9855,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 9692,
											"end": 9861,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 9692,
											"end": 9861,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 9692,
											"end": 9861,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 9692,
											"end": 9861,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 9692,
											"end": 9861,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 9867,
											"end": 10172,
											"name": "tag",
											"source": 6,
											"value": "88"
										},
										{
											"begin": 9867,
											"end": 10172,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 9907,
											"end": 9910,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 9926,
											"end": 9946,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "255"
										},
										{
											"begin": 9944,
											"end": 9945,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 9926,
											"end": 9946,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "223"
										},
										{
											"begin": 9926,
											"end": 9946,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 9926,
											"end": 9946,
											"name": "tag",
											"source": 6,
											"value": "255"
										},
										{
											"begin": 9926,
											"end": 9946,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 9921,
											"end": 9946,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 9921,
											"end": 9946,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 9960,
											"end": 9980,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "256"
										},
										{
											"begin": 9978,
											"end": 9979,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 9960,
											"end": 9980,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "223"
										},
										{
											"begin": 9960,
											"end": 9980,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 9960,
											"end": 9980,
											"name": "tag",
											"source": 6,
											"value": "256"
										},
										{
											"begin": 9960,
											"end": 9980,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 9955,
											"end": 9980,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 9955,
											"end": 9980,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 10114,
											"end": 10115,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 10046,
											"end": 10112,
											"name": "PUSH",
											"source": 6,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 10042,
											"end": 10116,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 10039,
											"end": 10040,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 10036,
											"end": 10117,
											"name": "GT",
											"source": 6
										},
										{
											"begin": 10033,
											"end": 10140,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 10033,
											"end": 10140,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "257"
										},
										{
											"begin": 10033,
											"end": 10140,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 10120,
											"end": 10138,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "258"
										},
										{
											"begin": 10120,
											"end": 10138,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "259"
										},
										{
											"begin": 10120,
											"end": 10138,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 10120,
											"end": 10138,
											"name": "tag",
											"source": 6,
											"value": "258"
										},
										{
											"begin": 10120,
											"end": 10138,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 10033,
											"end": 10140,
											"name": "tag",
											"source": 6,
											"value": "257"
										},
										{
											"begin": 10033,
											"end": 10140,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 10164,
											"end": 10165,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 10161,
											"end": 10162,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 10157,
											"end": 10166,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 10150,
											"end": 10166,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 10150,
											"end": 10166,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 9867,
											"end": 10172,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 9867,
											"end": 10172,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 9867,
											"end": 10172,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 9867,
											"end": 10172,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 9867,
											"end": 10172,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 10178,
											"end": 10274,
											"name": "tag",
											"source": 6,
											"value": "260"
										},
										{
											"begin": 10178,
											"end": 10274,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 10215,
											"end": 10222,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 10244,
											"end": 10268,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "262"
										},
										{
											"begin": 10262,
											"end": 10267,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 10244,
											"end": 10268,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "263"
										},
										{
											"begin": 10244,
											"end": 10268,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 10244,
											"end": 10268,
											"name": "tag",
											"source": 6,
											"value": "262"
										},
										{
											"begin": 10244,
											"end": 10268,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 10233,
											"end": 10268,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 10233,
											"end": 10268,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 10178,
											"end": 10274,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 10178,
											"end": 10274,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 10178,
											"end": 10274,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 10178,
											"end": 10274,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 10280,
											"end": 10370,
											"name": "tag",
											"source": 6,
											"value": "174"
										},
										{
											"begin": 10280,
											"end": 10370,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 10314,
											"end": 10321,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 10357,
											"end": 10362,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 10350,
											"end": 10363,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 10343,
											"end": 10364,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 10332,
											"end": 10364,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 10332,
											"end": 10364,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 10280,
											"end": 10370,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 10280,
											"end": 10370,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 10280,
											"end": 10370,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 10280,
											"end": 10370,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 10376,
											"end": 10502,
											"name": "tag",
											"source": 6,
											"value": "263"
										},
										{
											"begin": 10376,
											"end": 10502,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 10413,
											"end": 10420,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 10453,
											"end": 10495,
											"name": "PUSH",
											"source": 6,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 10446,
											"end": 10451,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 10442,
											"end": 10496,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 10431,
											"end": 10496,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 10431,
											"end": 10496,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 10376,
											"end": 10502,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 10376,
											"end": 10502,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 10376,
											"end": 10502,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 10376,
											"end": 10502,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 10508,
											"end": 10585,
											"name": "tag",
											"source": 6,
											"value": "223"
										},
										{
											"begin": 10508,
											"end": 10585,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 10545,
											"end": 10552,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 10574,
											"end": 10579,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 10563,
											"end": 10579,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 10563,
											"end": 10579,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 10508,
											"end": 10585,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 10508,
											"end": 10585,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 10508,
											"end": 10585,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 10508,
											"end": 10585,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 10591,
											"end": 10677,
											"name": "tag",
											"source": 6,
											"value": "227"
										},
										{
											"begin": 10591,
											"end": 10677,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 10626,
											"end": 10633,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 10666,
											"end": 10670,
											"name": "PUSH",
											"source": 6,
											"value": "FF"
										},
										{
											"begin": 10659,
											"end": 10664,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 10655,
											"end": 10671,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 10644,
											"end": 10671,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 10644,
											"end": 10671,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 10591,
											"end": 10677,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 10591,
											"end": 10677,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 10591,
											"end": 10677,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 10591,
											"end": 10677,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 10683,
											"end": 10990,
											"name": "tag",
											"source": 6,
											"value": "182"
										},
										{
											"begin": 10683,
											"end": 10990,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 10751,
											"end": 10752,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 10761,
											"end": 10874,
											"name": "tag",
											"source": 6,
											"value": "269"
										},
										{
											"begin": 10761,
											"end": 10874,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 10775,
											"end": 10781,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 10772,
											"end": 10773,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 10769,
											"end": 10782,
											"name": "LT",
											"source": 6
										},
										{
											"begin": 10761,
											"end": 10874,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 10761,
											"end": 10874,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "271"
										},
										{
											"begin": 10761,
											"end": 10874,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 10860,
											"end": 10861,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 10855,
											"end": 10858,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 10851,
											"end": 10862,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 10845,
											"end": 10863,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 10841,
											"end": 10842,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 10836,
											"end": 10839,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 10832,
											"end": 10843,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 10825,
											"end": 10864,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 10797,
											"end": 10799,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 10794,
											"end": 10795,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 10790,
											"end": 10800,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 10785,
											"end": 10800,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 10785,
											"end": 10800,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 10761,
											"end": 10874,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "269"
										},
										{
											"begin": 10761,
											"end": 10874,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 10761,
											"end": 10874,
											"name": "tag",
											"source": 6,
											"value": "271"
										},
										{
											"begin": 10761,
											"end": 10874,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 10892,
											"end": 10898,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 10889,
											"end": 10890,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 10886,
											"end": 10899,
											"name": "GT",
											"source": 6
										},
										{
											"begin": 10883,
											"end": 10984,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 10883,
											"end": 10984,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "272"
										},
										{
											"begin": 10883,
											"end": 10984,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 10972,
											"end": 10973,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 10963,
											"end": 10969,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 10958,
											"end": 10961,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 10954,
											"end": 10970,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 10947,
											"end": 10974,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 10883,
											"end": 10984,
											"name": "tag",
											"source": 6,
											"value": "272"
										},
										{
											"begin": 10883,
											"end": 10984,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 10732,
											"end": 10990,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 10683,
											"end": 10990,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 10683,
											"end": 10990,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 10683,
											"end": 10990,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 10683,
											"end": 10990,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 10996,
											"end": 11316,
											"name": "tag",
											"source": 6,
											"value": "65"
										},
										{
											"begin": 10996,
											"end": 11316,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 11040,
											"end": 11046,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 11077,
											"end": 11078,
											"name": "PUSH",
											"source": 6,
											"value": "2"
										},
										{
											"begin": 11071,
											"end": 11075,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 11067,
											"end": 11079,
											"name": "DIV",
											"source": 6
										},
										{
											"begin": 11057,
											"end": 11079,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 11057,
											"end": 11079,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 11124,
											"end": 11125,
											"name": "PUSH",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 11118,
											"end": 11122,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 11114,
											"end": 11126,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 11145,
											"end": 11163,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 11135,
											"end": 11216,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "274"
										},
										{
											"begin": 11135,
											"end": 11216,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 11201,
											"end": 11205,
											"name": "PUSH",
											"source": 6,
											"value": "7F"
										},
										{
											"begin": 11193,
											"end": 11199,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 11189,
											"end": 11206,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 11179,
											"end": 11206,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 11179,
											"end": 11206,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 11135,
											"end": 11216,
											"name": "tag",
											"source": 6,
											"value": "274"
										},
										{
											"begin": 11135,
											"end": 11216,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 11263,
											"end": 11265,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 11255,
											"end": 11261,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 11252,
											"end": 11266,
											"name": "LT",
											"source": 6
										},
										{
											"begin": 11232,
											"end": 11250,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 11229,
											"end": 11267,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 11226,
											"end": 11310,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 11226,
											"end": 11310,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "275"
										},
										{
											"begin": 11226,
											"end": 11310,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 11282,
											"end": 11300,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "276"
										},
										{
											"begin": 11282,
											"end": 11300,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "277"
										},
										{
											"begin": 11282,
											"end": 11300,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 11282,
											"end": 11300,
											"name": "tag",
											"source": 6,
											"value": "276"
										},
										{
											"begin": 11282,
											"end": 11300,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 11226,
											"end": 11310,
											"name": "tag",
											"source": 6,
											"value": "275"
										},
										{
											"begin": 11226,
											"end": 11310,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 11047,
											"end": 11316,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 10996,
											"end": 11316,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 10996,
											"end": 11316,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 10996,
											"end": 11316,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 10996,
											"end": 11316,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 11322,
											"end": 11502,
											"name": "tag",
											"source": 6,
											"value": "259"
										},
										{
											"begin": 11322,
											"end": 11502,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 11370,
											"end": 11447,
											"name": "PUSH",
											"source": 6,
											"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 11367,
											"end": 11368,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 11360,
											"end": 11448,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 11467,
											"end": 11471,
											"name": "PUSH",
											"source": 6,
											"value": "11"
										},
										{
											"begin": 11464,
											"end": 11465,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 11457,
											"end": 11472,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 11491,
											"end": 11495,
											"name": "PUSH",
											"source": 6,
											"value": "24"
										},
										{
											"begin": 11488,
											"end": 11489,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 11481,
											"end": 11496,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 11508,
											"end": 11688,
											"name": "tag",
											"source": 6,
											"value": "277"
										},
										{
											"begin": 11508,
											"end": 11688,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 11556,
											"end": 11633,
											"name": "PUSH",
											"source": 6,
											"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 11553,
											"end": 11554,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 11546,
											"end": 11634,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 11653,
											"end": 11657,
											"name": "PUSH",
											"source": 6,
											"value": "22"
										},
										{
											"begin": 11650,
											"end": 11651,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 11643,
											"end": 11658,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 11677,
											"end": 11681,
											"name": "PUSH",
											"source": 6,
											"value": "24"
										},
										{
											"begin": 11674,
											"end": 11675,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 11667,
											"end": 11682,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 11817,
											"end": 11934,
											"name": "tag",
											"source": 6,
											"value": "153"
										},
										{
											"begin": 11817,
											"end": 11934,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 11926,
											"end": 11927,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 11923,
											"end": 11924,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 11916,
											"end": 11928,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 11940,
											"end": 12042,
											"name": "tag",
											"source": 6,
											"value": "184"
										},
										{
											"begin": 11940,
											"end": 12042,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 11981,
											"end": 11987,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 12032,
											"end": 12034,
											"name": "PUSH",
											"source": 6,
											"value": "1F"
										},
										{
											"begin": 12028,
											"end": 12035,
											"name": "NOT",
											"source": 6
										},
										{
											"begin": 12023,
											"end": 12025,
											"name": "PUSH",
											"source": 6,
											"value": "1F"
										},
										{
											"begin": 12016,
											"end": 12021,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 12012,
											"end": 12026,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 12008,
											"end": 12036,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 11998,
											"end": 12036,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 11998,
											"end": 12036,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 11940,
											"end": 12042,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 11940,
											"end": 12042,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 11940,
											"end": 12042,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 11940,
											"end": 12042,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 12048,
											"end": 12270,
											"name": "tag",
											"source": 6,
											"value": "189"
										},
										{
											"begin": 12048,
											"end": 12270,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 12188,
											"end": 12222,
											"name": "PUSH",
											"source": 6,
											"value": "45524332303A207472616E7366657220746F20746865207A65726F2061646472"
										},
										{
											"begin": 12184,
											"end": 12185,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 12176,
											"end": 12182,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 12172,
											"end": 12186,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 12165,
											"end": 12223,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 12257,
											"end": 12262,
											"name": "PUSH",
											"source": 6,
											"value": "6573730000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 12252,
											"end": 12254,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 12244,
											"end": 12250,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 12240,
											"end": 12255,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 12233,
											"end": 12263,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 12048,
											"end": 12270,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 12048,
											"end": 12270,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 12276,
											"end": 12497,
											"name": "tag",
											"source": 6,
											"value": "194"
										},
										{
											"begin": 12276,
											"end": 12497,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 12416,
											"end": 12450,
											"name": "PUSH",
											"source": 6,
											"value": "45524332303A20617070726F766520746F20746865207A65726F206164647265"
										},
										{
											"begin": 12412,
											"end": 12413,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 12404,
											"end": 12410,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 12400,
											"end": 12414,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 12393,
											"end": 12451,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 12485,
											"end": 12489,
											"name": "PUSH",
											"source": 6,
											"value": "7373000000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 12480,
											"end": 12482,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 12472,
											"end": 12478,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 12468,
											"end": 12483,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 12461,
											"end": 12490,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 12276,
											"end": 12497,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 12276,
											"end": 12497,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 12503,
											"end": 12682,
											"name": "tag",
											"source": 6,
											"value": "199"
										},
										{
											"begin": 12503,
											"end": 12682,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 12643,
											"end": 12674,
											"name": "PUSH",
											"source": 6,
											"value": "45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000"
										},
										{
											"begin": 12639,
											"end": 12640,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 12631,
											"end": 12637,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 12627,
											"end": 12641,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 12620,
											"end": 12675,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 12503,
											"end": 12682,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 12503,
											"end": 12682,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 12688,
											"end": 12913,
											"name": "tag",
											"source": 6,
											"value": "204"
										},
										{
											"begin": 12688,
											"end": 12913,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 12828,
											"end": 12862,
											"name": "PUSH",
											"source": 6,
											"value": "45524332303A207472616E7366657220616D6F756E7420657863656564732062"
										},
										{
											"begin": 12824,
											"end": 12825,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 12816,
											"end": 12822,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 12812,
											"end": 12826,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 12805,
											"end": 12863,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 12897,
											"end": 12905,
											"name": "PUSH",
											"source": 6,
											"value": "616C616E63650000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 12892,
											"end": 12894,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 12884,
											"end": 12890,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 12880,
											"end": 12895,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 12873,
											"end": 12906,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 12688,
											"end": 12913,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 12688,
											"end": 12913,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 12919,
											"end": 13143,
											"name": "tag",
											"source": 6,
											"value": "209"
										},
										{
											"begin": 12919,
											"end": 13143,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 13059,
											"end": 13093,
											"name": "PUSH",
											"source": 6,
											"value": "45524332303A207472616E736665722066726F6D20746865207A65726F206164"
										},
										{
											"begin": 13055,
											"end": 13056,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 13047,
											"end": 13053,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 13043,
											"end": 13057,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 13036,
											"end": 13094,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 13128,
											"end": 13135,
											"name": "PUSH",
											"source": 6,
											"value": "6472657373000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 13123,
											"end": 13125,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 13115,
											"end": 13121,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 13111,
											"end": 13126,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 13104,
											"end": 13136,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 12919,
											"end": 13143,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 12919,
											"end": 13143,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 13149,
											"end": 13372,
											"name": "tag",
											"source": 6,
											"value": "214"
										},
										{
											"begin": 13149,
											"end": 13372,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 13289,
											"end": 13323,
											"name": "PUSH",
											"source": 6,
											"value": "45524332303A20617070726F76652066726F6D20746865207A65726F20616464"
										},
										{
											"begin": 13285,
											"end": 13286,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 13277,
											"end": 13283,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 13273,
											"end": 13287,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 13266,
											"end": 13324,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 13358,
											"end": 13364,
											"name": "PUSH",
											"source": 6,
											"value": "7265737300000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 13353,
											"end": 13355,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 13345,
											"end": 13351,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 13341,
											"end": 13356,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 13334,
											"end": 13365,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 13149,
											"end": 13372,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 13149,
											"end": 13372,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 13378,
											"end": 13602,
											"name": "tag",
											"source": 6,
											"value": "219"
										},
										{
											"begin": 13378,
											"end": 13602,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 13518,
											"end": 13552,
											"name": "PUSH",
											"source": 6,
											"value": "45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77"
										},
										{
											"begin": 13514,
											"end": 13515,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 13506,
											"end": 13512,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 13502,
											"end": 13516,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 13495,
											"end": 13553,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 13587,
											"end": 13594,
											"name": "PUSH",
											"source": 6,
											"value": "207A65726F000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 13582,
											"end": 13584,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 13574,
											"end": 13580,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 13570,
											"end": 13585,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 13563,
											"end": 13595,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 13378,
											"end": 13602,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 13378,
											"end": 13602,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 13608,
											"end": 13730,
											"name": "tag",
											"source": 6,
											"value": "145"
										},
										{
											"begin": 13608,
											"end": 13730,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 13681,
											"end": 13705,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "292"
										},
										{
											"begin": 13699,
											"end": 13704,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 13681,
											"end": 13705,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "260"
										},
										{
											"begin": 13681,
											"end": 13705,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 13681,
											"end": 13705,
											"name": "tag",
											"source": 6,
											"value": "292"
										},
										{
											"begin": 13681,
											"end": 13705,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 13674,
											"end": 13679,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 13671,
											"end": 13706,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 13661,
											"end": 13724,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "293"
										},
										{
											"begin": 13661,
											"end": 13724,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 13720,
											"end": 13721,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 13717,
											"end": 13718,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 13710,
											"end": 13722,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 13661,
											"end": 13724,
											"name": "tag",
											"source": 6,
											"value": "293"
										},
										{
											"begin": 13661,
											"end": 13724,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 13608,
											"end": 13730,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 13608,
											"end": 13730,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 13736,
											"end": 13858,
											"name": "tag",
											"source": 6,
											"value": "149"
										},
										{
											"begin": 13736,
											"end": 13858,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 13809,
											"end": 13833,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "295"
										},
										{
											"begin": 13827,
											"end": 13832,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 13809,
											"end": 13833,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "223"
										},
										{
											"begin": 13809,
											"end": 13833,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 13809,
											"end": 13833,
											"name": "tag",
											"source": 6,
											"value": "295"
										},
										{
											"begin": 13809,
											"end": 13833,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 13802,
											"end": 13807,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 13799,
											"end": 13834,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 13789,
											"end": 13852,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "296"
										},
										{
											"begin": 13789,
											"end": 13852,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 13848,
											"end": 13849,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 13845,
											"end": 13846,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 13838,
											"end": 13850,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 13789,
											"end": 13852,
											"name": "tag",
											"source": 6,
											"value": "296"
										},
										{
											"begin": 13789,
											"end": 13852,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 13736,
											"end": 13858,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 13736,
											"end": 13858,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										}
									]
								}
							}
						},
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"decimals()": "313ce567",
							"decreaseAllowance(address,uint256)": "a457c2d7",
							"increaseAllowance(address,uint256)": "39509351",
							"name()": "06fdde03",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC20} interface. This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. For a generic mechanism see {ERC20PresetMinterPauser}. TIP: For a detailed writeup see our guide https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. We have followed general OpenZeppelin Contracts guidelines: functions revert instead returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC20 applications. Additionally, an {Approval} event is emitted on calls to {transferFrom}. This allows applications to reconstruct the allowance for all accounts just by listening to said events. Other implementations of the EIP may not emit these events, as it isn't required by the specification. Finally, the non-standard {decreaseAllowance} and {increaseAllowance} functions have been added to mitigate the well-known issues around setting allowances. See {IERC20-approve}.\",\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"}},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"ERC20/ERC20Upgradeable.sol\":\"ERC20Upgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"ERC20/ERC20Upgradeable.sol\":{\"keccak256\":\"0x38fcf41b72aaabaee914ce4af8cf70932fda015de2648afabc68dca9cd4548e7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://249418185f39926cfb00cc92a31b201c16247d33a058bdaa44d3af10767397f5\",\"dweb:/ipfs/QmYUiyvLnpXG2CXeSAPZeB7nkhXcAn25ZRsSEPby5HaGTS\"]},\"ERC20/IERC20MetadataUpgradeable.sol\":{\"keccak256\":\"0xc51beefd2c0cacff942cb378ceffc1e9434b9e337b7a9a65751a649ca15e27aa\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://38c0899079c718d2100901965f3caaf8c20a34acbef9d351ffe89b1a20397f88\",\"dweb:/ipfs/QmbKCTdMA4vHKg8sVqagxJqJtHS8egoGpdZx7Uhxsbasjx\"]},\"ERC20/IERC20Upgradeable.sol\":{\"keccak256\":\"0xffeed6b3cac845b2af4afb30d87cecbd45dec3c408360c157a3db08e28b45043\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5f3d128cf6b67b0496353c536b227fb2c698c21ec86f3454a41ba50a63908bed\",\"dweb:/ipfs/QmdAdMnJuqiXc4ccwBdq2wh7gg2rF8X4TrdZcZvc9GADGm\"]},\"Utils/AddressUpgradeable.sol\":{\"keccak256\":\"0xf6d4ff5c2f658bbb9a7815c2722ca7d1774c8c311a091ec4a5099128524b2eaf\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e9aa658e338934e90048272ff6e3202de3606b44eca15b9a6333ffb65765377c\",\"dweb:/ipfs/QmcNHruHbKW28HfRcsTm4J9ygbkmdJHqE1PwCXAPfkdR6X\"]},\"Utils/ContextUpgradeable.sol\":{\"keccak256\":\"0x92fac0e53317ff400da2c57fbeacf65664915a39803bb8df868dc2da4ca900c3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2728259e929816bf46743774c4e60d51d214daf908c7e78329ca61725ac498b3\",\"dweb:/ipfs/QmTpP8U3hYorjnhA8KCoGbQ1Dn79xghNg7MhGZk7PvhsyV\"]},\"Utils/Initializable.sol\":{\"keccak256\":\"0xfb4297abcb591bc098918f75a0254cebda8180b783cecf03b8c96aa5977d8338\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0fb72c19cb638da79b23ade1731290adcbb985af1ac89f36d235903f0cc44068\",\"dweb:/ipfs/QmXngXCNkkRdb4CefhF8nd3Hf1NxaA7uCmhMUJSXKXdRAa\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 1005,
								"contract": "ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
								"label": "_initialized",
								"offset": 0,
								"slot": "0",
								"type": "t_uint8"
							},
							{
								"astId": 1008,
								"contract": "ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
								"label": "_initializing",
								"offset": 1,
								"slot": "0",
								"type": "t_bool"
							},
							{
								"astId": 997,
								"contract": "ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
								"label": "__gap",
								"offset": 0,
								"slot": "1",
								"type": "t_array(t_uint256)50_storage"
							},
							{
								"astId": 18,
								"contract": "ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
								"label": "_balances",
								"offset": 0,
								"slot": "51",
								"type": "t_mapping(t_address,t_uint256)"
							},
							{
								"astId": 24,
								"contract": "ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
								"label": "_allowances",
								"offset": 0,
								"slot": "52",
								"type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
							},
							{
								"astId": 26,
								"contract": "ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
								"label": "_totalSupply",
								"offset": 0,
								"slot": "53",
								"type": "t_uint256"
							},
							{
								"astId": 28,
								"contract": "ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
								"label": "_name",
								"offset": 0,
								"slot": "54",
								"type": "t_string_storage"
							},
							{
								"astId": 30,
								"contract": "ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
								"label": "_symbol",
								"offset": 0,
								"slot": "55",
								"type": "t_string_storage"
							},
							{
								"astId": 609,
								"contract": "ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
								"label": "__gap",
								"offset": 0,
								"slot": "56",
								"type": "t_array(t_uint256)45_storage"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_array(t_uint256)45_storage": {
								"base": "t_uint256",
								"encoding": "inplace",
								"label": "uint256[45]",
								"numberOfBytes": "1440"
							},
							"t_array(t_uint256)50_storage": {
								"base": "t_uint256",
								"encoding": "inplace",
								"label": "uint256[50]",
								"numberOfBytes": "1600"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_mapping(t_address,t_mapping(t_address,t_uint256))": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => mapping(address => uint256))",
								"numberOfBytes": "32",
								"value": "t_mapping(t_address,t_uint256)"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_string_storage": {
								"encoding": "bytes",
								"label": "string",
								"numberOfBytes": "32"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							},
							"t_uint8": {
								"encoding": "inplace",
								"label": "uint8",
								"numberOfBytes": "1"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"ERC20/IERC20MetadataUpgradeable.sol": {
				"IERC20MetadataUpgradeable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface for the optional metadata functions from the ERC20 standard. _Available since v4.1._",
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the amount of tokens owned by `account`."
							},
							"decimals()": {
								"details": "Returns the decimals places of the token."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"symbol()": {
								"details": "Returns the symbol of the token."
							},
							"totalSupply()": {
								"details": "Returns the amount of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"decimals()": "313ce567",
							"name()": "06fdde03",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for the optional metadata functions from the ERC20 standard. _Available since v4.1._\",\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"decimals()\":{\"details\":\"Returns the decimals places of the token.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"ERC20/IERC20MetadataUpgradeable.sol\":\"IERC20MetadataUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"ERC20/IERC20MetadataUpgradeable.sol\":{\"keccak256\":\"0xc51beefd2c0cacff942cb378ceffc1e9434b9e337b7a9a65751a649ca15e27aa\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://38c0899079c718d2100901965f3caaf8c20a34acbef9d351ffe89b1a20397f88\",\"dweb:/ipfs/QmbKCTdMA4vHKg8sVqagxJqJtHS8egoGpdZx7Uhxsbasjx\"]},\"ERC20/IERC20Upgradeable.sol\":{\"keccak256\":\"0xffeed6b3cac845b2af4afb30d87cecbd45dec3c408360c157a3db08e28b45043\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5f3d128cf6b67b0496353c536b227fb2c698c21ec86f3454a41ba50a63908bed\",\"dweb:/ipfs/QmdAdMnJuqiXc4ccwBdq2wh7gg2rF8X4TrdZcZvc9GADGm\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"ERC20/IERC20Upgradeable.sol": {
				"IERC20Upgradeable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC20 standard as defined in the EIP.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the amount of tokens owned by `account`."
							},
							"totalSupply()": {
								"details": "Returns the amount of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"ERC20/IERC20Upgradeable.sol\":\"IERC20Upgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"ERC20/IERC20Upgradeable.sol\":{\"keccak256\":\"0xffeed6b3cac845b2af4afb30d87cecbd45dec3c408360c157a3db08e28b45043\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5f3d128cf6b67b0496353c536b227fb2c698c21ec86f3454a41ba50a63908bed\",\"dweb:/ipfs/QmdAdMnJuqiXc4ccwBdq2wh7gg2rF8X4TrdZcZvc9GADGm\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"Utils/AddressUpgradeable.sol": {
				"AddressUpgradeable": {
					"abi": [],
					"devdoc": {
						"details": "Collection of functions related to the address type",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"Utils/AddressUpgradeable.sol\":202:7510  library AddressUpgradeable {\r... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, 0x4e487b7100000000000000000000000000000000000000000000000000000000)\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"Utils/AddressUpgradeable.sol\":202:7510  library AddressUpgradeable {\r... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220cce3c4a7d0a18ae1d24c671ef5f64f1479b8d74760d14e60b3098894b3e8cd5a64736f6c63430008070033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220cce3c4a7d0a18ae1d24c671ef5f64f1479b8d74760d14e60b3098894b3e8cd5a64736f6c63430008070033",
							"opcodes": "PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xCC 0xE3 0xC4 0xA7 0xD0 LOG1 DUP11 0xE1 0xD2 0x4C PUSH8 0x1EF5F64F1479B8D7 SELFBALANCE PUSH1 0xD1 0x4E PUSH1 0xB3 MULMOD DUP9 SWAP5 0xB3 0xE8 0xCD GAS PUSH5 0x736F6C6343 STOP ADDMOD SMOD STOP CALLER ",
							"sourceMap": "202:7308:3:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220cce3c4a7d0a18ae1d24c671ef5f64f1479b8d74760d14e60b3098894b3e8cd5a64736f6c63430008070033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xCC 0xE3 0xC4 0xA7 0xD0 LOG1 DUP11 0xE1 0xD2 0x4C PUSH8 0x1EF5F64F1479B8D7 SELFBALANCE PUSH1 0xD1 0x4E PUSH1 0xB3 MULMOD DUP9 SWAP5 0xB3 0xE8 0xCD GAS PUSH5 0x736F6C6343 STOP ADDMOD SMOD STOP CALLER ",
							"sourceMap": "202:7308:3:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"functionCall(address,bytes memory)": "infinite",
								"functionCall(address,bytes memory,string memory)": "infinite",
								"functionCallWithValue(address,bytes memory,uint256)": "infinite",
								"functionCallWithValue(address,bytes memory,uint256,string memory)": "infinite",
								"functionStaticCall(address,bytes memory)": "infinite",
								"functionStaticCall(address,bytes memory,string memory)": "infinite",
								"isContract(address)": "infinite",
								"sendValue(address payable,uint256)": "infinite",
								"verifyCallResult(bool,bytes memory,string memory)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 202,
									"end": 7510,
									"name": "PUSH #[$]",
									"source": 3,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 202,
									"end": 7510,
									"name": "PUSH [$]",
									"source": 3,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 202,
									"end": 7510,
									"name": "PUSH",
									"source": 3,
									"value": "B"
								},
								{
									"begin": 202,
									"end": 7510,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 202,
									"end": 7510,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 202,
									"end": 7510,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 202,
									"end": 7510,
									"name": "CODECOPY",
									"source": 3
								},
								{
									"begin": 202,
									"end": 7510,
									"name": "DUP1",
									"source": 3
								},
								{
									"begin": 202,
									"end": 7510,
									"name": "MLOAD",
									"source": 3
								},
								{
									"begin": 202,
									"end": 7510,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 202,
									"end": 7510,
									"name": "BYTE",
									"source": 3
								},
								{
									"begin": 202,
									"end": 7510,
									"name": "PUSH",
									"source": 3,
									"value": "73"
								},
								{
									"begin": 202,
									"end": 7510,
									"name": "EQ",
									"source": 3
								},
								{
									"begin": 202,
									"end": 7510,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "1"
								},
								{
									"begin": 202,
									"end": 7510,
									"name": "JUMPI",
									"source": 3
								},
								{
									"begin": 202,
									"end": 7510,
									"name": "PUSH",
									"source": 3,
									"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 202,
									"end": 7510,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 202,
									"end": 7510,
									"name": "MSTORE",
									"source": 3
								},
								{
									"begin": 202,
									"end": 7510,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 202,
									"end": 7510,
									"name": "PUSH",
									"source": 3,
									"value": "4"
								},
								{
									"begin": 202,
									"end": 7510,
									"name": "MSTORE",
									"source": 3
								},
								{
									"begin": 202,
									"end": 7510,
									"name": "PUSH",
									"source": 3,
									"value": "24"
								},
								{
									"begin": 202,
									"end": 7510,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 202,
									"end": 7510,
									"name": "REVERT",
									"source": 3
								},
								{
									"begin": 202,
									"end": 7510,
									"name": "tag",
									"source": 3,
									"value": "1"
								},
								{
									"begin": 202,
									"end": 7510,
									"name": "JUMPDEST",
									"source": 3
								},
								{
									"begin": 202,
									"end": 7510,
									"name": "ADDRESS",
									"source": 3
								},
								{
									"begin": 202,
									"end": 7510,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 202,
									"end": 7510,
									"name": "MSTORE",
									"source": 3
								},
								{
									"begin": 202,
									"end": 7510,
									"name": "PUSH",
									"source": 3,
									"value": "73"
								},
								{
									"begin": 202,
									"end": 7510,
									"name": "DUP2",
									"source": 3
								},
								{
									"begin": 202,
									"end": 7510,
									"name": "MSTORE8",
									"source": 3
								},
								{
									"begin": 202,
									"end": 7510,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 202,
									"end": 7510,
									"name": "DUP2",
									"source": 3
								},
								{
									"begin": 202,
									"end": 7510,
									"name": "RETURN",
									"source": 3
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220cce3c4a7d0a18ae1d24c671ef5f64f1479b8d74760d14e60b3098894b3e8cd5a64736f6c63430008070033",
									".code": [
										{
											"begin": 202,
											"end": 7510,
											"name": "PUSHDEPLOYADDRESS",
											"source": 3
										},
										{
											"begin": 202,
											"end": 7510,
											"name": "ADDRESS",
											"source": 3
										},
										{
											"begin": 202,
											"end": 7510,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 202,
											"end": 7510,
											"name": "PUSH",
											"source": 3,
											"value": "80"
										},
										{
											"begin": 202,
											"end": 7510,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 202,
											"end": 7510,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 202,
											"end": 7510,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 202,
											"end": 7510,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 202,
											"end": 7510,
											"name": "REVERT",
											"source": 3
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"Utils/AddressUpgradeable.sol\":\"AddressUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"Utils/AddressUpgradeable.sol\":{\"keccak256\":\"0xf6d4ff5c2f658bbb9a7815c2722ca7d1774c8c311a091ec4a5099128524b2eaf\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e9aa658e338934e90048272ff6e3202de3606b44eca15b9a6333ffb65765377c\",\"dweb:/ipfs/QmcNHruHbKW28HfRcsTm4J9ygbkmdJHqE1PwCXAPfkdR6X\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"Utils/ContextUpgradeable.sol": {
				"ContextUpgradeable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "version",
									"type": "uint8"
								}
							],
							"name": "Initialized",
							"type": "event"
						}
					],
					"devdoc": {
						"details": "Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.",
						"kind": "dev",
						"methods": {},
						"stateVariables": {
							"__gap": {
								"details": "This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"}],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"Utils/ContextUpgradeable.sol\":\"ContextUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"Utils/AddressUpgradeable.sol\":{\"keccak256\":\"0xf6d4ff5c2f658bbb9a7815c2722ca7d1774c8c311a091ec4a5099128524b2eaf\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e9aa658e338934e90048272ff6e3202de3606b44eca15b9a6333ffb65765377c\",\"dweb:/ipfs/QmcNHruHbKW28HfRcsTm4J9ygbkmdJHqE1PwCXAPfkdR6X\"]},\"Utils/ContextUpgradeable.sol\":{\"keccak256\":\"0x92fac0e53317ff400da2c57fbeacf65664915a39803bb8df868dc2da4ca900c3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2728259e929816bf46743774c4e60d51d214daf908c7e78329ca61725ac498b3\",\"dweb:/ipfs/QmTpP8U3hYorjnhA8KCoGbQ1Dn79xghNg7MhGZk7PvhsyV\"]},\"Utils/Initializable.sol\":{\"keccak256\":\"0xfb4297abcb591bc098918f75a0254cebda8180b783cecf03b8c96aa5977d8338\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0fb72c19cb638da79b23ade1731290adcbb985af1ac89f36d235903f0cc44068\",\"dweb:/ipfs/QmXngXCNkkRdb4CefhF8nd3Hf1NxaA7uCmhMUJSXKXdRAa\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 1005,
								"contract": "Utils/ContextUpgradeable.sol:ContextUpgradeable",
								"label": "_initialized",
								"offset": 0,
								"slot": "0",
								"type": "t_uint8"
							},
							{
								"astId": 1008,
								"contract": "Utils/ContextUpgradeable.sol:ContextUpgradeable",
								"label": "_initializing",
								"offset": 1,
								"slot": "0",
								"type": "t_bool"
							},
							{
								"astId": 997,
								"contract": "Utils/ContextUpgradeable.sol:ContextUpgradeable",
								"label": "__gap",
								"offset": 0,
								"slot": "1",
								"type": "t_array(t_uint256)50_storage"
							}
						],
						"types": {
							"t_array(t_uint256)50_storage": {
								"base": "t_uint256",
								"encoding": "inplace",
								"label": "uint256[50]",
								"numberOfBytes": "1600"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							},
							"t_uint8": {
								"encoding": "inplace",
								"label": "uint8",
								"numberOfBytes": "1"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"Utils/Initializable.sol": {
				"Initializable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "version",
									"type": "uint8"
								}
							],
							"name": "Initialized",
							"type": "event"
						}
					],
					"devdoc": {
						"custom:oz-upgrades-unsafe-allow": "constructor constructor() {     _disableInitializers(); } ``` ====",
						"details": "This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer function so it can only be called once. The {initializer} modifier provided by this contract will have this effect. The initialization functions use a version number. Once a version number is used, it is consumed and cannot be reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in case an upgrade adds a module that needs to be initialized. For example: [.hljs-theme-light.nopadding] ``` contract MyToken is ERC20Upgradeable {     function initialize() initializer public {         __ERC20_init(\"MyToken\", \"MTK\");     } } contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {     function initializeV2() reinitializer(2) public {         __ERC20Permit_init(\"MyToken\");     } } ``` TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}. CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure that all initializers are idempotent. This is not verified automatically as constructors are by Solidity. [CAUTION] ==== Avoid leaving a contract uninitialized. An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke the {_disableInitializers} function in the constructor to automatically lock it when it is deployed: [.hljs-theme-light.nopadding] ```",
						"events": {
							"Initialized(uint8)": {
								"details": "Triggered when the contract has been initialized or reinitialized."
							}
						},
						"kind": "dev",
						"methods": {},
						"stateVariables": {
							"_initialized": {
								"custom:oz-retyped-from": "bool",
								"details": "Indicates that the contract has been initialized."
							},
							"_initializing": {
								"details": "Indicates that the contract is in the process of being initialized."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"}],\"devdoc\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor constructor() {     _disableInitializers(); } ``` ====\",\"details\":\"This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer function so it can only be called once. The {initializer} modifier provided by this contract will have this effect. The initialization functions use a version number. Once a version number is used, it is consumed and cannot be reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in case an upgrade adds a module that needs to be initialized. For example: [.hljs-theme-light.nopadding] ``` contract MyToken is ERC20Upgradeable {     function initialize() initializer public {         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");     } } contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {     function initializeV2() reinitializer(2) public {         __ERC20Permit_init(\\\"MyToken\\\");     } } ``` TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}. CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure that all initializers are idempotent. This is not verified automatically as constructors are by Solidity. [CAUTION] ==== Avoid leaving a contract uninitialized. An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke the {_disableInitializers} function in the constructor to automatically lock it when it is deployed: [.hljs-theme-light.nopadding] ```\",\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"_initialized\":{\"custom:oz-retyped-from\":\"bool\",\"details\":\"Indicates that the contract has been initialized.\"},\"_initializing\":{\"details\":\"Indicates that the contract is in the process of being initialized.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"Utils/Initializable.sol\":\"Initializable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"Utils/AddressUpgradeable.sol\":{\"keccak256\":\"0xf6d4ff5c2f658bbb9a7815c2722ca7d1774c8c311a091ec4a5099128524b2eaf\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e9aa658e338934e90048272ff6e3202de3606b44eca15b9a6333ffb65765377c\",\"dweb:/ipfs/QmcNHruHbKW28HfRcsTm4J9ygbkmdJHqE1PwCXAPfkdR6X\"]},\"Utils/Initializable.sol\":{\"keccak256\":\"0xfb4297abcb591bc098918f75a0254cebda8180b783cecf03b8c96aa5977d8338\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0fb72c19cb638da79b23ade1731290adcbb985af1ac89f36d235903f0cc44068\",\"dweb:/ipfs/QmXngXCNkkRdb4CefhF8nd3Hf1NxaA7uCmhMUJSXKXdRAa\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 1005,
								"contract": "Utils/Initializable.sol:Initializable",
								"label": "_initialized",
								"offset": 0,
								"slot": "0",
								"type": "t_uint8"
							},
							{
								"astId": 1008,
								"contract": "Utils/Initializable.sol:Initializable",
								"label": "_initializing",
								"offset": 1,
								"slot": "0",
								"type": "t_bool"
							}
						],
						"types": {
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_uint8": {
								"encoding": "inplace",
								"label": "uint8",
								"numberOfBytes": "1"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"sources": {
			"ERC20/ERC20Upgradeable.sol": {
				"ast": {
					"absolutePath": "ERC20/ERC20Upgradeable.sol",
					"exportedSymbols": {
						"AddressUpgradeable": [
							956
						],
						"ContextUpgradeable": [
							998
						],
						"ERC20Upgradeable": [
							610
						],
						"IERC20MetadataUpgradeable": [
							635
						],
						"IERC20Upgradeable": [
							713
						],
						"Initializable": [
							1140
						]
					},
					"id": 611,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "108:23:0"
						},
						{
							"absolutePath": "ERC20/IERC20Upgradeable.sol",
							"file": "./IERC20Upgradeable.sol",
							"id": 2,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 611,
							"sourceUnit": 714,
							"src": "135:33:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "ERC20/IERC20MetadataUpgradeable.sol",
							"file": "./IERC20MetadataUpgradeable.sol",
							"id": 3,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 611,
							"sourceUnit": 636,
							"src": "170:41:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "Utils/ContextUpgradeable.sol",
							"file": "../../Utils/ContextUpgradeable.sol",
							"id": 4,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 611,
							"sourceUnit": 999,
							"src": "213:44:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "Utils/Initializable.sol",
							"file": "../../Utils/Initializable.sol",
							"id": 5,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 611,
							"sourceUnit": 1141,
							"src": "259:39:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 7,
										"name": "Initializable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1140,
										"src": "1529:13:0"
									},
									"id": 8,
									"nodeType": "InheritanceSpecifier",
									"src": "1529:13:0"
								},
								{
									"baseName": {
										"id": 9,
										"name": "ContextUpgradeable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 998,
										"src": "1544:18:0"
									},
									"id": 10,
									"nodeType": "InheritanceSpecifier",
									"src": "1544:18:0"
								},
								{
									"baseName": {
										"id": 11,
										"name": "IERC20Upgradeable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 713,
										"src": "1564:17:0"
									},
									"id": 12,
									"nodeType": "InheritanceSpecifier",
									"src": "1564:17:0"
								},
								{
									"baseName": {
										"id": 13,
										"name": "IERC20MetadataUpgradeable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 635,
										"src": "1583:25:0"
									},
									"id": 14,
									"nodeType": "InheritanceSpecifier",
									"src": "1583:25:0"
								}
							],
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 6,
								"nodeType": "StructuredDocumentation",
								"src": "302:1196:0",
								"text": " @dev Implementation of the {IERC20} interface.\n This implementation is agnostic to the way tokens are created. This means\n that a supply mechanism has to be added in a derived contract using {_mint}.\n For a generic mechanism see {ERC20PresetMinterPauser}.\n TIP: For a detailed writeup see our guide\n https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n to implement supply mechanisms].\n We have followed general OpenZeppelin Contracts guidelines: functions revert\n instead returning `false` on failure. This behavior is nonetheless\n conventional and does not conflict with the expectations of ERC20\n applications.\n Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n This allows applications to reconstruct the allowance for all accounts just\n by listening to said events. Other implementations of the EIP may not emit\n these events, as it isn't required by the specification.\n Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n functions have been added to mitigate the well-known issues around setting\n allowances. See {IERC20-approve}."
							},
							"fullyImplemented": true,
							"id": 610,
							"linearizedBaseContracts": [
								610,
								635,
								713,
								998,
								1140
							],
							"name": "ERC20Upgradeable",
							"nameLocation": "1509:16:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 18,
									"mutability": "mutable",
									"name": "_balances",
									"nameLocation": "1652:9:0",
									"nodeType": "VariableDeclaration",
									"scope": 610,
									"src": "1616:45:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
										"typeString": "mapping(address => uint256)"
									},
									"typeName": {
										"id": 17,
										"keyType": {
											"id": 15,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1624:7:0",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "1616:27:0",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
											"typeString": "mapping(address => uint256)"
										},
										"valueType": {
											"id": 16,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "1635:7:0",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 24,
									"mutability": "mutable",
									"name": "_allowances",
									"nameLocation": "1726:11:0",
									"nodeType": "VariableDeclaration",
									"scope": 610,
									"src": "1670:67:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
										"typeString": "mapping(address => mapping(address => uint256))"
									},
									"typeName": {
										"id": 23,
										"keyType": {
											"id": 19,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1678:7:0",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "1670:47:0",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
											"typeString": "mapping(address => mapping(address => uint256))"
										},
										"valueType": {
											"id": 22,
											"keyType": {
												"id": 20,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "1697:7:0",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"nodeType": "Mapping",
											"src": "1689:27:0",
											"typeDescriptions": {
												"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
												"typeString": "mapping(address => uint256)"
											},
											"valueType": {
												"id": 21,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1708:7:0",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											}
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 26,
									"mutability": "mutable",
									"name": "_totalSupply",
									"nameLocation": "1762:12:0",
									"nodeType": "VariableDeclaration",
									"scope": 610,
									"src": "1746:28:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 25,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1746:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 28,
									"mutability": "mutable",
									"name": "_name",
									"nameLocation": "1798:5:0",
									"nodeType": "VariableDeclaration",
									"scope": 610,
									"src": "1783:20:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_string_storage",
										"typeString": "string"
									},
									"typeName": {
										"id": 27,
										"name": "string",
										"nodeType": "ElementaryTypeName",
										"src": "1783:6:0",
										"typeDescriptions": {
											"typeIdentifier": "t_string_storage_ptr",
											"typeString": "string"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 30,
									"mutability": "mutable",
									"name": "_symbol",
									"nameLocation": "1825:7:0",
									"nodeType": "VariableDeclaration",
									"scope": 610,
									"src": "1810:22:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_string_storage",
										"typeString": "string"
									},
									"typeName": {
										"id": 29,
										"name": "string",
										"nodeType": "ElementaryTypeName",
										"src": "1810:6:0",
										"typeDescriptions": {
											"typeIdentifier": "t_string_storage_ptr",
											"typeString": "string"
										}
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 45,
										"nodeType": "Block",
										"src": "2245:57:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 41,
															"name": "name_",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 33,
															"src": "2279:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														},
														{
															"id": 42,
															"name": "symbol_",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 35,
															"src": "2286:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 40,
														"name": "__ERC20_init_unchained",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 64,
														"src": "2256:22:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_string_memory_ptr_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (string memory,string memory)"
														}
													},
													"id": 43,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2256:38:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 44,
												"nodeType": "ExpressionStatement",
												"src": "2256:38:0"
											}
										]
									},
									"documentation": {
										"id": 31,
										"nodeType": "StructuredDocumentation",
										"src": "1841:306:0",
										"text": " @dev Sets the values for {name} and {symbol}.\n The default value of {decimals} is 18. To select a different value for\n {decimals} you should overload it.\n All two of these values are immutable: they can only be set once during\n construction."
									},
									"id": 46,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 38,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 37,
												"name": "onlyInitializing",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 1083,
												"src": "2228:16:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "2228:16:0"
										}
									],
									"name": "__ERC20_init",
									"nameLocation": "2162:12:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 36,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 33,
												"mutability": "mutable",
												"name": "name_",
												"nameLocation": "2189:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 46,
												"src": "2175:19:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 32,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2175:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 35,
												"mutability": "mutable",
												"name": "symbol_",
												"nameLocation": "2210:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 46,
												"src": "2196:21:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 34,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2196:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2174:44:0"
									},
									"returnParameters": {
										"id": 39,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2245:0:0"
									},
									"scope": 610,
									"src": "2153:149:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 63,
										"nodeType": "Block",
										"src": "2412:60:0",
										"statements": [
											{
												"expression": {
													"id": 57,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 55,
														"name": "_name",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 28,
														"src": "2423:5:0",
														"typeDescriptions": {
															"typeIdentifier": "t_string_storage",
															"typeString": "string storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 56,
														"name": "name_",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 48,
														"src": "2431:5:0",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string memory"
														}
													},
													"src": "2423:13:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"id": 58,
												"nodeType": "ExpressionStatement",
												"src": "2423:13:0"
											},
											{
												"expression": {
													"id": 61,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 59,
														"name": "_symbol",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 30,
														"src": "2447:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_string_storage",
															"typeString": "string storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 60,
														"name": "symbol_",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 50,
														"src": "2457:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string memory"
														}
													},
													"src": "2447:17:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"id": 62,
												"nodeType": "ExpressionStatement",
												"src": "2447:17:0"
											}
										]
									},
									"id": 64,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 53,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 52,
												"name": "onlyInitializing",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 1083,
												"src": "2395:16:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "2395:16:0"
										}
									],
									"name": "__ERC20_init_unchained",
									"nameLocation": "2319:22:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 51,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 48,
												"mutability": "mutable",
												"name": "name_",
												"nameLocation": "2356:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 64,
												"src": "2342:19:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 47,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2342:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 50,
												"mutability": "mutable",
												"name": "symbol_",
												"nameLocation": "2377:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 64,
												"src": "2363:21:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 49,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2363:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2341:44:0"
									},
									"returnParameters": {
										"id": 54,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2412:0:0"
									},
									"scope": 610,
									"src": "2310:162:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"baseFunctions": [
										622
									],
									"body": {
										"id": 73,
										"nodeType": "Block",
										"src": "2611:31:0",
										"statements": [
											{
												"expression": {
													"id": 71,
													"name": "_name",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 28,
													"src": "2629:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"functionReturnParameters": 70,
												"id": 72,
												"nodeType": "Return",
												"src": "2622:12:0"
											}
										]
									},
									"documentation": {
										"id": 65,
										"nodeType": "StructuredDocumentation",
										"src": "2480:56:0",
										"text": " @dev Returns the name of the token."
									},
									"functionSelector": "06fdde03",
									"id": 74,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "name",
									"nameLocation": "2551:4:0",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 67,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "2578:8:0"
									},
									"parameters": {
										"id": 66,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2555:2:0"
									},
									"returnParameters": {
										"id": 70,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 69,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 74,
												"src": "2596:13:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 68,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2596:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2595:15:0"
									},
									"scope": 610,
									"src": "2542:100:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										628
									],
									"body": {
										"id": 83,
										"nodeType": "Block",
										"src": "2832:33:0",
										"statements": [
											{
												"expression": {
													"id": 81,
													"name": "_symbol",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 30,
													"src": "2850:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"functionReturnParameters": 80,
												"id": 82,
												"nodeType": "Return",
												"src": "2843:14:0"
											}
										]
									},
									"documentation": {
										"id": 75,
										"nodeType": "StructuredDocumentation",
										"src": "2650:105:0",
										"text": " @dev Returns the symbol of the token, usually a shorter version of the\n name."
									},
									"functionSelector": "95d89b41",
									"id": 84,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "symbol",
									"nameLocation": "2770:6:0",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 77,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "2799:8:0"
									},
									"parameters": {
										"id": 76,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2776:2:0"
									},
									"returnParameters": {
										"id": 80,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 79,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 84,
												"src": "2817:13:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 78,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2817:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2816:15:0"
									},
									"scope": 610,
									"src": "2761:104:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										634
									],
									"body": {
										"id": 93,
										"nodeType": "Block",
										"src": "3569:28:0",
										"statements": [
											{
												"expression": {
													"hexValue": "3138",
													"id": 91,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "3587:2:0",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_18_by_1",
														"typeString": "int_const 18"
													},
													"value": "18"
												},
												"functionReturnParameters": 90,
												"id": 92,
												"nodeType": "Return",
												"src": "3580:9:0"
											}
										]
									},
									"documentation": {
										"id": 85,
										"nodeType": "StructuredDocumentation",
										"src": "2873:625:0",
										"text": " @dev Returns the number of decimals used to get its user representation.\n For example, if `decimals` equals `2`, a balance of `505` tokens should\n be displayed to a user as `5.05` (`505 / 10 ** 2`).\n Tokens usually opt for a value of 18, imitating the relationship between\n Ether and Wei. This is the value {ERC20} uses, unless this function is\n overridden;\n NOTE: This information is only used for _display_ purposes: it in\n no way affects any of the arithmetic of the contract, including\n {IERC20-balanceOf} and {IERC20-transfer}."
									},
									"functionSelector": "313ce567",
									"id": 94,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "decimals",
									"nameLocation": "3513:8:0",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 87,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "3544:8:0"
									},
									"parameters": {
										"id": 86,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3521:2:0"
									},
									"returnParameters": {
										"id": 90,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 89,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 94,
												"src": "3562:5:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 88,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "3562:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3561:7:0"
									},
									"scope": 610,
									"src": "3504:93:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										662
									],
									"body": {
										"id": 103,
										"nodeType": "Block",
										"src": "3732:38:0",
										"statements": [
											{
												"expression": {
													"id": 101,
													"name": "_totalSupply",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 26,
													"src": "3750:12:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 100,
												"id": 102,
												"nodeType": "Return",
												"src": "3743:19:0"
											}
										]
									},
									"documentation": {
										"id": 95,
										"nodeType": "StructuredDocumentation",
										"src": "3605:51:0",
										"text": " @dev See {IERC20-totalSupply}."
									},
									"functionSelector": "18160ddd",
									"id": 104,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "3671:11:0",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 97,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "3705:8:0"
									},
									"parameters": {
										"id": 96,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3682:2:0"
									},
									"returnParameters": {
										"id": 100,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 99,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 104,
												"src": "3723:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 98,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3723:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3722:9:0"
									},
									"scope": 610,
									"src": "3662:108:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										670
									],
									"body": {
										"id": 117,
										"nodeType": "Block",
										"src": "3916:44:0",
										"statements": [
											{
												"expression": {
													"baseExpression": {
														"id": 113,
														"name": "_balances",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 18,
														"src": "3934:9:0",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 115,
													"indexExpression": {
														"id": 114,
														"name": "account",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 107,
														"src": "3944:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "3934:18:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 112,
												"id": 116,
												"nodeType": "Return",
												"src": "3927:25:0"
											}
										]
									},
									"documentation": {
										"id": 105,
										"nodeType": "StructuredDocumentation",
										"src": "3778:49:0",
										"text": " @dev See {IERC20-balanceOf}."
									},
									"functionSelector": "70a08231",
									"id": 118,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "3842:9:0",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 109,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "3889:8:0"
									},
									"parameters": {
										"id": 108,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 107,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "3860:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 118,
												"src": "3852:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 106,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3852:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3851:17:0"
									},
									"returnParameters": {
										"id": 112,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 111,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 118,
												"src": "3907:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 110,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3907:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3906:9:0"
									},
									"scope": 610,
									"src": "3833:127:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										680
									],
									"body": {
										"id": 142,
										"nodeType": "Block",
										"src": "4251:108:0",
										"statements": [
											{
												"assignments": [
													130
												],
												"declarations": [
													{
														"constant": false,
														"id": 130,
														"mutability": "mutable",
														"name": "owner",
														"nameLocation": "4270:5:0",
														"nodeType": "VariableDeclaration",
														"scope": 142,
														"src": "4262:13:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 129,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "4262:7:0",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 133,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 131,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 983,
														"src": "4278:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 132,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4278:12:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4262:28:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 135,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 130,
															"src": "4311:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 136,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 121,
															"src": "4318:2:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 137,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 123,
															"src": "4322:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 134,
														"name": "_transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 366,
														"src": "4301:9:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 138,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4301:28:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 139,
												"nodeType": "ExpressionStatement",
												"src": "4301:28:0"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 140,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "4347:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 128,
												"id": 141,
												"nodeType": "Return",
												"src": "4340:11:0"
											}
										]
									},
									"documentation": {
										"id": 119,
										"nodeType": "StructuredDocumentation",
										"src": "3968:192:0",
										"text": " @dev See {IERC20-transfer}.\n Requirements:\n - `to` cannot be the zero address.\n - the caller must have a balance of at least `amount`."
									},
									"functionSelector": "a9059cbb",
									"id": 143,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nameLocation": "4175:8:0",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 125,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "4227:8:0"
									},
									"parameters": {
										"id": 124,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 121,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "4192:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 143,
												"src": "4184:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 120,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4184:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 123,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "4204:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 143,
												"src": "4196:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 122,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4196:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4183:28:0"
									},
									"returnParameters": {
										"id": 128,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 127,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 143,
												"src": "4245:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 126,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4245:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4244:6:0"
									},
									"scope": 610,
									"src": "4166:193:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										690
									],
									"body": {
										"id": 160,
										"nodeType": "Block",
										"src": "4520:53:0",
										"statements": [
											{
												"expression": {
													"baseExpression": {
														"baseExpression": {
															"id": 154,
															"name": "_allowances",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 24,
															"src": "4538:11:0",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
																"typeString": "mapping(address => mapping(address => uint256))"
															}
														},
														"id": 156,
														"indexExpression": {
															"id": 155,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 146,
															"src": "4550:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "4538:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 158,
													"indexExpression": {
														"id": 157,
														"name": "spender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 148,
														"src": "4557:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "4538:27:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 153,
												"id": 159,
												"nodeType": "Return",
												"src": "4531:34:0"
											}
										]
									},
									"documentation": {
										"id": 144,
										"nodeType": "StructuredDocumentation",
										"src": "4367:49:0",
										"text": " @dev See {IERC20-allowance}."
									},
									"functionSelector": "dd62ed3e",
									"id": 161,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nameLocation": "4431:9:0",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 150,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "4493:8:0"
									},
									"parameters": {
										"id": 149,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 146,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "4449:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 161,
												"src": "4441:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 145,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4441:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 148,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "4464:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 161,
												"src": "4456:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 147,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4456:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4440:32:0"
									},
									"returnParameters": {
										"id": 153,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 152,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 161,
												"src": "4511:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 151,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4511:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4510:9:0"
									},
									"scope": 610,
									"src": "4422:151:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										700
									],
									"body": {
										"id": 185,
										"nodeType": "Block",
										"src": "4982:112:0",
										"statements": [
											{
												"assignments": [
													173
												],
												"declarations": [
													{
														"constant": false,
														"id": 173,
														"mutability": "mutable",
														"name": "owner",
														"nameLocation": "5001:5:0",
														"nodeType": "VariableDeclaration",
														"scope": 185,
														"src": "4993:13:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 172,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "4993:7:0",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 176,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 174,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 983,
														"src": "5009:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 175,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5009:12:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4993:28:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 178,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 173,
															"src": "5041:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 179,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 164,
															"src": "5048:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 180,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 166,
															"src": "5057:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 177,
														"name": "_approve",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 539,
														"src": "5032:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 181,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5032:32:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 182,
												"nodeType": "ExpressionStatement",
												"src": "5032:32:0"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 183,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "5082:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 171,
												"id": 184,
												"nodeType": "Return",
												"src": "5075:11:0"
											}
										]
									},
									"documentation": {
										"id": 162,
										"nodeType": "StructuredDocumentation",
										"src": "4581:306:0",
										"text": " @dev See {IERC20-approve}.\n NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n `transferFrom`. This is semantically equivalent to an infinite approval.\n Requirements:\n - `spender` cannot be the zero address."
									},
									"functionSelector": "095ea7b3",
									"id": 186,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "4902:7:0",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 168,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "4958:8:0"
									},
									"parameters": {
										"id": 167,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 164,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "4918:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 186,
												"src": "4910:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 163,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4910:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 166,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "4935:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 186,
												"src": "4927:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 165,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4927:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4909:33:0"
									},
									"returnParameters": {
										"id": 171,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 170,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 186,
												"src": "4976:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 169,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4976:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4975:6:0"
									},
									"scope": 610,
									"src": "4893:201:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										712
									],
									"body": {
										"id": 218,
										"nodeType": "Block",
										"src": "5811:158:0",
										"statements": [
											{
												"assignments": [
													200
												],
												"declarations": [
													{
														"constant": false,
														"id": 200,
														"mutability": "mutable",
														"name": "spender",
														"nameLocation": "5830:7:0",
														"nodeType": "VariableDeclaration",
														"scope": 218,
														"src": "5822:15:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 199,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "5822:7:0",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 203,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 201,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 983,
														"src": "5840:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 202,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5840:12:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5822:30:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 205,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 189,
															"src": "5879:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 206,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 200,
															"src": "5885:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 207,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 193,
															"src": "5894:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 204,
														"name": "_spendAllowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 582,
														"src": "5863:15:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 208,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5863:38:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 209,
												"nodeType": "ExpressionStatement",
												"src": "5863:38:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 211,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 189,
															"src": "5922:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 212,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 191,
															"src": "5928:2:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 213,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 193,
															"src": "5932:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 210,
														"name": "_transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 366,
														"src": "5912:9:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 214,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5912:27:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 215,
												"nodeType": "ExpressionStatement",
												"src": "5912:27:0"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 216,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "5957:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 198,
												"id": 217,
												"nodeType": "Return",
												"src": "5950:11:0"
											}
										]
									},
									"documentation": {
										"id": 187,
										"nodeType": "StructuredDocumentation",
										"src": "5102:566:0",
										"text": " @dev See {IERC20-transferFrom}.\n Emits an {Approval} event indicating the updated allowance. This is not\n required by the EIP. See the note at the beginning of {ERC20}.\n NOTE: Does not update the allowance if the current allowance\n is the maximum `uint256`.\n Requirements:\n - `from` and `to` cannot be the zero address.\n - `from` must have a balance of at least `amount`.\n - the caller must have allowance for ``from``'s tokens of at least\n `amount`."
									},
									"functionSelector": "23b872dd",
									"id": 219,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "5683:12:0",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 195,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "5787:8:0"
									},
									"parameters": {
										"id": 194,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 189,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "5714:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 219,
												"src": "5706:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 188,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5706:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 191,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "5737:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 219,
												"src": "5729:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 190,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5729:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 193,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "5758:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 219,
												"src": "5750:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 192,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5750:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5695:76:0"
									},
									"returnParameters": {
										"id": 198,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 197,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 219,
												"src": "5805:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 196,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "5805:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5804:6:0"
									},
									"scope": 610,
									"src": "5674:295:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 247,
										"nodeType": "Block",
										"src": "6472:144:0",
										"statements": [
											{
												"assignments": [
													230
												],
												"declarations": [
													{
														"constant": false,
														"id": 230,
														"mutability": "mutable",
														"name": "owner",
														"nameLocation": "6491:5:0",
														"nodeType": "VariableDeclaration",
														"scope": 247,
														"src": "6483:13:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 229,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "6483:7:0",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 233,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 231,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 983,
														"src": "6499:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 232,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6499:12:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6483:28:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 235,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 230,
															"src": "6531:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 236,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 222,
															"src": "6538:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 242,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [
																	{
																		"id": 238,
																		"name": "owner",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 230,
																		"src": "6557:5:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 239,
																		"name": "spender",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 222,
																		"src": "6564:7:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 237,
																	"name": "allowance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 161,
																	"src": "6547:9:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$returns$_t_uint256_$",
																		"typeString": "function (address,address) view returns (uint256)"
																	}
																},
																"id": 240,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "6547:25:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"id": 241,
																"name": "addedValue",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 224,
																"src": "6575:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "6547:38:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 234,
														"name": "_approve",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 539,
														"src": "6522:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 243,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6522:64:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 244,
												"nodeType": "ExpressionStatement",
												"src": "6522:64:0"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 245,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "6604:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 228,
												"id": 246,
												"nodeType": "Return",
												"src": "6597:11:0"
											}
										]
									},
									"documentation": {
										"id": 220,
										"nodeType": "StructuredDocumentation",
										"src": "5977:395:0",
										"text": " @dev Atomically increases the allowance granted to `spender` by the caller.\n This is an alternative to {approve} that can be used as a mitigation for\n problems described in {IERC20-approve}.\n Emits an {Approval} event indicating the updated allowance.\n Requirements:\n - `spender` cannot be the zero address."
									},
									"functionSelector": "39509351",
									"id": 248,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "increaseAllowance",
									"nameLocation": "6387:17:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 225,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 222,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "6413:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 248,
												"src": "6405:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 221,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6405:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 224,
												"mutability": "mutable",
												"name": "addedValue",
												"nameLocation": "6430:10:0",
												"nodeType": "VariableDeclaration",
												"scope": 248,
												"src": "6422:18:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 223,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6422:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6404:37:0"
									},
									"returnParameters": {
										"id": 228,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 227,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 248,
												"src": "6466:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 226,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "6466:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6465:6:0"
									},
									"scope": 610,
									"src": "6378:238:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 288,
										"nodeType": "Block",
										"src": "7218:337:0",
										"statements": [
											{
												"assignments": [
													259
												],
												"declarations": [
													{
														"constant": false,
														"id": 259,
														"mutability": "mutable",
														"name": "owner",
														"nameLocation": "7237:5:0",
														"nodeType": "VariableDeclaration",
														"scope": 288,
														"src": "7229:13:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 258,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "7229:7:0",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 262,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 260,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 983,
														"src": "7245:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 261,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7245:12:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7229:28:0"
											},
											{
												"assignments": [
													264
												],
												"declarations": [
													{
														"constant": false,
														"id": 264,
														"mutability": "mutable",
														"name": "currentAllowance",
														"nameLocation": "7276:16:0",
														"nodeType": "VariableDeclaration",
														"scope": 288,
														"src": "7268:24:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 263,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "7268:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 269,
												"initialValue": {
													"arguments": [
														{
															"id": 266,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 259,
															"src": "7305:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 267,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 251,
															"src": "7312:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 265,
														"name": "allowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 161,
														"src": "7295:9:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address,address) view returns (uint256)"
														}
													},
													"id": 268,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7295:25:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7268:52:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 273,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 271,
																"name": "currentAllowance",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 264,
																"src": "7339:16:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 272,
																"name": "subtractedValue",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 253,
																"src": "7359:15:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7339:35:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f",
															"id": 274,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "7376:39:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8",
																"typeString": "literal_string \"ERC20: decreased allowance below zero\""
															},
															"value": "ERC20: decreased allowance below zero"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8",
																"typeString": "literal_string \"ERC20: decreased allowance below zero\""
															}
														],
														"id": 270,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "7331:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 275,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7331:85:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 276,
												"nodeType": "ExpressionStatement",
												"src": "7331:85:0"
											},
											{
												"id": 285,
												"nodeType": "UncheckedBlock",
												"src": "7427:97:0",
												"statements": [
													{
														"expression": {
															"arguments": [
																{
																	"id": 278,
																	"name": "owner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 259,
																	"src": "7461:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 279,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 251,
																	"src": "7468:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 282,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 280,
																		"name": "currentAllowance",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 264,
																		"src": "7477:16:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "-",
																	"rightExpression": {
																		"id": 281,
																		"name": "subtractedValue",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 253,
																		"src": "7496:15:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "7477:34:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 277,
																"name": "_approve",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 539,
																"src": "7452:8:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
																	"typeString": "function (address,address,uint256)"
																}
															},
															"id": 283,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "7452:60:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$__$",
																"typeString": "tuple()"
															}
														},
														"id": 284,
														"nodeType": "ExpressionStatement",
														"src": "7452:60:0"
													}
												]
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 286,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "7543:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 257,
												"id": 287,
												"nodeType": "Return",
												"src": "7536:11:0"
											}
										]
									},
									"documentation": {
										"id": 249,
										"nodeType": "StructuredDocumentation",
										"src": "6624:489:0",
										"text": " @dev Atomically decreases the allowance granted to `spender` by the caller.\n This is an alternative to {approve} that can be used as a mitigation for\n problems described in {IERC20-approve}.\n Emits an {Approval} event indicating the updated allowance.\n Requirements:\n - `spender` cannot be the zero address.\n - `spender` must have allowance for the caller of at least\n `subtractedValue`."
									},
									"functionSelector": "a457c2d7",
									"id": 289,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "decreaseAllowance",
									"nameLocation": "7128:17:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 254,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 251,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "7154:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 289,
												"src": "7146:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 250,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7146:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 253,
												"mutability": "mutable",
												"name": "subtractedValue",
												"nameLocation": "7171:15:0",
												"nodeType": "VariableDeclaration",
												"scope": 289,
												"src": "7163:23:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 252,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7163:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7145:42:0"
									},
									"returnParameters": {
										"id": 257,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 256,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 289,
												"src": "7212:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 255,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "7212:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7211:6:0"
									},
									"scope": 610,
									"src": "7119:436:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 365,
										"nodeType": "Block",
										"src": "8146:559:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 305,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 300,
																"name": "from",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 292,
																"src": "8165:4:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 303,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "8181:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 302,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "8173:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 301,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "8173:7:0",
																		"typeDescriptions": {}
																	}
																},
																"id": 304,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8173:10:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "8165:18:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a207472616e736665722066726f6d20746865207a65726f2061646472657373",
															"id": 306,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "8185:39:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea",
																"typeString": "literal_string \"ERC20: transfer from the zero address\""
															},
															"value": "ERC20: transfer from the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea",
																"typeString": "literal_string \"ERC20: transfer from the zero address\""
															}
														],
														"id": 299,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "8157:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 307,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8157:68:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 308,
												"nodeType": "ExpressionStatement",
												"src": "8157:68:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 315,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 310,
																"name": "to",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 294,
																"src": "8244:2:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 313,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "8258:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 312,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "8250:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 311,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "8250:7:0",
																		"typeDescriptions": {}
																	}
																},
																"id": 314,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8250:10:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "8244:16:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a207472616e7366657220746f20746865207a65726f2061646472657373",
															"id": 316,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "8262:37:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f",
																"typeString": "literal_string \"ERC20: transfer to the zero address\""
															},
															"value": "ERC20: transfer to the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f",
																"typeString": "literal_string \"ERC20: transfer to the zero address\""
															}
														],
														"id": 309,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "8236:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 317,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8236:64:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 318,
												"nodeType": "ExpressionStatement",
												"src": "8236:64:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 320,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 292,
															"src": "8334:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 321,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 294,
															"src": "8340:2:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 322,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 296,
															"src": "8344:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 319,
														"name": "_beforeTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 593,
														"src": "8313:20:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 323,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8313:38:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 324,
												"nodeType": "ExpressionStatement",
												"src": "8313:38:0"
											},
											{
												"assignments": [
													326
												],
												"declarations": [
													{
														"constant": false,
														"id": 326,
														"mutability": "mutable",
														"name": "fromBalance",
														"nameLocation": "8372:11:0",
														"nodeType": "VariableDeclaration",
														"scope": 365,
														"src": "8364:19:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 325,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "8364:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 330,
												"initialValue": {
													"baseExpression": {
														"id": 327,
														"name": "_balances",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 18,
														"src": "8386:9:0",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 329,
													"indexExpression": {
														"id": 328,
														"name": "from",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 292,
														"src": "8396:4:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "8386:15:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "8364:37:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 334,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 332,
																"name": "fromBalance",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 326,
																"src": "8420:11:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 333,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 296,
																"src": "8435:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "8420:21:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e6365",
															"id": 335,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "8443:40:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6",
																"typeString": "literal_string \"ERC20: transfer amount exceeds balance\""
															},
															"value": "ERC20: transfer amount exceeds balance"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6",
																"typeString": "literal_string \"ERC20: transfer amount exceeds balance\""
															}
														],
														"id": 331,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "8412:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 336,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8412:72:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 337,
												"nodeType": "ExpressionStatement",
												"src": "8412:72:0"
											},
											{
												"id": 346,
												"nodeType": "UncheckedBlock",
												"src": "8495:75:0",
												"statements": [
													{
														"expression": {
															"id": 344,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"baseExpression": {
																	"id": 338,
																	"name": "_balances",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 18,
																	"src": "8520:9:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 340,
																"indexExpression": {
																	"id": 339,
																	"name": "from",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 292,
																	"src": "8530:4:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"nodeType": "IndexAccess",
																"src": "8520:15:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 343,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 341,
																	"name": "fromBalance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 326,
																	"src": "8538:11:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"id": 342,
																	"name": "amount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 296,
																	"src": "8552:6:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "8538:20:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "8520:38:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 345,
														"nodeType": "ExpressionStatement",
														"src": "8520:38:0"
													}
												]
											},
											{
												"expression": {
													"id": 351,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 347,
															"name": "_balances",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 18,
															"src": "8580:9:0",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 349,
														"indexExpression": {
															"id": 348,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 294,
															"src": "8590:2:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "8580:13:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"id": 350,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 296,
														"src": "8597:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "8580:23:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 352,
												"nodeType": "ExpressionStatement",
												"src": "8580:23:0"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 354,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 292,
															"src": "8630:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 355,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 294,
															"src": "8636:2:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 356,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 296,
															"src": "8640:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 353,
														"name": "Transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 647,
														"src": "8621:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 357,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8621:26:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 358,
												"nodeType": "EmitStatement",
												"src": "8616:31:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 360,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 292,
															"src": "8680:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 361,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 294,
															"src": "8686:2:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 362,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 296,
															"src": "8690:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 359,
														"name": "_afterTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 604,
														"src": "8660:19:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 363,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8660:37:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 364,
												"nodeType": "ExpressionStatement",
												"src": "8660:37:0"
											}
										]
									},
									"documentation": {
										"id": 290,
										"nodeType": "StructuredDocumentation",
										"src": "7563:465:0",
										"text": " @dev Moves `amount` of tokens from `sender` to `recipient`.\n This internal function is equivalent to {transfer}, and can be used to\n e.g. implement automatic token fees, slashing mechanisms, etc.\n Emits a {Transfer} event.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `from` must have a balance of at least `amount`."
									},
									"id": 366,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_transfer",
									"nameLocation": "8043:9:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 297,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 292,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "8071:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 366,
												"src": "8063:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 291,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8063:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 294,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "8094:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 366,
												"src": "8086:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 293,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8086:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 296,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "8115:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 366,
												"src": "8107:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 295,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8107:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8052:76:0"
									},
									"returnParameters": {
										"id": 298,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8146:0:0"
									},
									"scope": 610,
									"src": "8034:671:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 421,
										"nodeType": "Block",
										"src": "9057:334:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 380,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 375,
																"name": "account",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 369,
																"src": "9076:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 378,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "9095:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 377,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "9087:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 376,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "9087:7:0",
																		"typeDescriptions": {}
																	}
																},
																"id": 379,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "9087:10:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "9076:21:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a206d696e7420746f20746865207a65726f2061646472657373",
															"id": 381,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "9099:33:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e",
																"typeString": "literal_string \"ERC20: mint to the zero address\""
															},
															"value": "ERC20: mint to the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e",
																"typeString": "literal_string \"ERC20: mint to the zero address\""
															}
														],
														"id": 374,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "9068:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 382,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9068:65:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 383,
												"nodeType": "ExpressionStatement",
												"src": "9068:65:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 387,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9175:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 386,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "9167:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 385,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "9167:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 388,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9167:10:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 389,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 369,
															"src": "9179:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 390,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 371,
															"src": "9188:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 384,
														"name": "_beforeTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 593,
														"src": "9146:20:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 391,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9146:49:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 392,
												"nodeType": "ExpressionStatement",
												"src": "9146:49:0"
											},
											{
												"expression": {
													"id": 395,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 393,
														"name": "_totalSupply",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 26,
														"src": "9208:12:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"id": 394,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 371,
														"src": "9224:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "9208:22:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 396,
												"nodeType": "ExpressionStatement",
												"src": "9208:22:0"
											},
											{
												"expression": {
													"id": 401,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 397,
															"name": "_balances",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 18,
															"src": "9241:9:0",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 399,
														"indexExpression": {
															"id": 398,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 369,
															"src": "9251:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "9241:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"id": 400,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 371,
														"src": "9263:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "9241:28:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 402,
												"nodeType": "ExpressionStatement",
												"src": "9241:28:0"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 406,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9302:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 405,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "9294:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 404,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "9294:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 407,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9294:10:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 408,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 369,
															"src": "9306:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 409,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 371,
															"src": "9315:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 403,
														"name": "Transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 647,
														"src": "9285:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 410,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9285:37:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 411,
												"nodeType": "EmitStatement",
												"src": "9280:42:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 415,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9363:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 414,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "9355:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 413,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "9355:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 416,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9355:10:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 417,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 369,
															"src": "9367:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 418,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 371,
															"src": "9376:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 412,
														"name": "_afterTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 604,
														"src": "9335:19:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 419,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9335:48:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 420,
												"nodeType": "ExpressionStatement",
												"src": "9335:48:0"
											}
										]
									},
									"documentation": {
										"id": 367,
										"nodeType": "StructuredDocumentation",
										"src": "8713:273:0",
										"text": "@dev Creates `amount` tokens and assigns them to `account`, increasing\n the total supply.\n Emits a {Transfer} event with `from` set to the zero address.\n Requirements:\n - `account` cannot be the zero address."
									},
									"id": 422,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_mint",
									"nameLocation": "9001:5:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 372,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 369,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "9015:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 422,
												"src": "9007:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 368,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9007:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 371,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "9032:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 422,
												"src": "9024:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 370,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9024:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9006:33:0"
									},
									"returnParameters": {
										"id": 373,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9057:0:0"
									},
									"scope": 610,
									"src": "8992:399:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 493,
										"nodeType": "Block",
										"src": "9789:526:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 436,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 431,
																"name": "account",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 425,
																"src": "9808:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 434,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "9827:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 433,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "9819:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 432,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "9819:7:0",
																		"typeDescriptions": {}
																	}
																},
																"id": 435,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "9819:10:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "9808:21:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a206275726e2066726f6d20746865207a65726f2061646472657373",
															"id": 437,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "9831:35:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f",
																"typeString": "literal_string \"ERC20: burn from the zero address\""
															},
															"value": "ERC20: burn from the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f",
																"typeString": "literal_string \"ERC20: burn from the zero address\""
															}
														],
														"id": 430,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "9800:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 438,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9800:67:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 439,
												"nodeType": "ExpressionStatement",
												"src": "9800:67:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 441,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 425,
															"src": "9901:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 444,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9918:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 443,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "9910:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 442,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "9910:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 445,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9910:10:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 446,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 427,
															"src": "9922:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 440,
														"name": "_beforeTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 593,
														"src": "9880:20:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 447,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9880:49:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 448,
												"nodeType": "ExpressionStatement",
												"src": "9880:49:0"
											},
											{
												"assignments": [
													450
												],
												"declarations": [
													{
														"constant": false,
														"id": 450,
														"mutability": "mutable",
														"name": "accountBalance",
														"nameLocation": "9950:14:0",
														"nodeType": "VariableDeclaration",
														"scope": 493,
														"src": "9942:22:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 449,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "9942:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 454,
												"initialValue": {
													"baseExpression": {
														"id": 451,
														"name": "_balances",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 18,
														"src": "9967:9:0",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 453,
													"indexExpression": {
														"id": 452,
														"name": "account",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 425,
														"src": "9977:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "9967:18:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "9942:43:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 458,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 456,
																"name": "accountBalance",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 450,
																"src": "10004:14:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 457,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 427,
																"src": "10022:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "10004:24:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a206275726e20616d6f756e7420657863656564732062616c616e6365",
															"id": 459,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "10030:36:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd",
																"typeString": "literal_string \"ERC20: burn amount exceeds balance\""
															},
															"value": "ERC20: burn amount exceeds balance"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd",
																"typeString": "literal_string \"ERC20: burn amount exceeds balance\""
															}
														],
														"id": 455,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "9996:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 460,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9996:71:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 461,
												"nodeType": "ExpressionStatement",
												"src": "9996:71:0"
											},
											{
												"id": 470,
												"nodeType": "UncheckedBlock",
												"src": "10078:81:0",
												"statements": [
													{
														"expression": {
															"id": 468,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"baseExpression": {
																	"id": 462,
																	"name": "_balances",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 18,
																	"src": "10103:9:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 464,
																"indexExpression": {
																	"id": 463,
																	"name": "account",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 425,
																	"src": "10113:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"nodeType": "IndexAccess",
																"src": "10103:18:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 467,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 465,
																	"name": "accountBalance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 450,
																	"src": "10124:14:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"id": 466,
																	"name": "amount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 427,
																	"src": "10141:6:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "10124:23:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "10103:44:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 469,
														"nodeType": "ExpressionStatement",
														"src": "10103:44:0"
													}
												]
											},
											{
												"expression": {
													"id": 473,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 471,
														"name": "_totalSupply",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 26,
														"src": "10169:12:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "-=",
													"rightHandSide": {
														"id": 472,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 427,
														"src": "10185:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "10169:22:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 474,
												"nodeType": "ExpressionStatement",
												"src": "10169:22:0"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 476,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 425,
															"src": "10218:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 479,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10235:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 478,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "10227:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 477,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "10227:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 480,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "10227:10:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 481,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 427,
															"src": "10239:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 475,
														"name": "Transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 647,
														"src": "10209:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 482,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10209:37:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 483,
												"nodeType": "EmitStatement",
												"src": "10204:42:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 485,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 425,
															"src": "10279:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 488,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10296:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 487,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "10288:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 486,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "10288:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 489,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "10288:10:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 490,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 427,
															"src": "10300:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 484,
														"name": "_afterTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 604,
														"src": "10259:19:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 491,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10259:48:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 492,
												"nodeType": "ExpressionStatement",
												"src": "10259:48:0"
											}
										]
									},
									"documentation": {
										"id": 423,
										"nodeType": "StructuredDocumentation",
										"src": "9399:319:0",
										"text": " @dev Destroys `amount` tokens from `account`, reducing the\n total supply.\n Emits a {Transfer} event with `to` set to the zero address.\n Requirements:\n - `account` cannot be the zero address.\n - `account` must have at least `amount` tokens."
									},
									"id": 494,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_burn",
									"nameLocation": "9733:5:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 428,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 425,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "9747:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 494,
												"src": "9739:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 424,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9739:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 427,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "9764:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 494,
												"src": "9756:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 426,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9756:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9738:33:0"
									},
									"returnParameters": {
										"id": 429,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9789:0:0"
									},
									"scope": 610,
									"src": "9724:591:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 538,
										"nodeType": "Block",
										"src": "10870:263:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 510,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 505,
																"name": "owner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 497,
																"src": "10889:5:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 508,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "10906:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 507,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "10898:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 506,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "10898:7:0",
																		"typeDescriptions": {}
																	}
																},
																"id": 509,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "10898:10:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "10889:19:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a20617070726f76652066726f6d20746865207a65726f2061646472657373",
															"id": 511,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "10910:38:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208",
																"typeString": "literal_string \"ERC20: approve from the zero address\""
															},
															"value": "ERC20: approve from the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208",
																"typeString": "literal_string \"ERC20: approve from the zero address\""
															}
														],
														"id": 504,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "10881:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 512,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10881:68:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 513,
												"nodeType": "ExpressionStatement",
												"src": "10881:68:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 520,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 515,
																"name": "spender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 499,
																"src": "10968:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 518,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "10987:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 517,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "10979:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 516,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "10979:7:0",
																		"typeDescriptions": {}
																	}
																},
																"id": 519,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "10979:10:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "10968:21:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a20617070726f766520746f20746865207a65726f2061646472657373",
															"id": 521,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "10991:36:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029",
																"typeString": "literal_string \"ERC20: approve to the zero address\""
															},
															"value": "ERC20: approve to the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029",
																"typeString": "literal_string \"ERC20: approve to the zero address\""
															}
														],
														"id": 514,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "10960:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 522,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10960:68:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 523,
												"nodeType": "ExpressionStatement",
												"src": "10960:68:0"
											},
											{
												"expression": {
													"id": 530,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"baseExpression": {
																"id": 524,
																"name": "_allowances",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 24,
																"src": "11041:11:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
																	"typeString": "mapping(address => mapping(address => uint256))"
																}
															},
															"id": 527,
															"indexExpression": {
																"id": 525,
																"name": "owner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 497,
																"src": "11053:5:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "11041:18:0",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 528,
														"indexExpression": {
															"id": 526,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 499,
															"src": "11060:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "11041:27:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 529,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 501,
														"src": "11071:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "11041:36:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 531,
												"nodeType": "ExpressionStatement",
												"src": "11041:36:0"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 533,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 497,
															"src": "11102:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 534,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 499,
															"src": "11109:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 535,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 501,
															"src": "11118:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 532,
														"name": "Approval",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 656,
														"src": "11093:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 536,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "11093:32:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 537,
												"nodeType": "EmitStatement",
												"src": "11088:37:0"
											}
										]
									},
									"documentation": {
										"id": 495,
										"nodeType": "StructuredDocumentation",
										"src": "10323:424:0",
										"text": " @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n This internal function is equivalent to `approve`, and can be used to\n e.g. set automatic allowances for certain subsystems, etc.\n Emits an {Approval} event.\n Requirements:\n - `owner` cannot be the zero address.\n - `spender` cannot be the zero address."
									},
									"id": 539,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_approve",
									"nameLocation": "10762:8:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 502,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 497,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "10789:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 539,
												"src": "10781:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 496,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10781:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 499,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "10813:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 539,
												"src": "10805:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 498,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10805:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 501,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "10839:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 539,
												"src": "10831:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 500,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10831:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10770:82:0"
									},
									"returnParameters": {
										"id": 503,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10870:0:0"
									},
									"scope": 610,
									"src": "10753:380:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 581,
										"nodeType": "Block",
										"src": "11548:329:0",
										"statements": [
											{
												"assignments": [
													550
												],
												"declarations": [
													{
														"constant": false,
														"id": 550,
														"mutability": "mutable",
														"name": "currentAllowance",
														"nameLocation": "11567:16:0",
														"nodeType": "VariableDeclaration",
														"scope": 581,
														"src": "11559:24:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 549,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "11559:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 555,
												"initialValue": {
													"arguments": [
														{
															"id": 552,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 542,
															"src": "11596:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 553,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 544,
															"src": "11603:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 551,
														"name": "allowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 161,
														"src": "11586:9:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address,address) view returns (uint256)"
														}
													},
													"id": 554,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "11586:25:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "11559:52:0"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 562,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 556,
														"name": "currentAllowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 550,
														"src": "11626:16:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"expression": {
															"arguments": [
																{
																	"id": 559,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "11651:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint256_$",
																		"typeString": "type(uint256)"
																	},
																	"typeName": {
																		"id": 558,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "11651:7:0",
																		"typeDescriptions": {}
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_type$_t_uint256_$",
																		"typeString": "type(uint256)"
																	}
																],
																"id": 557,
																"name": "type",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967269,
																"src": "11646:4:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																	"typeString": "function () pure"
																}
															},
															"id": 560,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "11646:13:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_magic_meta_type_t_uint256",
																"typeString": "type(uint256)"
															}
														},
														"id": 561,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberName": "max",
														"nodeType": "MemberAccess",
														"src": "11646:17:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "11626:37:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 580,
												"nodeType": "IfStatement",
												"src": "11622:248:0",
												"trueBody": {
													"id": 579,
													"nodeType": "Block",
													"src": "11665:205:0",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 566,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 564,
																			"name": "currentAllowance",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 550,
																			"src": "11688:16:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": ">=",
																		"rightExpression": {
																			"id": 565,
																			"name": "amount",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 546,
																			"src": "11708:6:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "11688:26:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	{
																		"hexValue": "45524332303a20696e73756666696369656e7420616c6c6f77616e6365",
																		"id": 567,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "11716:31:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe",
																			"typeString": "literal_string \"ERC20: insufficient allowance\""
																		},
																		"value": "ERC20: insufficient allowance"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		{
																			"typeIdentifier": "t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe",
																			"typeString": "literal_string \"ERC20: insufficient allowance\""
																		}
																	],
																	"id": 563,
																	"name": "require",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967278,
																		4294967278
																	],
																	"referencedDeclaration": 4294967278,
																	"src": "11680:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bool,string memory) pure"
																	}
																},
																"id": 568,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "11680:68:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 569,
															"nodeType": "ExpressionStatement",
															"src": "11680:68:0"
														},
														{
															"id": 578,
															"nodeType": "UncheckedBlock",
															"src": "11763:96:0",
															"statements": [
																{
																	"expression": {
																		"arguments": [
																			{
																				"id": 571,
																				"name": "owner",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 542,
																				"src": "11801:5:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			{
																				"id": 572,
																				"name": "spender",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 544,
																				"src": "11808:7:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			{
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 575,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 573,
																					"name": "currentAllowance",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 550,
																					"src": "11817:16:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "-",
																				"rightExpression": {
																					"id": 574,
																					"name": "amount",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 546,
																					"src": "11836:6:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "11817:25:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				},
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				},
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			],
																			"id": 570,
																			"name": "_approve",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 539,
																			"src": "11792:8:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
																				"typeString": "function (address,address,uint256)"
																			}
																		},
																		"id": 576,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "11792:51:0",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_tuple$__$",
																			"typeString": "tuple()"
																		}
																	},
																	"id": 577,
																	"nodeType": "ExpressionStatement",
																	"src": "11792:51:0"
																}
															]
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 540,
										"nodeType": "StructuredDocumentation",
										"src": "11141:277:0",
										"text": " @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n Does not update the allowance amount in case of infinite allowance.\n Revert if not enough allowance is available.\n Might emit an {Approval} event."
									},
									"id": 582,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_spendAllowance",
									"nameLocation": "11433:15:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 547,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 542,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "11467:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 582,
												"src": "11459:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 541,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "11459:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 544,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "11491:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 582,
												"src": "11483:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 543,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "11483:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 546,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "11517:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 582,
												"src": "11509:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 545,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11509:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11448:82:0"
									},
									"returnParameters": {
										"id": 548,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "11548:0:0"
									},
									"scope": 610,
									"src": "11424:453:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 592,
										"nodeType": "Block",
										"src": "12600:2:0",
										"statements": []
									},
									"documentation": {
										"id": 583,
										"nodeType": "StructuredDocumentation",
										"src": "11885:586:0",
										"text": " @dev Hook that is called before any transfer of tokens. This includes\n minting and burning.\n Calling conditions:\n - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n will be transferred to `to`.\n - when `from` is zero, `amount` tokens will be minted for `to`.\n - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n - `from` and `to` are never both zero.\n To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]."
									},
									"id": 593,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_beforeTokenTransfer",
									"nameLocation": "12486:20:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 590,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 585,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "12525:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 593,
												"src": "12517:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 584,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "12517:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 587,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "12548:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 593,
												"src": "12540:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 586,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "12540:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 589,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "12569:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 593,
												"src": "12561:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 588,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12561:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12506:76:0"
									},
									"returnParameters": {
										"id": 591,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "12600:0:0"
									},
									"scope": 610,
									"src": "12477:125:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 603,
										"nodeType": "Block",
										"src": "13328:2:0",
										"statements": []
									},
									"documentation": {
										"id": 594,
										"nodeType": "StructuredDocumentation",
										"src": "12610:590:0",
										"text": " @dev Hook that is called after any transfer of tokens. This includes\n minting and burning.\n Calling conditions:\n - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n has been transferred to `to`.\n - when `from` is zero, `amount` tokens have been minted for `to`.\n - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n - `from` and `to` are never both zero.\n To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]."
									},
									"id": 604,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_afterTokenTransfer",
									"nameLocation": "13215:19:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 601,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 596,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "13253:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 604,
												"src": "13245:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 595,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "13245:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 598,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "13276:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 604,
												"src": "13268:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 597,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "13268:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 600,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "13297:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 604,
												"src": "13289:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 599,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "13289:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "13234:76:0"
									},
									"returnParameters": {
										"id": 602,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "13328:0:0"
									},
									"scope": 610,
									"src": "13206:124:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"constant": false,
									"documentation": {
										"id": 605,
										"nodeType": "StructuredDocumentation",
										"src": "13338:258:0",
										"text": " @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"
									},
									"id": 609,
									"mutability": "mutable",
									"name": "__gap",
									"nameLocation": "13622:5:0",
									"nodeType": "VariableDeclaration",
									"scope": 610,
									"src": "13602:25:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_array$_t_uint256_$45_storage",
										"typeString": "uint256[45]"
									},
									"typeName": {
										"baseType": {
											"id": 606,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "13602:7:0",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"id": 608,
										"length": {
											"hexValue": "3435",
											"id": 607,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "13610:2:0",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_45_by_1",
												"typeString": "int_const 45"
											},
											"value": "45"
										},
										"nodeType": "ArrayTypeName",
										"src": "13602:11:0",
										"typeDescriptions": {
											"typeIdentifier": "t_array$_t_uint256_$45_storage_ptr",
											"typeString": "uint256[45]"
										}
									},
									"visibility": "private"
								}
							],
							"scope": 611,
							"src": "1500:12131:0",
							"usedErrors": []
						}
					],
					"src": "108:13523:0"
				},
				"id": 0
			},
			"ERC20/IERC20MetadataUpgradeable.sol": {
				"ast": {
					"absolutePath": "ERC20/IERC20MetadataUpgradeable.sol",
					"exportedSymbols": {
						"IERC20MetadataUpgradeable": [
							635
						],
						"IERC20Upgradeable": [
							713
						]
					},
					"id": 636,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 612,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "113:23:1"
						},
						{
							"absolutePath": "ERC20/IERC20Upgradeable.sol",
							"file": "./IERC20Upgradeable.sol",
							"id": 613,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 636,
							"sourceUnit": 714,
							"src": "140:33:1",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 615,
										"name": "IERC20Upgradeable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 713,
										"src": "338:17:1"
									},
									"id": 616,
									"nodeType": "InheritanceSpecifier",
									"src": "338:17:1"
								}
							],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 614,
								"nodeType": "StructuredDocumentation",
								"src": "177:120:1",
								"text": " @dev Interface for the optional metadata functions from the ERC20 standard.\n _Available since v4.1._"
							},
							"fullyImplemented": false,
							"id": 635,
							"linearizedBaseContracts": [
								635,
								713
							],
							"name": "IERC20MetadataUpgradeable",
							"nameLocation": "309:25:1",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 617,
										"nodeType": "StructuredDocumentation",
										"src": "363:56:1",
										"text": " @dev Returns the name of the token."
									},
									"functionSelector": "06fdde03",
									"id": 622,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "name",
									"nameLocation": "434:4:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 618,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "438:2:1"
									},
									"returnParameters": {
										"id": 621,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 620,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 622,
												"src": "464:13:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 619,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "464:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "463:15:1"
									},
									"scope": 635,
									"src": "425:54:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 623,
										"nodeType": "StructuredDocumentation",
										"src": "487:58:1",
										"text": " @dev Returns the symbol of the token."
									},
									"functionSelector": "95d89b41",
									"id": 628,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "symbol",
									"nameLocation": "560:6:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 624,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "566:2:1"
									},
									"returnParameters": {
										"id": 627,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 626,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 628,
												"src": "592:13:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 625,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "592:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "591:15:1"
									},
									"scope": 635,
									"src": "551:56:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 629,
										"nodeType": "StructuredDocumentation",
										"src": "615:67:1",
										"text": " @dev Returns the decimals places of the token."
									},
									"functionSelector": "313ce567",
									"id": 634,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "decimals",
									"nameLocation": "697:8:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 630,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "705:2:1"
									},
									"returnParameters": {
										"id": 633,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 632,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 634,
												"src": "731:5:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 631,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "731:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "730:7:1"
									},
									"scope": 635,
									"src": "688:50:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 636,
							"src": "299:442:1",
							"usedErrors": []
						}
					],
					"src": "113:630:1"
				},
				"id": 1
			},
			"ERC20/IERC20Upgradeable.sol": {
				"ast": {
					"absolutePath": "ERC20/IERC20Upgradeable.sol",
					"exportedSymbols": {
						"IERC20Upgradeable": [
							713
						]
					},
					"id": 714,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 637,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "109:23:2"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 638,
								"nodeType": "StructuredDocumentation",
								"src": "136:72:2",
								"text": " @dev Interface of the ERC20 standard as defined in the EIP."
							},
							"fullyImplemented": false,
							"id": 713,
							"linearizedBaseContracts": [
								713
							],
							"name": "IERC20Upgradeable",
							"nameLocation": "220:17:2",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 639,
										"nodeType": "StructuredDocumentation",
										"src": "245:163:2",
										"text": " @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."
									},
									"id": 647,
									"name": "Transfer",
									"nameLocation": "420:8:2",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 646,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 641,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "445:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 647,
												"src": "429:20:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 640,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "429:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 643,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "467:2:2",
												"nodeType": "VariableDeclaration",
												"scope": 647,
												"src": "451:18:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 642,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "451:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 645,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "479:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 647,
												"src": "471:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 644,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "471:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "428:57:2"
									},
									"src": "414:72:2"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 648,
										"nodeType": "StructuredDocumentation",
										"src": "494:151:2",
										"text": " @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."
									},
									"id": 656,
									"name": "Approval",
									"nameLocation": "657:8:2",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 655,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 650,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "682:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 656,
												"src": "666:21:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 649,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "666:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 652,
												"indexed": true,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "705:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 656,
												"src": "689:23:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 651,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "689:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 654,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "722:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 656,
												"src": "714:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 653,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "714:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "665:63:2"
									},
									"src": "651:78:2"
								},
								{
									"documentation": {
										"id": 657,
										"nodeType": "StructuredDocumentation",
										"src": "737:68:2",
										"text": " @dev Returns the amount of tokens in existence."
									},
									"functionSelector": "18160ddd",
									"id": 662,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "820:11:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 658,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "831:2:2"
									},
									"returnParameters": {
										"id": 661,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 660,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 662,
												"src": "857:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 659,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "857:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "856:9:2"
									},
									"scope": 713,
									"src": "811:55:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 663,
										"nodeType": "StructuredDocumentation",
										"src": "874:74:2",
										"text": " @dev Returns the amount of tokens owned by `account`."
									},
									"functionSelector": "70a08231",
									"id": 670,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "963:9:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 666,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 665,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "981:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 670,
												"src": "973:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 664,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "973:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "972:17:2"
									},
									"returnParameters": {
										"id": 669,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 668,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 670,
												"src": "1013:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 667,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1013:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1012:9:2"
									},
									"scope": 713,
									"src": "954:68:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 671,
										"nodeType": "StructuredDocumentation",
										"src": "1030:208:2",
										"text": " @dev Moves `amount` tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "a9059cbb",
									"id": 680,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nameLocation": "1253:8:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 676,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 673,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1270:2:2",
												"nodeType": "VariableDeclaration",
												"scope": 680,
												"src": "1262:10:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 672,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1262:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 675,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "1282:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 680,
												"src": "1274:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 674,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1274:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1261:28:2"
									},
									"returnParameters": {
										"id": 679,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 678,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 680,
												"src": "1308:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 677,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1308:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1307:6:2"
									},
									"scope": 713,
									"src": "1244:70:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 681,
										"nodeType": "StructuredDocumentation",
										"src": "1322:270:2",
										"text": " @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."
									},
									"functionSelector": "dd62ed3e",
									"id": 690,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nameLocation": "1607:9:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 686,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 683,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1625:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 690,
												"src": "1617:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 682,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1617:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 685,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1640:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 690,
												"src": "1632:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 684,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1632:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1616:32:2"
									},
									"returnParameters": {
										"id": 689,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 688,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 690,
												"src": "1672:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 687,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1672:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1671:9:2"
									},
									"scope": 713,
									"src": "1598:83:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 691,
										"nodeType": "StructuredDocumentation",
										"src": "1689:655:2",
										"text": " @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."
									},
									"functionSelector": "095ea7b3",
									"id": 700,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "2359:7:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 696,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 693,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2375:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 700,
												"src": "2367:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 692,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2367:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 695,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2392:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 700,
												"src": "2384:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 694,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2384:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2366:33:2"
									},
									"returnParameters": {
										"id": 699,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 698,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 700,
												"src": "2418:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 697,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2418:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2417:6:2"
									},
									"scope": 713,
									"src": "2350:74:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 701,
										"nodeType": "StructuredDocumentation",
										"src": "2432:295:2",
										"text": " @dev Moves `amount` tokens from `from` to `to` using the\n allowance mechanism. `amount` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "23b872dd",
									"id": 712,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "2742:12:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 708,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 703,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "2773:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 712,
												"src": "2765:12:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 702,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2765:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 705,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "2796:2:2",
												"nodeType": "VariableDeclaration",
												"scope": 712,
												"src": "2788:10:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 704,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2788:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 707,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2817:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 712,
												"src": "2809:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 706,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2809:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2754:76:2"
									},
									"returnParameters": {
										"id": 711,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 710,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 712,
												"src": "2849:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 709,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2849:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2848:6:2"
									},
									"scope": 713,
									"src": "2733:122:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 714,
							"src": "210:2648:2",
							"usedErrors": []
						}
					],
					"src": "109:2751:2"
				},
				"id": 2
			},
			"Utils/AddressUpgradeable.sol": {
				"ast": {
					"absolutePath": "Utils/AddressUpgradeable.sol",
					"exportedSymbols": {
						"AddressUpgradeable": [
							956
						]
					},
					"id": 957,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 715,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".1"
							],
							"nodeType": "PragmaDirective",
							"src": "104:23:3"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 716,
								"nodeType": "StructuredDocumentation",
								"src": "131:69:3",
								"text": " @dev Collection of functions related to the address type"
							},
							"fullyImplemented": true,
							"id": 956,
							"linearizedBaseContracts": [
								956
							],
							"name": "AddressUpgradeable",
							"nameLocation": "210:18:3",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 730,
										"nodeType": "Block",
										"src": "1287:260:3",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 728,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"expression": {
																"id": 724,
																"name": "account",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 719,
																"src": "1516:7:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 725,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "code",
															"nodeType": "MemberAccess",
															"src": "1516:12:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 726,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "1516:19:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 727,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1538:1:3",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1516:23:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 723,
												"id": 729,
												"nodeType": "Return",
												"src": "1509:30:3"
											}
										]
									},
									"documentation": {
										"id": 717,
										"nodeType": "StructuredDocumentation",
										"src": "236:979:3",
										"text": " @dev Returns true if `account` is a contract.\n [IMPORTANT]\n ====\n It is unsafe to assume that an address for which this function returns\n false is an externally-owned account (EOA) and not a contract.\n Among others, `isContract` will return false for the following\n types of addresses:\n  - an externally-owned account\n  - a contract in construction\n  - an address where a contract will be created\n  - an address where a contract lived, but was destroyed\n ====\n [IMPORTANT]\n ====\n You shouldn't rely on `isContract` to protect against flash loan attacks!\n Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n constructor.\n ===="
									},
									"id": 731,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "isContract",
									"nameLocation": "1230:10:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 720,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 719,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "1249:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 731,
												"src": "1241:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 718,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1241:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1240:17:3"
									},
									"returnParameters": {
										"id": 723,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 722,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 731,
												"src": "1281:4:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 721,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1281:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1280:6:3"
									},
									"scope": 956,
									"src": "1221:326:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 764,
										"nodeType": "Block",
										"src": "2553:246:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 746,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 742,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "2580:4:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_AddressUpgradeable_$956",
																				"typeString": "library AddressUpgradeable"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_AddressUpgradeable_$956",
																				"typeString": "library AddressUpgradeable"
																			}
																		],
																		"id": 741,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "2572:7:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 740,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "2572:7:3",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 743,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2572:13:3",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"id": 744,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "balance",
																"nodeType": "MemberAccess",
																"src": "2572:21:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 745,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 736,
																"src": "2597:6:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2572:31:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a20696e73756666696369656e742062616c616e6365",
															"id": 747,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2605:31:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9",
																"typeString": "literal_string \"Address: insufficient balance\""
															},
															"value": "Address: insufficient balance"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9",
																"typeString": "literal_string \"Address: insufficient balance\""
															}
														],
														"id": 739,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2564:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 748,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2564:73:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 749,
												"nodeType": "ExpressionStatement",
												"src": "2564:73:3"
											},
											{
												"assignments": [
													751,
													null
												],
												"declarations": [
													{
														"constant": false,
														"id": 751,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "2656:7:3",
														"nodeType": "VariableDeclaration",
														"scope": 764,
														"src": "2651:12:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 750,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "2651:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													null
												],
												"id": 758,
												"initialValue": {
													"arguments": [
														{
															"hexValue": "",
															"id": 756,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2699:2:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															},
															"value": ""
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																	"typeString": "literal_string \"\""
																}
															],
															"expression": {
																"id": 752,
																"name": "recipient",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 734,
																"src": "2669:9:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"id": 753,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "call",
															"nodeType": "MemberAccess",
															"src": "2669:14:3",
															"typeDescriptions": {
																"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
															}
														},
														"id": 755,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"names": [
															"value"
														],
														"nodeType": "FunctionCallOptions",
														"options": [
															{
																"id": 754,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 736,
																"src": "2691:6:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"src": "2669:29:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 757,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2669:33:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2650:52:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 760,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 751,
															"src": "2721:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564",
															"id": 761,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2730:60:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae",
																"typeString": "literal_string \"Address: unable to send value, recipient may have reverted\""
															},
															"value": "Address: unable to send value, recipient may have reverted"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae",
																"typeString": "literal_string \"Address: unable to send value, recipient may have reverted\""
															}
														],
														"id": 759,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2713:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 762,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2713:78:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 763,
												"nodeType": "ExpressionStatement",
												"src": "2713:78:3"
											}
										]
									},
									"documentation": {
										"id": 732,
										"nodeType": "StructuredDocumentation",
										"src": "1555:921:3",
										"text": " @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."
									},
									"id": 765,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sendValue",
									"nameLocation": "2491:9:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 737,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 734,
												"mutability": "mutable",
												"name": "recipient",
												"nameLocation": "2517:9:3",
												"nodeType": "VariableDeclaration",
												"scope": 765,
												"src": "2501:25:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address_payable",
													"typeString": "address payable"
												},
												"typeName": {
													"id": 733,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2501:15:3",
													"stateMutability": "payable",
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 736,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2536:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 765,
												"src": "2528:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 735,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2528:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2500:43:3"
									},
									"returnParameters": {
										"id": 738,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2553:0:3"
									},
									"scope": 956,
									"src": "2482:317:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 781,
										"nodeType": "Block",
										"src": "3650:86:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 776,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 768,
															"src": "3681:6:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 777,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 770,
															"src": "3689:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c2063616c6c206661696c6564",
															"id": 778,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3695:32:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df",
																"typeString": "literal_string \"Address: low-level call failed\""
															},
															"value": "Address: low-level call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df",
																"typeString": "literal_string \"Address: low-level call failed\""
															}
														],
														"id": 775,
														"name": "functionCall",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															782,
															802
														],
														"referencedDeclaration": 802,
														"src": "3668:12:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,string memory) returns (bytes memory)"
														}
													},
													"id": 779,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3668:60:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 774,
												"id": 780,
												"nodeType": "Return",
												"src": "3661:67:3"
											}
										]
									},
									"documentation": {
										"id": 766,
										"nodeType": "StructuredDocumentation",
										"src": "2807:748:3",
										"text": " @dev Performs a Solidity function call using a low level `call`. A\n plain `call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason, it is bubbled up by this\n function (like regular Solidity function calls).\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert.\n _Available since v3.1._"
									},
									"id": 782,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCall",
									"nameLocation": "3570:12:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 771,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 768,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "3591:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 782,
												"src": "3583:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 767,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3583:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 770,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "3612:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 782,
												"src": "3599:17:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 769,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3599:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3582:35:3"
									},
									"returnParameters": {
										"id": 774,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 773,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 782,
												"src": "3636:12:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 772,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3636:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3635:14:3"
									},
									"scope": 956,
									"src": "3561:175:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 801,
										"nodeType": "Block",
										"src": "4117:78:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 795,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 785,
															"src": "4157:6:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 796,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 787,
															"src": "4165:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "30",
															"id": 797,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4171:1:3",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														{
															"id": 798,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 789,
															"src": "4174:12:3",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 794,
														"name": "functionCallWithValue",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															822,
															872
														],
														"referencedDeclaration": 872,
														"src": "4135:21:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,uint256,string memory) returns (bytes memory)"
														}
													},
													"id": 799,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4135:52:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 793,
												"id": 800,
												"nodeType": "Return",
												"src": "4128:59:3"
											}
										]
									},
									"documentation": {
										"id": 783,
										"nodeType": "StructuredDocumentation",
										"src": "3744:216:3",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"
									},
									"id": 802,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCall",
									"nameLocation": "3975:12:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 790,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 785,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "4006:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 802,
												"src": "3998:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 784,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3998:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 787,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "4036:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 802,
												"src": "4023:17:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 786,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4023:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 789,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "4065:12:3",
												"nodeType": "VariableDeclaration",
												"scope": 802,
												"src": "4051:26:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 788,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "4051:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3987:97:3"
									},
									"returnParameters": {
										"id": 793,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 792,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 802,
												"src": "4103:12:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 791,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4103:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4102:14:3"
									},
									"scope": 956,
									"src": "3966:229:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 821,
										"nodeType": "Block",
										"src": "4717:113:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 815,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 805,
															"src": "4757:6:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 816,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 807,
															"src": "4765:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 817,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 809,
															"src": "4771:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564",
															"id": 818,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4778:43:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc",
																"typeString": "literal_string \"Address: low-level call with value failed\""
															},
															"value": "Address: low-level call with value failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc",
																"typeString": "literal_string \"Address: low-level call with value failed\""
															}
														],
														"id": 814,
														"name": "functionCallWithValue",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															822,
															872
														],
														"referencedDeclaration": 872,
														"src": "4735:21:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,uint256,string memory) returns (bytes memory)"
														}
													},
													"id": 819,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4735:87:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 813,
												"id": 820,
												"nodeType": "Return",
												"src": "4728:94:3"
											}
										]
									},
									"documentation": {
										"id": 803,
										"nodeType": "StructuredDocumentation",
										"src": "4203:361:3",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`.\n _Available since v3.1._"
									},
									"id": 822,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCallWithValue",
									"nameLocation": "4579:21:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 810,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 805,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "4619:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 822,
												"src": "4611:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 804,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4611:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 807,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "4649:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 822,
												"src": "4636:17:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 806,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4636:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 809,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "4672:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 822,
												"src": "4664:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 808,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4664:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4600:84:3"
									},
									"returnParameters": {
										"id": 813,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 812,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 822,
												"src": "4703:12:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 811,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4703:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4702:14:3"
									},
									"scope": 956,
									"src": "4570:260:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 871,
										"nodeType": "Block",
										"src": "5270:326:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 843,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 839,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "5297:4:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_AddressUpgradeable_$956",
																				"typeString": "library AddressUpgradeable"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_AddressUpgradeable_$956",
																				"typeString": "library AddressUpgradeable"
																			}
																		],
																		"id": 838,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "5289:7:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 837,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "5289:7:3",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 840,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "5289:13:3",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"id": 841,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "balance",
																"nodeType": "MemberAccess",
																"src": "5289:21:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 842,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 829,
																"src": "5314:5:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5289:30:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c",
															"id": 844,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5321:40:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c",
																"typeString": "literal_string \"Address: insufficient balance for call\""
															},
															"value": "Address: insufficient balance for call"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c",
																"typeString": "literal_string \"Address: insufficient balance for call\""
															}
														],
														"id": 836,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "5281:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 845,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5281:81:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 846,
												"nodeType": "ExpressionStatement",
												"src": "5281:81:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 849,
																	"name": "target",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 825,
																	"src": "5392:6:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 848,
																"name": "isContract",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 731,
																"src": "5381:10:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
																	"typeString": "function (address) view returns (bool)"
																}
															},
															"id": 850,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5381:18:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374",
															"id": 851,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5401:31:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad",
																"typeString": "literal_string \"Address: call to non-contract\""
															},
															"value": "Address: call to non-contract"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad",
																"typeString": "literal_string \"Address: call to non-contract\""
															}
														],
														"id": 847,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "5373:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 852,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5373:60:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 853,
												"nodeType": "ExpressionStatement",
												"src": "5373:60:3"
											},
											{
												"assignments": [
													855,
													857
												],
												"declarations": [
													{
														"constant": false,
														"id": 855,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "5452:7:3",
														"nodeType": "VariableDeclaration",
														"scope": 871,
														"src": "5447:12:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 854,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "5447:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 857,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "5474:10:3",
														"nodeType": "VariableDeclaration",
														"scope": 871,
														"src": "5461:23:3",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 856,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "5461:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 864,
												"initialValue": {
													"arguments": [
														{
															"id": 862,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 827,
															"src": "5514:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															],
															"expression": {
																"id": 858,
																"name": "target",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 825,
																"src": "5488:6:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 859,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "call",
															"nodeType": "MemberAccess",
															"src": "5488:11:3",
															"typeDescriptions": {
																"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
															}
														},
														"id": 861,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"names": [
															"value"
														],
														"nodeType": "FunctionCallOptions",
														"options": [
															{
																"id": 860,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 829,
																"src": "5507:5:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"src": "5488:25:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 863,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5488:31:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5446:73:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 866,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 855,
															"src": "5554:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 867,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 857,
															"src": "5563:10:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 868,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 831,
															"src": "5575:12:3",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 865,
														"name": "verifyCallResult",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 955,
														"src": "5537:16:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (bool,bytes memory,string memory) pure returns (bytes memory)"
														}
													},
													"id": 869,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5537:51:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 835,
												"id": 870,
												"nodeType": "Return",
												"src": "5530:58:3"
											}
										]
									},
									"documentation": {
										"id": 823,
										"nodeType": "StructuredDocumentation",
										"src": "4838:242:3",
										"text": " @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n with `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"
									},
									"id": 872,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCallWithValue",
									"nameLocation": "5095:21:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 832,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 825,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "5135:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 872,
												"src": "5127:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 824,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5127:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 827,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "5165:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 872,
												"src": "5152:17:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 826,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5152:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 829,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "5188:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 872,
												"src": "5180:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 828,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5180:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 831,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "5218:12:3",
												"nodeType": "VariableDeclaration",
												"scope": 872,
												"src": "5204:26:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 830,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "5204:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5116:121:3"
									},
									"returnParameters": {
										"id": 835,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 834,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 872,
												"src": "5256:12:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 833,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5256:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5255:14:3"
									},
									"scope": 956,
									"src": "5086:510:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 888,
										"nodeType": "Block",
										"src": "5881:99:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 883,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 875,
															"src": "5918:6:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 884,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 877,
															"src": "5926:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564",
															"id": 885,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5932:39:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0",
																"typeString": "literal_string \"Address: low-level static call failed\""
															},
															"value": "Address: low-level static call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0",
																"typeString": "literal_string \"Address: low-level static call failed\""
															}
														],
														"id": 882,
														"name": "functionStaticCall",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															889,
															924
														],
														"referencedDeclaration": 924,
														"src": "5899:18:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,string memory) view returns (bytes memory)"
														}
													},
													"id": 886,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5899:73:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 881,
												"id": 887,
												"nodeType": "Return",
												"src": "5892:80:3"
											}
										]
									},
									"documentation": {
										"id": 873,
										"nodeType": "StructuredDocumentation",
										"src": "5604:171:3",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"
									},
									"id": 889,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionStaticCall",
									"nameLocation": "5790:18:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 878,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 875,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "5817:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 889,
												"src": "5809:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 874,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5809:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 877,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "5838:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 889,
												"src": "5825:17:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 876,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5825:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5808:35:3"
									},
									"returnParameters": {
										"id": 881,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 880,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 889,
												"src": "5867:12:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 879,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5867:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5866:14:3"
									},
									"scope": 956,
									"src": "5781:199:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 923,
										"nodeType": "Block",
										"src": "6334:233:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 903,
																	"name": "target",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 892,
																	"src": "6364:6:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 902,
																"name": "isContract",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 731,
																"src": "6353:10:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
																	"typeString": "function (address) view returns (bool)"
																}
															},
															"id": 904,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "6353:18:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a207374617469632063616c6c20746f206e6f6e2d636f6e7472616374",
															"id": 905,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6373:38:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c79cc78e4f16ce3933a42b84c73868f93bb4a59c031a0acf576679de98c608a9",
																"typeString": "literal_string \"Address: static call to non-contract\""
															},
															"value": "Address: static call to non-contract"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_c79cc78e4f16ce3933a42b84c73868f93bb4a59c031a0acf576679de98c608a9",
																"typeString": "literal_string \"Address: static call to non-contract\""
															}
														],
														"id": 901,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "6345:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 906,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6345:67:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 907,
												"nodeType": "ExpressionStatement",
												"src": "6345:67:3"
											},
											{
												"assignments": [
													909,
													911
												],
												"declarations": [
													{
														"constant": false,
														"id": 909,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "6431:7:3",
														"nodeType": "VariableDeclaration",
														"scope": 923,
														"src": "6426:12:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 908,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "6426:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 911,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "6453:10:3",
														"nodeType": "VariableDeclaration",
														"scope": 923,
														"src": "6440:23:3",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 910,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "6440:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 916,
												"initialValue": {
													"arguments": [
														{
															"id": 914,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 894,
															"src": "6485:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"id": 912,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 892,
															"src": "6467:6:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 913,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "staticcall",
														"nodeType": "MemberAccess",
														"src": "6467:17:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) view returns (bool,bytes memory)"
														}
													},
													"id": 915,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6467:23:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6425:65:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 918,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 909,
															"src": "6525:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 919,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 911,
															"src": "6534:10:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 920,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 896,
															"src": "6546:12:3",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 917,
														"name": "verifyCallResult",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 955,
														"src": "6508:16:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (bool,bytes memory,string memory) pure returns (bytes memory)"
														}
													},
													"id": 921,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6508:51:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 900,
												"id": 922,
												"nodeType": "Return",
												"src": "6501:58:3"
											}
										]
									},
									"documentation": {
										"id": 890,
										"nodeType": "StructuredDocumentation",
										"src": "5988:178:3",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"
									},
									"id": 924,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionStaticCall",
									"nameLocation": "6181:18:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 897,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 892,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "6218:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 924,
												"src": "6210:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 891,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6210:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 894,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "6248:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 924,
												"src": "6235:17:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 893,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6235:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 896,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "6277:12:3",
												"nodeType": "VariableDeclaration",
												"scope": 924,
												"src": "6263:26:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 895,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "6263:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6199:97:3"
									},
									"returnParameters": {
										"id": 900,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 899,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 924,
												"src": "6320:12:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 898,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6320:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6319:14:3"
									},
									"scope": 956,
									"src": "6172:395:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 954,
										"nodeType": "Block",
										"src": "6959:548:3",
										"statements": [
											{
												"condition": {
													"id": 936,
													"name": "success",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 927,
													"src": "6974:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 952,
													"nodeType": "Block",
													"src": "7033:467:3",
													"statements": [
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 943,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"expression": {
																		"id": 940,
																		"name": "returndata",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 929,
																		"src": "7119:10:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	"id": 941,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "length",
																	"nodeType": "MemberAccess",
																	"src": "7119:17:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">",
																"rightExpression": {
																	"hexValue": "30",
																	"id": 942,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7139:1:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "7119:21:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"falseBody": {
																"id": 950,
																"nodeType": "Block",
																"src": "7434:55:3",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"id": 947,
																					"name": "errorMessage",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 931,
																					"src": "7460:12:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_string_memory_ptr",
																						"typeString": "string memory"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_string_memory_ptr",
																						"typeString": "string memory"
																					}
																				],
																				"id": 946,
																				"name": "revert",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [
																					4294967277,
																					4294967277
																				],
																				"referencedDeclaration": 4294967277,
																				"src": "7453:6:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_revert_pure$_t_string_memory_ptr_$returns$__$",
																					"typeString": "function (string memory) pure"
																				}
																			},
																			"id": 948,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "7453:20:3",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_tuple$__$",
																				"typeString": "tuple()"
																			}
																		},
																		"id": 949,
																		"nodeType": "ExpressionStatement",
																		"src": "7453:20:3"
																	}
																]
															},
															"id": 951,
															"nodeType": "IfStatement",
															"src": "7115:374:3",
															"trueBody": {
																"id": 945,
																"nodeType": "Block",
																"src": "7142:286:3",
																"statements": [
																	{
																		"AST": {
																			"nodeType": "YulBlock",
																			"src": "7265:148:3",
																			"statements": [
																				{
																					"nodeType": "YulVariableDeclaration",
																					"src": "7288:40:3",
																					"value": {
																						"arguments": [
																							{
																								"name": "returndata",
																								"nodeType": "YulIdentifier",
																								"src": "7317:10:3"
																							}
																						],
																						"functionName": {
																							"name": "mload",
																							"nodeType": "YulIdentifier",
																							"src": "7311:5:3"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "7311:17:3"
																					},
																					"variables": [
																						{
																							"name": "returndata_size",
																							"nodeType": "YulTypedName",
																							"src": "7292:15:3",
																							"type": ""
																						}
																					]
																				},
																				{
																					"expression": {
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "7361:2:3",
																										"type": "",
																										"value": "32"
																									},
																									{
																										"name": "returndata",
																										"nodeType": "YulIdentifier",
																										"src": "7365:10:3"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nodeType": "YulIdentifier",
																									"src": "7357:3:3"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "7357:19:3"
																							},
																							{
																								"name": "returndata_size",
																								"nodeType": "YulIdentifier",
																								"src": "7378:15:3"
																							}
																						],
																						"functionName": {
																							"name": "revert",
																							"nodeType": "YulIdentifier",
																							"src": "7350:6:3"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "7350:44:3"
																					},
																					"nodeType": "YulExpressionStatement",
																					"src": "7350:44:3"
																				}
																			]
																		},
																		"evmVersion": "london",
																		"externalReferences": [
																			{
																				"declaration": 929,
																				"isOffset": false,
																				"isSlot": false,
																				"src": "7317:10:3",
																				"valueSize": 1
																			},
																			{
																				"declaration": 929,
																				"isOffset": false,
																				"isSlot": false,
																				"src": "7365:10:3",
																				"valueSize": 1
																			}
																		],
																		"id": 944,
																		"nodeType": "InlineAssembly",
																		"src": "7256:157:3"
																	}
																]
															}
														}
													]
												},
												"id": 953,
												"nodeType": "IfStatement",
												"src": "6970:530:3",
												"trueBody": {
													"id": 939,
													"nodeType": "Block",
													"src": "6983:44:3",
													"statements": [
														{
															"expression": {
																"id": 937,
																"name": "returndata",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 929,
																"src": "7005:10:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"functionReturnParameters": 935,
															"id": 938,
															"nodeType": "Return",
															"src": "6998:17:3"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 925,
										"nodeType": "StructuredDocumentation",
										"src": "6575:214:3",
										"text": " @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n revert reason using the provided one.\n _Available since v4.3._"
									},
									"id": 955,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "verifyCallResult",
									"nameLocation": "6804:16:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 932,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 927,
												"mutability": "mutable",
												"name": "success",
												"nameLocation": "6836:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 955,
												"src": "6831:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 926,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "6831:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 929,
												"mutability": "mutable",
												"name": "returndata",
												"nameLocation": "6867:10:3",
												"nodeType": "VariableDeclaration",
												"scope": 955,
												"src": "6854:23:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 928,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6854:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 931,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "6902:12:3",
												"nodeType": "VariableDeclaration",
												"scope": 955,
												"src": "6888:26:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 930,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "6888:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6820:101:3"
									},
									"returnParameters": {
										"id": 935,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 934,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 955,
												"src": "6945:12:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 933,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6945:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6944:14:3"
									},
									"scope": 956,
									"src": "6795:712:3",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 957,
							"src": "202:7308:3",
							"usedErrors": []
						}
					],
					"src": "104:7408:3"
				},
				"id": 3
			},
			"Utils/ContextUpgradeable.sol": {
				"ast": {
					"absolutePath": "Utils/ContextUpgradeable.sol",
					"exportedSymbols": {
						"AddressUpgradeable": [
							956
						],
						"ContextUpgradeable": [
							998
						],
						"Initializable": [
							1140
						]
					},
					"id": 999,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 958,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "89:23:4"
						},
						{
							"absolutePath": "Utils/Initializable.sol",
							"file": "./Initializable.sol",
							"id": 959,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 999,
							"sourceUnit": 1141,
							"src": "114:29:4",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 961,
										"name": "Initializable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1140,
										"src": "694:13:4"
									},
									"id": 962,
									"nodeType": "InheritanceSpecifier",
									"src": "694:13:4"
								}
							],
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 960,
								"nodeType": "StructuredDocumentation",
								"src": "147:505:4",
								"text": " @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."
							},
							"fullyImplemented": true,
							"id": 998,
							"linearizedBaseContracts": [
								998,
								1140
							],
							"name": "ContextUpgradeable",
							"nameLocation": "672:18:4",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 967,
										"nodeType": "Block",
										"src": "767:8:4",
										"statements": []
									},
									"id": 968,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 965,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 964,
												"name": "onlyInitializing",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 1083,
												"src": "750:16:4"
											},
											"nodeType": "ModifierInvocation",
											"src": "750:16:4"
										}
									],
									"name": "__Context_init",
									"nameLocation": "724:14:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 963,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "738:2:4"
									},
									"returnParameters": {
										"id": 966,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "767:0:4"
									},
									"scope": 998,
									"src": "715:60:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 973,
										"nodeType": "Block",
										"src": "845:8:4",
										"statements": []
									},
									"id": 974,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 971,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 970,
												"name": "onlyInitializing",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 1083,
												"src": "828:16:4"
											},
											"nodeType": "ModifierInvocation",
											"src": "828:16:4"
										}
									],
									"name": "__Context_init_unchained",
									"nameLocation": "792:24:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 969,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "816:2:4"
									},
									"returnParameters": {
										"id": 972,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "845:0:4"
									},
									"scope": 998,
									"src": "783:70:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 982,
										"nodeType": "Block",
										"src": "921:36:4",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 979,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "939:3:4",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 980,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "sender",
													"nodeType": "MemberAccess",
													"src": "939:10:4",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 978,
												"id": 981,
												"nodeType": "Return",
												"src": "932:17:4"
											}
										]
									},
									"id": 983,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgSender",
									"nameLocation": "868:10:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 975,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "878:2:4"
									},
									"returnParameters": {
										"id": 978,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 977,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 983,
												"src": "912:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 976,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "912:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "911:9:4"
									},
									"scope": 998,
									"src": "859:98:4",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 991,
										"nodeType": "Block",
										"src": "1032:34:4",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 988,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "1050:3:4",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 989,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "data",
													"nodeType": "MemberAccess",
													"src": "1050:8:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_calldata_ptr",
														"typeString": "bytes calldata"
													}
												},
												"functionReturnParameters": 987,
												"id": 990,
												"nodeType": "Return",
												"src": "1043:15:4"
											}
										]
									},
									"id": 992,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgData",
									"nameLocation": "974:8:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 984,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "982:2:4"
									},
									"returnParameters": {
										"id": 987,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 986,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 992,
												"src": "1016:14:4",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 985,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "1016:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1015:16:4"
									},
									"scope": 998,
									"src": "965:101:4",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"constant": false,
									"documentation": {
										"id": 993,
										"nodeType": "StructuredDocumentation",
										"src": "1074:258:4",
										"text": " @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"
									},
									"id": 997,
									"mutability": "mutable",
									"name": "__gap",
									"nameLocation": "1358:5:4",
									"nodeType": "VariableDeclaration",
									"scope": 998,
									"src": "1338:25:4",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_array$_t_uint256_$50_storage",
										"typeString": "uint256[50]"
									},
									"typeName": {
										"baseType": {
											"id": 994,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "1338:7:4",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"id": 996,
										"length": {
											"hexValue": "3530",
											"id": 995,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "1346:2:4",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_50_by_1",
												"typeString": "int_const 50"
											},
											"value": "50"
										},
										"nodeType": "ArrayTypeName",
										"src": "1338:11:4",
										"typeDescriptions": {
											"typeIdentifier": "t_array$_t_uint256_$50_storage_ptr",
											"typeString": "uint256[50]"
										}
									},
									"visibility": "private"
								}
							],
							"scope": 999,
							"src": "654:713:4",
							"usedErrors": []
						}
					],
					"src": "89:1280:4"
				},
				"id": 4
			},
			"Utils/Initializable.sol": {
				"ast": {
					"absolutePath": "Utils/Initializable.sol",
					"exportedSymbols": {
						"AddressUpgradeable": [
							956
						],
						"Initializable": [
							1140
						]
					},
					"id": 1141,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1000,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".2"
							],
							"nodeType": "PragmaDirective",
							"src": "116:23:5"
						},
						{
							"absolutePath": "Utils/AddressUpgradeable.sol",
							"file": "./AddressUpgradeable.sol",
							"id": 1001,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1141,
							"sourceUnit": 957,
							"src": "143:34:5",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 1002,
								"nodeType": "StructuredDocumentation",
								"src": "181:2246:5",
								"text": " @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n case an upgrade adds a module that needs to be initialized.\n For example:\n [.hljs-theme-light.nopadding]\n ```\n contract MyToken is ERC20Upgradeable {\n     function initialize() initializer public {\n         __ERC20_init(\"MyToken\", \"MTK\");\n     }\n }\n contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n     function initializeV2() reinitializer(2) public {\n         __ERC20Permit_init(\"MyToken\");\n     }\n }\n ```\n TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n [CAUTION]\n ====\n Avoid leaving a contract uninitialized.\n An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n [.hljs-theme-light.nopadding]\n ```\n /// @custom:oz-upgrades-unsafe-allow constructor\n constructor() {\n     _disableInitializers();\n }\n ```\n ===="
							},
							"fullyImplemented": true,
							"id": 1140,
							"linearizedBaseContracts": [
								1140
							],
							"name": "Initializable",
							"nameLocation": "2447:13:5",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"documentation": {
										"id": 1003,
										"nodeType": "StructuredDocumentation",
										"src": "2468:112:5",
										"text": " @dev Indicates that the contract has been initialized.\n @custom:oz-retyped-from bool"
									},
									"id": 1005,
									"mutability": "mutable",
									"name": "_initialized",
									"nameLocation": "2600:12:5",
									"nodeType": "VariableDeclaration",
									"scope": 1140,
									"src": "2586:26:5",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint8",
										"typeString": "uint8"
									},
									"typeName": {
										"id": 1004,
										"name": "uint8",
										"nodeType": "ElementaryTypeName",
										"src": "2586:5:5",
										"typeDescriptions": {
											"typeIdentifier": "t_uint8",
											"typeString": "uint8"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"documentation": {
										"id": 1006,
										"nodeType": "StructuredDocumentation",
										"src": "2621:93:5",
										"text": " @dev Indicates that the contract is in the process of being initialized."
									},
									"id": 1008,
									"mutability": "mutable",
									"name": "_initializing",
									"nameLocation": "2733:13:5",
									"nodeType": "VariableDeclaration",
									"scope": 1140,
									"src": "2720:26:5",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bool",
										"typeString": "bool"
									},
									"typeName": {
										"id": 1007,
										"name": "bool",
										"nodeType": "ElementaryTypeName",
										"src": "2720:4:5",
										"typeDescriptions": {
											"typeIdentifier": "t_bool",
											"typeString": "bool"
										}
									},
									"visibility": "private"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1009,
										"nodeType": "StructuredDocumentation",
										"src": "2755:92:5",
										"text": " @dev Triggered when the contract has been initialized or reinitialized."
									},
									"id": 1013,
									"name": "Initialized",
									"nameLocation": "2859:11:5",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1012,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1011,
												"indexed": false,
												"mutability": "mutable",
												"name": "version",
												"nameLocation": "2877:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 1013,
												"src": "2871:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 1010,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "2871:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2870:15:5"
									},
									"src": "2853:33:5"
								},
								{
									"body": {
										"id": 1041,
										"nodeType": "Block",
										"src": "3168:267:5",
										"statements": [
											{
												"assignments": [
													1017
												],
												"declarations": [
													{
														"constant": false,
														"id": 1017,
														"mutability": "mutable",
														"name": "isTopLevelCall",
														"nameLocation": "3184:14:5",
														"nodeType": "VariableDeclaration",
														"scope": 1041,
														"src": "3179:19:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 1016,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "3179:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1021,
												"initialValue": {
													"arguments": [
														{
															"hexValue": "31",
															"id": 1019,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3224:1:5",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															}
														],
														"id": 1018,
														"name": "_setInitializedVersion",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1139,
														"src": "3201:22:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_uint8_$returns$_t_bool_$",
															"typeString": "function (uint8) returns (bool)"
														}
													},
													"id": 1020,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3201:25:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3179:47:5"
											},
											{
												"condition": {
													"id": 1022,
													"name": "isTopLevelCall",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1017,
													"src": "3241:14:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1028,
												"nodeType": "IfStatement",
												"src": "3237:67:5",
												"trueBody": {
													"id": 1027,
													"nodeType": "Block",
													"src": "3257:47:5",
													"statements": [
														{
															"expression": {
																"id": 1025,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 1023,
																	"name": "_initializing",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1008,
																	"src": "3272:13:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"hexValue": "74727565",
																	"id": 1024,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "3288:4:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																"src": "3272:20:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 1026,
															"nodeType": "ExpressionStatement",
															"src": "3272:20:5"
														}
													]
												}
											},
											{
												"id": 1029,
												"nodeType": "PlaceholderStatement",
												"src": "3314:1:5"
											},
											{
												"condition": {
													"id": 1030,
													"name": "isTopLevelCall",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1017,
													"src": "3330:14:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1040,
												"nodeType": "IfStatement",
												"src": "3326:102:5",
												"trueBody": {
													"id": 1039,
													"nodeType": "Block",
													"src": "3346:82:5",
													"statements": [
														{
															"expression": {
																"id": 1033,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 1031,
																	"name": "_initializing",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1008,
																	"src": "3361:13:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"hexValue": "66616c7365",
																	"id": 1032,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "3377:5:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "false"
																},
																"src": "3361:21:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 1034,
															"nodeType": "ExpressionStatement",
															"src": "3361:21:5"
														},
														{
															"eventCall": {
																"arguments": [
																	{
																		"hexValue": "31",
																		"id": 1036,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "3414:1:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_1_by_1",
																			"typeString": "int_const 1"
																		},
																		"value": "1"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_1_by_1",
																			"typeString": "int_const 1"
																		}
																	],
																	"id": 1035,
																	"name": "Initialized",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1013,
																	"src": "3402:11:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_event_nonpayable$_t_uint8_$returns$__$",
																		"typeString": "function (uint8)"
																	}
																},
																"id": 1037,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3402:14:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1038,
															"nodeType": "EmitStatement",
															"src": "3397:19:5"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1014,
										"nodeType": "StructuredDocumentation",
										"src": "2894:245:5",
										"text": " @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`."
									},
									"id": 1042,
									"name": "initializer",
									"nameLocation": "3154:11:5",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 1015,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3165:2:5"
									},
									"src": "3145:290:5",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1072,
										"nodeType": "Block",
										"src": "4264:279:5",
										"statements": [
											{
												"assignments": [
													1048
												],
												"declarations": [
													{
														"constant": false,
														"id": 1048,
														"mutability": "mutable",
														"name": "isTopLevelCall",
														"nameLocation": "4280:14:5",
														"nodeType": "VariableDeclaration",
														"scope": 1072,
														"src": "4275:19:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 1047,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "4275:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1052,
												"initialValue": {
													"arguments": [
														{
															"id": 1050,
															"name": "version",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1045,
															"src": "4320:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														],
														"id": 1049,
														"name": "_setInitializedVersion",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1139,
														"src": "4297:22:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_uint8_$returns$_t_bool_$",
															"typeString": "function (uint8) returns (bool)"
														}
													},
													"id": 1051,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4297:31:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4275:53:5"
											},
											{
												"condition": {
													"id": 1053,
													"name": "isTopLevelCall",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1048,
													"src": "4343:14:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1059,
												"nodeType": "IfStatement",
												"src": "4339:67:5",
												"trueBody": {
													"id": 1058,
													"nodeType": "Block",
													"src": "4359:47:5",
													"statements": [
														{
															"expression": {
																"id": 1056,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 1054,
																	"name": "_initializing",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1008,
																	"src": "4374:13:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"hexValue": "74727565",
																	"id": 1055,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "4390:4:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																"src": "4374:20:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 1057,
															"nodeType": "ExpressionStatement",
															"src": "4374:20:5"
														}
													]
												}
											},
											{
												"id": 1060,
												"nodeType": "PlaceholderStatement",
												"src": "4416:1:5"
											},
											{
												"condition": {
													"id": 1061,
													"name": "isTopLevelCall",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1048,
													"src": "4432:14:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1071,
												"nodeType": "IfStatement",
												"src": "4428:108:5",
												"trueBody": {
													"id": 1070,
													"nodeType": "Block",
													"src": "4448:88:5",
													"statements": [
														{
															"expression": {
																"id": 1064,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 1062,
																	"name": "_initializing",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1008,
																	"src": "4463:13:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"hexValue": "66616c7365",
																	"id": 1063,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "4479:5:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "false"
																},
																"src": "4463:21:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 1065,
															"nodeType": "ExpressionStatement",
															"src": "4463:21:5"
														},
														{
															"eventCall": {
																"arguments": [
																	{
																		"id": 1067,
																		"name": "version",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1045,
																		"src": "4516:7:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	],
																	"id": 1066,
																	"name": "Initialized",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1013,
																	"src": "4504:11:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_event_nonpayable$_t_uint8_$returns$__$",
																		"typeString": "function (uint8)"
																	}
																},
																"id": 1068,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4504:20:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1069,
															"nodeType": "EmitStatement",
															"src": "4499:25:5"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1043,
										"nodeType": "StructuredDocumentation",
										"src": "3443:777:5",
										"text": " @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n used to initialize parent contracts.\n `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n initialization step. This is essential to configure modules that are added through upgrades and that require\n initialization.\n Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n a contract, executing them in the right order is up to the developer or operator."
									},
									"id": 1073,
									"name": "reinitializer",
									"nameLocation": "4235:13:5",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 1046,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1045,
												"mutability": "mutable",
												"name": "version",
												"nameLocation": "4255:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 1073,
												"src": "4249:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 1044,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "4249:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4248:15:5"
									},
									"src": "4226:317:5",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1082,
										"nodeType": "Block",
										"src": "4787:100:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1077,
															"name": "_initializing",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1008,
															"src": "4806:13:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "496e697469616c697a61626c653a20636f6e7472616374206973206e6f7420696e697469616c697a696e67",
															"id": 1078,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4821:45:5",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b",
																"typeString": "literal_string \"Initializable: contract is not initializing\""
															},
															"value": "Initializable: contract is not initializing"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b",
																"typeString": "literal_string \"Initializable: contract is not initializing\""
															}
														],
														"id": 1076,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "4798:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1079,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4798:69:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1080,
												"nodeType": "ExpressionStatement",
												"src": "4798:69:5"
											},
											{
												"id": 1081,
												"nodeType": "PlaceholderStatement",
												"src": "4878:1:5"
											}
										]
									},
									"documentation": {
										"id": 1074,
										"nodeType": "StructuredDocumentation",
										"src": "4551:202:5",
										"text": " @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n {initializer} and {reinitializer} modifiers, directly or indirectly."
									},
									"id": 1083,
									"name": "onlyInitializing",
									"nameLocation": "4768:16:5",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 1075,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4784:2:5"
									},
									"src": "4759:128:5",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1095,
										"nodeType": "Block",
										"src": "5343:58:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 1090,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "5382:5:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_uint8_$",
																			"typeString": "type(uint8)"
																		},
																		"typeName": {
																			"id": 1089,
																			"name": "uint8",
																			"nodeType": "ElementaryTypeName",
																			"src": "5382:5:5",
																			"typeDescriptions": {}
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_type$_t_uint8_$",
																			"typeString": "type(uint8)"
																		}
																	],
																	"id": 1088,
																	"name": "type",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967269,
																	"src": "5377:4:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 1091,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "5377:11:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_meta_type_t_uint8",
																	"typeString": "type(uint8)"
																}
															},
															"id": 1092,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"memberName": "max",
															"nodeType": "MemberAccess",
															"src": "5377:15:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														],
														"id": 1087,
														"name": "_setInitializedVersion",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1139,
														"src": "5354:22:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_uint8_$returns$_t_bool_$",
															"typeString": "function (uint8) returns (bool)"
														}
													},
													"id": 1093,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5354:39:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1094,
												"nodeType": "ExpressionStatement",
												"src": "5354:39:5"
											}
										]
									},
									"documentation": {
										"id": 1084,
										"nodeType": "StructuredDocumentation",
										"src": "4895:393:5",
										"text": " @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n through proxies."
									},
									"id": 1096,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_disableInitializers",
									"nameLocation": "5303:20:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1085,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5323:2:5"
									},
									"returnParameters": {
										"id": 1086,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5343:0:5"
									},
									"scope": 1140,
									"src": "5294:107:5",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1138,
										"nodeType": "Block",
										"src": "5479:753:5",
										"statements": [
											{
												"condition": {
													"id": 1103,
													"name": "_initializing",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1008,
													"src": "5810:13:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 1136,
													"nodeType": "Block",
													"src": "6054:171:5",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		},
																		"id": 1126,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1124,
																			"name": "_initialized",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1005,
																			"src": "6077:12:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint8",
																				"typeString": "uint8"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "<",
																		"rightExpression": {
																			"id": 1125,
																			"name": "version",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1098,
																			"src": "6092:7:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint8",
																				"typeString": "uint8"
																			}
																		},
																		"src": "6077:22:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	{
																		"hexValue": "496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564",
																		"id": 1127,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "6101:48:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759",
																			"typeString": "literal_string \"Initializable: contract is already initialized\""
																		},
																		"value": "Initializable: contract is already initialized"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		{
																			"typeIdentifier": "t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759",
																			"typeString": "literal_string \"Initializable: contract is already initialized\""
																		}
																	],
																	"id": 1123,
																	"name": "require",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967278,
																		4294967278
																	],
																	"referencedDeclaration": 4294967278,
																	"src": "6069:7:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bool,string memory) pure"
																	}
																},
																"id": 1128,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "6069:81:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1129,
															"nodeType": "ExpressionStatement",
															"src": "6069:81:5"
														},
														{
															"expression": {
																"id": 1132,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 1130,
																	"name": "_initialized",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1005,
																	"src": "6165:12:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"id": 1131,
																	"name": "version",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1098,
																	"src": "6180:7:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																},
																"src": "6165:22:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"id": 1133,
															"nodeType": "ExpressionStatement",
															"src": "6165:22:5"
														},
														{
															"expression": {
																"hexValue": "74727565",
																"id": 1134,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "6209:4:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "true"
															},
															"functionReturnParameters": 1102,
															"id": 1135,
															"nodeType": "Return",
															"src": "6202:11:5"
														}
													]
												},
												"id": 1137,
												"nodeType": "IfStatement",
												"src": "5806:419:5",
												"trueBody": {
													"id": 1122,
													"nodeType": "Block",
													"src": "5825:223:5",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"id": 1116,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"commonType": {
																				"typeIdentifier": "t_uint8",
																				"typeString": "uint8"
																			},
																			"id": 1107,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 1105,
																				"name": "version",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1098,
																				"src": "5866:7:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint8",
																					"typeString": "uint8"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "==",
																			"rightExpression": {
																				"hexValue": "31",
																				"id": 1106,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "5877:1:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_1_by_1",
																					"typeString": "int_const 1"
																				},
																				"value": "1"
																			},
																			"src": "5866:12:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "&&",
																		"rightExpression": {
																			"id": 1115,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "UnaryOperation",
																			"operator": "!",
																			"prefix": true,
																			"src": "5882:45:5",
																			"subExpression": {
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"id": 1112,
																								"name": "this",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 4294967268,
																								"src": "5921:4:5",
																								"typeDescriptions": {
																									"typeIdentifier": "t_contract$_Initializable_$1140",
																									"typeString": "contract Initializable"
																								}
																							}
																						],
																						"expression": {
																							"argumentTypes": [
																								{
																									"typeIdentifier": "t_contract$_Initializable_$1140",
																									"typeString": "contract Initializable"
																								}
																							],
																							"id": 1111,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"lValueRequested": false,
																							"nodeType": "ElementaryTypeNameExpression",
																							"src": "5913:7:5",
																							"typeDescriptions": {
																								"typeIdentifier": "t_type$_t_address_$",
																								"typeString": "type(address)"
																							},
																							"typeName": {
																								"id": 1110,
																								"name": "address",
																								"nodeType": "ElementaryTypeName",
																								"src": "5913:7:5",
																								"typeDescriptions": {}
																							}
																						},
																						"id": 1113,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"kind": "typeConversion",
																						"lValueRequested": false,
																						"names": [],
																						"nodeType": "FunctionCall",
																						"src": "5913:13:5",
																						"tryCall": false,
																						"typeDescriptions": {
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						}
																					],
																					"expression": {
																						"id": 1108,
																						"name": "AddressUpgradeable",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 956,
																						"src": "5883:18:5",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_contract$_AddressUpgradeable_$956_$",
																							"typeString": "type(library AddressUpgradeable)"
																						}
																					},
																					"id": 1109,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"memberName": "isContract",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 731,
																					"src": "5883:29:5",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
																						"typeString": "function (address) view returns (bool)"
																					}
																				},
																				"id": 1114,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "5883:44:5",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"src": "5866:61:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	{
																		"hexValue": "496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564",
																		"id": 1117,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "5946:48:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759",
																			"typeString": "literal_string \"Initializable: contract is already initialized\""
																		},
																		"value": "Initializable: contract is already initialized"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		{
																			"typeIdentifier": "t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759",
																			"typeString": "literal_string \"Initializable: contract is already initialized\""
																		}
																	],
																	"id": 1104,
																	"name": "require",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967278,
																		4294967278
																	],
																	"referencedDeclaration": 4294967278,
																	"src": "5840:7:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bool,string memory) pure"
																	}
																},
																"id": 1118,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "5840:169:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1119,
															"nodeType": "ExpressionStatement",
															"src": "5840:169:5"
														},
														{
															"expression": {
																"hexValue": "66616c7365",
																"id": 1120,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "6031:5:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "false"
															},
															"functionReturnParameters": 1102,
															"id": 1121,
															"nodeType": "Return",
															"src": "6024:12:5"
														}
													]
												}
											}
										]
									},
									"id": 1139,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_setInitializedVersion",
									"nameLocation": "5418:22:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1099,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1098,
												"mutability": "mutable",
												"name": "version",
												"nameLocation": "5447:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 1139,
												"src": "5441:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 1097,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "5441:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5440:15:5"
									},
									"returnParameters": {
										"id": 1102,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1101,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1139,
												"src": "5473:4:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1100,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "5473:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5472:6:5"
									},
									"scope": 1140,
									"src": "5409:823:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								}
							],
							"scope": 1141,
							"src": "2429:3806:5",
							"usedErrors": []
						}
					],
					"src": "116:6119:5"
				},
				"id": 5
			}
		}
	}
}